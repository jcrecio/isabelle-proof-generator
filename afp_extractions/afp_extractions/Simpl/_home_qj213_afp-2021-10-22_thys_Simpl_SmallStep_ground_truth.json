{"file_name": "/home/qj213/afp-2021-10-22/thys/Simpl/SmallStep.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simpl", "problem_names": ["lemmas step_induct = step.induct [of _ \"(c,s)\" \"(c',s')\", split_format (complete), case_names\nBasic Spec SpecStuck Guard GuardFault Seq SeqSkip SeqThrow CondTrue CondFalse\nWhileTrue WhileFalse Call CallUndefined DynCom Catch CatchThrow CatchSkip\nFaultProp StuckProp AbruptProp, induct set]", "lemma redex_not_Seq: \"redex c = Seq c1 c2 \\<Longrightarrow> P\"", "lemma no_step_final:\n  assumes step: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s')\"\n  shows \"final (c,s) \\<Longrightarrow> P\"", "lemma no_step_final':\n  assumes step: \"\\<Gamma>\\<turnstile>cfg \\<rightarrow> cfg'\"\n  shows \"final cfg \\<Longrightarrow> P\"", "lemma step_Abrupt:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>x. s=Abrupt x \\<Longrightarrow> s'=Abrupt x\"", "lemma step_Fault:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\"", "lemma step_Stuck:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Stuck \\<Longrightarrow> s'=Stuck\"", "lemma SeqSteps:\n  assumes steps: \"\\<Gamma>\\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s);cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma>\\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Seq c\\<^sub>1' c\\<^sub>2, s')\"", "lemma CatchSteps:\n  assumes steps: \"\\<Gamma>\\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s); cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1' c\\<^sub>2, s')\"", "lemma steps_Fault: \"\\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\"", "lemma steps_Stuck: \"\\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\"", "lemma steps_Abrupt: \"\\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>* (Skip, Abrupt s)\"", "lemma step_Fault_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\"", "lemma step_Abrupt_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>x. s=Abrupt x \\<Longrightarrow> s'=Abrupt x\"", "lemma step_Stuck_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\"", "lemma steps_Fault_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Fault f \\<Longrightarrow> s'=Fault f\"", "lemma steps_Abrupt_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Abrupt t \\<Longrightarrow> s'=Abrupt t\"", "lemma steps_Stuck_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\"", "theorem exec_impl_steps:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<exists>c' t'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',t') \\<and>\n               (case t of\n                 Abrupt x \\<Rightarrow> if s=t then c'=Skip \\<and> t'=t else c'=Throw \\<and> t'=Normal x\n                | _ \\<Rightarrow> c'=Skip \\<and> t'=t)\"", "lemma step_Abrupt_end:\n  assumes step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\"\n  shows \"s'=Abrupt x \\<Longrightarrow> s=Abrupt x\"", "lemma step_Stuck_end:\n  assumes step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\"\n  shows \"s'=Stuck \\<Longrightarrow>\n          s=Stuck \\<or>\n          (\\<exists>r x. redex c\\<^sub>1 = Spec r \\<and> s=Normal x \\<and> (\\<forall>t. (x,t)\\<notin>r)) \\<or>\n          (\\<exists>p x. redex c\\<^sub>1=Call p \\<and> s=Normal x \\<and> \\<Gamma> p = None)\"", "lemma step_Fault_end:\n  assumes step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\"\n  shows \"s'=Fault f \\<Longrightarrow>\n          s=Fault f \\<or>\n          (\\<exists>g c x. redex c\\<^sub>1 = Guard f g c \\<and> s=Normal x \\<and> x \\<notin> g)\"", "lemma exec_redex_Stuck:\n\"\\<Gamma>\\<turnstile>\\<langle>redex c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Stuck\"", "lemma exec_redex_Fault:\n\"\\<Gamma>\\<turnstile>\\<langle>redex c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Fault f\"", "lemma step_extend:\n  assumes step: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>t. \\<Gamma>\\<turnstile>\\<langle>c',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"", "theorem steps_Skip_impl_exec:\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Skip,t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"", "theorem steps_Throw_impl_exec:\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Throw,Normal t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Abrupt t\"", "lemma not_infI: \"\\<lbrakk>\\<And>f. \\<lbrakk>f 0 = cfg; \\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\\<rbrakk> \\<Longrightarrow> False\\<rbrakk>\n                \\<Longrightarrow> \\<not>\\<Gamma>\\<turnstile> cfg \\<rightarrow> \\<dots>(\\<infinity>)\"", "lemma step_preserves_termination:\n  assumes step: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s')\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s'\"", "lemma steps_preserves_termination:\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s')\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s'\"", "lemma steps_preserves_termination':\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s')\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s'\"", "lemma le_Suc_cases: \"\\<lbrakk>\\<And>i. \\<lbrakk>i < k\\<rbrakk> \\<Longrightarrow> P i; P k\\<rbrakk> \\<Longrightarrow> \\<forall>i<(Suc k). P i\"", "lemma redex_Seq_False: \"\\<And>c' c''. (redex c = Seq c'' c') = False\"", "lemma redex_Catch_False: \"\\<And>c' c''. (redex c = Catch c'' c') = False\"", "lemma infinite_computation_extract_head_Seq:\n  assumes inf_comp: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\"\n  assumes f_0: \"f 0 = (Seq c\\<^sub>1 c\\<^sub>2,s)\"\n  assumes not_fin: \"\\<forall>i<k. \\<not> final (head (f i))\"\n  shows \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n               \\<Gamma>\\<turnstile>head (f i) \\<rightarrow> head (f (i+1))\"\n        (is \"\\<forall>i<k. ?P i\")", "lemma infinite_computation_extract_head_Catch:\n  assumes inf_comp: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\"\n  assumes f_0: \"f 0 = (Catch c\\<^sub>1 c\\<^sub>2,s)\"\n  assumes not_fin: \"\\<forall>i<k. \\<not> final (head (f i))\"\n  shows \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n               \\<Gamma>\\<turnstile>head (f i) \\<rightarrow> head (f (i+1))\"\n        (is \"\\<forall>i<k. ?P i\")", "lemma no_inf_Throw: \"\\<not> \\<Gamma>\\<turnstile>(Throw,s) \\<rightarrow> \\<dots>(\\<infinity>)\"", "lemma split_inf_Seq:\n  assumes inf_comp: \"\\<Gamma>\\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n         (\\<exists>s'. \\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Skip,s') \\<and> \\<Gamma>\\<turnstile>(c\\<^sub>2,s') \\<rightarrow> \\<dots>(\\<infinity>))\"", "lemma split_inf_Catch:\n  assumes inf_comp: \"\\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n         (\\<exists>s'. \\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Throw,Normal s') \\<and> \\<Gamma>\\<turnstile>(c\\<^sub>2,Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\"", "lemma Skip_no_step: \"\\<Gamma>\\<turnstile>(Skip,s) \\<rightarrow> cfg \\<Longrightarrow> P\"", "lemma not_inf_Stuck: \"\\<not> \\<Gamma>\\<turnstile>(c,Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\"", "lemma not_inf_Fault: \"\\<not> \\<Gamma>\\<turnstile>(c,Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\"", "lemma not_inf_Abrupt: \"\\<not> \\<Gamma>\\<turnstile>(c,Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\"", "theorem terminates_impl_no_infinite_computation:\n  assumes termi: \"\\<Gamma>\\<turnstile>c \\<down> s\"\n  shows \"\\<not> \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> \\<dots>(\\<infinity>)\"", "lemma subst_redex_redex:\n  \"subst_redex c (redex c) = c\"", "lemma redex_subst_redex: \"redex (subst_redex c r) = redex r\"", "lemma step_redex':\n  shows \"\\<Gamma>\\<turnstile>(redex c,s) \\<rightarrow> (r',s') \\<Longrightarrow> \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (subst_redex c r',s')\"", "lemma step_redex:\n  shows \"\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s') \\<Longrightarrow> \\<Gamma>\\<turnstile>(subst_redex c r,s) \\<rightarrow> (subst_redex c r',s')\"", "lemma steps_redex:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. \\<Gamma>\\<turnstile>(subst_redex c r,s) \\<rightarrow>\\<^sup>* (subst_redex c r',s')\"", "lemma steps_redex':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. \\<Gamma>\\<turnstile>(subst_redex c r,s) \\<rightarrow>\\<^sup>+ (subst_redex c r',s')\"", "lemma renumber':\n  assumes f: \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\"\n  assumes a_b: \"(a,b) \\<in> r\\<^sup>*\"\n  shows \"b = f 0 \\<Longrightarrow> (\\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r))\"", "lemma renumber:\n \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\n \\<Longrightarrow> \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r)\"", "lemma lem:\n  \"\\<forall>y. r\\<^sup>+\\<^sup>+ a y \\<longrightarrow> P a \\<longrightarrow> P y\n   \\<Longrightarrow> ((b,a) \\<in> {(y,x). P x \\<and> r x y}\\<^sup>+) = ((b,a) \\<in> {(y,x). P x \\<and> r\\<^sup>+\\<^sup>+ x y})\"", "theorem wf_termi_call_steps: \"wf (termi_call_steps \\<Gamma>)\"", "lemma no_infinite_computation_implies_wf:\n  assumes not_inf: \"\\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"wf {(c2,c1). \\<Gamma> \\<turnstile> (c,s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma> \\<turnstile> c1 \\<rightarrow> c2}\"", "lemma not_final_Stuck_step: \"\\<not> final (c,Stuck) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> (c',s')\"", "lemma not_final_Abrupt_step:\n  \"\\<not> final (c,Abrupt s) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow> (c',s')\"", "lemma not_final_Fault_step:\n  \"\\<not> final (c,Fault f) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow> (c',s')\"", "lemma not_final_Normal_step:\n  \"\\<not> final (c,Normal s) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c',s')\"", "lemma final_termi:\n\"final (c,s) \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<down>s\"", "lemma split_computation:\nassumes steps: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\"\nassumes not_final: \"\\<not> final (c,s)\"\nassumes final: \"final (c\\<^sub>f,s\\<^sub>f)\"\nshows \"\\<exists>c' s'. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c',s') \\<and> \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\"", "lemma wf_implies_termi_reach_step_case:\nassumes hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\"\nshows \"\\<Gamma>\\<turnstile>c \\<down> Normal s\"", "lemma wf_implies_termi_reach:\nassumes wf: \"wf {(cfg2,cfg1). \\<Gamma> \\<turnstile> (c,s) \\<rightarrow>\\<^sup>* cfg1 \\<and> \\<Gamma> \\<turnstile> cfg1 \\<rightarrow> cfg2}\"\nshows \"\\<And>c1 s1. \\<lbrakk>\\<Gamma> \\<turnstile> (c,s) \\<rightarrow>\\<^sup>* cfg1;  cfg1=(c1,s1)\\<rbrakk>\\<Longrightarrow> \\<Gamma>\\<turnstile>c1\\<down>s1\"", "theorem no_infinite_computation_impl_terminates:\n  assumes not_inf: \"\\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s\"", "lemma root_in_redexes: \"c \\<in> redexes c\"", "lemma redex_in_redexes: \"redex c \\<in> redexes c\"", "lemma redex_redexes: \"\\<And>c'. \\<lbrakk>c' \\<in> redexes c; redex c' = c'\\<rbrakk> \\<Longrightarrow> redex c = c'\"", "lemma step_redexes:\n  shows \"\\<And>r r'. \\<lbrakk>\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s'); r \\<in> redexes c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s') \\<and> r' \\<in> redexes c'\"", "lemma steps_redexes:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. r \\<in> redexes c \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s') \\<and> r' \\<in> redexes c'\"", "lemma steps_redexes':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. r \\<in> redexes c \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s') \\<and> r' \\<in> redexes c'\"", "lemma step_redexes_Seq:\n  assumes step: \"\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s')\"\n  assumes Seq: \"Seq r c\\<^sub>2 \\<in> redexes c\"\n  shows \"\\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s') \\<and> Seq r' c\\<^sub>2 \\<in> redexes c'\"", "lemma steps_redexes_Seq:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n              \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s') \\<and> Seq r' c\\<^sub>2 \\<in> redexes c'\"", "lemma steps_redexes_Seq':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. Seq r c\\<^sub>2 \\<in> redexes c\n             \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s') \\<and> Seq r' c\\<^sub>2 \\<in> redexes c'\"", "lemma step_redexes_Catch:\n  assumes step: \"\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s')\"\n  assumes Catch: \"Catch r c\\<^sub>2 \\<in> redexes c\"\n  shows \"\\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s') \\<and> Catch r' c\\<^sub>2 \\<in> redexes c'\"", "lemma steps_redexes_Catch:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n              \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s') \\<and> Catch r' c\\<^sub>2 \\<in> redexes c'\"", "lemma steps_redexes_Catch':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. Catch r c\\<^sub>2 \\<in> redexes c\n             \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s') \\<and> Catch r' c\\<^sub>2 \\<in> redexes c'\"", "lemma redexes_subset:\"\\<And>c'. c' \\<in> redexes c \\<Longrightarrow> redexes c' \\<subseteq> redexes c\"", "lemma redexes_preserves_termination:\n  assumes termi: \"\\<Gamma>\\<turnstile>c\\<down>s\"\n  shows \"\\<And>c'. c' \\<in> redexes c \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s\""], "translations": [["", "lemmas step_induct = step.induct [of _ \"(c,s)\" \"(c',s')\", split_format (complete), case_names\nBasic Spec SpecStuck Guard GuardFault Seq SeqSkip SeqThrow CondTrue CondFalse\nWhileTrue WhileFalse Call CallUndefined DynCom Catch CatchThrow CatchSkip\nFaultProp StuckProp AbruptProp, induct set]"], ["", "inductive_cases step_elim_cases [cases set]:\n \"\\<Gamma>\\<turnstile>(Skip,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Guard f g c,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Basic f,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Spec r,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Seq c1 c2,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Cond b c1 c2,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(While b c,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Call p,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(DynCom c,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Throw,s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Catch c1 c2,s) \\<rightarrow> u\""], ["", "inductive_cases step_Normal_elim_cases [cases set]:\n \"\\<Gamma>\\<turnstile>(Skip,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Guard f g c,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Basic f,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Spec r,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Seq c1 c2,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Cond b c1 c2,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(While b c,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Call p,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(DynCom c,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Throw,Normal s) \\<rightarrow> u\"\n \"\\<Gamma>\\<turnstile>(Catch c1 c2,Normal s) \\<rightarrow> u\""], ["", "text \\<open>The final configuration is either of the form \\<open>(Skip,_)\\<close> for normal\ntermination, or @{term \"(Throw,Normal s)\"} in case the program was started in\na @{term \"Normal\"} state and terminated abruptly. The @{const \"Abrupt\"} state is not used to\nmodel abrupt termination, in contrast to the big-step semantics. Only if the\nprogram starts in an @{const \"Abrupt\"} states it ends in the same @{term \"Abrupt\"}\nstate.\\<close>"], ["", "definition final:: \"('s,'p,'f) config \\<Rightarrow> bool\" where\n\"final cfg = (fst cfg=Skip \\<or> (fst cfg=Throw \\<and> (\\<exists>s. snd cfg=Normal s)))\""], ["", "abbreviation\n \"step_rtrancl\" :: \"[('s,'p,'f) body,('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>\\<^sup>*/ _)\" [81,81,81] 100)\n where\n  \"\\<Gamma>\\<turnstile>cf0 \\<rightarrow>\\<^sup>* cf1 \\<equiv> (CONST step \\<Gamma>)\\<^sup>*\\<^sup>* cf0 cf1\""], ["", "abbreviation\n \"step_trancl\" :: \"[('s,'p,'f) body,('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>\\<^sup>+/ _)\" [81,81,81] 100)\n where\n  \"\\<Gamma>\\<turnstile>cf0 \\<rightarrow>\\<^sup>+ cf1 \\<equiv> (CONST step \\<Gamma>)\\<^sup>+\\<^sup>+ cf0 cf1\""], ["", "(* ************************************************************************ *)"], ["", "subsection \\<open>Structural Properties of Small Step Computations\\<close>"], ["", "(* ************************************************************************ *)"], ["", "lemma redex_not_Seq: \"redex c = Seq c1 c2 \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redex c = Seq c1 c2 \\<Longrightarrow> P", "apply (induct c)"], ["proof (prove)\ngoal (11 subgoals):\n 1. redex Skip = Seq c1 c2 \\<Longrightarrow> P\n 2. \\<And>x. redex (Basic x) = Seq c1 c2 \\<Longrightarrow> P\n 3. \\<And>x. redex (Spec x) = Seq c1 c2 \\<Longrightarrow> P\n 4. \\<And>c1a c2a.\n       \\<lbrakk>redex c1a = Seq c1 c2 \\<Longrightarrow> P;\n        redex c2a = Seq c1 c2 \\<Longrightarrow> P;\n        redex (Seq c1a c2a) = Seq c1 c2\\<rbrakk>\n       \\<Longrightarrow> P\n 5. \\<And>x1 c1a c2a.\n       \\<lbrakk>redex c1a = Seq c1 c2 \\<Longrightarrow> P;\n        redex c2a = Seq c1 c2 \\<Longrightarrow> P;\n        redex (Cond x1 c1a c2a) = Seq c1 c2\\<rbrakk>\n       \\<Longrightarrow> P\n 6. \\<And>x1 c.\n       \\<lbrakk>redex c = Seq c1 c2 \\<Longrightarrow> P;\n        redex (While x1 c) = Seq c1 c2\\<rbrakk>\n       \\<Longrightarrow> P\n 7. \\<And>x. redex (Call x) = Seq c1 c2 \\<Longrightarrow> P\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x; redex xa = Seq c1 c2\\<rbrakk>\n                   \\<Longrightarrow> P;\n        redex (DynCom x) = Seq c1 c2\\<rbrakk>\n       \\<Longrightarrow> P\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>redex c = Seq c1 c2 \\<Longrightarrow> P;\n        redex (Guard x1 x2a c) = Seq c1 c2\\<rbrakk>\n       \\<Longrightarrow> P\n 10. redex Throw = Seq c1 c2 \\<Longrightarrow> P\nA total of 11 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma no_step_final:\n  assumes step: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s')\"\n  shows \"final (c,s) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final (c, s) \\<Longrightarrow> P", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. final (c, s) \\<Longrightarrow> P", "by induct (auto simp add: final_def)"], ["", "lemma no_step_final':\n  assumes step: \"\\<Gamma>\\<turnstile>cfg \\<rightarrow> cfg'\"\n  shows \"final cfg \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final cfg \\<Longrightarrow> P", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg \\<rightarrow> cfg'\n\ngoal (1 subgoal):\n 1. final cfg \\<Longrightarrow> P", "by (cases cfg, cases cfg') (auto intro: no_step_final)"], ["", "lemma step_Abrupt:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>x. s=Abrupt x \\<Longrightarrow> s'=Abrupt x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. s = Abrupt x \\<Longrightarrow> s' = Abrupt x", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>x. s = Abrupt x \\<Longrightarrow> s' = Abrupt x", "by (induct) auto"], ["", "lemma step_Fault:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "by (induct) auto"], ["", "lemma step_Stuck:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Stuck \\<Longrightarrow> s'=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. s = Stuck \\<Longrightarrow> s' = Stuck", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>f. s = Stuck \\<Longrightarrow> s' = Stuck", "by (induct) auto"], ["", "lemma SeqSteps:\n  assumes steps: \"\\<Gamma>\\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s);cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma>\\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Seq c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "proof (induct rule: converse_rtranclp_induct [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "case Refl"], ["proof (state)\nthis:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "thus ?case"], ["proof (prove)\nusing this:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                         (Seq c\\<^sub>1' c\\<^sub>2, s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "case (Trans cfg\\<^sub>1 cfg'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  \\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n  \\<lbrakk>cfg'' = (?c\\<^sub>1, ?s);\n   cfg\\<^sub>2 = (?c\\<^sub>1', ?s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq ?c\\<^sub>1 c\\<^sub>2,\n    ?s) \\<rightarrow>\\<^sup>*\n   (Seq ?c\\<^sub>1' c\\<^sub>2, ?s')\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "have step: \"\\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "have steps: \"\\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "have cfg\\<^sub>1: \"cfg\\<^sub>1 = (c\\<^sub>1, s)\" and cfg\\<^sub>2: \"cfg\\<^sub>2 = (c\\<^sub>1', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfg\\<^sub>1 = (c\\<^sub>1, s) &&& cfg\\<^sub>2 = (c\\<^sub>1', s')", "by fact+"], ["proof (state)\nthis:\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "obtain c\\<^sub>1'' s'' where cfg'': \"cfg''=(c\\<^sub>1'',s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1'' s''.\n        cfg'' = (c\\<^sub>1'', s'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases cfg'') auto"], ["proof (state)\nthis:\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "from step cfg\\<^sub>1 cfg''"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')", "have \"\\<Gamma>\\<turnstile> (c\\<^sub>1,s) \\<rightarrow> (c\\<^sub>1'',s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "hence \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> (Seq c\\<^sub>1'' c\\<^sub>2,s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                         (Seq c\\<^sub>1'' c\\<^sub>2, s'')", "by (rule step.Seq)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "from Trans.hyps (3) [OF cfg'' cfg\\<^sub>2]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                        s'') \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2, s'') \\<rightarrow>\\<^sup>* (Seq c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                        s'') \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                          s'') \\<rightarrow>\\<^sup>*\n                         (Seq c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                        s'') \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Seq c\\<^sub>1' c\\<^sub>2, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                         (Seq c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CatchSteps:\n  assumes steps: \"\\<Gamma>\\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s); cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "proof (induct rule: converse_rtranclp_induct [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "case Refl"], ["proof (state)\nthis:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "thus ?case"], ["proof (prove)\nusing this:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          s) \\<rightarrow>\\<^sup>*\n                         (Catch c\\<^sub>1' c\\<^sub>2, s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "case (Trans cfg\\<^sub>1 cfg'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  \\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n  \\<lbrakk>cfg'' = (?c\\<^sub>1, ?s);\n   cfg\\<^sub>2 = (?c\\<^sub>1', ?s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch ?c\\<^sub>1 c\\<^sub>2,\n    ?s) \\<rightarrow>\\<^sup>*\n   (Catch ?c\\<^sub>1' c\\<^sub>2, ?s')\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "have step: \"\\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "have steps: \"\\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "have cfg\\<^sub>1: \"cfg\\<^sub>1 = (c\\<^sub>1, s)\" and cfg\\<^sub>2: \"cfg\\<^sub>2 = (c\\<^sub>1', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfg\\<^sub>1 = (c\\<^sub>1, s) &&& cfg\\<^sub>2 = (c\\<^sub>1', s')", "by fact+"], ["proof (state)\nthis:\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "obtain c\\<^sub>1'' s'' where cfg'': \"cfg''=(c\\<^sub>1'',s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1'' s''.\n        cfg'' = (c\\<^sub>1'', s'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases cfg'') auto"], ["proof (state)\nthis:\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "from step cfg\\<^sub>1 cfg''"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')", "have s: \"\\<Gamma>\\<turnstile> (c\\<^sub>1,s) \\<rightarrow> (c\\<^sub>1'',s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "hence \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> (Catch c\\<^sub>1'' c\\<^sub>2,s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                         (Catch c\\<^sub>1'' c\\<^sub>2, s'')", "by (rule step.Catch)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "from Trans.hyps (3) [OF cfg'' cfg\\<^sub>2]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                        s'') \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2, s'') \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                        s'') \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                          s'') \\<rightarrow>\\<^sup>*\n                         (Catch c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                        s'') \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma>\\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             s) \\<rightarrow>\\<^sup>*\n            (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n         s) \\<rightarrow>\\<^sup>*\n        (Catch c\\<^sub>1' c\\<^sub>2, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          s) \\<rightarrow>\\<^sup>*\n                         (Catch c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                       (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_Fault: \"\\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "have steps_c\\<^sub>2: \"\\<Gamma>\\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "from SeqSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Seq Skip ?c\\<^sub>2, Fault f)", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>* (Seq Skip c\\<^sub>2, Fault f)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Seq Skip ?c\\<^sub>2, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Fault f) \\<rightarrow>\\<^sup>*\n                         (Seq Skip c\\<^sub>2, Fault f)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "have \"\\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow> (c\\<^sub>2, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                         (c\\<^sub>2, Fault f)", "by (rule SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                       (c\\<^sub>2, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                       (c\\<^sub>2, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 10. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\nA total of 11 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "have steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "from CatchSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Catch Skip ?c\\<^sub>2, Fault f)", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>* (Catch Skip c\\<^sub>2, Fault f)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Catch Skip ?c\\<^sub>2, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Fault f) \\<rightarrow>\\<^sup>*\n                         (Catch Skip c\\<^sub>2, Fault f)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, Fault f)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, Fault f)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "have \"\\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Fault f) \\<rightarrow> (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                         (Skip, Fault f)", "by (rule CatchSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                       (Skip, Fault f)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n         \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Fault f) \\<rightarrow>\\<^sup>*\n                       (Skip, Fault f)\n\ngoal (9 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n                                     (Skip, Fault f);\n        \\<Gamma>\\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Fault f) \\<rightarrow>\\<^sup>*\n        (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                            (Skip, Fault f)\n 9. \\<Gamma>\\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                         (Skip, Fault f)", "qed (fastforce intro: step.intros)+"], ["", "lemma steps_Stuck: \"\\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                         (Skip, Stuck)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "have steps_c\\<^sub>2: \"\\<Gamma>\\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                         (Skip, Stuck)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "from SeqSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Seq Skip ?c\\<^sub>2, Stuck)", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>* (Seq Skip c\\<^sub>2, Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Seq Skip ?c\\<^sub>2, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow>\\<^sup>*\n                         (Seq Skip c\\<^sub>2, Stuck)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "have \"\\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow> (c\\<^sub>2, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                         (c\\<^sub>2, Stuck)", "by (rule SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                       (c\\<^sub>2, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                       (c\\<^sub>2, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 10. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\nA total of 11 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow>\\<^sup>*\n                         (Skip, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "have steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                         (Skip, Stuck)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "from CatchSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Catch Skip ?c\\<^sub>2, Stuck)", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>* (Catch Skip c\\<^sub>2, Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Catch Skip ?c\\<^sub>2, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow>\\<^sup>*\n                         (Catch Skip c\\<^sub>2, Stuck)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, Stuck)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, Stuck)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "have \"\\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Stuck) \\<rightarrow> (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                         (Skip, Stuck)", "by (rule CatchSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                       (Skip, Stuck)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n         \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow>\\<^sup>*\n                         (Skip, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow>\\<^sup>*\n                       (Skip, Stuck)\n\ngoal (9 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n                                     (Skip, Stuck);\n        \\<Gamma>\\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Stuck) \\<rightarrow>\\<^sup>*\n        (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                            (Skip, Stuck)\n 9. \\<Gamma>\\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)", "qed (fastforce intro: step.intros)+"], ["", "lemma steps_Abrupt: \"\\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>* (Skip, Abrupt s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>* (Skip, Abrupt s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "have steps_c\\<^sub>2: \"\\<Gamma>\\<turnstile> (c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>* (Skip, Abrupt s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "from SeqSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip ?c\\<^sub>2, Abrupt s)", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>* (Seq Skip c\\<^sub>2, Abrupt s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip ?c\\<^sub>2, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Seq Skip c\\<^sub>2, Abrupt s)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "have \"\\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Abrupt s) \\<rightarrow> (c\\<^sub>2, Abrupt s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Abrupt s) \\<rightarrow>\n                         (c\\<^sub>2, Abrupt s)", "by (rule SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Abrupt s) \\<rightarrow>\n                       (c\\<^sub>2, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Abrupt s) \\<rightarrow>\n                       (c\\<^sub>2, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Seq c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 6. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 10. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                          (Skip, Abrupt s)\nA total of 11 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "have steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>* (Skip, Abrupt s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "from CatchSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Catch Skip ?c\\<^sub>2, Abrupt s)", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Abrupt s) \\<rightarrow>\\<^sup>* (Catch Skip c\\<^sub>2, Abrupt s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Catch Skip ?c\\<^sub>2, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Catch Skip c\\<^sub>2, Abrupt s)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, Abrupt s)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, Abrupt s)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "have \"\\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Abrupt s) \\<rightarrow> (Skip, Abrupt s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Abrupt s) \\<rightarrow>\n                         (Skip, Abrupt s)", "by (rule CatchSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Abrupt s) \\<rightarrow>\n                       (Skip, Abrupt s)\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n(Skip, Abrupt s);\n         \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                              (Skip, Abrupt s)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> (Catch c1 c2,\n          Abrupt s) \\<rightarrow>\\<^sup>*\n         (Skip, Abrupt s)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow>\\<^sup>*\n                       (Skip, Abrupt s)\n\ngoal (9 subgoals):\n 1. \\<Gamma>\\<turnstile> (Skip, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> (Basic x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> (Spec x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c1, Abrupt s) \\<rightarrow>\\<^sup>*\n                                     (Skip, Abrupt s);\n        \\<Gamma>\\<turnstile> (c2, Abrupt s) \\<rightarrow>\\<^sup>*\n                             (Skip, Abrupt s)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n         Abrupt s) \\<rightarrow>\\<^sup>*\n        (Skip, Abrupt s)\n 5. \\<And>x1 c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (While x1 c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> (Call x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> (xa, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (Skip, Abrupt s)) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (DynCom x, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 8. \\<And>x1 x2a c.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (Guard x1 x2a c, Abrupt s) \\<rightarrow>\\<^sup>*\n                            (Skip, Abrupt s)\n 9. \\<Gamma>\\<turnstile> (Throw, Abrupt s) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt s)", "qed (fastforce intro: step.intros)+"], ["", "lemma step_Fault_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "by (induct) auto"], ["", "lemma step_Abrupt_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>x. s=Abrupt x \\<Longrightarrow> s'=Abrupt x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. s = Abrupt x \\<Longrightarrow> s' = Abrupt x", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>x. s = Abrupt x \\<Longrightarrow> s' = Abrupt x", "by (induct) auto"], ["", "lemma step_Stuck_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "by (induct) auto"], ["", "lemma steps_Fault_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Fault f \\<Longrightarrow> s'=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Fault f \\<Longrightarrow> s' = Fault f", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\n\ngoal (1 subgoal):\n 1. s = Fault f \\<Longrightarrow> s' = Fault f", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. s' = Fault f \\<Longrightarrow> s' = Fault f\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "case Refl"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. s' = Fault f \\<Longrightarrow> s' = Fault f\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "thus ?case"], ["proof (prove)\nusing this:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "by simp"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "case (Trans c s c'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Fault f \\<Longrightarrow> s' = Fault f\n  s = Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Fault f \\<Longrightarrow> s' = Fault f\n  s = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "by (auto intro: step_Fault_prop)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_Abrupt_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Abrupt t \\<Longrightarrow> s'=Abrupt t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Abrupt t \\<Longrightarrow> s' = Abrupt t", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\n\ngoal (1 subgoal):\n 1. s = Abrupt t \\<Longrightarrow> s' = Abrupt t", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. s' = Abrupt t \\<Longrightarrow> s' = Abrupt t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Abrupt t \\<Longrightarrow> s' = Abrupt t; b = Abrupt t\\<rbrakk>\n       \\<Longrightarrow> s' = Abrupt t", "case Refl"], ["proof (state)\nthis:\n  s' = Abrupt t\n\ngoal (2 subgoals):\n 1. s' = Abrupt t \\<Longrightarrow> s' = Abrupt t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Abrupt t \\<Longrightarrow> s' = Abrupt t; b = Abrupt t\\<rbrakk>\n       \\<Longrightarrow> s' = Abrupt t", "thus ?case"], ["proof (prove)\nusing this:\n  s' = Abrupt t\n\ngoal (1 subgoal):\n 1. s' = Abrupt t", "by simp"], ["proof (state)\nthis:\n  s' = Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Abrupt t \\<Longrightarrow> s' = Abrupt t; b = Abrupt t\\<rbrakk>\n       \\<Longrightarrow> s' = Abrupt t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Abrupt t \\<Longrightarrow> s' = Abrupt t; b = Abrupt t\\<rbrakk>\n       \\<Longrightarrow> s' = Abrupt t", "case (Trans c s c'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Abrupt t \\<Longrightarrow> s' = Abrupt t\n  s = Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Abrupt t \\<Longrightarrow> s' = Abrupt t; b = Abrupt t\\<rbrakk>\n       \\<Longrightarrow> s' = Abrupt t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Abrupt t \\<Longrightarrow> s' = Abrupt t\n  s = Abrupt t\n\ngoal (1 subgoal):\n 1. s' = Abrupt t", "by (auto intro: step_Abrupt_prop)"], ["proof (state)\nthis:\n  s' = Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_Stuck_prop:\n  assumes step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. s' = Stuck \\<Longrightarrow> s' = Stuck\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "case Refl"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (2 subgoals):\n 1. s' = Stuck \\<Longrightarrow> s' = Stuck\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "thus ?case"], ["proof (prove)\nusing this:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "by simp"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "case (Trans c s c'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Stuck \\<Longrightarrow> s' = Stuck\n  s = Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Stuck \\<Longrightarrow> s' = Stuck\n  s = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "by (auto intro: step_Stuck_prop)"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ************************************************************************ *)"], ["", "subsection \\<open>Equivalence between Small-Step and Big-Step Semantics\\<close>"], ["", "(* ************************************************************************ *)"], ["", "theorem exec_impl_steps:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\"\n  shows \"\\<exists>c' t'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',t') \\<and>\n               (case t of\n                 Abrupt x \\<Rightarrow> if s=t then c'=Skip \\<and> t'=t else c'=Throw \\<and> t'=Normal x\n                | _ \\<Rightarrow> c'=Skip \\<and> t'=t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "using exec"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "proof (induct)"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 2. \\<And>s g c t f.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Guard f g c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 4. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 5. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 6. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 7. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 20 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (20 subgoals):\n 1. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 2. \\<And>s g c t f.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Guard f g c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 4. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 5. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 6. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 7. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Skip, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Normal s_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Normal s_ then c' = Skip \\<and> t' = Normal s_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Skip, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Normal s_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Normal s_ then c' = Skip \\<and> t' = Normal s_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s_)\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Guard f g c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 3. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 4. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 5. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 6. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c s' t.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case s' of\n             Abrupt x \\<Rightarrow>\n               if Normal s = s' then c' = Skip \\<and> t' = s'\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if s' = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (While b c,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s g c t f.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Guard f g c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 3. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 4. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 5. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 6. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c s' t.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case s' of\n             Abrupt x \\<Rightarrow>\n               if Normal s = s' then c' = Skip \\<and> t' = s'\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if s' = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (While b c,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 19 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (19 subgoals):\n 1. \\<And>s g c t f.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Guard f g c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 3. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 4. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 5. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 6. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c s' t.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case s' of\n             Abrupt x \\<Rightarrow>\n               if Normal s = s' then c' = Skip \\<and> t' = s'\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n         \\<Gamma>\\<turnstile> \\<langle>While b\n  c,s'\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if s' = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (While b c,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Guard f_ g_ c_,\n                             Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)", "by (blast intro: step.Guard rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Guard f_ g_ c_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (18 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 2. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 3. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 4. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 5. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Normal s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 2. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 3. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 4. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 5. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Normal s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\nA total of 18 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n\ngoal (18 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 2. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 3. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 4. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 5. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Normal s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Guard f_ g_ c_,\n                             Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Fault f_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Fault f_ then c' = Skip \\<and> t' = Fault f_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f_)", "by (fastforce intro: step.GuardFault rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Guard f_ g_ c_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Fault f_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Fault f_ then c' = Skip \\<and> t' = Fault f_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f_)\n\ngoal (17 subgoals):\n 1. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 2. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 3. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 4. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 10. \\<And>p bdy s t.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Call p,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 2. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 3. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 4. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 10. \\<And>p bdy s t.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Call p,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 17 subgoals...", "case FaultProp"], ["proof (state)\nthis:\n  \n\ngoal (17 subgoals):\n 1. \\<And>c f.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Fault f of\n           Abrupt x \\<Rightarrow>\n             if Fault f = Fault f then c' = Skip \\<and> t' = Fault f\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n 2. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 3. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 4. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 10. \\<And>p bdy s t.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Call p,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 17 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (c_, Fault f_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Fault f_ of\n        Abrupt x \\<Rightarrow>\n          if Fault f_ = Fault f_ then c' = Skip \\<and> t' = Fault f_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f_)", "by (fastforce intro: steps_Fault)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_, Fault f_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Fault f_ of\n      Abrupt x \\<Rightarrow>\n        if Fault f_ = Fault f_ then c' = Skip \\<and> t' = Fault f_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f_)\n\ngoal (16 subgoals):\n 1. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 2. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 3. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 9. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Stuck of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 2. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 3. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 9. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Stuck of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\nA total of 16 subgoals...", "case Basic"], ["proof (state)\nthis:\n  \n\ngoal (16 subgoals):\n 1. \\<And>f s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Basic f, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal (f s) of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal (f s)\n             then c' = Skip \\<and> t' = Normal (f s)\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f s))\n 2. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 3. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 9. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Stuck of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Basic f_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Normal (f_ s_) of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Normal (f_ s_)\n          then c' = Skip \\<and> t' = Normal (f_ s_)\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f_ s_))", "by (fastforce intro: step.Basic rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Basic f_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Normal (f_ s_) of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Normal (f_ s_)\n        then c' = Skip \\<and> t' = Normal (f_ s_)\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal (f_ s_))\n\ngoal (15 subgoals):\n 1. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 2. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 10. \\<And>c.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Stuck of\n            Abrupt x \\<Rightarrow>\n              if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 2. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 10. \\<And>c.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Stuck of\n            Abrupt x \\<Rightarrow>\n              if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\nA total of 15 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n\ngoal (15 subgoals):\n 1. \\<And>s t r.\n       (s, t) \\<in> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal t of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal t then c' = Skip \\<and> t' = Normal t\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n 2. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 10. \\<And>c.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Stuck of\n            Abrupt x \\<Rightarrow>\n              if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Spec r_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Normal t_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Normal t_ then c' = Skip \\<and> t' = Normal t_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t_)", "by (fastforce intro: step.Spec rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Spec r_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Normal t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Normal t_ then c' = Skip \\<and> t' = Normal t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t_)\n\ngoal (14 subgoals):\n 1. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 7. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 10. \\<And>c s t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (DynCom c,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 7. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 10. \\<And>c s t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (DynCom c,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 14 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n\ngoal (14 subgoals):\n 1. \\<And>s r.\n       \\<forall>t. (s, t) \\<notin> r \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 7. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 10. \\<And>c s t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n          s,Normal s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (DynCom c,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Spec r_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Stuck of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Stuck then c' = Skip \\<and> t' = Stuck\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)", "by (fastforce intro: step.SpecStuck rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Spec r_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Stuck of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Stuck then c' = Skip \\<and> t' = Stuck\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 13 subgoals...", "case (Seq c\\<^sub>1 s s' c\\<^sub>2 t)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 13 subgoals...", "have exec_c\\<^sub>1: \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       s\\<rangle> \\<Rightarrow> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 13 subgoals...", "have exec_c\\<^sub>2: \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (13 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 9. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 13 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "proof (cases \"\\<exists>x. s'=Abrupt x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. s' = Abrupt x\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from False Seq.hyps (2)"], ["proof (chain)\npicking this:\n  \\<nexists>x. s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')", "have \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Skip, s')\""], ["proof (prove)\nusing this:\n  \\<nexists>x. s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                         (Skip, s')", "by (cases s') auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence seq_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>* (Seq Skip c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Skip, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (Seq Skip c\\<^sub>2, s')", "by (rule SeqSteps) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from Seq.hyps (4)"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "obtain c' t' where\n      steps_c\\<^sub>2: \"\\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>* (c', t')\" and\n      t: \"(case t of\n           Abrupt x \\<Rightarrow> if s' = t then c' = Skip \\<and> t' = t\n                       else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (1 subgoal):\n 1. (\\<And>c' t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>*\n(c', t');\n         case t of\n         Abrupt x \\<Rightarrow>\n           if s' = t then c' = Skip \\<and> t' = t\n           else c' = Throw \\<and> t' = Normal x\n         | _ \\<Rightarrow> c' = Skip \\<and> t' = t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>* (c', t')\n  case t of\n  Abrupt x \\<Rightarrow>\n    if s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note seq_c\\<^sub>1"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have \"\\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, s') \\<rightarrow> (c\\<^sub>2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, s') \\<rightarrow>\n                         (c\\<^sub>2, s')", "by (rule step.SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, s') \\<rightarrow>\n                       (c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, s') \\<rightarrow>\n                       (c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow>\\<^sup>* (c', t')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>* (c', t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (c', t')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "with t False"], ["proof (chain)\npicking this:\n  case t of\n  Abrupt x \\<Rightarrow>\n    if s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n  \\<nexists>x. s' = Abrupt x\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')", "show ?thesis"], ["proof (prove)\nusing this:\n  case t of\n  Abrupt x \\<Rightarrow>\n    if s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n  \\<nexists>x. s' = Abrupt x\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "by (cases t) auto"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case True"], ["proof (state)\nthis:\n  \\<exists>x. s' = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. s' = Abrupt x", "obtain x where s': \"s'=Abrupt x\""], ["proof (prove)\nusing this:\n  \\<exists>x. s' = Abrupt x\n\ngoal (1 subgoal):\n 1. (\\<And>x. s' = Abrupt x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from s' Seq.hyps (2)"], ["proof (chain)\npicking this:\n  s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')", "have \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal x)\""], ["proof (prove)\nusing this:\n  s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal x)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence seq_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>* (Seq Throw c\\<^sub>2, Normal x)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (Seq Throw c\\<^sub>2, Normal x)", "by (rule SeqSteps) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Throw c\\<^sub>2, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Throw c\\<^sub>2, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have \"\\<Gamma>\\<turnstile> (Seq Throw c\\<^sub>2, Normal x) \\<rightarrow> (Throw, Normal x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Throw c\\<^sub>2, Normal x) \\<rightarrow>\n                         (Throw, Normal x)", "by (rule SeqThrow)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Throw c\\<^sub>2, Normal x) \\<rightarrow>\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal x)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal x)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from exec_c\\<^sub>2 s'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x", "have \"t=Abrupt x\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. t = Abrupt x", "by (auto intro: Abrupt_end)"], ["proof (state)\nthis:\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n  t = Abrupt x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "by auto"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 5. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 10. \\<And>c s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 5. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 10. \\<And>c s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 12 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 5. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 8. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 10. \\<And>c s.\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s of\n            Abrupt x \\<Rightarrow>\n              if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_,\n                             Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)", "by (blast intro: step.CondTrue rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_,\n                           Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 4. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case Abrupt s' of\n             Abrupt x \\<Rightarrow>\n               if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  Normal s') \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s' = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 4. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case Abrupt s' of\n             Abrupt x \\<Rightarrow>\n               if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  Normal s') \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s' = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 11 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n             c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 4. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 7. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 10. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> Abrupt s';\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case Abrupt s' of\n             Abrupt x \\<Rightarrow>\n               if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s'\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  Normal s') \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s' = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_,\n                             Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)", "by (blast intro: step.CondFalse rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Cond b_ c\\<^sub>1_ c\\<^sub>2_,\n                           Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case (WhileTrue s b c s' t)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s'\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n  \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have exec_c: \"\\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s'\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have exec_w: \"\\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have b: \"s \\<in> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> b", "by fact"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence step: \"\\<Gamma>\\<turnstile> (While b c,Normal s) \\<rightarrow> (Seq c (While b c),Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                         (Seq c (While b c), Normal s)", "by (rule step.WhileTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (Seq c (While b c), Normal s)\n\ngoal (10 subgoals):\n 1. \\<And>s b c s' t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = s' then c' = Skip \\<and> t' = s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = s');\n        \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (While b c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 6. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 9. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 10. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                    s\\<rangle> \\<Rightarrow> t;\n         \\<exists>c' t'.\n            \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                 (c', t') \\<and>\n            (case t of\n             Abrupt x \\<Rightarrow>\n               if Normal s = t then c' = Skip \\<and> t' = t\n               else c' = Throw \\<and> t' = Normal x\n             | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n         \\<not> isAbr t\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' t'.\n                             \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n              c\\<^sub>2,\n             Normal s) \\<rightarrow>\\<^sup>*\n            (c', t') \\<and>\n                             (case t of\n                              Abrupt x \\<Rightarrow>\n                                if Normal s = t then c' = Skip \\<and> t' = t\n                                else c' = Throw \\<and> t' = Normal x\n                              | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "proof (cases \"\\<exists>x. s'=Abrupt x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. s' = Abrupt x\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from False WhileTrue.hyps (3)"], ["proof (chain)\npicking this:\n  \\<nexists>x. s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')", "have \"\\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Skip, s')\""], ["proof (prove)\nusing this:\n  \\<nexists>x. s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Skip, s')", "by (cases s') auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence seq_c: \"\\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>* (Seq Skip (While b c), s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Skip, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                         (Seq Skip (While b c), s')", "by (rule SeqSteps) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip (While b c), s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from WhileTrue.hyps (5)"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "obtain c' t' where\n      steps_c\\<^sub>2: \"\\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>* (c', t')\" and\n      t: \"(case t of\n           Abrupt x \\<Rightarrow> if s' = t then c' = Skip \\<and> t' = t\n                       else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (1 subgoal):\n 1. (\\<And>c' t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>*\n(c', t');\n         case t of\n         Abrupt x \\<Rightarrow>\n           if s' = t then c' = Skip \\<and> t' = t\n           else c' = Throw \\<and> t' = Normal x\n         | _ \\<Rightarrow> c' = Skip \\<and> t' = t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>* (c', t')\n  case t of\n  Abrupt x \\<Rightarrow>\n    if s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (Seq c (While b c), Normal s)\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (Seq c (While b c), Normal s)\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note seq_c"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip (While b c), s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Skip (While b c), s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have \"\\<Gamma>\\<turnstile> (Seq Skip (While b c), s') \\<rightarrow> (While b c, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip (While b c), s') \\<rightarrow>\n                         (While b c, s')", "by (rule step.SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip (While b c), s') \\<rightarrow>\n                       (While b c, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip (While b c), s') \\<rightarrow>\n                       (While b c, s')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow>\\<^sup>* (c', t')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (c', t')", "have \"\\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (c', t')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (c', t')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                         (c', t')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (c', t')\n\ngoal (2 subgoals):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<nexists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "with t False"], ["proof (chain)\npicking this:\n  case t of\n  Abrupt x \\<Rightarrow>\n    if s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n  \\<nexists>x. s' = Abrupt x\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (c', t')", "show ?thesis"], ["proof (prove)\nusing this:\n  case t of\n  Abrupt x \\<Rightarrow>\n    if s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n  \\<nexists>x. s' = Abrupt x\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (c', t')\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "by (cases t) auto"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case True"], ["proof (state)\nthis:\n  \\<exists>x. s' = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. s' = Abrupt x", "obtain x where s': \"s'=Abrupt x\""], ["proof (prove)\nusing this:\n  \\<exists>x. s' = Abrupt x\n\ngoal (1 subgoal):\n 1. (\\<And>x. s' = Abrupt x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (Seq c (While b c), Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (Seq c (While b c), Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from s' WhileTrue.hyps (3)"], ["proof (chain)\npicking this:\n  s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')", "have \"\\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal x)\""], ["proof (prove)\nusing this:\n  s' = Abrupt x\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal x)", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence\n      seq_c: \"\\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>* (Seq Throw (While b c), Normal x)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                         (Seq Throw (While b c), Normal x)", "by (rule SeqSteps) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Throw (While b c), Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow>\\<^sup>*\n                       (Seq Throw (While b c), Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have \"\\<Gamma>\\<turnstile> (Seq Throw (While b c), Normal x) \\<rightarrow> (Throw, Normal x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Throw (While b c), Normal x) \\<rightarrow>\n                         (Throw, Normal x)", "by (rule SeqThrow)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Throw (While b c), Normal x) \\<rightarrow>\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)", "have \"\\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal x)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal x)", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from exec_w s'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x", "have \"t=Abrupt x\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>While b c,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. t = Abrupt x", "by (auto intro: Abrupt_end)"], ["proof (state)\nthis:\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>x. s' = Abrupt x \\<Longrightarrow>\n    \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n  t = Abrupt x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal x)\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "by auto"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 2. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 7. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 2. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 7. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Normal s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Normal s then c' = Skip \\<and> t' = Normal s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s)\n 2. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 5. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 7. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 8. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 9. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (While b_ c_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Normal s_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Normal s_ then c' = Skip \\<and> t' = Normal s_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s_)", "by (fastforce intro: step.WhileFalse rtrancl_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (While b_ c_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Normal s_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Normal s_ then c' = Skip \\<and> t' = Normal s_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal s_)\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 6. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 6. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case Call"], ["proof (state)\nthis:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (bdy_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (8 subgoals):\n 1. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Call p,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 4. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 6. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 7. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 8. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (bdy_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Call p_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)", "by (blast intro: step.Call rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Call p_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (7 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 5. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 5. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case CallUndefined"], ["proof (state)\nthis:\n  \\<Gamma> p_ = None\n\ngoal (7 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 3. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 5. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 6. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 7. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = None\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Call p_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Stuck of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Stuck then c' = Skip \\<and> t' = Stuck\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)", "by (fastforce intro: step.CallUndefined rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Call p_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Stuck of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Stuck then c' = Skip \\<and> t' = Stuck\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n\ngoal (6 subgoals):\n 1. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 4. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 4. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case StuckProp"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>c.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Stuck of\n           Abrupt x \\<Rightarrow>\n             if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n 2. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 4. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 5. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 6. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (c_, Stuck) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Stuck of\n        Abrupt x \\<Rightarrow>\n          if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)", "by (fastforce intro: steps_Stuck)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_, Stuck) \\<rightarrow>\\<^sup>* (c', t') \\<and>\n     (case Stuck of\n      Abrupt x \\<Rightarrow>\n        if Stuck = Stuck then c' = Skip \\<and> t' = Stuck\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n\ngoal (5 subgoals):\n 1. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 3. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 3. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_ s_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (5 subgoals):\n 1. \\<And>c s t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\n         s,Normal s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (DynCom c,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 3. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 4. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 5. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t_\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_ s_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (DynCom c_, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)", "by (blast intro: step.DynCom rtranclp_trans)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (DynCom c_, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = t_ then c' = Skip \\<and> t' = t_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t_)\n\ngoal (4 subgoals):\n 1. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 2. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 2. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case Throw"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Normal s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 2. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 3. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 4. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Abrupt s_ of\n        Abrupt x \\<Rightarrow>\n          if Normal s_ = Abrupt s_ then c' = Skip \\<and> t' = Abrupt s_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s_)", "by simp"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Throw, Normal s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s_ of\n      Abrupt x \\<Rightarrow>\n        if Normal s_ = Abrupt s_ then c' = Skip \\<and> t' = Abrupt s_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s_)\n\ngoal (3 subgoals):\n 1. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case AbruptProp"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>c s.\n       \\<exists>c' t'.\n          \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow>\\<^sup>*\n                               (c', t') \\<and>\n          (case Abrupt s of\n           Abrupt x \\<Rightarrow>\n             if Abrupt s = Abrupt s then c' = Skip \\<and> t' = Abrupt s\n             else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s)\n 2. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 3. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (c_, Abrupt s_) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case Abrupt s_ of\n        Abrupt x \\<Rightarrow>\n          if Abrupt s_ = Abrupt s_ then c' = Skip \\<and> t' = Abrupt s_\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s_)", "by (fastforce intro: steps_Abrupt)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c_, Abrupt s_) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s_ of\n      Abrupt x \\<Rightarrow>\n        if Abrupt s_ = Abrupt s_ then c' = Skip \\<and> t' = Abrupt s_\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s_)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case (CatchMatch c\\<^sub>1 s s' c\\<^sub>2 t)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s')\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal s'\\<rangle> \\<Rightarrow> t\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from CatchMatch.hyps (2)"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s')", "have \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal s')\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>* (Catch Throw c\\<^sub>2, Normal s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (Catch Throw c\\<^sub>2, Normal s')", "by (rule CatchSteps) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Catch Throw c\\<^sub>2, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Catch Throw c\\<^sub>2, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have \"\\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, Normal s') \\<rightarrow> (c\\<^sub>2, Normal s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, Normal s') \\<rightarrow>\n                         (c\\<^sub>2, Normal s')", "by (rule step.CatchThrow)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, Normal s') \\<rightarrow>\n                       (c\\<^sub>2, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, Normal s') \\<rightarrow>\n                       (c\\<^sub>2, Normal s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "from CatchMatch.hyps (4)"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "obtain c' t' where\n      steps_c\\<^sub>2: \"\\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>* (c', t')\" and\n      t: \"(case t of\n           Abrupt x \\<Rightarrow> if Normal s' = t then c' = Skip \\<and> t' = t\n                       else c' = Throw \\<and> t' = Normal x\n           | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s' = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (1 subgoal):\n 1. (\\<And>c' t'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>2,\n Normal s') \\<rightarrow>\\<^sup>*\n(c', t');\n         case t of\n         Abrupt x \\<Rightarrow>\n           if Normal s' = t then c' = Skip \\<and> t' = t\n           else c' = Throw \\<and> t' = Normal x\n         | _ \\<Rightarrow> c' = Skip \\<and> t' = t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>* (c', t')\n  case t of\n  Abrupt x \\<Rightarrow>\n    if Normal s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>* (c', t')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case Abrupt s' of\n            Abrupt x \\<Rightarrow>\n              if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s');\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s') \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s' = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n 2. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "using t"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (c', t')\n  case t of\n  Abrupt x \\<Rightarrow>\n    if Normal s' = t then c' = Skip \\<and> t' = t\n    else c' = Throw \\<and> t' = Normal x\n  | _ \\<Rightarrow> c' = Skip \\<and> t' = t\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "by (auto split: xstate.splits)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "case (CatchMiss c\\<^sub>1 s t c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> t\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n  \\<not> isAbr t\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have t: \"\\<not> isAbr t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> isAbr t", "by fact"], ["proof (state)\nthis:\n  \\<not> isAbr t\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "with CatchMiss.hyps (2)"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n  \\<not> isAbr t", "have \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Skip, t)\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n  \\<not> isAbr t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                         (Skip, t)", "by (cases t) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Skip, t)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "hence \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\\<^sup>* (Catch Skip c\\<^sub>2, t)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Skip, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\\<^sup>*\n                         (Catch Skip c\\<^sub>2, t)", "by (rule CatchSteps) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, t)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Catch Skip c\\<^sub>2, t)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "have \"\\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, t) \\<rightarrow> (Skip, t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, t) \\<rightarrow> (Skip, t)", "by (rule step.CatchSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, t) \\<rightarrow> (Skip, t)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s t c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n                   s\\<rangle> \\<Rightarrow> t;\n        \\<exists>c' t'.\n           \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                                (c', t') \\<and>\n           (case t of\n            Abrupt x \\<Rightarrow>\n              if Normal s = t then c' = Skip \\<and> t' = t\n              else c' = Throw \\<and> t' = Normal x\n            | _ \\<Rightarrow> c' = Skip \\<and> t' = t);\n        \\<not> isAbr t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' t'.\n                            \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n            Normal s) \\<rightarrow>\\<^sup>*\n           (c', t') \\<and>\n                            (case t of\n                             Abrupt x \\<Rightarrow>\n                               if Normal s = t then c' = Skip \\<and> t' = t\n                               else c' = Throw \\<and> t' = Normal x\n                             | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Skip, t)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Skip, t)\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "using t"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow>\\<^sup>*\n                       (Skip, t)\n  \\<not> isAbr t\n\ngoal (1 subgoal):\n 1. \\<exists>c' t'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\\<^sup>*\n                            (c', t') \\<and>\n       (case t of\n        Abrupt x \\<Rightarrow>\n          if Normal s = t then c' = Skip \\<and> t' = t\n          else c' = Throw \\<and> t' = Normal x\n        | _ \\<Rightarrow> c' = Skip \\<and> t' = t)", "by (fastforce split: xstate.splits)"], ["proof (state)\nthis:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = t then c' = Skip \\<and> t' = t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = t)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary exec_impl_steps_Normal:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Normal t\"\n  shows \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Skip, Normal t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, Normal t)", "using exec_impl_steps [OF exec]"], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', t') \\<and>\n     (case Normal t of\n      Abrupt x \\<Rightarrow>\n        if s = Normal t then c' = Skip \\<and> t' = Normal t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Normal t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, Normal t)", "by auto"], ["", "corollary exec_impl_steps_Normal_Abrupt:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,Normal s\\<rangle> \\<Rightarrow> Abrupt t\"\n  shows \"\\<Gamma>\\<turnstile>(c,Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal t)", "using exec_impl_steps [OF exec]"], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt t of\n      Abrupt x \\<Rightarrow>\n        if Normal s = Abrupt t then c' = Skip \\<and> t' = Abrupt t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                         (Throw, Normal t)", "by auto"], ["", "corollary exec_impl_steps_Abrupt_Abrupt:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,Abrupt t\\<rangle> \\<Rightarrow> Abrupt t\"\n  shows \"\\<Gamma>\\<turnstile>(c,Abrupt t) \\<rightarrow>\\<^sup>* (Skip, Abrupt t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Abrupt t) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt t)", "using exec_impl_steps [OF exec]"], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, Abrupt t) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt t of\n      Abrupt x \\<Rightarrow>\n        if Abrupt t = Abrupt t then c' = Skip \\<and> t' = Abrupt t\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Abrupt t) \\<rightarrow>\\<^sup>*\n                         (Skip, Abrupt t)", "by auto"], ["", "corollary exec_impl_steps_Fault:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Fault f\"\n  shows \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, Fault f)", "using exec_impl_steps [OF exec]"], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', t') \\<and>\n     (case Fault f of\n      Abrupt x \\<Rightarrow>\n        if s = Fault f then c' = Skip \\<and> t' = Fault f\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, Fault f)", "by auto"], ["", "corollary exec_impl_steps_Stuck:\n  assumes exec: \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Stuck\"\n  shows \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, Stuck)", "using exec_impl_steps [OF exec]"], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', t') \\<and>\n     (case Stuck of\n      Abrupt x \\<Rightarrow>\n        if s = Stuck then c' = Skip \\<and> t' = Stuck\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, Stuck)", "by auto"], ["", "lemma step_Abrupt_end:\n  assumes step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\"\n  shows \"s'=Abrupt x \\<Longrightarrow> s=Abrupt x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = Abrupt x \\<Longrightarrow> s = Abrupt x", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. s' = Abrupt x \\<Longrightarrow> s = Abrupt x", "by induct auto"], ["", "lemma step_Stuck_end:\n  assumes step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\"\n  shows \"s'=Stuck \\<Longrightarrow>\n          s=Stuck \\<or>\n          (\\<exists>r x. redex c\\<^sub>1 = Spec r \\<and> s=Normal x \\<and> (\\<forall>t. (x,t)\\<notin>r)) \\<or>\n          (\\<exists>p x. redex c\\<^sub>1=Call p \\<and> s=Normal x \\<and> \\<Gamma> p = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    s = Stuck \\<or>\n    (\\<exists>r x.\n        redex c\\<^sub>1 = Spec r \\<and>\n        s = Normal x \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n    (\\<exists>p x.\n        redex c\\<^sub>1 = Call p \\<and>\n        s = Normal x \\<and> \\<Gamma> p = None)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    s = Stuck \\<or>\n    (\\<exists>r x.\n        redex c\\<^sub>1 = Spec r \\<and>\n        s = Normal x \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n    (\\<exists>p x.\n        redex c\\<^sub>1 = Call p \\<and>\n        s = Normal x \\<and> \\<Gamma> p = None)", "by induct auto"], ["", "lemma step_Fault_end:\n  assumes step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\"\n  shows \"s'=Fault f \\<Longrightarrow>\n          s=Fault f \\<or>\n          (\\<exists>g c x. redex c\\<^sub>1 = Guard f g c \\<and> s=Normal x \\<and> x \\<notin> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = Fault f \\<Longrightarrow>\n    s = Fault f \\<or>\n    (\\<exists>g c x.\n        redex c\\<^sub>1 = Guard f g c \\<and>\n        s = Normal x \\<and> x \\<notin> g)", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. s' = Fault f \\<Longrightarrow>\n    s = Fault f \\<or>\n    (\\<exists>g c x.\n        redex c\\<^sub>1 = Guard f g c \\<and>\n        s = Normal x \\<and> x \\<notin> g)", "by induct auto"], ["", "lemma exec_redex_Stuck:\n\"\\<Gamma>\\<turnstile>\\<langle>redex c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Stuck\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic x,s\\<rangle> \\<Rightarrow> Stuck\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Stuck\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Seq c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 6. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Stuck\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Stuck\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 10. \\<Gamma>\\<turnstile> \\<langle>redex\n                                    Throw,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Stuck\nA total of 11 subgoals...", "case Seq"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Seq c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Stuck\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic x,s\\<rangle> \\<Rightarrow> Stuck\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Stuck\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Seq c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 6. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Stuck\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Stuck\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 10. \\<Gamma>\\<turnstile> \\<langle>redex\n                                    Throw,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Stuck\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Seq c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c1_ c2_,s\\<rangle> \\<Rightarrow> Stuck", "by (cases s) (auto intro: exec.intros elim:exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1_ c2_,s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Stuck\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic x,s\\<rangle> \\<Rightarrow> Stuck\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Stuck\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Stuck\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Stuck\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Stuck\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n          c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  (Catch c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,s\\<rangle> \\<Rightarrow> Stuck", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Stuck\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic x,s\\<rangle> \\<Rightarrow> Stuck\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Stuck\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Stuck\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Stuck\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Stuck\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n          c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  (Catch c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,s\\<rangle> \\<Rightarrow> Stuck", "case Catch"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Catch c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Stuck\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic x,s\\<rangle> \\<Rightarrow> Stuck\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Stuck\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Stuck\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Stuck\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Stuck\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n          c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  (Catch c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,s\\<rangle> \\<Rightarrow> Stuck", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Stuck\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Catch c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1_\n                                   c2_,s\\<rangle> \\<Rightarrow> Stuck", "by (cases s) (auto intro: exec.intros elim:exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1_ c2_,s\\<rangle> \\<Rightarrow> Stuck\n\ngoal (9 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Stuck\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic x,s\\<rangle> \\<Rightarrow> Stuck\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Stuck\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Stuck\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Stuck\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Stuck\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Stuck;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Stuck\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Stuck", "qed simp_all"], ["", "lemma exec_redex_Fault:\n\"\\<Gamma>\\<turnstile>\\<langle>redex c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault f", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Fault\n                            f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Fault f\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nx,s\\<rangle> \\<Rightarrow> Fault f\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Fault f\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Seq c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 6. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Fault f\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Fault\n                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Fault f\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 10. \\<Gamma>\\<turnstile> \\<langle>redex\n                                    Throw,s\\<rangle> \\<Rightarrow> Fault\n                              f \\<Longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Fault f\nA total of 11 subgoals...", "case Seq"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Seq c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (11 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Fault\n                            f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Fault f\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nx,s\\<rangle> \\<Rightarrow> Fault f\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Fault f\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Seq c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 6. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 7. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Fault f\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Fault\n                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Fault f\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 10. \\<Gamma>\\<turnstile> \\<langle>redex\n                                    Throw,s\\<rangle> \\<Rightarrow> Fault\n                              f \\<Longrightarrow>\n     \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Fault f\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Seq c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c1_\n                                   c2_,s\\<rangle> \\<Rightarrow> Fault f", "by (cases s) (auto intro: exec.intros elim:exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c1_ c2_,s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Fault\n                            f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Fault f\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nx,s\\<rangle> \\<Rightarrow> Fault f\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Fault f\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Fault f\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Fault\n                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Fault f\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Fault\n                             f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Fault f\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n          c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\nf;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  (Catch c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,s\\<rangle> \\<Rightarrow> Fault f", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Fault\n                            f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Fault f\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nx,s\\<rangle> \\<Rightarrow> Fault f\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Fault f\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Fault f\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Fault\n                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Fault f\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Fault\n                             f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Fault f\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n          c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\nf;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  (Catch c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,s\\<rangle> \\<Rightarrow> Fault f", "case Catch"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Catch c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (10 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Fault\n                            f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Fault f\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nx,s\\<rangle> \\<Rightarrow> Fault f\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Fault f\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Fault f\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Fault\n                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Fault f\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Fault\n                             f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Fault f\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n          c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\nf;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n         \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n         \\<Gamma>\\<turnstile> \\<langle>redex\n  (Catch c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c1\n                   c2,s\\<rangle> \\<Rightarrow> Fault f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c1_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c1_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c2_,s\\<rangle> \\<Rightarrow> Fault\n                         f \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c2_,s\\<rangle> \\<Rightarrow> Fault f\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 (Catch c1_\n                                   c2_),s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c1_\n                                   c2_,s\\<rangle> \\<Rightarrow> Fault f", "by (cases s) (auto intro: exec.intros elim:exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c1_\n                                 c2_,s\\<rangle> \\<Rightarrow> Fault f\n\ngoal (9 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Skip,s\\<rangle> \\<Rightarrow> Fault\n                            f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> Fault f\n 2. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Basic x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nx,s\\<rangle> \\<Rightarrow> Fault f\n 3. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Spec x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Spec x,s\\<rangle> \\<Rightarrow> Fault f\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c1,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c1,s\\<rangle> \\<Rightarrow> Fault\n                                     f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n c2,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>c2,s\\<rangle> \\<Rightarrow> Fault f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Cond x1 c1 c2),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond x1 c1\n                  c2,s\\<rangle> \\<Rightarrow> Fault f\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (While x1 c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While x1\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 6. \\<And>x.\n       \\<Gamma>\\<turnstile> \\<langle>redex\n(Call x),s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Call x,s\\<rangle> \\<Rightarrow> Fault f\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> \\<langle>redex\n             xa,s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>xa,s\\<rangle> \\<Rightarrow> Fault\n                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (DynCom x),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>DynCom\n                  x,s\\<rangle> \\<Rightarrow> Fault f\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>redex\n         c,s\\<rangle> \\<Rightarrow> Fault f \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Fault\n                                    f;\n        \\<Gamma>\\<turnstile> \\<langle>redex\n (Guard x1 x2a c),s\\<rangle> \\<Rightarrow> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard x1 x2a\n                  c,s\\<rangle> \\<Rightarrow> Fault f\n 9. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   Throw,s\\<rangle> \\<Rightarrow> Fault\n                             f \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Throw,s\\<rangle> \\<Rightarrow> Fault f", "qed simp_all"], ["", "lemma step_extend:\n  assumes step: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>t. \\<Gamma>\\<turnstile>\\<langle>c',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow> \\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "proof (induct)"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>f s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n     (f s)\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s t r ta.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      t\\<rangle> \\<Rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> ta\n 3. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                   c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\nA total of 21 subgoals...", "case Basic"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal (f_ s_)\\<rangle> \\<Rightarrow> t\n\ngoal (21 subgoals):\n 1. \\<And>f s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n     (f s)\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Basic\nf,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s t r ta.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      t\\<rangle> \\<Rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> ta\n 3. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n            s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                   c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\nA total of 21 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal (f_ s_)\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Basic\n                                   f_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Basic f_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (20 subgoals):\n 1. \\<And>s t r ta.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      t\\<rangle> \\<Rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> ta\n 2. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c t.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>Seq c\n  (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s t r ta.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      t\\<rangle> \\<Rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> ta\n 2. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c t.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>Seq c\n  (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 20 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal t_\\<rangle> \\<Rightarrow> t\n\ngoal (20 subgoals):\n 1. \\<And>s t r ta.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      t\\<rangle> \\<Rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> ta\n 2. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c t.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile> \\<langle>Seq c\n  (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal t_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Spec r_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Spec r_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (19 subgoals):\n 1. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c t.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n       s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c t.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n       s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 19 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (19 subgoals):\n 1. \\<And>s r t.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Spec\n                  r,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>s b c t.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n       s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                   c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Spec r_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Spec r_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (18 subgoals):\n 1. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>p bdy s t.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal s\\<rangle> \\<Rightarrow> t\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>p bdy s t.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal s\\<rangle> \\<Rightarrow> t\nA total of 18 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (18 subgoals):\n 1. \\<And>s g f c t.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile> \\<langle>c,Normal\n   s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>p bdy s t.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal s\\<rangle> \\<Rightarrow> t\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile> \\<langle>c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                   c_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                 c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (17 subgoals):\n 1. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>p s t.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal s\\<rangle> \\<Rightarrow> t\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>p s t.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal s\\<rangle> \\<Rightarrow> t\nA total of 17 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Fault f_\\<rangle> \\<Rightarrow> t\n\ngoal (17 subgoals):\n 1. \\<And>s g f c t.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Guard f g\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>p s t.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                   p,Normal s\\<rangle> \\<Rightarrow> t\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Fault f_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                   c_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Guard f_ g_\n                                 c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 16 subgoals...", "case (Seq c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 16 subgoals...", "have step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 16 subgoals...", "have exec': \"\\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1' c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                   c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\n s,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>DynCom\n c,Normal s\\<rangle> \\<Rightarrow> t\nA total of 16 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "proof (cases s)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Normal x)"], ["proof (state)\nthis:\n  s = Normal x\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "note s_Normal = this"], ["proof (state)\nthis:\n  s = Normal x\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "proof (cases s')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Normal x')"], ["proof (state)\nthis:\n  s' = Normal x'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec' [simplified Normal]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,Normal\n      x'\\<rangle> \\<Rightarrow> t", "obtain s'' where\n        exec_c\\<^sub>1': \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal x'\\<rangle> \\<Rightarrow> s''\" and\n        exec_c\\<^sub>2: \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s''\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,Normal\n      x'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<And>s''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                     x'\\<rangle> \\<Rightarrow> s'';\n         \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s''\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> s''\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s''\\<rangle> \\<Rightarrow> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Seq.hyps (2) Normal exec_c\\<^sub>1' s_Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  s' = Normal x'\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> s''\n  s = Normal x", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> s''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  s' = Normal x'\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> s''\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> s''", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> s''\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec.Seq [OF this exec_c\\<^sub>2] s_Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,Normal x\\<rangle> \\<Rightarrow> t\n  s = Normal x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,Normal x\\<rangle> \\<Rightarrow> t\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Abrupt x')"], ["proof (state)\nthis:\n  s' = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x'", "have \"t=Abrupt x'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. t = Abrupt x'", "by (auto intro:Abrupt_end)"], ["proof (state)\nthis:\n  t = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  t = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step Abrupt"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  s' = Abrupt x'", "have \"s=Abrupt x'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. s = Abrupt x'", "by (auto intro: step_Abrupt_end)"], ["proof (state)\nthis:\n  s = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  t = Abrupt x'\n  s = Abrupt x'", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Abrupt x'\n  s = Abrupt x'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Fault f)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Fault_end [OF step this] s_Normal"], ["proof (chain)\npicking this:\n  s = Fault f \\<or>\n  (\\<exists>g c x.\n      redex c\\<^sub>1 = Guard f g c \\<and> s = Normal x \\<and> x \\<notin> g)\n  s = Normal x", "obtain g c where\n        redex_c\\<^sub>1: \"redex c\\<^sub>1 = Guard f g c\" and\n        fail: \"x \\<notin> g\""], ["proof (prove)\nusing this:\n  s = Fault f \\<or>\n  (\\<exists>g c x.\n      redex c\\<^sub>1 = Guard f g c \\<and> s = Normal x \\<and> x \\<notin> g)\n  s = Normal x\n\ngoal (1 subgoal):\n 1. (\\<And>g c.\n        \\<lbrakk>redex c\\<^sub>1 = Guard f g c; x \\<notin> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  redex c\\<^sub>1 = Guard f g c\n  x \\<notin> g\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "hence \"\\<Gamma>\\<turnstile> \\<langle>redex c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\nusing this:\n  redex c\\<^sub>1 = Guard f g c\n  x \\<notin> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c\\<^sub>1,Normal\n        x\\<rangle> \\<Rightarrow> Fault f", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c\\<^sub>1,Normal\n      x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec_redex_Fault [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Fault f", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Fault exec'"], ["proof (chain)\npicking this:\n  s' = Fault f\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "have \"t=Fault f\""], ["proof (prove)\nusing this:\n  s' = Fault f\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t = Fault f", "by (auto intro: Fault_end)"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n  t = Fault f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n  t = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "using s_Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n  t = Fault f\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case Stuck"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Stuck_end [OF step this] s_Normal"], ["proof (chain)\npicking this:\n  s = Stuck \\<or>\n  (\\<exists>r x.\n      redex c\\<^sub>1 = Spec r \\<and>\n      s = Normal x \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p x.\n      redex c\\<^sub>1 = Call p \\<and> s = Normal x \\<and> \\<Gamma> p = None)\n  s = Normal x", "have \"(\\<exists>r. redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n            (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\""], ["proof (prove)\nusing this:\n  s = Stuck \\<or>\n  (\\<exists>r x.\n      redex c\\<^sub>1 = Spec r \\<and>\n      s = Normal x \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p x.\n      redex c\\<^sub>1 = Call p \\<and> s = Normal x \\<and> \\<Gamma> p = None)\n  s = Normal x\n\ngoal (1 subgoal):\n 1. (\\<exists>r.\n        redex c\\<^sub>1 = Spec r \\<and>\n        (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n    (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\nthis:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume \"redex c\\<^sub>1 = Spec r\" and \"(\\<forall>t. (x, t) \\<notin> r)\""], ["proof (state)\nthis:\n  redex c\\<^sub>1 = Spec r\n  \\<forall>t. (x, t) \\<notin> r\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "hence \"\\<Gamma>\\<turnstile> \\<langle>redex c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  redex c\\<^sub>1 = Spec r\n  \\<forall>t. (x, t) \\<notin> r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c\\<^sub>1,Normal\n        x\\<rangle> \\<Rightarrow> Stuck", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c\\<^sub>1,Normal\n      x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec_redex_Stuck [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Stuck", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Stuck exec'"], ["proof (chain)\npicking this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto intro: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "using s_Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume \"redex c\\<^sub>1 = Call p\" and \"\\<Gamma> p = None\""], ["proof (state)\nthis:\n  redex c\\<^sub>1 = Call p\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "hence \"\\<Gamma>\\<turnstile> \\<langle>redex c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  redex c\\<^sub>1 = Call p\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c\\<^sub>1,Normal\n        x\\<rangle> \\<Rightarrow> Stuck", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c\\<^sub>1,Normal\n      x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec_redex_Stuck [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Stuck", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Stuck exec'"], ["proof (chain)\npicking this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto intro: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "using s_Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Call ?p2; \\<Gamma> ?p2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>redex c\\<^sub>1 = Call ?p2; \\<Gamma> ?p2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>redex c\\<^sub>1 = Call ?p2; \\<Gamma> ?p2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Abrupt x)"], ["proof (state)\nthis:\n  s = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Abrupt [OF step this]"], ["proof (chain)\npicking this:\n  s' = Abrupt x", "have \"s'=Abrupt x\""], ["proof (prove)\nusing this:\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. s' = Abrupt x", "."], ["proof (state)\nthis:\n  s' = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x", "have \"t=Abrupt x\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. t = Abrupt x", "by (auto intro: Abrupt_end)"], ["proof (state)\nthis:\n  t = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with Abrupt"], ["proof (chain)\npicking this:\n  s = Abrupt x\n  t = Abrupt x", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Abrupt x\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Fault f)"], ["proof (state)\nthis:\n  s = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Fault [OF step this]"], ["proof (chain)\npicking this:\n  s' = Fault f", "have \"s'=Fault f\""], ["proof (prove)\nusing this:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "."], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Fault f", "have \"t=Fault f\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. t = Fault f", "by (auto intro: Fault_end)"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with Fault"], ["proof (chain)\npicking this:\n  s = Fault f\n  t = Fault f", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Fault f\n  t = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case Stuck"], ["proof (state)\nthis:\n  s = Stuck\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Stuck [OF step this]"], ["proof (chain)\npicking this:\n  s' = Stuck", "have \"s'=Stuck\""], ["proof (prove)\nusing this:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "."], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Stuck", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto intro: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with Stuck"], ["proof (chain)\npicking this:\n  s = Stuck\n  t = Stuck", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Stuck\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (15 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n(c\\<^sub>1', s');\n         \\<And>t.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n  c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n(c\\<^sub>1', s');\n         \\<And>t.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n  c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\nA total of 15 subgoals...", "case (SeqSkip c\\<^sub>2 s t)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (15 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n(c\\<^sub>1', s');\n         \\<And>t.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n         \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n  c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq Skip\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (cases s) (fastforce intro: exec.intros elim: exec_elim_cases)+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq Skip\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (14 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>2 s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>Catch Throw\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>2 s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>Catch Throw\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\nA total of 14 subgoals...", "case (SeqThrow c\\<^sub>2 s t)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (14 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n      s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Seq Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>2 s t.\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>Catch Throw\n c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Seq Throw\n                                   c\\<^sub>2,Normal\n        s\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_elim_cases)+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Seq Throw\n                                 c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n\ngoal (13 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>2 s t.\n        \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>Catch Skip\n c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>2 s t.\n        \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>Catch Skip\n c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\nA total of 13 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> t\n\ngoal (13 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c\\<^sub>2 s t.\n        \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n        \\<Gamma>\\<turnstile> \\<langle>Catch Skip\n c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1_,Normal\n      s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                   c\\<^sub>2_,Normal\n         s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c f t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n       f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                     f\\<rangle> \\<Rightarrow> t\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c f t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n       f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                     f\\<rangle> \\<Rightarrow> t\nA total of 12 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2 t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Cond b c\\<^sub>1\n                  c\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 10. \\<And>c f t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n       f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                     f\\<rangle> \\<Rightarrow> t\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                   c\\<^sub>2_,Normal\n         s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Cond b_ c\\<^sub>1_\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t\n\ngoal (11 subgoals):\n 1. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 10. \\<And>c t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 10. \\<And>c t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\nA total of 11 subgoals...", "case WhileTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>Seq c_\n                                 (While b_\n                                   c_),Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (11 subgoals):\n 1. \\<And>s b c t.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile> \\<langle>Seq c\n (While b c),Normal s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 9. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 10. \\<And>c t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile> \\<langle>Seq c_\n                                 (While b_\n                                   c_),Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b_\n                                   c_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b_\n                                 c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (10 subgoals):\n 1. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 9. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 10. \\<And>c f t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n       f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                     f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 9. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 10. \\<And>c f t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n       f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                     f\\<rangle> \\<Rightarrow> t", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (10 subgoals):\n 1. \\<And>s b c t.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Normal\n      s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>While b\n                  c,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 8. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 9. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 10. \\<And>c f t.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n       f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                     f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>While b_\n                                   c_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>While b_\n                                 c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (9 subgoals):\n 1. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 8. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 9. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 8. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 9. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case Call"], ["proof (state)\nthis:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (9 subgoals):\n 1. \\<And>p bdy s t.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile> \\<langle>bdy,Normal\n     s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 7. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 8. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 9. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile> \\<langle>bdy_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (8 subgoals):\n 1. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 7. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 8. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 7. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 8. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case CallUndefined"], ["proof (state)\nthis:\n  \\<Gamma> p_ = None\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (8 subgoals):\n 1. \\<And>p s t.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Call\n                  p,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 7. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 8. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = None\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Call p_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Call p_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (7 subgoals):\n 1. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 6. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 7. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 6. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 7. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (7 subgoals):\n 1. \\<And>c s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\ns,Normal s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>DynCom\nc,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 5. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 6. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 7. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c_ s_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>DynCom\n                                   c_,Normal s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>DynCom c_,Normal s_\\<rangle> \\<Rightarrow> t\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 5. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 5. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case (Catch c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 5. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "have step: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 5. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "have exec': \"\\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1' c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                   c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<And>t.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 5. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 6. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "proof (cases s)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Normal x)"], ["proof (state)\nthis:\n  s = Normal x\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "note s_Normal = this"], ["proof (state)\nthis:\n  s = Normal x\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "proof (cases s')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Normal x')"], ["proof (state)\nthis:\n  s' = Normal x'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 4. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec' [simplified Normal]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,Normal\n      x'\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,Normal\n      x'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                    x'\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "fix s''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                    x'\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume exec_c\\<^sub>1': \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal x'\\<rangle> \\<Rightarrow> Abrupt s''\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> Abrupt s''\n\ngoal (2 subgoals):\n 1. \\<And>s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                    x'\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume exec_c\\<^sub>2: \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal s''\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n     s''\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                    x'\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Catch.hyps (2) Normal exec_c\\<^sub>1' s_Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  s' = Normal x'\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> Abrupt s''\n  s = Normal x", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Abrupt s''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  s' = Normal x'\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> Abrupt s''\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Abrupt s''", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Abrupt s''\n\ngoal (2 subgoals):\n 1. \\<And>s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                    x'\\<rangle> \\<Rightarrow> Abrupt s';\n        \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n           s'\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                  c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec.CatchMatch [OF this exec_c\\<^sub>2] s_Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal x\\<rangle> \\<Rightarrow> t\n  s = Normal x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,Normal x\\<rangle> \\<Rightarrow> t\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume exec_c\\<^sub>1': \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal x'\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume t: \"\\<not> isAbr t\""], ["proof (state)\nthis:\n  \\<not> isAbr t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Catch.hyps (2) Normal exec_c\\<^sub>1' s_Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  s' = Normal x'\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> t\n  s = Normal x", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',s'\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,s\\<rangle> \\<Rightarrow> ?t\n  s' = Normal x'\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n      x'\\<rangle> \\<Rightarrow> t\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1',Normal\n                 x'\\<rangle> \\<Rightarrow> t;\n     \\<not> isAbr t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n               c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec.CatchMiss [OF this t] s_Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 ?c\\<^sub>2,Normal\n       x\\<rangle> \\<Rightarrow> t\n  s = Normal x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 ?c\\<^sub>2,Normal\n       x\\<rangle> \\<Rightarrow> t\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Abrupt x')"], ["proof (state)\nthis:\n  s' = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x'", "have \"t=Abrupt x'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. t = Abrupt x'", "by (auto intro:Abrupt_end)"], ["proof (state)\nthis:\n  t = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  t = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step Abrupt"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  s' = Abrupt x'", "have \"s=Abrupt x'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. s = Abrupt x'", "by (auto intro: step_Abrupt_end)"], ["proof (state)\nthis:\n  s = Abrupt x'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  t = Abrupt x'\n  s = Abrupt x'", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Abrupt x'\n  s = Abrupt x'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Fault f)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Fault_end [OF step this] s_Normal"], ["proof (chain)\npicking this:\n  s = Fault f \\<or>\n  (\\<exists>g c x.\n      redex c\\<^sub>1 = Guard f g c \\<and> s = Normal x \\<and> x \\<notin> g)\n  s = Normal x", "obtain g c where\n        redex_c\\<^sub>1: \"redex c\\<^sub>1 = Guard f g c\" and\n        fail: \"x \\<notin> g\""], ["proof (prove)\nusing this:\n  s = Fault f \\<or>\n  (\\<exists>g c x.\n      redex c\\<^sub>1 = Guard f g c \\<and> s = Normal x \\<and> x \\<notin> g)\n  s = Normal x\n\ngoal (1 subgoal):\n 1. (\\<And>g c.\n        \\<lbrakk>redex c\\<^sub>1 = Guard f g c; x \\<notin> g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  redex c\\<^sub>1 = Guard f g c\n  x \\<notin> g\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "hence \"\\<Gamma>\\<turnstile> \\<langle>redex c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\nusing this:\n  redex c\\<^sub>1 = Guard f g c\n  x \\<notin> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c\\<^sub>1,Normal\n        x\\<rangle> \\<Rightarrow> Fault f", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c\\<^sub>1,Normal\n      x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec_redex_Fault [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Fault f\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Fault f", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Fault exec'"], ["proof (chain)\npicking this:\n  s' = Fault f\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "have \"t=Fault f\""], ["proof (prove)\nusing this:\n  s' = Fault f\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t = Fault f", "by (auto intro: Fault_end)"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n  t = Fault f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n  t = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "using s_Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Fault f\n  t = Fault f\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case Stuck"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Stuck_end [OF step this] s_Normal"], ["proof (chain)\npicking this:\n  s = Stuck \\<or>\n  (\\<exists>r x.\n      redex c\\<^sub>1 = Spec r \\<and>\n      s = Normal x \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p x.\n      redex c\\<^sub>1 = Call p \\<and> s = Normal x \\<and> \\<Gamma> p = None)\n  s = Normal x", "have \"(\\<exists>r. redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n            (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\""], ["proof (prove)\nusing this:\n  s = Stuck \\<or>\n  (\\<exists>r x.\n      redex c\\<^sub>1 = Spec r \\<and>\n      s = Normal x \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p x.\n      redex c\\<^sub>1 = Call p \\<and> s = Normal x \\<and> \\<Gamma> p = None)\n  s = Normal x\n\ngoal (1 subgoal):\n 1. (\\<exists>r.\n        redex c\\<^sub>1 = Spec r \\<and>\n        (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n    (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\nthis:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume \"redex c\\<^sub>1 = Spec r\" and \"(\\<forall>t. (x, t) \\<notin> r)\""], ["proof (state)\nthis:\n  redex c\\<^sub>1 = Spec r\n  \\<forall>t. (x, t) \\<notin> r\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "hence \"\\<Gamma>\\<turnstile> \\<langle>redex c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  redex c\\<^sub>1 = Spec r\n  \\<forall>t. (x, t) \\<notin> r\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c\\<^sub>1,Normal\n        x\\<rangle> \\<Rightarrow> Stuck", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c\\<^sub>1,Normal\n      x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec_redex_Stuck [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Stuck", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Stuck exec'"], ["proof (chain)\npicking this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto intro: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "using s_Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "assume \"redex c\\<^sub>1 = Call p\" and \"\\<Gamma> p = None\""], ["proof (state)\nthis:\n  redex c\\<^sub>1 = Call p\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "hence \"\\<Gamma>\\<turnstile> \\<langle>redex c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  redex c\\<^sub>1 = Call p\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>redex\n                                   c\\<^sub>1,Normal\n        x\\<rangle> \\<Rightarrow> Stuck", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>redex\n                                 c\\<^sub>1,Normal\n      x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from exec_redex_Stuck [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck", "have \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal x\\<rangle> \\<Rightarrow> Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n       x\\<rangle> \\<Rightarrow> Stuck", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from Stuck exec'"], ["proof (chain)\npicking this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  s' = Stuck\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto intro: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "using s_Normal"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     x\\<rangle> \\<Rightarrow> Stuck\n  t = Stuck\n  s = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>redex c\\<^sub>1 = Call ?p2; \\<Gamma> ?p2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s' = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>redex c\\<^sub>1 = Call ?p2; \\<Gamma> ?p2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>r.\n      redex c\\<^sub>1 = Spec r \\<and> (\\<forall>t. (x, t) \\<notin> r)) \\<or>\n  (\\<exists>p. redex c\\<^sub>1 = Call p \\<and> \\<Gamma> p = None)\n  \\<lbrakk>redex c\\<^sub>1 = Spec ?r2;\n   \\<forall>t. (x, t) \\<notin> ?r2\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>redex c\\<^sub>1 = Call ?p2; \\<Gamma> ?p2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n             c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Abrupt x)"], ["proof (state)\nthis:\n  s = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Abrupt [OF step this]"], ["proof (chain)\npicking this:\n  s' = Abrupt x", "have \"s'=Abrupt x\""], ["proof (prove)\nusing this:\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. s' = Abrupt x", "."], ["proof (state)\nthis:\n  s' = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x", "have \"t=Abrupt x\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. t = Abrupt x", "by (auto intro: Abrupt_end)"], ["proof (state)\nthis:\n  t = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with Abrupt"], ["proof (chain)\npicking this:\n  s = Abrupt x\n  t = Abrupt x", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Abrupt x\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case (Fault f)"], ["proof (state)\nthis:\n  s = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Fault [OF step this]"], ["proof (chain)\npicking this:\n  s' = Fault f", "have \"s'=Fault f\""], ["proof (prove)\nusing this:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "."], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Fault f", "have \"t=Fault f\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. t = Fault f", "by (auto intro: Fault_end)"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with Fault"], ["proof (chain)\npicking this:\n  s = Fault f\n  t = Fault f", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Fault f\n  t = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "case Stuck"], ["proof (state)\nthis:\n  s = Stuck\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "from step_Stuck [OF step this]"], ["proof (chain)\npicking this:\n  s' = Stuck", "have \"s'=Stuck\""], ["proof (prove)\nusing this:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "."], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with exec'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Stuck", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1'\n                                 c\\<^sub>2,s'\\<rangle> \\<Rightarrow> t\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck", "by (auto intro: Stuck_end)"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "with Stuck"], ["proof (chain)\npicking this:\n  s = Stuck\n  t = Stuck", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Stuck\n  t = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                   c\\<^sub>2,s\\<rangle> \\<Rightarrow> t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch c\\<^sub>1\n                                 c\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 4. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 5. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 4. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 5. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case CatchThrow"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2,Normal\n          s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Throw\nc\\<^sub>2,Normal s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 3. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 4. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 5. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>2_,Normal\n      s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch Throw\n                                   c\\<^sub>2_,Normal\n         s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch Throw\n                                 c\\<^sub>2_,Normal\n       s_\\<rangle> \\<Rightarrow> t\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 3. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 3. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case CatchSkip"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,s_\\<rangle> \\<Rightarrow> t\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 s t.\n       \\<Gamma>\\<turnstile> \\<langle>Skip,s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> \\<langle>Catch Skip\nc\\<^sub>2,s\\<rangle> \\<Rightarrow> t\n 2. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 3. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 4. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,s_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Catch Skip\n                                   c\\<^sub>2_,s_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Catch Skip\n                                 c\\<^sub>2_,s_\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 2. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 3. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 2. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 3. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case FaultProp"], ["proof (state)\nthis:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Fault f_\\<rangle> \\<Rightarrow> t\n\ngoal (3 subgoals):\n 1. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Fault\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Fault\n                    f\\<rangle> \\<Rightarrow> t\n 2. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 3. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Fault f_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c_,Fault f_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Fault f_\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 2. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 2. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case StuckProp"], ["proof (state)\nthis:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<And>c t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Stuck\\<rangle> \\<Rightarrow> t\n 2. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c_,Stuck\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Stuck\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "case AbruptProp"], ["proof (state)\nthis:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt f_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>c f t.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt\n      f\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>c,Abrupt\n                    f\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile> \\<langle>Skip,Abrupt f_\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c_,Abrupt f_\\<rangle> \\<Rightarrow> t", "by (fastforce intro: exec.intros elim: exec_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c_,Abrupt f_\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem steps_Skip_impl_exec:\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Skip,t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Skip, t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>Skip,t\\<rangle> \\<Rightarrow> t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (Skip, t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> t", "case Refl"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>Skip,t\\<rangle> \\<Rightarrow> t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (Skip, t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Skip,t\\<rangle> \\<Rightarrow> t", "by (cases t) (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Skip,t\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (Skip, t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (Skip, t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> t", "case (Trans c s c' s')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (Skip, t)\n  \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (Skip, t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\" and \"\\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') &&&\n    \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (Skip, t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t", "by (rule step_extend)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem steps_Throw_impl_exec:\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (Throw,Normal t)\"\n  shows \"\\<Gamma>\\<turnstile>\\<langle>c,s\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Abrupt t", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (Throw, Normal t)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Abrupt t", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n   t\\<rangle> \\<Rightarrow> Abrupt t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> Abrupt\n                              t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> Abrupt\n       t", "case Refl"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n   t\\<rangle> \\<Rightarrow> Abrupt t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> Abrupt\n                              t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> Abrupt\n       t", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n   t\\<rangle> \\<Rightarrow> Abrupt t", "by (auto intro: exec.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>Throw,Normal\n t\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> Abrupt\n                              t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> Abrupt\n       t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> Abrupt\n                              t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> Abrupt\n       t", "case (Trans c s c' s')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (Throw, Normal t)\n  \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> Abrupt\n                              t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> Abrupt\n       t", "have \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\" and \"\\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> Abrupt t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') &&&\n    \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> Abrupt t", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal t);\n        \\<Gamma>\\<turnstile> \\<langle>aa,ba\\<rangle> \\<Rightarrow> Abrupt\n                              t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> \\<langle>a,b\\<rangle> \\<Rightarrow> Abrupt\n       t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> \\<langle>c',s'\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Abrupt t", "by (rule step_extend)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c,s\\<rangle> \\<Rightarrow> Abrupt t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ************************************************************************ *)"], ["", "subsection \\<open>Infinite Computations: \\<open>\\<Gamma>\\<turnstile>(c, s) \\<rightarrow> \\<dots>(\\<infinity>)\\<close>\\<close>"], ["", "(* ************************************************************************ *)"], ["", "definition inf:: \"('s,'p,'f) body \\<Rightarrow> ('s,'p,'f) config \\<Rightarrow> bool\"\n (\"_\\<turnstile> _ \\<rightarrow> \\<dots>'(\\<infinity>')\" [60,80] 100) where\n\"\\<Gamma>\\<turnstile> cfg \\<rightarrow> \\<dots>(\\<infinity>) \\<equiv> (\\<exists>f. f (0::nat) = cfg \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)))\""], ["", "lemma not_infI: \"\\<lbrakk>\\<And>f. \\<lbrakk>f 0 = cfg; \\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\\<rbrakk> \\<Longrightarrow> False\\<rbrakk>\n                \\<Longrightarrow> \\<not>\\<Gamma>\\<turnstile> cfg \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = cfg;\n         \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> False) \\<Longrightarrow>\n    \\<not> \\<Gamma>\\<turnstile> cfg \\<rightarrow> \\<dots>(\\<infinity>)", "by (auto simp add: inf_def)"], ["", "(* ************************************************************************ *)"], ["", "subsection \\<open>Equivalence between Termination and the Absence of Infinite Computations\\<close>"], ["", "(* ************************************************************************ *)"], ["", "lemma step_preserves_termination:\n  assumes step: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s')\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c' \\<down> s'", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c' \\<down> s'", "proof (induct)"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>f s.\n       \\<Gamma>\\<turnstile>Basic f \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> Normal (f s)\n 2. \\<And>s t r.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal t\n 3. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 5. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                              c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\nA total of 21 subgoals...", "case Basic"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Basic f_ \\<down> Normal s_\n\ngoal (21 subgoals):\n 1. \\<And>f s.\n       \\<Gamma>\\<turnstile>Basic f \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> Normal (f s)\n 2. \\<And>s t r.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal t\n 3. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 5. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 10. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                              c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\nA total of 21 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Basic f_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Normal (f_ s_)", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Normal (f_ s_)\n\ngoal (20 subgoals):\n 1. \\<And>s t r.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal t\n 2. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n         (While b c) \\<down> Normal s\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>s t r.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal t\n 2. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n         (While b c) \\<down> Normal s\nA total of 20 subgoals...", "case Spec"], ["proof (state)\nthis:\n  (s_, t_) \\<in> r_\n  \\<Gamma>\\<turnstile>Spec r_ \\<down> Normal s_\n\ngoal (20 subgoals):\n 1. \\<And>s t r.\n       \\<lbrakk>(s, t) \\<in> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal t\n 2. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 4. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 9. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b;\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n         (While b c) \\<down> Normal s\nA total of 20 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (s_, t_) \\<in> r_\n  \\<Gamma>\\<turnstile>Spec r_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Normal t_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Normal t_\n\ngoal (19 subgoals):\n 1. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\nA total of 19 subgoals...", "case SpecStuck"], ["proof (state)\nthis:\n  \\<forall>t. (s_, t) \\<notin> r_\n  \\<Gamma>\\<turnstile>Spec r_ \\<down> Normal s_\n\ngoal (19 subgoals):\n 1. \\<And>s r.\n       \\<lbrakk>\\<forall>t. (s, t) \\<notin> r;\n        \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 3. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<notin> b;\n         \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\nA total of 19 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (s_, t) \\<notin> r_\n  \\<Gamma>\\<turnstile>Spec r_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Stuck", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n\ngoal (18 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\nA total of 18 subgoals...", "next"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\nA total of 18 subgoals...", "case Guard"], ["proof (state)\nthis:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ \\<down> Normal s_\n\ngoal (18 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<in> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> Normal s\n 2. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c_ \\<down> Normal s_", "by (fastforce intro: terminates.intros elim: terminates_Normal_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ \\<down> Normal s_\n\ngoal (17 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 10. \\<And>p s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 10. \\<And>p s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\nA total of 17 subgoals...", "case GuardFault"], ["proof (state)\nthis:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ \\<down> Normal s_\n\ngoal (17 subgoals):\n 1. \\<And>s g f c.\n       \\<lbrakk>s \\<notin> g;\n        \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 10. \\<And>p s.\n        \\<lbrakk>\\<Gamma> p = None;\n         \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> g_\n  \\<Gamma>\\<turnstile>Guard f_ g_ c_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Fault f_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Fault f_\n\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 9. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 10. \\<And>c s.\n        \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c s \\<down> Normal s\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 9. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 10. \\<And>c s.\n        \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c s \\<down> Normal s\nA total of 16 subgoals...", "case (Seq c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s'\n  \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\n\ngoal (16 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 9. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 10. \\<And>c s.\n        \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c s \\<down> Normal s\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s'\n  \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Seq c\\<^sub>1' c\\<^sub>2 \\<down> s'", "apply (cases s)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                  (c\\<^sub>1', s');\n     \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n     \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n     c\\<^sub>2 \\<down> s'", "apply     (cases s')"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Normal x1a\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>x1 x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>x1 x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                  (c\\<^sub>1', s');\n     \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n     \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n     c\\<^sub>2 \\<down> s'", "apply         (fastforce intro: terminates.intros step_extend\n                    elim: terminates_Normal_elim_cases)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>x1 x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                  (c\\<^sub>1', s');\n     \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n     \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\\<^sub>1'\n     c\\<^sub>2 \\<down> s'", "apply (fastforce intro: terminates.intros dest: step_Abrupt_prop\n      step_Fault_prop step_Stuck_prop)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c\\<^sub>1' c\\<^sub>2 \\<down> s'\n\ngoal (15 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 8. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 9. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 10. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n(c\\<^sub>1', s');\n         \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n         \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n         c\\<^sub>2 \\<down> s'\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 8. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 9. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 10. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n(c\\<^sub>1', s');\n         \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n         \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n         c\\<^sub>2 \\<down> s'\nA total of 15 subgoals...", "case (SeqSkip c\\<^sub>2 s)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s\n\ngoal (15 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 8. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 9. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 10. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n(c\\<^sub>1', s');\n         \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n         \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n         c\\<^sub>2 \\<down> s'\nA total of 15 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s", "apply (cases s)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s;\n        s = Normal x1\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 3. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n 4. \\<lbrakk>\\<Gamma>\\<turnstile>Seq Skip c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s", "apply (fastforce intro: terminates.intros exec.intros\n            elim: terminates_Normal_elim_cases )+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s\n\ngoal (14 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 7. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 10. \\<And>c\\<^sub>2 s.\n        \\<Gamma>\\<turnstile>Catch Throw\n                             c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 7. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 10. \\<And>c\\<^sub>2 s.\n        \\<Gamma>\\<turnstile>Catch Throw\n                             c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\nA total of 14 subgoals...", "case (SeqThrow c\\<^sub>2 s)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq Throw c\\<^sub>2 \\<down> Normal s\n\ngoal (14 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Seq Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 7. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 8. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 9. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 10. \\<And>c\\<^sub>2 s.\n        \\<Gamma>\\<turnstile>Catch Throw\n                             c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq Throw c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Throw \\<down> Normal s", "by (fastforce intro: terminates.intros exec.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n\ngoal (13 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 6. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 7. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 8. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 9. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 10. \\<And>c\\<^sub>2 s.\n        \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>Skip \\<down> s\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 6. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 7. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 8. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 9. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 10. \\<And>c\\<^sub>2 s.\n        \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>Skip \\<down> s\nA total of 13 subgoals...", "case CondTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ \\<down> Normal s_\n\ngoal (13 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 6. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 7. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 8. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 9. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 10. \\<And>c\\<^sub>2 s.\n        \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>Skip \\<down> s\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_", "by (fastforce intro: terminates.intros exec.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1_ \\<down> Normal s_\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 5. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 9. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 10. \\<And>c f.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 5. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 9. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 10. \\<And>c f.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\nA total of 12 subgoals...", "case CondFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ \\<down> Normal s_\n\ngoal (12 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>Cond b c\\<^sub>1\n                             c\\<^sub>2 \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 5. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 6. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 7. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 9. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 10. \\<And>c f.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\nA total of 12 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>Cond b_ c\\<^sub>1_ c\\<^sub>2_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_", "by (fastforce intro: terminates.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_\n\ngoal (11 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 9. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 10. \\<And>c.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 9. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 10. \\<And>c.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\nA total of 11 subgoals...", "case WhileTrue"], ["proof (state)\nthis:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>While b_ c_ \\<down> Normal s_\n\ngoal (11 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c\n        (While b c) \\<down> Normal s\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 4. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 5. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 6. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 8. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 9. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 10. \\<And>c.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<in> b_\n  \\<Gamma>\\<turnstile>While b_ c_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Seq c_ (While b_ c_) \\<down> Normal s_", "by (fastforce intro: terminates.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c_ (While b_ c_) \\<down> Normal s_\n\ngoal (10 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 3. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 8. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 9. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 10. \\<And>c f.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 3. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 8. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 9. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 10. \\<And>c f.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case WhileFalse"], ["proof (state)\nthis:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>While b_ c_ \\<down> Normal s_\n\ngoal (10 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>While b c \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 3. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 5. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 7. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 8. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 9. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 10. \\<And>c f.\n        \\<lbrakk>c \\<noteq> Skip; redex c = c;\n         \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  s_ \\<notin> b_\n  \\<Gamma>\\<turnstile>While b_ c_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Normal s_", "by (fastforce intro: terminates.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Normal s_\n\ngoal (9 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 7. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 8. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 9. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 7. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 8. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 9. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case Call"], ["proof (state)\nthis:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile>Call p_ \\<down> Normal s_\n\ngoal (9 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n 2. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 4. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 6. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 7. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 8. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 9. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = Some bdy_\n  \\<Gamma>\\<turnstile>Call p_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>bdy_ \\<down> Normal s_", "by (fastforce intro: terminates.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>bdy_ \\<down> Normal s_\n\ngoal (8 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 6. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 7. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 8. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 6. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 7. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 8. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case CallUndefined"], ["proof (state)\nthis:\n  \\<Gamma> p_ = None\n  \\<Gamma>\\<turnstile>Call p_ \\<down> Normal s_\n\ngoal (8 subgoals):\n 1. \\<And>p s.\n       \\<lbrakk>\\<Gamma> p = None;\n        \\<Gamma>\\<turnstile>Call p \\<down> Normal s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 3. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 5. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 6. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 7. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 8. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> p_ = None\n  \\<Gamma>\\<turnstile>Call p_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Stuck", "by (fastforce intro: terminates.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n\ngoal (7 subgoals):\n 1. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 5. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 6. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 7. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 5. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 6. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 7. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case DynCom"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>DynCom c_ \\<down> Normal s_\n\ngoal (7 subgoals):\n 1. \\<And>c s.\n       \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c s \\<down> Normal s\n 2. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 4. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 5. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 6. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 7. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>DynCom c_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c_ s_ \\<down> Normal s_", "by (fastforce intro: terminates.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c_ s_ \\<down> Normal s_\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 4. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 5. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 6. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 4. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 5. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 6. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case (Catch c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s'\n  \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\n\ngoal (6 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s' c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 3. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 4. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 5. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 6. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1', s')\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s'\n  \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Catch c\\<^sub>1' c\\<^sub>2 \\<down> s'", "apply (cases s)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                  (c\\<^sub>1', s');\n     \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n     \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n     c\\<^sub>2 \\<down> s'", "apply     (cases s')"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Normal x1a\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>x1 x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>x1 x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 7. \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                  (c\\<^sub>1', s');\n     \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n     \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n     c\\<^sub>2 \\<down> s'", "apply         (fastforce intro: terminates.intros step_extend\n                    elim: terminates_Normal_elim_cases)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 2. \\<And>x1 x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 3. \\<And>x1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Normal x1; s' = Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 4. \\<And>x2.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Abrupt x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 5. \\<And>x3.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                     (c\\<^sub>1', s');\n        \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n        \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n        s = Fault x3\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n        c\\<^sub>2 \\<down> s'\n 6. \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n                                  (c\\<^sub>1', s');\n     \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> s \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>1' \\<down> s';\n     \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> s;\n     s = Stuck\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c\\<^sub>1'\n     c\\<^sub>2 \\<down> s'", "apply (fastforce intro: terminates.intros dest: step_Abrupt_prop\n      step_Fault_prop step_Stuck_prop)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch c\\<^sub>1' c\\<^sub>2 \\<down> s'\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 3. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 4. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 5. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 3. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 4. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 5. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case CatchThrow"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch Throw c\\<^sub>2_ \\<down> Normal s_\n\ngoal (5 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Throw\n                            c\\<^sub>2 \\<down> Normal s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n 2. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 3. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 4. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 5. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch Throw c\\<^sub>2_ \\<down> Normal s_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_", "by (fastforce intro: terminates.intros exec.intros\n            elim: terminates_Normal_elim_cases )"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2_ \\<down> Normal s_\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 2. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 3. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 2. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 3. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case (CatchSkip c\\<^sub>2 s)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s\n\ngoal (4 subgoals):\n 1. \\<And>c\\<^sub>2 s.\n       \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Skip \\<down> s\n 2. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 3. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 4. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch Skip c\\<^sub>2 \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> s", "by (cases s) (fastforce intro: terminates.intros)+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> s\n\ngoal (3 subgoals):\n 1. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 2. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 2. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case FaultProp"], ["proof (state)\nthis:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile>c_ \\<down> Fault f_\n\ngoal (3 subgoals):\n 1. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Fault f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Fault f\n 2. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 3. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile>c_ \\<down> Fault f_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Fault f_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Fault f_\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case StuckProp"], ["proof (state)\nthis:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile>c_ \\<down> Stuck\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Stuck\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n 2. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile>c_ \\<down> Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Stuck", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Stuck\n\ngoal (1 subgoal):\n 1. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "case AbruptProp"], ["proof (state)\nthis:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile>c_ \\<down> Abrupt f_\n\ngoal (1 subgoal):\n 1. \\<And>c f.\n       \\<lbrakk>c \\<noteq> Skip; redex c = c;\n        \\<Gamma>\\<turnstile>c \\<down> Abrupt f\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f", "thus ?case"], ["proof (prove)\nusing this:\n  c_ \\<noteq> Skip\n  redex c_ = c_\n  \\<Gamma>\\<turnstile>c_ \\<down> Abrupt f_\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f_", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Abrupt f_\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_preserves_termination:\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s')\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c' \\<down> s'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c' \\<down> s'", "proof (induct rule: rtranclp_induct2 [consumes 1, case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c \\<down> s\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "case Refl"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c \\<down> s\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "case Trans"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a___, b___)\n  \\<Gamma>\\<turnstile> (a___, b___) \\<rightarrow> (a_, b_)\n  \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>a___ \\<down> b___\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (a___, b___)\n  \\<Gamma>\\<turnstile> (a___, b___) \\<rightarrow> (a_, b_)\n  \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>a___ \\<down> b___\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>a_ \\<down> b_", "by (blast dest: step_preserves_termination)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>a_ \\<down> b_\n\ngoal:\nNo subgoals!", "qed"], ["", "ML \\<open>\n  ML_Thms.bind_thm (\"tranclp_induct2\", Split_Rule.split_rule @{context}\n    (Rule_Insts.read_instantiate @{context}\n      [(((\"a\", 0), Position.none), \"(aa,ab)\"), (((\"b\", 0), Position.none), \"(ba,bb)\")] []\n      @{thm tranclp_induct}));\n\\<close>"], ["", "lemma steps_preserves_termination':\n  assumes steps: \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s')\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c' \\<down> s'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c' \\<down> s'", "proof (induct rule: tranclp_induct2 [consumes 1, case_names Step Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (a, b);\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>a \\<down> b\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "case Step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (a_, b_)\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (a, b);\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>a \\<down> b\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (a_, b_)\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>a_ \\<down> b_", "by (blast intro: step_preserves_termination)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>a_ \\<down> b_\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "case Trans"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a___, b___)\n  \\<Gamma>\\<turnstile> (a___, b___) \\<rightarrow> (a_, b_)\n  \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>a___ \\<down> b___\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>a \\<down> b;\n        \\<Gamma>\\<turnstile>c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>aa \\<down> ba", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (a___, b___)\n  \\<Gamma>\\<turnstile> (a___, b___) \\<rightarrow> (a_, b_)\n  \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>a___ \\<down> b___\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>a_ \\<down> b_", "by (blast dest: step_preserves_termination)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>a_ \\<down> b_\n\ngoal:\nNo subgoals!", "qed"], ["", "definition head_com:: \"('s,'p,'f) com \\<Rightarrow> ('s,'p,'f) com\"\nwhere\n\"head_com c =\n  (case c of\n     Seq c\\<^sub>1 c\\<^sub>2 \\<Rightarrow> c\\<^sub>1\n   | Catch c\\<^sub>1 c\\<^sub>2 \\<Rightarrow> c\\<^sub>1\n   | _ \\<Rightarrow> c)\""], ["", "definition head:: \"('s,'p,'f) config \\<Rightarrow> ('s,'p,'f) config\"\n  where \"head cfg = (head_com (fst cfg), snd cfg)\""], ["", "lemma le_Suc_cases: \"\\<lbrakk>\\<And>i. \\<lbrakk>i < k\\<rbrakk> \\<Longrightarrow> P i; P k\\<rbrakk> \\<Longrightarrow> \\<forall>i<(Suc k). P i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. i < k \\<Longrightarrow> P i; P k\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<Suc k. P i", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i. i < k \\<Longrightarrow> P i; P k;\n        i < Suc k\\<rbrakk>\n       \\<Longrightarrow> P i", "apply (case_tac \"i=k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i. i < k \\<Longrightarrow> P i; P k; i < Suc k;\n        i = k\\<rbrakk>\n       \\<Longrightarrow> P i\n 2. \\<And>i.\n       \\<lbrakk>\\<And>i. i < k \\<Longrightarrow> P i; P k; i < Suc k;\n        i \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> P i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma redex_Seq_False: \"\\<And>c' c''. (redex c = Seq c'' c') = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' c''. (redex c = Seq c'' c') = False", "by (induct c) auto"], ["", "lemma redex_Catch_False: \"\\<And>c' c''. (redex c = Catch c'' c') = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' c''. (redex c = Catch c'' c') = False", "by (induct c) auto"], ["", "lemma infinite_computation_extract_head_Seq:\n  assumes inf_comp: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\"\n  assumes f_0: \"f 0 = (Seq c\\<^sub>1 c\\<^sub>2,s)\"\n  assumes not_fin: \"\\<forall>i<k. \\<not> final (head (f i))\"\n  shows \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n               \\<Gamma>\\<turnstile>head (f i) \\<rightarrow> head (f (i+1))\"\n        (is \"\\<forall>i<k. ?P i\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "using not_fin"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<0. \\<not> final (head (f i)) \\<Longrightarrow>\n    \\<forall>i<0.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0. \\<not> final (head (f i))\n\ngoal (2 subgoals):\n 1. \\<forall>i<0. \\<not> final (head (f i)) \\<Longrightarrow>\n    \\<forall>i<0.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<0.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<0.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "case (Suc k)"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n  \\<forall>i<Suc k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "have not_fin_Suc:\n    \"\\<forall>i<Suc k. \\<not> final (head (f i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> final (head (f i))", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "from this[rule_format]"], ["proof (chain)\npicking this:\n  ?i < Suc k \\<Longrightarrow> \\<not> final (head (f ?i))", "have not_fin_k:\n    \"\\<forall>i<k. \\<not> final (head (f i))\""], ["proof (prove)\nusing this:\n  ?i < Suc k \\<Longrightarrow> \\<not> final (head (f ?i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> final (head (f i))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subgoal_tac \"i < Suc k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i)); i < Suc k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> i < Suc k", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> i < Suc k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "from Suc.hyps [OF this]"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "have hyp: \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "."], ["proof (state)\nthis:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k.\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "proof (rule le_Suc_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "assume \"i < k\""], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "then"], ["proof (chain)\npicking this:\n  i < k", "show \"?P i\""], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by (rule hyp [rule_format])"], ["proof (state)\nthis:\n  (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "show \"?P k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "from hyp [rule_format, of \"k - 1\"] f_0"], ["proof (chain)\npicking this:\n  k - 1 < k \\<Longrightarrow>\n  (\\<exists>c' s'. f (k - 1 + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f (k - 1)) \\<rightarrow> head (f (k - 1 + 1))\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)", "obtain c' fs' L' s' where  f_k: \"f k = (Seq c' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  k - 1 < k \\<Longrightarrow>\n  (\\<exists>c' s'. f (k - 1 + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f (k - 1)) \\<rightarrow> head (f (k - 1 + 1))\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\n\ngoal (1 subgoal):\n 1. (\\<And>c' s'.\n        f k = (Seq c' c\\<^sub>2, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases k) auto"], ["proof (state)\nthis:\n  f k = (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "from inf_comp [rule_format, of k] f_k"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Seq c' c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile>(Seq c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "from not_fin_Suc [rule_format, of k] f_k"], ["proof (chain)\npicking this:\n  k < Suc k \\<Longrightarrow> \\<not> final (head (f k))\n  f k = (Seq c' c\\<^sub>2, s')", "have \"\\<not> final (c',s')\""], ["proof (prove)\nusing this:\n  k < Suc k \\<Longrightarrow> \\<not> final (head (f k))\n  f k = (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<not> final (c', s')", "by (simp add: final_def head_def head_com_def)"], ["proof (state)\nthis:\n  \\<not> final (c', s')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n  \\<not> final (c', s')", "obtain c'' s'' where\n         \"\\<Gamma>\\<turnstile>(c', s') \\<rightarrow> (c'', s'')\" and\n         \"f (k + 1) = (Seq c'' c\\<^sub>2, s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n  \\<not> final (c', s')\n\ngoal (1 subgoal):\n 1. (\\<And>c'' s''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'');\n         f (k + 1) = (Seq c'' c\\<^sub>2, s'')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases (auto simp add: redex_Seq_False final_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  f (k + 1) = (Seq c'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "with f_k"], ["proof (chain)\npicking this:\n  f k = (Seq c' c\\<^sub>2, s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  f (k + 1) = (Seq c'' c\\<^sub>2, s'')", "show ?thesis"], ["proof (prove)\nusing this:\n  f k = (Seq c' c\\<^sub>2, s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  f (k + 1) = (Seq c'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>c' s'. f (k + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<Suc k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinite_computation_extract_head_Catch:\n  assumes inf_comp: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\"\n  assumes f_0: \"f 0 = (Catch c\\<^sub>1 c\\<^sub>2,s)\"\n  assumes not_fin: \"\\<forall>i<k. \\<not> final (head (f i))\"\n  shows \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n               \\<Gamma>\\<turnstile>head (f i) \\<rightarrow> head (f (i+1))\"\n        (is \"\\<forall>i<k. ?P i\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "using not_fin"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<0. \\<not> final (head (f i)) \\<Longrightarrow>\n    \\<forall>i<0.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0. \\<not> final (head (f i))\n\ngoal (2 subgoals):\n 1. \\<forall>i<0. \\<not> final (head (f i)) \\<Longrightarrow>\n    \\<forall>i<0.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<0.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<0.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "case (Suc k)"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n  \\<forall>i<Suc k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "have not_fin_Suc:\n    \"\\<forall>i<Suc k. \\<not> final (head (f i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> final (head (f i))", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "from this[rule_format]"], ["proof (chain)\npicking this:\n  ?i < Suc k \\<Longrightarrow> \\<not> final (head (f ?i))", "have not_fin_k:\n    \"\\<forall>i<k. \\<not> final (head (f i))\""], ["proof (prove)\nusing this:\n  ?i < Suc k \\<Longrightarrow> \\<not> final (head (f ?i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> final (head (f i))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subgoal_tac \"i < Suc k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i)); i < Suc k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> i < Suc k", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>i.\n                   i < Suc k \\<Longrightarrow> \\<not> final (head (f i));\n        i < k; final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> i < Suc k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "from Suc.hyps [OF this]"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "have hyp: \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<forall>i<k.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "."], ["proof (state)\nthis:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k. \\<not> final (head (f i)) \\<Longrightarrow>\n                \\<forall>i<k.\n                   (\\<exists>c' s'.\n                       f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1));\n        \\<forall>i<Suc k. \\<not> final (head (f i))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc k.\n                            (\\<exists>c' s'.\n                                f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n                            \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n           head (f (i + 1))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k.\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "proof (rule le_Suc_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "assume \"i < k\""], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < k \\<Longrightarrow>\n       (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n 2. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "then"], ["proof (chain)\npicking this:\n  i < k", "show \"?P i\""], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by (rule hyp [rule_format])"], ["proof (state)\nthis:\n  (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "show \"?P k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "from hyp [rule_format, of \"k - 1\"] f_0"], ["proof (chain)\npicking this:\n  k - 1 < k \\<Longrightarrow>\n  (\\<exists>c' s'. f (k - 1 + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f (k - 1)) \\<rightarrow> head (f (k - 1 + 1))\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)", "obtain c' fs' L' s' where  f_k: \"f k = (Catch c' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  k - 1 < k \\<Longrightarrow>\n  (\\<exists>c' s'. f (k - 1 + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f (k - 1)) \\<rightarrow> head (f (k - 1 + 1))\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\n\ngoal (1 subgoal):\n 1. (\\<And>c' s'.\n        f k = (Catch c' c\\<^sub>2, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases k) auto"], ["proof (state)\nthis:\n  f k = (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "from inf_comp [rule_format, of k] f_k"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Catch c' c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile>(Catch c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "from not_fin_Suc [rule_format, of k] f_k"], ["proof (chain)\npicking this:\n  k < Suc k \\<Longrightarrow> \\<not> final (head (f k))\n  f k = (Catch c' c\\<^sub>2, s')", "have \"\\<not> final (c',s')\""], ["proof (prove)\nusing this:\n  k < Suc k \\<Longrightarrow> \\<not> final (head (f k))\n  f k = (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<not> final (c', s')", "by (simp add: final_def head_def head_com_def)"], ["proof (state)\nthis:\n  \\<not> final (c', s')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n  \\<not> final (c', s')", "obtain c'' s'' where\n         \"\\<Gamma>\\<turnstile>(c', s') \\<rightarrow> (c'', s'')\" and\n         \"f (k + 1) = (Catch c'' c\\<^sub>2, s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c' c\\<^sub>2, s') \\<rightarrow> f (k + 1)\n  \\<not> final (c', s')\n\ngoal (1 subgoal):\n 1. (\\<And>c'' s''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'');\n         f (k + 1) = (Catch c'' c\\<^sub>2, s'')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases (auto simp add: redex_Catch_False final_def)+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  f (k + 1) = (Catch c'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "with f_k"], ["proof (chain)\npicking this:\n  f k = (Catch c' c\\<^sub>2, s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  f (k + 1) = (Catch c'' c\\<^sub>2, s'')", "show ?thesis"], ["proof (prove)\nusing this:\n  f k = (Catch c' c\\<^sub>2, s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  f (k + 1) = (Catch c'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n    \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>c' s'. f (k + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n  \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<Suc k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_inf_Throw: \"\\<not> \\<Gamma>\\<turnstile>(Throw,s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> \\<dots>(\\<infinity>)", "obtain f where\n    step [rule_format]: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\" and\n    f_0: \"f 0 = (Throw, s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1);\n         f 0 = (Throw, s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (?i + 1)\n  f 0 = (Throw, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from step [of 0, simplified f_0] step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> f (0 + 1)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (1 + 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> f (0 + 1)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (1 + 1)\n\ngoal (1 subgoal):\n 1. False", "by cases (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split_inf_Seq:\n  assumes inf_comp: \"\\<Gamma>\\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n         (\\<exists>s'. \\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Skip,s') \\<and> \\<Gamma>\\<turnstile>(c\\<^sub>2,s') \\<rightarrow> \\<dots>(\\<infinity>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from inf_comp"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>)", "obtain f where\n    step: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\" and\n    f_0: \"f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1);\n         f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_0"], ["proof (chain)\npicking this:\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)", "have head_f_0: \"head (f 0) = (c\\<^sub>1,s)\""], ["proof (prove)\nusing this:\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\n\ngoal (1 subgoal):\n 1. head (f 0) = (c\\<^sub>1, s)", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  head (f 0) = (c\\<^sub>1, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "proof (cases \"\\<exists>i. final (head (f i))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "case True"], ["proof (state)\nthis:\n  \\<exists>i. final (head (f i))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "define k where \"k = (LEAST i. final (head (f i)))\""], ["proof (state)\nthis:\n  k = (LEAST i. final (head (f i)))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "have less_k: \"\\<forall>i<k. \\<not> final (head (f i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> final (head (f i))", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < k \\<Longrightarrow> \\<not> final (head (f i))", "apply (unfold k_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < (LEAST i. final (head (f i))) \\<Longrightarrow>\n       \\<not> final (head (f i))", "apply (drule not_less_Least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> final (head (f i)) \\<Longrightarrow> \\<not> final (head (f i))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> final (head (f i))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from infinite_computation_extract_head_Seq [OF step f_0 this]"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "obtain step_head: \"\\<forall>i<k. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\" and\n           conf: \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s'))\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<forall>i<k.\n                 \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\nhead (f (i + 1));\n      \\<forall>i<k.\n         \\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n  \\<forall>i<k. \\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from True"], ["proof (chain)\npicking this:\n  \\<exists>i. final (head (f i))", "have final_f_k: \"final (head (f k))\""], ["proof (prove)\nusing this:\n  \\<exists>i. final (head (f i))\n\ngoal (1 subgoal):\n 1. final (head (f k))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow> final (head (f k))", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. final (head (f i)) \\<Longrightarrow> final (head (f k))", "apply (drule LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       final (head (f (LEAST x. final (head (f x))))) \\<Longrightarrow>\n       final (head (f k))", "apply (simp add: k_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  final (head (f k))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  final (head (f k))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_0 conf [rule_format, of \"k - 1\"]"], ["proof (chain)\npicking this:\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\n  k - 1 < k \\<Longrightarrow>\n  \\<exists>c' s'. f (k - 1 + 1) = (Seq c' c\\<^sub>2, s')", "obtain c' s' where f_k: \"f k = (Seq c' c\\<^sub>2,s')\""], ["proof (prove)\nusing this:\n  f 0 = (Seq c\\<^sub>1 c\\<^sub>2, s)\n  k - 1 < k \\<Longrightarrow>\n  \\<exists>c' s'. f (k - 1 + 1) = (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. (\\<And>c' s'.\n        f k = (Seq c' c\\<^sub>2, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases k) auto"], ["proof (state)\nthis:\n  f k = (Seq c' c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  f k = (Seq c' c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step_head"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "have steps_head: \"\\<Gamma>\\<turnstile>head (f 0) \\<rightarrow>\\<^sup>* head (f k)\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                            head (f (i + 1)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                            head (f (i + 1)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<0.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "case (Suc m)"], ["proof (state)\nthis:\n  \\<forall>i<m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                          head (f (i + 1)) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)\n  \\<forall>i<Suc m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "have step: \"\\<forall>i<Suc m. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc m.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "hence \"\\<forall>i<m. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<forall>i<m.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "hence \"\\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*  head (f m)\""], ["proof (prove)\nusing this:\n  \\<forall>i<m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)", "by (rule Suc.hyps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "from step [rule_format, of m]"], ["proof (chain)\npicking this:\n  m < Suc m \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))", "have \"\\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))\""], ["proof (prove)\nusing this:\n  m < Suc m \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (m + 1))", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (m + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (Suc m))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (Suc m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "{"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "assume f_k: \"f k = (Seq Skip c\\<^sub>2, s')\""], ["proof (state)\nthis:\n  f k = (Seq Skip c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "with steps_head"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  f k = (Seq Skip c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Skip,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  f k = (Seq Skip c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')", "using head_f_0"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  f k = (Seq Skip c\\<^sub>2, s')\n  head (f 0) = (c\\<^sub>1, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step [rule_format, of k] f_k"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Seq Skip c\\<^sub>2, s')", "obtain \"\\<Gamma>\\<turnstile>(Seq Skip c\\<^sub>2,s') \\<rightarrow> (c\\<^sub>2,s')\" and\n        f_Suc_k: \"f (k + 1) = (c\\<^sub>2,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Seq Skip c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, s') \\<rightarrow>\n                                   (c\\<^sub>2, s');\n      f (k + 1) = (c\\<^sub>2, s')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce elim: step.cases intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, s') \\<rightarrow>\n                       (c\\<^sub>2, s')\n  f (k + 1) = (c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "define g where \"g i = f (i + (k + 1))\" for i"], ["proof (state)\nthis:\n  g ?i = f (?i + (k + 1))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_Suc_k"], ["proof (chain)\npicking this:\n  f (k + 1) = (c\\<^sub>2, s')", "have g_0: \"g 0 = (c\\<^sub>2,s')\""], ["proof (prove)\nusing this:\n  f (k + 1) = (c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. g 0 = (c\\<^sub>2, s')", "by (simp add: g_def)"], ["proof (state)\nthis:\n  g 0 = (c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)", "have \"\\<forall>i. \\<Gamma>\\<turnstile>g i \\<rightarrow> g (i + 1)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "with g_0"], ["proof (chain)\npicking this:\n  g 0 = (c\\<^sub>2, s')\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>2,s') \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  g 0 = (c\\<^sub>2, s')\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "}"], ["proof (state)\nthis:\n  f k = (Seq Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  f k = (Seq Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "{"], ["proof (state)\nthis:\n  f k = (Seq Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "assume s': \"s'=Normal x\" and f_k: \"f k = (Seq Throw c\\<^sub>2, s')\""], ["proof (state)\nthis:\n  s' = Normal x\n  f k = (Seq Throw c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step [rule_format, of k] f_k s'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Seq Throw c\\<^sub>2, s')\n  s' = Normal x", "obtain \"\\<Gamma>\\<turnstile>(Seq Throw c\\<^sub>2,s') \\<rightarrow> (Throw,s')\" and\n        f_Suc_k: \"f (k + 1) = (Throw,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Seq Throw c\\<^sub>2, s')\n  s' = Normal x\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile> (Seq Throw c\\<^sub>2, s') \\<rightarrow>\n                                   (Throw, s');\n      f (k + 1) = (Throw, s')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce elim: step_elim_cases intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Throw c\\<^sub>2, s') \\<rightarrow> (Throw, s')\n  f (k + 1) = (Throw, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "define g where \"g i = f (i + (k + 1))\" for i"], ["proof (state)\nthis:\n  g ?i = f (?i + (k + 1))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_Suc_k"], ["proof (chain)\npicking this:\n  f (k + 1) = (Throw, s')", "have g_0: \"g 0 = (Throw,s')\""], ["proof (prove)\nusing this:\n  f (k + 1) = (Throw, s')\n\ngoal (1 subgoal):\n 1. g 0 = (Throw, s')", "by (simp add: g_def)"], ["proof (state)\nthis:\n  g 0 = (Throw, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)", "have \"\\<forall>i. \\<Gamma>\\<turnstile>g i \\<rightarrow> g (i + 1)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "with g_0"], ["proof (chain)\npicking this:\n  g 0 = (Throw, s')\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)", "have \"\\<Gamma>\\<turnstile>(Throw,s') \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  g 0 = (Throw, s')\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Throw, s') \\<rightarrow> \\<dots>(\\<infinity>)", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Throw, s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "with no_inf_Throw"], ["proof (chain)\npicking this:\n  \\<not> ?\\<Gamma>\\<turnstile> (Throw,\n                                ?s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (Throw, s') \\<rightarrow> \\<dots>(\\<infinity>)", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ?\\<Gamma>\\<turnstile> (Throw,\n                                ?s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (Throw, s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>s' = Normal ?x2; f k = (Seq Throw c\\<^sub>2, s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n    s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n                    (\\<exists>s'.\n                        \\<Gamma>\\<turnstile> (c\\<^sub>1,\n        s) \\<rightarrow>\\<^sup>*\n       (Skip, s') \\<and>\n                        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n        s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "ultimately"], ["proof (chain)\npicking this:\n  final (head (f k))\n  f k = (Seq c' c\\<^sub>2, s')\n  f k = (Seq Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<lbrakk>s' = Normal ?x2; f k = (Seq Throw c\\<^sub>2, s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n    s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n                    (\\<exists>s'.\n                        \\<Gamma>\\<turnstile> (c\\<^sub>1,\n        s) \\<rightarrow>\\<^sup>*\n       (Skip, s') \\<and>\n                        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n        s') \\<rightarrow> \\<dots>(\\<infinity>))", "show ?thesis"], ["proof (prove)\nusing this:\n  final (head (f k))\n  f k = (Seq c' c\\<^sub>2, s')\n  f k = (Seq Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<lbrakk>s' = Normal ?x2; f k = (Seq Throw c\\<^sub>2, s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n    s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n                    (\\<exists>s'.\n                        \\<Gamma>\\<turnstile> (c\\<^sub>1,\n        s) \\<rightarrow>\\<^sup>*\n       (Skip, s') \\<and>\n                        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n        s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "by (auto simp add: final_def head_def head_com_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "case False"], ["proof (state)\nthis:\n  \\<nexists>i. final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "then"], ["proof (chain)\npicking this:\n  \\<nexists>i. final (head (f i))", "have not_fin: \"\\<forall>i. \\<not> final (head (f i))\""], ["proof (prove)\nusing this:\n  \\<nexists>i. final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<not> final (head (f i))", "by blast"], ["proof (state)\nthis:\n  \\<forall>i. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "have \"\\<forall>i. \\<Gamma>\\<turnstile>head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "from not_fin"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<not> final (head (f i))", "have \"\\<forall>i<(Suc k). \\<not> final (head (f i))\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> final (head (f i))", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "from infinite_computation_extract_head_Seq [OF step f_0 this ]"], ["proof (chain)\npicking this:\n  \\<forall>i<Suc k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "show \"\\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc k.\n     (\\<exists>c' s'. f (i + 1) = (Seq c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "with head_f_0"], ["proof (chain)\npicking this:\n  head (f 0) = (c\\<^sub>1, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  head (f 0) = (c\\<^sub>1, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> \\<dots>(\\<infinity>)", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Skip, s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              s') \\<rightarrow> \\<dots>(\\<infinity>))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split_inf_Catch:\n  assumes inf_comp: \"\\<Gamma>\\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n         (\\<exists>s'. \\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Throw,Normal s') \\<and> \\<Gamma>\\<turnstile>(c\\<^sub>2,Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from inf_comp"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>)", "obtain f where\n    step: \"\\<forall>i::nat. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (i+1)\" and\n    f_0: \"f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1);\n         f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_0"], ["proof (chain)\npicking this:\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)", "have head_f_0: \"head (f 0) = (c\\<^sub>1,s)\""], ["proof (prove)\nusing this:\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\n\ngoal (1 subgoal):\n 1. head (f 0) = (c\\<^sub>1, s)", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  head (f 0) = (c\\<^sub>1, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "proof (cases \"\\<exists>i. final (head (f i))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "case True"], ["proof (state)\nthis:\n  \\<exists>i. final (head (f i))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "define k where \"k = (LEAST i. final (head (f i)))\""], ["proof (state)\nthis:\n  k = (LEAST i. final (head (f i)))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "have less_k: \"\\<forall>i<k. \\<not> final (head (f i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> final (head (f i))", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < k \\<Longrightarrow> \\<not> final (head (f i))", "apply (unfold k_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < (LEAST i. final (head (f i))) \\<Longrightarrow>\n       \\<not> final (head (f i))", "apply (drule not_less_Least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> final (head (f i)) \\<Longrightarrow> \\<not> final (head (f i))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> final (head (f i))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from infinite_computation_extract_head_Catch [OF step f_0 this]"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "obtain step_head: \"\\<forall>i<k. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\" and\n           conf: \"\\<forall>i<k. (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s'))\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<forall>i<k.\n                 \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\nhead (f (i + 1));\n      \\<forall>i<k.\n         \\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n  \\<forall>i<k. \\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from True"], ["proof (chain)\npicking this:\n  \\<exists>i. final (head (f i))", "have final_f_k: \"final (head (f k))\""], ["proof (prove)\nusing this:\n  \\<exists>i. final (head (f i))\n\ngoal (1 subgoal):\n 1. final (head (f k))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow> final (head (f k))", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. final (head (f i)) \\<Longrightarrow> final (head (f k))", "apply (drule LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       final (head (f (LEAST x. final (head (f x))))) \\<Longrightarrow>\n       final (head (f k))", "apply (simp add: k_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  final (head (f k))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  final (head (f k))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_0 conf [rule_format, of \"k - 1\"]"], ["proof (chain)\npicking this:\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\n  k - 1 < k \\<Longrightarrow>\n  \\<exists>c' s'. f (k - 1 + 1) = (Catch c' c\\<^sub>2, s')", "obtain c' s' where f_k: \"f k = (Catch c' c\\<^sub>2,s')\""], ["proof (prove)\nusing this:\n  f 0 = (Catch c\\<^sub>1 c\\<^sub>2, s)\n  k - 1 < k \\<Longrightarrow>\n  \\<exists>c' s'. f (k - 1 + 1) = (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. (\\<And>c' s'.\n        f k = (Catch c' c\\<^sub>2, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases k) auto"], ["proof (state)\nthis:\n  f k = (Catch c' c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  f k = (Catch c' c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step_head"], ["proof (chain)\npicking this:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "have steps_head: \"\\<Gamma>\\<turnstile>head (f 0) \\<rightarrow>\\<^sup>* head (f k)\""], ["proof (prove)\nusing this:\n  \\<forall>i<k.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                            head (f (i + 1)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "case 0"], ["proof (state)\nthis:\n  \\<forall>i<0.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (2 subgoals):\n 1. \\<forall>i<0.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                            head (f (i + 1)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<0.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "case (Suc m)"], ["proof (state)\nthis:\n  \\<forall>i<m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                          head (f (i + 1)) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)\n  \\<forall>i<Suc m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "have step: \"\\<forall>i<Suc m. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<Suc m.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by fact"], ["proof (state)\nthis:\n  \\<forall>i<Suc m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "hence \"\\<forall>i<m. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<forall>i<m.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "hence \"\\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*  head (f m)\""], ["proof (prove)\nusing this:\n  \\<forall>i<m.\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)", "by (rule Suc.hyps)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f m)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "from step [rule_format, of m]"], ["proof (chain)\npicking this:\n  m < Suc m \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))", "have \"\\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))\""], ["proof (prove)\nusing this:\n  m < Suc m \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f m) \\<rightarrow> head (f (m + 1))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>i<k.\n                   \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n  head (f (i + 1)) \\<Longrightarrow>\n                \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>*\n                                     head (f k);\n        \\<forall>i<Suc k.\n           \\<Gamma>\\<turnstile> head (f i) \\<rightarrow>\n                                head (f (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> head\n         (f 0) \\<rightarrow>\\<^sup>*\n        head (f (Suc k))", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (m + 1))", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (m + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (Suc m))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f (Suc m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "{"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "assume f_k: \"f k = (Catch Skip c\\<^sub>2, s')\""], ["proof (state)\nthis:\n  f k = (Catch Skip c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "with steps_head"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  f k = (Catch Skip c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Skip,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  f k = (Catch Skip c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')", "using head_f_0"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  f k = (Catch Skip c\\<^sub>2, s')\n  head (f 0) = (c\\<^sub>1, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step [rule_format, of k] f_k"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Catch Skip c\\<^sub>2, s')", "obtain \"\\<Gamma>\\<turnstile>(Catch Skip c\\<^sub>2,s') \\<rightarrow> (Skip,s')\" and\n        f_Suc_k: \"f (k + 1) = (Skip,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Catch Skip c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, s') \\<rightarrow>\n                                   (Skip, s');\n      f (k + 1) = (Skip, s')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce elim: step.cases intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, s') \\<rightarrow> (Skip, s')\n  f (k + 1) = (Skip, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step [rule_format, of \"k+1\", simplified f_Suc_k]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Skip, s') \\<rightarrow> f (k + 1 + 1)", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Skip, s') \\<rightarrow> f (k + 1 + 1)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "by (rule no_step_final') (auto simp add: final_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "}"], ["proof (state)\nthis:\n  f k = (Catch Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  f k = (Catch Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "{"], ["proof (state)\nthis:\n  f k = (Catch Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "assume s': \"s'=Normal x\" and f_k: \"f k = (Catch Throw c\\<^sub>2, s')\""], ["proof (state)\nthis:\n  s' = Normal x\n  f k = (Catch Throw c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "with steps_head"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  s' = Normal x\n  f k = (Catch Throw c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow>\\<^sup>* (Throw,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  s' = Normal x\n  f k = (Catch Throw c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')", "using head_f_0"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> head (f 0) \\<rightarrow>\\<^sup>* head (f k)\n  s' = Normal x\n  f k = (Catch Throw c\\<^sub>2, s')\n  head (f 0) = (c\\<^sub>1, s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')", "by (simp add: head_def head_com_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step [rule_format, of k] f_k s'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Catch Throw c\\<^sub>2, s')\n  s' = Normal x", "obtain \"\\<Gamma>\\<turnstile>(Catch Throw c\\<^sub>2,s') \\<rightarrow> (c\\<^sub>2,s')\" and\n        f_Suc_k: \"f (k + 1) = (c\\<^sub>2,s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f k \\<rightarrow> f (k + 1)\n  f k = (Catch Throw c\\<^sub>2, s')\n  s' = Normal x\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, s') \\<rightarrow>\n                                   (c\\<^sub>2, s');\n      f (k + 1) = (c\\<^sub>2, s')\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce elim: step_elim_cases intro: step.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, s') \\<rightarrow>\n                       (c\\<^sub>2, s')\n  f (k + 1) = (c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "define g where \"g i = f (i + (k + 1))\" for i"], ["proof (state)\nthis:\n  g ?i = f (?i + (k + 1))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from f_Suc_k"], ["proof (chain)\npicking this:\n  f (k + 1) = (c\\<^sub>2, s')", "have g_0: \"g 0 = (c\\<^sub>2,s')\""], ["proof (prove)\nusing this:\n  f (k + 1) = (c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. g 0 = (c\\<^sub>2, s')", "by (simp add: g_def)"], ["proof (state)\nthis:\n  g 0 = (c\\<^sub>2, s')\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "from step"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)", "have \"\\<forall>i. \\<Gamma>\\<turnstile>g i \\<rightarrow> g (i + 1)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (i + 1)\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "with g_0"], ["proof (chain)\npicking this:\n  g 0 = (c\\<^sub>2, s')\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>2,s') \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  g 0 = (c\\<^sub>2, s')\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow> g (i + 1)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "using s'"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>* (Throw, s')\n  \\<Gamma>\\<turnstile> (c\\<^sub>2, s') \\<rightarrow> \\<dots>(\\<infinity>)\n  s' = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>s' = Normal ?x2; f k = (Catch Throw c\\<^sub>2, s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n    s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n                    (\\<exists>s'.\n                        \\<Gamma>\\<turnstile> (c\\<^sub>1,\n        s) \\<rightarrow>\\<^sup>*\n       (Throw, Normal s') \\<and>\n                        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n        Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (2 subgoals):\n 1. \\<exists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n 2. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "ultimately"], ["proof (chain)\npicking this:\n  final (head (f k))\n  f k = (Catch c' c\\<^sub>2, s')\n  f k = (Catch Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<lbrakk>s' = Normal ?x2; f k = (Catch Throw c\\<^sub>2, s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n    s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n                    (\\<exists>s'.\n                        \\<Gamma>\\<turnstile> (c\\<^sub>1,\n        s) \\<rightarrow>\\<^sup>*\n       (Throw, Normal s') \\<and>\n                        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n        Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "show ?thesis"], ["proof (prove)\nusing this:\n  final (head (f k))\n  f k = (Catch c' c\\<^sub>2, s')\n  f k = (Catch Skip c\\<^sub>2, s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<lbrakk>s' = Normal ?x2; f k = (Catch Throw c\\<^sub>2, s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n    s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n                    (\\<exists>s'.\n                        \\<Gamma>\\<turnstile> (c\\<^sub>1,\n        s) \\<rightarrow>\\<^sup>*\n       (Throw, Normal s') \\<and>\n                        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n        Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "by (auto simp add: final_def head_def head_com_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "case False"], ["proof (state)\nthis:\n  \\<nexists>i. final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "then"], ["proof (chain)\npicking this:\n  \\<nexists>i. final (head (f i))", "have not_fin: \"\\<forall>i. \\<not> final (head (f i))\""], ["proof (prove)\nusing this:\n  \\<nexists>i. final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<not> final (head (f i))", "by blast"], ["proof (state)\nthis:\n  \\<forall>i. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "have \"\\<forall>i. \\<Gamma>\\<turnstile>head (f i) \\<rightarrow> head (f (i + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "from not_fin"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<not> final (head (f i))", "have \"\\<forall>i<(Suc k). \\<not> final (head (f i))\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<Suc k. \\<not> final (head (f i))", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<Suc k. \\<not> final (head (f i))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "from infinite_computation_extract_head_Catch [OF step f_0 this ]"], ["proof (chain)\npicking this:\n  \\<forall>i<Suc k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "show \"\\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc k.\n     (\\<exists>c' s'. f (i + 1) = (Catch c' c\\<^sub>2, s')) \\<and>\n     \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> head (f k) \\<rightarrow> head (f (k + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "with head_f_0"], ["proof (chain)\npicking this:\n  head (f 0) = (c\\<^sub>1, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))", "have \"\\<Gamma>\\<turnstile>(c\\<^sub>1,s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  head (f 0) = (c\\<^sub>1, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> head (f i) \\<rightarrow> head (f (i + 1))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> \\<dots>(\\<infinity>)", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<nexists>i. final (head (f i)) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                          s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n    (\\<exists>s'.\n        \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                             (Throw, Normal s') \\<and>\n        \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                              Normal s') \\<rightarrow> \\<dots>(\\<infinity>))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Skip_no_step: \"\\<Gamma>\\<turnstile>(Skip,s) \\<rightarrow> cfg \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Skip, s) \\<rightarrow> cfg \\<Longrightarrow> P", "apply (erule no_step_final')"], ["proof (prove)\ngoal (1 subgoal):\n 1. final (Skip, s)", "apply (simp add: final_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_inf_Stuck: \"\\<not> \\<Gamma>\\<turnstile>(c,Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Skip, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Skip, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Stuck)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Stuck)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: Skip_no_step)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Skip,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nStuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nStuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Basic g)"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nStuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Basic g, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Basic g, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Spec r)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Spec r, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Spec r, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Seq [OF this] Seq.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: steps_Stuck_prop)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Cond b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (While b c)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (While b c, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (While b c, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (While b c,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Call p)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Call p, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Call p, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Call p,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (DynCom d)"], ["proof (state)\nthis:\n  ?xa \\<in> range d \\<Longrightarrow>\n  \\<not> \\<Gamma>\\<turnstile> (?xa,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Stuck) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (DynCom d,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (DynCom d, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (DynCom d, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom d, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom d, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (DynCom d,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Guard m g c)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Guard m g c, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Guard m g c, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case Throw"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Throw, Stuck)\""], ["proof (state)\nthis:\n  f 0 = (Throw, Stuck)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Stuck);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Stuck)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Throw,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Stuck) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                                 Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Catch [OF this] Catch.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Stuck) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: steps_Stuck_prop)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                               Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_Fault: \"\\<not> \\<Gamma>\\<turnstile>(c,Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Basic xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                  Fault\n                                   x) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Basic xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                  Fault\n                                   x) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Skip, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Skip, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Fault x)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Fault x)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: Skip_no_step)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Skip,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (10 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Basic xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nFault x) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Basic xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nFault x) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Basic g)"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Basic xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nFault x) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Basic g, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Basic g, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Spec r)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Spec xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Spec r, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Spec r, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Fault\n                           x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Fault\n                           x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Seq [OF this] Seq.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Fault x) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault x) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Fault x) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault x) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: steps_Fault_prop)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Cond b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (While b c)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Fault\n                                   x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (While b c, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (While b c, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (While b c,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (5 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Call p)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>xa.\n       \\<not> \\<Gamma>\\<turnstile> (Call xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Call p, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Call p, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Call p,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (DynCom d)"], ["proof (state)\nthis:\n  ?xa \\<in> range d \\<Longrightarrow>\n  \\<not> \\<Gamma>\\<turnstile> (?xa,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>xa.\n       (\\<And>xaa.\n           xaa \\<in> range xa \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xaa,\n  Fault x) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom xa,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (DynCom d,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (DynCom d, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (DynCom d, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom d, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom d, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (DynCom d,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Guard m g c)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Fault\n                                   x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Fault\n                                     x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Guard m g c, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Guard m g c, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case Throw"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Throw, Fault x)\""], ["proof (state)\nthis:\n  f 0 = (Throw, Fault x)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Fault x);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Fault x)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Throw,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Fault x) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Fault\nx) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                                 Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Fault\n                           x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Fault\n                           x) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Catch [OF this] Catch.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Fault x) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault x) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Fault x) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Fault x) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: steps_Fault_prop)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                               Fault x) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_inf_Abrupt: \"\\<not> \\<Gamma>\\<turnstile>(c,Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                  Abrupt\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                  Abrupt\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Skip, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Skip, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Abrupt s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Abrupt s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: Skip_no_step)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Skip,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nAbrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nAbrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Basic g)"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Basic x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<not> \\<Gamma>\\<turnstile> (c2,\nAbrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                 Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Basic g, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Basic g, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Spec r)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Spec x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Spec r, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Spec r, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Abrupt\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Abrupt\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Seq [OF this] Seq.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: steps_Abrupt_prop)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Cond b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c\\<^sub>1 c\\<^sub>2, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (While b c)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While x1 c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (While b c, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (While b c, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (While b c,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Call p)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> \\<Gamma>\\<turnstile> (Call x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Call p, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Call p, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Call p,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (DynCom d)"], ["proof (state)\nthis:\n  ?xa \\<in> range d \\<Longrightarrow>\n  \\<not> \\<Gamma>\\<turnstile> (?xa,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<not> \\<Gamma>\\<turnstile> (xa,\n  Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (DynCom x,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (DynCom d,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (DynCom d, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (DynCom d, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom d, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom d, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom d, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (DynCom d,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Guard m g c)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n                                    Abrupt\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Guard m g c, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Guard m g c, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case Throw"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Throw, Abrupt s)\""], ["proof (state)\nthis:\n  f 0 = (Throw, Abrupt s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Abrupt s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Abrupt s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Throw,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> \\<Gamma>\\<turnstile> (c1,\n       Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<not> \\<Gamma>\\<turnstile> (c2,\n                                     Abrupt\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c1 c2,\n                Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                                 Abrupt\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Abrupt\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Abrupt\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Catch [OF this] Catch.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Abrupt s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto dest: steps_Abrupt_prop)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                               Abrupt s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem terminates_impl_no_infinite_computation:\n  assumes termi: \"\\<Gamma>\\<turnstile>c \\<down> s\"\n  shows \"\\<not> \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)", "using termi"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (induct)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>f s.\n       \\<not> \\<Gamma>\\<turnstile> (Basic f,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (While b c,\n   s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 18 subgoals...", "case (Skip s)"], ["proof (state)\nthis:\n  \n\ngoal (18 subgoals):\n 1. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>f s.\n       \\<not> \\<Gamma>\\<turnstile> (Basic f,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s b c.\n        \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c,Normal\n       s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (While b c,\n   s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 18 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Skip,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Skip, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Skip, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Skip, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Skip, Normal s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: Skip_no_step)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Skip,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<not> \\<Gamma>\\<turnstile> (Basic f,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<not> \\<Gamma>\\<turnstile> (Basic f,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 17 subgoals...", "case (Basic g s)"], ["proof (state)\nthis:\n  \n\ngoal (17 subgoals):\n 1. \\<And>f s.\n       \\<not> \\<Gamma>\\<turnstile> (Basic f,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s b c.\n        s \\<notin> b \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 17 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Basic g, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Basic g, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Basic g, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Basic g, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Basic g,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (bdy,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (bdy,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 16 subgoals...", "case (Spec r s)"], ["proof (state)\nthis:\n  \n\ngoal (16 subgoals):\n 1. \\<And>r s.\n       \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p bdy s.\n        \\<lbrakk>\\<Gamma> p = Some bdy;\n         \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (bdy,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 16 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Spec r, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Spec r, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Spec r, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Spec r, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Spec r,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 15 subgoals...", "case (Guard s g c m)"], ["proof (state)\nthis:\n  s \\<in> g\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 15 subgoals...", "have g: \"s \\<in> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> g", "by fact"], ["proof (state)\nthis:\n  s \\<in> g\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 15 subgoals...", "have hyp: \"\\<not> \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (15 subgoals):\n 1. \\<And>s g c f.\n       \\<lbrakk>s \\<in> g; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>p s.\n        \\<Gamma> p = None \\<Longrightarrow>\n        \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 15 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Guard m g c, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Guard m g c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0  g"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Normal s)\n  s \\<in> g", "have \"f 1 = (c,Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Normal s)\n  s \\<in> g\n\ngoal (1 subgoal):\n 1. f 1 = (c, Normal s)", "by (fastforce elim: step_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (c, Normal s)", "have \"\\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (c, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (c, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c.\n        \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c.\n        \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 14 subgoals...", "case (GuardFault s g m c)"], ["proof (state)\nthis:\n  s \\<notin> g\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c.\n        \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 14 subgoals...", "have g: \"s \\<notin> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> g", "by fact"], ["proof (state)\nthis:\n  s \\<notin> g\n\ngoal (14 subgoals):\n 1. \\<And>s g f c.\n       s \\<notin> g \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Guard f g c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c.\n        \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 14 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Guard m g c, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Guard m g c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Guard m g c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from g f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  s \\<notin> g\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  s \\<notin> g\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Guard m g c, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Guard m g c,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (13 subgoals):\n 1. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c s,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c s,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 13 subgoals...", "case (Fault c m)"], ["proof (state)\nthis:\n  \n\ngoal (13 subgoals):\n 1. \\<And>c f.\n       \\<not> \\<Gamma>\\<turnstile> (c, Fault\n  f) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c s,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Fault\n                                     m) \\<rightarrow> \\<dots>(\\<infinity>)", "by (rule not_inf_Fault)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Fault\n                                   m) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s.\n        \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s.\n        \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 12 subgoals...", "case (Seq c\\<^sub>1 s c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (12 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>s.\n        \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 12 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Seq [OF this] Seq.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto intro: steps_Skip_impl_exec)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "case (CondTrue s b c1 c2)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "have b: \"s \\<in> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> b", "by fact"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "have hyp_c1: \"\\<not> \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c1,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (11 subgoals):\n 1. \\<And>s b c\\<^sub>1 c\\<^sub>2.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c s.\n        \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n   s) \\<rightarrow> \\<dots>(\\<infinity>)\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Cond b c1 c2,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Cond b c1 c2, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Cond b c1 c2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from b f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c1 c2, Normal s)", "have \"f 1 = (c1,Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c1 c2, Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = (c1, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (c1, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (c1, Normal s)", "have \"\\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (c1, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c1, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (c1, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c1, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (c1, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c1"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (c1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (c1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Cond b c1 c2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n   Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                  c\\<^sub>2,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n   Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                  c\\<^sub>2,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (CondFalse s b c2 c1)"], ["proof (state)\nthis:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile>c2 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n   Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                  c\\<^sub>2,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have b: \"s \\<notin> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> b", "by fact"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n   Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                  c\\<^sub>2,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have hyp_c2: \"\\<not> \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c2,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (10 subgoals):\n 1. \\<And>s b c\\<^sub>2 c\\<^sub>1.\n       \\<lbrakk>s \\<notin> b;\n        \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 10. \\<And>c\\<^sub>1 s c\\<^sub>2.\n        \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n         \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\nNormal s) \\<rightarrow> \\<dots>(\\<infinity>);\n         \\<forall>s'.\n            \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n               s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n            \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n            \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n   Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n        \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                  c\\<^sub>2,\n                 Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Cond b c1 c2,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Cond b c1 c2, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Cond b c1 c2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from b f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c1 c2, Normal s)", "have \"f 1 = (c2,Normal s)\""], ["proof (prove)\nusing this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Cond b c1 c2, Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = (c2, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (c2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (c2, Normal s)", "have \"\\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (c2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c2, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (c2, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c2, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (c2, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Cond b c1 c2, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp_c2"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (c2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (c2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Cond b c1 c2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (WhileTrue s b c)"], ["proof (state)\nthis:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have b: \"s \\<in> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> b", "by fact"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have hyp_c: \"\\<not> \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have hyp_w: \"\\<forall>s'. \\<Gamma>\\<turnstile> \\<langle>c,Normal s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n                     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and> \\<not> \\<Gamma>\\<turnstile> (While b c, s') \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c,Normal\n  s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    s') \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have not_inf_Seq: \"\\<not> \\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Seq c (While b c),\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c (While b c),\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c),\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c (While b c),\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Seq [OF this] hyp_c hyp_w"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, Normal\n                            s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (While b c,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, Normal\n                            s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>*\n                           (Skip, s') \\<and>\n      \\<Gamma>\\<turnstile> (While b c,\n                            s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<not> \\<Gamma>\\<turnstile> (c, Normal\n                                   s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c,Normal\ns\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                  s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto intro: steps_Skip_impl_exec)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c (While b c),\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (9 subgoals):\n 1. \\<And>s b c.\n       \\<lbrakk>s \\<in> b; \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c, Normal\n   s) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c,Normal\n      s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>While b c \\<down> s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (While b c,\n  s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (While b c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 9. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (While b c,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "obtain f where\n      f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\" and\n      f_0: \"f 0 = (While b c, Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (While b c,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n         f 0 = (While b c, Normal s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inf_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 0 = (While b c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from f_step [of 0] f_0 b"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Normal s)\n  s \\<in> b", "have \"f 1 = (Seq c (While b c),Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Normal s)\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. f 1 = (Seq c (While b c), Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (Seq c (While b c), Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (Seq c (While b c), Normal s)", "have \"\\<Gamma>\\<turnstile> (Seq c (While b c), Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (Seq c (While b c), Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c (While b c),\n                          Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (Seq c (While b c), Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (Seq c (While b c), Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (Seq c (While b c), Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (Seq c (While b c), Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c (While b c),\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "with not_inf_Seq"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c (While b c),\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (Seq c (While b c),\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (Seq c (While b c),\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (Seq c (While b c),\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (While b c,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (WhileFalse s b c)"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have b: \"s \\<notin> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> b", "by fact"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (8 subgoals):\n 1. \\<And>s b c.\n       s \\<notin> b \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 8. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (While b c,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (While b c, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (While b c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (While b c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from b f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (While b c, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (While b c,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Call p bdy s)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (bdy,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have bdy: \"\\<Gamma> p = Some bdy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = Some bdy", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have hyp: \"\\<not> \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (bdy,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (7 subgoals):\n 1. \\<And>p bdy s.\n       \\<lbrakk>\\<Gamma> p = Some bdy;\n        \\<Gamma>\\<turnstile>bdy \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (bdy,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Call p,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 7. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Call p, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Call p, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from bdy f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Normal s)", "have \"f 1 = (bdy,Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Normal s)\n\ngoal (1 subgoal):\n 1. f 1 = (bdy, Normal s)", "by (auto elim: step_Normal_elim_cases)"], ["proof (state)\nthis:\n  f 1 = (bdy, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (bdy, Normal s)", "have \"\\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f 1 = (bdy, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (bdy, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (bdy, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (bdy, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (bdy, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (bdy,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (bdy,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (bdy, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Call p,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (CallUndefined p s)"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have no_bdy: \"\\<Gamma> p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> p = None", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (6 subgoals):\n 1. \\<And>p s.\n       \\<Gamma> p = None \\<Longrightarrow>\n       \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 6. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Call p,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Call p, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Call p, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Call p, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from no_bdy f_step [of 0] f_0 f_step [of 1]"], ["proof (chain)\npicking this:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma> p = None\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Call p, Normal s)\n  \\<Gamma>\\<turnstile> f 1 \\<rightarrow> f (Suc 1)\n\ngoal (1 subgoal):\n 1. False", "by (fastforce elim: Skip_no_step step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Call p,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (5 subgoals):\n 1. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Stuck c)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>c.\n       \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 5. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)", "by (rule not_inf_Stuck)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (DynCom c s)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c s,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "have hyp: \"\\<not> \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c s,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "by fact"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c s,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (4 subgoals):\n 1. \\<And>c s.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c s \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c s,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 4. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (DynCom c, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (DynCom c, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom c, Normal s)", "have \"f (Suc 0) = (c s, Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (DynCom c, Normal s)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = (c s, Normal s)", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  f (Suc 0) = (c s, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with f_step"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = (c s, Normal s)", "have \"\\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n  f (Suc 0) = (c s, Normal s)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "apply (simp add: inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c s, Normal s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f 0 = (c s, Normal s) \\<and>\n                         (\\<forall>i.\n                             \\<Gamma>\\<turnstile> f i \\<rightarrow>\n            f (Suc i))", "apply (rule_tac x=\"\\<lambda>i. f (Suc i)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i);\n     f (Suc 0) = (c s, Normal s)\\<rbrakk>\n    \\<Longrightarrow> f (Suc 0) = (c s, Normal s) \\<and>\n                      (\\<forall>i.\n                          \\<Gamma>\\<turnstile> f (Suc i) \\<rightarrow>\n         f (Suc (Suc i)))", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (DynCom c, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (c s,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (c s,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<Gamma>\\<turnstile> (c s, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (DynCom c,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Throw s)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                    Normal\n                                     s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 3. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Throw,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof (rule not_infI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_step: \"\\<And>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> f ?i \\<rightarrow> f (Suc ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "assume f_0: \"f 0 = (Throw, Normal s)\""], ["proof (state)\nthis:\n  f 0 = (Throw, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (Throw, Normal s);\n        \\<And>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "from f_step [of 0] f_0"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Normal s)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> f 0 \\<rightarrow> f (Suc 0)\n  f 0 = (Throw, Normal s)\n\ngoal (1 subgoal):\n 1. False", "by (auto elim: step_elim_cases)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Throw,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Abrupt c)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>c s.\n       \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n  s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n                                     s_) \\<rightarrow> \\<dots>(\\<infinity>)", "by (rule not_inf_Abrupt)"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (c, Abrupt\n                                   s_) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "case (Catch c\\<^sub>1 s c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  Normal\n                                   s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>2.\n       \\<lbrakk>\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s;\n        \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                                     Normal\ns) \\<rightarrow> \\<dots>(\\<infinity>);\n        \\<forall>s'.\n           \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n              s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n           \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n           \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n  Normal s') \\<rightarrow> \\<dots>(\\<infinity>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1\n                 c\\<^sub>2,\n                Normal s) \\<rightarrow> \\<dots>(\\<infinity>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                                 Normal\n                                  s) \\<rightarrow> \\<dots>(\\<infinity>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "assume \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                          Normal\n                           s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    False", "from split_inf_Catch [OF this] Catch.hyps"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  Normal\n                                   s') \\<rightarrow> \\<dots>(\\<infinity>)", "show False"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                        Normal s) \\<rightarrow> \\<dots>(\\<infinity>) \\<or>\n  (\\<exists>s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                           (Throw, Normal s') \\<and>\n      \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                            Normal s') \\<rightarrow> \\<dots>(\\<infinity>))\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>1,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s' \\<and>\n     \\<not> \\<Gamma>\\<turnstile> (c\\<^sub>2,\n                                  Normal\n                                   s') \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. False", "by (auto intro: steps_Throw_impl_exec)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                               Normal s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n termi_call_steps :: \"('s,'p,'f) body \\<Rightarrow> (('s \\<times> 'p) \\<times> ('s \\<times> 'p))set\"\nwhere\n\"termi_call_steps \\<Gamma> =\n {((t,q),(s,p)). \\<Gamma>\\<turnstile>Call p\\<down>Normal s \\<and>\n       (\\<exists>c. \\<Gamma>\\<turnstile>(Call p,Normal s) \\<rightarrow>\\<^sup>+ (c,Normal t) \\<and> redex c = Call q)}\""], ["", "primrec subst_redex:: \"('s,'p,'f)com \\<Rightarrow> ('s,'p,'f)com \\<Rightarrow> ('s,'p,'f)com\"\nwhere\n\"subst_redex Skip c = c\" |\n\"subst_redex (Basic f) c = c\" |\n\"subst_redex (Spec r) c = c\" |\n\"subst_redex (Seq c\\<^sub>1 c\\<^sub>2) c  = Seq (subst_redex c\\<^sub>1 c) c\\<^sub>2\" |\n\"subst_redex (Cond b c\\<^sub>1 c\\<^sub>2) c = c\" |\n\"subst_redex (While b c') c = c\" |\n\"subst_redex (Call p) c = c\" |\n\"subst_redex (DynCom d) c = c\" |\n\"subst_redex (Guard f b c') c = c\" |\n\"subst_redex (Throw) c = c\" |\n\"subst_redex (Catch c\\<^sub>1 c\\<^sub>2) c = Catch (subst_redex c\\<^sub>1 c) c\\<^sub>2\""], ["", "lemma subst_redex_redex:\n  \"subst_redex c (redex c) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_redex c (redex c) = c", "by (induct c) auto"], ["", "lemma redex_subst_redex: \"redex (subst_redex c r) = redex r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redex (subst_redex c r) = redex r", "by (induct c) auto"], ["", "lemma step_redex':\n  shows \"\\<Gamma>\\<turnstile>(redex c,s) \\<rightarrow> (r',s') \\<Longrightarrow> \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (subst_redex c r',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (redex c, s) \\<rightarrow>\n                         (r', s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (subst_redex c r', s')", "by (induct c) (auto intro: step.Seq step.Catch)"], ["", "lemma step_redex:\n  shows \"\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s') \\<Longrightarrow> \\<Gamma>\\<turnstile>(subst_redex c r,s) \\<rightarrow> (subst_redex c r',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                         (subst_redex c r', s')", "by (induct c) (auto intro: step.Seq step.Catch)"], ["", "lemma steps_redex:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. \\<Gamma>\\<turnstile>(subst_redex c r,s) \\<rightarrow>\\<^sup>* (subst_redex c r',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>*\n                            (subst_redex c r', s')", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>*\n                            (subst_redex c r', s')", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\\<^sup>*\n                            (subst_redex c r', s')\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "case Refl"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\\<^sup>*\n                            (subst_redex c r', s')\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "show \"\\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\\<^sup>* (subst_redex c r', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\\<^sup>*\n                         (subst_redex c r', s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\\<^sup>*\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "case (Trans r s r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  \\<Gamma>\\<turnstile> (r'', s'') \\<rightarrow>\\<^sup>* (r', s')\n  \\<Gamma>\\<turnstile> (subst_redex ?c r'', s'') \\<rightarrow>\\<^sup>*\n                       (subst_redex ?c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "from step_redex [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (subst_redex ?c r, s) \\<rightarrow>\n                       (subst_redex ?c r'', s'')", "have \"\\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow> (subst_redex c r'', s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (subst_redex ?c r, s) \\<rightarrow>\n                       (subst_redex ?c r'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                         (subst_redex c r'', s'')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                       (subst_redex c r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                       (subst_redex c r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "have \"\\<Gamma>\\<turnstile> (subst_redex c r'', s'') \\<rightarrow>\\<^sup>* (subst_redex c r', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r'', s'') \\<rightarrow>\\<^sup>*\n                         (subst_redex c r', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r'', s'') \\<rightarrow>\\<^sup>*\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c aa, ba) \\<rightarrow>\\<^sup>*\n                                (subst_redex c r', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c a,\n         b) \\<rightarrow>\\<^sup>*\n        (subst_redex c r', s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>*\n                       (subst_redex c r', s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>*\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>*\n                         (subst_redex c r', s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>*\n                       (subst_redex c r', s')\n\ngoal:\nNo subgoals!", "qed"], ["", "ML \\<open>\n  ML_Thms.bind_thm (\"trancl_induct2\", Split_Rule.split_rule @{context}\n    (Rule_Insts.read_instantiate @{context}\n      [(((\"a\", 0), Position.none), \"(aa, ab)\"), (((\"b\", 0), Position.none), \"(ba, bb)\")] []\n      @{thm trancl_induct}));\n\\<close>"], ["", "lemma steps_redex':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. \\<Gamma>\\<turnstile>(subst_redex c r,s) \\<rightarrow>\\<^sup>+ (subst_redex c r',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                            (subst_redex c r', s')", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                            (subst_redex c r', s')", "proof (induct rule: tranclp_induct2 [consumes 1,case_names Step Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                            (subst_redex c a, b)\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "case (Step r' s')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                            (subst_redex c a, b)\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                            (subst_redex c a, b)\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')", "have \"\\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow> (subst_redex c r', s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                         (subst_redex c r', s')", "by (rule step_redex)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                       (subst_redex c r', s')\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                            (subst_redex c a, b)\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                       (subst_redex c r', s')", "show \"\\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+ (subst_redex c r', s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                         (subst_redex c r', s')", ".."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "case (Trans r' s' r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  \\<Gamma>\\<turnstile> (subst_redex ?c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex ?c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "have \"\\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+ (subst_redex c r', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                         (subst_redex c r', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex c r', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "have \"\\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "hence \"\\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow> (subst_redex c r'', s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\n                         (subst_redex c r'', s'')", "by (rule step_redex)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r', s') \\<rightarrow>\n                       (subst_redex c r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                                (subst_redex c a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile> (subst_redex c r,\n         s) \\<rightarrow>\\<^sup>+\n        (subst_redex c aa, ba)", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex c r'', s'')", "show \"\\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+ (subst_redex c r'', s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex c r'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                         (subst_redex c r'', s'')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex c r, s) \\<rightarrow>\\<^sup>+\n                       (subst_redex c r'', s'')\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec seq:: \"(nat \\<Rightarrow> ('s,'p,'f)com) \\<Rightarrow> 'p \\<Rightarrow> nat \\<Rightarrow> ('s,'p,'f)com\"\nwhere\n\"seq c p 0 = Call p\" |\n\"seq c p (Suc i) = subst_redex (seq c p i) (c i)\""], ["", "lemma renumber':\n  assumes f: \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\"\n  assumes a_b: \"(a,b) \\<in> r\\<^sup>*\"\n  shows \"b = f 0 \\<Longrightarrow> (\\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "using a_b"], ["proof (prove)\nusing this:\n  (a, b) \\<in> r\\<^sup>*\n\ngoal (1 subgoal):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "proof (induct rule: converse_rtrancl_induct [consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "assume \"b = f 0\""], ["proof (state)\nthis:\n  b = f 0\n\ngoal (2 subgoals):\n 1. b = f 0 \\<Longrightarrow>\n    \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "with f"], ["proof (chain)\npicking this:\n  \\<forall>i. (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r\n  b = f 0", "show \"\\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\""], ["proof (prove)\nusing this:\n  \\<forall>i. (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r\n  b = f 0\n\ngoal (1 subgoal):\n 1. \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by blast"], ["proof (state)\nthis:\n  \\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "fix a z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "assume a_z: \"(a, z) \\<in> r\" and \"(z, b) \\<in> r\\<^sup>*\""], ["proof (state)\nthis:\n  (a, z) \\<in> r\n  (z, b) \\<in> r\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "assume \"b = f 0 \\<Longrightarrow> \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\"\n         \"b = f 0\""], ["proof (state)\nthis:\n  b = f 0 \\<Longrightarrow>\n  \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n  b = f 0\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "then"], ["proof (chain)\npicking this:\n  b = f 0 \\<Longrightarrow>\n  \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n  b = f 0", "obtain f where f0: \"f 0 = z\" and seq: \"\\<forall>i. (f i, f (Suc i)) \\<in> r\""], ["proof (prove)\nusing this:\n  b = f 0 \\<Longrightarrow>\n  \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n  b = f 0\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = z; \\<forall>i. (f i, f (Suc i)) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  f 0 = z\n  \\<forall>i. (f i, f (Suc i)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "{"], ["proof (state)\nthis:\n  f 0 = z\n  \\<forall>i. (f i, f (Suc i)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "have \"((\\<lambda>i. case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i) i, f i) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f i) \\<in> r", "using seq a_z f0"], ["proof (prove)\nusing this:\n  \\<forall>i. (f i, f (Suc i)) \\<in> r\n  (a, z) \\<in> r\n  f 0 = z\n\ngoal (1 subgoal):\n 1. (case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f i) \\<in> r", "by (cases i) auto"], ["proof (state)\nthis:\n  (case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f i) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "}"], ["proof (state)\nthis:\n  (case ?i2 of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f ?i2) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<Longrightarrow>\n        \\<exists>f. f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r);\n        b = f 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "then"], ["proof (chain)\npicking this:\n  (case ?i2 of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f ?i2) \\<in> r", "show \"\\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\""], ["proof (prove)\nusing this:\n  (case ?i2 of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i, f ?i2) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by - (rule exI [where x=\"\\<lambda>i. case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> f i\"],simp)"], ["proof (state)\nthis:\n  \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma renumber:\n \"\\<forall>i. (a,f i) \\<in> r\\<^sup>* \\<and> (f i,f(Suc i)) \\<in> r\n \\<Longrightarrow> \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f(Suc i)) \\<in> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (a, f i) \\<in> r\\<^sup>* \\<and>\n       (f i, f (Suc i)) \\<in> r \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by (blast dest:renumber')"], ["", "lemma lem:\n  \"\\<forall>y. r\\<^sup>+\\<^sup>+ a y \\<longrightarrow> P a \\<longrightarrow> P y\n   \\<Longrightarrow> ((b,a) \\<in> {(y,x). P x \\<and> r x y}\\<^sup>+) = ((b,a) \\<in> {(y,x). P x \\<and> r\\<^sup>+\\<^sup>+ x y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n       P a \\<longrightarrow> P y \\<Longrightarrow>\n    ((b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+) =\n    ((b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y})", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\n 2. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> P a \\<and> r\\<^sup>+\\<^sup>+ a b\n 2. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply(erule trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> r x y}\\<rbrakk>\n       \\<Longrightarrow> P y \\<and> r\\<^sup>+\\<^sup>+ y b\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+;\n        (y, z) \\<in> {(y, x). P x \\<and> r x y};\n        P y \\<and> r\\<^sup>+\\<^sup>+ y b\\<rbrakk>\n       \\<Longrightarrow> P z \\<and> r\\<^sup>+\\<^sup>+ z b\n 3. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+;\n        (y, z) \\<in> {(y, x). P x \\<and> r x y};\n        P y \\<and> r\\<^sup>+\\<^sup>+ y b\\<rbrakk>\n       \\<Longrightarrow> P z \\<and> r\\<^sup>+\\<^sup>+ z b\n 2. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply(blast intro:tranclp_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> r\\<^sup>+\\<^sup>+ x y}\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     P a; r\\<^sup>+\\<^sup>+ a b\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> {(y, x). P x \\<and> r x y}\\<^sup>+", "apply(erule tranclp_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; r a y\\<rbrakk>\n       \\<Longrightarrow> (y, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> r x y}\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; r\\<^sup>+\\<^sup>+ a y; r y z;\n        (y, a)\n        \\<in> {a. case a of\n                  (y, x) \\<Rightarrow> P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (z, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> r x y}\\<^sup>+", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   r\\<^sup>+\\<^sup>+ a y \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; r\\<^sup>+\\<^sup>+ a y; r y z;\n        (y, a)\n        \\<in> {a. case a of\n                  (y, x) \\<Rightarrow> P x \\<and> r x y}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (z, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> r x y}\\<^sup>+", "apply(blast intro:trancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary terminates_impl_no_infinite_trans_computation:\n assumes terminates: \"\\<Gamma>\\<turnstile>c\\<down>s\"\n shows \"\\<not>(\\<exists>f. f 0 = (c,s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f(Suc i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "have \"wf({(y,x). \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ({(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+)", "proof (rule wf_trancl)"], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n        \\<Gamma>\\<turnstile> x \\<rightarrow> y}", "show \"wf {(y, x). \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n        \\<Gamma>\\<turnstile> x \\<rightarrow> y}", "proof (simp only: wf_iff_no_infinite_down_chain,clarify,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "assume \"\\<forall>i. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* f i \\<and> \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "hence \"\\<exists>f. f (0::nat) = (c,s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (rule renumber [to_pred])"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "from terminates_impl_no_infinite_computation [OF terminates]"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)", "have \"\\<not> (\\<exists>f. f (0::nat) = (c, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (simp add: inf_def)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf {(y, x).\n      \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n      \\<Gamma>\\<turnstile> x \\<rightarrow> y}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf ({(y, x).\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n       \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "hence \"\\<not> (\\<exists>f. \\<forall>i. (f (Suc i), f i)\n                 \\<in> {(y, x). \\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+)\""], ["proof (prove)\nusing this:\n  wf ({(y, x).\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n       \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "by (simp add: wf_iff_no_infinite_down_chain)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     \\<forall>i.\n        (f (Suc i), f i)\n        \\<in> {(y, x).\n               \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n               \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     \\<forall>i.\n        (f (Suc i), f i)\n        \\<in> {(y, x).\n               \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n               \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "proof (rule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "assume \"\\<exists>f. f (0::nat) = (c, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f (Suc i))\""], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "then"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "obtain f where\n      f0: \"f 0 = (c, s)\" and\n      seq: \"\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ f (Suc i)\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f 0 = (c, s);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                 f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by iprover"], ["proof (state)\nthis:\n  f 0 = (c, s)\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+\n                                f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "show\n      \"\\<exists>f. \\<forall>i. (f (Suc i), f i) \\<in> {(y, x). \\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n                 \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "proof (rule exI [where x=f],rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (f (Suc i), f i)\n       \\<in> {(y, x).\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n              \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (f (Suc i), f i)\n       \\<in> {(y, x).\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n              \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "show \"(f (Suc i), f i) \\<in> {(y, x). \\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow> y}\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (f (Suc i__), f i__)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "have \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f 0\n 2. \\<And>i.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc i)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f 0\n 2. \\<And>i.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc i)", "show \"\\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f 0", "by (simp add: f0)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc i)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc i)", "have \"\\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f n", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc i)", "with seq"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f n", "show \"\\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* f (Suc n)\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f n\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc n)", "by (blast intro: tranclp_into_rtranclp rtranclp_trans)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i\n\ngoal (1 subgoal):\n 1. (f (Suc i__), f i__)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f ?ia2\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "hence \"\\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* f i\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f ?ia2\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i", "by iprover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "with seq"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i", "have\n          \"(f (Suc i), f i) \\<in> {(y, x). \\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* x \\<and> \\<Gamma>\\<turnstile>x \\<rightarrow>\\<^sup>+ y}\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}", "by clarsimp"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "have \"\\<forall>y. \\<Gamma>\\<turnstile>f i \\<rightarrow>\\<^sup>+ y\\<longrightarrow>\\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* f i\\<longrightarrow>\\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n                            f i \\<longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* y", "by (blast intro: tranclp_into_rtranclp rtranclp_trans)"], ["proof (state)\nthis:\n  \\<forall>y.\n     \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n  \\<forall>y.\n     \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* y", "show ?thesis"], ["proof (prove)\nusing this:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow>\\<^sup>+ y}\n  \\<forall>y.\n     \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ y \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<longrightarrow>\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. (f (Suc i), f i)\n    \\<in> {(y, x).\n           \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n           \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+", "by (subst lem )"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f (Suc i), f i)\n  \\<in> {(y, x).\n         \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n         \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<forall>i.\n        (f (Suc i), f i)\n        \\<in> {(y, x).\n               \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* x \\<and>\n               \\<Gamma>\\<turnstile> x \\<rightarrow> y}\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wf_termi_call_steps: \"wf (termi_call_steps \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (termi_call_steps \\<Gamma>)", "proof (simp only: termi_call_steps_def wf_iff_no_infinite_down_chain,\n       clarify,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       False", "assume inf: \"\\<forall>i. (\\<lambda>(t, q) (s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c. \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>+ (c, Normal t) \\<and> redex c = Call q))\n             (f (Suc i)) (f i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     (case f (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n           (\\<exists>c.\n               \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>+\n                                    (c, Normal t) \\<and>\n               redex c = Call q))\n      (f i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       False", "define s where \"s i = fst (f i)\" for i :: nat"], ["proof (state)\nthis:\n  s ?i = fst (f ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       False", "define p where \"p i = (snd (f i)::'b)\" for i :: nat"], ["proof (state)\nthis:\n  p ?i = snd (f ?i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       False", "from inf"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     (case f (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n           (\\<exists>c.\n               \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>+\n                                    (c, Normal t) \\<and>\n               redex c = Call q))\n      (f i)", "have inf': \"\\<forall>i. \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n               (\\<exists>c. \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+ (c, Normal (s (i+1))) \\<and>\n                    redex c = Call (p (i+1)))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (case f (Suc i) of\n      (t, q) \\<Rightarrow>\n        \\<lambda>(s, p).\n           \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n           (\\<exists>c.\n               \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\\<^sup>+\n                                    (c, Normal t) \\<and>\n               redex c = Call q))\n      (f i)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n       (\\<exists>c.\n           \\<Gamma>\\<turnstile> (Call (p i),\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                (c, Normal (s (i + 1))) \\<and>\n           redex c = Call (p (i + 1)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (case f (Suc i) of\n        (t, q) \\<Rightarrow>\n          \\<lambda>(s, p).\n             \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n             (\\<exists>c.\n                 \\<Gamma>\\<turnstile> (Call p,\n Normal s) \\<rightarrow>\\<^sup>+\n(c, Normal t) \\<and>\n                 redex c = Call q))\n        (f i) \\<Longrightarrow>\n    \\<forall>i.\n       \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n       (\\<exists>c.\n           \\<Gamma>\\<turnstile> (Call (p i),\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                (c, Normal (s (i + 1))) \\<and>\n           redex c = Call (p (i + 1)))", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n       (\\<exists>c.\n           \\<Gamma>\\<turnstile> (Call (p i),\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                (c, Normal (s (i + 1))) \\<and>\n           redex c = Call (p (i + 1)))", "apply (erule_tac x=i in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (case f (Suc i) of\n        (t, q) \\<Rightarrow>\n          \\<lambda>(s, p).\n             \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n             (\\<exists>c.\n                 \\<Gamma>\\<turnstile> (Call p,\n Normal s) \\<rightarrow>\\<^sup>+\n(c, Normal t) \\<and>\n                 redex c = Call q))\n        (f i) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n       (\\<exists>c.\n           \\<Gamma>\\<turnstile> (Call (p i),\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                (c, Normal (s (i + 1))) \\<and>\n           redex c = Call (p (i + 1)))", "apply (auto simp add: s_def p_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n     (\\<exists>c.\n         \\<Gamma>\\<turnstile> (Call (p i),\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              (c, Normal (s (i + 1))) \\<and>\n         redex c = Call (p (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (case f (Suc i) of\n           (t, q) \\<Rightarrow>\n             \\<lambda>(s, p).\n                \\<Gamma>\\<turnstile>Call p \\<down> Normal s \\<and>\n                (\\<exists>c.\n                    \\<Gamma>\\<turnstile> (Call p,\n    Normal s) \\<rightarrow>\\<^sup>+\n   (c, Normal t) \\<and>\n                    redex c = Call q))\n           (f i) \\<Longrightarrow>\n       False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "from inf'"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n     (\\<exists>c.\n         \\<Gamma>\\<turnstile> (Call (p i),\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              (c, Normal (s (i + 1))) \\<and>\n         redex c = Call (p (i + 1)))", "have \"\\<exists>c. \\<forall>i. \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n               \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+ (c i, Normal (s (i+1))) \\<and>\n                    redex (c i) = Call (p (i+1))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n     (\\<exists>c.\n         \\<Gamma>\\<turnstile> (Call (p i),\n                               Normal (s i)) \\<rightarrow>\\<^sup>+\n                              (c, Normal (s (i + 1))) \\<and>\n         redex c = Call (p (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n          \\<Gamma>\\<turnstile> (Call (p i),\n                                Normal (s i)) \\<rightarrow>\\<^sup>+\n                               (c i, Normal (s (i + 1))) \\<and>\n          redex (c i) = Call (p (i + 1))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n       (\\<exists>c.\n           \\<Gamma>\\<turnstile> (Call (p i),\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                (c, Normal (s (i + 1))) \\<and>\n           redex c = Call (p (i + 1))) \\<Longrightarrow>\n    \\<exists>c.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n          \\<Gamma>\\<turnstile> (Call (p i),\n                                Normal (s i)) \\<rightarrow>\\<^sup>+\n                               (c i, Normal (s (i + 1))) \\<and>\n          redex (c i) = Call (p (i + 1))", "apply (rule choice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n       (\\<exists>c.\n           \\<Gamma>\\<turnstile> (Call (p i),\n                                 Normal (s i)) \\<rightarrow>\\<^sup>+\n                                (c, Normal (s (i + 1))) \\<and>\n           redex c = Call (p (i + 1))) \\<Longrightarrow>\n    \\<forall>i.\n       \\<exists>y.\n          \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n          \\<Gamma>\\<turnstile> (Call (p i),\n                                Normal (s i)) \\<rightarrow>\\<^sup>+\n                               (y, Normal (s (i + 1))) \\<and>\n          redex y = Call (p (i + 1))", "by blast"], ["proof (state)\nthis:\n  \\<exists>c.\n     \\<forall>i.\n        \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n        \\<Gamma>\\<turnstile> (Call (p i),\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             (c i, Normal (s (i + 1))) \\<and>\n        redex (c i) = Call (p (i + 1))\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<exists>c.\n     \\<forall>i.\n        \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n        \\<Gamma>\\<turnstile> (Call (p i),\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             (c i, Normal (s (i + 1))) \\<and>\n        redex (c i) = Call (p (i + 1))", "obtain c where\n      termi_c: \"\\<forall>i. \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i)\" and\n      steps_c: \"\\<forall>i. \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+ (c i, Normal (s (i+1)))\" and\n      red_c:   \"\\<forall>i. redex (c i) = Call (p (i+1))\""], ["proof (prove)\nusing this:\n  \\<exists>c.\n     \\<forall>i.\n        \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i) \\<and>\n        \\<Gamma>\\<turnstile> (Call (p i),\n                              Normal (s i)) \\<rightarrow>\\<^sup>+\n                             (c i, Normal (s (i + 1))) \\<and>\n        redex (c i) = Call (p (i + 1))\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>\\<forall>i.\n                    \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i);\n         \\<forall>i.\n            \\<Gamma>\\<turnstile> (Call (p i),\n                                  Normal (s i)) \\<rightarrow>\\<^sup>+\n                                 (c i, Normal (s (i + 1)));\n         \\<forall>i. redex (c i) = Call (p (i + 1))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile>Call (p i) \\<down> Normal (s i)\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+\n                          (c i, Normal (s (i + 1)))\n  \\<forall>i. redex (c i) = Call (p (i + 1))\n\ngoal (1 subgoal):\n 1. False", "define g where \"g i = (seq c (p 0) i,Normal (s i)::('a,'c) xstate)\" for i"], ["proof (state)\nthis:\n  g ?i = (seq c (p 0) ?i, Normal (s ?i))\n\ngoal (1 subgoal):\n 1. False", "from red_c [rule_format, of 0]"], ["proof (chain)\npicking this:\n  redex (c 0) = Call (p (0 + 1))", "have \"g 0 = (Call (p 0), Normal (s 0))\""], ["proof (prove)\nusing this:\n  redex (c 0) = Call (p (0 + 1))\n\ngoal (1 subgoal):\n 1. g 0 = (Call (p 0), Normal (s 0))", "by (simp add: g_def)"], ["proof (state)\nthis:\n  g 0 = (Call (p 0), Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  g 0 = (Call (p 0), Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  g 0 = (Call (p 0), Normal (s 0))\n\ngoal (1 subgoal):\n 1. False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have \"redex (seq c (p 0) i) = Call (p i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redex (seq c (p 0) i) = Call (p i)", "by (induct i) (auto simp add: redex_subst_redex red_c)"], ["proof (state)\nthis:\n  redex (seq c (p 0) i) = Call (p i)\n\ngoal (1 subgoal):\n 1. False", "from this [symmetric]"], ["proof (chain)\npicking this:\n  Call (p i) = redex (seq c (p 0) i)", "have \"subst_redex (seq c (p 0) i) (Call (p i)) = (seq c (p 0) i)\""], ["proof (prove)\nusing this:\n  Call (p i) = redex (seq c (p 0) i)\n\ngoal (1 subgoal):\n 1. subst_redex (seq c (p 0) i) (Call (p i)) = seq c (p 0) i", "by (simp add: subst_redex_redex)"], ["proof (state)\nthis:\n  subst_redex (seq c (p 0) i) (Call (p i)) = seq c (p 0) i\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  subst_redex (seq c (p 0) ?i2) (Call (p ?i2)) = seq c (p 0) ?i2\n\ngoal (1 subgoal):\n 1. False", "note subst_redex_seq = this"], ["proof (state)\nthis:\n  subst_redex (seq c (p 0) ?i2) (Call (p ?i2)) = seq c (p 0) ?i2\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>i. \\<Gamma>\\<turnstile> (g i) \\<rightarrow>\\<^sup>+ (g (i+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "from steps_c [rule_format, of i]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (c i, Normal (s (i + 1)))", "have \"\\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+ (c i, Normal (s (i + 1)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (c i, Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+\n                         (c i, Normal (s (i + 1)))", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call (p i), Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (c i, Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "from steps_redex' [OF this, of \"(seq c (p 0) i)\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (subst_redex (seq c (p 0) i) (Call (p i)),\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (subst_redex (seq c (p 0) i) (c i),\n                        Normal (s (i + 1)))", "have \"\\<Gamma>\\<turnstile> (subst_redex (seq c (p 0) i) (Call (p i)), Normal (s i)) \\<rightarrow>\\<^sup>+\n                (subst_redex (seq c (p 0) i) (c i), Normal (s (i + 1)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (subst_redex (seq c (p 0) i) (Call (p i)),\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (subst_redex (seq c (p 0) i) (c i),\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (subst_redex (seq c (p 0) i) (Call (p i)),\n                          Normal (s i)) \\<rightarrow>\\<^sup>+\n                         (subst_redex (seq c (p 0) i) (c i),\n                          Normal (s (i + 1)))", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (subst_redex (seq c (p 0) i) (Call (p i)),\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (subst_redex (seq c (p 0) i) (c i),\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "hence \"\\<Gamma>\\<turnstile> (seq c (p 0) i, Normal (s i)) \\<rightarrow>\\<^sup>+\n                 (seq c (p 0) (i+1), Normal (s (i + 1)))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (subst_redex (seq c (p 0) i) (Call (p i)),\n                        Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (subst_redex (seq c (p 0) i) (c i),\n                        Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (seq c (p 0) i, Normal (s i)) \\<rightarrow>\\<^sup>+\n                         (seq c (p 0) (i + 1), Normal (s (i + 1)))", "by (simp add: subst_redex_seq)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (seq c (p 0) i, Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (seq c (p 0) (i + 1), Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<And>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "thus \"\\<Gamma>\\<turnstile> (g i) \\<rightarrow>\\<^sup>+ (g (i+1))\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (seq c (p 0) i, Normal (s i)) \\<rightarrow>\\<^sup>+\n                       (seq c (p 0) (i + 1), Normal (s (i + 1)))\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)\n\ngoal (1 subgoal):\n 1. False", "from terminates_impl_no_infinite_trans_computation [OF termi_c [rule_format, of 0]]"], ["proof (chain)\npicking this:\n  \\<nexists>f.\n     f 0 = (Call (p 0), Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "have \"\\<not> (\\<exists>f. f 0 = (Call (p 0), Normal (s 0)) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     f 0 = (Call (p 0), Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (Call (p 0), Normal (s 0)) \\<and>\n       (\\<forall>i.\n           \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "."], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (Call (p 0), Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  g 0 = (Call (p 0), Normal (s 0))\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)\n  \\<nexists>f.\n     f 0 = (Call (p 0), Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  g 0 = (Call (p 0), Normal (s 0))\n  \\<forall>i. \\<Gamma>\\<turnstile> g i \\<rightarrow>\\<^sup>+ g (i + 1)\n  \\<nexists>f.\n     f 0 = (Call (p 0), Normal (s 0)) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow>\\<^sup>+ f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_infinite_computation_implies_wf:\n  assumes not_inf: \"\\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"wf {(c2,c1). \\<Gamma> \\<turnstile> (c,s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma> \\<turnstile> c1 \\<rightarrow> c2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(c2, c1).\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n        \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}", "proof (simp only: wf_iff_no_infinite_down_chain,clarify, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "assume \"\\<forall>i. \\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* f i \\<and> \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "hence \"\\<exists>f. f 0 = (c, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n     \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (rule renumber [to_pred])"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "from not_inf"], ["proof (chain)\npicking this:\n  \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)", "have \"\\<not> (\\<exists>f. f 0 = (c, s) \\<and> (\\<forall>i. \\<Gamma>\\<turnstile>f i \\<rightarrow> f (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = (c, s) \\<and>\n       (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "by (simp add: inf_def)"], ["proof (state)\nthis:\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* f i \\<and>\n          \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n  \\<nexists>f.\n     f 0 = (c, s) \\<and>\n     (\\<forall>i. \\<Gamma>\\<turnstile> f i \\<rightarrow> f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_final_Stuck_step: \"\\<not> final (c,Stuck) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> (c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> final (c, Stuck) \\<Longrightarrow>\n    \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Stuck) \\<rightarrow> (c', s')", "by (induct c) (fastforce intro: step.intros simp add: final_def)+"], ["", "lemma not_final_Abrupt_step:\n  \"\\<not> final (c,Abrupt s) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow> (c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> final (c, Abrupt s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (c, Abrupt s) \\<rightarrow> (c', s')", "by (induct c) (fastforce intro: step.intros simp add: final_def)+"], ["", "lemma not_final_Fault_step:\n  \"\\<not> final (c,Fault f) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow> (c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> final (c, Fault f) \\<Longrightarrow>\n    \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Fault f) \\<rightarrow> (c', s')", "by (induct c) (fastforce intro: step.intros simp add: final_def)+"], ["", "lemma not_final_Normal_step:\n  \"\\<not> final (c,Normal s) \\<Longrightarrow> \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> final (c, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c', s')", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<not> final (Skip, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<not> final (Basic x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 10. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n     \\<exists>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \\<not> final (Skip, Normal s)\n\ngoal (11 subgoals):\n 1. \\<not> final (Skip, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<not> final (Basic x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 10. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n     \\<exists>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (Skip, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow> (c', s')", "by (fastforce intro: step.intros simp add: final_def)"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow> (c', s')\n\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> final (Basic x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 9. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                 \\<exists>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s');\n         \\<not> final (c2, Normal s) \\<Longrightarrow>\n         \\<exists>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n         \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (Catch c1 c2,\n             Normal s) \\<rightarrow>\n            (c', s')", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> final (Basic x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 9. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                 \\<exists>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s');\n         \\<not> final (c2, Normal s) \\<Longrightarrow>\n         \\<exists>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n         \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (Catch c1 c2,\n             Normal s) \\<rightarrow>\n            (c', s')", "case Basic"], ["proof (state)\nthis:\n  \\<not> final (Basic x_, Normal s)\n\ngoal (10 subgoals):\n 1. \\<And>x.\n       \\<not> final (Basic x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 9. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                 \\<exists>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s');\n         \\<not> final (c2, Normal s) \\<Longrightarrow>\n         \\<exists>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n         \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (Catch c1 c2,\n             Normal s) \\<rightarrow>\n            (c', s')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (Basic x_, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Basic x_, Normal s) \\<rightarrow> (c', s')", "by (fastforce intro: step.intros)"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Basic x_, Normal s) \\<rightarrow> (c', s')\n\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 8. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 8. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (Spec r)"], ["proof (state)\nthis:\n  \\<not> final (Spec r, Normal s)\n\ngoal (9 subgoals):\n 1. \\<And>x.\n       \\<not> final (Spec x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 8. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 9. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (Spec r, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow> (c', s')", "by (cases \"\\<exists>t. (s,t) \\<in> r\") (fastforce intro: step.intros)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow> (c', s')\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (c\\<^sub>2, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (Seq c\\<^sub>1 c\\<^sub>2, Normal s)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Seq c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 7. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 8. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (c\\<^sub>2, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (Seq c\\<^sub>1 c\\<^sub>2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\n                            (c', s')", "by (cases \"final (c\\<^sub>1,Normal s)\") (fastforce intro: step.intros simp add: final_def)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                          (c', s')\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (Cond b c1 c2)"], ["proof (state)\nthis:\n  \\<not> final (c1, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'. \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (c2, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'. \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (Cond b c1 c2, Normal s)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Cond x1 c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 6. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 7. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Cond b c1 c2, Normal s) \\<rightarrow> (c', s')", "by (cases \"s \\<in> b\") (fastforce intro: step.intros)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Cond b c1 c2, Normal s) \\<rightarrow> (c', s')\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (While b c)"], ["proof (state)\nthis:\n  \\<not> final (c, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (While b c, Normal s)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (While x1 c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 5. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 6. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow> (c', s')", "by (cases \"s \\<in> b\") (fastforce intro: step.intros)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow> (c', s')\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (Call p)"], ["proof (state)\nthis:\n  \\<not> final (Call p, Normal s)\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<not> final (Call x, Normal s) \\<Longrightarrow>\n       \\<exists>c' s'.\n          \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 4. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 5. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow> (c', s')", "by (cases \"\\<Gamma> p\") (fastforce intro: step.intros)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow> (c', s')\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case DynCom"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> range x_; \\<not> final (?xa, Normal s)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c' s'.\n                       \\<Gamma>\\<turnstile> (?xa, Normal s) \\<rightarrow>\n      (c', s')\n  \\<not> final (DynCom x_, Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<not> final (xa, Normal s)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c' s'.\n  \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (DynCom x, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (DynCom x,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 3. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa \\<in> range x_; \\<not> final (?xa, Normal s)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c' s'.\n                       \\<Gamma>\\<turnstile> (?xa, Normal s) \\<rightarrow>\n      (c', s')\n  \\<not> final (DynCom x_, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (DynCom x_, Normal s) \\<rightarrow> (c', s')", "by (fastforce intro: step.intros)"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (DynCom x_, Normal s) \\<rightarrow> (c', s')\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (Guard f g c)"], ["proof (state)\nthis:\n  \\<not> final (c, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (Guard f g c, Normal s)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>\\<not> final (c, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (Guard x1 x2a c, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            Normal s) \\<rightarrow>\n           (c', s')\n 2. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 3. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow> (c', s')", "by (cases \"s \\<in> g\") (fastforce intro: step.intros)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow> (c', s')\n\ngoal (2 subgoals):\n 1. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case Throw"], ["proof (state)\nthis:\n  \\<not> final (Throw, Normal s)\n\ngoal (2 subgoals):\n 1. \\<not> final (Throw, Normal s) \\<Longrightarrow>\n    \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n 2. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (Throw, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')", "by (fastforce intro: step.intros simp add: final_def)"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (c\\<^sub>2, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (Catch c\\<^sub>1 c\\<^sub>2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>\\<not> final (c1, Normal s) \\<Longrightarrow>\n                \\<exists>c' s'.\n                   \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n  (c', s');\n        \\<not> final (c2, Normal s) \\<Longrightarrow>\n        \\<exists>c' s'.\n           \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow> (c', s');\n        \\<not> final (Catch c1 c2, Normal s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            Normal s) \\<rightarrow>\n           (c', s')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (c\\<^sub>2, Normal s) \\<Longrightarrow>\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow> (c', s')\n  \\<not> final (Catch c\\<^sub>1 c\\<^sub>2, Normal s)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\n                            (c', s')", "by (cases \"final (c\\<^sub>1,Normal s)\") (fastforce intro: step.intros simp add: final_def)+"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Normal s) \\<rightarrow>\n                          (c', s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma final_termi:\n\"final (c,s) \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<down>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final (c, s) \\<Longrightarrow> \\<Gamma>\\<turnstile>c \\<down> s", "by (cases s) (auto simp add: final_def terminates.intros)"], ["", "lemma split_computation:\nassumes steps: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\"\nassumes not_final: \"\\<not> final (c,s)\"\nassumes final: \"final (c\\<^sub>f,s\\<^sub>f)\"\nshows \"\\<exists>c' s'. \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c',s') \\<and> \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n                            (c\\<^sub>f, s\\<^sub>f)", "using steps not_final final"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\n  \\<not> final (c, s)\n  final (c\\<^sub>f, s\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n                            (c\\<^sub>f, s\\<^sub>f)", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> final (c\\<^sub>f, s\\<^sub>f);\n     final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c' s'.\n                         \\<Gamma>\\<turnstile> (c\\<^sub>f,\n         s\\<^sub>f) \\<rightarrow>\n        (c', s') \\<and>\n                         \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n        (c\\<^sub>f, s\\<^sub>f)\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (c\\<^sub>f, s\\<^sub>f);\n        \\<lbrakk>\\<not> final (aa, ba);\n         final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\n            (c', s') \\<and>\n                             \\<Gamma>\\<turnstile> (c',\n             s') \\<rightarrow>\\<^sup>*\n            (c\\<^sub>f, s\\<^sub>f);\n        \\<not> final (a, b); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (a, b) \\<rightarrow>\n           (c', s') \\<and>\n                            \\<Gamma>\\<turnstile> (c',\n            s') \\<rightarrow>\\<^sup>*\n           (c\\<^sub>f, s\\<^sub>f)", "case Refl"], ["proof (state)\nthis:\n  \\<not> final (c\\<^sub>f, s\\<^sub>f)\n  final (c\\<^sub>f, s\\<^sub>f)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> final (c\\<^sub>f, s\\<^sub>f);\n     final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c' s'.\n                         \\<Gamma>\\<turnstile> (c\\<^sub>f,\n         s\\<^sub>f) \\<rightarrow>\n        (c', s') \\<and>\n                         \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n        (c\\<^sub>f, s\\<^sub>f)\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (c\\<^sub>f, s\\<^sub>f);\n        \\<lbrakk>\\<not> final (aa, ba);\n         final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\n            (c', s') \\<and>\n                             \\<Gamma>\\<turnstile> (c',\n             s') \\<rightarrow>\\<^sup>*\n            (c\\<^sub>f, s\\<^sub>f);\n        \\<not> final (a, b); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (a, b) \\<rightarrow>\n           (c', s') \\<and>\n                            \\<Gamma>\\<turnstile> (c',\n            s') \\<rightarrow>\\<^sup>*\n           (c\\<^sub>f, s\\<^sub>f)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> final (c\\<^sub>f, s\\<^sub>f)\n  final (c\\<^sub>f, s\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (c\\<^sub>f, s\\<^sub>f) \\<rightarrow>\n                            (c', s') \\<and>\n       \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n                            (c\\<^sub>f, s\\<^sub>f)", "by simp"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>f, s\\<^sub>f) \\<rightarrow>\n                          (c', s') \\<and>\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n                          (c\\<^sub>f, s\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (c\\<^sub>f, s\\<^sub>f);\n        \\<lbrakk>\\<not> final (aa, ba);\n         final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\n            (c', s') \\<and>\n                             \\<Gamma>\\<turnstile> (c',\n             s') \\<rightarrow>\\<^sup>*\n            (c\\<^sub>f, s\\<^sub>f);\n        \\<not> final (a, b); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (a, b) \\<rightarrow>\n           (c', s') \\<and>\n                            \\<Gamma>\\<turnstile> (c',\n            s') \\<rightarrow>\\<^sup>*\n           (c\\<^sub>f, s\\<^sub>f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (c\\<^sub>f, s\\<^sub>f);\n        \\<lbrakk>\\<not> final (aa, ba);\n         final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\n            (c', s') \\<and>\n                             \\<Gamma>\\<turnstile> (c',\n             s') \\<rightarrow>\\<^sup>*\n            (c\\<^sub>f, s\\<^sub>f);\n        \\<not> final (a, b); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (a, b) \\<rightarrow>\n           (c', s') \\<and>\n                            \\<Gamma>\\<turnstile> (c',\n            s') \\<rightarrow>\\<^sup>*\n           (c\\<^sub>f, s\\<^sub>f)", "case (Trans c s c' s')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\n  \\<lbrakk>\\<not> final (c', s'); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'a s'a.\n                       \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\n      (c'a, s'a) \\<and>\n                       \\<Gamma>\\<turnstile> (c'a, s'a) \\<rightarrow>\\<^sup>*\n      (c\\<^sub>f, s\\<^sub>f)\n  \\<not> final (c, s)\n  final (c\\<^sub>f, s\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>*\n                             (c\\<^sub>f, s\\<^sub>f);\n        \\<lbrakk>\\<not> final (aa, ba);\n         final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c' s'.\n                             \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\n            (c', s') \\<and>\n                             \\<Gamma>\\<turnstile> (c',\n             s') \\<rightarrow>\\<^sup>*\n            (c\\<^sub>f, s\\<^sub>f);\n        \\<not> final (a, b); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c' s'.\n                            \\<Gamma>\\<turnstile> (a, b) \\<rightarrow>\n           (c', s') \\<and>\n                            \\<Gamma>\\<turnstile> (c',\n            s') \\<rightarrow>\\<^sup>*\n           (c\\<^sub>f, s\\<^sub>f)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (c\\<^sub>f, s\\<^sub>f)\n  \\<lbrakk>\\<not> final (c', s'); final (c\\<^sub>f, s\\<^sub>f)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'a s'a.\n                       \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\n      (c'a, s'a) \\<and>\n                       \\<Gamma>\\<turnstile> (c'a, s'a) \\<rightarrow>\\<^sup>*\n      (c\\<^sub>f, s\\<^sub>f)\n  \\<not> final (c, s)\n  final (c\\<^sub>f, s\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<exists>c' s'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n                            (c\\<^sub>f, s\\<^sub>f)", "by auto"], ["proof (state)\nthis:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>*\n                          (c\\<^sub>f, s\\<^sub>f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_implies_termi_reach_step_case:\nassumes hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\"\nshows \"\\<Gamma>\\<turnstile>c \\<down> Normal s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> Normal s", "using hyp"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> Normal s", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Basic x \\<down> Normal s\n 3. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 6. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 7. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 10. (\\<And>c' s'.\n         \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                              (c', s') \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>Throw \\<down> Normal s\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (11 subgoals):\n 1. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Skip, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Basic x \\<down> Normal s\n 3. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 6. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 7. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 8. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 9. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 10. (\\<And>c' s'.\n         \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                              (c', s') \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n     \\<Gamma>\\<turnstile>Throw \\<down> Normal s\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Skip \\<down> Normal s", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Skip \\<down> Normal s\n\ngoal (10 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Basic x \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 5. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 6. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 9. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 10. \\<And>c1 c2.\n        \\<lbrakk>(\\<And>c' s'.\n                     \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n    (c', s') \\<Longrightarrow>\n                     \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n         (\\<And>c' s'.\n             \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                  (c', s') \\<Longrightarrow>\n             \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n         \\<And>c' s'.\n            \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Basic x \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 5. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 6. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 9. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 10. \\<And>c1 c2.\n        \\<lbrakk>(\\<And>c' s'.\n                     \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n    (c', s') \\<Longrightarrow>\n                     \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n         (\\<And>c' s'.\n             \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                  (c', s') \\<Longrightarrow>\n             \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n         \\<And>c' s'.\n            \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case Basic"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Basic x_, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (10 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Basic x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Basic x \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 5. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 6. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 7. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 8. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 9. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 10. \\<And>c1 c2.\n        \\<lbrakk>(\\<And>c' s'.\n                     \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n    (c', s') \\<Longrightarrow>\n                     \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                 \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n         (\\<And>c' s'.\n             \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                  (c', s') \\<Longrightarrow>\n             \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n         \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n         \\<And>c' s'.\n            \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Basic x_ \\<down> Normal s", "by (fastforce intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Basic x_ \\<down> Normal s\n\ngoal (9 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 4. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 5. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 7. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 8. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 9. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 4. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 5. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 7. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 8. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 9. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (Spec r)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Spec r, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (9 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Spec x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Spec x \\<down> Normal s\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 3. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 4. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 5. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 6. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 7. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 8. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 9. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Spec r \\<down> Normal s", "by (cases \"\\<exists>t. (s,t)\\<in>r\") (fastforce intro: terminates.intros)+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Spec r \\<down> Normal s\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 3. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 4. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 7. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 3. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 4. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 7. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 3. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 4. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 7. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Seq c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Seq c1 c2 \\<down> Normal s\n 2. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 3. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 4. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 5. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 6. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 7. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 8. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "proof (rule terminates.Seq)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "fix c' s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "assume step_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "have \"\\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "from step_c\\<^sub>1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (Seq c' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                         (Seq c' c\\<^sub>2, s')", "by (rule step.Seq)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Seq c' c\\<^sub>2 \\<down> s'", "have \"\\<Gamma>\\<turnstile>Seq c' c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq c' c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Seq c' c\\<^sub>2 \\<down> s'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c' c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "thus \"\\<Gamma>\\<turnstile>c'\\<down> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq c' c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "by cases auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' \\<down> s'\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                       (?c'2, ?s'2) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c'2 \\<down> ?s'2\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from Seq.hyps (1) [OF this]"], ["proof (chain)\npicking this:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s')) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "show \"\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s')) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "show \"\\<forall>s'. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s' \\<longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "assume exec_c\\<^sub>1: \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> s' \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "show \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "proof (cases \"final (c\\<^sub>1,Normal s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case True"], ["proof (state)\nthis:\n  final (c\\<^sub>1, Normal s)\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "hence \"c\\<^sub>1=Skip \\<or> c\\<^sub>1=Throw\""], ["proof (prove)\nusing this:\n  final (c\\<^sub>1, Normal s)\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 = Skip \\<or> c\\<^sub>1 = Throw", "by (simp add: final_def)"], ["proof (state)\nthis:\n  c\\<^sub>1 = Skip \\<or> c\\<^sub>1 = Throw\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "thus ?thesis"], ["proof (prove)\nusing this:\n  c\\<^sub>1 = Skip \\<or> c\\<^sub>1 = Throw\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. c\\<^sub>1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "assume Skip: \"c\\<^sub>1=Skip\""], ["proof (state)\nthis:\n  c\\<^sub>1 = Skip\n\ngoal (2 subgoals):\n 1. c\\<^sub>1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "have \"\\<Gamma>\\<turnstile>(Seq Skip c\\<^sub>2,Normal s) \\<rightarrow> (c\\<^sub>2,Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Normal s) \\<rightarrow>\n                         (c\\<^sub>2, Normal s)", "by (rule step.SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Normal s) \\<rightarrow>\n                       (c\\<^sub>2, Normal s)\n\ngoal (2 subgoals):\n 1. c\\<^sub>1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from hyp [simplified Skip, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (2 subgoals):\n 1. c\\<^sub>1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (2 subgoals):\n 1. c\\<^sub>1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from exec_c\\<^sub>1 Skip"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n  c\\<^sub>1 = Skip", "have \"s'=Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n  c\\<^sub>1 = Skip\n\ngoal (1 subgoal):\n 1. s' = Normal s", "by (auto elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  s' = Normal s\n\ngoal (2 subgoals):\n 1. c\\<^sub>1 = Skip \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  s' = Normal s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  s' = Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "assume Throw: \"c\\<^sub>1=Throw\""], ["proof (state)\nthis:\n  c\\<^sub>1 = Throw\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with exec_c\\<^sub>1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n  c\\<^sub>1 = Throw", "have \"s'=Abrupt s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> s'\n  c\\<^sub>1 = Throw\n\ngoal (1 subgoal):\n 1. s' = Abrupt s", "by (auto elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  s' = Abrupt s\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 = Throw \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "thus ?thesis"], ["proof (prove)\nusing this:\n  s' = Abrupt s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case False"], ["proof (state)\nthis:\n  \\<not> final (c\\<^sub>1, Normal s)\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from exec_impl_steps [OF exec_c\\<^sub>1]"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')", "obtain c\\<^sub>f t where\n          steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (c\\<^sub>f, t)\" and\n          fin:\"(case s' of\n                 Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n                | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s')\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = s' then c' = Skip \\<and> t' = s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = s')\n\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>f t.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1,\n Normal s) \\<rightarrow>\\<^sup>*\n(c\\<^sub>f, t);\n         case s' of\n         Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n         | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce split: xstate.splits)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (c\\<^sub>f, t)\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with fin"], ["proof (chain)\npicking this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (c\\<^sub>f, t)\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'", "have final: \"final (c\\<^sub>f,t)\""], ["proof (prove)\nusing this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (c\\<^sub>f, t)\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n\ngoal (1 subgoal):\n 1. final (c\\<^sub>f, t)", "by (cases s') (auto simp add: final_def)"], ["proof (state)\nthis:\n  final (c\\<^sub>f, t)\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from split_computation [OF steps_c\\<^sub>1 False this]"], ["proof (chain)\npicking this:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                          (c', s') \\<and>\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (c\\<^sub>f, t)", "obtain c'' s'' where\n          first: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c'', s'')\" and\n          rest: \"\\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c\\<^sub>f, t)\""], ["proof (prove)\nusing this:\n  \\<exists>c' s'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                          (c', s') \\<and>\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow>\\<^sup>* (c\\<^sub>f, t)\n\ngoal (1 subgoal):\n 1. (\\<And>c'' s''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n(c'', s'');\n         \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>*\n                              (c\\<^sub>f, t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c\\<^sub>f, t)\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from step.Seq [OF first]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Seq c'' ?c\\<^sub>2, s'')", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (Seq c'' c\\<^sub>2, s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Seq c'' ?c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                         (Seq c'' c\\<^sub>2, s'')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Seq c'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> s''", "have termi_s'': \"\\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> s''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> s''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> s''", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> s''\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "proof (cases s'')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s'' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 4. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case (Normal x)"], ["proof (state)\nthis:\n  s'' = Normal x\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s'' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 4. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from termi_s'' [simplified Normal]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> Normal x", "have termi_c\\<^sub>2: \"\\<forall>t. \\<Gamma>\\<turnstile> \\<langle>c'',Normal x\\<rangle> \\<Rightarrow> t \\<longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> t\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq c'' c\\<^sub>2 \\<down> Normal x\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       \\<Gamma>\\<turnstile> \\<langle>c'',Normal\n    x\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> t", "by cases"], ["proof (state)\nthis:\n  \\<forall>t.\n     \\<Gamma>\\<turnstile> \\<langle>c'',Normal\n  x\\<rangle> \\<Rightarrow> t \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s'' = Normal x1 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 4. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "proof (cases \"\\<exists>x'. s'=Abrupt x'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<nexists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case False"], ["proof (state)\nthis:\n  \\<nexists>x'. s' = Abrupt x'\n\ngoal (2 subgoals):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<nexists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with fin"], ["proof (chain)\npicking this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  \\<nexists>x'. s' = Abrupt x'", "obtain \"c\\<^sub>f=Skip\" \"t=s'\""], ["proof (prove)\nusing this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  \\<nexists>x'. s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>c\\<^sub>f = Skip; t = s'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s') auto"], ["proof (state)\nthis:\n  c\\<^sub>f = Skip\n  t = s'\n\ngoal (2 subgoals):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<nexists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from steps_Skip_impl_exec [OF rest [simplified this]] Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> s'\n  s'' = Normal x", "have \"\\<Gamma>\\<turnstile> \\<langle>c'',Normal x\\<rangle> \\<Rightarrow> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> s'\n  s'' = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c'',Normal x\\<rangle> \\<Rightarrow> s'", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c'',Normal x\\<rangle> \\<Rightarrow> s'\n\ngoal (2 subgoals):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<nexists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from termi_c\\<^sub>2 [rule_format, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "show \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case True"], ["proof (state)\nthis:\n  \\<exists>x'. s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with fin"], ["proof (chain)\npicking this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  \\<exists>x'. s' = Abrupt x'", "obtain x' where s': \"s'=Abrupt x'\" and \"c\\<^sub>f=Throw\" \"t=Normal x'\""], ["proof (prove)\nusing this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  \\<exists>x'. s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>s' = Abrupt x'; c\\<^sub>f = Throw; t = Normal x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s' = Abrupt x'\n  c\\<^sub>f = Throw\n  t = Normal x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from steps_Throw_impl_exec [OF rest [simplified this]] Normal"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt x'\n  s'' = Normal x", "have \"\\<Gamma>\\<turnstile> \\<langle>c'',Normal x\\<rangle> \\<Rightarrow> Abrupt x'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt x'\n  s'' = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c'',Normal\n x\\<rangle> \\<Rightarrow> Abrupt x'", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c'',Normal\n                                     x\\<rangle> \\<Rightarrow> Abrupt x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. s' = Abrupt x' \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from termi_c\\<^sub>2 [rule_format, OF this] s'"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Abrupt x'\n  s' = Abrupt x'", "show \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Abrupt x'\n  s' = Abrupt x'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case (Abrupt x)"], ["proof (state)\nthis:\n  s'' = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from steps_Abrupt_prop [OF rest this]"], ["proof (chain)\npicking this:\n  t = Abrupt x", "have \"t=Abrupt x\""], ["proof (prove)\nusing this:\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. t = Abrupt x", "by simp"], ["proof (state)\nthis:\n  t = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with fin"], ["proof (chain)\npicking this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  t = Abrupt x", "have \"s'=Abrupt x\""], ["proof (prove)\nusing this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  t = Abrupt x\n\ngoal (1 subgoal):\n 1. s' = Abrupt x", "by (cases s') auto"], ["proof (state)\nthis:\n  s' = Abrupt x\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s'' = Abrupt x2 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 3. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "thus \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  s' = Abrupt x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case (Fault f)"], ["proof (state)\nthis:\n  s'' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from steps_Fault_prop [OF rest this]"], ["proof (chain)\npicking this:\n  t = Fault f", "have \"t=Fault f\""], ["proof (prove)\nusing this:\n  t = Fault f\n\ngoal (1 subgoal):\n 1. t = Fault f", "by simp"], ["proof (state)\nthis:\n  t = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with fin"], ["proof (chain)\npicking this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  t = Fault f", "have \"s'=Fault f\""], ["proof (prove)\nusing this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  t = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "by (cases s') auto"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       s'' = Fault x3 \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n 2. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "thus \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "case Stuck"], ["proof (state)\nthis:\n  s'' = Stuck\n\ngoal (1 subgoal):\n 1. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "from steps_Stuck_prop [OF rest this]"], ["proof (chain)\npicking this:\n  t = Stuck", "have \"t=Stuck\""], ["proof (prove)\nusing this:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. t = Stuck", "by simp"], ["proof (state)\nthis:\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "with fin"], ["proof (chain)\npicking this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  t = Stuck", "have \"s'=Stuck\""], ["proof (prove)\nusing this:\n  case s' of Abrupt x \\<Rightarrow> c\\<^sub>f = Throw \\<and> t = Normal x\n  | _ \\<Rightarrow> c\\<^sub>f = Skip \\<and> t = s'\n  t = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "by (cases s') auto"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s'' = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "thus \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 2. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 3. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 6. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 2. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 3. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 6. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (Cond b c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 2. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 3. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 6. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Cond x1 c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Cond x1 c1 c2 \\<down> Normal s\n 2. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 3. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 4. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 5. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 6. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 7. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "proof (cases \"s\\<in>b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "case True"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "then"], ["proof (chain)\npicking this:\n  s \\<in> b", "have \"\\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (c\\<^sub>1, Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\n                         (c\\<^sub>1, Normal s)", "by (rule step.CondTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (c\\<^sub>1, Normal s)\n\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "with True"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "case False"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "then"], ["proof (chain)\npicking this:\n  s \\<notin> b", "have \"\\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (c\\<^sub>2, Normal s)\""], ["proof (prove)\nusing this:\n  s \\<notin> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2,\n                          Normal s) \\<rightarrow>\n                         (c\\<^sub>2, Normal s)", "by (rule step.CondFalse)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Cond b c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (c\\<^sub>2, Normal s)\n\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "with False"], ["proof (chain)\npicking this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<notin> b\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Cond b c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 5. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 5. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (While b c)"], ["proof (state)\nthis:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 5. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (6 subgoals):\n 1. \\<And>x1 c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (While x1 c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>While x1 c \\<down> Normal s\n 2. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 3. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 4. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 5. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 6. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "proof (cases \"s\\<in>b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "case True"], ["proof (state)\nthis:\n  s \\<in> b\n\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "then"], ["proof (chain)\npicking this:\n  s \\<in> b", "have \"\\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow> (Seq c (While b c), Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                         (Seq c (While b c), Normal s)", "by (rule step.WhileTrue)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (While b c, Normal s) \\<rightarrow>\n                       (Seq c (While b c), Normal s)\n\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Seq c (While b c) \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>(Seq c (While b c)) \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Seq c (While b c) \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Seq c (While b c) \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Seq c (While b c) \\<down> Normal s\n\ngoal (2 subgoals):\n 1. s \\<in> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n 2. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "with True"], ["proof (chain)\npicking this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>Seq c (While b c) \\<down> Normal s", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> b\n  \\<Gamma>\\<turnstile>Seq c (While b c) \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "by (auto elim: terminates_Normal_elim_cases intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "case False"], ["proof (state)\nthis:\n  s \\<notin> b\n\ngoal (1 subgoal):\n 1. s \\<notin> b \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s \\<notin> b\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>While b c \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>While b c \\<down> Normal s\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 4. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 4. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (Call p)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 4. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (5 subgoals):\n 1. \\<And>x.\n       (\\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Call x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call x \\<down> Normal s\n 2. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 3. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 4. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 5. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "proof (cases \"\\<Gamma> p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> p = None \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Call p \\<down> Normal s\n 2. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "case None"], ["proof (state)\nthis:\n  \\<Gamma> p = None\n\ngoal (2 subgoals):\n 1. \\<Gamma> p = None \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Call p \\<down> Normal s\n 2. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> p = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Call p \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "case (Some bdy)"], ["proof (state)\nthis:\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy", "have \"\\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow> (bdy, Normal s)\""], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow> (bdy, Normal s)", "by (rule step.Call)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Call p, Normal s) \\<rightarrow> (bdy, Normal s)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>bdy \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>bdy \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<Gamma> p = Some a \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "with Some"], ["proof (chain)\npicking this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> p = Some bdy\n  \\<Gamma>\\<turnstile>bdy \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Call p \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Call p \\<down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Call p \\<down> Normal s\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 3. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 3. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (DynCom c)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> range c;\n   \\<And>c' s'.\n      \\<Gamma>\\<turnstile> (?xa, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile>?xa \\<down> Normal s\n  \\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 3. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 3. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have \"\\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow> (c s, Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow> (c s, Normal s)", "by (rule step.DynCom)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (DynCom c, Normal s) \\<rightarrow> (c s, Normal s)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 3. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>c s \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c s \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<And>c' s'.\n                       \\<Gamma>\\<turnstile> (xa, Normal s) \\<rightarrow>\n      (c', s') \\<Longrightarrow>\n                       \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>xa \\<down> Normal\n                               s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (DynCom x, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>DynCom x \\<down> Normal s\n 2. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 3. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 4. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c s \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>DynCom c \\<down> Normal s\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 2. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 2. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (Guard f g c)"], ["proof (state)\nthis:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n  \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 2. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Guard x1 x2a c, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Guard x1 x2a c \\<down> Normal s\n 2. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 3. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "proof (cases \"s\\<in>g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n 2. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "case True"], ["proof (state)\nthis:\n  s \\<in> g\n\ngoal (2 subgoals):\n 1. s \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n 2. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "then"], ["proof (chain)\npicking this:\n  s \\<in> g", "have \"\\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow> (c, Normal s)\""], ["proof (prove)\nusing this:\n  s \\<in> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow> (c, Normal s)", "by (rule step.Guard)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Guard f g c, Normal s) \\<rightarrow> (c, Normal s)\n\ngoal (2 subgoals):\n 1. s \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n 2. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>c\\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n\ngoal (2 subgoals):\n 1. s \\<in> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n 2. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "with True"], ["proof (chain)\npicking this:\n  s \\<in> g\n  \\<Gamma>\\<turnstile>c \\<down> Normal s", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> g\n  \\<Gamma>\\<turnstile>c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n\ngoal (1 subgoal):\n 1. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "case False"], ["proof (state)\nthis:\n  s \\<notin> g\n\ngoal (1 subgoal):\n 1. s \\<notin> g \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s \\<notin> g\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Guard f g c \\<down> Normal s\n\ngoal (2 subgoals):\n 1. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case Throw"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (2 subgoals):\n 1. (\\<And>c' s'.\n        \\<Gamma>\\<turnstile> (Throw, Normal s) \\<rightarrow>\n                             (c', s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n 2. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Throw \\<down> Normal s", "by (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Throw \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>2, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "have hyp: \"\\<And>c' s'. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (c', s') \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c' s'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                             Normal s) \\<rightarrow>\n                            (c', s') \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c' \\<down> s'", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (?c', ?s') \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c' \\<down> ?s'\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2.\n       \\<lbrakk>(\\<And>c' s'.\n                    \\<Gamma>\\<turnstile> (c1, Normal s) \\<rightarrow>\n   (c', s') \\<Longrightarrow>\n                    \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n                \\<Gamma>\\<turnstile>c1 \\<down> Normal s;\n        (\\<And>c' s'.\n            \\<Gamma>\\<turnstile> (c2, Normal s) \\<rightarrow>\n                                 (c', s') \\<Longrightarrow>\n            \\<Gamma>\\<turnstile>c' \\<down> s') \\<Longrightarrow>\n        \\<Gamma>\\<turnstile>c2 \\<down> Normal s;\n        \\<And>c' s'.\n           \\<Gamma>\\<turnstile> (Catch c1 c2, Normal s) \\<rightarrow>\n                                (c', s') \\<Longrightarrow>\n           \\<Gamma>\\<turnstile>c' \\<down> s'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>Catch c1 c2 \\<down> Normal s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> Normal s", "proof (rule terminates.Catch)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "fix c' s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "assume step_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "have \"\\<Gamma>\\<turnstile>c' \\<down> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "from step_c\\<^sub>1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (Catch c' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                         (Catch c' c\\<^sub>2, s')", "by (rule step.Catch)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Catch c' c\\<^sub>2 \\<down> s'", "have \"\\<Gamma>\\<turnstile>Catch c' c\\<^sub>2 \\<down> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch c' c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Catch c' c\\<^sub>2 \\<down> s'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch c' c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "thus \"\\<Gamma>\\<turnstile>c'\\<down> s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch c' c\\<^sub>2 \\<down> s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c' \\<down> s'", "by cases auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' \\<down> s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c' \\<down> s'\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "}"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                       (?c'2, ?s'2) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c'2 \\<down> ?s'2\n\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n 2. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from Catch.hyps (1) [OF this]"], ["proof (chain)\npicking this:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s')) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "show \"\\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                           (c', s')) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>1 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "show \"\\<forall>s'. \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow> \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "assume exec_c\\<^sub>1: \"\\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal s\\<rangle> \\<Rightarrow> Abrupt s'\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n\ngoal (1 subgoal):\n 1. \\<And>s'.\n       \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n          s\\<rangle> \\<Rightarrow> Abrupt s' \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "show \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "proof (cases \"final (c\\<^sub>1,Normal s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "case True"], ["proof (state)\nthis:\n  final (c\\<^sub>1, Normal s)\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "with exec_c\\<^sub>1"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n  final (c\\<^sub>1, Normal s)", "have Throw: \"c\\<^sub>1=Throw\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n  final (c\\<^sub>1, Normal s)\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 = Throw", "by (auto simp add: final_def elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  c\\<^sub>1 = Throw\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "have \"\\<Gamma>\\<turnstile>(Catch Throw c\\<^sub>2,Normal s) \\<rightarrow> (c\\<^sub>2,Normal s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, Normal s) \\<rightarrow>\n                         (c\\<^sub>2, Normal s)", "by (rule step.CatchThrow)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Throw c\\<^sub>2, Normal s) \\<rightarrow>\n                       (c\\<^sub>2, Normal s)\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from hyp [simplified Throw, OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "have \"\\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from exec_c\\<^sub>1 Throw"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n  c\\<^sub>1 = Throw", "have \"s'=s\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n     s\\<rangle> \\<Rightarrow> Abrupt s'\n  c\\<^sub>1 = Throw\n\ngoal (1 subgoal):\n 1. s' = s", "by (auto elim: exec_Normal_elim_cases)"], ["proof (state)\nthis:\n  s' = s\n\ngoal (2 subgoals):\n 1. final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n 2. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  s' = s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s\n  s' = s\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "case False"], ["proof (state)\nthis:\n  \\<not> final (c\\<^sub>1, Normal s)\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from exec_impl_steps [OF exec_c\\<^sub>1]"], ["proof (chain)\npicking this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s')", "obtain c\\<^sub>f t where\n          steps_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>* (Throw, Normal s')\""], ["proof (prove)\nusing this:\n  \\<exists>c' t'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (c', t') \\<and>\n     (case Abrupt s' of\n      Abrupt x \\<Rightarrow>\n        if Normal s = Abrupt s' then c' = Skip \\<and> t' = Abrupt s'\n        else c' = Throw \\<and> t' = Normal x\n      | _ \\<Rightarrow> c' = Skip \\<and> t' = Abrupt s')\n\ngoal (1 subgoal):\n 1. (\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                          (Throw, Normal s') \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by (fastforce split: xstate.splits)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\\<^sup>*\n                       (Throw, Normal s')\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from split_computation [OF steps_c\\<^sub>1 False]"], ["proof (chain)\npicking this:\n  final (Throw, Normal s') \\<Longrightarrow>\n  \\<exists>c' s'a.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                          (c', s'a) \\<and>\n     \\<Gamma>\\<turnstile> (c', s'a) \\<rightarrow>\\<^sup>* (Throw, Normal s')", "obtain c'' s'' where\n          first: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c'', s'')\" and\n          rest: \"\\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (Throw, Normal s')\""], ["proof (prove)\nusing this:\n  final (Throw, Normal s') \\<Longrightarrow>\n  \\<exists>c' s'a.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n                          (c', s'a) \\<and>\n     \\<Gamma>\\<turnstile> (c', s'a) \\<rightarrow>\\<^sup>* (Throw, Normal s')\n\ngoal (1 subgoal):\n 1. (\\<And>c'' s''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow>\n(c'', s'');\n         \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>*\n                              (Throw, Normal s')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: final_def)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, Normal s) \\<rightarrow> (c'', s'')\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (Throw, Normal s')\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from step.Catch [OF first]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Catch c'' ?c\\<^sub>2, s'')", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow> (Catch c'' c\\<^sub>2, s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Catch c'' ?c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                         (Catch c'' c\\<^sub>2, s'')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Normal s) \\<rightarrow>\n                       (Catch c'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from hyp [OF this]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''", "have \"\\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from steps_Throw_impl_exec [OF rest]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'", "have \"\\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "from rest"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (Throw, Normal s')", "obtain x where \"s''=Normal x\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (Throw, Normal s')\n\ngoal (1 subgoal):\n 1. (\\<And>x. s'' = Normal x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases s'')\n             (auto dest: steps_Fault_prop steps_Abrupt_prop steps_Stuck_prop)"], ["proof (state)\nthis:\n  s'' = Normal x\n\ngoal (1 subgoal):\n 1. \\<not> final (c\\<^sub>1, Normal s) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'\n  s'' = Normal x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>Catch c'' c\\<^sub>2 \\<down> s''\n  \\<Gamma>\\<turnstile> \\<langle>c'',s''\\<rangle> \\<Rightarrow> Abrupt s'\n  s'' = Normal x\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'", "by (fastforce elim: terminates_elim_cases)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>s'.\n     \\<Gamma>\\<turnstile> \\<langle>c\\<^sub>1,Normal\n        s\\<rangle> \\<Rightarrow> Abrupt s' \\<longrightarrow>\n     \\<Gamma>\\<turnstile>c\\<^sub>2 \\<down> Normal s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>Catch c\\<^sub>1 c\\<^sub>2 \\<down> Normal s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_implies_termi_reach:\nassumes wf: \"wf {(cfg2,cfg1). \\<Gamma> \\<turnstile> (c,s) \\<rightarrow>\\<^sup>* cfg1 \\<and> \\<Gamma> \\<turnstile> cfg1 \\<rightarrow> cfg2}\"\nshows \"\\<And>c1 s1. \\<lbrakk>\\<Gamma> \\<turnstile> (c,s) \\<rightarrow>\\<^sup>* cfg1;  cfg1=(c1,s1)\\<rbrakk>\\<Longrightarrow> \\<Gamma>\\<turnstile>c1\\<down>s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c1 s1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1;\n        cfg1 = (c1, s1)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "using wf"], ["proof (prove)\nusing this:\n  wf {(cfg2, cfg1).\n      \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1 \\<and>\n      \\<Gamma>\\<turnstile> cfg1 \\<rightarrow> cfg2}\n\ngoal (1 subgoal):\n 1. \\<And>c1 s1.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1;\n        cfg1 = (c1, s1)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "proof (induct cfg1, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x c1 s1.\n       \\<lbrakk>\\<And>y c1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n           (c1a, s1a);\n                    \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n   (c1a, s1a);\n                    y = (c1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>c1a \\<down> s1a;\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1);\n        x = (c1, s1);\n        wf {(cfg2, cfg1).\n            \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1 \\<and>\n            \\<Gamma>\\<turnstile> cfg1 \\<rightarrow> cfg2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "fix c1 s1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x c1 s1.\n       \\<lbrakk>\\<And>y c1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n           (c1a, s1a);\n                    \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n   (c1a, s1a);\n                    y = (c1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>c1a \\<down> s1a;\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1);\n        x = (c1, s1);\n        wf {(cfg2, cfg1).\n            \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1 \\<and>\n            \\<Gamma>\\<turnstile> cfg1 \\<rightarrow> cfg2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "assume reach: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1)\""], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1)\n\ngoal (1 subgoal):\n 1. \\<And>x c1 s1.\n       \\<lbrakk>\\<And>y c1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n           (c1a, s1a);\n                    \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n   (c1a, s1a);\n                    y = (c1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>c1a \\<down> s1a;\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1);\n        x = (c1, s1);\n        wf {(cfg2, cfg1).\n            \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1 \\<and>\n            \\<Gamma>\\<turnstile> cfg1 \\<rightarrow> cfg2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "assume hyp_raw: \"\\<And>y c2 s2.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow> (c2, s2); \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c2, s2); y = (c2, s2)\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma>\\<turnstile>c2 \\<down> s2\""], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow> (?c2.0, ?s2.0);\n   \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (?c2.0, ?s2.0);\n   ?y = (?c2.0, ?s2.0)\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>\\<turnstile>?c2.0 \\<down> ?s2.0\n\ngoal (1 subgoal):\n 1. \\<And>x c1 s1.\n       \\<lbrakk>\\<And>y c1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n           (c1a, s1a);\n                    \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n   (c1a, s1a);\n                    y = (c1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>c1a \\<down> s1a;\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1);\n        x = (c1, s1);\n        wf {(cfg2, cfg1).\n            \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1 \\<and>\n            \\<Gamma>\\<turnstile> cfg1 \\<rightarrow> cfg2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "have hyp: \"\\<And>c2 s2. \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow> (c2, s2) \\<Longrightarrow> \\<Gamma>\\<turnstile>c2 \\<down> s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c2 \\<down> s2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile>c2 \\<down> s2", "apply (rule hyp_raw)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow> (c2, s2)\n 2. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c2, s2)\n 3. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       ?y c2 s2 = (c2, s2)", "apply   assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c2, s2)\n 2. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       ?y c2 s2 = (c2, s2)", "using reach"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1)\n\ngoal (2 subgoals):\n 1. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c2, s2)\n 2. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       ?y c2 s2 = (c2, s2)", "apply  simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c2 s2.\n       \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                            (c2, s2) \\<Longrightarrow>\n       ?y c2 s2 = (c2, s2)", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n                       (?c2.0, ?s2.0) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c2.0 \\<down> ?s2.0\n\ngoal (1 subgoal):\n 1. \\<And>x c1 s1.\n       \\<lbrakk>\\<And>y c1a s1a.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (c1, s1) \\<rightarrow>\n           (c1a, s1a);\n                    \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>*\n   (c1a, s1a);\n                    y = (c1a, s1a)\\<rbrakk>\n                   \\<Longrightarrow> \\<Gamma>\\<turnstile>c1a \\<down> s1a;\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c1, s1);\n        x = (c1, s1);\n        wf {(cfg2, cfg1).\n            \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* cfg1 \\<and>\n            \\<Gamma>\\<turnstile> cfg1 \\<rightarrow> cfg2}\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "show \"\\<Gamma>\\<turnstile>c1 \\<down> s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 \\<down> s1", "proof (cases s1)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s1 = Normal x1 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 2. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 3. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 4. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "case (Normal s1')"], ["proof (state)\nthis:\n  s1 = Normal s1'\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       s1 = Normal x1 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 2. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 3. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 4. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "with wf_implies_termi_reach_step_case [OF hyp [simplified Normal]]"], ["proof (chain)\npicking this:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (?c, Normal ?s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile> (c1, Normal s1') \\<rightarrow>\n                           (c', s')) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c \\<down> Normal ?s\n  s1 = Normal s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>c' s'.\n      \\<Gamma>\\<turnstile> (?c, Normal ?s) \\<rightarrow>\n                           (c', s') \\<Longrightarrow>\n      \\<Gamma>\\<turnstile> (c1, Normal s1') \\<rightarrow>\n                           (c', s')) \\<Longrightarrow>\n  \\<Gamma>\\<turnstile>?c \\<down> Normal ?s\n  s1 = Normal s1'\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c1 \\<down> s1", "by auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> s1\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       s1 = Abrupt x2 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 2. \\<And>x3.\n       s1 = Fault x3 \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1\n 3. s1 = Stuck \\<Longrightarrow> \\<Gamma>\\<turnstile>c1 \\<down> s1", "qed (auto intro: terminates.intros)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c1 \\<down> s1\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem no_infinite_computation_impl_terminates:\n  assumes not_inf: \"\\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\"\n  shows \"\\<Gamma>\\<turnstile>c\\<down>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "from no_infinite_computation_implies_wf [OF not_inf]"], ["proof (chain)\npicking this:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}", "have wf: \"wf {(c2, c1). \\<Gamma>\\<turnstile>(c, s) \\<rightarrow>\\<^sup>* c1 \\<and> \\<Gamma>\\<turnstile>c1 \\<rightarrow> c2}\""], ["proof (prove)\nusing this:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\n\ngoal (1 subgoal):\n 1. wf {(c2, c1).\n        \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n        \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}", "."], ["proof (state)\nthis:\n  wf {(c2, c1).\n      \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* c1 \\<and>\n      \\<Gamma>\\<turnstile> c1 \\<rightarrow> c2}\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s", "by (rule wf_implies_termi_reach [OF wf]) auto"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary terminates_iff_no_infinite_computation:\n  \"\\<Gamma>\\<turnstile>c\\<down>s = (\\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile>c \\<down> s =\n    (\\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>))", "apply (rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>\\<turnstile>c \\<down> s \\<Longrightarrow>\n    \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>)\n 2. \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c \\<down> s", "apply  (erule terminates_impl_no_infinite_computation)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> \\<dots>(\\<infinity>) \\<Longrightarrow>\n    \\<Gamma>\\<turnstile>c \\<down> s", "apply (erule no_infinite_computation_impl_terminates)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* ************************************************************************* *)"], ["", "subsection \\<open>Generalised Redexes\\<close>"], ["", "(* ************************************************************************* *)"], ["", "text \\<open>\nFor an important lemma for the completeness proof of the Hoare-logic for\ntotal correctness we need a generalisation of @{const \"redex\"} that not only\nyield the redex itself but all the enclosing statements as well.\n\\<close>"], ["", "primrec redexes:: \"('s,'p,'f)com \\<Rightarrow> ('s,'p,'f)com set\"\nwhere\n\"redexes Skip = {Skip}\" |\n\"redexes (Basic f) = {Basic f}\" |\n\"redexes (Spec r) = {Spec r}\" |\n\"redexes (Seq c\\<^sub>1 c\\<^sub>2) = {Seq c\\<^sub>1 c\\<^sub>2} \\<union> redexes c\\<^sub>1\" |\n\"redexes (Cond b c\\<^sub>1 c\\<^sub>2) = {Cond b c\\<^sub>1 c\\<^sub>2}\" |\n\"redexes (While b c) = {While b c}\" |\n\"redexes (Call p) = {Call p}\" |\n\"redexes (DynCom d) = {DynCom d}\" |\n\"redexes (Guard f b c) = {Guard f b c}\" |\n\"redexes (Throw) = {Throw}\" |\n\"redexes (Catch c\\<^sub>1 c\\<^sub>2) = {Catch c\\<^sub>1 c\\<^sub>2} \\<union> redexes c\\<^sub>1\""], ["", "lemma root_in_redexes: \"c \\<in> redexes c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> redexes c", "apply (induct c)"], ["proof (prove)\ngoal (11 subgoals):\n 1. Skip \\<in> redexes Skip\n 2. \\<And>x. Basic x \\<in> redexes (Basic x)\n 3. \\<And>x. Spec x \\<in> redexes (Spec x)\n 4. \\<And>c1 c2.\n       \\<lbrakk>c1 \\<in> redexes c1; c2 \\<in> redexes c2\\<rbrakk>\n       \\<Longrightarrow> Seq c1 c2 \\<in> redexes (Seq c1 c2)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>c1 \\<in> redexes c1; c2 \\<in> redexes c2\\<rbrakk>\n       \\<Longrightarrow> Cond x1 c1 c2 \\<in> redexes (Cond x1 c1 c2)\n 6. \\<And>x1 c.\n       c \\<in> redexes c \\<Longrightarrow>\n       While x1 c \\<in> redexes (While x1 c)\n 7. \\<And>x. Call x \\<in> redexes (Call x)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           xa \\<in> redexes xa) \\<Longrightarrow>\n       DynCom x \\<in> redexes (DynCom x)\n 9. \\<And>x1 x2a c.\n       c \\<in> redexes c \\<Longrightarrow>\n       Guard x1 x2a c \\<in> redexes (Guard x1 x2a c)\n 10. Throw \\<in> redexes Throw\nA total of 11 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma redex_in_redexes: \"redex c \\<in> redexes c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redex c \\<in> redexes c", "apply (induct c)"], ["proof (prove)\ngoal (11 subgoals):\n 1. redex Skip \\<in> redexes Skip\n 2. \\<And>x. redex (Basic x) \\<in> redexes (Basic x)\n 3. \\<And>x. redex (Spec x) \\<in> redexes (Spec x)\n 4. \\<And>c1 c2.\n       \\<lbrakk>redex c1 \\<in> redexes c1;\n        redex c2 \\<in> redexes c2\\<rbrakk>\n       \\<Longrightarrow> redex (Seq c1 c2) \\<in> redexes (Seq c1 c2)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>redex c1 \\<in> redexes c1;\n        redex c2 \\<in> redexes c2\\<rbrakk>\n       \\<Longrightarrow> redex (Cond x1 c1 c2) \\<in> redexes (Cond x1 c1 c2)\n 6. \\<And>x1 c.\n       redex c \\<in> redexes c \\<Longrightarrow>\n       redex (While x1 c) \\<in> redexes (While x1 c)\n 7. \\<And>x. redex (Call x) \\<in> redexes (Call x)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           redex xa \\<in> redexes xa) \\<Longrightarrow>\n       redex (DynCom x) \\<in> redexes (DynCom x)\n 9. \\<And>x1 x2a c.\n       redex c \\<in> redexes c \\<Longrightarrow>\n       redex (Guard x1 x2a c) \\<in> redexes (Guard x1 x2a c)\n 10. redex Throw \\<in> redexes Throw\nA total of 11 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma redex_redexes: \"\\<And>c'. \\<lbrakk>c' \\<in> redexes c; redex c' = c'\\<rbrakk> \\<Longrightarrow> redex c = c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       \\<lbrakk>c' \\<in> redexes c; redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex c = c'", "apply (induct c)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>c'.\n       \\<lbrakk>c' \\<in> redexes Skip; redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex Skip = c'\n 2. \\<And>x c'.\n       \\<lbrakk>c' \\<in> redexes (Basic x); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (Basic x) = c'\n 3. \\<And>x c'.\n       \\<lbrakk>c' \\<in> redexes (Spec x); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (Spec x) = c'\n 4. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>c' \\<in> redexes c1; redex c' = c'\\<rbrakk>\n                   \\<Longrightarrow> redex c1 = c';\n        \\<And>c'.\n           \\<lbrakk>c' \\<in> redexes c2; redex c' = c'\\<rbrakk>\n           \\<Longrightarrow> redex c2 = c';\n        c' \\<in> redexes (Seq c1 c2); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (Seq c1 c2) = c'\n 5. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>c' \\<in> redexes c1; redex c' = c'\\<rbrakk>\n                   \\<Longrightarrow> redex c1 = c';\n        \\<And>c'.\n           \\<lbrakk>c' \\<in> redexes c2; redex c' = c'\\<rbrakk>\n           \\<Longrightarrow> redex c2 = c';\n        c' \\<in> redexes (Cond x1 c1 c2); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (Cond x1 c1 c2) = c'\n 6. \\<And>x1 c c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>c' \\<in> redexes c; redex c' = c'\\<rbrakk>\n                   \\<Longrightarrow> redex c = c';\n        c' \\<in> redexes (While x1 c); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (While x1 c) = c'\n 7. \\<And>x c'.\n       \\<lbrakk>c' \\<in> redexes (Call x); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (Call x) = c'\n 8. \\<And>x c'.\n       \\<lbrakk>\\<And>xa c'.\n                   \\<lbrakk>xa \\<in> range x; c' \\<in> redexes xa;\n                    redex c' = c'\\<rbrakk>\n                   \\<Longrightarrow> redex xa = c';\n        c' \\<in> redexes (DynCom x); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (DynCom x) = c'\n 9. \\<And>x1 x2a c c'.\n       \\<lbrakk>\\<And>c'.\n                   \\<lbrakk>c' \\<in> redexes c; redex c' = c'\\<rbrakk>\n                   \\<Longrightarrow> redex c = c';\n        c' \\<in> redexes (Guard x1 x2a c); redex c' = c'\\<rbrakk>\n       \\<Longrightarrow> redex (Guard x1 x2a c) = c'\n 10. \\<And>c'.\n        \\<lbrakk>c' \\<in> redexes Throw; redex c' = c'\\<rbrakk>\n        \\<Longrightarrow> redex Throw = c'\nA total of 11 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma step_redexes:\n  shows \"\\<And>r r'. \\<lbrakk>\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s'); r \\<in> redexes c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s') \\<and> r' \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "proof (induct c)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Skip\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Skip, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Basic x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Basic x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 10. \\<And>r r'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n         r \\<in> redexes Throw\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'.\n                             \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n            (c', s') \\<and>\n                             r' \\<in> redexes c'\nA total of 11 subgoals...", "case Skip"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes Skip\n\ngoal (11 subgoals):\n 1. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Skip\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Skip, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Basic x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Basic x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 10. \\<And>r r'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n         r \\<in> redexes Throw\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'.\n                             \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n            (c', s') \\<and>\n                             r' \\<in> redexes c'\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes Skip\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Skip, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Skip, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (10 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Basic x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Basic x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 10. \\<And>c1 c2 r r'.\n        \\<lbrakk>\\<And>r r'.\n                    \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n            (r', s');\n                     r \\<in> redexes c1\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>c'.\n   \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n   r' \\<in> redexes c';\n         \\<And>r r'.\n            \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n             r \\<in> redexes c2\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c'.\n                                 \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n                (c', s') \\<and>\n                                 r' \\<in> redexes c';\n         \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n         r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'.\n                             \\<Gamma>\\<turnstile> (Catch c1 c2,\n             s) \\<rightarrow>\n            (c', s') \\<and>\n                             r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Basic x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Basic x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 10. \\<And>c1 c2 r r'.\n        \\<lbrakk>\\<And>r r'.\n                    \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n            (r', s');\n                     r \\<in> redexes c1\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>c'.\n   \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n   r' \\<in> redexes c';\n         \\<And>r r'.\n            \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n             r \\<in> redexes c2\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c'.\n                                 \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n                (c', s') \\<and>\n                                 r' \\<in> redexes c';\n         \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n         r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'.\n                             \\<Gamma>\\<turnstile> (Catch c1 c2,\n             s) \\<rightarrow>\n            (c', s') \\<and>\n                             r' \\<in> redexes c'", "case Basic"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Basic x_)\n\ngoal (10 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Basic x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Basic x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 10. \\<And>c1 c2 r r'.\n        \\<lbrakk>\\<And>r r'.\n                    \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n            (r', s');\n                     r \\<in> redexes c1\\<rbrakk>\n                    \\<Longrightarrow> \\<exists>c'.\n   \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n   r' \\<in> redexes c';\n         \\<And>r r'.\n            \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n             r \\<in> redexes c2\\<rbrakk>\n            \\<Longrightarrow> \\<exists>c'.\n                                 \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n                (c', s') \\<and>\n                                 r' \\<in> redexes c';\n         \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n         r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'.\n                             \\<Gamma>\\<turnstile> (Catch c1 c2,\n             s) \\<rightarrow>\n            (c', s') \\<and>\n                             r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Basic x_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Basic x_, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Basic x_, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (9 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case Spec"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Spec x_)\n\ngoal (9 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Spec x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Spec x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 9. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Spec x_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Spec x_, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Spec x_, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c\\<^sub>2, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Seq c\\<^sub>1 c\\<^sub>2)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "have \"r \\<in> redexes (Seq c\\<^sub>1 c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> redexes (Seq c\\<^sub>1 c\\<^sub>2)", "by fact"], ["proof (state)\nthis:\n  r \\<in> redexes (Seq c\\<^sub>1 c\\<^sub>2)\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "hence r: \"r = Seq c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1\""], ["proof (prove)\nusing this:\n  r \\<in> redexes (Seq c\\<^sub>1 c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. r = Seq c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  r = Seq c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "have step_r: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n\ngoal (8 subgoals):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Seq c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Seq c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 8. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "from r"], ["proof (chain)\npicking this:\n  r = Seq c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  r = Seq c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. r = Seq c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'\n 2. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "assume \"r = Seq c\\<^sub>1 c\\<^sub>2\""], ["proof (state)\nthis:\n  r = Seq c\\<^sub>1 c\\<^sub>2\n\ngoal (2 subgoals):\n 1. r = Seq c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'\n 2. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "with step_r"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r = Seq c\\<^sub>1 c\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r = Seq c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "by (auto simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "assume r: \"r \\<in> redexes c\\<^sub>1\""], ["proof (state)\nthis:\n  r \\<in> redexes c\\<^sub>1\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "from Seq.hyps (1) [OF step_r this]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'", "obtain c' where\n      step_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s')\" and\n      r': \"r' \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s');\n         r' \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s')\n  r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "from step.Seq [OF step_c\\<^sub>1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c' ?c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow> (Seq c' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c' ?c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                         (Seq c' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "with r'"], ["proof (chain)\npicking this:\n  r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c' c\\<^sub>2, s')", "show ?case"], ["proof (prove)\nusing this:\n  r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "by auto"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case Cond"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c1_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c1_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c2_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c2_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Cond x1_ c1_ c2_)\n\ngoal (7 subgoals):\n 1. \\<And>x1 c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Cond x1 c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Cond x1 c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 7. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c1_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c1_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c2_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c2_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Cond x1_ c1_ c2_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Cond x1_ c1_ c2_, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Cond x1_ c1_ c2_, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (6 subgoals):\n 1. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case While"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (While x1_ c_)\n\ngoal (6 subgoals):\n 1. \\<And>x1 c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (While x1 c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (While x1 c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 6. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (While x1_ c_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (While x1_ c_, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (While x1_ c_, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (5 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case Call"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Call x_)\n\ngoal (5 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Call x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Call x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 5. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Call x_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Call x_, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Call x_, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (4 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case DynCom"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> range x_;\n   \\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes ?xa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (?xa, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (DynCom x_)\n\ngoal (4 subgoals):\n 1. \\<And>x r r'.\n       \\<lbrakk>\\<And>xa r r'.\n                   \\<lbrakk>xa \\<in> range x;\n                    \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n                    r \\<in> redexes xa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (xa, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (DynCom x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (DynCom x, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 4. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa \\<in> range x_;\n   \\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes ?xa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (?xa, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (DynCom x_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (DynCom x_, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (DynCom x_, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case Guard"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Guard x1_ x2a_ c_)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2a c r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Guard x1 x2a c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Guard x1 x2a c,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 3. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c_\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c_, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Guard x1_ x2a_ c_)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Guard x1_ x2a_ c_, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Guard x1_ x2a_ c_, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case Throw"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes Throw\n\ngoal (2 subgoals):\n 1. \\<And>r r'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes Throw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'\n 2. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes Throw\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> (c', s') \\<and>\n       r' \\<in> redexes c'", "by (fastforce intro: step.intros elim: step_elim_cases simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Throw, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c\\<^sub>1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<lbrakk>\\<Gamma>\\<turnstile> (?r, s) \\<rightarrow> (?r', s');\n   ?r \\<in> redexes c\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'.\n                       \\<Gamma>\\<turnstile> (c\\<^sub>2, s) \\<rightarrow>\n      (c', s') \\<and>\n                       ?r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes (Catch c\\<^sub>1 c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "have \"r \\<in> redexes (Catch c\\<^sub>1 c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> redexes (Catch c\\<^sub>1 c\\<^sub>2)", "by fact"], ["proof (state)\nthis:\n  r \\<in> redexes (Catch c\\<^sub>1 c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "hence r: \"r = Catch c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1\""], ["proof (prove)\nusing this:\n  r \\<in> redexes (Catch c\\<^sub>1 c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. r = Catch c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  r = Catch c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "have step_r: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c1 c2 r r'.\n       \\<lbrakk>\\<And>r r'.\n                   \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\n           (r', s');\n                    r \\<in> redexes c1\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c'.\n  \\<Gamma>\\<turnstile> (c1, s) \\<rightarrow> (c', s') \\<and>\n  r' \\<in> redexes c';\n        \\<And>r r'.\n           \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n            r \\<in> redexes c2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'.\n                                \\<Gamma>\\<turnstile> (c2, s) \\<rightarrow>\n               (c', s') \\<and>\n                                r' \\<in> redexes c';\n        \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s');\n        r \\<in> redexes (Catch c1 c2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (Catch c1 c2,\n            s) \\<rightarrow>\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "from r"], ["proof (chain)\npicking this:\n  r = Catch c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  r = Catch c\\<^sub>1 c\\<^sub>2 \\<or> r \\<in> redexes c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. r = Catch c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'\n 2. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "assume \"r = Catch c\\<^sub>1 c\\<^sub>2\""], ["proof (state)\nthis:\n  r = Catch c\\<^sub>1 c\\<^sub>2\n\ngoal (2 subgoals):\n 1. r = Catch c\\<^sub>1 c\\<^sub>2 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'\n 2. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "with step_r"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r = Catch c\\<^sub>1 c\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r = Catch c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "by (auto simp add: root_in_redexes)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "assume r: \"r \\<in> redexes c\\<^sub>1\""], ["proof (state)\nthis:\n  r \\<in> redexes c\\<^sub>1\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "from Catch.hyps (1) [OF step_r this]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'", "obtain c' where\n      step_c\\<^sub>1: \"\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s')\" and\n      r': \"r' \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s');\n         r' \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c', s')\n  r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "from step.Catch [OF step_c\\<^sub>1]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c' ?c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow> (Catch c' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c' ?c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                         (Catch c' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. r \\<in> redexes c\\<^sub>1 \\<Longrightarrow>\n    \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "with r'"], ["proof (chain)\npicking this:\n  r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c' c\\<^sub>2, s')", "show ?case"], ["proof (prove)\nusing this:\n  r' \\<in> redexes c'\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                            (c', s') \\<and>\n       r' \\<in> redexes c'", "by auto"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                          (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_redexes:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. r \\<in> redexes c \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s') \\<and> r' \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       r \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          r' \\<in> redexes c'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       r \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          r' \\<in> redexes c'", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       r' \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          r' \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case Refl"], ["proof (state)\nthis:\n  r' \\<in> redexes c\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       r' \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          r' \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "then"], ["proof (chain)\npicking this:\n  r' \\<in> redexes c", "show \"\\<exists>c'. \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and> r' \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  r' \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       r' \\<in> redexes c'", "by auto"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "case (Trans r s r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  \\<Gamma>\\<turnstile> (r'', s'') \\<rightarrow>\\<^sup>* (r', s')\n  r'' \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s'') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     r' \\<in> redexes c'\n  r \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\" \"r \\<in> redexes c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'') &&&\n    r \\<in> redexes c", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  r \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "from step_redexes [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'') \\<and>\n     r'' \\<in> redexes c'", "obtain c' where\n    step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\" and\n    r'': \"r'' \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'') \\<and>\n     r'' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'');\n         r'' \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n  r'' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "from Trans.hyps (3) [OF r'']"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'a, s') \\<and>\n     r' \\<in> redexes c'a", "obtain c'' where\n    steps: \"\\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\" and\n    r': \"r' \\<in> redexes c''\""], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'a, s') \\<and>\n     r' \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>*\n(c'', s');\n         r' \\<in> redexes c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\n  r' \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "note steps"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           aa \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              r' \\<in> redexes c';\n        a \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            r' \\<in> redexes c'", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       r' \\<in> redexes c'", "using r'"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')\n  r' \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       r' \\<in> redexes c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     r' \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_redexes':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. r \\<in> redexes c \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s') \\<and> r' \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       r \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n          r' \\<in> redexes c'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       r \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n          r' \\<in> redexes c'", "proof (induct rule: tranclp_induct2 [consumes 1, case_names Step Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            a \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "case (Step r' s' c')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            a \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\" \"r \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s') &&&\n    r \\<in> redexes c'", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  r \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            a \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "from step_redexes [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow> (c'a, s') \\<and>\n     r' \\<in> redexes c'a", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow> (c'a, s') \\<and>\n     r' \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. \\<exists>c'a.\n       \\<Gamma>\\<turnstile> (c', s) \\<rightarrow>\\<^sup>+ (c'a, s') \\<and>\n       r' \\<in> redexes c'a", "by (blast intro: r_into_trancl)"], ["proof (state)\nthis:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow>\\<^sup>+ (c'a, s') \\<and>\n     r' \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "case (Trans r' s' r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  r \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     r' \\<in> redexes c'\n  r \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "from Trans"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  r \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     r' \\<in> redexes c'\n  r \\<in> redexes c", "obtain c' where\n    steps: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\" and\n    r': \"r' \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  r \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     r' \\<in> redexes c'\n  r \\<in> redexes c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s');\n         r' \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n  r' \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "note steps"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "from step_redexes [OF this r']"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'a, s'') \\<and>\n     r'' \\<in> redexes c'a", "obtain c'' where\n    step: \"\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\" and\n    r'': \"r'' \\<in> redexes c''\""], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'a, s'') \\<and>\n     r'' \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'');\n         r'' \\<in> redexes c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  r'' \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           r \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              a \\<in> redexes c';\n        r \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            aa \\<in> redexes c'", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n       r'' \\<in> redexes c'", "using r''"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')\n  r'' \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n       r'' \\<in> redexes c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n     r'' \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_redexes_Seq:\n  assumes step: \"\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s')\"\n  assumes Seq: \"Seq r c\\<^sub>2 \\<in> redexes c\"\n  shows \"\\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s') \\<and> Seq r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "from step.Seq [OF step]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Seq r ?c\\<^sub>2, s) \\<rightarrow>\n                       (Seq r' ?c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile> (Seq r c\\<^sub>2, s) \\<rightarrow> (Seq r' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Seq r ?c\\<^sub>2, s) \\<rightarrow>\n                       (Seq r' ?c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq r c\\<^sub>2, s) \\<rightarrow>\n                         (Seq r' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq r c\\<^sub>2, s) \\<rightarrow>\n                       (Seq r' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "from step_redexes [OF this Seq]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "."], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_redexes_Seq:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n              \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s') \\<and> Seq r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Seq r' c\\<^sub>2 \\<in> redexes c'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Seq r' c\\<^sub>2 \\<in> redexes c'", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       Seq r' c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Seq r' c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "case Refl"], ["proof (state)\nthis:\n  Seq r' c\\<^sub>2 \\<in> redexes c\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       Seq r' c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Seq r' c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "then"], ["proof (chain)\npicking this:\n  Seq r' c\\<^sub>2 \\<in> redexes c", "show ?case"], ["proof (prove)\nusing this:\n  Seq r' c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "by (auto)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "case (Trans r s r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  \\<Gamma>\\<turnstile> (r'', s'') \\<rightarrow>\\<^sup>* (r', s')\n  Seq r'' c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s'') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n  Seq r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\" \"Seq r c\\<^sub>2 \\<in> redexes c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'') &&&\n    Seq r c\\<^sub>2 \\<in> redexes c", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  Seq r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "from step_redexes_Seq [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'') \\<and>\n     Seq r'' c\\<^sub>2 \\<in> redexes c'", "obtain c' where\n    step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\" and\n    r'': \"Seq r'' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'') \\<and>\n     Seq r'' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'');\n         Seq r'' c\\<^sub>2 \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n  Seq r'' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "from Trans.hyps (3) [OF r'']"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'a, s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'a", "obtain c'' where\n    steps: \"\\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\" and\n    r': \"Seq r' c\\<^sub>2 \\<in> redexes c''\""], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'a, s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>*\n(c'', s');\n         Seq r' c\\<^sub>2 \\<in> redexes c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\n  Seq r' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "note steps"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Seq aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Seq r' c\\<^sub>2 \\<in> redexes c';\n        Seq a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Seq r' c\\<^sub>2 \\<in> redexes c'", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "using r'"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')\n  Seq r' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_redexes_Seq':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. Seq r c\\<^sub>2 \\<in> redexes c\n             \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s') \\<and> Seq r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n          Seq r' c\\<^sub>2 \\<in> redexes c'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n          Seq r' c\\<^sub>2 \\<in> redexes c'", "proof (induct rule: tranclp_induct2 [consumes 1, case_names Step Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            Seq a c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "case (Step r' s' c')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  Seq r c\\<^sub>2 \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            Seq a c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\" \"Seq r c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s') &&&\n    Seq r c\\<^sub>2 \\<in> redexes c'", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  Seq r c\\<^sub>2 \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            Seq a c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "from step_redexes_Seq [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow> (c'a, s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'a", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow> (c'a, s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. \\<exists>c'a.\n       \\<Gamma>\\<turnstile> (c', s) \\<rightarrow>\\<^sup>+ (c'a, s') \\<and>\n       Seq r' c\\<^sub>2 \\<in> redexes c'a", "by (blast intro: r_into_trancl)"], ["proof (state)\nthis:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow>\\<^sup>+ (c'a, s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "case (Trans r' s' r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  Seq r c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n  Seq r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "from Trans"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  Seq r c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n  Seq r c\\<^sub>2 \\<in> redexes c", "obtain c' where\n    steps: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\" and\n    r': \"Seq r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  Seq r c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     Seq r' c\\<^sub>2 \\<in> redexes c'\n  Seq r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s');\n         Seq r' c\\<^sub>2 \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n  Seq r' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "note steps"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "from step_redexes_Seq [OF this r']"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'a, s'') \\<and>\n     Seq r'' c\\<^sub>2 \\<in> redexes c'a", "obtain c'' where\n    step: \"\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\" and\n    r'': \"Seq r'' c\\<^sub>2 \\<in> redexes c''\""], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'a, s'') \\<and>\n     Seq r'' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'');\n         Seq r'' c\\<^sub>2 \\<in> redexes c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  Seq r'' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Seq r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Seq a c\\<^sub>2 \\<in> redexes c';\n        Seq r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Seq aa c\\<^sub>2 \\<in> redexes c'", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n       Seq r'' c\\<^sub>2 \\<in> redexes c'", "using r''"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')\n  Seq r'' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n       Seq r'' c\\<^sub>2 \\<in> redexes c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n     Seq r'' c\\<^sub>2 \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_redexes_Catch:\n  assumes step: \"\\<Gamma>\\<turnstile>(r,s) \\<rightarrow> (r',s')\"\n  assumes Catch: \"Catch r c\\<^sub>2 \\<in> redexes c\"\n  shows \"\\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow> (c',s') \\<and> Catch r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "from step.Catch [OF step]"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (Catch r ?c\\<^sub>2, s) \\<rightarrow>\n                       (Catch r' ?c\\<^sub>2, s')", "have \"\\<Gamma>\\<turnstile> (Catch r c\\<^sub>2, s) \\<rightarrow> (Catch r' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (Catch r ?c\\<^sub>2, s) \\<rightarrow>\n                       (Catch r' ?c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch r c\\<^sub>2, s) \\<rightarrow>\n                         (Catch r' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch r c\\<^sub>2, s) \\<rightarrow>\n                       (Catch r' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "from step_redexes [OF this Catch]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "."], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_redexes_Catch:\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\"\n  shows \"\\<And>c. Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n              \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>* (c',s') \\<and> Catch r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Catch r' c\\<^sub>2 \\<in> redexes c'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>* (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Catch r' c\\<^sub>2 \\<in> redexes c'", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       Catch r' c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Catch r' c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "case Refl"], ["proof (state)\nthis:\n  Catch r' c\\<^sub>2 \\<in> redexes c\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       Catch r' c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n          Catch r' c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "then"], ["proof (chain)\npicking this:\n  Catch r' c\\<^sub>2 \\<in> redexes c", "show ?case"], ["proof (prove)\nusing this:\n  Catch r' c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "by (auto)"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "case (Trans r s r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  \\<Gamma>\\<turnstile> (r'', s'') \\<rightarrow>\\<^sup>* (r', s')\n  Catch r'' c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s'') \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n  Catch r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\" \"Catch r c\\<^sub>2 \\<in> redexes c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'') &&&\n    Catch r c\\<^sub>2 \\<in> redexes c", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r'', s'')\n  Catch r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "from step_redexes_Catch [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'') \\<and>\n     Catch r'' c\\<^sub>2 \\<in> redexes c'", "obtain c' where\n    step: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\" and\n    r'': \"Catch r'' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'') \\<and>\n     Catch r'' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'');\n         Catch r'' c\\<^sub>2 \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n  Catch r'' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "from Trans.hyps (3) [OF r'']"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'a, s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'a", "obtain c'' where\n    steps: \"\\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\" and\n    r': \"Catch r' c\\<^sub>2 \\<in> redexes c''\""], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'a, s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>*\n(c'', s');\n         Catch r' c\\<^sub>2 \\<in> redexes c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\n  Catch r' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "note steps"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s'') \\<rightarrow>\\<^sup>* (c'', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma>\\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (r', s');\n        \\<And>c.\n           Catch aa c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, ba) \\<rightarrow>\\<^sup>*\n                                   (c', s') \\<and>\n              Catch r' c\\<^sub>2 \\<in> redexes c';\n        Catch a c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            b) \\<rightarrow>\\<^sup>*\n           (c', s') \\<and>\n                            Catch r' c\\<^sub>2 \\<in> redexes c'", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "using r'"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c'', s')\n  Catch r' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_redexes_Catch':\n  assumes steps: \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\"\n  shows \"\\<And>c. Catch r c\\<^sub>2 \\<in> redexes c\n             \\<Longrightarrow> \\<exists>c'. \\<Gamma>\\<turnstile>(c,s) \\<rightarrow>\\<^sup>+ (c',s') \\<and> Catch r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n          Catch r' c\\<^sub>2 \\<in> redexes c'", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n       \\<exists>c'.\n          \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n          Catch r' c\\<^sub>2 \\<in> redexes c'", "proof (induct rule: tranclp_induct2 [consumes 1, case_names Step Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            Catch a c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "case (Step r' s' c')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  Catch r c\\<^sub>2 \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            Catch a c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\" \"Catch r c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s') &&&\n    Catch r c\\<^sub>2 \\<in> redexes c'", "by fact+"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (r', s')\n  Catch r c\\<^sub>2 \\<in> redexes c'\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow> (a, b);\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', b) \\<and>\n                            Catch a c\\<^sub>2 \\<in> redexes c'\n 2. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "from step_redexes_Catch [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow> (c'a, s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'a", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow> (c'a, s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. \\<exists>c'a.\n       \\<Gamma>\\<turnstile> (c', s) \\<rightarrow>\\<^sup>+ (c'a, s') \\<and>\n       Catch r' c\\<^sub>2 \\<in> redexes c'a", "by (blast intro: r_into_trancl)"], ["proof (state)\nthis:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s) \\<rightarrow>\\<^sup>+ (c'a, s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "case (Trans r' s' r'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  Catch r c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n  Catch r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "from Trans"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  Catch r c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n  Catch r c\\<^sub>2 \\<in> redexes c", "obtain c' where\n    steps: \"\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\" and\n    r': \"Catch r' c\\<^sub>2 \\<in> redexes c'\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (r', s')\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n  Catch r c\\<^sub>2 \\<in> redexes ?c \\<Longrightarrow>\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (?c, s) \\<rightarrow>\\<^sup>+ (c', s') \\<and>\n     Catch r' c\\<^sub>2 \\<in> redexes c'\n  Catch r c\\<^sub>2 \\<in> redexes c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s');\n         Catch r' c\\<^sub>2 \\<in> redexes c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n  Catch r' c\\<^sub>2 \\<in> redexes c'\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "note steps"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "moreover"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "have \"\\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (r', s') \\<rightarrow> (r'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "from step_redexes_Catch [OF this r']"], ["proof (chain)\npicking this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'a, s'') \\<and>\n     Catch r'' c\\<^sub>2 \\<in> redexes c'a", "obtain c'' where\n    step: \"\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\" and\n    r'': \"Catch r'' c\\<^sub>2 \\<in> redexes c''\""], ["proof (prove)\nusing this:\n  \\<exists>c'a.\n     \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'a, s'') \\<and>\n     Catch r'' c\\<^sub>2 \\<in> redexes c'a\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>\\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'');\n         Catch r'' c\\<^sub>2 \\<in> redexes c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n  Catch r'' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "note step"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c', s') \\<rightarrow> (c'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba c.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (r, s) \\<rightarrow>\\<^sup>+ (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<And>c.\n           Catch r c\\<^sub>2 \\<in> redexes c \\<Longrightarrow>\n           \\<exists>c'.\n              \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+\n                                   (c', b) \\<and>\n              Catch a c\\<^sub>2 \\<in> redexes c';\n        Catch r c\\<^sub>2 \\<in> redexes c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            \\<Gamma>\\<turnstile> (c,\n            s) \\<rightarrow>\\<^sup>+\n           (c', ba) \\<and>\n                            Catch aa c\\<^sub>2 \\<in> redexes c'", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n       Catch r'' c\\<^sub>2 \\<in> redexes c'", "using r''"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c'', s'')\n  Catch r'' c\\<^sub>2 \\<in> redexes c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n       Catch r'' c\\<^sub>2 \\<in> redexes c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'.\n     \\<Gamma>\\<turnstile> (c, s) \\<rightarrow>\\<^sup>+ (c', s'') \\<and>\n     Catch r'' c\\<^sub>2 \\<in> redexes c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma redexes_subset:\"\\<And>c'. c' \\<in> redexes c \\<Longrightarrow> redexes c' \\<subseteq> redexes c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       c' \\<in> redexes c \\<Longrightarrow> redexes c' \\<subseteq> redexes c", "by (induct c) auto"], ["", "lemma redexes_preserves_termination:\n  assumes termi: \"\\<Gamma>\\<turnstile>c\\<down>s\"\n  shows \"\\<And>c'. c' \\<in> redexes c \\<Longrightarrow> \\<Gamma>\\<turnstile>c'\\<down>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       c' \\<in> redexes c \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s", "using termi"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile>c \\<down> s\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       c' \\<in> redexes c \\<Longrightarrow> \\<Gamma>\\<turnstile>c' \\<down> s", "by induct (auto intro: terminates.intros)"], ["", "end"]]}