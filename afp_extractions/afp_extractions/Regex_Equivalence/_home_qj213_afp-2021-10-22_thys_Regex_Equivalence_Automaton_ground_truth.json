{"file_name": "/home/qj213/afp-2021-10-22/thys/Regex_Equivalence/Automaton.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Regex_Equivalence", "problem_names": ["lemma set_add_atoms: \"set (add_atoms r as) = atoms r \\<union> set as\"", "lemma rtrancl_fold_product:\nshows \"{((r,s),(f a r,f a s))| r s a. a : A}^* =\n       {((r,s),(fold f w r,fold f w s))| r s w. w : lists A}\" (is \"?L = ?R\")", "lemma rtrancl_fold_product1:\nshows \"{(r,s). \\<exists>a \\<in> A. s = f a r}^* =\n       {(r,fold f w r) | r w. w : lists A}\" (is \"?L = ?R\")", "lemma lang_eq_ext_Nil_fold_Deriv:\n  fixes r s\n  defines \"\\<BB> \\<equiv> {(fold Deriv w (lang r), fold Deriv w (lang s))| w. w\\<in>lists (atoms r \\<union> atoms s)}\"\n  shows \"lang r = lang s \\<longleftrightarrow> (\\<forall>(K, L) \\<in> \\<BB>. [] \\<in> K \\<longleftrightarrow> [] \\<in> L)\"", "lemma L_deltas: \"L (fold delta w s) = fold Deriv w (L s)\"", "theorem closure_sound_complete:\nassumes result: \"closure as (init r,init s) = Some(ws,R)\"\nand atoms: \"set as = atoms r \\<union> atoms s\"\nshows \"ws = [] \\<longleftrightarrow> lang r = lang s\"", "lemma soundness: \nassumes \"check_eqv r s\" shows \"lang r = lang s\"", "lemma match_correct: \"match s w \\<longleftrightarrow> w \\<in> lang s\"", "lemma finite_rtrancl_delta_Image:\n  \"finite ({((r,s),(delta a r,delta a s))| r s a. a : A}^* `` {(init r, init s)})\"", "lemma \"termination\": \"\\<exists>st. closure as (init r,init s) = Some st\" (is \"\\<exists>_. closure as ?i = _\")", "lemma completeness: \nassumes \"lang r = lang s\" shows \"check_eqv r s\"", "lemma finite_rtrancl_delta_Image1:\n  \"finite ({(r,s). \\<exists>a \\<in> A. s = delta a r}^* `` {init r})\"", "lemma reachable: \"reachable as r = {fold delta w (init r) | w. w \\<in> lists (set as)}\"\n  and finite_reachable: \"finite (reachable as r)\""], "translations": [["", "lemma set_add_atoms: \"set (add_atoms r as) = atoms r \\<union> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (add_atoms r as) = atoms r \\<union> set as", "by (induction r arbitrary: as) auto"], ["", "lemma rtrancl_fold_product:\nshows \"{((r,s),(f a r,f a s))| r s a. a : A}^* =\n       {((r,s),(fold f w r,fold f w s))| r s w. w : lists A}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "fix r s r' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "have \"((r,s),(r',s')) : ?L \\<Longrightarrow> ((r,s),(r',s')) : ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((r, s), r', s')\n    \\<in> {((r, s), f a r, f a s) |r s a.\n           a \\<in> A}\\<^sup>* \\<Longrightarrow>\n    ((r, s), r', s')\n    \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "proof(induction rule: converse_rtrancl_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((r', s'), r', s')\n    \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n 2. \\<And>a b aa ba.\n       \\<lbrakk>((a, b), aa, ba)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A};\n        ((aa, ba), r', s')\n        \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        ((aa, ba), r', s')\n        \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n               w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> ((a, b), r', s')\n                         \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n                                w \\<in> lists A}", "case refl"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. ((r', s'), r', s')\n    \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n 2. \\<And>a b aa ba.\n       \\<lbrakk>((a, b), aa, ba)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A};\n        ((aa, ba), r', s')\n        \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        ((aa, ba), r', s')\n        \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n               w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> ((a, b), r', s')\n                         \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n                                w \\<in> lists A}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((r', s'), r', s')\n    \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "by(force intro!: fold_simps(1)[symmetric])"], ["proof (state)\nthis:\n  ((r', s'), r', s')\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>((a, b), aa, ba)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A};\n        ((aa, ba), r', s')\n        \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        ((aa, ba), r', s')\n        \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n               w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> ((a, b), r', s')\n                         \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n                                w \\<in> lists A}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>((a, b), aa, ba)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A};\n        ((aa, ba), r', s')\n        \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        ((aa, ba), r', s')\n        \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n               w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> ((a, b), r', s')\n                         \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n                                w \\<in> lists A}", "case step"], ["proof (state)\nthis:\n  ((a___, b___), a_, b_) \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\n  ((a_, b_), r', s')\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n  ((a_, b_), r', s')\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>((a, b), aa, ba)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A};\n        ((aa, ba), r', s')\n        \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        ((aa, ba), r', s')\n        \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n               w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> ((a, b), r', s')\n                         \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n                                w \\<in> lists A}", "thus ?case"], ["proof (prove)\nusing this:\n  ((a___, b___), a_, b_) \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\n  ((a_, b_), r', s')\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n  ((a_, b_), r', s')\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. ((a___, b___), r', s')\n    \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "by(force intro!: fold_simps(2)[symmetric])"], ["proof (state)\nthis:\n  ((a___, b___), r', s')\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((r, s), r', s')\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* \\<Longrightarrow>\n  ((r, s), r', s')\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "}"], ["proof (state)\nthis:\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "moreover"], ["proof (state)\nthis:\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "{"], ["proof (state)\nthis:\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "fix r s r' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "have \"\\<forall>x\\<in>set w. x \\<in> A \\<Longrightarrow> ((r, s), fold f w r, fold f w s) :?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x \\<in> A \\<Longrightarrow>\n    ((r, s), fold f w r, fold f w s)\n    \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*", "proof(induction w rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set []. x \\<in> A \\<Longrightarrow>\n    ((r, s), fold f [] r, fold f [] s)\n    \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n 2. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                ((r, s), fold f xs r, fold f xs s)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((r, s), fold f (xs @ [x]) r, fold f (xs @ [x]) s)\n                         \\<in> {((r, s), f a r, f a s) |r s a.\n                                a \\<in> A}\\<^sup>*", "case Nil"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set []. x \\<in> A\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set []. x \\<in> A \\<Longrightarrow>\n    ((r, s), fold f [] r, fold f [] s)\n    \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n 2. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                ((r, s), fold f xs r, fold f xs s)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((r, s), fold f (xs @ [x]) r, fold f (xs @ [x]) s)\n                         \\<in> {((r, s), f a r, f a s) |r s a.\n                                a \\<in> A}\\<^sup>*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((r, s), fold f [] r, fold f [] s)\n    \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  ((r, s), fold f [] r, fold f [] s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                ((r, s), fold f xs r, fold f xs s)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((r, s), fold f (xs @ [x]) r, fold f (xs @ [x]) s)\n                         \\<in> {((r, s), f a r, f a s) |r s a.\n                                a \\<in> A}\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                ((r, s), fold f xs r, fold f xs s)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((r, s), fold f (xs @ [x]) r, fold f (xs @ [x]) s)\n                         \\<in> {((r, s), f a r, f a s) |r s a.\n                                a \\<in> A}\\<^sup>*", "case snoc"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set xs_. x \\<in> A \\<Longrightarrow>\n  ((r, s), fold f xs_ r, fold f xs_ s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n  \\<forall>x\\<in>set (xs_ @ [x_]). x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                ((r, s), fold f xs r, fold f xs s)\n                \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ((r, s), fold f (xs @ [x]) r, fold f (xs @ [x]) s)\n                         \\<in> {((r, s), f a r, f a s) |r s a.\n                                a \\<in> A}\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs_. x \\<in> A \\<Longrightarrow>\n  ((r, s), fold f xs_ r, fold f xs_ s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n  \\<forall>x\\<in>set (xs_ @ [x_]). x \\<in> A\n\ngoal (1 subgoal):\n 1. ((r, s), fold f (xs_ @ [x_]) r, fold f (xs_ @ [x_]) s)\n    \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*", "by (auto elim!: rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  ((r, s), fold f (xs_ @ [x_]) r, fold f (xs_ @ [x_]) s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. x \\<in> A \\<Longrightarrow>\n  ((r, s), fold f w r, fold f w s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "}"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?w2. x \\<in> A \\<Longrightarrow>\n  ((r, s), fold f ?w2 r, fold f ?w2 s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "hence \"((r,s),(r',s')) : ?R \\<Longrightarrow> ((r,s),(r',s')) : ?L\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?w2. x \\<in> A \\<Longrightarrow>\n  ((r, s), fold f ?w2 r, fold f ?w2 s)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. ((r, s), r', s')\n    \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n           w \\<in> lists A} \\<Longrightarrow>\n    ((r, s), r', s')\n    \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  ((r, s), r', s')\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n         w \\<in> lists A} \\<Longrightarrow>\n  ((r, s), r', s') \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "}"], ["proof (state)\nthis:\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n         w \\<in> lists A} \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "ultimately"], ["proof (chain)\npicking this:\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n         w \\<in> lists A} \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), fold f w r, fold f w s) |r s w.\n         w \\<in> lists A} \\<Longrightarrow>\n  ((?r2, ?s2), ?r'2, ?s'2)\n  \\<in> {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n    {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}", "by (auto simp: in_lists_conv_set) blast"], ["proof (state)\nthis:\n  {((r, s), f a r, f a s) |r s a. a \\<in> A}\\<^sup>* =\n  {((r, s), fold f w r, fold f w s) |r s w. w \\<in> lists A}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rtrancl_fold_product1:\nshows \"{(r,s). \\<exists>a \\<in> A. s = f a r}^* =\n       {(r,fold f w r) | r w. w : lists A}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "have \"(r,s) : ?L \\<Longrightarrow> (r,s) : ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r, s)\n    \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n    (r, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "proof(induction rule: converse_rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r};\n        (z, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        (z, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> (y, s)\n                         \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (s, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n 2. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r};\n        (z, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        (z, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> (y, s)\n                         \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "by(force intro!: fold_simps(1)[symmetric])"], ["proof (state)\nthis:\n  (s, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r};\n        (z, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        (z, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> (y, s)\n                         \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r};\n        (z, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        (z, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> (y, s)\n                         \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "case step"], ["proof (state)\nthis:\n  (y_, z_) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\n  (z_, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n  (z_, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(y, z) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r};\n        (z, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        (z, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\\<rbrakk>\n       \\<Longrightarrow> (y, s)\n                         \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "thus ?case"], ["proof (prove)\nusing this:\n  (y_, z_) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\n  (z_, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n  (z_, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. (y_, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}", "by(force intro!: fold_simps(2)[symmetric])"], ["proof (state)\nthis:\n  (y_, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (r, s)\n  \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n  (r, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "}"], ["proof (state)\nthis:\n  (?r2, ?s2)\n  \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "moreover"], ["proof (state)\nthis:\n  (?r2, ?s2)\n  \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "{"], ["proof (state)\nthis:\n  (?r2, ?s2)\n  \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "have \"\\<forall>x\\<in>set w. x \\<in> A \\<Longrightarrow> (r, fold f w r) :?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set w. x \\<in> A \\<Longrightarrow>\n    (r, fold f w r) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "proof(induction w rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set []. x \\<in> A \\<Longrightarrow>\n    (r, fold f [] r) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n 2. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                (r, fold f xs r)\n                \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (r, fold f (xs @ [x]) r)\n                         \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "case Nil"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set []. x \\<in> A\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set []. x \\<in> A \\<Longrightarrow>\n    (r, fold f [] r) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n 2. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                (r, fold f xs r)\n                \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (r, fold f (xs @ [x]) r)\n                         \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r, fold f [] r)\n    \\<in> {a. case a of\n              (r, s) \\<Rightarrow> \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (r, fold f [] r)\n  \\<in> {a. case a of\n            (r, s) \\<Rightarrow> \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                (r, fold f xs r)\n                \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (r, fold f (xs @ [x]) r)\n                         \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                (r, fold f xs r)\n                \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (r, fold f (xs @ [x]) r)\n                         \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "case snoc"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set xs_. x \\<in> A \\<Longrightarrow>\n  (r, fold f xs_ r)\n  \\<in> {a. case a of\n            (r, s) \\<Rightarrow> \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n  \\<forall>x\\<in>set (xs_ @ [x_]). x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<forall>x\\<in>set xs. x \\<in> A \\<Longrightarrow>\n                (r, fold f xs r)\n                \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*;\n        \\<forall>x\\<in>set (xs @ [x]). x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (r, fold f (xs @ [x]) r)\n                         \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs_. x \\<in> A \\<Longrightarrow>\n  (r, fold f xs_ r)\n  \\<in> {a. case a of\n            (r, s) \\<Rightarrow> \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n  \\<forall>x\\<in>set (xs_ @ [x_]). x \\<in> A\n\ngoal (1 subgoal):\n 1. (r, fold f (xs_ @ [x_]) r)\n    \\<in> {a. case a of\n              (r, s) \\<Rightarrow> \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "by (auto elim!: rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  (r, fold f (xs_ @ [x_]) r)\n  \\<in> {a. case a of\n            (r, s) \\<Rightarrow> \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set w. x \\<in> A \\<Longrightarrow>\n  (r, fold f w r) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "}"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set ?w2. x \\<in> A \\<Longrightarrow>\n  (r, fold f ?w2 r) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "hence \"(r,s) : ?R \\<Longrightarrow> (r,s) : ?L\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?w2. x \\<in> A \\<Longrightarrow>\n  (r, fold f ?w2 r) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. (r, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A} \\<Longrightarrow>\n    (r, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (r, s) \\<in> {(r, fold f w r) |r w. w \\<in> lists A} \\<Longrightarrow>\n  (r, s) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "}"], ["proof (state)\nthis:\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A} \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "ultimately"], ["proof (chain)\npicking this:\n  (?r2, ?s2)\n  \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A} \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  (?r2, ?s2)\n  \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A}\n  (?r2, ?s2) \\<in> {(r, fold f w r) |r w. w \\<in> lists A} \\<Longrightarrow>\n  (?r2, ?s2) \\<in> {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>*\n\ngoal (1 subgoal):\n 1. {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n    {(r, fold f w r) |r w. w \\<in> lists A}", "by (auto simp: in_lists_conv_set) blast"], ["proof (state)\nthis:\n  {(r, s). \\<exists>a\\<in>A. s = f a r}\\<^sup>* =\n  {(r, fold f w r) |r w. w \\<in> lists A}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lang_eq_ext_Nil_fold_Deriv:\n  fixes r s\n  defines \"\\<BB> \\<equiv> {(fold Deriv w (lang r), fold Deriv w (lang s))| w. w\\<in>lists (atoms r \\<union> atoms s)}\"\n  shows \"lang r = lang s \\<longleftrightarrow> (\\<forall>(K, L) \\<in> \\<BB>. [] \\<in> K \\<longleftrightarrow> [] \\<in> L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lang r = lang s) =\n    (\\<forall>(K, L)\\<in>\\<BB>. ([] \\<in> K) = ([] \\<in> L))", "unfolding lang_eq_ext \\<BB>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w\\<in>lists (atoms r \\<union> atoms s).\n        (w \\<in> lang r) = (w \\<in> lang s)) =\n    (\\<forall>(K, L)\n              \\<in>{(fold Deriv w (lang r), fold Deriv w (lang s)) |w.\n                    w \\<in> lists (atoms r \\<union> atoms s)}.\n        ([] \\<in> K) = ([] \\<in> L))", "by (subst (1 2) in_fold_Deriv[of \"[]\", simplified, symmetric]) auto"], ["", "locale rexp_DA =\nfixes init :: \"'a rexp \\<Rightarrow> 's\"\nfixes delta :: \"'a \\<Rightarrow> 's \\<Rightarrow> 's\"\nfixes final :: \"'s \\<Rightarrow> bool\"\nfixes L :: \"'s \\<Rightarrow> 'a lang\"\nassumes L_init: \"L (init r) = lang r\"\nassumes L_delta: \"L(delta a s) = Deriv a (L s)\"\nassumes final_iff_Nil: \"final s \\<longleftrightarrow> [] \\<in> L s\"\nbegin"], ["", "lemma L_deltas: \"L (fold delta w s) = fold Deriv w (L s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L (fold delta w s) = fold Deriv w (L s)", "by (induction w arbitrary: s) (auto simp add: L_delta)"], ["", "definition closure :: \"'a list \\<Rightarrow> 's * 's \\<Rightarrow> (('s * 's) list * ('s * 's) set) option\"\nwhere\n\"closure as = rtrancl_while (\\<lambda>(p,q). final p = final q)\n          (\\<lambda>(p,q). map (\\<lambda>a. (delta a p, delta a q)) as)\""], ["", "(* stop when same opti? *)"], ["", "theorem closure_sound_complete:\nassumes result: \"closure as (init r,init s) = Some(ws,R)\"\nand atoms: \"set as = atoms r \\<union> atoms s\"\nshows \"ws = [] \\<longleftrightarrow> lang r = lang s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ws = []) = (lang r = lang s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ws = []) = (lang r = lang s)", "have leq: \"(lang r = lang s) =\n  (\\<forall>(r',s') \\<in> {((r0,s0),(delta a r0,delta a s0))| r0 s0 a. a : set as}^* `` {(init r,init s)}.\n    final r' = final s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lang r = lang s) =\n    (\\<forall>(r', s')\n              \\<in>{((r0, s0), delta a r0, delta a s0) |r0 s0 a.\n                    a \\<in> set as}\\<^sup>* ``\n                   {(init r, init s)}.\n        final r' = final s')", "by (simp add: atoms rtrancl_fold_product Ball_def lang_eq_ext_Nil_fold_Deriv imp_ex\n      L_deltas L_init final_iff_Nil del: Un_iff)"], ["proof (state)\nthis:\n  (lang r = lang s) =\n  (\\<forall>(r', s')\n            \\<in>{((r0, s0), delta a r0, delta a s0) |r0 s0 a.\n                  a \\<in> set as}\\<^sup>* ``\n                 {(init r, init s)}.\n      final r' = final s')\n\ngoal (1 subgoal):\n 1. (ws = []) = (lang r = lang s)", "have \"{(x,y). y \\<in> set ((\\<lambda>(p,q). map (\\<lambda>a. (delta a p, delta a q)) as) x)} =\n    {((r,s), delta a r, delta a s) |r s a. a \\<in> set as}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y).\n     y \\<in> set (case x of\n                  (p, q) \\<Rightarrow>\n                    map (\\<lambda>a. (delta a p, delta a q)) as)} =\n    {((r, s), delta a r, delta a s) |r s a. a \\<in> set as}", "by auto"], ["proof (state)\nthis:\n  {(x, y).\n   y \\<in> set (case x of\n                (p, q) \\<Rightarrow>\n                  map (\\<lambda>a. (delta a p, delta a q)) as)} =\n  {((r, s), delta a r, delta a s) |r s a. a \\<in> set as}\n\ngoal (1 subgoal):\n 1. (ws = []) = (lang r = lang s)", "with atoms rtrancl_while_Some[OF result[unfolded closure_def]]"], ["proof (chain)\npicking this:\n  set as = atoms r \\<union> atoms s\n  if ws = []\n  then R =\n       {(x, y).\n        y \\<in> set (case x of\n                     (p, q) \\<Rightarrow>\n                       map (\\<lambda>a. (delta a p, delta a q))\n                        as)}\\<^sup>* ``\n       {(init r, init s)} \\<and>\n       (\\<forall>z\\<in>R. case z of (p, q) \\<Rightarrow> final p = final q)\n  else \\<not> (case hd ws of (p, q) \\<Rightarrow> final p = final q) \\<and>\n       hd ws\n       \\<in> {(x, y).\n              y \\<in> set (case x of\n                           (p, q) \\<Rightarrow>\n                             map (\\<lambda>a. (delta a p, delta a q))\n                              as)}\\<^sup>* ``\n             {(init r, init s)}\n  {(x, y).\n   y \\<in> set (case x of\n                (p, q) \\<Rightarrow>\n                  map (\\<lambda>a. (delta a p, delta a q)) as)} =\n  {((r, s), delta a r, delta a s) |r s a. a \\<in> set as}", "show ?thesis"], ["proof (prove)\nusing this:\n  set as = atoms r \\<union> atoms s\n  if ws = []\n  then R =\n       {(x, y).\n        y \\<in> set (case x of\n                     (p, q) \\<Rightarrow>\n                       map (\\<lambda>a. (delta a p, delta a q))\n                        as)}\\<^sup>* ``\n       {(init r, init s)} \\<and>\n       (\\<forall>z\\<in>R. case z of (p, q) \\<Rightarrow> final p = final q)\n  else \\<not> (case hd ws of (p, q) \\<Rightarrow> final p = final q) \\<and>\n       hd ws\n       \\<in> {(x, y).\n              y \\<in> set (case x of\n                           (p, q) \\<Rightarrow>\n                             map (\\<lambda>a. (delta a p, delta a q))\n                              as)}\\<^sup>* ``\n             {(init r, init s)}\n  {(x, y).\n   y \\<in> set (case x of\n                (p, q) \\<Rightarrow>\n                  map (\\<lambda>a. (delta a p, delta a q)) as)} =\n  {((r, s), delta a r, delta a s) |r s a. a \\<in> set as}\n\ngoal (1 subgoal):\n 1. (ws = []) = (lang r = lang s)", "by (auto simp add: leq Ball_def split: if_splits)"], ["proof (state)\nthis:\n  (ws = []) = (lang r = lang s)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The overall procedure\\<close>"], ["", "definition check_eqv :: \"'a rexp \\<Rightarrow> 'a rexp \\<Rightarrow> bool\" where\n\"check_eqv r s =\n  (let as = add_atoms r (add_atoms s [])\n   in case closure as (init r, init s) of\n     Some([],_) \\<Rightarrow> True | _ \\<Rightarrow> False)\""], ["", "lemma soundness: \nassumes \"check_eqv r s\" shows \"lang r = lang s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lang r = lang s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lang r = lang s", "let ?as = \"add_atoms r (add_atoms s [])\""], ["proof (state)\ngoal (1 subgoal):\n 1. lang r = lang s", "obtain R where 1: \"closure ?as (init r, init s) = Some([],R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>R.\n        closure (add_atoms r (add_atoms s [])) (init r, init s) =\n        Some ([], R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  check_eqv r s\n\ngoal (1 subgoal):\n 1. (\\<And>R.\n        closure (add_atoms r (add_atoms s [])) (init r, init s) =\n        Some ([], R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: check_eqv_def Let_def split:option.splits list.splits)"], ["proof (state)\nthis:\n  closure (add_atoms r (add_atoms s [])) (init r, init s) = Some ([], R)\n\ngoal (1 subgoal):\n 1. lang r = lang s", "from closure_sound_complete[OF this]"], ["proof (chain)\npicking this:\n  set (add_atoms r (add_atoms s [])) =\n  atoms r \\<union> atoms s \\<Longrightarrow>\n  ([] = []) = (lang r = lang s)", "show \"lang r = lang s\""], ["proof (prove)\nusing this:\n  set (add_atoms r (add_atoms s [])) =\n  atoms r \\<union> atoms s \\<Longrightarrow>\n  ([] = []) = (lang r = lang s)\n\ngoal (1 subgoal):\n 1. lang r = lang s", "by (simp add: set_add_atoms)"], ["proof (state)\nthis:\n  lang r = lang s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* completeness needs termination of closure, otherwise result could be None *)"], ["", "text\\<open>Auxiliary functions:\\<close>"], ["", "definition reachable :: \"'a list \\<Rightarrow> 'a rexp \\<Rightarrow> 's set\" where\n\"reachable as s =\n  snd(the(rtrancl_while (\\<lambda>_. True) (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init s)))\""], ["", "definition automaton :: \"'a list \\<Rightarrow> 'a rexp \\<Rightarrow> (('s * 'a) * 's) set\" where\n\"automaton as s =\n  snd (the\n  (let i = init s;\n       start = (([i], {i}), {});\n       test = \\<lambda>((ws, Z), A). ws \\<noteq> [];\n       step = \\<lambda>((ws, Z), A).\n         (let s = hd ws;\n              new_edges = map (\\<lambda>a. ((s, a), delta a s)) as;\n              new = remdups (filter (\\<lambda>ss. ss \\<notin> Z) (map snd new_edges))\n         in ((new @ tl ws, set new \\<union> Z), set new_edges \\<union> A))\n  in while_option test step start))\""], ["", "definition match :: \"'a rexp \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n\"match s w = final (fold delta w (init s))\""], ["", "lemma match_correct: \"match s w \\<longleftrightarrow> w \\<in> lang s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match s w = (w \\<in> lang s)", "unfolding match_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. final (fold delta w (init s)) = (w \\<in> lang s)", "by (induct w arbitrary: s)\n    (auto simp: L_init L_delta in_fold_Deriv final_iff_Nil L_deltas Deriv_def)"], ["", "end"], ["", "locale rexp_DFA = rexp_DA +\nassumes fin: \"finite {fold delta w (init s) | w. True}\"\nbegin"], ["", "lemma finite_rtrancl_delta_Image:\n  \"finite ({((r,s),(delta a r,delta a s))| r s a. a : A}^* `` {(init r, init s)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({((r, s), delta a r, delta a s) |r s a. a \\<in> A}\\<^sup>* ``\n      {(init r, init s)})", "unfolding rtrancl_fold_product Image_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {b. ((init r, init s), b)\n         \\<in> {((r, s), fold delta w r, fold delta w s) |r s w.\n                w \\<in> lists A}}", "by (auto intro: finite_subset[OF _ finite_cartesian_product[OF fin fin]])"], ["", "lemma \"termination\": \"\\<exists>st. closure as (init r,init s) = Some st\" (is \"\\<exists>_. closure as ?i = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>st. closure as (init r, init s) = Some st", "unfolding closure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>st.\n       rtrancl_while (\\<lambda>(p, q). final p = final q)\n        (\\<lambda>(p, q). map (\\<lambda>a. (delta a p, delta a q)) as)\n        (init r, init s) =\n       Some st", "proof (rule rtrancl_while_finite_Some)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     ({(x, st).\n       st \\<in> set (case x of\n                     (p, q) \\<Rightarrow>\n                       map (\\<lambda>a. (delta a p, delta a q))\n                        as)}\\<^sup>* ``\n      {(init r, init s)})", "show \"finite ({(x, st). st \\<in> set ((\\<lambda>(p,q). map (\\<lambda>a. (delta a p, delta a q)) as) x)}\\<^sup>* `` {?i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({(x, st).\n       st \\<in> set (case x of\n                     (p, q) \\<Rightarrow>\n                       map (\\<lambda>a. (delta a p, delta a q))\n                        as)}\\<^sup>* ``\n      {(init r, init s)})", "by (rule finite_subset[OF Image_mono[OF rtrancl_mono] finite_rtrancl_delta_Image]) auto"], ["proof (state)\nthis:\n  finite\n   ({(x, st).\n     st \\<in> set (case x of\n                   (p, q) \\<Rightarrow>\n                     map (\\<lambda>a. (delta a p, delta a q))\n                      as)}\\<^sup>* ``\n    {(init r, init s)})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completeness: \nassumes \"lang r = lang s\" shows \"check_eqv r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_eqv r s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. check_eqv r s", "let ?as = \"add_atoms r (add_atoms s [])\""], ["proof (state)\ngoal (1 subgoal):\n 1. check_eqv r s", "obtain ws R where 1: \"closure ?as (init r, init s) = Some(ws,R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ws R.\n        closure (add_atoms r (add_atoms s [])) (init r, init s) =\n        Some (ws, R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \"termination\""], ["proof (prove)\nusing this:\n  \\<exists>st. closure ?as (init ?r, init ?s) = Some st\n\ngoal (1 subgoal):\n 1. (\\<And>ws R.\n        closure (add_atoms r (add_atoms s [])) (init r, init s) =\n        Some (ws, R) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  closure (add_atoms r (add_atoms s [])) (init r, init s) = Some (ws, R)\n\ngoal (1 subgoal):\n 1. check_eqv r s", "with closure_sound_complete[OF this] assms"], ["proof (chain)\npicking this:\n  set (add_atoms r (add_atoms s [])) =\n  atoms r \\<union> atoms s \\<Longrightarrow>\n  (ws = []) = (lang r = lang s)\n  lang r = lang s\n  closure (add_atoms r (add_atoms s [])) (init r, init s) = Some (ws, R)", "show \"check_eqv r s\""], ["proof (prove)\nusing this:\n  set (add_atoms r (add_atoms s [])) =\n  atoms r \\<union> atoms s \\<Longrightarrow>\n  (ws = []) = (lang r = lang s)\n  lang r = lang s\n  closure (add_atoms r (add_atoms s [])) (init r, init s) = Some (ws, R)\n\ngoal (1 subgoal):\n 1. check_eqv r s", "by (simp add: check_eqv_def set_add_atoms)"], ["proof (state)\nthis:\n  check_eqv r s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_rtrancl_delta_Image1:\n  \"finite ({(r,s). \\<exists>a \\<in> A. s = delta a r}^* `` {init r})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({(r, s). \\<exists>a\\<in>A. s = delta a r}\\<^sup>* `` {init r})", "unfolding rtrancl_fold_product1"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({(r, fold delta w r) |r w. w \\<in> lists A} `` {init r})", "by (auto intro: finite_subset[OF _ fin])"], ["", "lemma reachable: \"reachable as r = {fold delta w (init r) | w. w \\<in> lists (set as)}\"\n  and finite_reachable: \"finite (reachable as r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)} &&&\n    finite (reachable as r)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)}\n 2. finite (reachable as r)", "obtain wsZ where *: \"rtrancl_while (\\<lambda>_. True) (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r) = Some wsZ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>wsZ.\n        rtrancl_while (\\<lambda>_. True)\n         (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r) =\n        Some wsZ \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (atomize_elim,intro rtrancl_while_finite_Some Image_mono rtrancl_mono\n      finite_subset[OF _ finite_rtrancl_delta_Image1[of \"set as\" r]]) auto"], ["proof (state)\nthis:\n  rtrancl_while (\\<lambda>_. True)\n   (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r) =\n  Some wsZ\n\ngoal (2 subgoals):\n 1. reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)}\n 2. finite (reachable as r)", "then"], ["proof (chain)\npicking this:\n  rtrancl_while (\\<lambda>_. True)\n   (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r) =\n  Some wsZ", "show \"reachable as r = {fold delta w (init r) | w. w \\<in> lists (set as)}\""], ["proof (prove)\nusing this:\n  rtrancl_while (\\<lambda>_. True)\n   (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r) =\n  Some wsZ\n\ngoal (1 subgoal):\n 1. reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)}", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  rtrancl_while (\\<lambda>_. True)\n   (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r) =\n  Some wsZ\n\ngoal (1 subgoal):\n 1. snd (the (rtrancl_while (\\<lambda>_. True)\n               (\\<lambda>s. map (\\<lambda>a. delta a s) as) (init r))) =\n    {fold delta w (init r) |w. w \\<in> lists (set as)}", "by (cases wsZ)\n      (auto dest!: rtrancl_while_Some split: if_splits simp: rtrancl_fold_product1 image_iff)"], ["proof (state)\nthis:\n  reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)}\n\ngoal (1 subgoal):\n 1. finite (reachable as r)", "then"], ["proof (chain)\npicking this:\n  reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)}", "show \"finite (reachable as r)\""], ["proof (prove)\nusing this:\n  reachable as r = {fold delta w (init r) |w. w \\<in> lists (set as)}\n\ngoal (1 subgoal):\n 1. finite (reachable as r)", "by (auto intro: finite_subset[OF _ fin])"], ["proof (state)\nthis:\n  finite (reachable as r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}