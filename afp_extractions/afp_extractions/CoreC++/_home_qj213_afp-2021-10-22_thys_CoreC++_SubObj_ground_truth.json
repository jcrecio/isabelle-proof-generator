{"file_name": "/home/qj213/afp-2021-10-22/thys/CoreC++/SubObj.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CoreC++", "problem_names": ["lemma mdc_tuple [simp]: \"mdc (C,Cs) = C\"", "lemma ldc_tuple [simp]: \"ldc (C,Cs) = last Cs\"", "lemma subobj_aux_rev:\nassumes 1:\"is_subobj P ((C,C'#rev Cs@[C'']))\"\nshows \"is_subobj P ((C,C'#rev Cs))\"", "lemma subobj_aux:\nassumes 1:\"is_subobj P ((C,C'#Cs@[C'']))\"\nshows \"is_subobj P ((C,C'#Cs))\"", "lemma isSubobj_isClass:\nassumes 1:\"is_subobj P (R)\"\nshows \"is_class P (mdc R)\"", "lemma isSubobjs_subclsR_rev:\nassumes 1:\"is_subobj P ((C,Cs@[D,D']@(rev Cs')))\"\nshows \"P \\<turnstile> D \\<prec>\\<^sub>R D'\"", "lemma isSubobjs_subclsR:\nassumes 1:\"is_subobj P ((C,Cs@[D,D']@Cs'))\"\nshows \"P \\<turnstile> D \\<prec>\\<^sub>R D'\"", "lemma mdc_leq_ldc_aux:\nassumes 1:\"is_subobj P ((C,C'#rev Cs'))\"\nshows \"P \\<turnstile> C \\<preceq>\\<^sup>* last (C'#rev Cs')\"", "lemma mdc_leq_ldc:\nassumes 1:\"is_subobj P (R)\"\nshows \"P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R\"", "lemma class_isSubobj:\n  \"is_class P C \\<Longrightarrow> is_subobj P ((C,[C]))\"", "lemma repSubobj_isSubobj:\nassumes 1:\"is_subobj P ((C,Xs@[X]))\" and 2:\"P \\<turnstile> X \\<prec>\\<^sub>R Y\"\nshows \"is_subobj P ((C,Xs@[X,Y]))\"", "lemma shSubobj_isSubobj:\nassumes 1:  \"is_subobj P ((C,Xs@[X]))\" and 2:\"P \\<turnstile> X \\<prec>\\<^sub>S Y\"\nshows \"is_subobj P ((C,[Y]))\"", "lemma build_rec_isSubobj_rev:\nassumes 1:\"is_subobj P ((D,D#rev Cs))\" and 2:\" P \\<turnstile> C \\<prec>\\<^sub>R D\"\nshows \"is_subobj P ((C,C#D#rev Cs))\"", "lemma build_rec_isSubobj:\nassumes 1:\"is_subobj P ((D,D#Cs))\" and 2:\" P \\<turnstile> C \\<prec>\\<^sub>R D\" \nshows \"is_subobj P ((C,C#D#Cs))\"", "lemma isSubobj_isSubobj_isSubobj_rev:\nassumes 1:\"is_subobj P ((C,[D]))\" and 2:\"is_subobj P ((D,D#(rev Cs)))\" \nshows \"is_subobj P ((C,D#(rev Cs)))\"", "lemma isSubobj_isSubobj_isSubobj:\nassumes 1:\"is_subobj P ((C,[D]))\" and 2:\"is_subobj P ((D,D#Cs))\" \nshows \"is_subobj P ((C,D#Cs))\"", "lemma Subobjs_Base:\"is_class P C \\<Longrightarrow> Subobjs P C [C]\"", "lemma SubobjsR_nonempty: \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> Cs \\<noteq> []\"", "lemma Subobjs_nonempty: \"Subobjs P C Cs \\<Longrightarrow> Cs \\<noteq> []\"", "lemma hd_SubobjsR:\n  \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> \\<exists>Cs'. Cs = C#Cs'\"", "lemma SubobjsR_subclassRep: \n  \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> (C,last Cs) \\<in> (subclsR P)\\<^sup>*\"", "lemma SubobjsR_subclass: \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs\"", "lemma Subobjs_subclass: \"Subobjs P C Cs \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs\"", "lemma Subobjs_notSubobjsR:\n  \"\\<lbrakk>Subobjs P C Cs; \\<not> Subobjs\\<^sub>R P C Cs\\<rbrakk>\n\\<Longrightarrow> \\<exists>C' D. P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<and> P \\<turnstile> C' \\<prec>\\<^sub>S D \\<and> Subobjs\\<^sub>R P D Cs\"", "lemma assumes subo:\"Subobjs\\<^sub>R P (hd (Cs@ C'#Cs')) (Cs@ C'#Cs')\"\n  shows SubobjsR_Subobjs:\"Subobjs P C' (C'#Cs')\"", "lemma Subobjs_Subobjs:\"Subobjs P C (Cs@ C'#Cs') \\<Longrightarrow> Subobjs P C' (C'#Cs')\"", "lemma SubobjsR_isClass:\nassumes subo:\"Subobjs\\<^sub>R P C Cs\"\nshows \"is_class P C\"", "lemma Subobjs_isClass:\nassumes subo:\"Subobjs P C Cs\"\nshows \"is_class P C\"", "lemma Subobjs_subclsR:\nassumes subo:\"Subobjs P C (Cs@[D,D']@Cs')\"\nshows \"P \\<turnstile> D \\<prec>\\<^sub>R D'\"", "lemma assumes subo:\"Subobjs\\<^sub>R P (hd Cs) (Cs@[D])\" and notempty:\"Cs \\<noteq> []\"\n  shows butlast_Subobjs_Rep:\"Subobjs\\<^sub>R P (hd Cs) Cs\"", "lemma assumes subo:\"Subobjs P C (Cs@[D])\" and notempty:\"Cs \\<noteq> []\"\n  shows butlast_Subobjs:\"Subobjs P C Cs\"", "lemma assumes subo:\"Subobjs P C (Cs@(rev Cs'))\" and notempty:\"Cs \\<noteq> []\"\n  shows rev_appendSubobj:\"Subobjs P C Cs\"", "lemma appendSubobj:\nassumes subo:\"Subobjs P C (Cs@Cs')\" and notempty:\"Cs \\<noteq> []\"\nshows \"Subobjs P C Cs\"", "lemma SubobjsR_isSubobj:\n  \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> is_subobj P ((C,Cs))\"", "lemma leq_SubobjsR_isSubobj:\n  \"\\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'; P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk> \n\\<Longrightarrow> is_subobj P ((C,Cs))\"", "lemma Subobjs_isSubobj:\n  \"Subobjs P C Cs \\<Longrightarrow> is_subobj P ((C,Cs))\"", "lemma appendPath_last: \"Cs \\<noteq> [] \\<Longrightarrow> last Cs = last (Cs'@\\<^sub>pCs)\"", "lemma length_Casts_vs:\n  \"P \\<turnstile> Ts Casts vs to vs' \\<Longrightarrow> length Ts = length vs\"", "lemma length_Casts_vs':\n  \"P \\<turnstile> Ts Casts vs to vs' \\<Longrightarrow> length Ts = length vs'\"", "lemma leq_path_rep:\n  \"\\<lbrakk> Subobjs P C (Cs@[C']); Subobjs P C (Cs@[C',C''])\\<rbrakk> \n\\<Longrightarrow> P,C \\<turnstile> (Cs@[C']) \\<sqsubset>\\<^sup>1 (Cs@[C',C''])\"", "lemma leq_path_sh:\n  \"\\<lbrakk> Subobjs P C (Cs@[C']); P \\<turnstile> C' \\<prec>\\<^sub>S C''\\<rbrakk> \n\\<Longrightarrow> P,C \\<turnstile> (Cs@[C']) \\<sqsubset>\\<^sup>1 [C'']\"", "lemma sees_fields_fun:\n  \"(Cs,T) \\<in> FieldDecls P C F \\<Longrightarrow> (Cs,T') \\<in> FieldDecls P C F \\<Longrightarrow> T = T'\"", "lemma sees_field_fun:\n  \"\\<lbrakk>P \\<turnstile> C has least F:T via Cs; P \\<turnstile> C has least F:T' via Cs\\<rbrakk>\n  \\<Longrightarrow> T = T'\"", "lemma has_least_method_has_method:\n  \"P \\<turnstile> C has least M = mthd via Cs \\<Longrightarrow> P \\<turnstile> C has M = mthd via Cs\"", "lemma visible_methods_exist:\n  \"(Cs,mthd) \\<in> MethodDefs P C M \\<Longrightarrow>\n  (\\<exists>Bs fs ms. class P (last Cs) = Some(Bs,fs,ms) \\<and> map_of ms M = Some mthd)\"", "lemma sees_methods_fun:\n  \"(Cs,mthd) \\<in> MethodDefs P C M \\<Longrightarrow> (Cs,mthd') \\<in> MethodDefs P C M \\<Longrightarrow> mthd = mthd'\"", "lemma sees_method_fun:\n  \"\\<lbrakk>P \\<turnstile> C has least M = mthd via Cs; P \\<turnstile> C has least M = mthd' via Cs\\<rbrakk>\n  \\<Longrightarrow> mthd = mthd'\"", "lemma overrider_method_fun:\nassumes overrider:\"P \\<turnstile> (C,Cs) has overrider M = mthd via Cs'\"\n  and overrider':\"P \\<turnstile> (C,Cs) has overrider M = mthd' via Cs''\"\nshows \"mthd = mthd' \\<and> Cs' = Cs''\""], "translations": [["", "lemma mdc_tuple [simp]: \"mdc (C,Cs) = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mdc (C, Cs) = C", "by(simp add:mdc_def)"], ["", "lemma ldc_tuple [simp]: \"ldc (C,Cs) = last Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ldc (C, Cs) = last Cs", "by(simp add:ldc_def)"], ["", "subsection \\<open>Subobjects according to Rossie-Friedman\\<close>"], ["", "fun is_subobj :: \"prog \\<Rightarrow> subobj \\<Rightarrow> bool\" \\<comment> \\<open>legal subobject to class hierarchie\\<close> where\n  \"is_subobj P (C, []) \\<longleftrightarrow> False\"\n| \"is_subobj P (C, [D]) \\<longleftrightarrow> (is_class P C \\<and> C = D) \n                                \\<or> (\\<exists> X. P \\<turnstile> C \\<preceq>\\<^sup>* X \\<and> P \\<turnstile> X \\<prec>\\<^sub>S D)\"\n| \"is_subobj P (C, D # E # Xs) = (let Ys=butlast (D # E # Xs); \n                                      Y=last (D # E # Xs); \n                                      X=last Ys \n                                in is_subobj P (C, Ys) \\<and> P \\<turnstile> X \\<prec>\\<^sub>R Y)\""], ["", "lemma subobj_aux_rev:\nassumes 1:\"is_subobj P ((C,C'#rev Cs@[C'']))\"\nshows \"is_subobj P ((C,C'#rev Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "obtain Cs' where Cs':\"Cs' = rev Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Cs'. Cs' = rev Cs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "hence rev:\"Cs'@[C''] = rev Cs@[C'']\""], ["proof (prove)\nusing this:\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. Cs' @ [C''] = rev Cs @ [C'']", "by simp"], ["proof (state)\nthis:\n  Cs' @ [C''] = rev Cs @ [C'']\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "from this"], ["proof (chain)\npicking this:\n  Cs' @ [C''] = rev Cs @ [C'']", "obtain D Ds where DDs:\"Cs'@[C''] = D#Ds\""], ["proof (prove)\nusing this:\n  Cs' @ [C''] = rev Cs @ [C'']\n\ngoal (1 subgoal):\n 1. (\\<And>D Ds.\n        Cs' @ [C''] = D # Ds \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Cs') auto"], ["proof (state)\nthis:\n  Cs' @ [C''] = D # Ds\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "with 1 rev"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev Cs @ [C''])\n  Cs' @ [C''] = rev Cs @ [C'']\n  Cs' @ [C''] = D # Ds", "have subo:\"is_subobj P ((C,C'#D#Ds))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs @ [C''])\n  Cs' @ [C''] = rev Cs @ [C'']\n  Cs' @ [C''] = D # Ds\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # D # Ds)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C' # D # Ds)\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "from DDs"], ["proof (chain)\npicking this:\n  Cs' @ [C''] = D # Ds", "have \"butlast (C'#D#Ds) = C'#Cs'\""], ["proof (prove)\nusing this:\n  Cs' @ [C''] = D # Ds\n\ngoal (1 subgoal):\n 1. butlast (C' # D # Ds) = C' # Cs'", "by (cases Cs') auto"], ["proof (state)\nthis:\n  butlast (C' # D # Ds) = C' # Cs'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "with subo"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # D # Ds)\n  butlast (C' # D # Ds) = C' # Cs'", "have \"is_subobj P ((C,C'#Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # D # Ds)\n  butlast (C' # D # Ds) = C' # Cs'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C' # Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "with Cs'"], ["proof (chain)\npicking this:\n  Cs' = rev Cs\n  is_subobj P (C, C' # Cs')", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs' = rev Cs\n  is_subobj P (C, C' # Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subobj_aux:\nassumes 1:\"is_subobj P ((C,C'#Cs@[C'']))\"\nshows \"is_subobj P ((C,C'#Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs)", "from 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # Cs @ [C''])", "obtain Cs' where Cs':\"Cs' = rev Cs\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # Cs @ [C''])\n\ngoal (1 subgoal):\n 1. (\\<And>Cs'. Cs' = rev Cs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs)", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # Cs @ [C''])\n  Cs' = rev Cs", "have \"is_subobj P ((C,C'#rev Cs'@[C'']))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # Cs @ [C''])\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs' @ [C''])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs' @ [C''])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs)", "hence \"is_subobj P ((C,C'#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs' @ [C''])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs')", "by (rule subobj_aux_rev)"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs)", "with Cs'"], ["proof (chain)\npicking this:\n  Cs' = rev Cs\n  is_subobj P (C, C' # rev Cs')", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs' = rev Cs\n  is_subobj P (C, C' # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # Cs)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C' # Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isSubobj_isClass:\nassumes 1:\"is_subobj P (R)\"\nshows \"is_class P (mdc R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "obtain C' Cs' where R:\"R = (C',Cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C' Cs'. R = (C', Cs') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases R) auto"], ["proof (state)\nthis:\n  R = (C', Cs')\n\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P R\n  R = (C', Cs')", "have ne:\"Cs' \\<noteq> []\""], ["proof (prove)\nusing this:\n  is_subobj P R\n  R = (C', Cs')\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> []", "by (cases Cs') auto"], ["proof (state)\nthis:\n  Cs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "from this"], ["proof (chain)\npicking this:\n  Cs' \\<noteq> []", "obtain C'' Cs'' where C''Cs'':\"Cs' = C''#Cs''\""], ["proof (prove)\nusing this:\n  Cs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>C'' Cs''.\n        Cs' = C'' # Cs'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Cs') auto"], ["proof (state)\nthis:\n  Cs' = C'' # Cs''\n\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "from this"], ["proof (chain)\npicking this:\n  Cs' = C'' # Cs''", "obtain Ds where \"Ds = rev Cs''\""], ["proof (prove)\nusing this:\n  Cs' = C'' # Cs''\n\ngoal (1 subgoal):\n 1. (\\<And>Ds. Ds = rev Cs'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Ds = rev Cs''\n\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "with 1 R C''Cs''"], ["proof (chain)\npicking this:\n  is_subobj P R\n  R = (C', Cs')\n  Cs' = C'' # Cs''\n  Ds = rev Cs''", "have subo1:\"is_subobj P ((C',C''#rev Ds))\""], ["proof (prove)\nusing this:\n  is_subobj P R\n  R = (C', Cs')\n  Cs' = C'' # Cs''\n  Ds = rev Cs''\n\ngoal (1 subgoal):\n 1. is_subobj P (C', C'' # rev Ds)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C', C'' # rev Ds)\n\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "with R"], ["proof (chain)\npicking this:\n  R = (C', Cs')\n  is_subobj P (C', C'' # rev Ds)", "show ?thesis"], ["proof (prove)\nusing this:\n  R = (C', Cs')\n  is_subobj P (C', C'' # rev Ds)\n\ngoal (1 subgoal):\n 1. is_class P (mdc R)", "by (induct Ds,auto simp:mdc_def split:if_split_asm dest:subobj_aux,\n      auto elim:converse_rtranclE dest!:subclsS_subcls1 elim:subcls1_class)"], ["proof (state)\nthis:\n  is_class P (mdc R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isSubobjs_subclsR_rev:\nassumes 1:\"is_subobj P ((C,Cs@[D,D']@(rev Cs')))\"\nshows \"P \\<turnstile> D \\<prec>\\<^sub>R D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "using 1"], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "proof (induct Cs')"], ["proof (state)\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "case Nil"], ["proof (state)\nthis:\n  is_subobj P (C, Cs @ [D, D'] @ rev [])\n\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from this"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ rev [])", "obtain Cs' X Y Xs where Cs'1:\"Cs' = Cs@[D,D']\" \n    and \"X = hd(Cs@[D,D'])\" and \"Y = hd(tl(Cs@[D,D']))\"\n    and \"Xs =  tl(tl(Cs@[D,D']))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev [])\n\ngoal (1 subgoal):\n 1. (\\<And>Cs' X Y Xs.\n        \\<lbrakk>Cs' = Cs @ [D, D']; X = hd (Cs @ [D, D']);\n         Y = hd (tl (Cs @ [D, D'])); Xs = tl (tl (Cs @ [D, D']))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs' = Cs @ [D, D']\n  X = hd (Cs @ [D, D'])\n  Y = hd (tl (Cs @ [D, D']))\n  Xs = tl (tl (Cs @ [D, D']))\n\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "hence Cs'2:\"Cs' = X#Y#Xs\""], ["proof (prove)\nusing this:\n  Cs' = Cs @ [D, D']\n  X = hd (Cs @ [D, D'])\n  Y = hd (tl (Cs @ [D, D']))\n  Xs = tl (tl (Cs @ [D, D']))\n\ngoal (1 subgoal):\n 1. Cs' = X # Y # Xs", "by (cases Cs) auto"], ["proof (state)\nthis:\n  Cs' = X # Y # Xs\n\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Cs'1"], ["proof (chain)\npicking this:\n  Cs' = Cs @ [D, D']", "have last:\"last Cs' = D'\""], ["proof (prove)\nusing this:\n  Cs' = Cs @ [D, D']\n\ngoal (1 subgoal):\n 1. last Cs' = D'", "by simp"], ["proof (state)\nthis:\n  last Cs' = D'\n\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Cs'1"], ["proof (chain)\npicking this:\n  Cs' = Cs @ [D, D']", "have butlast:\"last(butlast Cs') = D\""], ["proof (prove)\nusing this:\n  Cs' = Cs @ [D, D']\n\ngoal (1 subgoal):\n 1. last (butlast Cs') = D", "by (simp add:butlast_tail)"], ["proof (state)\nthis:\n  last (butlast Cs') = D\n\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Nil Cs'1 Cs'2"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ rev [])\n  Cs' = Cs @ [D, D']\n  Cs' = X # Y # Xs", "have \"is_subobj P ((C,X#Y#Xs))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev [])\n  Cs' = Cs @ [D, D']\n  Cs' = X # Y # Xs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, X # Y # Xs)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, X # Y # Xs)\n\ngoal (2 subgoals):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev []) \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "with last butlast Cs'2"], ["proof (chain)\npicking this:\n  last Cs' = D'\n  last (butlast Cs') = D\n  Cs' = X # Y # Xs\n  is_subobj P (C, X # Y # Xs)", "show ?case"], ["proof (prove)\nusing this:\n  last Cs' = D'\n  last (butlast Cs') = D\n  Cs' = X # Y # Xs\n  is_subobj P (C, X # Y # Xs)\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "case (Cons C'' Cs'')"], ["proof (state)\nthis:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev (C'' # Cs''))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "have IH:\"is_subobj P ( (C, Cs @ [D, D'] @ rev Cs'')) \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'", "by fact"], ["proof (state)\nthis:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Cons"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev (C'' # Cs''))", "obtain Cs' X Y Xs where Cs'1:\"Cs' = Cs@[D,D']@(rev (C''#Cs''))\" \n    and \"X = hd(Cs@[D,D']@(rev (C''#Cs'')))\" \n    and \"Y = hd(tl(Cs@[D,D']@(rev (C''#Cs''))))\"\n    and \"Xs =  tl(tl(Cs@[D,D']@(rev (C''#Cs''))))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev (C'' # Cs''))\n\ngoal (1 subgoal):\n 1. (\\<And>Cs' X Y Xs.\n        \\<lbrakk>Cs' = Cs @ [D, D'] @ rev (C'' # Cs'');\n         X = hd (Cs @ [D, D'] @ rev (C'' # Cs''));\n         Y = hd (tl (Cs @ [D, D'] @ rev (C'' # Cs'')));\n         Xs = tl (tl (Cs @ [D, D'] @ rev (C'' # Cs'')))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n  X = hd (Cs @ [D, D'] @ rev (C'' # Cs''))\n  Y = hd (tl (Cs @ [D, D'] @ rev (C'' # Cs'')))\n  Xs = tl (tl (Cs @ [D, D'] @ rev (C'' # Cs'')))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "hence Cs'2:\"Cs' = X#Y#Xs\""], ["proof (prove)\nusing this:\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n  X = hd (Cs @ [D, D'] @ rev (C'' # Cs''))\n  Y = hd (tl (Cs @ [D, D'] @ rev (C'' # Cs'')))\n  Xs = tl (tl (Cs @ [D, D'] @ rev (C'' # Cs'')))\n\ngoal (1 subgoal):\n 1. Cs' = X # Y # Xs", "by (cases Cs) auto"], ["proof (state)\nthis:\n  Cs' = X # Y # Xs\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Cons Cs'1 Cs'2"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev (C'' # Cs''))\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n  Cs' = X # Y # Xs", "have \"is_subobj P ((C,X#Y#Xs))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev (C'' # Cs''))\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n  Cs' = X # Y # Xs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, X # Y # Xs)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, X # Y # Xs)\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "hence sub:\"is_subobj P ((C,butlast (X#Y#Xs)))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, X # Y # Xs)\n\ngoal (1 subgoal):\n 1. is_subobj P (C, butlast (X # Y # Xs))", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, butlast (X # Y # Xs))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Cs'1"], ["proof (chain)\npicking this:\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')", "obtain E Es where Cs'3:\"Cs' = Es@[E]\""], ["proof (prove)\nusing this:\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n\ngoal (1 subgoal):\n 1. (\\<And>Es E. Cs' = Es @ [E] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Cs') auto"], ["proof (state)\nthis:\n  Cs' = Es @ [E]\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "with Cs'1"], ["proof (chain)\npicking this:\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n  Cs' = Es @ [E]", "have butlast:\"Es = Cs@[D,D']@(rev Cs'')\""], ["proof (prove)\nusing this:\n  Cs' = Cs @ [D, D'] @ rev (C'' # Cs'')\n  Cs' = Es @ [E]\n\ngoal (1 subgoal):\n 1. Es = Cs @ [D, D'] @ rev Cs''", "by simp"], ["proof (state)\nthis:\n  Es = Cs @ [D, D'] @ rev Cs''\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "from Cs'3"], ["proof (chain)\npicking this:\n  Cs' = Es @ [E]", "have \"butlast Cs' = Es\""], ["proof (prove)\nusing this:\n  Cs' = Es @ [E]\n\ngoal (1 subgoal):\n 1. butlast Cs' = Es", "by simp"], ["proof (state)\nthis:\n  butlast Cs' = Es\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "with butlast"], ["proof (chain)\npicking this:\n  Es = Cs @ [D, D'] @ rev Cs''\n  butlast Cs' = Es", "have \"butlast Cs' = Cs@[D,D']@(rev Cs'')\""], ["proof (prove)\nusing this:\n  Es = Cs @ [D, D'] @ rev Cs''\n  butlast Cs' = Es\n\ngoal (1 subgoal):\n 1. butlast Cs' = Cs @ [D, D'] @ rev Cs''", "by simp"], ["proof (state)\nthis:\n  butlast Cs' = Cs @ [D, D'] @ rev Cs''\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "with Cs'2 sub"], ["proof (chain)\npicking this:\n  Cs' = X # Y # Xs\n  is_subobj P (C, butlast (X # Y # Xs))\n  butlast Cs' = Cs @ [D, D'] @ rev Cs''", "have \"is_subobj P ((C,Cs@[D,D']@(rev Cs'')))\""], ["proof (prove)\nusing this:\n  Cs' = X # Y # Xs\n  is_subobj P (C, butlast (X # Y # Xs))\n  butlast Cs' = Cs @ [D, D'] @ rev Cs''\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev Cs'')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, Cs @ [D, D'] @ rev Cs') \\<Longrightarrow>\n                P \\<turnstile> D \\<prec>\\<^sub>R D';\n        is_subobj P (C, Cs @ [D, D'] @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> D \\<prec>\\<^sub>R D'", "with IH"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'')", "show ?case"], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isSubobjs_subclsR:\nassumes 1:\"is_subobj P ((C,Cs@[D,D']@Cs'))\"\nshows \"P \\<turnstile> D \\<prec>\\<^sub>R D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "from 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ Cs')", "obtain Cs'' where \"Cs'' = rev Cs'\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ Cs')\n\ngoal (1 subgoal):\n 1. (\\<And>Cs''. Cs'' = rev Cs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, Cs @ [D, D'] @ Cs')\n  Cs'' = rev Cs'", "have \"is_subobj P ((C,Cs@[D,D']@(rev Cs'')))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ Cs')\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Cs @ [D, D'] @ rev Cs'')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_subobj P (C, Cs @ [D, D'] @ rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "by (rule isSubobjs_subclsR_rev)"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mdc_leq_ldc_aux:\nassumes 1:\"is_subobj P ((C,C'#rev Cs'))\"\nshows \"P \\<turnstile> C \\<preceq>\\<^sup>* last (C'#rev Cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs')", "using 1"], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs')", "proof (induct Cs')"], ["proof (state)\ngoal (2 subgoals):\n 1. is_subobj P (C, C' # rev []) \\<Longrightarrow>\n    P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "case Nil"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev [])\n\ngoal (2 subgoals):\n 1. is_subobj P (C, C' # rev []) \\<Longrightarrow>\n    P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "from 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev Cs')", "have \"is_class P C\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs')\n\ngoal (1 subgoal):\n 1. is_class P C", "by (drule_tac R=\"(C,C'#rev Cs')\" in isSubobj_isClass, simp add:mdc_def)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (2 subgoals):\n 1. is_subobj P (C, C' # rev []) \\<Longrightarrow>\n    P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n 2. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "with Nil"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev [])\n  is_class P C", "show ?case"], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev [])\n  is_class P C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "proof (cases \"C=C'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C; C = C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n 2. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C;\n     C \\<noteq> C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "case True"], ["proof (state)\nthis:\n  C = C'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C; C = C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n 2. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C;\n     C \\<noteq> C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "thus ?thesis"], ["proof (prove)\nusing this:\n  C = C'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C;\n     C \\<noteq> C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C;\n     C \\<noteq> C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "case False"], ["proof (state)\nthis:\n  C \\<noteq> C'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_subobj P (C, C' # rev []); is_class P C;\n     C \\<noteq> C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "with Nil"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev [])\n  C \\<noteq> C'", "show ?thesis"], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev [])\n  C \\<noteq> C'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])", "by (auto dest!:subclsS_subcls1)"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev [])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "case (Cons C'' Cs'')"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  is_subobj P (C, C' # rev (C'' # Cs''))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "have IH:\"is_subobj P ( (C, C' # rev Cs'')) \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\"\n      and subo:\"is_subobj P ( (C, C' # rev (C'' # Cs'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_subobj P (C, C' # rev Cs'') \\<Longrightarrow>\n     P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')) &&&\n    is_subobj P (C, C' # rev (C'' # Cs''))", "by fact+"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  is_subobj P (C, C' # rev (C'' # Cs''))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "hence \"is_subobj P ( (C, C' # rev Cs''))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  is_subobj P (C, C' # rev (C'' # Cs''))\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs'')", "by (simp add:subobj_aux_rev)"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "with IH"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  is_subobj P (C, C' # rev Cs'')", "have rel:\"P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs'') \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  is_subobj P (C, C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "from subo"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev (C'' # Cs''))", "obtain D Ds where DDs:\"C' # rev Cs'' = Ds@[D]\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev (C'' # Cs''))\n\ngoal (1 subgoal):\n 1. (\\<And>Ds D.\n        C' # rev Cs'' = Ds @ [D] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Cs'') auto"], ["proof (state)\nthis:\n  C' # rev Cs'' = Ds @ [D]\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "hence \" C' # rev (C'' # Cs'') = Ds@[D,C'']\""], ["proof (prove)\nusing this:\n  C' # rev Cs'' = Ds @ [D]\n\ngoal (1 subgoal):\n 1. C' # rev (C'' # Cs'') = Ds @ [D, C'']", "by simp"], ["proof (state)\nthis:\n  C' # rev (C'' # Cs'') = Ds @ [D, C'']\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "with subo"], ["proof (chain)\npicking this:\n  is_subobj P (C, C' # rev (C'' # Cs''))\n  C' # rev (C'' # Cs'') = Ds @ [D, C'']", "have \"is_subobj P ((C,Ds@[D,C'']))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev (C'' # Cs''))\n  C' # rev (C'' # Cs'') = Ds @ [D, C'']\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Ds @ [D, C''])", "by (cases Ds) auto"], ["proof (state)\nthis:\n  is_subobj P (C, Ds @ [D, C''])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "hence \"P \\<turnstile> D \\<prec>\\<^sub>R C''\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Ds @ [D, C''])\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R C''", "by (rule_tac Cs'=\"[]\" in isSubobjs_subclsR) simp"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<prec>\\<^sub>R C''\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "hence rel1:\"P \\<turnstile> D \\<prec>\\<^sup>1 C''\""], ["proof (prove)\nusing this:\n  P \\<turnstile> D \\<prec>\\<^sub>R C''\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sup>1 C''", "by (rule subclsR_subcls1)"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<prec>\\<^sup>1 C''\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "from DDs"], ["proof (chain)\npicking this:\n  C' # rev Cs'' = Ds @ [D]", "have \"D = last (C' # rev Cs'')\""], ["proof (prove)\nusing this:\n  C' # rev Cs'' = Ds @ [D]\n\ngoal (1 subgoal):\n 1. D = last (C' # rev Cs'')", "by simp"], ["proof (state)\nthis:\n  D = last (C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "with rel1"], ["proof (chain)\npicking this:\n  P \\<turnstile> D \\<prec>\\<^sup>1 C''\n  D = last (C' # rev Cs'')", "have lastrel1:\"P \\<turnstile> last (C' # rev Cs'') \\<prec>\\<^sup>1 C''\""], ["proof (prove)\nusing this:\n  P \\<turnstile> D \\<prec>\\<^sup>1 C''\n  D = last (C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> last (C' # rev Cs'') \\<prec>\\<^sup>1 C''", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> last (C' # rev Cs'') \\<prec>\\<^sup>1 C''\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "with rel"], ["proof (chain)\npicking this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  P \\<turnstile> last (C' # rev Cs'') \\<prec>\\<^sup>1 C''", "have \"P \\<turnstile> C \\<preceq>\\<^sup>* C''\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  P \\<turnstile> last (C' # rev Cs'') \\<prec>\\<^sup>1 C''\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* C''", "by(rule_tac b=\"last (C' # rev Cs'')\" in rtrancl_into_rtrancl) simp"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C''\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>is_subobj P (C, C' # rev Cs') \\<Longrightarrow>\n                P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs');\n        is_subobj P (C, C' # rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last\n                       (C' # rev (a # Cs'))", "thus ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C''\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev (C'' # Cs''))", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev (C'' # Cs''))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mdc_leq_ldc:\nassumes 1:\"is_subobj P (R)\"\nshows \"P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "from 1"], ["proof (chain)\npicking this:\n  is_subobj P R", "obtain C Cs where R:\"R = (C,Cs)\""], ["proof (prove)\nusing this:\n  is_subobj P R\n\ngoal (1 subgoal):\n 1. (\\<And>C Cs. R = (C, Cs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases R) auto"], ["proof (state)\nthis:\n  R = (C, Cs)\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P R\n  R = (C, Cs)", "have ne:\"Cs \\<noteq> []\""], ["proof (prove)\nusing this:\n  is_subobj P R\n  R = (C, Cs)\n\ngoal (1 subgoal):\n 1. Cs \\<noteq> []", "by (cases Cs) auto"], ["proof (state)\nthis:\n  Cs \\<noteq> []\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "from this"], ["proof (chain)\npicking this:\n  Cs \\<noteq> []", "obtain C' Cs' where Cs:\"Cs = C'#Cs'\""], ["proof (prove)\nusing this:\n  Cs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>C' Cs'. Cs = C' # Cs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Cs) auto"], ["proof (state)\nthis:\n  Cs = C' # Cs'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "from this"], ["proof (chain)\npicking this:\n  Cs = C' # Cs'", "obtain Cs'' where Cs':\"Cs'' = rev Cs'\""], ["proof (prove)\nusing this:\n  Cs = C' # Cs'\n\ngoal (1 subgoal):\n 1. (\\<And>Cs''. Cs'' = rev Cs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "with R Cs 1"], ["proof (chain)\npicking this:\n  R = (C, Cs)\n  Cs = C' # Cs'\n  is_subobj P R\n  Cs'' = rev Cs'", "have \"is_subobj P ((C,C'#rev Cs''))\""], ["proof (prove)\nusing this:\n  R = (C, Cs)\n  Cs = C' # Cs'\n  is_subobj P R\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C' # rev Cs'')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "hence rel:\"P \\<turnstile> C \\<preceq>\\<^sup>* last (C'#rev Cs'')\""], ["proof (prove)\nusing this:\n  is_subobj P (C, C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')", "by (rule mdc_leq_ldc_aux)"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "from R Cs Cs'"], ["proof (chain)\npicking this:\n  R = (C, Cs)\n  Cs = C' # Cs'\n  Cs'' = rev Cs'", "have ldc:\"last (C'#rev Cs'') = ldc R\""], ["proof (prove)\nusing this:\n  R = (C, Cs)\n  Cs = C' # Cs'\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. last (C' # rev Cs'') = ldc R", "by(simp add:ldc_def)"], ["proof (state)\nthis:\n  last (C' # rev Cs'') = ldc R\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "from R"], ["proof (chain)\npicking this:\n  R = (C, Cs)", "have \"mdc R = C\""], ["proof (prove)\nusing this:\n  R = (C, Cs)\n\ngoal (1 subgoal):\n 1. mdc R = C", "by(simp add:mdc_def)"], ["proof (state)\nthis:\n  mdc R = C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "with ldc rel"], ["proof (chain)\npicking this:\n  last (C' # rev Cs'') = ldc R\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  mdc R = C", "show ?thesis"], ["proof (prove)\nusing this:\n  last (C' # rev Cs'') = ldc R\n  P \\<turnstile> C \\<preceq>\\<^sup>* last (C' # rev Cs'')\n  mdc R = C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> mdc R \\<preceq>\\<^sup>* ldc R\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Next three lemmas show subobject property as presented in literature\\<close>"], ["", "lemma class_isSubobj:\n  \"is_class P C \\<Longrightarrow> is_subobj P ((C,[C]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C \\<Longrightarrow> is_subobj P (C, [C])", "by simp"], ["", "lemma repSubobj_isSubobj:\nassumes 1:\"is_subobj P ((C,Xs@[X]))\" and 2:\"P \\<turnstile> X \\<prec>\\<^sub>R Y\"\nshows \"is_subobj P ((C,Xs@[X,Y]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X, Y])", "using 1"], ["proof (prove)\nusing this:\n  is_subobj P (C, Xs @ [X])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X, Y])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, Xs @ [X, Y])", "obtain Cs D E Cs' where Cs1:\"Cs = Xs@[X,Y]\" and  \"D = hd(Xs@[X,Y])\"\n    and \"E = hd(tl(Xs@[X,Y]))\" and \"Cs' = tl(tl(Xs@[X,Y]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Cs D E Cs'.\n        \\<lbrakk>Cs = Xs @ [X, Y]; D = hd (Xs @ [X, Y]);\n         E = hd (tl (Xs @ [X, Y])); Cs' = tl (tl (Xs @ [X, Y]))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs = Xs @ [X, Y]\n  D = hd (Xs @ [X, Y])\n  E = hd (tl (Xs @ [X, Y]))\n  Cs' = tl (tl (Xs @ [X, Y]))\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, Xs @ [X, Y])", "hence Cs2:\"Cs = D#E#Cs'\""], ["proof (prove)\nusing this:\n  Cs = Xs @ [X, Y]\n  D = hd (Xs @ [X, Y])\n  E = hd (tl (Xs @ [X, Y]))\n  Cs' = tl (tl (Xs @ [X, Y]))\n\ngoal (1 subgoal):\n 1. Cs = D # E # Cs'", "by (cases Xs) auto"], ["proof (state)\nthis:\n  Cs = D # E # Cs'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, Xs @ [X, Y])", "with 1 Cs1"], ["proof (chain)\npicking this:\n  is_subobj P (C, Xs @ [X])\n  Cs = Xs @ [X, Y]\n  Cs = D # E # Cs'", "have subobj_butlast:\"is_subobj P ((C,butlast(D#E#Cs')))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Xs @ [X])\n  Cs = Xs @ [X, Y]\n  Cs = D # E # Cs'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, butlast (D # E # Cs'))", "by (simp add:butlast_tail)"], ["proof (state)\nthis:\n  is_subobj P (C, butlast (D # E # Cs'))\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, Xs @ [X, Y])", "with 2 Cs1 Cs2"], ["proof (chain)\npicking this:\n  P \\<turnstile> X \\<prec>\\<^sub>R Y\n  Cs = Xs @ [X, Y]\n  Cs = D # E # Cs'\n  is_subobj P (C, butlast (D # E # Cs'))", "have \"P \\<turnstile> (last(butlast(D#E#Cs'))) \\<prec>\\<^sub>R last(D#E#Cs')\""], ["proof (prove)\nusing this:\n  P \\<turnstile> X \\<prec>\\<^sub>R Y\n  Cs = Xs @ [X, Y]\n  Cs = D # E # Cs'\n  is_subobj P (C, butlast (D # E # Cs'))\n\ngoal (1 subgoal):\n 1. P \\<turnstile> last\n                    (butlast\n                      (D # E # Cs')) \\<prec>\\<^sub>R last (D # E # Cs')", "by (simp add:butlast_tail)"], ["proof (state)\nthis:\n  P \\<turnstile> last\n                  (butlast (D # E # Cs')) \\<prec>\\<^sub>R last (D # E # Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, Xs @ [X, Y])", "with subobj_butlast"], ["proof (chain)\npicking this:\n  is_subobj P (C, butlast (D # E # Cs'))\n  P \\<turnstile> last\n                  (butlast (D # E # Cs')) \\<prec>\\<^sub>R last (D # E # Cs')", "have \"is_subobj P ((C,(D#E#Cs')))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, butlast (D # E # Cs'))\n  P \\<turnstile> last\n                  (butlast (D # E # Cs')) \\<prec>\\<^sub>R last (D # E # Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # E # Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, D # E # Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, Xs @ [X, Y])", "with Cs1 Cs2"], ["proof (chain)\npicking this:\n  Cs = Xs @ [X, Y]\n  Cs = D # E # Cs'\n  is_subobj P (C, D # E # Cs')", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs = Xs @ [X, Y]\n  Cs = D # E # Cs'\n  is_subobj P (C, D # E # Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X, Y])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, Xs @ [X, Y])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shSubobj_isSubobj:\nassumes 1:  \"is_subobj P ((C,Xs@[X]))\" and 2:\"P \\<turnstile> X \\<prec>\\<^sub>S Y\"\nshows \"is_subobj P ((C,[Y]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, [Y])", "using 1"], ["proof (prove)\nusing this:\n  is_subobj P (C, Xs @ [X])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, [Y])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, [Y])", "from 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, Xs @ [X])", "have classC:\"is_class P C\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Xs @ [X])\n\ngoal (1 subgoal):\n 1. is_class P C", "by (drule_tac R=\"(C,Xs@[X])\" in isSubobj_isClass, simp add:mdc_def)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, [Y])", "from 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, Xs @ [X])", "have \"P \\<turnstile> C \\<preceq>\\<^sup>* X\""], ["proof (prove)\nusing this:\n  is_subobj P (C, Xs @ [X])\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* X", "by (drule_tac R=\"(C,Xs@[X])\" in mdc_leq_ldc, simp add:mdc_def ldc_def)"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* X\n\ngoal (1 subgoal):\n 1. is_subobj P (C, Xs @ [X]) \\<Longrightarrow> is_subobj P (C, [Y])", "with classC 2"], ["proof (chain)\npicking this:\n  is_class P C\n  P \\<turnstile> X \\<prec>\\<^sub>S Y\n  P \\<turnstile> C \\<preceq>\\<^sup>* X", "show ?thesis"], ["proof (prove)\nusing this:\n  is_class P C\n  P \\<turnstile> X \\<prec>\\<^sub>S Y\n  P \\<turnstile> C \\<preceq>\\<^sup>* X\n\ngoal (1 subgoal):\n 1. is_subobj P (C, [Y])", "by fastforce"], ["proof (state)\nthis:\n  is_subobj P (C, [Y])\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Auxiliary lemmas\\<close>"], ["", "lemma build_rec_isSubobj_rev:\nassumes 1:\"is_subobj P ((D,D#rev Cs))\" and 2:\" P \\<turnstile> C \\<prec>\\<^sub>R D\"\nshows \"is_subobj P ((C,C#D#rev Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # rev Cs)", "using 1"], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs)\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # rev Cs)", "proof (induct Cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_subobj P (D, D # rev []) \\<Longrightarrow>\n    is_subobj P (C, C # D # rev [])\n 2. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "case Nil"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev [])\n\ngoal (2 subgoals):\n 1. is_subobj P (D, D # rev []) \\<Longrightarrow>\n    is_subobj P (C, C # D # rev [])\n 2. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "from 2"], ["proof (chain)\npicking this:\n  P \\<turnstile> C \\<prec>\\<^sub>R D", "have \"is_class P C\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<prec>\\<^sub>R D\n\ngoal (1 subgoal):\n 1. is_class P C", "by (auto dest:subclsRD simp add:is_class_def)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (2 subgoals):\n 1. is_subobj P (D, D # rev []) \\<Longrightarrow>\n    is_subobj P (C, C # D # rev [])\n 2. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with 1 2"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # rev Cs)\n  P \\<turnstile> C \\<prec>\\<^sub>R D\n  is_class P C", "show ?case"], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs)\n  P \\<turnstile> C \\<prec>\\<^sub>R D\n  is_class P C\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # rev [])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C # D # rev [])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "case (Cons C' Cs')"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, C # D # rev Cs')\n  is_subobj P (D, D # rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "have suboD:\"is_subobj P ((D,D#rev (C'#Cs')))\" \n    and IH:\"is_subobj P ((D,D#rev Cs')) \\<Longrightarrow> is_subobj P ((C,C#D#rev Cs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (D, D # rev (C' # Cs')) &&&\n    (is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n     is_subobj P (C, C # D # rev Cs'))", "by fact+"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev (C' # Cs'))\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, C # D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "obtain E Es where E:\"E = hd (rev (C'#Cs'))\" and Es:\"Es = tl (rev (C'#Cs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>E Es.\n        \\<lbrakk>E = hd (rev (C' # Cs')); Es = tl (rev (C' # Cs'))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  E = hd (rev (C' # Cs'))\n  Es = tl (rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with E"], ["proof (chain)\npicking this:\n  E = hd (rev (C' # Cs'))\n  E = hd (rev (C' # Cs'))\n  Es = tl (rev (C' # Cs'))", "have E_Es:\"rev (C'#Cs') = E#Es\""], ["proof (prove)\nusing this:\n  E = hd (rev (C' # Cs'))\n  E = hd (rev (C' # Cs'))\n  Es = tl (rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. rev (C' # Cs') = E # Es", "by simp"], ["proof (state)\nthis:\n  rev (C' # Cs') = E # Es\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with E Es"], ["proof (chain)\npicking this:\n  E = hd (rev (C' # Cs'))\n  Es = tl (rev (C' # Cs'))\n  rev (C' # Cs') = E # Es", "have butlast:\"butlast (D#E#Es) = D#rev Cs'\""], ["proof (prove)\nusing this:\n  E = hd (rev (C' # Cs'))\n  Es = tl (rev (C' # Cs'))\n  rev (C' # Cs') = E # Es\n\ngoal (1 subgoal):\n 1. butlast (D # E # Es) = D # rev Cs'", "by simp"], ["proof (state)\nthis:\n  butlast (D # E # Es) = D # rev Cs'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "from E_Es suboD"], ["proof (chain)\npicking this:\n  rev (C' # Cs') = E # Es\n  is_subobj P (D, D # rev (C' # Cs'))", "have suboDE:\"is_subobj P ((D,D#E#Es))\""], ["proof (prove)\nusing this:\n  rev (C' # Cs') = E # Es\n  is_subobj P (D, D # rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. is_subobj P (D, D # E # Es)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, D # E # Es)\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "hence \"is_subobj P ((D,butlast (D#E#Es)))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # E # Es)\n\ngoal (1 subgoal):\n 1. is_subobj P (D, butlast (D # E # Es))", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, butlast (D # E # Es))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with butlast"], ["proof (chain)\npicking this:\n  butlast (D # E # Es) = D # rev Cs'\n  is_subobj P (D, butlast (D # E # Es))", "have \"is_subobj P ((D,D#rev Cs'))\""], ["proof (prove)\nusing this:\n  butlast (D # E # Es) = D # rev Cs'\n  is_subobj P (D, butlast (D # E # Es))\n\ngoal (1 subgoal):\n 1. is_subobj P (D, D # rev Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with IH"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, C # D # rev Cs')\n  is_subobj P (D, D # rev Cs')", "have suboCD:\"is_subobj P ( (C, C#D#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, C # D # rev Cs')\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # rev Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C # D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "from suboDE"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # E # Es)", "obtain Xs X Y Xs' where Xs':\"Xs' = D#E#Es\"\n    and bb:\"Xs = butlast (butlast (D#E#Es))\" \n    and lb:\"X = last(butlast (D#E#Es))\" and l:\"Y = last (D#E#Es)\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # E # Es)\n\ngoal (1 subgoal):\n 1. (\\<And>Xs' Xs X Y.\n        \\<lbrakk>Xs' = D # E # Es; Xs = butlast (butlast (D # E # Es));\n         X = last (butlast (D # E # Es)); Y = last (D # E # Es)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Xs' = D # E # Es\n  Xs = butlast (butlast (D # E # Es))\n  X = last (butlast (D # E # Es))\n  Y = last (D # E # Es)\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "from this"], ["proof (chain)\npicking this:\n  Xs' = D # E # Es\n  Xs = butlast (butlast (D # E # Es))\n  X = last (butlast (D # E # Es))\n  Y = last (D # E # Es)", "obtain Xs'' where Xs'':\"Xs'' = Xs@[X]\""], ["proof (prove)\nusing this:\n  Xs' = D # E # Es\n  Xs = butlast (butlast (D # E # Es))\n  X = last (butlast (D # E # Es))\n  Y = last (D # E # Es)\n\ngoal (1 subgoal):\n 1. (\\<And>Xs''. Xs'' = Xs @ [X] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Xs'' = Xs @ [X]\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with bb lb"], ["proof (chain)\npicking this:\n  Xs = butlast (butlast (D # E # Es))\n  X = last (butlast (D # E # Es))\n  Xs'' = Xs @ [X]", "have \"Xs'' = butlast (D#E#Es)\""], ["proof (prove)\nusing this:\n  Xs = butlast (butlast (D # E # Es))\n  X = last (butlast (D # E # Es))\n  Xs'' = Xs @ [X]\n\ngoal (1 subgoal):\n 1. Xs'' = butlast (D # E # Es)", "by simp"], ["proof (state)\nthis:\n  Xs'' = butlast (D # E # Es)\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with l"], ["proof (chain)\npicking this:\n  Y = last (D # E # Es)\n  Xs'' = butlast (D # E # Es)", "have \"D#E#Es = Xs''@[Y]\""], ["proof (prove)\nusing this:\n  Y = last (D # E # Es)\n  Xs'' = butlast (D # E # Es)\n\ngoal (1 subgoal):\n 1. D # E # Es = Xs'' @ [Y]", "by simp"], ["proof (state)\nthis:\n  D # E # Es = Xs'' @ [Y]\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with Xs''"], ["proof (chain)\npicking this:\n  Xs'' = Xs @ [X]\n  D # E # Es = Xs'' @ [Y]", "have \"D#E#Es = Xs@[X]@[Y]\""], ["proof (prove)\nusing this:\n  Xs'' = Xs @ [X]\n  D # E # Es = Xs'' @ [Y]\n\ngoal (1 subgoal):\n 1. D # E # Es = Xs @ [X] @ [Y]", "by simp"], ["proof (state)\nthis:\n  D # E # Es = Xs @ [X] @ [Y]\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with suboDE"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # E # Es)\n  D # E # Es = Xs @ [X] @ [Y]", "have \"is_subobj P ((D,Xs@[X,Y]))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # E # Es)\n  D # E # Es = Xs @ [X] @ [Y]\n\ngoal (1 subgoal):\n 1. is_subobj P (D, Xs @ [X, Y])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, Xs @ [X, Y])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "hence subR:\"P \\<turnstile> X \\<prec>\\<^sub>R Y\""], ["proof (prove)\nusing this:\n  is_subobj P (D, Xs @ [X, Y])\n\ngoal (1 subgoal):\n 1. P \\<turnstile> X \\<prec>\\<^sub>R Y", "by(rule_tac Cs=\"Xs\" and Cs'=\"[]\" in isSubobjs_subclsR) simp"], ["proof (state)\nthis:\n  P \\<turnstile> X \\<prec>\\<^sub>R Y\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "from E_Es Es"], ["proof (chain)\npicking this:\n  rev (C' # Cs') = E # Es\n  Es = tl (rev (C' # Cs'))", "have \"last (D#E#Es) = C'\""], ["proof (prove)\nusing this:\n  rev (C' # Cs') = E # Es\n  Es = tl (rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. last (D # E # Es) = C'", "by simp"], ["proof (state)\nthis:\n  last (D # E # Es) = C'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with subR lb l butlast"], ["proof (chain)\npicking this:\n  P \\<turnstile> X \\<prec>\\<^sub>R Y\n  X = last (butlast (D # E # Es))\n  Y = last (D # E # Es)\n  butlast (D # E # Es) = D # rev Cs'\n  last (D # E # Es) = C'", "have \"P \\<turnstile> last(D#rev Cs') \\<prec>\\<^sub>R C'\""], ["proof (prove)\nusing this:\n  P \\<turnstile> X \\<prec>\\<^sub>R Y\n  X = last (butlast (D # E # Es))\n  Y = last (D # E # Es)\n  butlast (D # E # Es) = D # rev Cs'\n  last (D # E # Es) = C'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> last (D # rev Cs') \\<prec>\\<^sub>R C'", "by (auto split:if_split_asm)"], ["proof (state)\nthis:\n  P \\<turnstile> last (D # rev Cs') \\<prec>\\<^sub>R C'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, C # D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, C # D # rev (a # Cs))", "with suboCD"], ["proof (chain)\npicking this:\n  is_subobj P (C, C # D # rev Cs')\n  P \\<turnstile> last (D # rev Cs') \\<prec>\\<^sub>R C'", "show ?case"], ["proof (prove)\nusing this:\n  is_subobj P (C, C # D # rev Cs')\n  P \\<turnstile> last (D # rev Cs') \\<prec>\\<^sub>R C'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # rev (C' # Cs'))", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C # D # rev (C' # Cs'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma build_rec_isSubobj:\nassumes 1:\"is_subobj P ((D,D#Cs))\" and 2:\" P \\<turnstile> C \\<prec>\\<^sub>R D\" \nshows \"is_subobj P ((C,C#D#Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # Cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # Cs)", "obtain Cs' where Cs':\"Cs' = rev Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Cs'. Cs' = rev Cs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # Cs)", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # Cs)\n  Cs' = rev Cs", "have \"is_subobj P ((D,D#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # Cs)\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (D, D # rev Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # Cs)", "with 2"], ["proof (chain)\npicking this:\n  P \\<turnstile> C \\<prec>\\<^sub>R D\n  is_subobj P (D, D # rev Cs')", "have \"is_subobj P ((C,C#D#rev Cs'))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<prec>\\<^sub>R D\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # rev Cs')", "by - (rule build_rec_isSubobj_rev)"], ["proof (state)\nthis:\n  is_subobj P (C, C # D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # Cs)", "with Cs'"], ["proof (chain)\npicking this:\n  Cs' = rev Cs\n  is_subobj P (C, C # D # rev Cs')", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs' = rev Cs\n  is_subobj P (C, C # D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, C # D # Cs)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, C # D # Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isSubobj_isSubobj_isSubobj_rev:\nassumes 1:\"is_subobj P ((C,[D]))\" and 2:\"is_subobj P ((D,D#(rev Cs)))\" \nshows \"is_subobj P ((C,D#(rev Cs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev Cs)", "using 2"], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs)\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev Cs)", "proof (induct Cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_subobj P (D, D # rev []) \\<Longrightarrow>\n    is_subobj P (C, D # rev [])\n 2. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "case Nil"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev [])\n\ngoal (2 subgoals):\n 1. is_subobj P (D, D # rev []) \\<Longrightarrow>\n    is_subobj P (C, D # rev [])\n 2. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, [D])\n  is_subobj P (D, D # rev [])", "show ?case"], ["proof (prove)\nusing this:\n  is_subobj P (C, [D])\n  is_subobj P (D, D # rev [])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev [])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, D # rev [])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "case (Cons C' Cs')"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, D # rev Cs')\n  is_subobj P (D, D # rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "have IH:\"is_subobj P ((D,D#rev Cs')) \\<Longrightarrow> is_subobj P ((C,D#rev Cs'))\"\n    and \"is_subobj P ((D,D#rev (C'#Cs')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n     is_subobj P (C, D # rev Cs')) &&&\n    is_subobj P (D, D # rev (C' # Cs'))", "by fact+"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, D # rev Cs')\n  is_subobj P (D, D # rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "hence suboD:\"is_subobj P ((D,D#rev Cs'@[C']))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, D # rev Cs')\n  is_subobj P (D, D # rev (C' # Cs'))\n\ngoal (1 subgoal):\n 1. is_subobj P (D, D # rev Cs' @ [C'])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs' @ [C'])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "hence \"is_subobj P ((D,D#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs' @ [C'])\n\ngoal (1 subgoal):\n 1. is_subobj P (D, D # rev Cs')", "by (rule subobj_aux_rev)"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "with IH"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, D # rev Cs')\n  is_subobj P (D, D # rev Cs')", "have suboC:\"is_subobj P ((C,D#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs') \\<Longrightarrow>\n  is_subobj P (C, D # rev Cs')\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "obtain C'' where C'': \"C'' = last (D # rev Cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C''.\n        C'' = last (D # rev Cs') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  C'' = last (D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "moreover"], ["proof (state)\nthis:\n  C'' = last (D # rev Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "have \"D # rev Cs' = butlast (D # rev Cs') @ [last (D # rev Cs')]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D # rev Cs' = butlast (D # rev Cs') @ [last (D # rev Cs')]", "by (rule append_butlast_last_id [symmetric]) simp"], ["proof (state)\nthis:\n  D # rev Cs' = butlast (D # rev Cs') @ [last (D # rev Cs')]\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "ultimately"], ["proof (chain)\npicking this:\n  C'' = last (D # rev Cs')\n  D # rev Cs' = butlast (D # rev Cs') @ [last (D # rev Cs')]", "have butlast: \"D # rev Cs' = butlast (D  #rev Cs') @ [C'']\""], ["proof (prove)\nusing this:\n  C'' = last (D # rev Cs')\n  D # rev Cs' = butlast (D # rev Cs') @ [last (D # rev Cs')]\n\ngoal (1 subgoal):\n 1. D # rev Cs' = butlast (D # rev Cs') @ [C'']", "by simp"], ["proof (state)\nthis:\n  D # rev Cs' = butlast (D # rev Cs') @ [C'']\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "hence butlast2:\"D#rev Cs'@[C'] = butlast(D#rev Cs')@[C'']@[C']\""], ["proof (prove)\nusing this:\n  D # rev Cs' = butlast (D # rev Cs') @ [C'']\n\ngoal (1 subgoal):\n 1. D # rev Cs' @ [C'] = butlast (D # rev Cs') @ [C''] @ [C']", "by simp"], ["proof (state)\nthis:\n  D # rev Cs' @ [C'] = butlast (D # rev Cs') @ [C''] @ [C']\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "with suboD"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # rev Cs' @ [C'])\n  D # rev Cs' @ [C'] = butlast (D # rev Cs') @ [C''] @ [C']", "have \"is_subobj P ((D,butlast(D#rev Cs')@[C'']@[C']))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # rev Cs' @ [C'])\n  D # rev Cs' @ [C'] = butlast (D # rev Cs') @ [C''] @ [C']\n\ngoal (1 subgoal):\n 1. is_subobj P (D, butlast (D # rev Cs') @ [C''] @ [C'])", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, butlast (D # rev Cs') @ [C''] @ [C'])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "with C''"], ["proof (chain)\npicking this:\n  C'' = last (D # rev Cs')\n  is_subobj P (D, butlast (D # rev Cs') @ [C''] @ [C'])", "have subR:\"P \\<turnstile> C'' \\<prec>\\<^sub>R C'\""], ["proof (prove)\nusing this:\n  C'' = last (D # rev Cs')\n  is_subobj P (D, butlast (D # rev Cs') @ [C''] @ [C'])\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C'' \\<prec>\\<^sub>R C'", "by (rule_tac Cs=\"butlast(D#rev Cs')\" and Cs'=\"[]\" in isSubobjs_subclsR)simp"], ["proof (state)\nthis:\n  P \\<turnstile> C'' \\<prec>\\<^sub>R C'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "with C'' suboC butlast"], ["proof (chain)\npicking this:\n  C'' = last (D # rev Cs')\n  is_subobj P (C, D # rev Cs')\n  D # rev Cs' = butlast (D # rev Cs') @ [C'']\n  P \\<turnstile> C'' \\<prec>\\<^sub>R C'", "have \"is_subobj P ((C,butlast(D#rev Cs')@[C'']@[C']))\""], ["proof (prove)\nusing this:\n  C'' = last (D # rev Cs')\n  is_subobj P (C, D # rev Cs')\n  D # rev Cs' = butlast (D # rev Cs') @ [C'']\n  P \\<turnstile> C'' \\<prec>\\<^sub>R C'\n\ngoal (1 subgoal):\n 1. is_subobj P (C, butlast (D # rev Cs') @ [C''] @ [C'])", "by (auto intro:repSubobj_isSubobj simp del:butlast.simps)"], ["proof (state)\nthis:\n  is_subobj P (C, butlast (D # rev Cs') @ [C''] @ [C'])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "with butlast2"], ["proof (chain)\npicking this:\n  D # rev Cs' @ [C'] = butlast (D # rev Cs') @ [C''] @ [C']\n  is_subobj P (C, butlast (D # rev Cs') @ [C''] @ [C'])", "have \"is_subobj P ((C,D#rev Cs'@[C']))\""], ["proof (prove)\nusing this:\n  D # rev Cs' @ [C'] = butlast (D # rev Cs') @ [C''] @ [C']\n  is_subobj P (C, butlast (D # rev Cs') @ [C''] @ [C'])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev Cs' @ [C'])", "by (cases Cs')auto"], ["proof (state)\nthis:\n  is_subobj P (C, D # rev Cs' @ [C'])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>is_subobj P (D, D # rev Cs) \\<Longrightarrow>\n                is_subobj P (C, D # rev Cs);\n        is_subobj P (D, D # rev (a # Cs))\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # rev (a # Cs))", "thus ?case"], ["proof (prove)\nusing this:\n  is_subobj P (C, D # rev Cs' @ [C'])\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev (C' # Cs'))", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, D # rev (C' # Cs'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isSubobj_isSubobj_isSubobj:\nassumes 1:\"is_subobj P ((C,[D]))\" and 2:\"is_subobj P ((D,D#Cs))\" \nshows \"is_subobj P ((C,D#Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_subobj P (C, D # Cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_subobj P (C, D # Cs)", "obtain Cs' where Cs':\"Cs' = rev Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Cs'. Cs' = rev Cs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # Cs)", "with 2"], ["proof (chain)\npicking this:\n  is_subobj P (D, D # Cs)\n  Cs' = rev Cs", "have \"is_subobj P ((D,D#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (D, D # Cs)\n  Cs' = rev Cs\n\ngoal (1 subgoal):\n 1. is_subobj P (D, D # rev Cs')", "by simp"], ["proof (state)\nthis:\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # Cs)", "with 1"], ["proof (chain)\npicking this:\n  is_subobj P (C, [D])\n  is_subobj P (D, D # rev Cs')", "have \"is_subobj P ((C,D#rev Cs'))\""], ["proof (prove)\nusing this:\n  is_subobj P (C, [D])\n  is_subobj P (D, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # rev Cs')", "by - (rule isSubobj_isSubobj_isSubobj_rev)"], ["proof (state)\nthis:\n  is_subobj P (C, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # Cs)", "with Cs'"], ["proof (chain)\npicking this:\n  Cs' = rev Cs\n  is_subobj P (C, D # rev Cs')", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs' = rev Cs\n  is_subobj P (C, D # rev Cs')\n\ngoal (1 subgoal):\n 1. is_subobj P (C, D # Cs)", "by simp"], ["proof (state)\nthis:\n  is_subobj P (C, D # Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Subobject handling and lemmas\\<close>"], ["", "text\\<open>Subobjects consisting of repeated inheritance relations only:\\<close>"], ["", "inductive Subobjs\\<^sub>R :: \"prog \\<Rightarrow> cname \\<Rightarrow> path \\<Rightarrow> bool\" for P :: prog\nwhere\n  SubobjsR_Base: \"is_class P C \\<Longrightarrow> Subobjs\\<^sub>R P C [C]\"\n| SubobjsR_Rep: \"\\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs\\<rbrakk> \\<Longrightarrow> Subobjs\\<^sub>R P C (C # Cs)\""], ["", "text\\<open>All subobjects:\\<close>"], ["", "inductive Subobjs :: \"prog \\<Rightarrow> cname \\<Rightarrow> path \\<Rightarrow> bool\" for P :: prog\nwhere\n  Subobjs_Rep: \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> Subobjs P C Cs\"\n| Subobjs_Sh: \"\\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'; P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n             \\<Longrightarrow> Subobjs P C Cs\""], ["", "lemma Subobjs_Base:\"is_class P C \\<Longrightarrow> Subobjs P C [C]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C \\<Longrightarrow> Subobjs P C [C]", "by (fastforce intro:Subobjs_Rep SubobjsR_Base)"], ["", "lemma SubobjsR_nonempty: \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> Cs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C Cs \\<Longrightarrow> Cs \\<noteq> []", "by (induct rule: Subobjs\\<^sub>R.induct, simp_all)"], ["", "lemma Subobjs_nonempty: \"Subobjs P C Cs \\<Longrightarrow> Cs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C Cs \\<Longrightarrow> Cs \\<noteq> []", "by (erule Subobjs.induct)(erule SubobjsR_nonempty)+"], ["", "lemma hd_SubobjsR:\n  \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> \\<exists>Cs'. Cs = C#Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C Cs \\<Longrightarrow> \\<exists>Cs'. Cs = C # Cs'", "by(erule Subobjs\\<^sub>R.induct,simp+)"], ["", "lemma SubobjsR_subclassRep: \n  \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> (C,last Cs) \\<in> (subclsR P)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C Cs \\<Longrightarrow>\n    (C, last Cs) \\<in> (subclsR P)\\<^sup>*", "apply(erule Subobjs\\<^sub>R.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C.\n       is_class P C \\<Longrightarrow>\n       (C, last [C]) \\<in> (subclsR P)\\<^sup>*\n 2. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        (D, last Cs) \\<in> (subclsR P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (C, last (C # Cs)) \\<in> (subclsR P)\\<^sup>*", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        (D, last Cs) \\<in> (subclsR P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (C, last (C # Cs)) \\<in> (subclsR P)\\<^sup>*", "apply(simp add: SubobjsR_nonempty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SubobjsR_subclass: \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C Cs \\<Longrightarrow>\n    P \\<turnstile> C \\<preceq>\\<^sup>* last Cs", "apply(erule Subobjs\\<^sub>R.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C.\n       is_class P C \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* last [C]\n 2. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        P \\<turnstile> D \\<preceq>\\<^sup>* last Cs\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C # Cs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        P \\<turnstile> D \\<preceq>\\<^sup>* last Cs\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last (C # Cs)", "apply(simp add: SubobjsR_nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        P \\<turnstile> D \\<preceq>\\<^sup>* last Cs\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs", "apply(blast intro:subclsR_subcls1 rtrancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Subobjs_subclass: \"Subobjs P C Cs \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C Cs \\<Longrightarrow>\n    P \\<turnstile> C \\<preceq>\\<^sup>* last Cs", "apply(erule Subobjs.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C Cs.\n       Subobjs\\<^sub>R P C Cs \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* last Cs\n 2. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs", "apply(erule SubobjsR_subclass)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* last Cs", "apply(erule rtrancl_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C' \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C' \\<preceq>\\<^sup>* last Cs", "apply(blast intro:subclsS_subcls1 SubobjsR_subclass rtrancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Subobjs_notSubobjsR:\n  \"\\<lbrakk>Subobjs P C Cs; \\<not> Subobjs\\<^sub>R P C Cs\\<rbrakk>\n\\<Longrightarrow> \\<exists>C' D. P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<and> P \\<turnstile> C' \\<prec>\\<^sub>S D \\<and> Subobjs\\<^sub>R P D Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Subobjs P C Cs; \\<not> Subobjs\\<^sub>R P C Cs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C' D.\n                         P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<and>\n                         P \\<turnstile> C' \\<prec>\\<^sub>S D \\<and>\n                         Subobjs\\<^sub>R P D Cs", "apply (induct rule: Subobjs.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P C Cs;\n        \\<not> Subobjs\\<^sub>R P C Cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C' D.\n                            P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<and>\n                            P \\<turnstile> C' \\<prec>\\<^sub>S D \\<and>\n                            Subobjs\\<^sub>R P D Cs\n 2. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs;\n        \\<not> Subobjs\\<^sub>R P C Cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C' D.\n                            P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<and>\n                            P \\<turnstile> C' \\<prec>\\<^sub>S D \\<and>\n                            Subobjs\\<^sub>R P D Cs", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs;\n        \\<not> Subobjs\\<^sub>R P C Cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C' D.\n                            P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<and>\n                            P \\<turnstile> C' \\<prec>\\<^sub>S D \\<and>\n                            Subobjs\\<^sub>R P D Cs", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma assumes subo:\"Subobjs\\<^sub>R P (hd (Cs@ C'#Cs')) (Cs@ C'#Cs')\"\n  shows SubobjsR_Subobjs:\"Subobjs P C' (C'#Cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C' (C' # Cs')", "using subo"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd (Cs @ C' # Cs')) (Cs @ C' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C' (C' # Cs')", "proof (induct Cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. Subobjs\\<^sub>R P (hd ([] @ C' # Cs')) ([] @ C' # Cs') \\<Longrightarrow>\n    Subobjs P C' (C' # Cs')\n 2. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "case Nil"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd ([] @ C' # Cs')) ([] @ C' # Cs')\n\ngoal (2 subgoals):\n 1. Subobjs\\<^sub>R P (hd ([] @ C' # Cs')) ([] @ C' # Cs') \\<Longrightarrow>\n    Subobjs P C' (C' # Cs')\n 2. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "thus ?case"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd ([] @ C' # Cs')) ([] @ C' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C' (C' # Cs')", "by -(frule hd_SubobjsR,fastforce intro:Subobjs_Rep)"], ["proof (state)\nthis:\n  Subobjs P C' (C' # Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "case (Cons D Ds)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs') \\<Longrightarrow>\n  Subobjs P C' (C' # Cs')\n  Subobjs\\<^sub>R P (hd ((D # Ds) @ C' # Cs')) ((D # Ds) @ C' # Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "have subo':\"Subobjs\\<^sub>R P (hd ((D#Ds) @ C'#Cs')) ((D#Ds) @ C'#Cs')\"\n    and IH:\"Subobjs\\<^sub>R P (hd (Ds @ C'#Cs')) (Ds @ C'#Cs') \\<Longrightarrow> Subobjs P C' (C'#Cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd ((D # Ds) @ C' # Cs')) ((D # Ds) @ C' # Cs') &&&\n    (Subobjs\\<^sub>R P (hd (Ds @ C' # Cs'))\n      (Ds @ C' # Cs') \\<Longrightarrow>\n     Subobjs P C' (C' # Cs'))", "by fact+"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd ((D # Ds) @ C' # Cs')) ((D # Ds) @ C' # Cs')\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs') \\<Longrightarrow>\n  Subobjs P C' (C' # Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "from subo'"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P (hd ((D # Ds) @ C' # Cs')) ((D # Ds) @ C' # Cs')", "have \"Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd ((D # Ds) @ C' # Cs')) ((D # Ds) @ C' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd ((D # Ds) @ C' # Cs'))\n     ((D # Ds) @ C' # Cs') \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')", "apply (drule Subobjs\\<^sub>R.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>hd ((D # Ds) @ C' # Cs') = C; (D # Ds) @ C' # Cs' = [C];\n        is_class P C\\<rbrakk>\n       \\<Longrightarrow> ?Pa1\n 2. \\<And>C Da Cs.\n       \\<lbrakk>hd ((D # Ds) @ C' # Cs') = C; (D # Ds) @ C' # Cs' = C # Cs;\n        P \\<turnstile> C \\<prec>\\<^sub>R Da;\n        Subobjs\\<^sub>R P Da Cs\\<rbrakk>\n       \\<Longrightarrow> ?Pa1\n 3. ?Pa1 \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da.\n       \\<lbrakk>P \\<turnstile> D \\<prec>\\<^sub>R Da;\n        Subobjs\\<^sub>R P Da (Ds @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (Ds @ C' # Cs'))\n                          (Ds @ C' # Cs')", "apply (rename_tac D')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D'.\n       \\<lbrakk>P \\<turnstile> D \\<prec>\\<^sub>R D';\n        Subobjs\\<^sub>R P D' (Ds @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (Ds @ C' # Cs'))\n                          (Ds @ C' # Cs')", "apply (subgoal_tac \"D' = hd (Ds @ C' # Cs')\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D'.\n       \\<lbrakk>P \\<turnstile> D \\<prec>\\<^sub>R D';\n        Subobjs\\<^sub>R P D' (Ds @ C' # Cs');\n        D' = hd (Ds @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (Ds @ C' # Cs'))\n                          (Ds @ C' # Cs')\n 2. \\<And>D'.\n       \\<lbrakk>P \\<turnstile> D \\<prec>\\<^sub>R D';\n        Subobjs\\<^sub>R P D' (Ds @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> D' = hd (Ds @ C' # Cs')", "apply (auto dest:hd_SubobjsR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>Subobjs\\<^sub>R P (hd (Cs @ C' # Cs'))\n                 (Cs @ C' # Cs') \\<Longrightarrow>\n                Subobjs P C' (C' # Cs');\n        Subobjs\\<^sub>R P (hd ((a # Cs) @ C' # Cs'))\n         ((a # Cs) @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "with IH"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs') \\<Longrightarrow>\n  Subobjs P C' (C' # Cs')\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')", "show ?case"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs') \\<Longrightarrow>\n  Subobjs P C' (C' # Cs')\n  Subobjs\\<^sub>R P (hd (Ds @ C' # Cs')) (Ds @ C' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C' (C' # Cs')", "by simp"], ["proof (state)\nthis:\n  Subobjs P C' (C' # Cs')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subobjs_Subobjs:\"Subobjs P C (Cs@ C'#Cs') \\<Longrightarrow> Subobjs P C' (C'#Cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ C' # Cs') \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ C' # Cs') \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply (drule Subobjs.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ca Csa.\n       \\<lbrakk>C = Ca; Cs @ C' # Cs' = Csa;\n        Subobjs\\<^sub>R P Ca Csa\\<rbrakk>\n       \\<Longrightarrow> ?Pa\n 2. \\<And>Ca C'a D Csa.\n       \\<lbrakk>C = Ca; Cs @ C' # Cs' = Csa;\n        P \\<turnstile> Ca \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D Csa\\<rbrakk>\n       \\<Longrightarrow> ?Pa\n 3. ?Pa \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. Subobjs\\<^sub>R P C (Cs @ C' # Cs') \\<Longrightarrow>\n    Subobjs P C' (C' # Cs')\n 2. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply (subgoal_tac \"C = hd(Cs @ C' # Cs')\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P C (Cs @ C' # Cs');\n     C = hd (Cs @ C' # Cs')\\<rbrakk>\n    \\<Longrightarrow> Subobjs P C' (C' # Cs')\n 2. Subobjs\\<^sub>R P C (Cs @ C' # Cs') \\<Longrightarrow>\n    C = hd (Cs @ C' # Cs')\n 3. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply (fastforce intro:SubobjsR_Subobjs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Subobjs\\<^sub>R P C (Cs @ C' # Cs') \\<Longrightarrow>\n    C = hd (Cs @ C' # Cs')\n 2. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply (fastforce dest:hd_SubobjsR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')", "apply (subgoal_tac \"D = hd(Cs @ C' # Cs')\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs'); D = hd (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C' (C' # Cs')\n 2. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> D = hd (Cs @ C' # Cs')", "apply (fastforce intro:SubobjsR_Subobjs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C'a D.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'a;\n        P \\<turnstile> C'a \\<prec>\\<^sub>S D;\n        Subobjs\\<^sub>R P D (Cs @ C' # Cs')\\<rbrakk>\n       \\<Longrightarrow> D = hd (Cs @ C' # Cs')", "apply (fastforce dest:hd_SubobjsR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SubobjsR_isClass:\nassumes subo:\"Subobjs\\<^sub>R P C Cs\"\nshows \"is_class P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C", "using subo"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C Cs\n\ngoal (1 subgoal):\n 1. is_class P C", "proof (induct rule:Subobjs\\<^sub>R.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C. is_class P C \\<Longrightarrow> is_class P C\n 2. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        is_class P D\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "case SubobjsR_Base"], ["proof (state)\nthis:\n  is_class P C_\n\ngoal (2 subgoals):\n 1. \\<And>C. is_class P C \\<Longrightarrow> is_class P C\n 2. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        is_class P D\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "thus ?case"], ["proof (prove)\nusing this:\n  is_class P C_\n\ngoal (1 subgoal):\n 1. is_class P C_", "by assumption"], ["proof (state)\nthis:\n  is_class P C_\n\ngoal (1 subgoal):\n 1. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        is_class P D\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        is_class P D\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "case SubobjsR_Rep"], ["proof (state)\nthis:\n  P \\<turnstile> C_ \\<prec>\\<^sub>R D_\n  Subobjs\\<^sub>R P D_ Cs_\n  is_class P D_\n\ngoal (1 subgoal):\n 1. \\<And>C D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<prec>\\<^sub>R D; Subobjs\\<^sub>R P D Cs;\n        is_class P D\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "thus ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile> C_ \\<prec>\\<^sub>R D_\n  Subobjs\\<^sub>R P D_ Cs_\n  is_class P D_\n\ngoal (1 subgoal):\n 1. is_class P C_", "by (fastforce intro:subclsR_subcls1 subcls1_class)"], ["proof (state)\nthis:\n  is_class P C_\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subobjs_isClass:\nassumes subo:\"Subobjs P C Cs\"\nshows \"is_class P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C", "using subo"], ["proof (prove)\nusing this:\n  Subobjs P C Cs\n\ngoal (1 subgoal):\n 1. is_class P C", "proof (induct rule:Subobjs.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C Cs. Subobjs\\<^sub>R P C Cs \\<Longrightarrow> is_class P C\n 2. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "case Subobjs_Rep"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C_ Cs_\n\ngoal (2 subgoals):\n 1. \\<And>C Cs. Subobjs\\<^sub>R P C Cs \\<Longrightarrow> is_class P C\n 2. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "thus ?case"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C_ Cs_\n\ngoal (1 subgoal):\n 1. is_class P C_", "by (rule SubobjsR_isClass)"], ["proof (state)\nthis:\n  is_class P C_\n\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "case (Subobjs_Sh C C' D Cs)"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C'\n  P \\<turnstile> C' \\<prec>\\<^sub>S D\n  Subobjs\\<^sub>R P D Cs\n\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "have leq:\"P \\<turnstile> C \\<preceq>\\<^sup>* C'\" and leqS:\"P \\<turnstile> C' \\<prec>\\<^sub>S D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* C' &&&\n    P \\<turnstile> C' \\<prec>\\<^sub>S D", "by fact+"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C'\n  P \\<turnstile> C' \\<prec>\\<^sub>S D\n\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "hence \"(C,D) \\<in> (subcls1 P)\\<^sup>+\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C'\n  P \\<turnstile> C' \\<prec>\\<^sub>S D\n\ngoal (1 subgoal):\n 1. (C, D) \\<in> (subcls1 P)\\<^sup>+", "by (fastforce intro:rtrancl_into_trancl1 subclsS_subcls1)"], ["proof (state)\nthis:\n  (C, D) \\<in> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>C C' D Cs.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n       \\<Longrightarrow> is_class P C", "thus ?case"], ["proof (prove)\nusing this:\n  (C, D) \\<in> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. is_class P C", "by (induct rule:trancl_induct, fastforce intro:subcls1_class)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subobjs_subclsR:\nassumes subo:\"Subobjs P C (Cs@[D,D']@Cs')\"\nshows \"P \\<turnstile> D \\<prec>\\<^sub>R D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "using subo"], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ [D, D'] @ Cs')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ [D, D'] @ Cs') \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'", "from subo"], ["proof (chain)\npicking this:\n  Subobjs P C (Cs @ [D, D'] @ Cs')", "have \"Subobjs P D (D#D'#Cs')\""], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ [D, D'] @ Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P D (D # D' # Cs')", "by -(rule Subobjs_Subobjs,simp)"], ["proof (state)\nthis:\n  Subobjs P D (D # D' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ [D, D'] @ Cs') \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'", "then"], ["proof (chain)\npicking this:\n  Subobjs P D (D # D' # Cs')", "obtain C' where subo':\"Subobjs\\<^sub>R P C' (D#D'#Cs')\""], ["proof (prove)\nusing this:\n  Subobjs P D (D # D' # Cs')\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        Subobjs\\<^sub>R P C' (D # D' # Cs') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (induct rule:Subobjs.induct,blast+)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C' (D # D' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ [D, D'] @ Cs') \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'", "hence \"C' = D\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C' (D # D' # Cs')\n\ngoal (1 subgoal):\n 1. C' = D", "by -(drule hd_SubobjsR,simp)"], ["proof (state)\nthis:\n  C' = D\n\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ [D, D'] @ Cs') \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'", "with subo'"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P C' (D # D' # Cs')\n  C' = D", "have \"Subobjs\\<^sub>R P D (D#D'#Cs')\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C' (D # D' # Cs')\n  C' = D\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P D (D # D' # Cs')", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P D (D # D' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ [D, D'] @ Cs') \\<Longrightarrow>\n    P \\<turnstile> D \\<prec>\\<^sub>R D'", "thus ?thesis"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P D (D # D' # Cs')\n\ngoal (1 subgoal):\n 1. P \\<turnstile> D \\<prec>\\<^sub>R D'", "by (fastforce elim:Subobjs\\<^sub>R.cases dest:hd_SubobjsR)"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<prec>\\<^sub>R D'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes subo:\"Subobjs\\<^sub>R P (hd Cs) (Cs@[D])\" and notempty:\"Cs \\<noteq> []\"\n  shows butlast_Subobjs_Rep:\"Subobjs\\<^sub>R P (hd Cs) Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd Cs) Cs", "using subo notempty"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd Cs) (Cs @ [D])\n  Cs \\<noteq> []\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd Cs) Cs", "proof (induct Cs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P (hd []) ([] @ [D]); [] \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> Subobjs\\<^sub>R P (hd []) []\n 2. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "case Nil"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd []) ([] @ [D])\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P (hd []) ([] @ [D]); [] \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> Subobjs\\<^sub>R P (hd []) []\n 2. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "thus ?case"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd []) ([] @ [D])\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd []) []", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd []) []\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "case (Cons C' Cs')"], ["proof (state)\nthis:\n  \\<lbrakk>Subobjs\\<^sub>R P (hd Cs') (Cs' @ [D]); Cs' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs') Cs'\n  Subobjs\\<^sub>R P (hd (C' # Cs')) ((C' # Cs') @ [D])\n  C' # Cs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "have subo:\"Subobjs\\<^sub>R P (hd(C'#Cs')) ((C'#Cs')@[D])\"\n    and IH:\"\\<lbrakk>Subobjs\\<^sub>R P (hd Cs') (Cs'@[D]); Cs' \\<noteq> []\\<rbrakk> \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs') Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd (C' # Cs')) ((C' # Cs') @ [D]) &&&\n    (\\<lbrakk>Subobjs\\<^sub>R P (hd Cs') (Cs' @ [D]);\n      Cs' \\<noteq> []\\<rbrakk>\n     \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs') Cs')", "by fact+"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd (C' # Cs')) ((C' # Cs') @ [D])\n  \\<lbrakk>Subobjs\\<^sub>R P (hd Cs') (Cs' @ [D]); Cs' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs') Cs'\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "from subo"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P (hd (C' # Cs')) ((C' # Cs') @ [D])", "have subo':\"Subobjs\\<^sub>R P C' (C'#Cs'@[D])\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P (hd (C' # Cs')) ((C' # Cs') @ [D])\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C' (C' # Cs' @ [D])", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C' (C' # Cs' @ [D])\n\ngoal (1 subgoal):\n 1. \\<And>a Cs.\n       \\<lbrakk>\\<lbrakk>Subobjs\\<^sub>R P (hd Cs) (Cs @ [D]);\n                 Cs \\<noteq> []\\<rbrakk>\n                \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs) Cs;\n        Subobjs\\<^sub>R P (hd (a # Cs)) ((a # Cs) @ [D]);\n        a # Cs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> Subobjs\\<^sub>R P (hd (a # Cs)) (a # Cs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "proof (cases \"Cs' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Cs' = [] \\<Longrightarrow> Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n 2. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "case True"], ["proof (state)\nthis:\n  Cs' = []\n\ngoal (2 subgoals):\n 1. Cs' = [] \\<Longrightarrow> Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n 2. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "with subo'"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P C' (C' # Cs' @ [D])\n  Cs' = []", "have \"Subobjs\\<^sub>R P C' [C',D]\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C' (C' # Cs' @ [D])\n  Cs' = []\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C' [C', D]", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C' [C', D]\n\ngoal (2 subgoals):\n 1. Cs' = [] \\<Longrightarrow> Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n 2. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "hence \"is_class P C'\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C' [C', D]\n\ngoal (1 subgoal):\n 1. is_class P C'", "by(rule SubobjsR_isClass)"], ["proof (state)\nthis:\n  is_class P C'\n\ngoal (2 subgoals):\n 1. Cs' = [] \\<Longrightarrow> Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n 2. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "hence \"Subobjs\\<^sub>R P C' [C']\""], ["proof (prove)\nusing this:\n  is_class P C'\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C' [C']", "by (rule SubobjsR_Base)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C' [C']\n\ngoal (2 subgoals):\n 1. Cs' = [] \\<Longrightarrow> Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n 2. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "with True"], ["proof (chain)\npicking this:\n  Cs' = []\n  Subobjs\\<^sub>R P C' [C']", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs' = []\n  Subobjs\\<^sub>R P C' [C']\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "case False"], ["proof (state)\nthis:\n  Cs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "with subo'"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P C' (C' # Cs' @ [D])\n  Cs' \\<noteq> []", "obtain D' where subo'':\"Subobjs\\<^sub>R P D' (Cs'@[D])\"\n      and subR:\"P \\<turnstile> C' \\<prec>\\<^sub>R D'\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C' (C' # Cs' @ [D])\n  Cs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>D'.\n        \\<lbrakk>Subobjs\\<^sub>R P D' (Cs' @ [D]);\n         P \\<turnstile> C' \\<prec>\\<^sub>R D'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:Subobjs\\<^sub>R.cases)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P D' (Cs' @ [D])\n  P \\<turnstile> C' \\<prec>\\<^sub>R D'\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "from False subo''"], ["proof (chain)\npicking this:\n  Cs' \\<noteq> []\n  Subobjs\\<^sub>R P D' (Cs' @ [D])", "have hd:\"D' = hd Cs'\""], ["proof (prove)\nusing this:\n  Cs' \\<noteq> []\n  Subobjs\\<^sub>R P D' (Cs' @ [D])\n\ngoal (1 subgoal):\n 1. D' = hd Cs'", "by (induct Cs',auto dest:hd_SubobjsR)"], ["proof (state)\nthis:\n  D' = hd Cs'\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "with subo'' False IH"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P D' (Cs' @ [D])\n  Cs' \\<noteq> []\n  \\<lbrakk>Subobjs\\<^sub>R P (hd Cs') (Cs' @ [D]); Cs' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs') Cs'\n  D' = hd Cs'", "have \"Subobjs\\<^sub>R P (hd Cs') Cs'\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P D' (Cs' @ [D])\n  Cs' \\<noteq> []\n  \\<lbrakk>Subobjs\\<^sub>R P (hd Cs') (Cs' @ [D]); Cs' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> Subobjs\\<^sub>R P (hd Cs') Cs'\n  D' = hd Cs'\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd Cs') Cs'", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd Cs') Cs'\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "with subR hd"], ["proof (chain)\npicking this:\n  P \\<turnstile> C' \\<prec>\\<^sub>R D'\n  D' = hd Cs'\n  Subobjs\\<^sub>R P (hd Cs') Cs'", "have \"Subobjs\\<^sub>R P C' (C'#Cs')\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C' \\<prec>\\<^sub>R D'\n  D' = hd Cs'\n  Subobjs\\<^sub>R P (hd Cs') Cs'\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C' (C' # Cs')", "by (fastforce intro:SubobjsR_Rep)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C' (C' # Cs')\n\ngoal (1 subgoal):\n 1. Cs' \\<noteq> [] \\<Longrightarrow>\n    Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "thus ?thesis"], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C' (C' # Cs')\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')", "by simp"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd (C' # Cs')) (C' # Cs')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes subo:\"Subobjs P C (Cs@[D])\" and notempty:\"Cs \\<noteq> []\"\n  shows butlast_Subobjs:\"Subobjs P C Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "using subo"], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ [D])\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "proof (rule Subobjs.cases,auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P C (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n    \\<Longrightarrow> Subobjs P C Cs\n 2. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "assume suboR:\"Subobjs\\<^sub>R P C (Cs@[D])\" and \"Subobjs P C (Cs@[D])\""], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P C (Cs @ [D])\n  Subobjs P C (Cs @ [D])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P C (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n    \\<Longrightarrow> Subobjs P C Cs\n 2. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "from suboR notempty"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P C (Cs @ [D])\n  Cs \\<noteq> []", "have hd:\"C = hd Cs\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C (Cs @ [D])\n  Cs \\<noteq> []\n\ngoal (1 subgoal):\n 1. C = hd Cs", "by (induct Cs,auto dest:hd_SubobjsR)"], ["proof (state)\nthis:\n  C = hd Cs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P C (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n    \\<Longrightarrow> Subobjs P C Cs\n 2. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "with suboR notempty"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P C (Cs @ [D])\n  Cs \\<noteq> []\n  C = hd Cs", "have \"Subobjs\\<^sub>R P (hd Cs) Cs\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P C (Cs @ [D])\n  Cs \\<noteq> []\n  C = hd Cs\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd Cs) Cs", "by(fastforce intro:butlast_Subobjs_Rep)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd Cs) Cs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Subobjs\\<^sub>R P C (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n    \\<Longrightarrow> Subobjs P C Cs\n 2. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "with hd"], ["proof (chain)\npicking this:\n  C = hd Cs\n  Subobjs\\<^sub>R P (hd Cs) Cs", "show \"Subobjs P C Cs\""], ["proof (prove)\nusing this:\n  C = hd Cs\n  Subobjs\\<^sub>R P (hd Cs) Cs\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "by (fastforce intro:Subobjs_Rep)"], ["proof (state)\nthis:\n  Subobjs P C Cs\n\ngoal (1 subgoal):\n 1. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "fix C' D'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "assume leq:\"P \\<turnstile> C \\<preceq>\\<^sup>* C'\" and subS:\"P \\<turnstile> C' \\<prec>\\<^sub>S D'\"\n  and suboR:\"Subobjs\\<^sub>R P D' (Cs@[D])\" and \"Subobjs P C (Cs@[D])\""], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C'\n  P \\<turnstile> C' \\<prec>\\<^sub>S D'\n  Subobjs\\<^sub>R P D' (Cs @ [D])\n  Subobjs P C (Cs @ [D])\n\ngoal (1 subgoal):\n 1. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "from suboR notempty"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P D' (Cs @ [D])\n  Cs \\<noteq> []", "have hd:\"D' = hd Cs\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P D' (Cs @ [D])\n  Cs \\<noteq> []\n\ngoal (1 subgoal):\n 1. D' = hd Cs", "by (induct Cs,auto dest:hd_SubobjsR)"], ["proof (state)\nthis:\n  D' = hd Cs\n\ngoal (1 subgoal):\n 1. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "with suboR notempty"], ["proof (chain)\npicking this:\n  Subobjs\\<^sub>R P D' (Cs @ [D])\n  Cs \\<noteq> []\n  D' = hd Cs", "have \"Subobjs\\<^sub>R P (hd Cs) Cs\""], ["proof (prove)\nusing this:\n  Subobjs\\<^sub>R P D' (Cs @ [D])\n  Cs \\<noteq> []\n  D' = hd Cs\n\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P (hd Cs) Cs", "by(fastforce intro:butlast_Subobjs_Rep)"], ["proof (state)\nthis:\n  Subobjs\\<^sub>R P (hd Cs) Cs\n\ngoal (1 subgoal):\n 1. \\<And>C' Da.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S Da;\n        Subobjs\\<^sub>R P Da (Cs @ [D]); Subobjs P C (Cs @ [D])\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "with hd leq subS"], ["proof (chain)\npicking this:\n  D' = hd Cs\n  P \\<turnstile> C \\<preceq>\\<^sup>* C'\n  P \\<turnstile> C' \\<prec>\\<^sub>S D'\n  Subobjs\\<^sub>R P (hd Cs) Cs", "show \"Subobjs P C Cs\""], ["proof (prove)\nusing this:\n  D' = hd Cs\n  P \\<turnstile> C \\<preceq>\\<^sup>* C'\n  P \\<turnstile> C' \\<prec>\\<^sub>S D'\n  Subobjs\\<^sub>R P (hd Cs) Cs\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "by(fastforce intro:Subobjs_Sh)"], ["proof (state)\nthis:\n  Subobjs P C Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes subo:\"Subobjs P C (Cs@(rev Cs'))\" and notempty:\"Cs \\<noteq> []\"\n  shows rev_appendSubobj:\"Subobjs P C Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "using subo"], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ rev Cs')\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "proof(induct Cs')"], ["proof (state)\ngoal (2 subgoals):\n 1. Subobjs P C (Cs @ rev []) \\<Longrightarrow> Subobjs P C Cs\n 2. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "case Nil"], ["proof (state)\nthis:\n  Subobjs P C (Cs @ rev [])\n\ngoal (2 subgoals):\n 1. Subobjs P C (Cs @ rev []) \\<Longrightarrow> Subobjs P C Cs\n 2. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "thus ?case"], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ rev [])\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "by simp"], ["proof (state)\nthis:\n  Subobjs P C Cs\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "case (Cons D Ds)"], ["proof (state)\nthis:\n  Subobjs P C (Cs @ rev Ds) \\<Longrightarrow> Subobjs P C Cs\n  Subobjs P C (Cs @ rev (D # Ds))\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "have subo':\"Subobjs P C (Cs@rev(D#Ds))\"\n    and IH:\"Subobjs P C (Cs@rev Ds) \\<Longrightarrow> Subobjs P C Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ rev (D # Ds)) &&&\n    (Subobjs P C (Cs @ rev Ds) \\<Longrightarrow> Subobjs P C Cs)", "by fact+"], ["proof (state)\nthis:\n  Subobjs P C (Cs @ rev (D # Ds))\n  Subobjs P C (Cs @ rev Ds) \\<Longrightarrow> Subobjs P C Cs\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "from notempty subo'"], ["proof (chain)\npicking this:\n  Cs \\<noteq> []\n  Subobjs P C (Cs @ rev (D # Ds))", "have \"Subobjs P C (Cs@rev Ds)\""], ["proof (prove)\nusing this:\n  Cs \\<noteq> []\n  Subobjs P C (Cs @ rev (D # Ds))\n\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ rev Ds)", "by (fastforce intro:butlast_Subobjs)"], ["proof (state)\nthis:\n  Subobjs P C (Cs @ rev Ds)\n\ngoal (1 subgoal):\n 1. \\<And>a Cs'.\n       \\<lbrakk>Subobjs P C (Cs @ rev Cs') \\<Longrightarrow> Subobjs P C Cs;\n        Subobjs P C (Cs @ rev (a # Cs'))\\<rbrakk>\n       \\<Longrightarrow> Subobjs P C Cs", "with IH"], ["proof (chain)\npicking this:\n  Subobjs P C (Cs @ rev Ds) \\<Longrightarrow> Subobjs P C Cs\n  Subobjs P C (Cs @ rev Ds)", "show ?case"], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ rev Ds) \\<Longrightarrow> Subobjs P C Cs\n  Subobjs P C (Cs @ rev Ds)\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "by simp"], ["proof (state)\nthis:\n  Subobjs P C Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma appendSubobj:\nassumes subo:\"Subobjs P C (Cs@Cs')\" and notempty:\"Cs \\<noteq> []\"\nshows \"Subobjs P C Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "obtain Cs'' where Cs'':\"Cs'' = rev Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Cs''. Cs'' = rev Cs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "with subo"], ["proof (chain)\npicking this:\n  Subobjs P C (Cs @ Cs')\n  Cs'' = rev Cs'", "have \"Subobjs P C (Cs@(rev Cs''))\""], ["proof (prove)\nusing this:\n  Subobjs P C (Cs @ Cs')\n  Cs'' = rev Cs'\n\ngoal (1 subgoal):\n 1. Subobjs P C (Cs @ rev Cs'')", "by simp"], ["proof (state)\nthis:\n  Subobjs P C (Cs @ rev Cs'')\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "with notempty"], ["proof (chain)\npicking this:\n  Cs \\<noteq> []\n  Subobjs P C (Cs @ rev Cs'')", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs \\<noteq> []\n  Subobjs P C (Cs @ rev Cs'')\n\ngoal (1 subgoal):\n 1. Subobjs P C Cs", "by - (rule rev_appendSubobj)"], ["proof (state)\nthis:\n  Subobjs P C Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubobjsR_isSubobj:\n  \"Subobjs\\<^sub>R P C Cs \\<Longrightarrow> is_subobj P ((C,Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs\\<^sub>R P C Cs \\<Longrightarrow> is_subobj P (C, Cs)", "by(erule Subobjs\\<^sub>R.induct,simp,\n  auto dest:hd_SubobjsR intro:build_rec_isSubobj)"], ["", "lemma leq_SubobjsR_isSubobj:\n  \"\\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C'; P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk> \n\\<Longrightarrow> is_subobj P ((C,Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, Cs)", "apply (subgoal_tac \"is_subobj P ((C,[D]))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs;\n     is_subobj P (C, [D])\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, Cs)\n 2. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply (frule hd_SubobjsR)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs;\n     is_subobj P (C, [D]); \\<exists>Cs'. Cs = D # Cs'\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, Cs)\n 2. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply (drule SubobjsR_isSubobj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; is_subobj P (C, [D]);\n     \\<exists>Cs'. Cs = D # Cs'; is_subobj P (D, Cs)\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, Cs)\n 2. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Cs'.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; is_subobj P (C, [D]);\n        is_subobj P (D, Cs); Cs = D # Cs'\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, Cs)\n 2. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply (simp del: is_subobj.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Cs'.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; is_subobj P (C, [D]);\n        is_subobj P (D, D # Cs'); Cs = D # Cs'\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (C, D # Cs')\n 2. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply (erule isSubobj_isSubobj_isSubobj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Cs'.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n        P \\<turnstile> C' \\<prec>\\<^sub>S D; is_subobj P (D, D # Cs');\n        Cs = D # Cs'\\<rbrakk>\n       \\<Longrightarrow> is_subobj P (D, D # Cs')\n 2. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* C';\n     P \\<turnstile> C' \\<prec>\\<^sub>S D; Subobjs\\<^sub>R P D Cs\\<rbrakk>\n    \\<Longrightarrow> is_subobj P (C, [D])", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Subobjs_isSubobj:\n  \"Subobjs P C Cs \\<Longrightarrow> is_subobj P ((C,Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Subobjs P C Cs \\<Longrightarrow> is_subobj P (C, Cs)", "by (auto elim:Subobjs.induct SubobjsR_isSubobj \n  simp add:leq_SubobjsR_isSubobj)"], ["", "subsection \\<open>Paths\\<close>"], ["", "subsection \\<open>Appending paths\\<close>"], ["", "text\\<open>Avoided name clash by calling one path Path.\\<close>"], ["", "definition path_via :: \"prog \\<Rightarrow> cname \\<Rightarrow> cname \\<Rightarrow> path \\<Rightarrow> bool\" (\"_ \\<turnstile> Path _ to _ via _ \" [51,51,51,51] 50) where\n  \"P \\<turnstile> Path C to D via Cs \\<equiv> Subobjs P C Cs \\<and> last Cs = D\""], ["", "definition path_unique :: \"prog \\<Rightarrow> cname \\<Rightarrow> cname \\<Rightarrow> bool\" (\"_ \\<turnstile> Path _ to _ unique\" [51,51,51] 50) where\n  \"P \\<turnstile> Path C to D unique \\<equiv> \\<exists>!Cs. Subobjs P C Cs \\<and> last Cs = D\""], ["", "definition appendPath :: \"path \\<Rightarrow> path \\<Rightarrow> path\" (infixr \"@\\<^sub>p\" 65) where\n  \"Cs @\\<^sub>p Cs' \\<equiv> if (last Cs = hd Cs') then Cs @ (tl Cs') else Cs'\""], ["", "lemma appendPath_last: \"Cs \\<noteq> [] \\<Longrightarrow> last Cs = last (Cs'@\\<^sub>pCs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cs \\<noteq> [] \\<Longrightarrow> last Cs = last (Cs' @\\<^sub>p Cs)", "by(auto simp:appendPath_def last_append)(cases Cs, simp_all)+"], ["", "inductive\n  casts_to :: \"prog \\<Rightarrow> ty \\<Rightarrow> val \\<Rightarrow> val \\<Rightarrow> bool\"\n    (\"_ \\<turnstile> _ casts _ to _ \" [51,51,51,51] 50)\n  for P :: prog\nwhere\n\n  casts_prim: \"\\<forall>C. T \\<noteq> Class C \\<Longrightarrow> P \\<turnstile> T casts v to v\"\n\n| casts_null: \"P \\<turnstile> Class C casts Null to Null\"\n\n| casts_ref: \"\\<lbrakk> P \\<turnstile> Path last Cs to C via Cs'; Ds = Cs@\\<^sub>pCs' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> Class C casts Ref(a,Cs) to Ref(a,Ds)\""], ["", "inductive\n  Casts_to :: \"prog \\<Rightarrow> ty list \\<Rightarrow> val list \\<Rightarrow> val list \\<Rightarrow> bool\"\n    (\"_ \\<turnstile> _ Casts _ to _ \" [51,51,51,51] 50)\n  for P :: prog\nwhere\n\n  Casts_Nil: \"P \\<turnstile> [] Casts [] to []\"\n\n| Casts_Cons: \"\\<lbrakk> P \\<turnstile> T casts v to v'; P \\<turnstile> Ts Casts vs to vs' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> (T#Ts) Casts (v#vs) to (v'#vs')\""], ["", "lemma length_Casts_vs:\n  \"P \\<turnstile> Ts Casts vs to vs' \\<Longrightarrow> length Ts = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> Ts Casts vs to vs'  \\<Longrightarrow>\n    length Ts = length vs", "by (induct rule:Casts_to.induct,simp_all)"], ["", "lemma length_Casts_vs':\n  \"P \\<turnstile> Ts Casts vs to vs' \\<Longrightarrow> length Ts = length vs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> Ts Casts vs to vs'  \\<Longrightarrow>\n    length Ts = length vs'", "by (induct rule:Casts_to.induct,simp_all)"], ["", "subsection \\<open>The relation on paths\\<close>"], ["", "inductive_set\n  leq_path1 :: \"prog \\<Rightarrow> cname \\<Rightarrow> (path \\<times> path) set\"\n  and leq_path1' :: \"prog \\<Rightarrow> cname \\<Rightarrow> [path, path] \\<Rightarrow> bool\" (\"_,_ \\<turnstile> _ \\<sqsubset>\\<^sup>1 _\" [71,71,71] 70)\n  for P :: prog and C :: cname\nwhere\n  \"P,C \\<turnstile> Cs \\<sqsubset>\\<^sup>1 Ds \\<equiv> (Cs,Ds) \\<in> leq_path1 P C\"\n| leq_pathRep: \"\\<lbrakk> Subobjs P C Cs; Subobjs P C Ds; Cs = butlast Ds\\<rbrakk>\n  \\<Longrightarrow> P,C \\<turnstile> Cs \\<sqsubset>\\<^sup>1 Ds\"\n| leq_pathSh:  \"\\<lbrakk> Subobjs P C Cs; P \\<turnstile> last Cs \\<prec>\\<^sub>S D \\<rbrakk>\n  \\<Longrightarrow> P,C \\<turnstile> Cs \\<sqsubset>\\<^sup>1 [D]\""], ["", "abbreviation\n  leq_path :: \"prog \\<Rightarrow> cname \\<Rightarrow> [path, path] \\<Rightarrow> bool\" (\"_,_ \\<turnstile> _ \\<sqsubseteq> _\"  [71,71,71] 70) where\n  \"P,C \\<turnstile> Cs \\<sqsubseteq> Ds \\<equiv> (Cs,Ds) \\<in> (leq_path1 P C)\\<^sup>*\""], ["", "lemma leq_path_rep:\n  \"\\<lbrakk> Subobjs P C (Cs@[C']); Subobjs P C (Cs@[C',C''])\\<rbrakk> \n\\<Longrightarrow> P,C \\<turnstile> (Cs@[C']) \\<sqsubset>\\<^sup>1 (Cs@[C',C''])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Subobjs P C (Cs @ [C']); Subobjs P C (Cs @ [C', C''])\\<rbrakk>\n    \\<Longrightarrow> P,C \\<turnstile> (Cs @\n  [C']) \\<sqsubset>\\<^sup>1 Cs @ [C', C'']", "by(rule leq_pathRep,simp_all add:butlast_tail)"], ["", "lemma leq_path_sh:\n  \"\\<lbrakk> Subobjs P C (Cs@[C']); P \\<turnstile> C' \\<prec>\\<^sub>S C''\\<rbrakk> \n\\<Longrightarrow> P,C \\<turnstile> (Cs@[C']) \\<sqsubset>\\<^sup>1 [C'']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Subobjs P C (Cs @ [C']);\n     P \\<turnstile> C' \\<prec>\\<^sub>S C''\\<rbrakk>\n    \\<Longrightarrow> P,C \\<turnstile> (Cs @ [C']) \\<sqsubset>\\<^sup>1 [C'']", "by(erule leq_pathSh)simp"], ["", "subsection\\<open>Member lookups\\<close>"], ["", "definition FieldDecls :: \"prog \\<Rightarrow> cname \\<Rightarrow> vname \\<Rightarrow> (path \\<times> ty) set\" where\n  \"FieldDecls P C F \\<equiv> \n   {(Cs,T). Subobjs P C Cs \\<and> (\\<exists>Bs fs ms. class P (last Cs) = Some(Bs,fs,ms)\n                                    \\<and> map_of fs F = Some T)}\""], ["", "definition LeastFieldDecl  :: \"prog \\<Rightarrow> cname \\<Rightarrow> vname \\<Rightarrow> ty \\<Rightarrow> path \\<Rightarrow> bool\"\n    (\"_ \\<turnstile> _ has least _:_ via _\" [51,0,0,0,51] 50) where\n  \"P \\<turnstile> C has least F:T via Cs \\<equiv>\n   (Cs,T) \\<in> FieldDecls P C F \\<and>\n   (\\<forall>(Cs',T') \\<in> FieldDecls P C F. P,C \\<turnstile> Cs \\<sqsubseteq> Cs')\""], ["", "definition MethodDefs :: \"prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> (path \\<times> method)set\" where\n  \"MethodDefs P C M \\<equiv>\n   {(Cs,mthd). Subobjs P C Cs \\<and> (\\<exists>Bs fs ms. class P (last Cs) = Some(Bs,fs,ms)\n                                    \\<and> map_of ms M = Some mthd)}\"\n\n  \\<comment> \\<open>needed for well formed criterion\\<close>"], ["", "definition HasMethodDef :: \"prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> method \\<Rightarrow> path \\<Rightarrow> bool\"\n    (\"_ \\<turnstile> _ has _ = _ via _\" [51,0,0,0,51] 50) where\n  \"P \\<turnstile> C has M = mthd via Cs \\<equiv> (Cs,mthd) \\<in> MethodDefs P C M\""], ["", "definition LeastMethodDef :: \"prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> method \\<Rightarrow> path \\<Rightarrow> bool\"\n    (\"_ \\<turnstile> _ has least _ = _ via _\" [51,0,0,0,51] 50) where\n  \"P \\<turnstile> C has least M = mthd via Cs \\<equiv>\n   (Cs,mthd) \\<in> MethodDefs P C M \\<and>\n   (\\<forall>(Cs',mthd') \\<in> MethodDefs P C M. P,C \\<turnstile> Cs \\<sqsubseteq> Cs')\""], ["", "definition MinimalMethodDefs :: \"prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> (path \\<times> method)set\" where\n  \"MinimalMethodDefs P C M \\<equiv> \n      {(Cs,mthd). (Cs,mthd) \\<in> MethodDefs P C M \\<and> \n         (\\<forall>(Cs',mthd')\\<in> MethodDefs P C M. P,C \\<turnstile> Cs' \\<sqsubseteq> Cs \\<longrightarrow> Cs' = Cs)}\""], ["", "definition OverriderMethodDefs :: \"prog \\<Rightarrow> subobj \\<Rightarrow> mname \\<Rightarrow> (path \\<times> method)set\" where\n  \"OverriderMethodDefs P R M \\<equiv>\n      {(Cs,mthd). \\<exists>Cs' mthd'. P \\<turnstile> (ldc R) has least M = mthd' via Cs' \\<and>\n                      (Cs,mthd) \\<in> MinimalMethodDefs P (mdc R) M \\<and> \n                      P,mdc R \\<turnstile> Cs \\<sqsubseteq> (snd R)@\\<^sub>pCs'}\""], ["", "definition FinalOverriderMethodDef :: \"prog \\<Rightarrow> subobj \\<Rightarrow> mname \\<Rightarrow> method \\<Rightarrow> path \\<Rightarrow> bool\"\n    (\"_ \\<turnstile> _ has overrider _ = _ via _\" [51,0,0,0,51] 50) where\n  \"P \\<turnstile> R has overrider M = mthd via Cs \\<equiv> \n      (Cs,mthd) \\<in> OverriderMethodDefs P R M \\<and> \n      card(OverriderMethodDefs P R M) = 1\""], ["", "(*(\\<forall>(Cs',mthd') \\<in> OverriderMethodDefs P R M. Cs = Cs' \\<and> mthd = mthd')\"*)"], ["", "inductive\n  SelectMethodDef :: \"prog \\<Rightarrow> cname \\<Rightarrow> path \\<Rightarrow> mname \\<Rightarrow> method \\<Rightarrow> path \\<Rightarrow> bool\"\n     (\"_ \\<turnstile> '(_,_') selects _ = _ via _\" [51,0,0,0,0,51] 50)\n  for P :: prog\nwhere\n\n  dyn_unique:\n    \"P \\<turnstile> C has least M = mthd via Cs' \\<Longrightarrow> P \\<turnstile> (C,Cs) selects M = mthd via Cs'\"\n\n| dyn_ambiguous:\n    \"\\<lbrakk>\\<forall>mthd Cs'. \\<not> P \\<turnstile> C has least M = mthd via Cs'; \n      P \\<turnstile> (C,Cs) has overrider M = mthd via Cs'\\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> (C,Cs) selects M = mthd via Cs'\""], ["", "lemma sees_fields_fun:\n  \"(Cs,T) \\<in> FieldDecls P C F \\<Longrightarrow> (Cs,T') \\<in> FieldDecls P C F \\<Longrightarrow> T = T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Cs, T) \\<in> FieldDecls P C F;\n     (Cs, T') \\<in> FieldDecls P C F\\<rbrakk>\n    \\<Longrightarrow> T = T'", "by(fastforce simp:FieldDecls_def)"], ["", "lemma sees_field_fun:\n  \"\\<lbrakk>P \\<turnstile> C has least F:T via Cs; P \\<turnstile> C has least F:T' via Cs\\<rbrakk>\n  \\<Longrightarrow> T = T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has least F:T via Cs;\n     P \\<turnstile> C has least F:T' via Cs\\<rbrakk>\n    \\<Longrightarrow> T = T'", "by (fastforce simp:LeastFieldDecl_def dest:sees_fields_fun)"], ["", "lemma has_least_method_has_method:\n  \"P \\<turnstile> C has least M = mthd via Cs \\<Longrightarrow> P \\<turnstile> C has M = mthd via Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has least M = mthd via Cs \\<Longrightarrow>\n    P \\<turnstile> C has M = mthd via Cs", "by (simp add:LeastMethodDef_def HasMethodDef_def)"], ["", "lemma visible_methods_exist:\n  \"(Cs,mthd) \\<in> MethodDefs P C M \\<Longrightarrow>\n  (\\<exists>Bs fs ms. class P (last Cs) = Some(Bs,fs,ms) \\<and> map_of ms M = Some mthd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Cs, mthd) \\<in> MethodDefs P C M \\<Longrightarrow>\n    \\<exists>Bs fs ms.\n       class P (last Cs) = \\<lfloor>(Bs, fs, ms)\\<rfloor> \\<and>\n       map_of ms M = \\<lfloor>mthd\\<rfloor>", "by(auto simp:MethodDefs_def)"], ["", "lemma sees_methods_fun:\n  \"(Cs,mthd) \\<in> MethodDefs P C M \\<Longrightarrow> (Cs,mthd') \\<in> MethodDefs P C M \\<Longrightarrow> mthd = mthd'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Cs, mthd) \\<in> MethodDefs P C M;\n     (Cs, mthd') \\<in> MethodDefs P C M\\<rbrakk>\n    \\<Longrightarrow> mthd = mthd'", "by(fastforce simp:MethodDefs_def)"], ["", "lemma sees_method_fun:\n  \"\\<lbrakk>P \\<turnstile> C has least M = mthd via Cs; P \\<turnstile> C has least M = mthd' via Cs\\<rbrakk>\n  \\<Longrightarrow> mthd = mthd'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has least M = mthd via Cs;\n     P \\<turnstile> C has least M = mthd' via Cs\\<rbrakk>\n    \\<Longrightarrow> mthd = mthd'", "by (fastforce simp:LeastMethodDef_def dest:sees_methods_fun)"], ["", "lemma overrider_method_fun:\nassumes overrider:\"P \\<turnstile> (C,Cs) has overrider M = mthd via Cs'\"\n  and overrider':\"P \\<turnstile> (C,Cs) has overrider M = mthd' via Cs''\"\nshows \"mthd = mthd' \\<and> Cs' = Cs''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mthd = mthd' \\<and> Cs' = Cs''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mthd = mthd' \\<and> Cs' = Cs''", "from overrider'"], ["proof (chain)\npicking this:\n  P \\<turnstile> (C, Cs) has overrider M = mthd' via Cs''", "have omd:\"(Cs'',mthd') \\<in> OverriderMethodDefs P (C,Cs) M\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (C, Cs) has overrider M = mthd' via Cs''\n\ngoal (1 subgoal):\n 1. (Cs'', mthd') \\<in> OverriderMethodDefs P (C, Cs) M", "by(simp_all add:FinalOverriderMethodDef_def)"], ["proof (state)\nthis:\n  (Cs'', mthd') \\<in> OverriderMethodDefs P (C, Cs) M\n\ngoal (1 subgoal):\n 1. mthd = mthd' \\<and> Cs' = Cs''", "from overrider"], ["proof (chain)\npicking this:\n  P \\<turnstile> (C, Cs) has overrider M = mthd via Cs'", "have \"(Cs',mthd) \\<in> OverriderMethodDefs P (C,Cs) M\"\n    and \"card(OverriderMethodDefs P (C,Cs) M) = 1\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (C, Cs) has overrider M = mthd via Cs'\n\ngoal (1 subgoal):\n 1. (Cs', mthd) \\<in> OverriderMethodDefs P (C, Cs) M &&&\n    card (OverriderMethodDefs P (C, Cs) M) = 1", "by(simp_all add:FinalOverriderMethodDef_def)"], ["proof (state)\nthis:\n  (Cs', mthd) \\<in> OverriderMethodDefs P (C, Cs) M\n  card (OverriderMethodDefs P (C, Cs) M) = 1\n\ngoal (1 subgoal):\n 1. mthd = mthd' \\<and> Cs' = Cs''", "hence \"\\<forall>(Ds,mthd'') \\<in> OverriderMethodDefs P (C,Cs) M. (Cs',mthd) = (Ds,mthd'')\""], ["proof (prove)\nusing this:\n  (Cs', mthd) \\<in> OverriderMethodDefs P (C, Cs) M\n  card (OverriderMethodDefs P (C, Cs) M) = 1\n\ngoal (1 subgoal):\n 1. \\<forall>(Ds, mthd'')\\<in>OverriderMethodDefs P (C, Cs) M.\n       (Cs', mthd) = (Ds, mthd'')", "by(fastforce simp:card_Suc_eq)"], ["proof (state)\nthis:\n  \\<forall>(Ds, mthd'')\\<in>OverriderMethodDefs P (C, Cs) M.\n     (Cs', mthd) = (Ds, mthd'')\n\ngoal (1 subgoal):\n 1. mthd = mthd' \\<and> Cs' = Cs''", "with omd"], ["proof (chain)\npicking this:\n  (Cs'', mthd') \\<in> OverriderMethodDefs P (C, Cs) M\n  \\<forall>(Ds, mthd'')\\<in>OverriderMethodDefs P (C, Cs) M.\n     (Cs', mthd) = (Ds, mthd'')", "show ?thesis"], ["proof (prove)\nusing this:\n  (Cs'', mthd') \\<in> OverriderMethodDefs P (C, Cs) M\n  \\<forall>(Ds, mthd'')\\<in>OverriderMethodDefs P (C, Cs) M.\n     (Cs', mthd) = (Ds, mthd'')\n\ngoal (1 subgoal):\n 1. mthd = mthd' \\<and> Cs' = Cs''", "by fastforce"], ["proof (state)\nthis:\n  mthd = mthd' \\<and> Cs' = Cs''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}