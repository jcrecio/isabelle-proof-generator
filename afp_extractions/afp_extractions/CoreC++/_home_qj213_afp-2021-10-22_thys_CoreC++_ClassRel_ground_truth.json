{"file_name": "/home/qj213/afp-2021-10-22/thys/CoreC++/ClassRel.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CoreC++", "problem_names": ["lemma subclsRD:\n  \"P \\<turnstile> C \\<prec>\\<^sub>R D \\<Longrightarrow> \\<exists>fs ms Bs. (class P C = Some (Bs,fs,ms)) \\<and> (Repeats(D) \\<in> set Bs)\"", "lemma subclsSD:\n  \"P \\<turnstile> C \\<prec>\\<^sub>S D \\<Longrightarrow> \\<exists>fs ms Bs. (class P C = Some (Bs,fs,ms)) \\<and> (Shares(D) \\<in> set Bs)\"", "lemma subcls1D:\n  \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> \\<exists>fs ms Bs. (class P C = Some (Bs,fs,ms)) \\<and> (D \\<in> baseClasses Bs)\"", "lemma subclsR_subcls1:\n  \"P \\<turnstile> C \\<prec>\\<^sub>R D \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sup>1 D\"", "lemma subclsS_subcls1:\n  \"P \\<turnstile> C \\<prec>\\<^sub>S D \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sup>1 D\"", "lemma subcls1_subclsR_or_subclsS:\n  \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sub>R D \\<or> P \\<turnstile> C \\<prec>\\<^sub>S D\"", "lemma finite_subcls1: \"finite (subcls1 P)\"", "lemma finite_subclsR: \"finite (subclsR P)\"", "lemma finite_subclsS: \"finite (subclsS P)\"", "lemma subcls1_class:\n  \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> is_class P C\"", "lemma subcls_is_class:\n\"\\<lbrakk>P \\<turnstile> D \\<preceq>\\<^sup>* C; is_class P C\\<rbrakk> \\<Longrightarrow> is_class P D\""], "translations": [["", "lemma subclsRD:\n  \"P \\<turnstile> C \\<prec>\\<^sub>R D \\<Longrightarrow> \\<exists>fs ms Bs. (class P C = Some (Bs,fs,ms)) \\<and> (Repeats(D) \\<in> set Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sub>R D \\<Longrightarrow>\n    \\<exists>fs ms Bs.\n       class P C = \\<lfloor>(Bs, fs, ms)\\<rfloor> \\<and>\n       Repeats D \\<in> set Bs", "by(auto elim: subclsR.cases)"], ["", "lemma subclsSD:\n  \"P \\<turnstile> C \\<prec>\\<^sub>S D \\<Longrightarrow> \\<exists>fs ms Bs. (class P C = Some (Bs,fs,ms)) \\<and> (Shares(D) \\<in> set Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sub>S D \\<Longrightarrow>\n    \\<exists>fs ms Bs.\n       class P C = \\<lfloor>(Bs, fs, ms)\\<rfloor> \\<and>\n       Shares D \\<in> set Bs", "by(auto elim: subclsS.cases)"], ["", "lemma subcls1D:\n  \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> \\<exists>fs ms Bs. (class P C = Some (Bs,fs,ms)) \\<and> (D \\<in> baseClasses Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow>\n    \\<exists>fs ms Bs.\n       class P C = \\<lfloor>(Bs, fs, ms)\\<rfloor> \\<and>\n       D \\<in> baseClasses Bs", "by(auto elim: subcls1.cases)"], ["", "lemma subclsR_subcls1:\n  \"P \\<turnstile> C \\<prec>\\<^sub>R D \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sup>1 D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sub>R D \\<Longrightarrow>\n    P \\<turnstile> C \\<prec>\\<^sup>1 D", "by (auto elim!:subclsR.cases intro:subcls1I simp:RepBaseclass_isBaseclass)"], ["", "lemma subclsS_subcls1:\n  \"P \\<turnstile> C \\<prec>\\<^sub>S D \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sup>1 D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sub>S D \\<Longrightarrow>\n    P \\<turnstile> C \\<prec>\\<^sup>1 D", "by (auto elim!:subclsS.cases intro:subcls1I simp:ShBaseclass_isBaseclass)"], ["", "lemma subcls1_subclsR_or_subclsS:\n  \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> P \\<turnstile> C \\<prec>\\<^sub>R D \\<or> P \\<turnstile> C \\<prec>\\<^sub>S D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow>\n    P \\<turnstile> C \\<prec>\\<^sub>R D \\<or>\n    P \\<turnstile> C \\<prec>\\<^sub>S D", "by (auto dest!:subcls1D intro:subclsRI \n  dest:baseClasses_repeats_or_shares subclsSI)"], ["", "lemma finite_subcls1: \"finite (subcls1 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (subcls1 P)", "apply(subgoal_tac \"subcls1 P = (SIGMA C: {C. is_class P C} . \n                     {D. D \\<in> baseClasses (fst(the(class P C)))})\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. subcls1 P =\n    (SIGMA C:{C. is_class P C}.\n        {D. D \\<in> baseClasses (fst (the (class P C)))}) \\<Longrightarrow>\n    finite (subcls1 P)\n 2. subcls1 P =\n    (SIGMA C:{C. is_class P C}.\n        {D. D \\<in> baseClasses (fst (the (class P C)))})", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. subcls1 P =\n    (SIGMA C:{C. is_class P C}.\n        {D. D \\<in> baseClasses (fst (the (class P C)))})\n 2. subcls1 P =\n    (SIGMA C:{C. is_class P C}.\n        {D. D \\<in> baseClasses (fst (the (class P C)))}) \\<Longrightarrow>\n    finite (subcls1 P)", "apply(fastforce simp:is_class_def dest: subcls1D elim: subcls1I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. subcls1 P =\n    (SIGMA C:{C. is_class P C}.\n        {D. D \\<in> baseClasses (fst (the (class P C)))}) \\<Longrightarrow>\n    finite (subcls1 P)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. subcls1 P =\n    (SIGMA C:{C. is_class P C}.\n        baseClasses (fst (the (class P C)))) \\<Longrightarrow>\n    finite (SIGMA C:{C. is_class P C}. baseClasses (fst (the (class P C))))", "apply(rule finite_SigmaI [OF finite_is_class])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>subcls1 P =\n                (SIGMA C:{C. is_class P C}.\n                    baseClasses (fst (the (class P C))));\n        C \\<in> {C. is_class P C}\\<rbrakk>\n       \\<Longrightarrow> finite (baseClasses (fst (the (class P C))))", "apply(rule_tac B = \"baseClasses (fst (the (class P C)))\" in finite_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>subcls1 P =\n                (SIGMA C:{C. is_class P C}.\n                    baseClasses (fst (the (class P C))));\n        C \\<in> {C. is_class P C}\\<rbrakk>\n       \\<Longrightarrow> baseClasses (fst (the (class P C)))\n                         \\<subseteq> baseClasses (fst (the (class P C)))\n 2. \\<And>C.\n       \\<lbrakk>subcls1 P =\n                (SIGMA C:{C. is_class P C}.\n                    baseClasses (fst (the (class P C))));\n        C \\<in> {C. is_class P C}\\<rbrakk>\n       \\<Longrightarrow> finite (baseClasses (fst (the (class P C))))", "apply (auto intro:finite_baseClasses simp:is_class_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_subclsR: \"finite (subclsR P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (subclsR P)", "by(rule_tac B = \"subcls1 P\" in finite_subset, \n  auto simp:subclsR_subcls1 finite_subcls1)"], ["", "lemma finite_subclsS: \"finite (subclsS P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (subclsS P)", "by(rule_tac B = \"subcls1 P\" in finite_subset, \n  auto simp:subclsS_subcls1 finite_subcls1)"], ["", "lemma subcls1_class:\n  \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> is_class P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> is_class P C", "by (auto dest:subcls1D simp:is_class_def)"], ["", "lemma subcls_is_class:\n\"\\<lbrakk>P \\<turnstile> D \\<preceq>\\<^sup>* C; is_class P C\\<rbrakk> \\<Longrightarrow> is_class P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> D \\<preceq>\\<^sup>* C; is_class P C\\<rbrakk>\n    \\<Longrightarrow> is_class P D", "by (induct rule:rtrancl_induct,auto dest:subcls1_class)"], ["", "end"]]}