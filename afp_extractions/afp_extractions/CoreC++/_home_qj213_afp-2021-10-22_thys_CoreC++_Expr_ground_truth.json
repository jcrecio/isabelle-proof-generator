{"file_name": "/home/qj213/afp-2021-10-22/thys/CoreC++/Expr.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CoreC++", "problem_names": ["lemma [simp]:\n  \"(binop(Add,v\\<^sub>1,v\\<^sub>2) = Some v) = (\\<exists>i\\<^sub>1 i\\<^sub>2. v\\<^sub>1 = Intg i\\<^sub>1 \\<and> v\\<^sub>2 = Intg i\\<^sub>2 \\<and> v = Intg(i\\<^sub>1+i\\<^sub>2))\"", "lemma binop_not_ref[simp]:\n  \"binop(bop,v\\<^sub>1,v\\<^sub>2) = Some (Ref r) \\<Longrightarrow> False\"", "lemma [simp]: \"fvs(es\\<^sub>1 @ es\\<^sub>2) = fvs es\\<^sub>1 \\<union> fvs es\\<^sub>2\"", "lemma [simp]: \"fvs(map Val vs) = {}\""], "translations": [["", "lemma [simp]:\n  \"(binop(Add,v\\<^sub>1,v\\<^sub>2) = Some v) = (\\<exists>i\\<^sub>1 i\\<^sub>2. v\\<^sub>1 = Intg i\\<^sub>1 \\<and> v\\<^sub>2 = Intg i\\<^sub>2 \\<and> v = Intg(i\\<^sub>1+i\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (binop (Add, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>) =\n    (\\<exists>i\\<^sub>1 i\\<^sub>2.\n        v\\<^sub>1 = Intg i\\<^sub>1 \\<and>\n        v\\<^sub>2 = Intg i\\<^sub>2 \\<and> v = Intg (i\\<^sub>1 + i\\<^sub>2))", "apply(cases v\\<^sub>1)"], ["proof (prove)\ngoal (5 subgoals):\n 1. v\\<^sub>1 = Unit \\<Longrightarrow>\n    (binop (Add, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>) =\n    (\\<exists>i\\<^sub>1 i\\<^sub>2.\n        v\\<^sub>1 = Intg i\\<^sub>1 \\<and>\n        v\\<^sub>2 = Intg i\\<^sub>2 \\<and> v = Intg (i\\<^sub>1 + i\\<^sub>2))\n 2. v\\<^sub>1 = Null \\<Longrightarrow>\n    (binop (Add, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>) =\n    (\\<exists>i\\<^sub>1 i\\<^sub>2.\n        v\\<^sub>1 = Intg i\\<^sub>1 \\<and>\n        v\\<^sub>2 = Intg i\\<^sub>2 \\<and> v = Intg (i\\<^sub>1 + i\\<^sub>2))\n 3. \\<And>x3.\n       v\\<^sub>1 = Bool x3 \\<Longrightarrow>\n       (binop (Add, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>) =\n       (\\<exists>i\\<^sub>1 i\\<^sub>2.\n           v\\<^sub>1 = Intg i\\<^sub>1 \\<and>\n           v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n           v = Intg (i\\<^sub>1 + i\\<^sub>2))\n 4. \\<And>x4.\n       v\\<^sub>1 = Intg x4 \\<Longrightarrow>\n       (binop (Add, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>) =\n       (\\<exists>i\\<^sub>1 i\\<^sub>2.\n           v\\<^sub>1 = Intg i\\<^sub>1 \\<and>\n           v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n           v = Intg (i\\<^sub>1 + i\\<^sub>2))\n 5. \\<And>x5.\n       v\\<^sub>1 = Ref x5 \\<Longrightarrow>\n       (binop (Add, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>) =\n       (\\<exists>i\\<^sub>1 i\\<^sub>2.\n           v\\<^sub>1 = Intg i\\<^sub>1 \\<and>\n           v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n           v = Intg (i\\<^sub>1 + i\\<^sub>2))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x4.\n       \\<lbrakk>v\\<^sub>1 = Intg x4;\n        binop (Add, Intg x4, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<^sub>2.\n                            v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n                            v = Intg (x4 + i\\<^sub>2)", "apply(cases v\\<^sub>2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x4.\n       \\<lbrakk>v\\<^sub>1 = Intg x4;\n        binop (Add, Intg x4, v\\<^sub>2) = \\<lfloor>v\\<rfloor>;\n        v\\<^sub>2 = Unit\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<^sub>2.\n                            v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n                            v = Intg (x4 + i\\<^sub>2)\n 2. \\<And>x4.\n       \\<lbrakk>v\\<^sub>1 = Intg x4;\n        binop (Add, Intg x4, v\\<^sub>2) = \\<lfloor>v\\<rfloor>;\n        v\\<^sub>2 = Null\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<^sub>2.\n                            v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n                            v = Intg (x4 + i\\<^sub>2)\n 3. \\<And>x4 x3.\n       \\<lbrakk>v\\<^sub>1 = Intg x4;\n        binop (Add, Intg x4, v\\<^sub>2) = \\<lfloor>v\\<rfloor>;\n        v\\<^sub>2 = Bool x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<^sub>2.\n                            v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n                            v = Intg (x4 + i\\<^sub>2)\n 4. \\<And>x4 x4a.\n       \\<lbrakk>v\\<^sub>1 = Intg x4;\n        binop (Add, Intg x4, v\\<^sub>2) = \\<lfloor>v\\<rfloor>;\n        v\\<^sub>2 = Intg x4a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<^sub>2.\n                            v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n                            v = Intg (x4 + i\\<^sub>2)\n 5. \\<And>x4 x5.\n       \\<lbrakk>v\\<^sub>1 = Intg x4;\n        binop (Add, Intg x4, v\\<^sub>2) = \\<lfloor>v\\<rfloor>;\n        v\\<^sub>2 = Ref x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<^sub>2.\n                            v\\<^sub>2 = Intg i\\<^sub>2 \\<and>\n                            v = Intg (x4 + i\\<^sub>2)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma binop_not_ref[simp]:\n  \"binop(bop,v\\<^sub>1,v\\<^sub>2) = Some (Ref r) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binop (bop, v\\<^sub>1, v\\<^sub>2) =\n    \\<lfloor>Ref r\\<rfloor> \\<Longrightarrow>\n    False", "by(cases bop)auto"], ["", "subsection\\<open>Free Variables\\<close>"], ["", "primrec\n  fv  :: \"expr      \\<Rightarrow> vname set\"\n  and fvs :: \"expr list \\<Rightarrow> vname set\" where\n  \"fv(new C) = {}\"\n| \"fv(Cast C e) = fv e\"\n|  \"fv(\\<lparr>C\\<rparr>e) = fv e\"\n| \"fv(Val v) = {}\"\n| \"fv(e\\<^sub>1 \\<guillemotleft>bop\\<guillemotright> e\\<^sub>2) = fv e\\<^sub>1 \\<union> fv e\\<^sub>2\"\n| \"fv(Var V) = {V}\"\n| \"fv(V := e) = {V} \\<union> fv e\"\n| \"fv(e\\<bullet>F{Cs}) = fv e\"\n| \"fv(e\\<^sub>1\\<bullet>F{Cs}:=e\\<^sub>2) = fv e\\<^sub>1 \\<union> fv e\\<^sub>2\"\n| \"fv(Call e Copt M es) = fv e \\<union> fvs es\"\n| \"fv({V:T; e}) = fv e - {V}\"\n| \"fv(e\\<^sub>1;;e\\<^sub>2) = fv e\\<^sub>1 \\<union> fv e\\<^sub>2\"\n| \"fv(if (b) e\\<^sub>1 else e\\<^sub>2) = fv b \\<union> fv e\\<^sub>1 \\<union> fv e\\<^sub>2\"\n| \"fv(while (b) e) = fv b \\<union> fv e\"\n| \"fv(throw e) = fv e\"\n\n| \"fvs([]) = {}\"\n| \"fvs(e#es) = fv e \\<union> fvs es\""], ["", "lemma [simp]: \"fvs(es\\<^sub>1 @ es\\<^sub>2) = fvs es\\<^sub>1 \\<union> fvs es\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fvs (es\\<^sub>1 @ es\\<^sub>2) = fvs es\\<^sub>1 \\<union> fvs es\\<^sub>2", "by (induct es\\<^sub>1 type:list) auto"], ["", "lemma [simp]: \"fvs(map Val vs) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fvs (map Val vs) = {}", "by (induct vs) auto"], ["", "end"]]}