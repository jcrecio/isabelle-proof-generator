{"file_name": "/home/qj213/afp-2021-10-22/thys/CoreC++/Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CoreC++", "problem_names": ["lemma nat_add_max_le[simp]:\n  \"((n::nat) + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)\"", "lemma Suc_add_max_le[simp]:\n  \"(Suc(n + max i j) \\<le> m) = (Suc(n + i) \\<le> m \\<and> Suc(n + j) \\<le> m)\"", "lemma butlast_tail:\n  \"butlast (Xs@[X,Y]) = Xs@[X]\"", "lemma butlast_noteq:\"Cs \\<noteq> [] \\<Longrightarrow> butlast Cs \\<noteq> Cs\"", "lemma app_hd_tl:\"\\<lbrakk>Cs \\<noteq> []; Cs = Cs' @ tl Cs\\<rbrakk> \\<Longrightarrow> Cs' = [hd Cs]\"", "lemma only_one_append:\"\\<lbrakk>C' \\<notin> set Cs; C' \\<notin> set Cs'; Ds@ C'#Ds' = Cs@ C'#Cs'\\<rbrakk> \n\\<Longrightarrow> Cs = Ds \\<and> Cs' = Ds'\"", "lemma pick_is_element:\"x \\<in> A \\<Longrightarrow> pick A \\<in> A\"", "lemma card_pick:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> Suc(card(A-{pick(A)})) = card A\"", "lemma set2list_prop:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n  \\<exists>xs. while (\\<lambda>(Es,S). S \\<noteq> {})\n             (\\<lambda>(Es,S). let x = pick S in (x#Es,S-{x}))\n             ([],A) = (xs,{}) \\<and> (set xs \\<union> {} = A)\"", "lemma set2list_correct:\"\\<lbrakk>finite A; A \\<noteq> {}; set2list A = xs\\<rbrakk> \\<Longrightarrow> set xs = A\"", "lemma distinct_fst_Nil [simp]:\n  \"distinct_fst []\"", "lemma distinct_fst_Cons [simp]:\n  \"distinct_fst ((k,x)#kxs) = (distinct_fst kxs \\<and> (\\<forall>y. (k,y) \\<notin> set kxs))\"", "lemma map_of_SomeI:\n  \"\\<lbrakk> distinct_fst kxs; (k,x) \\<in> set kxs \\<rbrakk> \\<Longrightarrow> map_of kxs k = Some x\"", "lemma rel_list_all2_Cons [iff]:\n  \"list_all2 (fun_of S) (x#xs) (y#ys) = \n   ((x,y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)\"", "lemma rel_list_all2_Cons1:\n  \"list_all2 (fun_of S) (x#xs) ys = \n  (\\<exists>z zs. ys = z#zs \\<and> (x,z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)\"", "lemma rel_list_all2_Cons2:\n  \"list_all2 (fun_of S) xs (y#ys) = \n  (\\<exists>z zs. xs = z#zs \\<and> (z,y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)\"", "lemma rel_list_all2_refl:\n  \"(\\<And>x. (x,x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs\"", "lemma rel_list_all2_antisym:\n  \"\\<lbrakk> (\\<And>x y. \\<lbrakk>(x,y) \\<in> S; (y,x) \\<in> T\\<rbrakk> \\<Longrightarrow> x = y); \n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs \\<rbrakk> \\<Longrightarrow> xs = ys\"", "lemma rel_list_all2_trans: \n  \"\\<lbrakk> \\<And>a b c. \\<lbrakk>(a,b) \\<in> R; (b,c) \\<in> S\\<rbrakk> \\<Longrightarrow> (a,c) \\<in> T;\n    list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of T) as cs\"", "lemma rel_list_all2_update_cong:\n  \"\\<lbrakk> i<size xs; list_all2 (fun_of S) xs ys; (x,y) \\<in> S \\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of S) (xs[i:=x]) (ys[i:=y])\"", "lemma rel_list_all2_nthD:\n  \"\\<lbrakk> list_all2 (fun_of S) xs ys; p < size xs \\<rbrakk> \\<Longrightarrow> (xs!p,ys!p) \\<in> S\"", "lemma rel_list_all2I:\n  \"\\<lbrakk> length a = length b; \\<And>n. n < length a \\<Longrightarrow> (a!n,b!n) \\<in> S \\<rbrakk> \\<Longrightarrow> list_all2 (fun_of S) a b\""], "translations": [["", "lemma nat_add_max_le[simp]:\n  \"((n::nat) + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)", "by arith"], ["", "lemma Suc_add_max_le[simp]:\n  \"(Suc(n + max i j) \\<le> m) = (Suc(n + i) \\<le> m \\<and> Suc(n + j) \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc (n + max i j) \\<le> m) =\n    (Suc (n + i) \\<le> m \\<and> Suc (n + j) \\<le> m)", "by arith"], ["", "notation Some  (\"(\\<lfloor>_\\<rfloor>)\")"], ["", "lemma butlast_tail:\n  \"butlast (Xs@[X,Y]) = Xs@[X]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast (Xs @ [X, Y]) = Xs @ [X]", "by (induct Xs) auto"], ["", "lemma butlast_noteq:\"Cs \\<noteq> [] \\<Longrightarrow> butlast Cs \\<noteq> Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cs \\<noteq> [] \\<Longrightarrow> butlast Cs \\<noteq> Cs", "by(induct Cs)simp_all"], ["", "lemma app_hd_tl:\"\\<lbrakk>Cs \\<noteq> []; Cs = Cs' @ tl Cs\\<rbrakk> \\<Longrightarrow> Cs' = [hd Cs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Cs \\<noteq> []; Cs = Cs' @ tl Cs\\<rbrakk>\n    \\<Longrightarrow> Cs' = [hd Cs]", "apply (subgoal_tac \"[hd Cs] @ tl Cs = Cs' @ tl Cs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Cs \\<noteq> []; Cs = Cs' @ tl Cs;\n     [hd Cs] @ tl Cs = Cs' @ tl Cs\\<rbrakk>\n    \\<Longrightarrow> Cs' = [hd Cs]\n 2. \\<lbrakk>Cs \\<noteq> []; Cs = Cs' @ tl Cs\\<rbrakk>\n    \\<Longrightarrow> [hd Cs] @ tl Cs = Cs' @ tl Cs", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Cs \\<noteq> []; Cs = Cs' @ tl Cs\\<rbrakk>\n    \\<Longrightarrow> [hd Cs] @ tl Cs = Cs' @ tl Cs", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma only_one_append:\"\\<lbrakk>C' \\<notin> set Cs; C' \\<notin> set Cs'; Ds@ C'#Ds' = Cs@ C'#Cs'\\<rbrakk> \n\\<Longrightarrow> Cs = Ds \\<and> Cs' = Ds'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C' \\<notin> set Cs; C' \\<notin> set Cs';\n     Ds @ C' # Ds' = Cs @ C' # Cs'\\<rbrakk>\n    \\<Longrightarrow> Cs = Ds \\<and> Cs' = Ds'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C' \\<notin> set Cs; C' \\<notin> set Cs';\n     Ds @ C' # Ds' = Cs @ C' # Cs'\\<rbrakk>\n    \\<Longrightarrow> Cs = Ds \\<and> Cs' = Ds'", "apply (simp add:append_eq_append_conv2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C' \\<notin> set Cs; C' \\<notin> set Cs';\n     \\<exists>us.\n        Ds = Cs @ us \\<and> us @ C' # Ds' = C' # Cs' \\<or>\n        Ds @ us = Cs \\<and> C' # Ds' = us @ C' # Cs'\\<rbrakk>\n    \\<Longrightarrow> Cs = Ds \\<and> Cs' = Ds'", "apply (auto simp:in_set_conv_decomp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (subgoal_tac \"hd (us @ C'#Ds') = C'\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 5. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (case_tac us)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'; us = []\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> us = []\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 5. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 6. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 5. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (subgoal_tac \"hd (us @ C'#Ds') = C'\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (case_tac us)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'; us = []\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 5. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us; hd (us @ C' # Ds') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Cs \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; us @ C' # Ds' = C' # Cs';\n        Ds = Cs @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Ds') = C'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (subgoal_tac \"hd (us @ C'#Cs') = C'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (case_tac us)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'; us = []\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> us = []\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'\n 4. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> us = []\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (subgoal_tac \"hd(C'#Ds') = C'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (C' # Ds') = C'\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (C' # Ds') = C'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (C' # Ds') = C'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'", "apply (subgoal_tac \"hd (us @ C'#Cs') = C'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'", "apply (case_tac us)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'; us = []\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 3. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us a list.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (us @ C' # Cs') = C'; us = a # list\\<rbrakk>\n       \\<Longrightarrow> Cs' = Ds'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'", "apply (subgoal_tac \"hd(C'#Ds') = C'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us; hd (C' # Ds') = C'\\<rbrakk>\n       \\<Longrightarrow> hd (us @ C' # Cs') = C'\n 2. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (C' # Ds') = C'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>ys zs. Ds @ us \\<noteq> ys @ C' # zs;\n        \\<forall>ys zs. Cs' \\<noteq> ys @ C' # zs; C' # Ds' = us @ C' # Cs';\n        Cs = Ds @ us\\<rbrakk>\n       \\<Longrightarrow> hd (C' # Ds') = C'", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition pick :: \"'a set \\<Rightarrow> 'a\" where\n  \"pick A \\<equiv> SOME x. x \\<in> A\""], ["", "lemma pick_is_element:\"x \\<in> A \\<Longrightarrow> pick A \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> pick A \\<in> A", "by (unfold pick_def,rule_tac x=\"x\" in someI)"], ["", "definition set2list :: \"'a set \\<Rightarrow> 'a list\" where\n  \"set2list A \\<equiv> fst (while (\\<lambda>(Es,S). S \\<noteq> {})\n                       (\\<lambda>(Es,S). let x = pick S in (x#Es,S-{x}))\n                       ([],A) )\""], ["", "lemma card_pick:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> Suc(card(A-{pick(A)})) = card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (card (A - {pick A})) = card A", "by (drule card_Suc_Diff1,auto dest!:pick_is_element simp:ex_in_conv)"], ["", "lemma set2list_prop:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n  \\<exists>xs. while (\\<lambda>(Es,S). S \\<noteq> {})\n             (\\<lambda>(Es,S). let x = pick S in (x#Es,S-{x}))\n             ([],A) = (xs,{}) \\<and> (set xs \\<union> {} = A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xs.\n                         while (\\<lambda>(Es, S). S \\<noteq> {})\n                          (\\<lambda>(Es, S).\n                              let x = pick S in (x # Es, S - {x}))\n                          ([], A) =\n                         (xs, {}) \\<and>\n                         set xs \\<union> {} = A", "apply(rule_tac P=\"(\\<lambda>xs. (set(fst xs) \\<union> snd xs = A))\" and \n               r=\"measure (card o snd)\"  in while_rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> set (fst ([], A)) \\<union> snd ([], A) = A\n 2. \\<And>s.\n       \\<lbrakk>finite A; A \\<noteq> {}; set (fst s) \\<union> snd s = A;\n        case s of (Es, S) \\<Rightarrow> S \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> set (fst (case s of\n                                   (Es, S) \\<Rightarrow>\n                                     let x = pick S\n                                     in (x # Es, S - {x}))) \\<union>\n                         snd (case s of\n                              (Es, S) \\<Rightarrow>\n                                let x = pick S in (x # Es, S - {x})) =\n                         A\n 3. \\<And>s.\n       \\<lbrakk>finite A; A \\<noteq> {}; set (fst s) \\<union> snd s = A;\n        \\<not> (case s of (Es, S) \\<Rightarrow> S \\<noteq> {})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            s = (xs, {}) \\<and> set xs \\<union> {} = A\n 4. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> wf (measure (card \\<circ> snd))\n 5. \\<And>s.\n       \\<lbrakk>finite A; A \\<noteq> {}; set (fst s) \\<union> snd s = A;\n        case s of (Es, S) \\<Rightarrow> S \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (case s of\n                          (Es, S) \\<Rightarrow>\n                            let x = pick S in (x # Es, S - {x}),\n                          s)\n                         \\<in> measure (card \\<circ> snd)", "apply(auto dest:pick_is_element)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x.\n       \\<lbrakk>A = set a \\<union> b; \\<not> card (b - {pick b}) < card b;\n        finite b; x \\<in> b\\<rbrakk>\n       \\<Longrightarrow> a = []\n 2. \\<And>a b x xa.\n       \\<lbrakk>A = set a \\<union> b; \\<not> card (b - {pick b}) < card b;\n        finite b; x \\<in> b; xa \\<in> b\\<rbrakk>\n       \\<Longrightarrow> False", "apply(auto dest:card_pick simp:ex_in_conv measure_def inv_image_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set2list_correct:\"\\<lbrakk>finite A; A \\<noteq> {}; set2list A = xs\\<rbrakk> \\<Longrightarrow> set xs = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; set2list A = xs\\<rbrakk>\n    \\<Longrightarrow> set xs = A", "by (auto dest:set2list_prop simp:set2list_def)"], ["", "subsection \\<open>\\<open>distinct_fst\\<close>\\<close>"], ["", "definition distinct_fst :: \"('a \\<times> 'b) list \\<Rightarrow> bool\" where\n  \"distinct_fst  \\<equiv>  distinct \\<circ> map fst\""], ["", "lemma distinct_fst_Nil [simp]:\n  \"distinct_fst []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst []", "apply (unfold distinct_fst_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (distinct \\<circ> map fst) []", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma distinct_fst_Cons [simp]:\n  \"distinct_fst ((k,x)#kxs) = (distinct_fst kxs \\<and> (\\<forall>y. (k,y) \\<notin> set kxs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst ((k, x) # kxs) =\n    (distinct_fst kxs \\<and> (\\<forall>y. (k, y) \\<notin> set kxs))", "apply (unfold distinct_fst_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (distinct \\<circ> map fst) ((k, x) # kxs) =\n    ((distinct \\<circ> map fst) kxs \\<and>\n     (\\<forall>y. (k, y) \\<notin> set kxs))", "apply (auto simp:image_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_of_SomeI:\n  \"\\<lbrakk> distinct_fst kxs; (k,x) \\<in> set kxs \\<rbrakk> \\<Longrightarrow> map_of kxs k = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct_fst kxs; (k, x) \\<in> set kxs\\<rbrakk>\n    \\<Longrightarrow> map_of kxs k = \\<lfloor>x\\<rfloor>", "by (induct kxs) (auto simp:fun_upd_apply)"], ["", "subsection \\<open>Using @{term list_all2} for relations\\<close>"], ["", "definition fun_of :: \"('a \\<times> 'b) set \\<Rightarrow> 'a \\<Rightarrow> 'b \\<Rightarrow> bool\" where\n  \"fun_of S \\<equiv> \\<lambda>x y. (x,y) \\<in> S\""], ["", "text \\<open>Convenience lemmas\\<close>"], ["", "declare fun_of_def [simp]"], ["", "lemma rel_list_all2_Cons [iff]:\n  \"list_all2 (fun_of S) (x#xs) (y#ys) = \n   ((x,y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) (x # xs) (y # ys) =\n    ((x, y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)", "by simp"], ["", "lemma rel_list_all2_Cons1:\n  \"list_all2 (fun_of S) (x#xs) ys = \n  (\\<exists>z zs. ys = z#zs \\<and> (x,z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) (x # xs) ys =\n    (\\<exists>z zs.\n        ys = z # zs \\<and> (x, z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)", "by (cases ys) auto"], ["", "lemma rel_list_all2_Cons2:\n  \"list_all2 (fun_of S) xs (y#ys) = \n  (\\<exists>z zs. xs = z#zs \\<and> (z,y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) xs (y # ys) =\n    (\\<exists>z zs.\n        xs = z # zs \\<and> (z, y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)", "by (cases xs) auto"], ["", "lemma rel_list_all2_refl:\n  \"(\\<And>x. (x,x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. (x, x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs", "by (simp add: list_all2_refl)"], ["", "lemma rel_list_all2_antisym:\n  \"\\<lbrakk> (\\<And>x y. \\<lbrakk>(x,y) \\<in> S; (y,x) \\<in> T\\<rbrakk> \\<Longrightarrow> x = y); \n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs \\<rbrakk> \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y.\n                \\<lbrakk>(x, y) \\<in> S; (y, x) \\<in> T\\<rbrakk>\n                \\<Longrightarrow> x = y;\n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "by (rule list_all2_antisym) auto"], ["", "lemma rel_list_all2_trans: \n  \"\\<lbrakk> \\<And>a b c. \\<lbrakk>(a,b) \\<in> R; (b,c) \\<in> S\\<rbrakk> \\<Longrightarrow> (a,c) \\<in> T;\n    list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of T) as cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b c.\n                \\<lbrakk>(a, b) \\<in> R; (b, c) \\<in> S\\<rbrakk>\n                \\<Longrightarrow> (a, c) \\<in> T;\n     list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of T) as cs", "by (rule list_all2_trans) auto"], ["", "lemma rel_list_all2_update_cong:\n  \"\\<lbrakk> i<size xs; list_all2 (fun_of S) xs ys; (x,y) \\<in> S \\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of S) (xs[i:=x]) (ys[i:=y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; list_all2 (fun_of S) xs ys;\n     (x, y) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of S) (xs[i := x]) (ys[i := y])", "by (simp add: list_all2_update_cong)"], ["", "lemma rel_list_all2_nthD:\n  \"\\<lbrakk> list_all2 (fun_of S) xs ys; p < size xs \\<rbrakk> \\<Longrightarrow> (xs!p,ys!p) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all2 (fun_of S) xs ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> (xs ! p, ys ! p) \\<in> S", "by (drule list_all2_nthD) auto"], ["", "lemma rel_list_all2I:\n  \"\\<lbrakk> length a = length b; \\<And>n. n < length a \\<Longrightarrow> (a!n,b!n) \\<in> S \\<rbrakk> \\<Longrightarrow> list_all2 (fun_of S) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length a = length b;\n     \\<And>n. n < length a \\<Longrightarrow> (a ! n, b ! n) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of S) a b", "by (erule list_all2_all_nthI) simp"], ["", "declare fun_of_def [simp del]"], ["", "end"]]}