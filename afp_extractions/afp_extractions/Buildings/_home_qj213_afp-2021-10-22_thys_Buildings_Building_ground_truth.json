{"file_name": "/home/qj213/afp-2021-10-22/thys/Buildings/Building.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Buildings", "problem_names": ["lemmas complexes                = ChamberSubcomplexD_complex [OF subcomplexes]", "lemmas apartment_simplices      = ChamberSubcomplexD_sub     [OF subcomplexes]", "lemmas chamber_in_apartment     = chamber_in_subcomplex      [OF subcomplexes]", "lemmas apartment_chamber        = subcomplex_chamber         [OF subcomplexes]", "lemmas gallery_in_apartment     = gallery_in_subcomplex      [OF subcomplexes]", "lemmas apartment_gallery        = subcomplex_gallery         [OF subcomplexes]", "lemmas min_gallery_in_apartment = min_gallery_in_subcomplex  [OF subcomplexes]", "lemmas apartment_simplex_in_max =\n  ChamberComplex.simplex_in_max [OF complexes]", "lemmas apartment_faces =\n  ChamberComplex.faces [OF complexes]", "lemmas apartment_chamber_system_def =\n  ChamberComplex.chamber_system_def [OF complexes]", "lemmas apartment_chamberD_simplex =\n  ChamberComplex.chamberD_simplex [OF complexes]", "lemmas apartment_chamber_distance_def =\n  ChamberComplex.chamber_distance_def [OF complexes]", "lemmas apartment_galleryD_chamber =\n  ChamberComplex.galleryD_chamber [OF complexes]", "lemmas apartment_gallery_least_length =\n  ChamberComplex.gallery_least_length [OF complexes]", "lemmas apartment_min_galleryD_gallery =\n  ChamberComplex.min_galleryD_gallery [OF complexes]", "lemmas apartment_min_gallery_pgallery =\n  ChamberComplex.min_gallery_pgallery [OF complexes]", "lemmas apartment_trivial_morphism =\n  ChamberComplex.trivial_morphism [OF complexes]", "lemmas apartment_chamber_system_simplices =\n  ChamberComplex.chamber_system_simplices [OF complexes]", "lemmas apartment_min_gallery_least_length =\n  ChamberComplex.min_gallery_least_length [OF complexes]", "lemmas apartment_vertex_set_int =\n  ChamberComplex.vertex_set_int[OF complexes complexes]", "lemmas apartment_standard_uniqueness_pgallery_betw =\n  ThinChamberComplex.standard_uniqueness_pgallery_betw[OF thincomplexes]", "lemmas apartment_standard_uniqueness =\n  ThinChamberComplex.standard_uniqueness[OF thincomplexes]", "lemmas apartment_standard_uniqueness_isomorphs =\n  ThinChamberComplex.standard_uniqueness_isomorphs[OF thincomplexes]", "lemma supapartmentD:\n  assumes CD: \"chamber C\" \"chamber D\"\n  defines A : \"A \\<equiv> supapartment C D\"\n  shows   \"A\\<in>\\<A>\" \"C\\<in>A\" \"D\\<in>A\"", "lemma iso_fixespointwise_chamber_in_int_apartments:\n  assumes apartments: \"A \\<in> \\<A>\" \"A' \\<in> \\<A>\"\n  and     chamber   : \"chamber C\" \"C\\<in>A\\<inter>A'\"\n  and     iso       : \"ChamberComplexIsomorphism A A' f\" \"fixespointwise f C\"\n  shows \"fixespointwise f (\\<Union>(A\\<inter>A'))\"", "lemma strong_intersecttwo:\n  \"\\<lbrakk> A\\<in>\\<A>; A'\\<in>\\<A>; chamber C; C \\<in> A\\<inter>A' \\<rbrakk> \\<Longrightarrow>\n    \\<exists>f. ChamberComplexIsomorphism A A' f \\<and> fixespointwise f (\\<Union>(A\\<inter>A'))\"", "lemma ex1_apartment_iso:\n  assumes \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\\<inter>A'\"\n  shows   \"\\<exists>!f. ChamberComplexIsomorphism A A' f \\<and>\n            fixespointwise f (\\<Union>(A\\<inter>A')) \\<and> fixespointwise f (-\\<Union>A)\"\n\\<comment> \\<open>The third clause in the conjunction is to facilitate uniqueness.\\<close>", "lemma the_apartment_isoD:\n  assumes   \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\\<inter>A'\"\n  defines   \"f \\<equiv> the_apartment_iso A A'\"\n  shows     \"ChamberComplexIsomorphism A A' f\" \"fixespointwise f (\\<Union>(A\\<inter>A'))\"\n            \"fixespointwise f (-\\<Union>A)\"", "lemmas the_apartment_iso_apartment_chamber_map =\n  ChamberComplexIsomorphism.chamber_map [OF the_apartment_isoD(1)]", "lemmas the_apartment_iso_apartment_simplex_map =\n  ChamberComplexIsomorphism.simplex_map [OF the_apartment_isoD(1)]", "lemma the_apartment_iso_chamber_map:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; C\\<in>A\\<inter>B; chamber D; D\\<in>A \\<rbrakk> \\<Longrightarrow>\n    chamber (the_apartment_iso A B ` D)\"", "lemma the_apartment_iso_comp:\n  assumes apartments: \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"A''\\<in>\\<A>\"\n  and     chamber   : \"chamber C\" \"C\\<in>A\\<inter>A'\\<inter>A''\"\n  defines \"f \\<equiv> the_apartment_iso A A'\"\n  and     \"g \\<equiv> the_apartment_iso A' A''\"\n  and     \"h \\<equiv> the_apartment_iso A A''\"\n  defines \"gf \\<equiv> restrict1 (g\\<circ>f) (\\<Union>A)\"\n  shows   \"h = gf\"", "lemma the_apartment_iso_int_im:\n  assumes   \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\\<inter>A'\" \"x\\<in>A\\<inter>A'\"\n  defines   \"f \\<equiv> the_apartment_iso A A'\"\n  shows     \"f`x = x\"", "lemma canonical_retraction_retraction:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\" \"v\\<in>\\<Union>A\"\n  shows   \"canonical_retraction A C v = v\"", "lemma canonical_retraction_simplex_retraction1:\n  \"\\<lbrakk> A\\<in>\\<A>; chamber C; C\\<in>A; a\\<in>A \\<rbrakk> \\<Longrightarrow>\n    fixespointwise (canonical_retraction A C) a\"", "lemma canonical_retraction_simplex_retraction2:\n  \"\\<lbrakk> A\\<in>\\<A>; chamber C; C\\<in>A; a\\<in>A \\<rbrakk> \\<Longrightarrow> canonical_retraction A C ` a = a\"", "lemma canonical_retraction_uniform:\n  assumes apartments: \"A\\<in>\\<A>\" \"B\\<in>\\<A>\"\n  and     chambers  : \"chamber C\" \"C\\<in>A\\<inter>B\"\n  shows   \"fun_eq_on (canonical_retraction A C) (the_apartment_iso B A) (\\<Union>B)\"", "lemma canonical_retraction_uniform_im:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; C\\<in>A\\<inter>B; x\\<in>B \\<rbrakk> \\<Longrightarrow>\n    canonical_retraction A C ` x = the_apartment_iso B A ` x\"", "lemma canonical_retraction_simplex_im:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\"\n  shows   \"canonical_retraction A C \\<turnstile> X = A\"", "lemma canonical_retraction_vertex_im:\n  \"\\<lbrakk> A\\<in>\\<A>; chamber C; C\\<in>A \\<rbrakk> \\<Longrightarrow> canonical_retraction A C ` \\<Union>X = \\<Union>A\"", "lemma canonical_retraction:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\"\n  shows \"ChamberComplexRetraction X (canonical_retraction A C)\"", "lemma canonical_retraction_comp_endomorphism:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; chamber D; C\\<in>A; D\\<in>B \\<rbrakk> \\<Longrightarrow>\n    ChamberComplexEndomorphism X\n      (canonical_retraction A C \\<circ> canonical_retraction B D)\"", "lemma canonical_retraction_comp_simplex_im_subset:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; chamber D; C\\<in>A; D\\<in>B \\<rbrakk> \\<Longrightarrow>\n      (canonical_retraction A C \\<circ> canonical_retraction B D) \\<turnstile> X \\<subseteq> A\"", "lemma canonical_retraction_comp_apartment_endomorphism:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; chamber D; C\\<in>A; D\\<in>B \\<rbrakk> \\<Longrightarrow>\n    ChamberComplexEndomorphism A\n      (restrict1 (canonical_retraction A C \\<circ> canonical_retraction B D) (\\<Union>A))\"", "lemma apartment_chamber_distance:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<in>A\" \"D\\<in>A\"\n  shows   \"ChamberComplex.chamber_distance A C D = chamber_distance C D\"", "lemma apartment_min_gallery:\n  assumes \"A\\<in>\\<A>\" \"ChamberComplex.min_gallery A Cs\"\n  shows   \"min_gallery Cs\"", "lemma apartment_face_distance:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\" \"F\\<in>A\"\n  shows   \"ChamberComplex.face_distance A F C = face_distance F C\"", "lemma apartment_face_distance_eq_chamber_distance_compare_other_chamber:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"chamber E\" \"C\\<in>A\" \"D\\<in>A\" \"E\\<in>A\"\n          \"z\\<lhd>C\" \"z\\<lhd>D\" \"C\\<noteq>D\" \"chamber_distance C E \\<le> chamber_distance D E\"\n  shows   \"face_distance z E = chamber_distance C E\"", "lemma canonical_retraction_face_distance_map:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<in>A\" \"F\\<subseteq>C\"\n  shows   \"face_distance F (canonical_retraction A C ` D) = face_distance F D\"", "lemma rotate: \"ChamberComplexApartmentSystemTriangle X \\<A> B' A B D E C z\"", "lemma reflect: \"ChamberComplexApartmentSystemTriangle X \\<A> A B' B D C E z\"", "lemma facet_in_chambers: \"z\\<subseteq>C\" \"z\\<subseteq>D\" \"z\\<subseteq>E\"", "lemma A_chambers:\n  \"ChamberComplex.chamber A C\" \"ChamberComplex.chamber A D\"", "lemma res_fold_A_A_chamber_image:\n  \"ChamberComplex.chamber A F \\<Longrightarrow> res_fold_A ` F = fold_A ` F\"", "lemma the_apartment_iso_middle_im: \"the_apartment_iso A B ` D = E\"", "lemma inside_canonical_retraction_chamber_images:\n  \"canonical_retraction B C ` C = C\" \n  \"canonical_retraction B C ` D = E\"\n  \"canonical_retraction B C ` E = E\"", "lemmas in_canretract_chimages =\n  inside_canonical_retraction_chamber_images", "lemma outside_canonical_retraction_chamber_images:\n  \"canonical_retraction A D ` C = C\"\n  \"canonical_retraction A D ` D = D\"\n  \"canonical_retraction A D ` E = C\"", "lemma fold_A_chamber_images:\n  \"fold_A ` C = C\" \"fold_A ` D = C\" \"fold_A ` E = C\"", "lemmas opp_fold_A_chamber_images =\n  ChamberComplexApartmentSystemTriangle.fold_A_chamber_images[OF reflect]", "lemma res_fold_A_chamber_images: \"res_fold_A ` C = C\" \"res_fold_A ` D = C\"", "lemmas res_opp_fold_A_chamber_images =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_chamber_images[OF reflect]", "lemma fold_A_fixespointwise1: \"fixespointwise fold_A C\"", "lemmas opp_fold_A_fixespointwise2 =\n  ChamberComplexApartmentSystemTriangle.fold_A_fixespointwise1[OF reflect]", "lemma fold_A_facet_im: \"fold_A ` z = z\"", "lemma fold_A_endo_X: \"ChamberComplexEndomorphism X fold_A\"", "lemma res_fold_A_endo_A: \"ChamberComplexEndomorphism A res_fold_A\"", "lemmas opp_res_fold_A_endo_A =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_endo_A[OF reflect]", "lemma fold_A_morph_A_A: \"ChamberComplexMorphism A A fold_A\"", "lemmas opp_fold_A_morph_A_A =\n  ChamberComplexApartmentSystemTriangle.fold_A_morph_A_A[OF reflect]", "lemma res_fold_A_A_im_fold_A_A_im: \"res_fold_A  \\<turnstile> A = fold_A  \\<turnstile> A\"", "lemmas res_opp_fold_A_A_im_opp_fold_A_A_im =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_A_im_fold_A_A_im[\n    OF reflect\n  ]", "lemma res_fold_A_\\<C>_A_im_fold_A_\\<C>_A_im:\n  \"res_fold_A  \\<turnstile> (ChamberComplex.chamber_system A) =\n    fold_A  \\<turnstile> (ChamberComplex.chamber_system A)\"", "lemmas res_opp_fold_A_\\<C>_A_im_opp_fold_A_\\<C>_A_im =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_\\<C>_A_im_fold_A_\\<C>_A_im[\n    OF reflect\n  ]", "lemma chambercomplex_fold_A_im: \"ChamberComplex (fold_A \\<turnstile> A)\"", "lemmas chambercomplex_opp_fold_A_im =\n  ChamberComplexApartmentSystemTriangle.chambercomplex_fold_A_im[\n    OF reflect\n  ]", "lemma chambersubcomplex_fold_A_im:\n  \"ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\"", "lemmas chambersubcomplex_opp_fold_A_im =\n  ChamberComplexApartmentSystemTriangle.chambersubcomplex_fold_A_im[\n    OF reflect\n  ]", "lemma fold_A_facet_distance_map:\n  \"chamber F \\<Longrightarrow> face_distance z (fold_A`F) = face_distance z F\"", "lemma fold_A_min_gallery_betw_map:\n  assumes \"chamber F\" \"chamber G\" \"z\\<subseteq>F\"\n          \"face_distance z G = chamber_distance F G\" \"min_gallery (F#Fs@[G])\"\n  shows   \"min_gallery (fold_A\\<Turnstile>(F#Fs@[G]))\"", "lemma fold_A_chamber_system_image_fixespointwise':\n  defines \\<C>_A : \"\\<C>_A  \\<equiv> ChamberComplex.\\<C> A\"\n  defines f\\<C>_A: \"f\\<C>_A \\<equiv> {F\\<in>\\<C>_A. face_distance z F = chamber_distance C F}\"\n  assumes F   : \"F\\<in>f\\<C>_A\"\n  shows   \"fixespointwise fold_A F\"", "lemma fold_A_chamber_system_image:\n  defines \\<C>_A : \"\\<C>_A \\<equiv> ChamberComplex.\\<C> A\"\n  defines f\\<C>_A: \"f\\<C>_A \\<equiv> {F\\<in>\\<C>_A. face_distance z F = chamber_distance C F}\"\n  shows   \"fold_A \\<turnstile> \\<C>_A = f\\<C>_A\"", "lemmas opp_fold_A_chamber_system_image =\n  ChamberComplexApartmentSystemTriangle.fold_A_chamber_system_image[\n    OF reflect\n  ]", "lemma fold_A_chamber_system_image_fixespointwise:\n  \"F \\<in> ChamberComplex.\\<C> A \\<Longrightarrow> fixespointwise fold_A (fold_A`F)\"", "lemmas fold_A_chsys_imfix = fold_A_chamber_system_image_fixespointwise", "lemmas opp_fold_A_chamber_system_image_fixespointwise =\n  ChamberComplexApartmentSystemTriangle.fold_A_chsys_imfix[\n    OF reflect\n  ]", "lemma chamber_in_fold_A_im:\n  \"chamber F \\<Longrightarrow> F \\<in> fold_A \\<turnstile> A \\<Longrightarrow> F \\<in> fold_A \\<turnstile> ChamberComplex.\\<C> A\"", "lemmas chamber_in_opp_fold_A_im =\n  ChamberComplexApartmentSystemTriangle.chamber_in_fold_A_im[OF reflect]", "lemma simplex_in_fold_A_im_image:\n  assumes \"x \\<in> fold_A \\<turnstile> A\"\n  shows   \"fold_A ` x = x\"", "lemma chamber1_notin_rfold_im: \"C \\<notin> opp_fold_A \\<turnstile> A\"", "lemma fold_A_min_gallery_from1_map:\n  \"\\<lbrakk> chamber F; F \\<in> fold_A \\<turnstile> A; min_gallery (C#Fs@[F]) \\<rbrakk> \\<Longrightarrow>\n    min_gallery (C # fold_A \\<Turnstile> Fs @ [F])\"", "lemma fold_A_min_gallery_from2_map:\n  \"\\<lbrakk> chamber F; F \\<in> opp_fold_A \\<turnstile> A; min_gallery (D#Fs@[F]) \\<rbrakk> \\<Longrightarrow>\n    min_gallery (C # fold_A \\<Turnstile> (Fs@[F]))\"", "lemma fold_A_min_gallery_to2_map:\n  assumes \"chamber F\" \"F \\<in> opp_fold_A \\<turnstile> A\" \"min_gallery (F#Fs@[D])\"\n  shows   \"min_gallery (fold_A \\<Turnstile> (F#Fs) @ [C])\"", "lemmas opp_fold_A_min_gallery_from1_map =\n  ChamberComplexApartmentSystemTriangle.fold_A_min_gallery_from2_map[\n    OF reflect\n  ]", "lemmas opp_fold_A_min_gallery_to1_map =\n  ChamberComplexApartmentSystemTriangle.fold_A_min_gallery_to2_map[\n    OF reflect\n  ]", "lemma closer_to_chamber1_not_in_rfold_im_chamber_system:\n  assumes \"chamber_distance C F \\<le> chamber_distance D F\"\n  shows   \"F \\<notin> ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)\"", "lemmas clsrch1_nin_rfold_im_chsys =\n  closer_to_chamber1_not_in_rfold_im_chamber_system", "lemmas closer_to_chamber2_not_in_fold_im_chamber_system =\n  ChamberComplexApartmentSystemTriangle.clsrch1_nin_rfold_im_chsys[\n    OF reflect\n  ]", "lemma fold_A_opp_fold_A_chamber_systems:\n  \"ChamberComplex.\\<C> A =\n    (ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<union> (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A))\"\n  \"(ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<inter> (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)) =\n    {}\"", "lemma fold_A_im_min_gallery':\n  assumes \"ChamberComplex.min_gallery (fold_A \\<turnstile> A) (C#Cs)\"\n  shows   \"ChamberComplex.min_gallery A (C#Cs)\"", "lemma fold_A_im_min_gallery:\n  \"ChamberComplex.min_gallery (fold_A \\<turnstile> A) (C#Cs) \\<Longrightarrow> min_gallery (C#Cs)\"", "lemma fold_A_comp_fixespointwise:\n  \"fixespointwise (fold_A \\<circ> opp_fold_A) (\\<Union> (fold_A \\<turnstile> A))\"", "lemmas opp_fold_A_comp_fixespointwise =\n  ChamberComplexApartmentSystemTriangle.fold_A_comp_fixespointwise[OF reflect]", "lemma fold_A_fold:\n  \"ChamberComplexIsomorphism (opp_fold_A \\<turnstile> A) (fold_A \\<turnstile> A) fold_A\"", "lemma res_fold_A: \"ChamberComplexFolding A res_fold_A\"", "lemmas opp_res_fold_A =\n  ChamberComplexApartmentSystemTriangle.res_fold_A[OF reflect]", "lemmas some_third_chamberD_facet =\n  ThickChamberComplex.some_third_chamberD_facet [OF thick]", "lemmas some_third_chamberD_ne =\n  ThickChamberComplex.some_third_chamberD_ne [OF thick]", "lemmas chamber_some_third_chamber =\n  ThickChamberComplex.chamber_some_third_chamber [OF thick]", "lemma apartments_have_many_foldings1:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<sim>D\" \"C\\<noteq>D\" \"C\\<in>A\" \"D\\<in>A\"\n  defines \"E \\<equiv> some_third_chamber C D (C\\<inter>D)\"\n  defines \"B  \\<equiv> supapartment C E\"\n  and     \"B' \\<equiv> supapartment D E\"\n  defines \"f \\<equiv> restrict1 (canonical_retraction A D \\<circ> canonical_retraction B  C)\n            (\\<Union>A)\"\n  and     \"g \\<equiv> restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n            (\\<Union>A)\"\n  shows   \"f`D = C\" \"ChamberComplexFolding A f\"\n          \"g`C = D\" \"ChamberComplexFolding A g\"", "lemma apartments_have_many_foldings2:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<sim>D\" \"C\\<noteq>D\" \"C\\<in>A\" \"D\\<in>A\"\n  defines \"E \\<equiv> some_third_chamber C D (C\\<inter>D)\"\n  defines \"B  \\<equiv> supapartment C E\"\n  and     \"B' \\<equiv> supapartment D E\"\n  defines \"f \\<equiv> restrict1 (canonical_retraction A D \\<circ> canonical_retraction B  C)\n            (\\<Union>A)\"\n  and     \"g \\<equiv> restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n            (\\<Union>A)\"\n  shows   \"OpposedThinChamberComplexFoldings A f g C\"", "lemma apartments_have_many_foldings3:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<sim>D\" \"C\\<noteq>D\" \"C\\<in>A\" \"D\\<in>A\"\n  shows   \"\\<exists>f g. OpposedThinChamberComplexFoldings A f g C \\<and> D=g`C\"", "lemma apartments_have_many_foldings:\n  assumes \"A\\<in>\\<A>\" \"C\\<in>A\" \"chamber C\"\n  shows   \"ThinChamberComplexManyFoldings A C\"", "theorem apartments_are_coxeter:\n  \"A\\<in>\\<A> \\<Longrightarrow> \\<exists>S::'a permutation set. (\n    CoxeterComplex S \\<and>\n    (\\<exists>\\<psi>. ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>)\n  )\""], "translations": [["", "lemmas complexes                = ChamberSubcomplexD_complex [OF subcomplexes]"], ["", "lemmas apartment_simplices      = ChamberSubcomplexD_sub     [OF subcomplexes]"], ["", "lemmas chamber_in_apartment     = chamber_in_subcomplex      [OF subcomplexes]"], ["", "lemmas apartment_chamber        = subcomplex_chamber         [OF subcomplexes]"], ["", "lemmas gallery_in_apartment     = gallery_in_subcomplex      [OF subcomplexes]"], ["", "lemmas apartment_gallery        = subcomplex_gallery         [OF subcomplexes]"], ["", "lemmas min_gallery_in_apartment = min_gallery_in_subcomplex  [OF subcomplexes]"], ["", "lemmas apartment_simplex_in_max =\n  ChamberComplex.simplex_in_max [OF complexes]"], ["", "lemmas apartment_faces =\n  ChamberComplex.faces [OF complexes]"], ["", "lemmas apartment_chamber_system_def =\n  ChamberComplex.chamber_system_def [OF complexes]"], ["", "lemmas apartment_chamberD_simplex =\n  ChamberComplex.chamberD_simplex [OF complexes]"], ["", "lemmas apartment_chamber_distance_def =\n  ChamberComplex.chamber_distance_def [OF complexes]"], ["", "lemmas apartment_galleryD_chamber =\n  ChamberComplex.galleryD_chamber [OF complexes]"], ["", "lemmas apartment_gallery_least_length =\n  ChamberComplex.gallery_least_length [OF complexes]"], ["", "lemmas apartment_min_galleryD_gallery =\n  ChamberComplex.min_galleryD_gallery [OF complexes]"], ["", "lemmas apartment_min_gallery_pgallery =\n  ChamberComplex.min_gallery_pgallery [OF complexes]"], ["", "lemmas apartment_trivial_morphism =\n  ChamberComplex.trivial_morphism [OF complexes]"], ["", "lemmas apartment_chamber_system_simplices =\n  ChamberComplex.chamber_system_simplices [OF complexes]"], ["", "lemmas apartment_min_gallery_least_length =\n  ChamberComplex.min_gallery_least_length [OF complexes]"], ["", "lemmas apartment_vertex_set_int =\n  ChamberComplex.vertex_set_int[OF complexes complexes]"], ["", "lemmas apartment_standard_uniqueness_pgallery_betw =\n  ThinChamberComplex.standard_uniqueness_pgallery_betw[OF thincomplexes]"], ["", "lemmas apartment_standard_uniqueness =\n  ThinChamberComplex.standard_uniqueness[OF thincomplexes]"], ["", "lemmas apartment_standard_uniqueness_isomorphs =\n  ThinChamberComplex.standard_uniqueness_isomorphs[OF thincomplexes]"], ["", "abbreviation \"supapartment C D \\<equiv> (SOME A. A\\<in>\\<A> \\<and> C\\<in>A \\<and> D\\<in>A)\""], ["", "lemma supapartmentD:\n  assumes CD: \"chamber C\" \"chamber D\"\n  defines A : \"A \\<equiv> supapartment C D\"\n  shows   \"A\\<in>\\<A>\" \"C\\<in>A\" \"D\\<in>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> \\<A> &&& C \\<in> A &&& D \\<in> A", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. A \\<in> \\<A>\n 2. C \\<in> A\n 3. D \\<in> A", "from CD"], ["proof (chain)\npicking this:\n  chamber C\n  chamber D", "have 1: \"\\<exists>A. A\\<in>\\<A> \\<and> C\\<in>A \\<and> D\\<in>A\""], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n\ngoal (1 subgoal):\n 1. \\<exists>A. A \\<in> \\<A> \\<and> C \\<in> A \\<and> D \\<in> A", "using containtwo"], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. ?C \\<in> A \\<and> ?D \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>A. A \\<in> \\<A> \\<and> C \\<in> A \\<and> D \\<in> A", "by fast"], ["proof (state)\nthis:\n  \\<exists>A. A \\<in> \\<A> \\<and> C \\<in> A \\<and> D \\<in> A\n\ngoal (3 subgoals):\n 1. A \\<in> \\<A>\n 2. C \\<in> A\n 3. D \\<in> A", "from A"], ["proof (chain)\npicking this:\n  A \\<equiv> supapartment C D", "show \"A\\<in>\\<A>\" \"C\\<in>A\" \"D\\<in>A\""], ["proof (prove)\nusing this:\n  A \\<equiv> supapartment C D\n\ngoal (1 subgoal):\n 1. A \\<in> \\<A> &&& C \\<in> A &&& D \\<in> A", "using someI_ex[OF 1]"], ["proof (prove)\nusing this:\n  A \\<equiv> supapartment C D\n  supapartment C D \\<in> \\<A> \\<and>\n  C \\<in> supapartment C D \\<and> D \\<in> supapartment C D\n\ngoal (1 subgoal):\n 1. A \\<in> \\<A> &&& C \\<in> A &&& D \\<in> A", "by auto"], ["proof (state)\nthis:\n  A \\<in> \\<A>\n  C \\<in> A\n  D \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_fixespointwise_chamber_in_int_apartments:\n  assumes apartments: \"A \\<in> \\<A>\" \"A' \\<in> \\<A>\"\n  and     chamber   : \"chamber C\" \"C\\<in>A\\<inter>A'\"\n  and     iso       : \"ChamberComplexIsomorphism A A' f\" \"fixespointwise f C\"\n  shows \"fixespointwise f (\\<Union>(A\\<inter>A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise f (\\<Union> (A \\<inter> A'))", "proof (rule fixespointwiseI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow> f a = id a", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow> f a = id a", "assume \"v \\<in> \\<Union>(A \\<inter> A')\""], ["proof (state)\nthis:\n  v \\<in> \\<Union> (A \\<inter> A')\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow> f a = id a", "from this"], ["proof (chain)\npicking this:\n  v \\<in> \\<Union> (A \\<inter> A')", "obtain x where x: \"x \\<in> A\\<inter>A'\" \"v \\<in> x\""], ["proof (prove)\nusing this:\n  v \\<in> \\<Union> (A \\<inter> A')\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A \\<inter> A'; v \\<in> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x \\<in> A \\<inter> A'\n  v \\<in> x\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow> f a = id a", "from apartments x(1) chamber intersecttwo[of A A']"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  x \\<in> A \\<inter> A'\n  chamber C\n  C \\<in> A \\<inter> A'\n  \\<lbrakk>A \\<in> \\<A>; A' \\<in> \\<A>; ?x \\<in> A \\<inter> A';\n   ?C \\<in> A \\<inter> A'; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       ChamberComplexIsomorphism A A' f \\<and>\n                       fixespointwise f ?x \\<and> fixespointwise f ?C", "obtain g\n    where g:  \"ChamberComplexIsomorphism A A' g\"\n              \"fixespointwise g x\" \"fixespointwise g C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  x \\<in> A \\<inter> A'\n  chamber C\n  C \\<in> A \\<inter> A'\n  \\<lbrakk>A \\<in> \\<A>; A' \\<in> \\<A>; ?x \\<in> A \\<inter> A';\n   ?C \\<in> A \\<inter> A'; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       ChamberComplexIsomorphism A A' f \\<and>\n                       fixespointwise f ?x \\<and> fixespointwise f ?C\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>ChamberComplexIsomorphism A A' g; fixespointwise g x;\n         fixespointwise g C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by    force"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A' g\n  fixespointwise g x\n  fixespointwise g C\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow> f a = id a", "from assms g(1,3)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  ChamberComplexIsomorphism A A' f\n  fixespointwise f C\n  ChamberComplexIsomorphism A A' g\n  fixespointwise g C", "have \"fun_eq_on f g (\\<Union>A)\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  ChamberComplexIsomorphism A A' f\n  fixespointwise f C\n  ChamberComplexIsomorphism A A' g\n  fixespointwise g C\n\ngoal (1 subgoal):\n 1. fun_eq_on f g (\\<Union> A)", "using chamber_in_apartment"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  ChamberComplexIsomorphism A A' f\n  fixespointwise f C\n  ChamberComplexIsomorphism A A' g\n  fixespointwise g C\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n\ngoal (1 subgoal):\n 1. fun_eq_on f g (\\<Union> A)", "by    (auto intro:\n            apartment_standard_uniqueness_isomorphs\n            fixespointwise2_imp_eq_on\n          )"], ["proof (state)\nthis:\n  fun_eq_on f g (\\<Union> A)\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow> f a = id a", "with x g(2)"], ["proof (chain)\npicking this:\n  x \\<in> A \\<inter> A'\n  v \\<in> x\n  fixespointwise g x\n  fun_eq_on f g (\\<Union> A)", "show \"f v = id v\""], ["proof (prove)\nusing this:\n  x \\<in> A \\<inter> A'\n  v \\<in> x\n  fixespointwise g x\n  fun_eq_on f g (\\<Union> A)\n\ngoal (1 subgoal):\n 1. f v = id v", "using fixespointwiseD fun_eq_onD"], ["proof (prove)\nusing this:\n  x \\<in> A \\<inter> A'\n  v \\<in> x\n  fixespointwise g x\n  fun_eq_on f g (\\<Union> A)\n  \\<lbrakk>fixespointwise ?f ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?f ?a = id ?a\n  \\<lbrakk>fun_eq_on ?f ?g ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?f ?a = ?g ?a\n\ngoal (1 subgoal):\n 1. f v = id v", "by force"], ["proof (state)\nthis:\n  f v = id v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strong_intersecttwo:\n  \"\\<lbrakk> A\\<in>\\<A>; A'\\<in>\\<A>; chamber C; C \\<in> A\\<inter>A' \\<rbrakk> \\<Longrightarrow>\n    \\<exists>f. ChamberComplexIsomorphism A A' f \\<and> fixespointwise f (\\<Union>(A\\<inter>A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; A' \\<in> \\<A>; chamber C;\n     C \\<in> A \\<inter> A'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         ChamberComplexIsomorphism A A' f \\<and>\n                         fixespointwise f (\\<Union> (A \\<inter> A'))", "using intersecttwo[of A A']\n        iso_fixespointwise_chamber_in_int_apartments[of A A' C]"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> \\<A>; A' \\<in> \\<A>; ?x \\<in> A \\<inter> A';\n   ?C \\<in> A \\<inter> A'; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       ChamberComplexIsomorphism A A' f \\<and>\n                       fixespointwise f ?x \\<and> fixespointwise f ?C\n  \\<lbrakk>A \\<in> \\<A>; A' \\<in> \\<A>; chamber C; C \\<in> A \\<inter> A';\n   ChamberComplexIsomorphism A A' ?f; fixespointwise ?f C\\<rbrakk>\n  \\<Longrightarrow> fixespointwise ?f (\\<Union> (A \\<inter> A'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; A' \\<in> \\<A>; chamber C;\n     C \\<in> A \\<inter> A'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         ChamberComplexIsomorphism A A' f \\<and>\n                         fixespointwise f (\\<Union> (A \\<inter> A'))", "by    force"], ["", "end"], ["", "(* context ChamberComplexWithApartmentSystem *)"], ["", "subsubsection \\<open>Isomorphisms between apartments\\<close>"], ["", "text \\<open>\n  By standard uniqueness, the isomorphism between overlapping apartments guaranteed by the axiom\n  \\<open>intersecttwo\\<close> is unique.\n\\<close>"], ["", "context ChamberComplexWithApartmentSystem\nbegin"], ["", "lemma ex1_apartment_iso:\n  assumes \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\\<inter>A'\"\n  shows   \"\\<exists>!f. ChamberComplexIsomorphism A A' f \\<and>\n            fixespointwise f (\\<Union>(A\\<inter>A')) \\<and> fixespointwise f (-\\<Union>A)\"\n\\<comment> \\<open>The third clause in the conjunction is to facilitate uniqueness.\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)", "proof (rule ex_ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "from assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'", "obtain f\n    where f: \"ChamberComplexIsomorphism A A' f\" \"fixespointwise f (\\<Union>(A\\<inter>A'))\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>ChamberComplexIsomorphism A A' f;\n         fixespointwise f (\\<Union> (A \\<inter> A'))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using strong_intersecttwo"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       ChamberComplexIsomorphism ?A ?A' f \\<and>\n                       fixespointwise f (\\<Union> (?A \\<inter> ?A'))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>ChamberComplexIsomorphism A A' f;\n         fixespointwise f (\\<Union> (A \\<inter> A'))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A' f\n  fixespointwise f (\\<Union> (A \\<inter> A'))\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "define f' where \"f' = restrict1 f (\\<Union>A)\""], ["proof (state)\nthis:\n  f' = restrict1 f (\\<Union> A)\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "from f(1) f'_def"], ["proof (chain)\npicking this:\n  ChamberComplexIsomorphism A A' f\n  f' = restrict1 f (\\<Union> A)", "have \"ChamberComplexIsomorphism A A' f'\""], ["proof (prove)\nusing this:\n  ChamberComplexIsomorphism A A' f\n  f' = restrict1 f (\\<Union> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A' f'", "by (fastforce intro: ChamberComplexIsomorphism.iso_cong fun_eq_onI)"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A' f'\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "moreover"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A' f'\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "from f(2) f'_def"], ["proof (chain)\npicking this:\n  fixespointwise f (\\<Union> (A \\<inter> A'))\n  f' = restrict1 f (\\<Union> A)", "have \"fixespointwise f' (\\<Union>(A\\<inter>A'))\""], ["proof (prove)\nusing this:\n  fixespointwise f (\\<Union> (A \\<inter> A'))\n  f' = restrict1 f (\\<Union> A)\n\ngoal (1 subgoal):\n 1. fixespointwise f' (\\<Union> (A \\<inter> A'))", "using fun_eq_onI[of \"\\<Union>(A\\<inter>A')\" f' f]"], ["proof (prove)\nusing this:\n  fixespointwise f (\\<Union> (A \\<inter> A'))\n  f' = restrict1 f (\\<Union> A)\n  (\\<And>a.\n      a \\<in> \\<Union> (A \\<inter> A') \\<Longrightarrow>\n      f' a = f a) \\<Longrightarrow>\n  fun_eq_on f' f (\\<Union> (A \\<inter> A'))\n\ngoal (1 subgoal):\n 1. fixespointwise f' (\\<Union> (A \\<inter> A'))", "by    (fastforce intro: fixespointwise_cong)"], ["proof (state)\nthis:\n  fixespointwise f' (\\<Union> (A \\<inter> A'))\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "moreover"], ["proof (state)\nthis:\n  fixespointwise f' (\\<Union> (A \\<inter> A'))\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "from f'_def"], ["proof (chain)\npicking this:\n  f' = restrict1 f (\\<Union> A)", "have \"fixespointwise f' (-\\<Union>A)\""], ["proof (prove)\nusing this:\n  f' = restrict1 f (\\<Union> A)\n\ngoal (1 subgoal):\n 1. fixespointwise f' (- \\<Union> A)", "by (auto intro: fixespointwiseI)"], ["proof (state)\nthis:\n  fixespointwise f' (- \\<Union> A)\n\ngoal (2 subgoals):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)\n 2. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "ultimately"], ["proof (chain)\npicking this:\n  ChamberComplexIsomorphism A A' f'\n  fixespointwise f' (\\<Union> (A \\<inter> A'))\n  fixespointwise f' (- \\<Union> A)", "show  \"\\<exists>f. ChamberComplexIsomorphism A A' f \\<and>\n            fixespointwise f (\\<Union>(A\\<inter>A')) \\<and> fixespointwise f (-\\<Union>A)\""], ["proof (prove)\nusing this:\n  ChamberComplexIsomorphism A A' f'\n  fixespointwise f' (\\<Union> (A \\<inter> A'))\n  fixespointwise f' (- \\<Union> A)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       ChamberComplexIsomorphism A A' f \\<and>\n       fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n       fixespointwise f (- \\<Union> A)", "by    fast"], ["proof (state)\nthis:\n  \\<exists>f.\n     ChamberComplexIsomorphism A A' f \\<and>\n     fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n     fixespointwise f (- \\<Union> A)\n\ngoal (1 subgoal):\n 1. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "fix f g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "assume  \"ChamberComplexIsomorphism A A' f \\<and>\n            fixespointwise f (\\<Union>(A \\<inter> A')) \\<and> fixespointwise f (-\\<Union>A)\"\n          \"ChamberComplexIsomorphism A A' g \\<and>\n            fixespointwise g (\\<Union>(A \\<inter> A')) \\<and> fixespointwise g (-\\<Union>A)\""], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A' f \\<and>\n  fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise f (- \\<Union> A)\n  ChamberComplexIsomorphism A A' g \\<and>\n  fixespointwise g (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise g (- \\<Union> A)\n\ngoal (1 subgoal):\n 1. \\<And>f y.\n       \\<lbrakk>ChamberComplexIsomorphism A A' f \\<and>\n                fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n                fixespointwise f (- \\<Union> A);\n        ChamberComplexIsomorphism A A' y \\<and>\n        fixespointwise y (\\<Union> (A \\<inter> A')) \\<and>\n        fixespointwise y (- \\<Union> A)\\<rbrakk>\n       \\<Longrightarrow> f = y", "with assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  ChamberComplexIsomorphism A A' f \\<and>\n  fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise f (- \\<Union> A)\n  ChamberComplexIsomorphism A A' g \\<and>\n  fixespointwise g (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise g (- \\<Union> A)", "show \"f=g\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  ChamberComplexIsomorphism A A' f \\<and>\n  fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise f (- \\<Union> A)\n  ChamberComplexIsomorphism A A' g \\<and>\n  fixespointwise g (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise g (- \\<Union> A)\n\ngoal (1 subgoal):\n 1. f = g", "using chamber_in_apartment fixespointwise2_imp_eq_on[of f C g] fun_eq_on_cong\n          fixespointwise_subset[of f \"\\<Union>(A\\<inter>A')\" C]\n          fixespointwise_subset[of g \"\\<Union>(A\\<inter>A')\" C]\n          apartment_standard_uniqueness_isomorphs"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  ChamberComplexIsomorphism A A' f \\<and>\n  fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise f (- \\<Union> A)\n  ChamberComplexIsomorphism A A' g \\<and>\n  fixespointwise g (\\<Union> (A \\<inter> A')) \\<and>\n  fixespointwise g (- \\<Union> A)\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>fixespointwise f C; fixespointwise g C\\<rbrakk>\n  \\<Longrightarrow> fun_eq_on f g C\n  \\<lbrakk>fun_eq_on ?f ?h ?A; fun_eq_on ?g ?h ?A\\<rbrakk>\n  \\<Longrightarrow> fun_eq_on ?f ?g ?A\n  \\<lbrakk>fixespointwise f (\\<Union> (A \\<inter> A'));\n   order.greater_eq (\\<Union> (A \\<inter> A')) C\\<rbrakk>\n  \\<Longrightarrow> fixespointwise f C\n  \\<lbrakk>fixespointwise g (\\<Union> (A \\<inter> A'));\n   order.greater_eq (\\<Union> (A \\<inter> A')) C\\<rbrakk>\n  \\<Longrightarrow> fixespointwise g C\n  \\<lbrakk>?X \\<in> \\<A>; ChamberComplexIsomorphism ?W ?X ?f;\n   ChamberComplexIsomorphism ?W ?X ?g; SimplicialComplex.maxsimp ?W ?C;\n   fun_eq_on ?f ?g ?C\\<rbrakk>\n  \\<Longrightarrow> fun_eq_on ?f ?g (\\<Union> ?W)\n\ngoal (1 subgoal):\n 1. f = g", "by    (blast intro: fun_eq_on_set_and_comp_imp_eq)"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "definition the_apartment_iso :: \"'a set set \\<Rightarrow> 'a set set \\<Rightarrow> ('a\\<Rightarrow>'a)\"\n  where \"the_apartment_iso A A' \\<equiv>\n          (THE f. ChamberComplexIsomorphism A A' f \\<and>\n            fixespointwise f (\\<Union>(A\\<inter>A')) \\<and> fixespointwise f (-\\<Union>A))\""], ["", "lemma the_apartment_isoD:\n  assumes   \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\\<inter>A'\"\n  defines   \"f \\<equiv> the_apartment_iso A A'\"\n  shows     \"ChamberComplexIsomorphism A A' f\" \"fixespointwise f (\\<Union>(A\\<inter>A'))\"\n            \"fixespointwise f (-\\<Union>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A' f &&&\n    fixespointwise f (\\<Union> (A \\<inter> A')) &&&\n    fixespointwise f (- \\<Union> A)", "using     assms theI'[OF ex1_apartment_iso]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  f \\<equiv> the_apartment_iso A A'\n  \\<lbrakk>?A1 \\<in> \\<A>; ?A'1 \\<in> \\<A>; chamber ?C1;\n   ?C1 \\<in> ?A1 \\<inter> ?A'1\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism ?A1 ?A'1\n                     (THE x.\n                         ChamberComplexIsomorphism ?A1 ?A'1 x \\<and>\n                         fixespointwise x\n                          (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                         fixespointwise x (- \\<Union> ?A1)) \\<and>\n                    fixespointwise\n                     (THE x.\n                         ChamberComplexIsomorphism ?A1 ?A'1 x \\<and>\n                         fixespointwise x\n                          (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                         fixespointwise x (- \\<Union> ?A1))\n                     (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                    fixespointwise\n                     (THE x.\n                         ChamberComplexIsomorphism ?A1 ?A'1 x \\<and>\n                         fixespointwise x\n                          (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                         fixespointwise x (- \\<Union> ?A1))\n                     (- \\<Union> ?A1)\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A' f &&&\n    fixespointwise f (\\<Union> (A \\<inter> A')) &&&\n    fixespointwise f (- \\<Union> A)", "unfolding the_apartment_iso_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  f \\<equiv>\n  THE f.\n     ChamberComplexIsomorphism A A' f \\<and>\n     fixespointwise f (\\<Union> (A \\<inter> A')) \\<and>\n     fixespointwise f (- \\<Union> A)\n  \\<lbrakk>?A1 \\<in> \\<A>; ?A'1 \\<in> \\<A>; chamber ?C1;\n   ?C1 \\<in> ?A1 \\<inter> ?A'1\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism ?A1 ?A'1\n                     (THE x.\n                         ChamberComplexIsomorphism ?A1 ?A'1 x \\<and>\n                         fixespointwise x\n                          (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                         fixespointwise x (- \\<Union> ?A1)) \\<and>\n                    fixespointwise\n                     (THE x.\n                         ChamberComplexIsomorphism ?A1 ?A'1 x \\<and>\n                         fixespointwise x\n                          (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                         fixespointwise x (- \\<Union> ?A1))\n                     (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                    fixespointwise\n                     (THE x.\n                         ChamberComplexIsomorphism ?A1 ?A'1 x \\<and>\n                         fixespointwise x\n                          (\\<Union> (?A1 \\<inter> ?A'1)) \\<and>\n                         fixespointwise x (- \\<Union> ?A1))\n                     (- \\<Union> ?A1)\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A' f &&&\n    fixespointwise f (\\<Union> (A \\<inter> A')) &&&\n    fixespointwise f (- \\<Union> A)", "by        auto"], ["", "lemmas the_apartment_iso_apartment_chamber_map =\n  ChamberComplexIsomorphism.chamber_map [OF the_apartment_isoD(1)]"], ["", "lemmas the_apartment_iso_apartment_simplex_map =\n  ChamberComplexIsomorphism.simplex_map [OF the_apartment_isoD(1)]"], ["", "lemma the_apartment_iso_chamber_map:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; C\\<in>A\\<inter>B; chamber D; D\\<in>A \\<rbrakk> \\<Longrightarrow>\n    chamber (the_apartment_iso A B ` D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; C \\<in> A \\<inter> B;\n     chamber D; D \\<in> A\\<rbrakk>\n    \\<Longrightarrow> chamber (the_apartment_iso A B ` D)", "using chamber_in_apartment[of A] apartment_chamber\n        the_apartment_iso_apartment_chamber_map"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> \\<A>; ?C \\<in> A; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp A ?C\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  \\<lbrakk>?X \\<in> \\<A>; ?Y \\<in> \\<A>; chamber ?Ca;\n   ?Ca \\<in> ?X \\<inter> ?Y; SimplicialComplex.maxsimp ?X ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y\n                     (the_apartment_iso ?X ?Y ` ?C)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; C \\<in> A \\<inter> B;\n     chamber D; D \\<in> A\\<rbrakk>\n    \\<Longrightarrow> chamber (the_apartment_iso A B ` D)", "by    auto"], ["", "lemma the_apartment_iso_comp:\n  assumes apartments: \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"A''\\<in>\\<A>\"\n  and     chamber   : \"chamber C\" \"C\\<in>A\\<inter>A'\\<inter>A''\"\n  defines \"f \\<equiv> the_apartment_iso A A'\"\n  and     \"g \\<equiv> the_apartment_iso A' A''\"\n  and     \"h \\<equiv> the_apartment_iso A A''\"\n  defines \"gf \\<equiv> restrict1 (g\\<circ>f) (\\<Union>A)\"\n  shows   \"h = gf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = gf", "proof (\n  rule fun_eq_on_set_and_comp_imp_eq,\n  rule apartment_standard_uniqueness_isomorphs, rule apartments(3)\n)"], ["proof (state)\ngoal (5 subgoals):\n 1. ChamberComplexIsomorphism ?W3 A'' h\n 2. ChamberComplexIsomorphism ?W3 A'' gf\n 3. SimplicialComplex.maxsimp ?W3 ?C3\n 4. fun_eq_on h gf ?C3\n 5. fun_eq_on h gf (- \\<Union> ?W3)", "from gf_def"], ["proof (chain)\npicking this:\n  gf \\<equiv> restrict1 (g \\<circ> f) (\\<Union> A)", "have gf_cong1: \"fun_eq_on gf (g\\<circ>f) (\\<Union>A)\""], ["proof (prove)\nusing this:\n  gf \\<equiv> restrict1 (g \\<circ> f) (\\<Union> A)\n\ngoal (1 subgoal):\n 1. fun_eq_on gf (g \\<circ> f) (\\<Union> A)", "by (fastforce intro: fun_eq_onI)"], ["proof (state)\nthis:\n  fun_eq_on gf (g \\<circ> f) (\\<Union> A)\n\ngoal (5 subgoals):\n 1. ChamberComplexIsomorphism ?W3 A'' h\n 2. ChamberComplexIsomorphism ?W3 A'' gf\n 3. SimplicialComplex.maxsimp ?W3 ?C3\n 4. fun_eq_on h gf ?C3\n 5. fun_eq_on h gf (- \\<Union> ?W3)", "from gf_def"], ["proof (chain)\npicking this:\n  gf \\<equiv> restrict1 (g \\<circ> f) (\\<Union> A)", "have gf_cong2: \"fixespointwise gf (-\\<Union>A)\""], ["proof (prove)\nusing this:\n  gf \\<equiv> restrict1 (g \\<circ> f) (\\<Union> A)\n\ngoal (1 subgoal):\n 1. fixespointwise gf (- \\<Union> A)", "by (auto intro: fixespointwiseI)"], ["proof (state)\nthis:\n  fixespointwise gf (- \\<Union> A)\n\ngoal (5 subgoals):\n 1. ChamberComplexIsomorphism ?W3 A'' h\n 2. ChamberComplexIsomorphism ?W3 A'' gf\n 3. SimplicialComplex.maxsimp ?W3 ?C3\n 4. fun_eq_on h gf ?C3\n 5. fun_eq_on h gf (- \\<Union> ?W3)", "from apartments(1,3) chamber h_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  h \\<equiv> the_apartment_iso A A''", "show  \"ChamberComplexIsomorphism A A'' h\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  h \\<equiv> the_apartment_iso A A''\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A'' h", "using the_apartment_isoD(1)"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  h \\<equiv> the_apartment_iso A A''\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism ?A ?A'\n                     (the_apartment_iso ?A ?A')\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A'' h", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A'' h\n\ngoal (4 subgoals):\n 1. ChamberComplexIsomorphism A A'' gf\n 2. SimplicialComplex.maxsimp A ?C3\n 3. fun_eq_on h gf ?C3\n 4. fun_eq_on h gf (- \\<Union> A)", "from apartments chamber f_def g_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  f \\<equiv> the_apartment_iso A A'\n  g \\<equiv> the_apartment_iso A' A''", "show  \"ChamberComplexIsomorphism A A'' gf\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  f \\<equiv> the_apartment_iso A A'\n  g \\<equiv> the_apartment_iso A' A''\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A'' gf", "using ChamberComplexIsomorphism.iso_cong[OF _ gf_cong1]\n          ChamberComplexIsomorphism.iso_comp the_apartment_isoD(1)"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  f \\<equiv> the_apartment_iso A A'\n  g \\<equiv> the_apartment_iso A' A''\n  ChamberComplexIsomorphism A ?Y (g \\<circ> f) \\<Longrightarrow>\n  ChamberComplexIsomorphism A ?Y gf\n  \\<lbrakk>ChamberComplexIsomorphism ?X ?Y ?f;\n   ChamberComplexIsomorphism ?Y ?Z ?g\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism ?X ?Z (?g \\<circ> ?f)\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism ?A ?A'\n                     (the_apartment_iso ?A ?A')\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A A'' gf", "by    blast"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A A'' gf\n\ngoal (3 subgoals):\n 1. SimplicialComplex.maxsimp A ?C3\n 2. fun_eq_on h gf ?C3\n 3. fun_eq_on h gf (- \\<Union> A)", "from apartments(1) chamber"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''", "show \"ChamberComplex.chamber A C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A C", "using chamber_in_apartment"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A C", "by fast"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A C\n\ngoal (2 subgoals):\n 1. fun_eq_on h gf C\n 2. fun_eq_on h gf (- \\<Union> A)", "show \"fun_eq_on h gf C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun_eq_on h gf C", "proof (rule fixespointwise2_imp_eq_on)"], ["proof (state)\ngoal (2 subgoals):\n 1. fixespointwise h C\n 2. fixespointwise gf C", "from assms(1,3) chamber h_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  h \\<equiv> the_apartment_iso A A''", "show \"fixespointwise h C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  h \\<equiv> the_apartment_iso A A''\n\ngoal (1 subgoal):\n 1. fixespointwise h C", "using fixespointwise_subset the_apartment_isoD(2)"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  h \\<equiv> the_apartment_iso A A''\n  \\<lbrakk>fixespointwise ?f ?A; order.greater_eq ?A ?B\\<rbrakk>\n  \\<Longrightarrow> fixespointwise ?f ?B\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (the_apartment_iso ?A ?A')\n                     (\\<Union> (?A \\<inter> ?A'))\n\ngoal (1 subgoal):\n 1. fixespointwise h C", "by blast"], ["proof (state)\nthis:\n  fixespointwise h C\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "have \"fun_eq_on gf (g\\<circ>f) (\\<Union>(A\\<inter>A'\\<inter>A''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))", "using fun_eq_on_subset[OF gf_cong1, of \"\\<Union>(A\\<inter>A'\\<inter>A'')\"]"], ["proof (prove)\nusing this:\n  order.greater_eq (\\<Union> A)\n   (\\<Union> (A \\<inter> A' \\<inter> A'')) \\<Longrightarrow>\n  fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))", "by fast"], ["proof (state)\nthis:\n  fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "moreover"], ["proof (state)\nthis:\n  fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "from f_def g_def apartments chamber"], ["proof (chain)\npicking this:\n  f \\<equiv> the_apartment_iso A A'\n  g \\<equiv> the_apartment_iso A' A''\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''", "have  \"fixespointwise (g\\<circ>f) (\\<Union>(A\\<inter>A'\\<inter>A''))\""], ["proof (prove)\nusing this:\n  f \\<equiv> the_apartment_iso A A'\n  g \\<equiv> the_apartment_iso A' A''\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n\ngoal (1 subgoal):\n 1. fixespointwise (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))", "using fixespointwise_comp[of f \"\\<Union>(A\\<inter>A'\\<inter>A'')\" g]\n            fixespointwise_subset[\n              OF the_apartment_isoD(2), of _ _ C \"\\<Union>(A\\<inter>A'\\<inter>A'')\"\n            ]"], ["proof (prove)\nusing this:\n  f \\<equiv> the_apartment_iso A A'\n  g \\<equiv> the_apartment_iso A' A''\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  \\<lbrakk>fixespointwise f (\\<Union> (A \\<inter> A' \\<inter> A''));\n   fixespointwise g (\\<Union> (A \\<inter> A' \\<inter> A''))\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (g \\<circ> f)\n                     (\\<Union> (A \\<inter> A' \\<inter> A''))\n  \\<lbrakk>?A1 \\<in> \\<A>; ?A'1 \\<in> \\<A>; chamber C;\n   C \\<in> ?A1 \\<inter> ?A'1;\n   order.greater_eq (\\<Union> (?A1 \\<inter> ?A'1))\n    (\\<Union> (A \\<inter> A' \\<inter> A''))\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (the_apartment_iso ?A1 ?A'1)\n                     (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))", "by    auto"], ["proof (state)\nthis:\n  fixespointwise (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "ultimately"], ["proof (chain)\npicking this:\n  fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n  fixespointwise (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))", "have \"fixespointwise gf (\\<Union>(A\\<inter>A'\\<inter>A''))\""], ["proof (prove)\nusing this:\n  fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n  fixespointwise (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise gf (\\<Union> (A \\<inter> A' \\<inter> A''))", "using fixespointwise_cong[of gf \"g\\<circ>f\"]"], ["proof (prove)\nusing this:\n  fun_eq_on gf (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n  fixespointwise (g \\<circ> f) (\\<Union> (A \\<inter> A' \\<inter> A''))\n  \\<lbrakk>fun_eq_on gf (g \\<circ> f) ?A;\n   fixespointwise (g \\<circ> f) ?A\\<rbrakk>\n  \\<Longrightarrow> fixespointwise gf ?A\n\ngoal (1 subgoal):\n 1. fixespointwise gf (\\<Union> (A \\<inter> A' \\<inter> A''))", "by fast"], ["proof (state)\nthis:\n  fixespointwise gf (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "with chamber(2)"], ["proof (chain)\npicking this:\n  C \\<in> A \\<inter> A' \\<inter> A''\n  fixespointwise gf (\\<Union> (A \\<inter> A' \\<inter> A''))", "show \"fixespointwise gf C\""], ["proof (prove)\nusing this:\n  C \\<in> A \\<inter> A' \\<inter> A''\n  fixespointwise gf (\\<Union> (A \\<inter> A' \\<inter> A''))\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "using fixespointwise_subset"], ["proof (prove)\nusing this:\n  C \\<in> A \\<inter> A' \\<inter> A''\n  fixespointwise gf (\\<Union> (A \\<inter> A' \\<inter> A''))\n  \\<lbrakk>fixespointwise ?f ?A; order.greater_eq ?A ?B\\<rbrakk>\n  \\<Longrightarrow> fixespointwise ?f ?B\n\ngoal (1 subgoal):\n 1. fixespointwise gf C", "by auto"], ["proof (state)\nthis:\n  fixespointwise gf C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fun_eq_on h gf C\n\ngoal (1 subgoal):\n 1. fun_eq_on h gf (- \\<Union> A)", "from h_def apartments(1,3) chamber"], ["proof (chain)\npicking this:\n  h \\<equiv> the_apartment_iso A A''\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''", "show \"fun_eq_on h gf (- \\<Union>A)\""], ["proof (prove)\nusing this:\n  h \\<equiv> the_apartment_iso A A''\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n\ngoal (1 subgoal):\n 1. fun_eq_on h gf (- \\<Union> A)", "using the_apartment_isoD(3) gf_cong2"], ["proof (prove)\nusing this:\n  h \\<equiv> the_apartment_iso A A''\n  A \\<in> \\<A>\n  A'' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A' \\<inter> A''\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (the_apartment_iso ?A ?A')\n                     (- \\<Union> ?A)\n  fixespointwise gf (- \\<Union> A)\n\ngoal (1 subgoal):\n 1. fun_eq_on h gf (- \\<Union> A)", "by (auto intro: fun_eq_on_cong)"], ["proof (state)\nthis:\n  fun_eq_on h gf (- \\<Union> A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma the_apartment_iso_int_im:\n  assumes   \"A\\<in>\\<A>\" \"A'\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\\<inter>A'\" \"x\\<in>A\\<inter>A'\"\n  defines   \"f \\<equiv> the_apartment_iso A A'\"\n  shows     \"f`x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` x = x", "using     assms the_apartment_isoD(2) fixespointwise_im[of f \"\\<Union>(A\\<inter>A')\" x]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  A' \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> A'\n  x \\<in> A \\<inter> A'\n  f \\<equiv> the_apartment_iso A A'\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (the_apartment_iso ?A ?A')\n                     (\\<Union> (?A \\<inter> ?A'))\n  \\<lbrakk>fixespointwise f (\\<Union> (A \\<inter> A'));\n   order.greater_eq (\\<Union> (A \\<inter> A')) x\\<rbrakk>\n  \\<Longrightarrow> f ` x = x\n\ngoal (1 subgoal):\n 1. f ` x = x", "by        fast"], ["", "end"], ["", "(* context ChamberComplexWithApartmentSystem *)"], ["", "subsubsection \\<open>Retractions onto apartments\\<close>"], ["", "text \\<open>\n  Since the isomorphism between overlapping apartments is the identity on their intersection,\n  starting with a fixed chamber in a fixed apartment, we can construct a retraction onto that\n  apartment as follows. Given a vertex in the complex, that vertex is contained a chamber, and\n  that chamber lies in a common apartment with the fixed chamber. We then apply to the vertex the\n  apartment isomorphism from that common apartment to the fixed apartment. It turns out that the\n  image of the vertex does not depend on the containing chamber and apartment chosen, and so\n  since the isomorphisms between apartments used are unique, such a retraction onto an apartment\n  is canonical.\n\\<close>"], ["", "context ChamberComplexWithApartmentSystem\nbegin"], ["", "definition canonical_retraction :: \"'a set set \\<Rightarrow> 'a set \\<Rightarrow> ('a\\<Rightarrow>'a)\"\n  where \"canonical_retraction A C =\n          restrict1 (\\<lambda>v. the_apartment_iso (supapartment (supchamber v) C) A v)\n            (\\<Union>X)\""], ["", "lemma canonical_retraction_retraction:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\" \"v\\<in>\\<Union>A\"\n  shows   \"canonical_retraction A C v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "define D where \"D = supchamber v\""], ["proof (state)\nthis:\n  D = supchamber v\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "define B where \"B = supapartment D C\""], ["proof (state)\nthis:\n  B = supapartment D C\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "from D_def assms(1,4)"], ["proof (chain)\npicking this:\n  D = supchamber v\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A", "have D_facts: \"chamber D\" \"v\\<in>D\""], ["proof (prove)\nusing this:\n  D = supchamber v\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A\n\ngoal (1 subgoal):\n 1. chamber D &&& v \\<in> D", "using apartment_simplices supchamberD[of v]"], ["proof (prove)\nusing this:\n  D = supchamber v\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A\n  ?Y \\<in> \\<A> \\<Longrightarrow> order.greater_eq X ?Y\n  v \\<in> \\<Union> X \\<Longrightarrow> chamber (supchamber v)\n  v \\<in> \\<Union> X \\<Longrightarrow> v \\<in> supchamber v\n\ngoal (1 subgoal):\n 1. chamber D &&& v \\<in> D", "by auto"], ["proof (state)\nthis:\n  chamber D\n  v \\<in> D\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "from B_def assms(2)"], ["proof (chain)\npicking this:\n  B = supapartment D C\n  chamber C", "have B_facts: \"B\\<in>\\<A>\" \"D\\<in>B\" \"C\\<in>B\""], ["proof (prove)\nusing this:\n  B = supapartment D C\n  chamber C\n\ngoal (1 subgoal):\n 1. B \\<in> \\<A> &&& D \\<in> B &&& C \\<in> B", "using D_facts(1) supapartmentD[of D C]"], ["proof (prove)\nusing this:\n  B = supapartment D C\n  chamber C\n  chamber D\n  \\<lbrakk>chamber D; chamber C\\<rbrakk>\n  \\<Longrightarrow> supapartment D C \\<in> \\<A>\n  \\<lbrakk>chamber D; chamber C\\<rbrakk>\n  \\<Longrightarrow> D \\<in> supapartment D C\n  \\<lbrakk>chamber D; chamber C\\<rbrakk>\n  \\<Longrightarrow> C \\<in> supapartment D C\n\ngoal (1 subgoal):\n 1. B \\<in> \\<A> &&& D \\<in> B &&& C \\<in> B", "by auto"], ["proof (state)\nthis:\n  B \\<in> \\<A>\n  D \\<in> B\n  C \\<in> B\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "from assms(1,4)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A", "have \"v\\<in>\\<Union>(B\\<inter>A)\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A\n\ngoal (1 subgoal):\n 1. v \\<in> \\<Union> (B \\<inter> A)", "using D_facts(2) B_facts(1,2) apartment_vertex_set_int"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A\n  v \\<in> D\n  B \\<in> \\<A>\n  D \\<in> B\n  \\<lbrakk>?X \\<in> \\<A>; ?Y \\<in> \\<A>\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (?X \\<inter> ?Y) =\n                    \\<Union> ?X \\<inter> \\<Union> ?Y\n\ngoal (1 subgoal):\n 1. v \\<in> \\<Union> (B \\<inter> A)", "by fast"], ["proof (state)\nthis:\n  v \\<in> \\<Union> (B \\<inter> A)\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "with assms(1-3) D_def B_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D = supchamber v\n  B = supapartment D C\n  v \\<in> \\<Union> (B \\<inter> A)", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D = supchamber v\n  B = supapartment D C\n  v \\<in> \\<Union> (B \\<inter> A)\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "using canonical_retraction_def B_facts(1,3) fixespointwiseD[of _ \"\\<Union>(B\\<inter>A)\" v]\n          the_apartment_isoD(2)[of B A C]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D = supchamber v\n  B = supapartment D C\n  v \\<in> \\<Union> (B \\<inter> A)\n  canonical_retraction ?A ?C =\n  (\\<lambda>a.\n      restrict1 (the_apartment_iso (supapartment (supchamber a) ?C) ?A)\n       (\\<Union> X) a)\n  B \\<in> \\<A>\n  C \\<in> B\n  \\<lbrakk>fixespointwise ?f (\\<Union> (B \\<inter> A));\n   v \\<in> \\<Union> (B \\<inter> A)\\<rbrakk>\n  \\<Longrightarrow> ?f v = id v\n  \\<lbrakk>B \\<in> \\<A>; A \\<in> \\<A>; chamber C;\n   C \\<in> B \\<inter> A\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (the_apartment_iso B A)\n                     (\\<Union> (B \\<inter> A))\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = v", "by    simp"], ["proof (state)\nthis:\n  canonical_retraction A C v = v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma canonical_retraction_simplex_retraction1:\n  \"\\<lbrakk> A\\<in>\\<A>; chamber C; C\\<in>A; a\\<in>A \\<rbrakk> \\<Longrightarrow>\n    fixespointwise (canonical_retraction A C) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> fixespointwise (canonical_retraction A C) a", "using canonical_retraction_retraction"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A;\n   ?v \\<in> \\<Union> ?A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ?v = ?v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> fixespointwise (canonical_retraction A C) a", "by (force intro: fixespointwiseI)"], ["", "lemma canonical_retraction_simplex_retraction2:\n  \"\\<lbrakk> A\\<in>\\<A>; chamber C; C\\<in>A; a\\<in>A \\<rbrakk> \\<Longrightarrow> canonical_retraction A C ` a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> canonical_retraction A C ` a = a", "using canonical_retraction_simplex_retraction1 fixespointwise_im[of _ a a]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (canonical_retraction ?A ?C) ?a\n  \\<lbrakk>fixespointwise ?f a; order.greater_eq a a\\<rbrakk>\n  \\<Longrightarrow> ?f ` a = a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> canonical_retraction A C ` a = a", "by simp"], ["", "lemma canonical_retraction_uniform:\n  assumes apartments: \"A\\<in>\\<A>\" \"B\\<in>\\<A>\"\n  and     chambers  : \"chamber C\" \"C\\<in>A\\<inter>B\"\n  shows   \"fun_eq_on (canonical_retraction A C) (the_apartment_iso B A) (\\<Union>B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun_eq_on (canonical_retraction A C) (the_apartment_iso B A)\n     (\\<Union> B)", "proof (rule fun_eq_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "assume v: \"v\\<in>\\<Union>B\""], ["proof (state)\nthis:\n  v \\<in> \\<Union> B\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "define D' B' g f h\n    where \"D' = supchamber v\"\n      and \"B' = supapartment D' C\"\n      and \"g = the_apartment_iso B' A\"\n      and \"f = the_apartment_iso B B'\"\n      and \"h = the_apartment_iso B A\""], ["proof (state)\nthis:\n  D' = supchamber v\n  B' = supapartment D' C\n  g = the_apartment_iso B' A\n  f = the_apartment_iso B B'\n  h = the_apartment_iso B A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "from D'_def v apartments(2)"], ["proof (chain)\npicking this:\n  D' = supchamber v\n  v \\<in> \\<Union> B\n  B \\<in> \\<A>", "have D'_facts: \"chamber D'\" \"v\\<in>D'\""], ["proof (prove)\nusing this:\n  D' = supchamber v\n  v \\<in> \\<Union> B\n  B \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. chamber D' &&& v \\<in> D'", "using apartment_simplices supchamberD[of v]"], ["proof (prove)\nusing this:\n  D' = supchamber v\n  v \\<in> \\<Union> B\n  B \\<in> \\<A>\n  ?Y \\<in> \\<A> \\<Longrightarrow> order.greater_eq X ?Y\n  v \\<in> \\<Union> X \\<Longrightarrow> chamber (supchamber v)\n  v \\<in> \\<Union> X \\<Longrightarrow> v \\<in> supchamber v\n\ngoal (1 subgoal):\n 1. chamber D' &&& v \\<in> D'", "by auto"], ["proof (state)\nthis:\n  chamber D'\n  v \\<in> D'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "from B'_def chambers(1)"], ["proof (chain)\npicking this:\n  B' = supapartment D' C\n  chamber C", "have B'_facts: \"B'\\<in>\\<A>\" \"D'\\<in>B'\" \"C\\<in>B'\""], ["proof (prove)\nusing this:\n  B' = supapartment D' C\n  chamber C\n\ngoal (1 subgoal):\n 1. B' \\<in> \\<A> &&& D' \\<in> B' &&& C \\<in> B'", "using D'_facts(1) supapartmentD[of D' C]"], ["proof (prove)\nusing this:\n  B' = supapartment D' C\n  chamber C\n  chamber D'\n  \\<lbrakk>chamber D'; chamber C\\<rbrakk>\n  \\<Longrightarrow> supapartment D' C \\<in> \\<A>\n  \\<lbrakk>chamber D'; chamber C\\<rbrakk>\n  \\<Longrightarrow> D' \\<in> supapartment D' C\n  \\<lbrakk>chamber D'; chamber C\\<rbrakk>\n  \\<Longrightarrow> C \\<in> supapartment D' C\n\ngoal (1 subgoal):\n 1. B' \\<in> \\<A> &&& D' \\<in> B' &&& C \\<in> B'", "by auto"], ["proof (state)\nthis:\n  B' \\<in> \\<A>\n  D' \\<in> B'\n  C \\<in> B'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "from f_def apartments(2) chambers"], ["proof (chain)\npicking this:\n  f = the_apartment_iso B B'\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B", "have \"fixespointwise f (\\<Union>(B \\<inter> B'))\""], ["proof (prove)\nusing this:\n  f = the_apartment_iso B B'\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. fixespointwise f (\\<Union> (B \\<inter> B'))", "using B'_facts(1,3) the_apartment_isoD(2)[of B B' C]"], ["proof (prove)\nusing this:\n  f = the_apartment_iso B B'\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n  B' \\<in> \\<A>\n  C \\<in> B'\n  \\<lbrakk>B \\<in> \\<A>; B' \\<in> \\<A>; chamber C;\n   C \\<in> B \\<inter> B'\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (the_apartment_iso B B')\n                     (\\<Union> (B \\<inter> B'))\n\ngoal (1 subgoal):\n 1. fixespointwise f (\\<Union> (B \\<inter> B'))", "by fast"], ["proof (state)\nthis:\n  fixespointwise f (\\<Union> (B \\<inter> B'))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "moreover"], ["proof (state)\nthis:\n  fixespointwise f (\\<Union> (B \\<inter> B'))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "from v apartments(2)"], ["proof (chain)\npicking this:\n  v \\<in> \\<Union> B\n  B \\<in> \\<A>", "have \"v\\<in>\\<Union>(B\\<inter>B')\""], ["proof (prove)\nusing this:\n  v \\<in> \\<Union> B\n  B \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. v \\<in> \\<Union> (B \\<inter> B')", "using D'_facts(2) B'_facts(1,2) apartment_vertex_set_int"], ["proof (prove)\nusing this:\n  v \\<in> \\<Union> B\n  B \\<in> \\<A>\n  v \\<in> D'\n  B' \\<in> \\<A>\n  D' \\<in> B'\n  \\<lbrakk>?X \\<in> \\<A>; ?Y \\<in> \\<A>\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (?X \\<inter> ?Y) =\n                    \\<Union> ?X \\<inter> \\<Union> ?Y\n\ngoal (1 subgoal):\n 1. v \\<in> \\<Union> (B \\<inter> B')", "by fast"], ["proof (state)\nthis:\n  v \\<in> \\<Union> (B \\<inter> B')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> \\<Union> B \\<Longrightarrow>\n       canonical_retraction A C a = the_apartment_iso B A a", "ultimately"], ["proof (chain)\npicking this:\n  fixespointwise f (\\<Union> (B \\<inter> B'))\n  v \\<in> \\<Union> (B \\<inter> B')", "show \"canonical_retraction A C v = h v\""], ["proof (prove)\nusing this:\n  fixespointwise f (\\<Union> (B \\<inter> B'))\n  v \\<in> \\<Union> (B \\<inter> B')\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = h v", "using D'_def B'_def g_def f_def h_def v apartments chambers fixespointwiseD[of f \"\\<Union>(B\\<inter>B')\" v]\n          canonical_retraction_def apartment_simplices[of B] B'_facts(1,3)\n          the_apartment_iso_comp[of B B' A C]"], ["proof (prove)\nusing this:\n  fixespointwise f (\\<Union> (B \\<inter> B'))\n  v \\<in> \\<Union> (B \\<inter> B')\n  D' = supchamber v\n  B' = supapartment D' C\n  g = the_apartment_iso B' A\n  f = the_apartment_iso B B'\n  h = the_apartment_iso B A\n  v \\<in> \\<Union> B\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n  \\<lbrakk>fixespointwise f (\\<Union> (B \\<inter> B'));\n   v \\<in> \\<Union> (B \\<inter> B')\\<rbrakk>\n  \\<Longrightarrow> f v = id v\n  canonical_retraction ?A ?C =\n  (\\<lambda>a.\n      restrict1 (the_apartment_iso (supapartment (supchamber a) ?C) ?A)\n       (\\<Union> X) a)\n  B \\<in> \\<A> \\<Longrightarrow> order.greater_eq X B\n  B' \\<in> \\<A>\n  C \\<in> B'\n  \\<lbrakk>B \\<in> \\<A>; B' \\<in> \\<A>; A \\<in> \\<A>; chamber C;\n   C \\<in> B \\<inter> B' \\<inter> A\\<rbrakk>\n  \\<Longrightarrow> the_apartment_iso B A =\n                    restrict1\n                     (the_apartment_iso B' A \\<circ> the_apartment_iso B B')\n                     (\\<Union> B)\n\ngoal (1 subgoal):\n 1. canonical_retraction A C v = h v", "by    auto"], ["proof (state)\nthis:\n  canonical_retraction A C v = h v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma canonical_retraction_uniform_im:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; C\\<in>A\\<inter>B; x\\<in>B \\<rbrakk> \\<Longrightarrow>\n    canonical_retraction A C ` x = the_apartment_iso B A ` x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; C \\<in> A \\<inter> B;\n     x \\<in> B\\<rbrakk>\n    \\<Longrightarrow> canonical_retraction A C ` x =\n                      the_apartment_iso B A ` x", "using canonical_retraction_uniform fun_eq_on_im[of _ _ _ x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B\\<rbrakk>\n  \\<Longrightarrow> fun_eq_on (canonical_retraction ?A ?C)\n                     (the_apartment_iso ?B ?A) (\\<Union> ?B)\n  \\<lbrakk>fun_eq_on ?f ?g ?A; order.greater_eq ?A x\\<rbrakk>\n  \\<Longrightarrow> ?f ` x = ?g ` x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; C \\<in> A \\<inter> B;\n     x \\<in> B\\<rbrakk>\n    \\<Longrightarrow> canonical_retraction A C ` x =\n                      the_apartment_iso B A ` x", "by fast"], ["", "lemma canonical_retraction_simplex_im:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\"\n  shows   \"canonical_retraction A C \\<turnstile> X = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canonical_retraction A C \\<turnstile> X = A", "proof (rule seteqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> canonical_retraction A C \\<turnstile> X \\<Longrightarrow>\n       x \\<in> A\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> canonical_retraction A C \\<turnstile> X \\<Longrightarrow>\n       x \\<in> A\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "assume \"y \\<in> canonical_retraction A C \\<turnstile> X\""], ["proof (state)\nthis:\n  y \\<in> canonical_retraction A C \\<turnstile> X\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> canonical_retraction A C \\<turnstile> X \\<Longrightarrow>\n       x \\<in> A\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "from this"], ["proof (chain)\npicking this:\n  y \\<in> canonical_retraction A C \\<turnstile> X", "obtain x where x: \"x\\<in>X\" \"y = canonical_retraction A C ` x\""], ["proof (prove)\nusing this:\n  y \\<in> canonical_retraction A C \\<turnstile> X\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; y = canonical_retraction A C ` x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  x \\<in> X\n  y = canonical_retraction A C ` x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> canonical_retraction A C \\<turnstile> X \\<Longrightarrow>\n       x \\<in> A\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "from x(1)"], ["proof (chain)\npicking this:\n  x \\<in> X", "obtain D where D: \"chamber D\" \"x\\<subseteq>D\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>chamber D; order.greater_eq D x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using simplex_in_max"], ["proof (prove)\nusing this:\n  x \\<in> X\n  ?y \\<in> X \\<Longrightarrow>\n  \\<exists>x. chamber x \\<and> order.greater_eq x ?y\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>chamber D; order.greater_eq D x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  chamber D\n  order.greater_eq D x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> canonical_retraction A C \\<turnstile> X \\<Longrightarrow>\n       x \\<in> A\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "from assms(2) D(1)"], ["proof (chain)\npicking this:\n  chamber C\n  chamber D", "obtain B where \"B\\<in>\\<A>\" \"D\\<in>B\" \"C\\<in>B\""], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> \\<A>; D \\<in> B; C \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using containtwo"], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. ?C \\<in> A \\<and> ?D \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> \\<A>; D \\<in> B; C \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  B \\<in> \\<A>\n  D \\<in> B\n  C \\<in> B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> canonical_retraction A C \\<turnstile> X \\<Longrightarrow>\n       x \\<in> A\n 2. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "with assms D(2) x(2)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  order.greater_eq D x\n  y = canonical_retraction A C ` x\n  B \\<in> \\<A>\n  D \\<in> B\n  C \\<in> B", "show \"y\\<in>A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  order.greater_eq D x\n  y = canonical_retraction A C ` x\n  B \\<in> \\<A>\n  D \\<in> B\n  C \\<in> B\n\ngoal (1 subgoal):\n 1. y \\<in> A", "using the_apartment_isoD(1)[of B A]\n          ChamberComplexIsomorphism.surj_simplex_map\n          canonical_retraction_uniform_im apartment_faces[of B D x]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  order.greater_eq D x\n  y = canonical_retraction A C ` x\n  B \\<in> \\<A>\n  D \\<in> B\n  C \\<in> B\n  \\<lbrakk>B \\<in> \\<A>; A \\<in> \\<A>; chamber ?C;\n   ?C \\<in> B \\<inter> A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism B A (the_apartment_iso B A)\n  ChamberComplexIsomorphism ?X ?Y ?f \\<Longrightarrow>\n  ?f \\<turnstile> ?X = ?Y\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B; ?x \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` ?x =\n                    the_apartment_iso ?B ?A ` ?x\n  \\<lbrakk>B \\<in> \\<A>; D \\<in> B; order.greater_eq D x\\<rbrakk>\n  \\<Longrightarrow> x \\<in> B\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by    fastforce"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "assume \"a\\<in>A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> canonical_retraction A C \\<turnstile> X", "with assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  a \\<in> A", "show \"a \\<in> canonical_retraction A C \\<turnstile> X\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> canonical_retraction A C \\<turnstile> X", "using canonical_retraction_simplex_retraction2[of A C a, THEN sym]\n          apartment_simplices"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  a \\<in> A\n  \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A; a \\<in> A\\<rbrakk>\n  \\<Longrightarrow> a = canonical_retraction A C ` a\n  ?Y \\<in> \\<A> \\<Longrightarrow> order.greater_eq X ?Y\n\ngoal (1 subgoal):\n 1. a \\<in> canonical_retraction A C \\<turnstile> X", "by    fast"], ["proof (state)\nthis:\n  a \\<in> canonical_retraction A C \\<turnstile> X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma canonical_retraction_vertex_im:\n  \"\\<lbrakk> A\\<in>\\<A>; chamber C; C\\<in>A \\<rbrakk> \\<Longrightarrow> canonical_retraction A C ` \\<Union>X = \\<Union>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A\\<rbrakk>\n    \\<Longrightarrow> canonical_retraction A C ` \\<Union> X = \\<Union> A", "using singleton_simplex ChamberComplex.singleton_simplex complexes\n        canonical_retraction_simplex_im[of A C]"], ["proof (prove)\nusing this:\n  ?v \\<in> \\<Union> X \\<Longrightarrow> {?v} \\<in> X\n  \\<lbrakk>ChamberComplex ?X; ?v \\<in> \\<Union> ?X\\<rbrakk>\n  \\<Longrightarrow> {?v} \\<in> ?X\n  ?Y \\<in> \\<A> \\<Longrightarrow> ChamberComplex ?Y\n  \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction A C \\<turnstile> X = A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A\\<rbrakk>\n    \\<Longrightarrow> canonical_retraction A C ` \\<Union> X = \\<Union> A", "by    blast"], ["", "lemma canonical_retraction:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\"\n  shows \"ChamberComplexRetraction X (canonical_retraction A C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexRetraction X (canonical_retraction A C)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>Ca.\n       chamber Ca \\<Longrightarrow> chamber (canonical_retraction A C ` Ca)\n 2. \\<And>Ca.\n       chamber Ca \\<Longrightarrow>\n       card (canonical_retraction A C ` Ca) = card Ca\n 3. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v\n 4. \\<And>v.\n       v \\<in> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C (canonical_retraction A C v) =\n       canonical_retraction A C v", "fix D"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>Ca.\n       chamber Ca \\<Longrightarrow> chamber (canonical_retraction A C ` Ca)\n 2. \\<And>Ca.\n       chamber Ca \\<Longrightarrow>\n       card (canonical_retraction A C ` Ca) = card Ca\n 3. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v\n 4. \\<And>v.\n       v \\<in> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C (canonical_retraction A C v) =\n       canonical_retraction A C v", "assume \"chamber D\""], ["proof (state)\nthis:\n  chamber D\n\ngoal (4 subgoals):\n 1. \\<And>Ca.\n       chamber Ca \\<Longrightarrow> chamber (canonical_retraction A C ` Ca)\n 2. \\<And>Ca.\n       chamber Ca \\<Longrightarrow>\n       card (canonical_retraction A C ` Ca) = card Ca\n 3. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v\n 4. \\<And>v.\n       v \\<in> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C (canonical_retraction A C v) =\n       canonical_retraction A C v", "with assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  chamber D", "show  \"chamber (canonical_retraction A C ` D)\"\n          \"card (canonical_retraction A C ` D) = card D\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  chamber D\n\ngoal (1 subgoal):\n 1. chamber (canonical_retraction A C ` D) &&&\n    card (canonical_retraction A C ` D) = card D", "using containtwo[of C D] canonical_retraction_uniform_im\n          the_apartment_iso_chamber_map chamber_in_apartment\n          ChamberComplexIsomorphism.dim_map[OF the_apartment_isoD(1)]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  chamber D\n  \\<lbrakk>chamber C; chamber D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. C \\<in> A \\<and> D \\<in> A\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B; ?x \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` ?x =\n                    the_apartment_iso ?B ?A ` ?x\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B; chamber ?D; ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> chamber (the_apartment_iso ?A ?B ` ?D)\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>?X \\<in> \\<A>; ?Y \\<in> \\<A>; chamber ?C1;\n   ?C1 \\<in> ?X \\<inter> ?Y; SimplicialComplex.maxsimp ?X ?C\\<rbrakk>\n  \\<Longrightarrow> card (the_apartment_iso ?X ?Y ` ?C) = card ?C\n\ngoal (1 subgoal):\n 1. chamber (canonical_retraction A C ` D) &&&\n    card (canonical_retraction A C ` D) = card D", "by    auto"], ["proof (state)\nthis:\n  chamber (canonical_retraction A C ` D)\n  card (canonical_retraction A C ` D) = card D\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v\n 2. \\<And>v.\n       v \\<in> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C (canonical_retraction A C v) =\n       canonical_retraction A C v", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v\n 2. \\<And>v.\n       v \\<in> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C (canonical_retraction A C v) =\n       canonical_retraction A C v", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v\n 2. \\<And>v.\n       v \\<in> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C (canonical_retraction A C v) =\n       canonical_retraction A C v", "from assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A", "show  \"v\\<in>\\<Union>X \\<Longrightarrow> canonical_retraction A C (canonical_retraction A C v) =\n              canonical_retraction A C v\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n\ngoal (1 subgoal):\n 1. v \\<in> \\<Union> X \\<Longrightarrow>\n    canonical_retraction A C (canonical_retraction A C v) =\n    canonical_retraction A C v", "using canonical_retraction_retraction canonical_retraction_vertex_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A;\n   ?v \\<in> \\<Union> ?A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ?v = ?v\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` \\<Union> X = \\<Union> ?A\n\ngoal (1 subgoal):\n 1. v \\<in> \\<Union> X \\<Longrightarrow>\n    canonical_retraction A C (canonical_retraction A C v) =\n    canonical_retraction A C v", "by    fast"], ["proof (state)\nthis:\n  v \\<in> \\<Union> X \\<Longrightarrow>\n  canonical_retraction A C (canonical_retraction A C v) =\n  canonical_retraction A C v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<notin> \\<Union> X \\<Longrightarrow>\n       canonical_retraction A C v = v", "qed (simp add: canonical_retraction_def)"], ["", "lemma canonical_retraction_comp_endomorphism:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; chamber D; C\\<in>A; D\\<in>B \\<rbrakk> \\<Longrightarrow>\n    ChamberComplexEndomorphism X\n      (canonical_retraction A C \\<circ> canonical_retraction B D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n     D \\<in> B\\<rbrakk>\n    \\<Longrightarrow> ChamberComplexEndomorphism X\n                       (canonical_retraction A C \\<circ>\n                        canonical_retraction B D)", "using canonical_retraction[of A C] canonical_retraction[of B D]\n        ChamberComplexRetraction.axioms(1)\n        ChamberComplexEndomorphism.endo_comp"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexRetraction X (canonical_retraction A C)\n  \\<lbrakk>B \\<in> \\<A>; chamber D; D \\<in> B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexRetraction X (canonical_retraction B D)\n  ChamberComplexRetraction ?X ?f \\<Longrightarrow>\n  ChamberComplexEndomorphism ?X ?f\n  \\<lbrakk>ChamberComplexEndomorphism ?X ?f;\n   ChamberComplexEndomorphism ?X ?g\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexEndomorphism ?X (?g \\<circ> ?f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n     D \\<in> B\\<rbrakk>\n    \\<Longrightarrow> ChamberComplexEndomorphism X\n                       (canonical_retraction A C \\<circ>\n                        canonical_retraction B D)", "by    fast"], ["", "lemma canonical_retraction_comp_simplex_im_subset:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; chamber D; C\\<in>A; D\\<in>B \\<rbrakk> \\<Longrightarrow>\n      (canonical_retraction A C \\<circ> canonical_retraction B D) \\<turnstile> X \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n     D \\<in> B\\<rbrakk>\n    \\<Longrightarrow> order.greater_eq A\n                       ((canonical_retraction A C \\<circ>\n                         canonical_retraction B D) \\<turnstile>\n                        X)", "using canonical_retraction[of B D] ChamberComplexRetraction.simplex_map\n        canonical_retraction_simplex_im[of A C]"], ["proof (prove)\nusing this:\n  \\<lbrakk>B \\<in> \\<A>; chamber D; D \\<in> B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexRetraction X (canonical_retraction B D)\n  \\<lbrakk>ChamberComplexRetraction ?X ?f; ?x \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> ?f ` ?x \\<in> ?X\n  \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction A C \\<turnstile> X = A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n     D \\<in> B\\<rbrakk>\n    \\<Longrightarrow> order.greater_eq A\n                       ((canonical_retraction A C \\<circ>\n                         canonical_retraction B D) \\<turnstile>\n                        X)", "by    (force simp add: image_comp[THEN sym])"], ["", "lemma canonical_retraction_comp_apartment_endomorphism:\n  \"\\<lbrakk> A\\<in>\\<A>; B\\<in>\\<A>; chamber C; chamber D; C\\<in>A; D\\<in>B \\<rbrakk> \\<Longrightarrow>\n    ChamberComplexEndomorphism A\n      (restrict1 (canonical_retraction A C \\<circ> canonical_retraction B D) (\\<Union>A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n     D \\<in> B\\<rbrakk>\n    \\<Longrightarrow> ChamberComplexEndomorphism A\n                       (restrict1\n                         (canonical_retraction A C \\<circ>\n                          canonical_retraction B D)\n                         (\\<Union> A))", "using ChamberComplexEndomorphism.restrict_endo[of X _ A]\n        canonical_retraction_comp_endomorphism[of A B C D] subcomplexes[of A]\n        canonical_retraction_comp_simplex_im_subset[of A B C D]\n        apartment_simplices[of A]"], ["proof (prove)\nusing this:\n  \\<lbrakk>ChamberComplexEndomorphism X ?f; ChamberSubcomplex A;\n   order.greater_eq A (?f \\<turnstile> A)\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexEndomorphism A (restrict1 ?f (\\<Union> A))\n  \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n   D \\<in> B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexEndomorphism X\n                     (canonical_retraction A C \\<circ>\n                      canonical_retraction B D)\n  A \\<in> \\<A> \\<Longrightarrow> ChamberSubcomplex A\n  \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n   D \\<in> B\\<rbrakk>\n  \\<Longrightarrow> order.greater_eq A\n                     ((canonical_retraction A C \\<circ>\n                       canonical_retraction B D) \\<turnstile>\n                      X)\n  A \\<in> \\<A> \\<Longrightarrow> order.greater_eq X A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> \\<A>; B \\<in> \\<A>; chamber C; chamber D; C \\<in> A;\n     D \\<in> B\\<rbrakk>\n    \\<Longrightarrow> ChamberComplexEndomorphism A\n                       (restrict1\n                         (canonical_retraction A C \\<circ>\n                          canonical_retraction B D)\n                         (\\<Union> A))", "by    auto"], ["", "end"], ["", "(* context ChamberComplexWithApartmentSystem *)"], ["", "subsubsection \\<open>Distances in apartments\\<close>"], ["", "text \\<open>\n  Here we examine distances between chambers and between a facet and a chamber, especially with\n  respect to canonical retractions onto an apartment. Note that a distance measured within an\n  apartment is equal to the distance measured between the same objects in the wider chamber\n  complex. In other words, the shortest distance between chambers can always be achieved within an\n  apartment.\n\\<close>"], ["", "context ChamberComplexWithApartmentSystem\nbegin"], ["", "lemma apartment_chamber_distance:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<in>A\" \"D\\<in>A\"\n  shows   \"ChamberComplex.chamber_distance A C D = chamber_distance C D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_distance A C D = chamber_distance C D", "proof (cases \"C=D\")"], ["proof (state)\ngoal (2 subgoals):\n 1. C = D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D\n 2. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "case True"], ["proof (state)\nthis:\n  C = D\n\ngoal (2 subgoals):\n 1. C = D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D\n 2. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "with assms(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  C = D", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  C = D\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_distance A C D = chamber_distance C D", "using apartment_chamber_distance_def chamber_distance_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  C = D\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_distance ?X ?C ?D =\n  (if ?C = ?D then 0\n   else Suc (length\n              (ARG_MIN length Cs.\n                  SimplicialComplex.maxsimpchain ?X (?C # Cs @ [?D]))))\n  chamber_distance ?C ?D =\n  (if ?C = ?D then 0\n   else Suc (length (ARG_MIN length Cs. gallery (?C # Cs @ [?D]))))\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_distance A C D = chamber_distance C D", "by simp"], ["proof (state)\nthis:\n  ChamberComplex.chamber_distance A C D = chamber_distance C D\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "case False"], ["proof (state)\nthis:\n  C \\<noteq> D\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "define Cs Ds f\n    where \"Cs = (ARG_MIN length Cs. ChamberComplex.gallery A (C#Cs@[D]))\"\n      and \"Ds = (ARG_MIN length Ds. gallery (C#Ds@[D]))\"\n      and \"f = canonical_retraction A C\""], ["proof (state)\nthis:\n  Cs = (ARG_MIN length Cs. SimplicialComplex.maxsimpchain A (C # Cs @ [D]))\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))\n  f = canonical_retraction A C\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "from assms(2,3) False Ds_def"], ["proof (chain)\npicking this:\n  chamber C\n  chamber D\n  C \\<noteq> D\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))", "have 1: \"gallery (C#Ds@[D])\""], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  C \\<noteq> D\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))\n\ngoal (1 subgoal):\n 1. gallery (C # Ds @ [D])", "using gallery_least_length"], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  C \\<noteq> D\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))\n  \\<lbrakk>chamber ?C; chamber ?D; ?C \\<noteq> ?D\\<rbrakk>\n  \\<Longrightarrow> gallery\n                     (?C #\n                      (ARG_MIN length Cs. gallery (?C # Cs @ [?D])) @ [?D])\n\ngoal (1 subgoal):\n 1. gallery (C # Ds @ [D])", "by fast"], ["proof (state)\nthis:\n  gallery (C # Ds @ [D])\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "with assms(1,2,4,5) f_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D \\<in> A\n  f = canonical_retraction A C\n  gallery (C # Ds @ [D])", "have \"gallery (C # f\\<Turnstile>Ds @ [D])\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D \\<in> A\n  f = canonical_retraction A C\n  gallery (C # Ds @ [D])\n\ngoal (1 subgoal):\n 1. gallery (C # f \\<Turnstile> Ds @ [D])", "using canonical_retraction ChamberComplexRetraction.gallery_map[of X]\n          canonical_retraction_simplex_retraction2"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D \\<in> A\n  f = canonical_retraction A C\n  gallery (C # Ds @ [D])\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexRetraction X (canonical_retraction ?A ?C)\n  \\<lbrakk>ChamberComplexRetraction X ?f; gallery ?Cs\\<rbrakk>\n  \\<Longrightarrow> gallery (?f \\<Turnstile> ?Cs)\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` ?a = ?a\n\ngoal (1 subgoal):\n 1. gallery (C # f \\<Turnstile> Ds @ [D])", "by    fastforce"], ["proof (state)\nthis:\n  gallery (C # f \\<Turnstile> Ds @ [D])\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "moreover"], ["proof (state)\nthis:\n  gallery (C # f \\<Turnstile> Ds @ [D])\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "from f_def assms(1,2,4)"], ["proof (chain)\npicking this:\n  f = canonical_retraction A C\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A", "have \"set (f\\<Turnstile>Ds) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  f = canonical_retraction A C\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (f \\<Turnstile> Ds))", "using 1 galleryD_chamber chamberD_simplex\n          canonical_retraction_simplex_im[of A C]"], ["proof (prove)\nusing this:\n  f = canonical_retraction A C\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  gallery (C # Ds @ [D])\n  \\<lbrakk>gallery ?xs; ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> chamber ?x\n  chamber ?x \\<Longrightarrow> ?x \\<in> X\n  \\<lbrakk>A \\<in> \\<A>; chamber C; C \\<in> A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction A C \\<turnstile> X = A\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (f \\<Turnstile> Ds))", "by    auto"], ["proof (state)\nthis:\n  order.greater_eq A (set (f \\<Turnstile> Ds))\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "ultimately"], ["proof (chain)\npicking this:\n  gallery (C # f \\<Turnstile> Ds @ [D])\n  order.greater_eq A (set (f \\<Turnstile> Ds))", "have \"ChamberComplex.gallery A (C # f\\<Turnstile>Ds @ [D])\""], ["proof (prove)\nusing this:\n  gallery (C # f \\<Turnstile> Ds @ [D])\n  order.greater_eq A (set (f \\<Turnstile> Ds))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (C # f \\<Turnstile> Ds @ [D])", "using assms(1,4,5) gallery_in_apartment"], ["proof (prove)\nusing this:\n  gallery (C # f \\<Turnstile> Ds @ [D])\n  order.greater_eq A (set (f \\<Turnstile> Ds))\n  A \\<in> \\<A>\n  C \\<in> A\n  D \\<in> A\n  \\<lbrakk>?Y \\<in> \\<A>; order.greater_eq ?Y (set ?ys);\n   gallery ?ys\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?Y ?ys\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (C # f \\<Turnstile> Ds @ [D])", "by simp"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimpchain A (C # f \\<Turnstile> Ds @ [D])\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "with assms(1) Ds_def False"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))\n  C \\<noteq> D\n  SimplicialComplex.maxsimpchain A (C # f \\<Turnstile> Ds @ [D])", "have  \"ChamberComplex.chamber_distance A C D \\<le> chamber_distance C D\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))\n  C \\<noteq> D\n  SimplicialComplex.maxsimpchain A (C # f \\<Turnstile> Ds @ [D])\n\ngoal (1 subgoal):\n 1. order.greater_eq (chamber_distance C D)\n     (ChamberComplex.chamber_distance A C D)", "using ChamberComplex.chamber_distance_le[OF complexes]\n          chamber_distance_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Ds = (ARG_MIN length Ds. gallery (C # Ds @ [D]))\n  C \\<noteq> D\n  SimplicialComplex.maxsimpchain A (C # f \\<Turnstile> Ds @ [D])\n  \\<lbrakk>?X \\<in> \\<A>;\n   SimplicialComplex.maxsimpchain ?X (?C # ?Cs @ [?D])\\<rbrakk>\n  \\<Longrightarrow> order.greater_eq (Suc (length ?Cs))\n                     (ChamberComplex.chamber_distance ?X ?C ?D)\n  chamber_distance ?C ?D =\n  (if ?C = ?D then 0\n   else Suc (length (ARG_MIN length Cs. gallery (?C # Cs @ [?D]))))\n\ngoal (1 subgoal):\n 1. order.greater_eq (chamber_distance C D)\n     (ChamberComplex.chamber_distance A C D)", "by    force"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance C D)\n   (ChamberComplex.chamber_distance A C D)\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "moreover"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance C D)\n   (ChamberComplex.chamber_distance A C D)\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "from assms False Cs_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A\n  D \\<in> A\n  C \\<noteq> D\n  Cs = (ARG_MIN length Cs. SimplicialComplex.maxsimpchain A (C # Cs @ [D]))", "have  \"chamber_distance C D \\<le> ChamberComplex.chamber_distance A C D\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A\n  D \\<in> A\n  C \\<noteq> D\n  Cs = (ARG_MIN length Cs. SimplicialComplex.maxsimpchain A (C # Cs @ [D]))\n\ngoal (1 subgoal):\n 1. order.greater_eq (ChamberComplex.chamber_distance A C D)\n     (chamber_distance C D)", "using chamber_in_apartment apartment_gallery_least_length\n          subcomplex_gallery[OF subcomplexes]\n          chamber_distance_le apartment_chamber_distance_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A\n  D \\<in> A\n  C \\<noteq> D\n  Cs = (ARG_MIN length Cs. SimplicialComplex.maxsimpchain A (C # Cs @ [D]))\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?C;\n   SimplicialComplex.maxsimp ?X ?D; ?C \\<noteq> ?D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X\n                     (?C #\n                      (ARG_MIN length Cs.\n                          SimplicialComplex.maxsimpchain ?X\n                           (?C # Cs @ [?D])) @\n                      [?D])\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimpchain ?Y ?Cs\\<rbrakk>\n  \\<Longrightarrow> gallery ?Cs\n  gallery (?C # ?Cs @ [?D]) \\<Longrightarrow>\n  order.greater_eq (Suc (length ?Cs)) (chamber_distance ?C ?D)\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_distance ?X ?C ?D =\n  (if ?C = ?D then 0\n   else Suc (length\n              (ARG_MIN length Cs.\n                  SimplicialComplex.maxsimpchain ?X (?C # Cs @ [?D]))))\n\ngoal (1 subgoal):\n 1. order.greater_eq (ChamberComplex.chamber_distance A C D)\n     (chamber_distance C D)", "by    simp"], ["proof (state)\nthis:\n  order.greater_eq (ChamberComplex.chamber_distance A C D)\n   (chamber_distance C D)\n\ngoal (1 subgoal):\n 1. C \\<noteq> D \\<Longrightarrow>\n    ChamberComplex.chamber_distance A C D = chamber_distance C D", "ultimately"], ["proof (chain)\npicking this:\n  order.greater_eq (chamber_distance C D)\n   (ChamberComplex.chamber_distance A C D)\n  order.greater_eq (ChamberComplex.chamber_distance A C D)\n   (chamber_distance C D)", "show ?thesis"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance C D)\n   (ChamberComplex.chamber_distance A C D)\n  order.greater_eq (ChamberComplex.chamber_distance A C D)\n   (chamber_distance C D)\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_distance A C D = chamber_distance C D", "by simp"], ["proof (state)\nthis:\n  ChamberComplex.chamber_distance A C D = chamber_distance C D\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma apartment_min_gallery:\n  assumes \"A\\<in>\\<A>\" \"ChamberComplex.min_gallery A Cs\"\n  shows   \"min_gallery Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_gallery Cs", "proof (cases Cs rule: list_cases_Cons_snoc)"], ["proof (state)\ngoal (3 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x. Cs = [x] \\<Longrightarrow> min_gallery Cs\n 3. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "case Single"], ["proof (state)\nthis:\n  Cs = [x_]\n\ngoal (3 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x. Cs = [x] \\<Longrightarrow> min_gallery Cs\n 3. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "with assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A Cs\n  Cs = [x_]", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A Cs\n  Cs = [x_]\n\ngoal (1 subgoal):\n 1. min_gallery Cs", "using apartment_min_galleryD_gallery apartment_gallery galleryD_chamber"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A Cs\n  Cs = [x_]\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimpchain ?Y ?Cs\\<rbrakk>\n  \\<Longrightarrow> gallery ?Cs\n  \\<lbrakk>gallery ?xs; ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> chamber ?x\n\ngoal (1 subgoal):\n 1. min_gallery Cs", "by    fastforce"], ["proof (state)\nthis:\n  min_gallery Cs\n\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "case (Cons_snoc C Ds D)"], ["proof (state)\nthis:\n  Cs = C # Ds @ [D]\n\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "moreover"], ["proof (state)\nthis:\n  Cs = C # Ds @ [D]\n\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "with assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A Cs\n  Cs = C # Ds @ [D]", "have \"min_gallery (C#Ds@[D])\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A Cs\n  Cs = C # Ds @ [D]\n\ngoal (1 subgoal):\n 1. min_gallery (C # Ds @ [D])", "using apartment_min_galleryD_gallery[of A Cs] apartment_gallery[of A Cs]\n          apartment_galleryD_chamber apartment_chamberD_simplex\n          ChamberComplex.min_gallery_betw_chamber_distance[\n            OF complexes, of A C Ds D\n          ]\n          galleryD_chamber apartment_chamber_distance\n          min_galleryI_chamber_distance_betw"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A Cs\n  Cs = C # Ds @ [D]\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.min_maxsimpchain A Cs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain A Cs\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimpchain A Cs\\<rbrakk>\n  \\<Longrightarrow> gallery Cs\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  \\<lbrakk>A \\<in> \\<A>;\n   SimplicialComplex.min_maxsimpchain A (C # Ds @ [D])\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.chamber_distance A C D = Suc (length Ds)\n  \\<lbrakk>gallery ?xs; ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> chamber ?x\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<in> ?A;\n   ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.chamber_distance ?A ?C ?D =\n                    chamber_distance ?C ?D\n  \\<lbrakk>gallery (?C # ?Cs @ [?D]);\n   Suc (length ?Cs) = chamber_distance ?C ?D\\<rbrakk>\n  \\<Longrightarrow> min_gallery (?C # ?Cs @ [?D])\n\ngoal (1 subgoal):\n 1. min_gallery (C # Ds @ [D])", "by    auto"], ["proof (state)\nthis:\n  min_gallery (C # Ds @ [D])\n\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs\n 2. \\<And>x ys y. Cs = x # ys @ [y] \\<Longrightarrow> min_gallery Cs", "ultimately"], ["proof (chain)\npicking this:\n  Cs = C # Ds @ [D]\n  min_gallery (C # Ds @ [D])", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs = C # Ds @ [D]\n  min_gallery (C # Ds @ [D])\n\ngoal (1 subgoal):\n 1. min_gallery Cs", "by fast"], ["proof (state)\nthis:\n  min_gallery Cs\n\ngoal (1 subgoal):\n 1. Cs = [] \\<Longrightarrow> min_gallery Cs", "qed simp"], ["", "lemma apartment_face_distance:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"C\\<in>A\" \"F\\<in>A\"\n  shows   \"ChamberComplex.face_distance A F C = face_distance F C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "define D D'\n    where \"D = closest_supchamber F C\"\n      and \"D' = ChamberComplex.closest_supchamber A F C\""], ["proof (state)\nthis:\n  D = closest_supchamber F C\n  D' = ChamberComplex.closest_supchamber A F C\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "from assms D'_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D' = ChamberComplex.closest_supchamber A F C", "have chamber_D': \"ChamberComplex.chamber A D'\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D' = ChamberComplex.closest_supchamber A F C\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A D'", "using chamber_in_apartment ChamberComplex.closest_supchamberD(1)\n          complexes"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D' = ChamberComplex.closest_supchamber A F C\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>ChamberComplex ?X; ?F \\<in> ?X;\n   SimplicialComplex.maxsimp ?X ?D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X\n                     (ChamberComplex.closest_supchamber ?X ?F ?D)\n  ?Y \\<in> \\<A> \\<Longrightarrow> ChamberComplex ?Y\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A D'", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A D'\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "with assms(1,2,4) D_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  F \\<in> A\n  D = closest_supchamber F C\n  SimplicialComplex.maxsimp A D'", "have chambers: \"chamber D\" \"chamber D'\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  F \\<in> A\n  D = closest_supchamber F C\n  SimplicialComplex.maxsimp A D'\n\ngoal (1 subgoal):\n 1. chamber D &&& chamber D'", "using closest_supchamberD(1)[of F C] apartment_chamber\n          apartment_simplices"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  F \\<in> A\n  D = closest_supchamber F C\n  SimplicialComplex.maxsimp A D'\n  \\<lbrakk>F \\<in> X; chamber C\\<rbrakk>\n  \\<Longrightarrow> chamber (closest_supchamber F C)\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  ?Y \\<in> \\<A> \\<Longrightarrow> order.greater_eq X ?Y\n\ngoal (1 subgoal):\n 1. chamber D &&& chamber D'", "by    auto"], ["proof (state)\nthis:\n  chamber D\n  chamber D'\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "from assms(1-3)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A", "have  1: \"ChamberComplex.chamber_distance A D' C = chamber_distance D' C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_distance A D' C = chamber_distance D' C", "using chamber_D' chambers(2) apartment_chamberD_simplex\n          apartment_chamber_distance"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  SimplicialComplex.maxsimp A D'\n  chamber D'\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<in> ?A;\n   ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.chamber_distance ?A ?C ?D =\n                    chamber_distance ?C ?D\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_distance A D' C = chamber_distance D' C", "by    fastforce"], ["proof (state)\nthis:\n  ChamberComplex.chamber_distance A D' C = chamber_distance D' C\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "from assms D_def D'_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D = closest_supchamber F C\n  D' = ChamberComplex.closest_supchamber A F C", "have F_DD': \"F\\<subseteq>D\" \"F\\<subseteq>D'\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D = closest_supchamber F C\n  D' = ChamberComplex.closest_supchamber A F C\n\ngoal (1 subgoal):\n 1. order.greater_eq D F &&& order.greater_eq D' F", "using apartment_simplices[of A] closest_supchamberD(2) chamber_in_apartment\n          ChamberComplex.closest_supchamberD(2)[OF complexes]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D = closest_supchamber F C\n  D' = ChamberComplex.closest_supchamber A F C\n  A \\<in> \\<A> \\<Longrightarrow> order.greater_eq X A\n  \\<lbrakk>?F \\<in> X; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> order.greater_eq (closest_supchamber ?F ?D) ?F\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>?X \\<in> \\<A>; ?F \\<in> ?X;\n   SimplicialComplex.maxsimp ?X ?D\\<rbrakk>\n  \\<Longrightarrow> order.greater_eq\n                     (ChamberComplex.closest_supchamber ?X ?F ?D) ?F\n\ngoal (1 subgoal):\n 1. order.greater_eq D F &&& order.greater_eq D' F", "by    auto"], ["proof (state)\nthis:\n  order.greater_eq D F\n  order.greater_eq D' F\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "from assms(2)"], ["proof (chain)\npicking this:\n  chamber C", "obtain B where B: \"B\\<in>\\<A>\" \"C\\<in>B\" \"D\\<in>B\""], ["proof (prove)\nusing this:\n  chamber C\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> \\<A>; C \\<in> B; D \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using chambers(1) containtwo"], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. ?C \\<in> A \\<and> ?D \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> \\<A>; C \\<in> B; D \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "moreover"], ["proof (state)\nthis:\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "from assms B"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B", "have \"the_apartment_iso B A ` F = F\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n\ngoal (1 subgoal):\n 1. the_apartment_iso B A ` F = F", "using F_DD'(1) apartment_faces the_apartment_iso_int_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n  order.greater_eq D F\n  \\<lbrakk>?X \\<in> \\<A>; ?x \\<in> ?X; order.greater_eq ?x ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> ?X\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'; ?x \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> the_apartment_iso ?A ?A' ` ?x = ?x\n\ngoal (1 subgoal):\n 1. the_apartment_iso B A ` F = F", "by force"], ["proof (state)\nthis:\n  the_apartment_iso B A ` F = F\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "moreover"], ["proof (state)\nthis:\n  the_apartment_iso B A ` F = F\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "have \"the_apartment_iso B A ` F \\<subseteq> the_apartment_iso B A ` D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order.greater_eq (the_apartment_iso B A ` D) (the_apartment_iso B A ` F)", "using F_DD'(1)"], ["proof (prove)\nusing this:\n  order.greater_eq D F\n\ngoal (1 subgoal):\n 1. order.greater_eq (the_apartment_iso B A ` D) (the_apartment_iso B A ` F)", "by fast"], ["proof (state)\nthis:\n  order.greater_eq (the_apartment_iso B A ` D) (the_apartment_iso B A ` F)\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "ultimately"], ["proof (chain)\npicking this:\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n  the_apartment_iso B A ` F = F\n  order.greater_eq (the_apartment_iso B A ` D) (the_apartment_iso B A ` F)", "have \"chamber_distance D C \\<ge> chamber_distance D' C\""], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n  the_apartment_iso B A ` F = F\n  order.greater_eq (the_apartment_iso B A ` D) (the_apartment_iso B A ` F)\n\ngoal (1 subgoal):\n 1. order.greater_eq (chamber_distance D C) (chamber_distance D' C)", "using assms(1-3) D'_def 1 chambers(1) apartment_chamber_distance[of B]\n          chamber_in_apartment[of B D] chamber_in_apartment[of B C]\n          ChamberComplexIsomorphism.chamber_map[\n            OF the_apartment_isoD(1), of B A]\n          ChamberComplex.closest_supchamber_closest[ \n            OF complexes, of A \"the_apartment_iso B A ` D\" F C]\n          ChamberComplexIsomorphism.chamber_distance_map[\n            OF the_apartment_isoD(1), of B A C]\n          the_apartment_iso_int_im[of B A C C]"], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n  the_apartment_iso B A ` F = F\n  order.greater_eq (the_apartment_iso B A ` D) (the_apartment_iso B A ` F)\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  D' = ChamberComplex.closest_supchamber A F C\n  ChamberComplex.chamber_distance A D' C = chamber_distance D' C\n  chamber D\n  \\<lbrakk>B \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<in> B;\n   ?D \\<in> B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.chamber_distance B ?C ?D =\n                    chamber_distance ?C ?D\n  \\<lbrakk>B \\<in> \\<A>; D \\<in> B; chamber D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp B D\n  \\<lbrakk>B \\<in> \\<A>; C \\<in> B; chamber C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp B C\n  \\<lbrakk>B \\<in> \\<A>; A \\<in> \\<A>; chamber ?C1; ?C1 \\<in> B \\<inter> A;\n   SimplicialComplex.maxsimp B ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp A (the_apartment_iso B A ` ?C)\n  \\<lbrakk>A \\<in> \\<A>;\n   SimplicialComplex.maxsimp A (the_apartment_iso B A ` D);\n   order.greater_eq (the_apartment_iso B A ` D) F\\<rbrakk>\n  \\<Longrightarrow> order.greater_eq\n                     (ChamberComplex.chamber_distance A\n                       (the_apartment_iso B A ` D) C)\n                     (ChamberComplex.chamber_distance A\n                       (ChamberComplex.closest_supchamber A F C) C)\n  \\<lbrakk>B \\<in> \\<A>; A \\<in> \\<A>; chamber C; C \\<in> B \\<inter> A;\n   SimplicialComplex.maxsimp B ?C; SimplicialComplex.maxsimp B ?D\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.chamber_distance A\n                     (the_apartment_iso B A ` ?C)\n                     (the_apartment_iso B A ` ?D) =\n                    ChamberComplex.chamber_distance B ?C ?D\n  \\<lbrakk>B \\<in> \\<A>; A \\<in> \\<A>; chamber C; C \\<in> B \\<inter> A;\n   C \\<in> B \\<inter> A\\<rbrakk>\n  \\<Longrightarrow> the_apartment_iso B A ` C = C\n\ngoal (1 subgoal):\n 1. order.greater_eq (chamber_distance D C) (chamber_distance D' C)", "by    force"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance D C) (chamber_distance D' C)\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "moreover"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance D C) (chamber_distance D' C)\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "from assms D_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D = closest_supchamber F C", "have  \"chamber_distance D C \\<le> chamber_distance D' C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D = closest_supchamber F C\n\ngoal (1 subgoal):\n 1. order.greater_eq (chamber_distance D' C) (chamber_distance D C)", "using closest_supchamber_closest chambers(2) F_DD'(2)"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  C \\<in> A\n  F \\<in> A\n  D = closest_supchamber F C\n  \\<lbrakk>chamber ?C; order.greater_eq ?C ?F\\<rbrakk>\n  \\<Longrightarrow> order.greater_eq (chamber_distance ?C ?D)\n                     (chamber_distance (closest_supchamber ?F ?D) ?D)\n  chamber D'\n  order.greater_eq D' F\n\ngoal (1 subgoal):\n 1. order.greater_eq (chamber_distance D' C) (chamber_distance D C)", "by    simp"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance D' C) (chamber_distance D C)\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "ultimately"], ["proof (chain)\npicking this:\n  order.greater_eq (chamber_distance D C) (chamber_distance D' C)\n  order.greater_eq (chamber_distance D' C) (chamber_distance D C)", "show ?thesis"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D C) (chamber_distance D' C)\n  order.greater_eq (chamber_distance D' C) (chamber_distance D C)\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "using assms(1) D_def D'_def face_distance_def 1\n          ChamberComplex.face_distance_def[OF complexes]"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D C) (chamber_distance D' C)\n  order.greater_eq (chamber_distance D' C) (chamber_distance D C)\n  A \\<in> \\<A>\n  D = closest_supchamber F C\n  D' = ChamberComplex.closest_supchamber A F C\n  face_distance ?F ?D \\<equiv>\n  chamber_distance (closest_supchamber ?F ?D) ?D\n  ChamberComplex.chamber_distance A D' C = chamber_distance D' C\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.face_distance ?X ?F ?D \\<equiv>\n  ChamberComplex.chamber_distance ?X\n   (ChamberComplex.closest_supchamber ?X ?F ?D) ?D\n\ngoal (1 subgoal):\n 1. ChamberComplex.face_distance A F C = face_distance F C", "by    simp"], ["proof (state)\nthis:\n  ChamberComplex.face_distance A F C = face_distance F C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma apartment_face_distance_eq_chamber_distance_compare_other_chamber:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"chamber E\" \"C\\<in>A\" \"D\\<in>A\" \"E\\<in>A\"\n          \"z\\<lhd>C\" \"z\\<lhd>D\" \"C\\<noteq>D\" \"chamber_distance C E \\<le> chamber_distance D E\"\n  shows   \"face_distance z E = chamber_distance C E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_distance z E = chamber_distance C E", "using   assms apartment_chamber_distance apartment_face_distance\n          facetrel_subset[of z C] apartment_faces[of A C z] chamber_in_apartment\n          ThinChamberComplex.face_distance_eq_chamber_distance_compare_other_chamber[\n            OF thincomplexes, of A C D z E\n          ]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  chamber E\n  C \\<in> A\n  D \\<in> A\n  E \\<in> A\n  z \\<lhd> C\n  z \\<lhd> D\n  C \\<noteq> D\n  order.greater_eq (chamber_distance D E) (chamber_distance C E)\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<in> ?A;\n   ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.chamber_distance ?A ?C ?D =\n                    chamber_distance ?C ?D\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?F \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.face_distance ?A ?F ?C =\n                    face_distance ?F ?C\n  z \\<lhd> C \\<Longrightarrow> order.greater_eq C z\n  \\<lbrakk>A \\<in> \\<A>; C \\<in> A; order.greater_eq C z\\<rbrakk>\n  \\<Longrightarrow> z \\<in> A\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimp A C;\n   SimplicialComplex.maxsimp A D; z \\<lhd> C; z \\<lhd> D; C \\<noteq> D;\n   order.greater_eq (ChamberComplex.chamber_distance A D E)\n    (ChamberComplex.chamber_distance A C E)\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.face_distance A z E =\n                    ChamberComplex.chamber_distance A C E\n\ngoal (1 subgoal):\n 1. face_distance z E = chamber_distance C E", "by      auto"], ["", "lemma canonical_retraction_face_distance_map:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<in>A\" \"F\\<subseteq>C\"\n  shows   \"face_distance F (canonical_retraction A C ` D) = face_distance F D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_distance F (canonical_retraction A C ` D) = face_distance F D", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. face_distance F (canonical_retraction A C ` D) = face_distance F D", "from assms(2,3)"], ["proof (chain)\npicking this:\n  chamber C\n  chamber D", "obtain B where B: \"B\\<in>\\<A>\" \"C\\<in>B\" \"D\\<in>B\""], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> \\<A>; C \\<in> B; D \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using containtwo"], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. ?C \\<in> A \\<and> ?D \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<in> \\<A>; C \\<in> B; D \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n\ngoal (1 subgoal):\n 1. face_distance F (canonical_retraction A C ` D) = face_distance F D", "with assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A\n  order.greater_eq C F\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A\n  order.greater_eq C F\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n\ngoal (1 subgoal):\n 1. face_distance F (canonical_retraction A C ` D) = face_distance F D", "using apartment_faces[of A C F] apartment_faces[of B C F]\n          apartment_face_distance chamber_in_apartment the_apartment_iso_int_im\n          the_apartment_iso_chamber_map the_apartment_iso_apartment_simplex_map\n          apartment_face_distance canonical_retraction_uniform_im\n          ChamberComplexIsomorphism.face_distance_map[\n            OF the_apartment_isoD(1), of B A C D F\n          ]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A\n  order.greater_eq C F\n  B \\<in> \\<A>\n  C \\<in> B\n  D \\<in> B\n  \\<lbrakk>A \\<in> \\<A>; C \\<in> A; order.greater_eq C F\\<rbrakk>\n  \\<Longrightarrow> F \\<in> A\n  \\<lbrakk>B \\<in> \\<A>; C \\<in> B; order.greater_eq C F\\<rbrakk>\n  \\<Longrightarrow> F \\<in> B\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?F \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.face_distance ?A ?F ?C =\n                    face_distance ?F ?C\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'; ?x \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> the_apartment_iso ?A ?A' ` ?x = ?x\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B; chamber ?D; ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> chamber (the_apartment_iso ?A ?B ` ?D)\n  \\<lbrakk>?X \\<in> \\<A>; ?Y \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?X \\<inter> ?Y; ?x \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> the_apartment_iso ?X ?Y ` ?x \\<in> ?Y\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?F \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.face_distance ?A ?F ?C =\n                    face_distance ?F ?C\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B; ?x \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` ?x =\n                    the_apartment_iso ?B ?A ` ?x\n  \\<lbrakk>B \\<in> \\<A>; A \\<in> \\<A>; chamber C; C \\<in> B \\<inter> A;\n   SimplicialComplex.maxsimp B D; F \\<in> B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplex.face_distance A\n                     (the_apartment_iso B A ` F)\n                     (the_apartment_iso B A ` D) =\n                    ChamberComplex.face_distance B F D\n\ngoal (1 subgoal):\n 1. face_distance F (canonical_retraction A C ` D) = face_distance F D", "by    simp"], ["proof (state)\nthis:\n  face_distance F (canonical_retraction A C ` D) = face_distance F D\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context ChamberComplexWithApartmentSystem *)"], ["", "subsubsection \\<open>Special situation: a triangle of apartments and chambers\\<close>"], ["", "text \\<open>\n  To facilitate proving that apartments in buildings have sufficient foldings to be Coxeter, we\n  explore the situation of three chambers sharing a common facet, along with three apartments, each\n  of which contains two of the chambers. A folding of one of the apartments is\n  constructed by composing two apartment retractions, and by symmetry we automatically obtain an\n  opposed folding.\n\\<close>"], ["", "locale ChamberComplexApartmentSystemTriangle =\n  ChamberComplexWithApartmentSystem X \\<A>\n  for X :: \"'a set set\"\n  and \\<A> :: \"'a set set set\"\n+ fixes A B B' :: \"'a set set\"\n  and   C D E z :: \"'a set\"\n  assumes apartments   : \"A\\<in>\\<A>\" \"B\\<in>\\<A>\" \"B'\\<in>\\<A>\"\n  and     chambers     : \"chamber C\" \"chamber D\" \"chamber E\"\n  and     facet        : \"z\\<lhd>C\" \"z\\<lhd>D\" \"z\\<lhd>E\"\n  and     in_apartments: \"C\\<in>A\\<inter>B\" \"D\\<in>A\\<inter>B'\" \"E\\<in>B\\<inter>B'\"\n  and     chambers_ne  : \"D\\<noteq>C\" \"E\\<noteq>D\" \"C\\<noteq>E\"\nbegin"], ["", "abbreviation \"fold_A \\<equiv> canonical_retraction A D \\<circ> canonical_retraction B C\""], ["", "abbreviation \"res_fold_A \\<equiv> restrict1 fold_A (\\<Union>A)\""], ["", "abbreviation \"opp_fold_A \\<equiv> canonical_retraction A C \\<circ> canonical_retraction B' D\""], ["", "abbreviation \"res_opp_fold_A \\<equiv> restrict1 opp_fold_A (\\<Union>A)\""], ["", "lemma rotate: \"ChamberComplexApartmentSystemTriangle X \\<A> B' A B D E C z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexApartmentSystemTriangle X \\<A> B' A B D E C z", "using apartments chambers facet in_apartments chambers_ne"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  B' \\<in> \\<A>\n  chamber C\n  chamber D\n  chamber E\n  z \\<lhd> C\n  z \\<lhd> D\n  z \\<lhd> E\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  E \\<in> B \\<inter> B'\n  D \\<noteq> C\n  E \\<noteq> D\n  C \\<noteq> E\n\ngoal (1 subgoal):\n 1. ChamberComplexApartmentSystemTriangle X \\<A> B' A B D E C z", "by    unfold_locales auto"], ["", "lemma reflect: \"ChamberComplexApartmentSystemTriangle X \\<A> A B' B D C E z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexApartmentSystemTriangle X \\<A> A B' B D C E z", "using apartments chambers facet in_apartments chambers_ne"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  B' \\<in> \\<A>\n  chamber C\n  chamber D\n  chamber E\n  z \\<lhd> C\n  z \\<lhd> D\n  z \\<lhd> E\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  E \\<in> B \\<inter> B'\n  D \\<noteq> C\n  E \\<noteq> D\n  C \\<noteq> E\n\ngoal (1 subgoal):\n 1. ChamberComplexApartmentSystemTriangle X \\<A> A B' B D C E z", "by    unfold_locales auto"], ["", "lemma facet_in_chambers: \"z\\<subseteq>C\" \"z\\<subseteq>D\" \"z\\<subseteq>E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order.greater_eq C z &&& order.greater_eq D z &&& order.greater_eq E z", "using facet facetrel_subset"], ["proof (prove)\nusing this:\n  z \\<lhd> C\n  z \\<lhd> D\n  z \\<lhd> E\n  ?y \\<lhd> ?x \\<Longrightarrow> order.greater_eq ?x ?y\n\ngoal (1 subgoal):\n 1. order.greater_eq C z &&& order.greater_eq D z &&& order.greater_eq E z", "by auto"], ["", "lemma A_chambers:\n  \"ChamberComplex.chamber A C\" \"ChamberComplex.chamber A D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A C &&& SimplicialComplex.maxsimp A D", "using apartments(1) chambers(1,2) in_apartments(1,2) chamber_in_apartment"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A C &&& SimplicialComplex.maxsimp A D", "by    auto"], ["", "lemma res_fold_A_A_chamber_image:\n  \"ChamberComplex.chamber A F \\<Longrightarrow> res_fold_A ` F = fold_A ` F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F \\<Longrightarrow>\n    restrict1 fold_A (\\<Union> A) ` F = fold_A ` F", "using apartments(1) apartment_chamberD_simplex restrict1_image"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  order.greater_eq ?A ?B \\<Longrightarrow> restrict1 ?f ?A ` ?B = ?f ` ?B\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F \\<Longrightarrow>\n    restrict1 fold_A (\\<Union> A) ` F = fold_A ` F", "by    fastforce"], ["", "lemma the_apartment_iso_middle_im: \"the_apartment_iso A B ` D = E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_apartment_iso A B ` D = E", "proof (rule ChamberComplexIsomorphism.thin_image_shared_facet)"], ["proof (state)\ngoal (10 subgoals):\n 1. ChamberComplexIsomorphism ?X ?Y (the_apartment_iso A B)\n 2. SimplicialComplex.maxsimp ?X ?C\n 3. SimplicialComplex.maxsimp ?X D\n 4. ?z \\<lhd> ?C\n 5. ?z \\<lhd> D\n 6. ?C \\<noteq> D\n 7. ThinChamberComplex ?Y\n 8. SimplicialComplex.maxsimp ?Y E\n 9. the_apartment_iso A B ` ?z \\<lhd> E\n 10. E \\<noteq> the_apartment_iso A B ` ?C", "from apartments(1,2) chambers(1) in_apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B", "show  \"ChamberComplexIsomorphism A B (the_apartment_iso A B)\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A B (the_apartment_iso A B)", "using the_apartment_isoD(1)"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism ?A ?A'\n                     (the_apartment_iso ?A ?A')\n\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism A B (the_apartment_iso A B)", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexIsomorphism A B (the_apartment_iso A B)\n\ngoal (9 subgoals):\n 1. SimplicialComplex.maxsimp A ?C\n 2. SimplicialComplex.maxsimp A D\n 3. ?z \\<lhd> ?C\n 4. ?z \\<lhd> D\n 5. ?C \\<noteq> D\n 6. ThinChamberComplex B\n 7. SimplicialComplex.maxsimp B E\n 8. the_apartment_iso A B ` ?z \\<lhd> E\n 9. E \\<noteq> the_apartment_iso A B ` ?C", "from apartments(2) chambers(3) in_apartments(3)"], ["proof (chain)\npicking this:\n  B \\<in> \\<A>\n  chamber E\n  E \\<in> B \\<inter> B'", "show  \"ChamberComplex.chamber B E\" \"ThinChamberComplex B\""], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  chamber E\n  E \\<in> B \\<inter> B'\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp B E &&& ThinChamberComplex B", "using chamber_in_apartment thincomplexes"], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  chamber E\n  E \\<in> B \\<inter> B'\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  ?A \\<in> \\<A> \\<Longrightarrow> ThinChamberComplex ?A\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp B E &&& ThinChamberComplex B", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp B E\n  ThinChamberComplex B\n\ngoal (7 subgoals):\n 1. SimplicialComplex.maxsimp A ?C\n 2. SimplicialComplex.maxsimp A D\n 3. ?z \\<lhd> ?C\n 4. ?z \\<lhd> D\n 5. ?C \\<noteq> D\n 6. the_apartment_iso A B ` ?z \\<lhd> E\n 7. E \\<noteq> the_apartment_iso A B ` ?C", "from apartments(1,2) in_apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  C \\<in> A \\<inter> B", "have \"z \\<in> A\\<inter>B\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  C \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. z \\<in> A \\<inter> B", "using facet_in_chambers(1) apartment_faces"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  C \\<in> A \\<inter> B\n  order.greater_eq C z\n  \\<lbrakk>?X \\<in> \\<A>; ?x \\<in> ?X; order.greater_eq ?x ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> ?X\n\ngoal (1 subgoal):\n 1. z \\<in> A \\<inter> B", "by fastforce"], ["proof (state)\nthis:\n  z \\<in> A \\<inter> B\n\ngoal (7 subgoals):\n 1. SimplicialComplex.maxsimp A ?C\n 2. SimplicialComplex.maxsimp A D\n 3. ?z \\<lhd> ?C\n 4. ?z \\<lhd> D\n 5. ?C \\<noteq> D\n 6. the_apartment_iso A B ` ?z \\<lhd> E\n 7. E \\<noteq> the_apartment_iso A B ` ?C", "with apartments(1,2) chambers(1) in_apartments(1) chambers_ne(3) facet(3)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n  C \\<noteq> E\n  z \\<lhd> E\n  z \\<in> A \\<inter> B", "show  \"the_apartment_iso A B ` z \\<lhd> E\" \"E \\<noteq> the_apartment_iso A B ` C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n  C \\<noteq> E\n  z \\<lhd> E\n  z \\<in> A \\<inter> B\n\ngoal (1 subgoal):\n 1. the_apartment_iso A B ` z \\<lhd> E &&&\n    E \\<noteq> the_apartment_iso A B ` C", "using the_apartment_iso_int_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  C \\<in> A \\<inter> B\n  C \\<noteq> E\n  z \\<lhd> E\n  z \\<in> A \\<inter> B\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'; ?x \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> the_apartment_iso ?A ?A' ` ?x = ?x\n\ngoal (1 subgoal):\n 1. the_apartment_iso A B ` z \\<lhd> E &&&\n    E \\<noteq> the_apartment_iso A B ` C", "by    auto"], ["proof (state)\nthis:\n  the_apartment_iso A B ` z \\<lhd> E\n  E \\<noteq> the_apartment_iso A B ` C\n\ngoal (5 subgoals):\n 1. SimplicialComplex.maxsimp A C\n 2. SimplicialComplex.maxsimp A D\n 3. z \\<lhd> C\n 4. z \\<lhd> D\n 5. C \\<noteq> D", "qed (\n  rule A_chambers(1), rule A_chambers(2), rule facet(1), rule facet(2),\n  rule chambers_ne(1)[THEN not_sym]\n)"], ["", "lemma inside_canonical_retraction_chamber_images:\n  \"canonical_retraction B C ` C = C\" \n  \"canonical_retraction B C ` D = E\"\n  \"canonical_retraction B C ` E = E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canonical_retraction B C ` C = C &&&\n    canonical_retraction B C ` D = E &&& canonical_retraction B C ` E = E", "using apartments(1,2) chambers(1,2) in_apartments\n        canonical_retraction_simplex_retraction2[of B C C]\n        canonical_retraction_uniform_im the_apartment_iso_middle_im\n        canonical_retraction_simplex_retraction2"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  E \\<in> B \\<inter> B'\n  \\<lbrakk>B \\<in> \\<A>; chamber C; C \\<in> B; C \\<in> B\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction B C ` C = C\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?B; ?x \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` ?x =\n                    the_apartment_iso ?B ?A ` ?x\n  the_apartment_iso A B ` D = E\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> canonical_retraction ?A ?C ` ?a = ?a\n\ngoal (1 subgoal):\n 1. canonical_retraction B C ` C = C &&&\n    canonical_retraction B C ` D = E &&& canonical_retraction B C ` E = E", "by    auto"], ["", "lemmas in_canretract_chimages =\n  inside_canonical_retraction_chamber_images"], ["", "lemma outside_canonical_retraction_chamber_images:\n  \"canonical_retraction A D ` C = C\"\n  \"canonical_retraction A D ` D = D\"\n  \"canonical_retraction A D ` E = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. canonical_retraction A D ` C = C &&&\n    canonical_retraction A D ` D = D &&& canonical_retraction A D ` E = C", "using ChamberComplexApartmentSystemTriangle.in_canretract_chimages[\n          OF rotate\n        ]"], ["proof (prove)\nusing this:\n  canonical_retraction A D ` D = D\n  canonical_retraction A D ` E = C\n  canonical_retraction A D ` C = C\n\ngoal (1 subgoal):\n 1. canonical_retraction A D ` C = C &&&\n    canonical_retraction A D ` D = D &&& canonical_retraction A D ` E = C", "by    auto"], ["", "lemma fold_A_chamber_images:\n  \"fold_A ` C = C\" \"fold_A ` D = C\" \"fold_A ` E = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_A ` C = C &&& fold_A ` D = C &&& fold_A ` E = C", "using inside_canonical_retraction_chamber_images\n        outside_canonical_retraction_chamber_images\n        image_comp[of \"canonical_retraction A D\" \"canonical_retraction B C\" C]\n        image_comp[of \"canonical_retraction A D\" \"canonical_retraction B C\" D]\n        image_comp[of \"canonical_retraction A D\" \"canonical_retraction B C\" E]"], ["proof (prove)\nusing this:\n  canonical_retraction B C ` C = C\n  canonical_retraction B C ` D = E\n  canonical_retraction B C ` E = E\n  canonical_retraction A D ` C = C\n  canonical_retraction A D ` D = D\n  canonical_retraction A D ` E = C\n  canonical_retraction A D ` canonical_retraction B C ` C = fold_A ` C\n  canonical_retraction A D ` canonical_retraction B C ` D = fold_A ` D\n  canonical_retraction A D ` canonical_retraction B C ` E = fold_A ` E\n\ngoal (1 subgoal):\n 1. fold_A ` C = C &&& fold_A ` D = C &&& fold_A ` E = C", "by    auto"], ["", "lemmas opp_fold_A_chamber_images =\n  ChamberComplexApartmentSystemTriangle.fold_A_chamber_images[OF reflect]"], ["", "lemma res_fold_A_chamber_images: \"res_fold_A ` C = C\" \"res_fold_A ` D = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) ` C = C &&&\n    restrict1 fold_A (\\<Union> A) ` D = C", "using in_apartments(1,2) fold_A_chamber_images(1,2)\n        res_fold_A_A_chamber_image A_chambers(1,2)"], ["proof (prove)\nusing this:\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  fold_A ` C = C\n  fold_A ` D = C\n  SimplicialComplex.maxsimp A ?F \\<Longrightarrow>\n  restrict1 fold_A (\\<Union> A) ` ?F = fold_A ` ?F\n  SimplicialComplex.maxsimp A C\n  SimplicialComplex.maxsimp A D\n\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) ` C = C &&&\n    restrict1 fold_A (\\<Union> A) ` D = C", "by    auto"], ["", "lemmas res_opp_fold_A_chamber_images =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_chamber_images[OF reflect]"], ["", "lemma fold_A_fixespointwise1: \"fixespointwise fold_A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise fold_A C", "using apartments(1,2) chambers(1,2) in_apartments(1,2)\n        canonical_retraction_simplex_retraction1"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; ?C \\<in> ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> fixespointwise (canonical_retraction ?A ?C) ?a\n\ngoal (1 subgoal):\n 1. fixespointwise fold_A C", "by    (auto intro: fixespointwise_comp)"], ["", "lemmas opp_fold_A_fixespointwise2 =\n  ChamberComplexApartmentSystemTriangle.fold_A_fixespointwise1[OF reflect]"], ["", "lemma fold_A_facet_im: \"fold_A ` z = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_A ` z = z", "using facet_in_chambers(1) fixespointwise_im[OF fold_A_fixespointwise1]"], ["proof (prove)\nusing this:\n  order.greater_eq C z\n  order.greater_eq C ?B \\<Longrightarrow> fold_A ` ?B = ?B\n\ngoal (1 subgoal):\n 1. fold_A ` z = z", "by simp"], ["", "lemma fold_A_endo_X: \"ChamberComplexEndomorphism X fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexEndomorphism X fold_A", "using apartments(1,2) chambers(1,2) in_apartments(1,2)\n        canonical_retraction_comp_endomorphism"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C; chamber ?D;\n   ?C \\<in> ?A; ?D \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexEndomorphism X\n                     (canonical_retraction ?A ?C \\<circ>\n                      canonical_retraction ?B ?D)\n\ngoal (1 subgoal):\n 1. ChamberComplexEndomorphism X fold_A", "by    fast"], ["", "lemma res_fold_A_endo_A: \"ChamberComplexEndomorphism A res_fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))", "using apartments(1,2) chambers(1,2) in_apartments(1,2)\n        canonical_retraction_comp_apartment_endomorphism"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  \\<lbrakk>?A \\<in> \\<A>; ?B \\<in> \\<A>; chamber ?C; chamber ?D;\n   ?C \\<in> ?A; ?D \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexEndomorphism ?A\n                     (restrict1\n                       (canonical_retraction ?A ?C \\<circ>\n                        canonical_retraction ?B ?D)\n                       (\\<Union> ?A))\n\ngoal (1 subgoal):\n 1. ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))", "by    fast"], ["", "lemmas opp_res_fold_A_endo_A =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_endo_A[OF reflect]"], ["", "lemma fold_A_morph_A_A: \"ChamberComplexMorphism A A fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A fold_A", "using ChamberComplexEndomorphism.axioms(1)[OF res_fold_A_endo_A]\n        ChamberComplexMorphism.cong fun_eq_on_sym[OF fun_eq_on_restrict1]"], ["proof (prove)\nusing this:\n  ChamberComplexMorphism A A (restrict1 fold_A (\\<Union> A))\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   fun_eq_on ?g ?f (\\<Union> ?X)\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?X ?Y ?g\n  fun_eq_on ?g (restrict1 ?g ?A) ?A\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A fold_A", "by    fast"], ["", "lemmas opp_fold_A_morph_A_A =\n  ChamberComplexApartmentSystemTriangle.fold_A_morph_A_A[OF reflect]"], ["", "lemma res_fold_A_A_im_fold_A_A_im: \"res_fold_A  \\<turnstile> A = fold_A  \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) \\<turnstile> A = fold_A \\<turnstile> A", "using setsetmapim_restrict1[of A A fold_A]"], ["proof (prove)\nusing this:\n  order.greater_eq A A \\<Longrightarrow>\n  restrict1 fold_A (\\<Union> A) \\<turnstile> A = fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) \\<turnstile> A = fold_A \\<turnstile> A", "by simp"], ["", "lemmas res_opp_fold_A_A_im_opp_fold_A_A_im =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_A_im_fold_A_A_im[\n    OF reflect\n  ]"], ["", "lemma res_fold_A_\\<C>_A_im_fold_A_\\<C>_A_im:\n  \"res_fold_A  \\<turnstile> (ChamberComplex.chamber_system A) =\n    fold_A  \\<turnstile> (ChamberComplex.chamber_system A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) \\<turnstile>\n    ChamberComplex.chamber_system A =\n    fold_A \\<turnstile> ChamberComplex.chamber_system A", "using setsetmapim_restrict1[of \"(ChamberComplex.chamber_system A)\" A]\n        apartments(1) apartment_chamber_system_simplices"], ["proof (prove)\nusing this:\n  order.greater_eq A (ChamberComplex.chamber_system A) \\<Longrightarrow>\n  restrict1 ?f (\\<Union> A) \\<turnstile> ChamberComplex.chamber_system A =\n  ?f \\<turnstile> ChamberComplex.chamber_system A\n  A \\<in> \\<A>\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  order.greater_eq ?X (ChamberComplex.chamber_system ?X)\n\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) \\<turnstile>\n    ChamberComplex.chamber_system A =\n    fold_A \\<turnstile> ChamberComplex.chamber_system A", "by    blast"], ["", "lemmas res_opp_fold_A_\\<C>_A_im_opp_fold_A_\\<C>_A_im =\n  ChamberComplexApartmentSystemTriangle.res_fold_A_\\<C>_A_im_fold_A_\\<C>_A_im[\n    OF reflect\n  ]"], ["", "lemma chambercomplex_fold_A_im: \"ChamberComplex (fold_A \\<turnstile> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplex (fold_A \\<turnstile> A)", "using ChamberComplexMorphism.chambercomplex_image[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  ChamberComplex (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplex (fold_A \\<turnstile> A)", "by    simp"], ["", "lemmas chambercomplex_opp_fold_A_im =\n  ChamberComplexApartmentSystemTriangle.chambercomplex_fold_A_im[\n    OF reflect\n  ]"], ["", "lemma chambersubcomplex_fold_A_im:\n  \"ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)", "using ChamberComplexMorphism.chambersubcomplex_image[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)", "by    simp"], ["", "lemmas chambersubcomplex_opp_fold_A_im =\n  ChamberComplexApartmentSystemTriangle.chambersubcomplex_fold_A_im[\n    OF reflect\n  ]"], ["", "lemma fold_A_facet_distance_map:\n  \"chamber F \\<Longrightarrow> face_distance z (fold_A`F) = face_distance z F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chamber F \\<Longrightarrow>\n    face_distance z (fold_A ` F) = face_distance z F", "using apartments(1,2) chambers in_apartments(1,2) facet_in_chambers(1,2)\n        ChamberComplexRetraction.chamber_map[\n          OF canonical_retraction, of B C F\n        ]\n        canonical_retraction_face_distance_map[of A D \"canonical_retraction B C ` F\"]\n        canonical_retraction_face_distance_map"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  B \\<in> \\<A>\n  chamber C\n  chamber D\n  chamber E\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  order.greater_eq C z\n  order.greater_eq D z\n  \\<lbrakk>B \\<in> \\<A>; chamber C; C \\<in> B; chamber F\\<rbrakk>\n  \\<Longrightarrow> chamber (canonical_retraction B C ` F)\n  \\<lbrakk>A \\<in> \\<A>; chamber D; chamber (canonical_retraction B C ` F);\n   D \\<in> A; order.greater_eq D ?F\\<rbrakk>\n  \\<Longrightarrow> face_distance ?F\n                     (canonical_retraction A D `\n                      canonical_retraction B C ` F) =\n                    face_distance ?F (canonical_retraction B C ` F)\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<in> ?A;\n   order.greater_eq ?C ?F\\<rbrakk>\n  \\<Longrightarrow> face_distance ?F (canonical_retraction ?A ?C ` ?D) =\n                    face_distance ?F ?D\n\ngoal (1 subgoal):\n 1. chamber F \\<Longrightarrow>\n    face_distance z (fold_A ` F) = face_distance z F", "by    (simp add: image_comp)"], ["", "lemma fold_A_min_gallery_betw_map:\n  assumes \"chamber F\" \"chamber G\" \"z\\<subseteq>F\"\n          \"face_distance z G = chamber_distance F G\" \"min_gallery (F#Fs@[G])\"\n  shows   \"min_gallery (fold_A\\<Turnstile>(F#Fs@[G]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_gallery (fold_A \\<Turnstile> (F # Fs @ [G]))", "using   assms fold_A_facet_im fold_A_facet_distance_map\n          ChamberComplexEndomorphism.facedist_chdist_mingal_btwmap[\n            OF fold_A_endo_X, of F G z\n          ]"], ["proof (prove)\nusing this:\n  chamber F\n  chamber G\n  order.greater_eq F z\n  face_distance z G = chamber_distance F G\n  min_gallery (F # Fs @ [G])\n  fold_A ` z = z\n  chamber ?F \\<Longrightarrow>\n  face_distance z (fold_A ` ?F) = face_distance z ?F\n  \\<lbrakk>chamber F; chamber G; F \\<noteq> G; order.greater_eq F z;\n   face_distance (fold_A ` z) (fold_A ` G) = face_distance z G;\n   face_distance z G = chamber_distance F G;\n   min_gallery (F # ?Cs @ [G])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (fold_A \\<Turnstile> (F # ?Cs @ [G]))\n\ngoal (1 subgoal):\n 1. min_gallery (fold_A \\<Turnstile> (F # Fs @ [G]))", "by      force"], ["", "lemma fold_A_chamber_system_image_fixespointwise':\n  defines \\<C>_A : \"\\<C>_A  \\<equiv> ChamberComplex.\\<C> A\"\n  defines f\\<C>_A: \"f\\<C>_A \\<equiv> {F\\<in>\\<C>_A. face_distance z F = chamber_distance C F}\"\n  assumes F   : \"F\\<in>f\\<C>_A\"\n  shows   \"fixespointwise fold_A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise fold_A F", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. fixespointwise fold_A F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise fold_A F", "proof (cases \"F=C\")"], ["proof (state)\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> fixespointwise fold_A F\n 2. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "case True"], ["proof (state)\nthis:\n  F = C\n\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> fixespointwise fold_A F\n 2. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "thus ?thesis"], ["proof (prove)\nusing this:\n  F = C\n\ngoal (1 subgoal):\n 1. fixespointwise fold_A F", "using fold_A_fixespointwise1 fixespointwise_restrict1"], ["proof (prove)\nusing this:\n  F = C\n  fixespointwise fold_A C\n  fixespointwise ?f ?A \\<Longrightarrow> fixespointwise (restrict1 ?f ?B) ?A\n\ngoal (1 subgoal):\n 1. fixespointwise fold_A F", "by fast"], ["proof (state)\nthis:\n  fixespointwise fold_A F\n\ngoal (1 subgoal):\n 1. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "case False"], ["proof (state)\nthis:\n  F \\<noteq> C\n\ngoal (1 subgoal):\n 1. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "from apartments(1) assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  F \\<in> f\\<C>_A", "have  Achamber_F: \"ChamberComplex.chamber A F\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  F \\<in> f\\<C>_A\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F", "using complexes ChamberComplex.chamber_system_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  F \\<in> f\\<C>_A\n  ?Y \\<in> \\<A> \\<Longrightarrow> ChamberComplex ?Y\n  ChamberComplex ?X \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A F\n\ngoal (1 subgoal):\n 1. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "define Fs where \"Fs = (ARG_MIN length Fs. ChamberComplex.gallery A (C#Fs@[F]))\""], ["proof (state)\nthis:\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n\ngoal (1 subgoal):\n 1. F \\<noteq> C \\<Longrightarrow> fixespointwise fold_A F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise fold_A F", "proof (rule apartment_standard_uniqueness_pgallery_betw, rule apartments(1))"], ["proof (state)\ngoal (6 subgoals):\n 1. ChamberComplexMorphism ?W A fold_A\n 2. ChamberComplexMorphism ?W A id\n 3. fixespointwise fold_A ?C\n 4. SimplicialComplex.maxsimpchain ?W (?C # ?Cs @ [F])\n 5. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (?C # ?Cs @ [F]))\n 6. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # ?Cs @ [F]))", "show \"ChamberComplexMorphism A A fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A fold_A", "using fold_A_morph_A_A"], ["proof (prove)\nusing this:\n  ChamberComplexMorphism A A fold_A\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A fold_A", "by fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism A A fold_A\n\ngoal (5 subgoals):\n 1. ChamberComplexMorphism A A id\n 2. fixespointwise fold_A ?C\n 3. SimplicialComplex.maxsimpchain A (?C # ?Cs @ [F])\n 4. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (?C # ?Cs @ [F]))\n 5. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # ?Cs @ [F]))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"ChamberComplexMorphism A A id\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A id", "using apartment_trivial_morphism"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  ?X \\<in> \\<A> \\<Longrightarrow> ChamberComplexMorphism ?X ?X id\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A id", "by fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism A A id\n\ngoal (4 subgoals):\n 1. fixespointwise fold_A ?C\n 2. SimplicialComplex.maxsimpchain A (?C # ?Cs @ [F])\n 3. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (?C # ?Cs @ [F]))\n 4. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # ?Cs @ [F]))", "show \"fixespointwise fold_A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise fold_A C", "using fold_A_fixespointwise1 fixespointwise_restrict1"], ["proof (prove)\nusing this:\n  fixespointwise fold_A C\n  fixespointwise ?f ?A \\<Longrightarrow> fixespointwise (restrict1 ?f ?B) ?A\n\ngoal (1 subgoal):\n 1. fixespointwise fold_A C", "by fast"], ["proof (state)\nthis:\n  fixespointwise fold_A C\n\ngoal (3 subgoals):\n 1. SimplicialComplex.maxsimpchain A (C # ?Cs @ [F])\n 2. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # ?Cs @ [F]))\n 3. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # ?Cs @ [F]))", "from apartments(1) False Fs_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))", "show  1: \"ChamberComplex.gallery A (C#Fs@[F])\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (C # Fs @ [F])", "using A_chambers(1) Achamber_F apartment_gallery_least_length"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n  SimplicialComplex.maxsimp A C\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?C;\n   SimplicialComplex.maxsimp ?X ?D; ?C \\<noteq> ?D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X\n                     (?C #\n                      (ARG_MIN length Cs.\n                          SimplicialComplex.maxsimpchain ?X\n                           (?C # Cs @ [?D])) @\n                      [?D])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (C # Fs @ [F])", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n\ngoal (2 subgoals):\n 1. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))\n 2. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "from False Fs_def apartments(1)"], ["proof (chain)\npicking this:\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n  A \\<in> \\<A>", "have mingal: \"min_gallery (C # Fs @ [F])\""], ["proof (prove)\nusing this:\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. min_gallery (C # Fs @ [F])", "using A_chambers(1) Achamber_F apartment_min_gallery\n              apartment_min_gallery_least_length"], ["proof (prove)\nusing this:\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A C\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>?A \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?A ?Cs\\<rbrakk>\n  \\<Longrightarrow> min_gallery ?Cs\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?C;\n   SimplicialComplex.maxsimp ?X ?D; ?C \\<noteq> ?D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain ?X\n                     (?C #\n                      (ARG_MIN length Cs.\n                          SimplicialComplex.maxsimpchain ?X\n                           (?C # Cs @ [?D])) @\n                      [?D])\n\ngoal (1 subgoal):\n 1. min_gallery (C # Fs @ [F])", "by    fast"], ["proof (state)\nthis:\n  min_gallery (C # Fs @ [F])\n\ngoal (2 subgoals):\n 1. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))\n 2. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "have set_A: \"set (C#Fs@[F]) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (C # Fs @ [F]))", "using 1 apartment_galleryD_chamber apartment_chamberD_simplex"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (C # Fs @ [F]))", "by    fast"], ["proof (state)\nthis:\n  order.greater_eq A (set (C # Fs @ [F]))\n\ngoal (2 subgoals):\n 1. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))\n 2. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  order.greater_eq A (set (C # Fs @ [F]))", "have \"set (fold_A \\<Turnstile> (C#Fs@[F])) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  order.greater_eq A (set (C # Fs @ [F]))\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (fold_A \\<Turnstile> (C # Fs @ [F])))", "using ChamberComplexMorphism.simplex_map[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  order.greater_eq A (set (C # Fs @ [F]))\n  ?x \\<in> A \\<Longrightarrow> fold_A ` ?x \\<in> A\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (fold_A \\<Turnstile> (C # Fs @ [F])))", "by    auto"], ["proof (state)\nthis:\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Fs @ [F])))\n\ngoal (2 subgoals):\n 1. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))\n 2. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "with f\\<C>_A F"], ["proof (chain)\npicking this:\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  F \\<in> f\\<C>_A\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Fs @ [F])))", "show \"ChamberComplex.pgallery A (fold_A \\<Turnstile> (C#Fs@[F]))\""], ["proof (prove)\nusing this:\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  F \\<in> f\\<C>_A\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Fs @ [F])))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))", "using chambers(1) apartments(1) apartment_chamber Achamber_F\n              facet_in_chambers(1) mingal\n              fold_A_min_gallery_betw_map[of C F] min_gallery_in_apartment\n              apartment_min_gallery_pgallery"], ["proof (prove)\nusing this:\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  F \\<in> f\\<C>_A\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Fs @ [F])))\n  chamber C\n  A \\<in> \\<A>\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  SimplicialComplex.maxsimp A F\n  order.greater_eq C z\n  min_gallery (C # Fs @ [F])\n  \\<lbrakk>chamber C; chamber F; order.greater_eq C z;\n   face_distance z F = chamber_distance C F;\n   min_gallery (C # ?Fs @ [F])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (fold_A \\<Turnstile> (C # ?Fs @ [F]))\n  \\<lbrakk>?Y \\<in> \\<A>; min_gallery ?Cs;\n   order.greater_eq ?Y (set ?Cs)\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain ?Y ?Cs\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain ?X ?xs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A (fold_A \\<Turnstile> (C # Fs @ [F]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "from apartments(1) False Fs_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))", "show  \"ChamberComplex.pgallery A (id \\<Turnstile> (C#Fs@[F]))\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "using A_chambers(1) Achamber_F\n              ChamberComplex.pgallery_least_length[OF complexes]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<noteq> C\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (C # Fs @ [F]))\n  SimplicialComplex.maxsimp A C\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?C;\n   SimplicialComplex.maxsimp ?X ?D; ?C \\<noteq> ?D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain ?X\n                     (?C #\n                      (ARG_MIN length Cs.\n                          SimplicialComplex.maxsimpchain ?X\n                           (?C # Cs @ [?D])) @\n                      [?D])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Fs @ [F]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fixespointwise fold_A F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fixespointwise fold_A F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fold_A_chamber_system_image:\n  defines \\<C>_A : \"\\<C>_A \\<equiv> ChamberComplex.\\<C> A\"\n  defines f\\<C>_A: \"f\\<C>_A \\<equiv> {F\\<in>\\<C>_A. face_distance z F = chamber_distance C F}\"\n  shows   \"fold_A \\<turnstile> \\<C>_A = f\\<C>_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_A \\<turnstile> \\<C>_A = f\\<C>_A", "proof (rule seteqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fold_A \\<turnstile> \\<C>_A \\<Longrightarrow> x \\<in> f\\<C>_A\n 2. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "fix F"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fold_A \\<turnstile> \\<C>_A \\<Longrightarrow> x \\<in> f\\<C>_A\n 2. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "assume F: \"F \\<in> fold_A \\<turnstile> \\<C>_A\""], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> \\<C>_A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fold_A \\<turnstile> \\<C>_A \\<Longrightarrow> x \\<in> f\\<C>_A\n 2. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "with \\<C>_A"], ["proof (chain)\npicking this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  F \\<in> fold_A \\<turnstile> \\<C>_A", "have \"F\\<in>\\<C>_A\""], ["proof (prove)\nusing this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  F \\<in> fold_A \\<turnstile> \\<C>_A\n\ngoal (1 subgoal):\n 1. F \\<in> \\<C>_A", "using ChamberComplexMorphism.chamber_system_into[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  F \\<in> fold_A \\<turnstile> \\<C>_A\n  order.greater_eq (ChamberComplex.chamber_system A)\n   (fold_A \\<turnstile> ChamberComplex.chamber_system A)\n\ngoal (1 subgoal):\n 1. F \\<in> \\<C>_A", "by    fast"], ["proof (state)\nthis:\n  F \\<in> \\<C>_A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fold_A \\<turnstile> \\<C>_A \\<Longrightarrow> x \\<in> f\\<C>_A\n 2. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "moreover"], ["proof (state)\nthis:\n  F \\<in> \\<C>_A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fold_A \\<turnstile> \\<C>_A \\<Longrightarrow> x \\<in> f\\<C>_A\n 2. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "have \"face_distance z F = chamber_distance C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "proof (cases \"F=C\")"], ["proof (state)\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> face_distance z F = chamber_distance C F\n 2. F \\<noteq> C \\<Longrightarrow> face_distance z F = chamber_distance C F", "case False"], ["proof (state)\nthis:\n  F \\<noteq> C\n\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> face_distance z F = chamber_distance C F\n 2. F \\<noteq> C \\<Longrightarrow> face_distance z F = chamber_distance C F", "have F_ne_C: \"F\\<noteq>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<noteq> C", "by fact"], ["proof (state)\nthis:\n  F \\<noteq> C\n\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> face_distance z F = chamber_distance C F\n 2. F \\<noteq> C \\<Longrightarrow> face_distance z F = chamber_distance C F", "from F"], ["proof (chain)\npicking this:\n  F \\<in> fold_A \\<turnstile> \\<C>_A", "obtain G where G: \"G\\<in>\\<C>_A\" \"F = fold_A ` G\""], ["proof (prove)\nusing this:\n  F \\<in> fold_A \\<turnstile> \\<C>_A\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<in> \\<C>_A; F = fold_A ` G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  G \\<in> \\<C>_A\n  F = fold_A ` G\n\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> face_distance z F = chamber_distance C F\n 2. F \\<noteq> C \\<Longrightarrow> face_distance z F = chamber_distance C F", "with \\<C>_A apartments(1)"], ["proof (chain)\npicking this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  A \\<in> \\<A>\n  G \\<in> \\<C>_A\n  F = fold_A ` G", "have G': \"chamber G\" \"G\\<in>A\""], ["proof (prove)\nusing this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  A \\<in> \\<A>\n  G \\<in> \\<C>_A\n  F = fold_A ` G\n\ngoal (1 subgoal):\n 1. chamber G &&& G \\<in> A", "using apartment_chamber_system_def complexes apartment_chamber\n            apartment_chamberD_simplex"], ["proof (prove)\nusing this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  A \\<in> \\<A>\n  G \\<in> \\<C>_A\n  F = fold_A ` G\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n  ?Y \\<in> \\<A> \\<Longrightarrow> ChamberComplex ?Y\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n\ngoal (1 subgoal):\n 1. chamber G &&& G \\<in> A", "by    auto"], ["proof (state)\nthis:\n  chamber G\n  G \\<in> A\n\ngoal (2 subgoals):\n 1. F = C \\<Longrightarrow> face_distance z F = chamber_distance C F\n 2. F \\<noteq> C \\<Longrightarrow> face_distance z F = chamber_distance C F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "proof (cases \"chamber_distance C G \\<le> chamber_distance D G\")"], ["proof (state)\ngoal (2 subgoals):\n 1. order.greater_eq (chamber_distance D G)\n     (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F\n 2. \\<not> order.greater_eq (chamber_distance D G)\n            (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F", "case True"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance D G) (chamber_distance C G)\n\ngoal (2 subgoals):\n 1. order.greater_eq (chamber_distance D G)\n     (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F\n 2. \\<not> order.greater_eq (chamber_distance D G)\n            (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F", "thus \"face_distance z F = chamber_distance C F\""], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D G) (chamber_distance C G)\n\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "using apartments(1) chambers(1,2) in_apartments(1,2) facet(1,2)\n              chambers_ne(1) F_ne_C G(2) G' fold_A_chamber_images(1)\n              facet_in_chambers(1) fold_A_facet_distance_map\n              fold_A_facet_im\n              apartment_face_distance_eq_chamber_distance_compare_other_chamber[\n                of A C D G z\n              ]\n              ChamberComplexEndomorphism.face_distance_eq_chamber_distance_map[\n                OF fold_A_endo_X, of C G z\n              ]"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D G) (chamber_distance C G)\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  z \\<lhd> C\n  z \\<lhd> D\n  D \\<noteq> C\n  F \\<noteq> C\n  F = fold_A ` G\n  chamber G\n  G \\<in> A\n  fold_A ` C = C\n  order.greater_eq C z\n  chamber ?F \\<Longrightarrow>\n  face_distance z (fold_A ` ?F) = face_distance z ?F\n  fold_A ` z = z\n  \\<lbrakk>A \\<in> \\<A>; chamber C; chamber D; chamber G; C \\<in> A;\n   D \\<in> A; G \\<in> A; z \\<lhd> C; z \\<lhd> D; C \\<noteq> D;\n   order.greater_eq (chamber_distance D G) (chamber_distance C G)\\<rbrakk>\n  \\<Longrightarrow> face_distance z G = chamber_distance C G\n  \\<lbrakk>chamber C; chamber G; C \\<noteq> G; order.greater_eq C z;\n   face_distance (fold_A ` z) (fold_A ` G) = face_distance z G;\n   face_distance z G = chamber_distance C G\\<rbrakk>\n  \\<Longrightarrow> face_distance (fold_A ` z) (fold_A ` G) =\n                    chamber_distance (fold_A ` C) (fold_A ` G)\n\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "by    auto"], ["proof (state)\nthis:\n  face_distance z F = chamber_distance C F\n\ngoal (1 subgoal):\n 1. \\<not> order.greater_eq (chamber_distance D G)\n            (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> order.greater_eq (chamber_distance D G)\n            (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F", "case False"], ["proof (state)\nthis:\n  \\<not> order.greater_eq (chamber_distance D G) (chamber_distance C G)\n\ngoal (1 subgoal):\n 1. \\<not> order.greater_eq (chamber_distance D G)\n            (chamber_distance C G) \\<Longrightarrow>\n    face_distance z F = chamber_distance C F", "thus \"face_distance z F = chamber_distance C F\""], ["proof (prove)\nusing this:\n  \\<not> order.greater_eq (chamber_distance D G) (chamber_distance C G)\n\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "using apartments(1) chambers(1,2) in_apartments(1,2) facet(1,2)\n              chambers_ne(1) F_ne_C G(2) G' fold_A_chamber_images(2)\n              facet_in_chambers(2) fold_A_facet_distance_map fold_A_facet_im\n              apartment_face_distance_eq_chamber_distance_compare_other_chamber[\n                of A D C G z\n              ]\n              ChamberComplexEndomorphism.face_distance_eq_chamber_distance_map[\n                OF fold_A_endo_X, of D G z\n              ]"], ["proof (prove)\nusing this:\n  \\<not> order.greater_eq (chamber_distance D G) (chamber_distance C G)\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  z \\<lhd> C\n  z \\<lhd> D\n  D \\<noteq> C\n  F \\<noteq> C\n  F = fold_A ` G\n  chamber G\n  G \\<in> A\n  fold_A ` D = C\n  order.greater_eq D z\n  chamber ?F \\<Longrightarrow>\n  face_distance z (fold_A ` ?F) = face_distance z ?F\n  fold_A ` z = z\n  \\<lbrakk>A \\<in> \\<A>; chamber D; chamber C; chamber G; D \\<in> A;\n   C \\<in> A; G \\<in> A; z \\<lhd> D; z \\<lhd> C; D \\<noteq> C;\n   order.greater_eq (chamber_distance C G) (chamber_distance D G)\\<rbrakk>\n  \\<Longrightarrow> face_distance z G = chamber_distance D G\n  \\<lbrakk>chamber D; chamber G; D \\<noteq> G; order.greater_eq D z;\n   face_distance (fold_A ` z) (fold_A ` G) = face_distance z G;\n   face_distance z G = chamber_distance D G\\<rbrakk>\n  \\<Longrightarrow> face_distance (fold_A ` z) (fold_A ` G) =\n                    chamber_distance (fold_A ` D) (fold_A ` G)\n\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "by    auto"], ["proof (state)\nthis:\n  face_distance z F = chamber_distance C F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  face_distance z F = chamber_distance C F\n\ngoal (1 subgoal):\n 1. F = C \\<Longrightarrow> face_distance z F = chamber_distance C F", "qed (simp add: chambers(1) facet_in_chambers(1) face_distance_eq_0 chamber_distance_def)"], ["proof (state)\nthis:\n  face_distance z F = chamber_distance C F\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fold_A \\<turnstile> \\<C>_A \\<Longrightarrow> x \\<in> f\\<C>_A\n 2. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "ultimately"], ["proof (chain)\npicking this:\n  F \\<in> \\<C>_A\n  face_distance z F = chamber_distance C F", "show \"F\\<in>f\\<C>_A\""], ["proof (prove)\nusing this:\n  F \\<in> \\<C>_A\n  face_distance z F = chamber_distance C F\n\ngoal (1 subgoal):\n 1. F \\<in> f\\<C>_A", "using f\\<C>_A"], ["proof (prove)\nusing this:\n  F \\<in> \\<C>_A\n  face_distance z F = chamber_distance C F\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n\ngoal (1 subgoal):\n 1. F \\<in> f\\<C>_A", "by fast"], ["proof (state)\nthis:\n  F \\<in> f\\<C>_A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f\\<C>_A \\<Longrightarrow> x \\<in> fold_A \\<turnstile> \\<C>_A", "from \\<C>_A f\\<C>_A"], ["proof (chain)\npicking this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}", "show \"\\<And>F. F\\<in>f\\<C>_A \\<Longrightarrow> F\\<in>fold_A \\<turnstile> \\<C>_A\""], ["proof (prove)\nusing this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       F \\<in> f\\<C>_A \\<Longrightarrow> F \\<in> fold_A \\<turnstile> \\<C>_A", "using fold_A_chamber_system_image_fixespointwise' fixespointwise_im"], ["proof (prove)\nusing this:\n  \\<C>_A \\<equiv> ChamberComplex.chamber_system A\n  f\\<C>_A \\<equiv>\n  {F \\<in> \\<C>_A. face_distance z F = chamber_distance C F}\n  ?F \\<in> {F \\<in> ChamberComplex.chamber_system A.\n            face_distance z F = chamber_distance C F} \\<Longrightarrow>\n  fixespointwise fold_A ?F\n  \\<lbrakk>fixespointwise ?f ?A; order.greater_eq ?A ?B\\<rbrakk>\n  \\<Longrightarrow> ?f ` ?B = ?B\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       F \\<in> f\\<C>_A \\<Longrightarrow> F \\<in> fold_A \\<turnstile> \\<C>_A", "by blast"], ["proof (state)\nthis:\n  ?F1 \\<in> f\\<C>_A \\<Longrightarrow> ?F1 \\<in> fold_A \\<turnstile> \\<C>_A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas opp_fold_A_chamber_system_image =\n  ChamberComplexApartmentSystemTriangle.fold_A_chamber_system_image[\n    OF reflect\n  ]"], ["", "lemma fold_A_chamber_system_image_fixespointwise:\n  \"F \\<in> ChamberComplex.\\<C> A \\<Longrightarrow> fixespointwise fold_A (fold_A`F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n    fixespointwise fold_A (fold_A ` F)", "using fold_A_chamber_system_image\n        fold_A_chamber_system_image_fixespointwise'[of \"fold_A`F\"]"], ["proof (prove)\nusing this:\n  fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance C F}\n  fold_A ` F\n  \\<in> {F \\<in> ChamberComplex.chamber_system A.\n         face_distance z F = chamber_distance C F} \\<Longrightarrow>\n  fixespointwise fold_A (fold_A ` F)\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n    fixespointwise fold_A (fold_A ` F)", "by    auto"], ["", "lemmas fold_A_chsys_imfix = fold_A_chamber_system_image_fixespointwise"], ["", "lemmas opp_fold_A_chamber_system_image_fixespointwise =\n  ChamberComplexApartmentSystemTriangle.fold_A_chsys_imfix[\n    OF reflect\n  ]"], ["", "lemma chamber_in_fold_A_im:\n  \"chamber F \\<Longrightarrow> F \\<in> fold_A \\<turnstile> A \\<Longrightarrow> F \\<in> fold_A \\<turnstile> ChamberComplex.\\<C> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>chamber F; F \\<in> fold_A \\<turnstile> A\\<rbrakk>\n    \\<Longrightarrow> F \\<in> fold_A \\<turnstile>\n                              ChamberComplex.chamber_system A", "using apartments(1)\n        ChamberComplexMorphism.chamber_system_image[OF fold_A_morph_A_A]\n        ChamberComplexMorphism.simplex_map[OF fold_A_morph_A_A]\n        chamber_in_apartment apartment_chamber_system_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  ChamberComplex.chamber_system A \\<inter> (fold_A \\<turnstile> A)\n  ?x \\<in> A \\<Longrightarrow> fold_A ` ?x \\<in> A\n  \\<lbrakk>?Y \\<in> \\<A>; ?C \\<in> ?Y; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>chamber F; F \\<in> fold_A \\<turnstile> A\\<rbrakk>\n    \\<Longrightarrow> F \\<in> fold_A \\<turnstile>\n                              ChamberComplex.chamber_system A", "by    fastforce"], ["", "lemmas chamber_in_opp_fold_A_im =\n  ChamberComplexApartmentSystemTriangle.chamber_in_fold_A_im[OF reflect]"], ["", "lemma simplex_in_fold_A_im_image:\n  assumes \"x \\<in> fold_A \\<turnstile> A\"\n  shows   \"fold_A ` x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_A ` x = x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. fold_A ` x = x", "from assms apartments(1)"], ["proof (chain)\npicking this:\n  x \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>", "obtain C\n    where \"C \\<in> ChamberComplex.\\<C> A\" \"x \\<subseteq> fold_A`C\""], ["proof (prove)\nusing this:\n  x \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> ChamberComplex.chamber_system A;\n         order.greater_eq (fold_A ` C) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using apartment_simplex_in_max apartment_chamber_system_def"], ["proof (prove)\nusing this:\n  x \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  \\<lbrakk>?X \\<in> \\<A>; ?y \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       SimplicialComplex.maxsimp ?X x \\<and>\n                       order.greater_eq x ?y\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> ChamberComplex.chamber_system A;\n         order.greater_eq (fold_A ` C) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by    fast"], ["proof (state)\nthis:\n  C \\<in> ChamberComplex.chamber_system A\n  order.greater_eq (fold_A ` C) x\n\ngoal (1 subgoal):\n 1. fold_A ` x = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  C \\<in> ChamberComplex.chamber_system A\n  order.greater_eq (fold_A ` C) x\n\ngoal (1 subgoal):\n 1. fold_A ` x = x", "using fold_A_chamber_system_image_fixespointwise fixespointwise_im"], ["proof (prove)\nusing this:\n  C \\<in> ChamberComplex.chamber_system A\n  order.greater_eq (fold_A ` C) x\n  ?F \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n  fixespointwise fold_A (fold_A ` ?F)\n  \\<lbrakk>fixespointwise ?f ?A; order.greater_eq ?A ?B\\<rbrakk>\n  \\<Longrightarrow> ?f ` ?B = ?B\n\ngoal (1 subgoal):\n 1. fold_A ` x = x", "by    blast"], ["proof (state)\nthis:\n  fold_A ` x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chamber1_notin_rfold_im: \"C \\<notin> opp_fold_A \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<notin> opp_fold_A \\<turnstile> A", "using chambers(1,2) facet(1,2) chambers_ne(1) facet_in_chambers(1)\n        min_gallery_adj adjacentI[of z] face_distance_eq_0\n        min_gallery_betw_chamber_distance[of D \"[]\" C]\n        chamber_in_opp_fold_A_im[of C] opp_fold_A_chamber_system_image"], ["proof (prove)\nusing this:\n  chamber C\n  chamber D\n  z \\<lhd> C\n  z \\<lhd> D\n  D \\<noteq> C\n  order.greater_eq C z\n  \\<lbrakk>chamber ?x; chamber ?y; ?x \\<sim> ?y; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> min_gallery [?x, ?y]\n  \\<lbrakk>z \\<lhd> ?x; z \\<lhd> ?y\\<rbrakk> \\<Longrightarrow> ?x \\<sim> ?y\n  \\<lbrakk>chamber ?C; order.greater_eq ?C ?F\\<rbrakk>\n  \\<Longrightarrow> face_distance ?F ?C = 0\n  min_gallery (D # [] @ [C]) \\<Longrightarrow>\n  chamber_distance D C = Suc (length [])\n  \\<lbrakk>chamber C; C \\<in> opp_fold_A \\<turnstile> A\\<rbrakk>\n  \\<Longrightarrow> C \\<in> opp_fold_A \\<turnstile>\n                            ChamberComplex.chamber_system A\n  opp_fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance D F}\n\ngoal (1 subgoal):\n 1. C \\<notin> opp_fold_A \\<turnstile> A", "by    auto"], ["", "lemma fold_A_min_gallery_from1_map:\n  \"\\<lbrakk> chamber F; F \\<in> fold_A \\<turnstile> A; min_gallery (C#Fs@[F]) \\<rbrakk> \\<Longrightarrow>\n    min_gallery (C # fold_A \\<Turnstile> Fs @ [F])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>chamber F; F \\<in> fold_A \\<turnstile> A;\n     min_gallery (C # Fs @ [F])\\<rbrakk>\n    \\<Longrightarrow> min_gallery (C # fold_A \\<Turnstile> Fs @ [F])", "using chambers(1) chamber_in_fold_A_im fold_A_chamber_system_image\n        facet_in_chambers(1) fold_A_min_gallery_betw_map[of C F]\n        fold_A_chamber_images(1) simplex_in_fold_A_im_image"], ["proof (prove)\nusing this:\n  chamber C\n  \\<lbrakk>chamber ?F; ?F \\<in> fold_A \\<turnstile> A\\<rbrakk>\n  \\<Longrightarrow> ?F \\<in> fold_A \\<turnstile>\n                             ChamberComplex.chamber_system A\n  fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance C F}\n  order.greater_eq C z\n  \\<lbrakk>chamber C; chamber F; order.greater_eq C z;\n   face_distance z F = chamber_distance C F;\n   min_gallery (C # ?Fs @ [F])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (fold_A \\<Turnstile> (C # ?Fs @ [F]))\n  fold_A ` C = C\n  ?x \\<in> fold_A \\<turnstile> A \\<Longrightarrow> fold_A ` ?x = ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>chamber F; F \\<in> fold_A \\<turnstile> A;\n     min_gallery (C # Fs @ [F])\\<rbrakk>\n    \\<Longrightarrow> min_gallery (C # fold_A \\<Turnstile> Fs @ [F])", "by    simp"], ["", "lemma fold_A_min_gallery_from2_map:\n  \"\\<lbrakk> chamber F; F \\<in> opp_fold_A \\<turnstile> A; min_gallery (D#Fs@[F]) \\<rbrakk> \\<Longrightarrow>\n    min_gallery (C # fold_A \\<Turnstile> (Fs@[F]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>chamber F; F \\<in> opp_fold_A \\<turnstile> A;\n     min_gallery (D # Fs @ [F])\\<rbrakk>\n    \\<Longrightarrow> min_gallery (C # fold_A \\<Turnstile> (Fs @ [F]))", "using chambers(2) facet_in_chambers(2) chamber_in_opp_fold_A_im\n        opp_fold_A_chamber_system_image fold_A_chamber_images(2)\n        fold_A_min_gallery_betw_map[of D F Fs]"], ["proof (prove)\nusing this:\n  chamber D\n  order.greater_eq D z\n  \\<lbrakk>chamber ?F; ?F \\<in> opp_fold_A \\<turnstile> A\\<rbrakk>\n  \\<Longrightarrow> ?F \\<in> opp_fold_A \\<turnstile>\n                             ChamberComplex.chamber_system A\n  opp_fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance D F}\n  fold_A ` D = C\n  \\<lbrakk>chamber D; chamber F; order.greater_eq D z;\n   face_distance z F = chamber_distance D F;\n   min_gallery (D # Fs @ [F])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (fold_A \\<Turnstile> (D # Fs @ [F]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>chamber F; F \\<in> opp_fold_A \\<turnstile> A;\n     min_gallery (D # Fs @ [F])\\<rbrakk>\n    \\<Longrightarrow> min_gallery (C # fold_A \\<Turnstile> (Fs @ [F]))", "by    simp"], ["", "lemma fold_A_min_gallery_to2_map:\n  assumes \"chamber F\" \"F \\<in> opp_fold_A \\<turnstile> A\" \"min_gallery (F#Fs@[D])\"\n  shows   \"min_gallery (fold_A \\<Turnstile> (F#Fs) @ [C])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_gallery (fold_A \\<Turnstile> (F # Fs) @ [C])", "using   assms(1,2) min_gallery_rev[of \"C # fold_A \\<Turnstile> (rev Fs @ [F])\"]\n          min_gallery_rev[OF assms(3)] fold_A_min_gallery_from2_map[of F \"rev Fs\"]\n          fold_A_chamber_images(2)"], ["proof (prove)\nusing this:\n  chamber F\n  F \\<in> opp_fold_A \\<turnstile> A\n  min_gallery (C # fold_A \\<Turnstile> (rev Fs @ [F])) \\<Longrightarrow>\n  min_gallery (rev (C # fold_A \\<Turnstile> (rev Fs @ [F])))\n  min_gallery (rev (F # Fs @ [D]))\n  \\<lbrakk>chamber F; F \\<in> opp_fold_A \\<turnstile> A;\n   min_gallery (D # rev Fs @ [F])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (C # fold_A \\<Turnstile> (rev Fs @ [F]))\n  fold_A ` D = C\n\ngoal (1 subgoal):\n 1. min_gallery (fold_A \\<Turnstile> (F # Fs) @ [C])", "by      (simp add: rev_map[THEN sym])"], ["", "lemmas opp_fold_A_min_gallery_from1_map =\n  ChamberComplexApartmentSystemTriangle.fold_A_min_gallery_from2_map[\n    OF reflect\n  ]"], ["", "lemmas opp_fold_A_min_gallery_to1_map =\n  ChamberComplexApartmentSystemTriangle.fold_A_min_gallery_to2_map[\n    OF reflect\n  ]"], ["", "lemma closer_to_chamber1_not_in_rfold_im_chamber_system:\n  assumes \"chamber_distance C F \\<le> chamber_distance D F\"\n  shows   \"F \\<notin> ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<notin> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "assume \"F \\<in> ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)\""], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "hence F: \"F \\<in> res_opp_fold_A \\<turnstile> ChamberComplex.\\<C> A\""], ["proof (prove)\nusing this:\n  F \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. F \\<in> restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n            ChamberComplex.chamber_system A", "using res_opp_fold_A_A_im_opp_fold_A_A_im\n          ChamberComplexEndomorphism.image_chamber_system[\n            OF opp_res_fold_A_endo_A\n          ]"], ["proof (prove)\nusing this:\n  F \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n  restrict1 opp_fold_A (\\<Union> A) \\<turnstile> A =\n  opp_fold_A \\<turnstile> A\n  ChamberComplex.chamber_system\n   (restrict1 opp_fold_A (\\<Union> A) \\<turnstile> A) =\n  restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n  ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n            ChamberComplex.chamber_system A", "by    simp"], ["proof (state)\nthis:\n  F \\<in> restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n          ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "hence F': \"F \\<in> opp_fold_A \\<turnstile> ChamberComplex.\\<C> A\""], ["proof (prove)\nusing this:\n  F \\<in> restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n          ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> opp_fold_A \\<turnstile> ChamberComplex.chamber_system A", "using res_opp_fold_A_\\<C>_A_im_opp_fold_A_\\<C>_A_im"], ["proof (prove)\nusing this:\n  F \\<in> restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n          ChamberComplex.chamber_system A\n  restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n  ChamberComplex.chamber_system A =\n  opp_fold_A \\<turnstile> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> opp_fold_A \\<turnstile> ChamberComplex.chamber_system A", "by simp"], ["proof (state)\nthis:\n  F \\<in> opp_fold_A \\<turnstile> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "have Achamber_F: \"ChamberComplex.chamber A F\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F", "using F apartment_chamber_system_def[of A]\n          ChamberComplexEndomorphism.chamber_system_image[\n            OF opp_res_fold_A_endo_A\n          ]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n          ChamberComplex.chamber_system A\n  A \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system A \\<equiv>\n  {C. SimplicialComplex.maxsimp A C}\n  restrict1 opp_fold_A (\\<Union> A) \\<turnstile>\n  ChamberComplex.chamber_system A =\n  ChamberComplex.chamber_system A \\<inter>\n  (restrict1 opp_fold_A (\\<Union> A) \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A F\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "have F_ne_C: \"F\\<noteq>C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. F \\<noteq> C", "using F' apartment_chamber_system_simplices[of A] chamber1_notin_rfold_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> opp_fold_A \\<turnstile> ChamberComplex.chamber_system A\n  A \\<in> \\<A> \\<Longrightarrow>\n  order.greater_eq A (ChamberComplex.chamber_system A)\n  C \\<notin> opp_fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. F \\<noteq> C", "by    auto"], ["proof (state)\nthis:\n  F \\<noteq> C\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "have \"fixespointwise opp_fold_A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise opp_fold_A C", "proof (rule apartment_standard_uniqueness_pgallery_betw, rule apartments(1))"], ["proof (state)\ngoal (6 subgoals):\n 1. ChamberComplexMorphism ?W A opp_fold_A\n 2. ChamberComplexMorphism ?W A id\n 3. fixespointwise opp_fold_A ?C\n 4. SimplicialComplex.maxsimpchain ?W (?C # ?Cs @ [C])\n 5. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (?C # ?Cs @ [C]))\n 6. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # ?Cs @ [C]))", "show \"ChamberComplexMorphism A A opp_fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A opp_fold_A", "using opp_fold_A_morph_A_A"], ["proof (prove)\nusing this:\n  ChamberComplexMorphism A A opp_fold_A\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A opp_fold_A", "by fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism A A opp_fold_A\n\ngoal (5 subgoals):\n 1. ChamberComplexMorphism A A id\n 2. fixespointwise opp_fold_A ?C\n 3. SimplicialComplex.maxsimpchain A (?C # ?Cs @ [C])\n 4. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (?C # ?Cs @ [C]))\n 5. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # ?Cs @ [C]))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"ChamberComplexMorphism A A id\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A id", "using apartment_trivial_morphism"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  ?X \\<in> \\<A> \\<Longrightarrow> ChamberComplexMorphism ?X ?X id\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism A A id", "by fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism A A id\n\ngoal (4 subgoals):\n 1. fixespointwise opp_fold_A ?C\n 2. SimplicialComplex.maxsimpchain A (?C # ?Cs @ [C])\n 3. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (?C # ?Cs @ [C]))\n 4. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # ?Cs @ [C]))", "show \"fixespointwise opp_fold_A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise opp_fold_A F", "using F' opp_fold_A_chamber_system_image_fixespointwise"], ["proof (prove)\nusing this:\n  F \\<in> opp_fold_A \\<turnstile> ChamberComplex.chamber_system A\n  ?F \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n  fixespointwise opp_fold_A (opp_fold_A ` ?F)\n\ngoal (1 subgoal):\n 1. fixespointwise opp_fold_A F", "by fast"], ["proof (state)\nthis:\n  fixespointwise opp_fold_A F\n\ngoal (3 subgoals):\n 1. SimplicialComplex.maxsimpchain A (F # ?Cs @ [C])\n 2. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # ?Cs @ [C]))\n 3. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (F # ?Cs @ [C]))", "define Fs where \"Fs = (ARG_MIN length Fs. ChamberComplex.gallery A (F#Fs@[C]))\""], ["proof (state)\nthis:\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (F # Fs @ [C]))\n\ngoal (3 subgoals):\n 1. SimplicialComplex.maxsimpchain A (F # ?Cs @ [C])\n 2. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # ?Cs @ [C]))\n 3. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (F # ?Cs @ [C]))", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (F # Fs @ [C]))", "have  mingal: \"ChamberComplex.min_gallery A (F#Fs@[C])\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (F # Fs @ [C]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])", "using A_chambers(1) Achamber_F F_ne_C\n            apartment_min_gallery_least_length[of A F C]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Fs = (ARG_MIN length Fs. SimplicialComplex.maxsimpchain A (F # Fs @ [C]))\n  SimplicialComplex.maxsimp A C\n  SimplicialComplex.maxsimp A F\n  F \\<noteq> C\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimp A F;\n   SimplicialComplex.maxsimp A C; F \\<noteq> C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain A\n                     (F #\n                      (ARG_MIN length Cs.\n                          SimplicialComplex.maxsimpchain A (F # Cs @ [C])) @\n                      [C])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])\n\ngoal (3 subgoals):\n 1. SimplicialComplex.maxsimpchain A (F # ?Cs @ [C])\n 2. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # ?Cs @ [C]))\n 3. SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (F # ?Cs @ [C]))", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])", "show  5: \"ChamberComplex.gallery A (F#Fs@[C])\"\n      and   \"ChamberComplex.pgallery A (id \\<Turnstile> (F#Fs@[C]))\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (F # Fs @ [C]) &&&\n    SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (F # Fs @ [C]))", "using apartment_min_galleryD_gallery apartment_min_gallery_pgallery"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain ?X ?xs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (F # Fs @ [C]) &&&\n    SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (F # Fs @ [C]))", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimpchain A (F # Fs @ [C])\n  SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (F # Fs @ [C]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile>\n      (F #\n       (ARG_MIN length Fs.\n           SimplicialComplex.maxsimpchain A (F # Fs @ [C])) @\n       [C]))", "have \"min_gallery (opp_fold_A \\<Turnstile> (F#Fs) @ [D])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_gallery (opp_fold_A \\<Turnstile> (F # Fs) @ [D])", "proof (rule opp_fold_A_min_gallery_to1_map)"], ["proof (state)\ngoal (3 subgoals):\n 1. chamber F\n 2. F \\<in> fold_A \\<turnstile> A\n 3. min_gallery (F # Fs @ [C])", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"chamber F\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. chamber F", "using Achamber_F apartment_chamber"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. chamber F", "by fast"], ["proof (state)\nthis:\n  chamber F\n\ngoal (2 subgoals):\n 1. F \\<in> fold_A \\<turnstile> A\n 2. min_gallery (F # Fs @ [C])", "from assms"], ["proof (chain)\npicking this:\n  order.greater_eq (chamber_distance D F) (chamber_distance C F)", "have  \"F \\<in> fold_A \\<turnstile> ChamberComplex.\\<C> A\""], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D F) (chamber_distance C F)\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> ChamberComplex.chamber_system A", "using apartments(1) chambers(1,2) in_apartments(1,2) facet(1,2)\n              chambers_ne(1) Achamber_F apartment_chamber\n              apartment_chamberD_simplex\n              apartment_face_distance_eq_chamber_distance_compare_other_chamber\n              apartment_chamber_system_def fold_A_chamber_system_image\n              apartment_chamber_system_simplices"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D F) (chamber_distance C F)\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  z \\<lhd> C\n  z \\<lhd> D\n  D \\<noteq> C\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; chamber ?E; ?C \\<in> ?A;\n   ?D \\<in> ?A; ?E \\<in> ?A; ?z \\<lhd> ?C; ?z \\<lhd> ?D; ?C \\<noteq> ?D;\n   order.greater_eq (chamber_distance ?D ?E)\n    (chamber_distance ?C ?E)\\<rbrakk>\n  \\<Longrightarrow> face_distance ?z ?E = chamber_distance ?C ?E\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n  fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance C F}\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  order.greater_eq ?X (ChamberComplex.chamber_system ?X)\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> ChamberComplex.chamber_system A", "by    simp"], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> ChamberComplex.chamber_system A\n\ngoal (2 subgoals):\n 1. F \\<in> fold_A \\<turnstile> A\n 2. min_gallery (F # Fs @ [C])", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> ChamberComplex.chamber_system A", "show \"F \\<in> fold_A \\<turnstile> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A", "using apartment_chamber_system_simplices[of A]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> ChamberComplex.chamber_system A\n  A \\<in> \\<A> \\<Longrightarrow>\n  order.greater_eq A (ChamberComplex.chamber_system A)\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A", "by auto"], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. min_gallery (F # Fs @ [C])", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"min_gallery (F # Fs @ [C])\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. min_gallery (F # Fs @ [C])", "using mingal apartment_min_gallery"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A (F # Fs @ [C])\n  \\<lbrakk>?A \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?A ?Cs\\<rbrakk>\n  \\<Longrightarrow> min_gallery ?Cs\n\ngoal (1 subgoal):\n 1. min_gallery (F # Fs @ [C])", "by fast"], ["proof (state)\nthis:\n  min_gallery (F # Fs @ [C])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs) @ [D])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile>\n      (F #\n       (ARG_MIN length Fs.\n           SimplicialComplex.maxsimpchain A (F # Fs @ [C])) @\n       [C]))", "hence \"min_gallery (opp_fold_A \\<Turnstile> (F#Fs@[C]))\""], ["proof (prove)\nusing this:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs) @ [D])\n\ngoal (1 subgoal):\n 1. min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "using opp_fold_A_chamber_images(2)"], ["proof (prove)\nusing this:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs) @ [D])\n  opp_fold_A ` C = D\n\ngoal (1 subgoal):\n 1. min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "by simp"], ["proof (state)\nthis:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile>\n      (F #\n       (ARG_MIN length Fs.\n           SimplicialComplex.maxsimpchain A (F # Fs @ [C])) @\n       [C]))", "moreover"], ["proof (state)\nthis:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile>\n      (F #\n       (ARG_MIN length Fs.\n           SimplicialComplex.maxsimpchain A (F # Fs @ [C])) @\n       [C]))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "have \"set (opp_fold_A \\<Turnstile> (F#Fs@[C])) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (opp_fold_A \\<Turnstile> (F # Fs @ [C])))", "using 5 apartment_galleryD_chamber[of A]\n            apartment_chamberD_simplex[of A]\n            ChamberComplexMorphism.simplex_map[OF opp_fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimpchain A (F # Fs @ [C])\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimpchain A ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp A ?x\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimp A ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> A\n  ?x \\<in> A \\<Longrightarrow> opp_fold_A ` ?x \\<in> A\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (opp_fold_A \\<Turnstile> (F # Fs @ [C])))", "by    auto"], ["proof (state)\nthis:\n  order.greater_eq A (set (opp_fold_A \\<Turnstile> (F # Fs @ [C])))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile>\n      (F #\n       (ARG_MIN length Fs.\n           SimplicialComplex.maxsimpchain A (F # Fs @ [C])) @\n       [C]))", "ultimately"], ["proof (chain)\npicking this:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n  order.greater_eq A (set (opp_fold_A \\<Turnstile> (F # Fs @ [C])))", "have \"ChamberComplex.min_gallery A (opp_fold_A \\<Turnstile> (F#Fs@[C]))\""], ["proof (prove)\nusing this:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n  order.greater_eq A (set (opp_fold_A \\<Turnstile> (F # Fs @ [C])))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "using apartments(1) min_gallery_in_apartment"], ["proof (prove)\nusing this:\n  min_gallery (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n  order.greater_eq A (set (opp_fold_A \\<Turnstile> (F # Fs @ [C])))\n  A \\<in> \\<A>\n  \\<lbrakk>?Y \\<in> \\<A>; min_gallery ?Cs;\n   order.greater_eq ?Y (set ?Cs)\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain ?Y ?Cs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "by fast"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A\n   (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile>\n      (F #\n       (ARG_MIN length Fs.\n           SimplicialComplex.maxsimpchain A (F # Fs @ [C])) @\n       [C]))", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A\n   (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "show  \"ChamberComplex.pgallery A (opp_fold_A \\<Turnstile> (F#Fs@[C]))\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A\n   (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "using apartment_min_gallery_pgallery"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A\n   (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain ?X ?xs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (opp_fold_A \\<Turnstile> (F # Fs @ [C]))", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A (opp_fold_A \\<Turnstile> (F # Fs @ [C]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fixespointwise opp_fold_A C\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "hence \"opp_fold_A ` C = C\""], ["proof (prove)\nusing this:\n  fixespointwise opp_fold_A C\n\ngoal (1 subgoal):\n 1. opp_fold_A ` C = C", "using fixespointwise_im"], ["proof (prove)\nusing this:\n  fixespointwise opp_fold_A C\n  \\<lbrakk>fixespointwise ?f ?A; order.greater_eq ?A ?B\\<rbrakk>\n  \\<Longrightarrow> ?f ` ?B = ?B\n\ngoal (1 subgoal):\n 1. opp_fold_A ` C = C", "by fast"], ["proof (state)\nthis:\n  opp_fold_A ` C = C\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n    False", "with chambers_ne(1)"], ["proof (chain)\npicking this:\n  D \\<noteq> C\n  opp_fold_A ` C = C", "show False"], ["proof (prove)\nusing this:\n  D \\<noteq> C\n  opp_fold_A ` C = C\n\ngoal (1 subgoal):\n 1. False", "using opp_fold_A_chamber_images(2)"], ["proof (prove)\nusing this:\n  D \\<noteq> C\n  opp_fold_A ` C = C\n  opp_fold_A ` C = D\n\ngoal (1 subgoal):\n 1. False", "by fast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas clsrch1_nin_rfold_im_chsys =\n  closer_to_chamber1_not_in_rfold_im_chamber_system"], ["", "lemmas closer_to_chamber2_not_in_fold_im_chamber_system =\n  ChamberComplexApartmentSystemTriangle.clsrch1_nin_rfold_im_chsys[\n    OF reflect\n  ]"], ["", "lemma fold_A_opp_fold_A_chamber_systems:\n  \"ChamberComplex.\\<C> A =\n    (ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<union> (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A))\"\n  \"(ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<inter> (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)) =\n    {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_system A =\n    ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) &&&\n    ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "proof (rule seteqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 3. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "fix F"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 3. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "assume F: \"F \\<in> ChamberComplex.\\<C> A\""], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system A\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 3. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  F \\<in> ChamberComplex.chamber_system A", "have F': \"ChamberComplex.chamber A F\" \"F\\<in>A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F &&& F \\<in> A", "using apartment_chamber_system_def apartment_chamber_system_simplices\n          apartment_chamber"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> ChamberComplex.chamber_system A\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  order.greater_eq ?X (ChamberComplex.chamber_system ?X)\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F &&& F \\<in> A", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A F\n  F \\<in> A\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 3. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "from F'(1) apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.maxsimp A F\n  A \\<in> \\<A>", "have F'': \"chamber F\""], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A F\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. chamber F", "using apartment_chamber"], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A F\n  A \\<in> \\<A>\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. chamber F", "by auto"], ["proof (state)\nthis:\n  chamber F\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 3. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "show \"F \\<in> (ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<union>\n          (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "proof (cases \"chamber_distance C F \\<le> chamber_distance D F\")"], ["proof (state)\ngoal (2 subgoals):\n 1. order.greater_eq (chamber_distance D F)\n     (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<not> order.greater_eq (chamber_distance D F)\n            (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "case True"], ["proof (state)\nthis:\n  order.greater_eq (chamber_distance D F) (chamber_distance C F)\n\ngoal (2 subgoals):\n 1. order.greater_eq (chamber_distance D F)\n     (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n 2. \\<not> order.greater_eq (chamber_distance D F)\n            (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D F) (chamber_distance C F)\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "using apartments(1) chambers(1,2) in_apartments(1,2) facet(1,2)\n            chambers_ne(1) F F'(2) F'' fold_A_chamber_system_image\n            apartment_face_distance_eq_chamber_distance_compare_other_chamber\n            ChamberComplexMorphism.image_chamber_system[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D F) (chamber_distance C F)\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  z \\<lhd> C\n  z \\<lhd> D\n  D \\<noteq> C\n  F \\<in> ChamberComplex.chamber_system A\n  F \\<in> A\n  chamber F\n  fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance C F}\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; chamber ?E; ?C \\<in> ?A;\n   ?D \\<in> ?A; ?E \\<in> ?A; ?z \\<lhd> ?C; ?z \\<lhd> ?D; ?C \\<noteq> ?D;\n   order.greater_eq (chamber_distance ?D ?E)\n    (chamber_distance ?C ?E)\\<rbrakk>\n  \\<Longrightarrow> face_distance ?z ?E = chamber_distance ?C ?E\n  ChamberComplex.chamber_system (fold_A \\<turnstile> A) =\n  fold_A \\<turnstile> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "by    simp"], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n          ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. \\<not> order.greater_eq (chamber_distance D F)\n            (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> order.greater_eq (chamber_distance D F)\n            (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "case False"], ["proof (state)\nthis:\n  \\<not> order.greater_eq (chamber_distance D F) (chamber_distance C F)\n\ngoal (1 subgoal):\n 1. \\<not> order.greater_eq (chamber_distance D F)\n            (chamber_distance C F) \\<Longrightarrow>\n    F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> order.greater_eq (chamber_distance D F) (chamber_distance C F)\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "using apartments(1) chambers(1,2) in_apartments(1,2) facet(1,2)\n            chambers_ne(1) F F'(2) F'' opp_fold_A_chamber_system_image\n            apartment_face_distance_eq_chamber_distance_compare_other_chamber\n            ChamberComplexMorphism.image_chamber_system[OF opp_fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  \\<not> order.greater_eq (chamber_distance D F) (chamber_distance C F)\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<in> A \\<inter> B\n  D \\<in> A \\<inter> B'\n  z \\<lhd> C\n  z \\<lhd> D\n  D \\<noteq> C\n  F \\<in> ChamberComplex.chamber_system A\n  F \\<in> A\n  chamber F\n  opp_fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance D F}\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; chamber ?E; ?C \\<in> ?A;\n   ?D \\<in> ?A; ?E \\<in> ?A; ?z \\<lhd> ?C; ?z \\<lhd> ?D; ?C \\<noteq> ?D;\n   order.greater_eq (chamber_distance ?D ?E)\n    (chamber_distance ?C ?E)\\<rbrakk>\n  \\<Longrightarrow> face_distance ?z ?E = chamber_distance ?C ?E\n  ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n  opp_fold_A \\<turnstile> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n            ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "by    simp"], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n          ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n          ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 2. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 2. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "fix F"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 2. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "assume F: \"F \\<in> (ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<union>\n              (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A))\""], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n          ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> ChamberComplex.chamber_system\n                (fold_A \\<turnstile> A) \\<union>\n               ChamberComplex.chamber_system\n                (opp_fold_A \\<turnstile> A) \\<Longrightarrow>\n       x \\<in> ChamberComplex.chamber_system A\n 2. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "thus \"F \\<in> ChamberComplex.\\<C> A\""], ["proof (prove)\nusing this:\n  F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n          ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system A", "using ChamberComplexMorphism.image_chamber_system_image[\n            OF fold_A_morph_A_A\n          ]\n          ChamberComplexMorphism.image_chamber_system_image[\n            OF opp_fold_A_morph_A_A\n          ]"], ["proof (prove)\nusing this:\n  F \\<in> ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n          ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n  ChamberComplex.chamber_system (fold_A \\<turnstile> A) =\n  ChamberComplex.chamber_system A \\<inter> (fold_A \\<turnstile> A)\n  ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n  ChamberComplex.chamber_system A \\<inter> (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. F \\<in> ChamberComplex.chamber_system A", "by    fast"], ["proof (state)\nthis:\n  F \\<in> ChamberComplex.chamber_system A\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "show \"(ChamberComplex.\\<C> (fold_A \\<turnstile> A)) \\<inter>\n          (ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "using closer_to_chamber1_not_in_rfold_im_chamber_system\n          closer_to_chamber2_not_in_fold_im_chamber_system"], ["proof (prove)\nusing this:\n  order.greater_eq (chamber_distance D ?F)\n   (chamber_distance C ?F) \\<Longrightarrow>\n  ?F \\<notin> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n  order.greater_eq (chamber_distance C ?F)\n   (chamber_distance D ?F) \\<Longrightarrow>\n  ?F \\<notin> ChamberComplex.chamber_system (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n    ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n    {}", "by    force"], ["proof (state)\nthis:\n  ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n  ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fold_A_im_min_gallery':\n  assumes \"ChamberComplex.min_gallery (fold_A \\<turnstile> A) (C#Cs)\"\n  shows   \"ChamberComplex.min_gallery A (C#Cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Cs)", "proof (cases Cs rule: rev_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> SimplicialComplex.min_maxsimpchain A (C # Cs)\n 2. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "case Nil"], ["proof (state)\nthis:\n  Cs = []\n\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow> SimplicialComplex.min_maxsimpchain A (C # Cs)\n 2. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  Cs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Cs = []\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Cs)", "using A_chambers(1) ChamberComplex.min_gallery_simps(2)[OF complexes]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Cs = []\n  SimplicialComplex.maxsimp A C\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  SimplicialComplex.min_maxsimpchain ?X [?x] =\n  SimplicialComplex.maxsimp ?X ?x\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Cs)", "by    simp"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (C # Cs)\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "case (snoc Fs F)"], ["proof (state)\nthis:\n  Cs = Fs @ [F]\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "from assms snoc apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>", "have  ch: \"\\<forall>H\\<in>set (C#Fs@[F]). ChamberComplex.chamber A H\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H", "using ChamberComplex.min_galleryD_gallery\n          ChamberComplex.galleryD_chamber\n          chambercomplex_fold_A_im\n          ChamberComplex.subcomplex_chamber[OF complexes]\n          chambersubcomplex_fold_A_im"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n  \\<lbrakk>ChamberComplex ?X;\n   SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  ChamberComplex (fold_A \\<turnstile> A)\n  \\<lbrakk>?X \\<in> \\<A>; ChamberComplex.ChamberSubcomplex ?X ?Y;\n   SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?C\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H", "by    fastforce"], ["proof (state)\nthis:\n  \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H", "have ch_F: \"chamber F\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H\n\ngoal (1 subgoal):\n 1. chamber F", "using apartment_chamber"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. chamber F", "by simp"], ["proof (state)\nthis:\n  chamber F\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "have \"ChamberComplex.min_gallery A (C#Fs@[F])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Fs @ [F])", "proof (rule ChamberComplex.min_galleryI_betw_compare, rule complexes, rule apartments(1))"], ["proof (state)\ngoal (4 subgoals):\n 1. C \\<noteq> F\n 2. SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n 3. SimplicialComplex.min_maxsimpchain A (C # ?ys @ [F])\n 4. length Fs = length ?ys", "define Gs where \"Gs = (ARG_MIN length Gs. ChamberComplex.gallery A (C#Gs@[F]))\""], ["proof (state)\nthis:\n  Gs = (ARG_MIN length Gs. SimplicialComplex.maxsimpchain A (C # Gs @ [F]))\n\ngoal (4 subgoals):\n 1. C \\<noteq> F\n 2. SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n 3. SimplicialComplex.min_maxsimpchain A (C # ?ys @ [F])\n 4. length Fs = length ?ys", "from assms snoc"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]", "show \"C\\<noteq>F\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n\ngoal (1 subgoal):\n 1. C \\<noteq> F", "using ChamberComplex.min_gallery_pgallery\n            ChamberComplex.pgalleryD_distinct\n            chambercomplex_fold_A_im"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  \\<lbrakk>ChamberComplex ?X;\n   SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain ?X ?xs\n  \\<lbrakk>ChamberComplex ?X;\n   SimplicialComplex.pmaxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> distinct ?xs\n  ChamberComplex (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. C \\<noteq> F", "by    fastforce"], ["proof (state)\nthis:\n  C \\<noteq> F\n\ngoal (3 subgoals):\n 1. SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n 2. SimplicialComplex.min_maxsimpchain A (C # ?ys @ [F])\n 3. length Fs = length ?ys", "with chambers(1) apartments(1) assms snoc Gs_def"], ["proof (chain)\npicking this:\n  chamber C\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  Gs = (ARG_MIN length Gs. SimplicialComplex.maxsimpchain A (C # Gs @ [F]))\n  C \\<noteq> F", "show 3: \"ChamberComplex.min_gallery A (C#Gs@[F])\""], ["proof (prove)\nusing this:\n  chamber C\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  Gs = (ARG_MIN length Gs. SimplicialComplex.maxsimpchain A (C # Gs @ [F]))\n  C \\<noteq> F\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Gs @ [F])", "using ch apartment_min_gallery_least_length"], ["proof (prove)\nusing this:\n  chamber C\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  Gs = (ARG_MIN length Gs. SimplicialComplex.maxsimpchain A (C # Gs @ [F]))\n  C \\<noteq> F\n  \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?C;\n   SimplicialComplex.maxsimp ?X ?D; ?C \\<noteq> ?D\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain ?X\n                     (?C #\n                      (ARG_MIN length Cs.\n                          SimplicialComplex.maxsimpchain ?X\n                           (?C # Cs @ [?D])) @\n                      [?D])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Gs @ [F])", "by    simp"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (C # Gs @ [F])\n\ngoal (2 subgoals):\n 1. SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n 2. length Fs =\n    length\n     (ARG_MIN length Gs. SimplicialComplex.maxsimpchain A (C # Gs @ [F]))", "from assms snoc apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>", "show  \"ChamberComplex.gallery A (C#Fs@[F])\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (C # Fs @ [F])", "using ch ChamberComplex.min_galleryD_gallery\n            ChamberComplex.galleryD_adj\n            chambercomplex_fold_A_im\n            ChamberComplex.gallery_def[OF complexes]"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n  \\<forall>H\\<in>set (C # Fs @ [F]). SimplicialComplex.maxsimp A H\n  \\<lbrakk>ChamberComplex ?X;\n   SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> adjacentchain ?xs\n  ChamberComplex (fold_A \\<turnstile> A)\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  SimplicialComplex.maxsimpchain ?X ?xs \\<equiv>\n  (\\<forall>x\\<in>set ?xs. SimplicialComplex.maxsimp ?X x) \\<and>\n  adjacentchain ?xs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain A (C # Fs @ [F])", "by    fastforce"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimpchain A (C # Fs @ [F])\n\ngoal (1 subgoal):\n 1. length Fs =\n    length\n     (ARG_MIN length Gs. SimplicialComplex.maxsimpchain A (C # Gs @ [F]))", "show \"length Fs = length Gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Fs = length Gs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. length Fs = length Gs", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "have set_gal: \"set (C#Gs@[F]) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (C # Gs @ [F]))", "using 3 apartment_min_galleryD_gallery apartment_galleryD_chamber\n              apartment_chamberD_simplex"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A (C # Gs @ [F])\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (C # Gs @ [F]))", "by    fast"], ["proof (state)\nthis:\n  order.greater_eq A (set (C # Gs @ [F]))\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "from assms snoc"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]", "have F_in: \"F \\<in> fold_A \\<turnstile> A\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A", "using ChamberComplex.min_galleryD_gallery\n              ChamberComplex.galleryD_chamber\n              ChamberComplex.chamberD_simplex chambercomplex_fold_A_im"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  \\<lbrakk>ChamberComplex ?X;\n   SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  ChamberComplex (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A", "by    fastforce"], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> A", "have \"min_gallery (C # fold_A \\<Turnstile> Gs @ [F])\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. min_gallery (C # fold_A \\<Turnstile> Gs @ [F])", "using ch_F 3 apartment_min_gallery fold_A_min_gallery_from1_map"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> A\n  chamber F\n  SimplicialComplex.min_maxsimpchain A (C # Gs @ [F])\n  \\<lbrakk>?A \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?A ?Cs\\<rbrakk>\n  \\<Longrightarrow> min_gallery ?Cs\n  \\<lbrakk>chamber ?F; ?F \\<in> fold_A \\<turnstile> A;\n   min_gallery (C # ?Fs @ [?F])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (C # fold_A \\<Turnstile> ?Fs @ [?F])\n\ngoal (1 subgoal):\n 1. min_gallery (C # fold_A \\<Turnstile> Gs @ [F])", "by fast"], ["proof (state)\nthis:\n  min_gallery (C # fold_A \\<Turnstile> Gs @ [F])\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "moreover"], ["proof (state)\nthis:\n  min_gallery (C # fold_A \\<Turnstile> Gs @ [F])\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "have \"set (fold_A \\<Turnstile> (C#Gs@[F])) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order.greater_eq A (set (fold_A \\<Turnstile> (C # Gs @ [F])))", "using set_gal\n              ChamberComplexMorphism.simplex_map[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  order.greater_eq A (set (C # Gs @ [F]))\n  ?x \\<in> A \\<Longrightarrow> fold_A ` ?x \\<in> A\n\ngoal (1 subgoal):\n 1. order.greater_eq A (set (fold_A \\<Turnstile> (C # Gs @ [F])))", "by    auto"], ["proof (state)\nthis:\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Gs @ [F])))\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "ultimately"], ["proof (chain)\npicking this:\n  min_gallery (C # fold_A \\<Turnstile> Gs @ [F])\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Gs @ [F])))", "have \"ChamberComplex.min_gallery A (C # fold_A \\<Turnstile> Gs @ [F])\""], ["proof (prove)\nusing this:\n  min_gallery (C # fold_A \\<Turnstile> Gs @ [F])\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Gs @ [F])))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])", "using apartments(1) F_in min_gallery_in_apartment\n              fold_A_chamber_images(1) fold_A_chamber_system_image_fixespointwise\n              simplex_in_fold_A_im_image"], ["proof (prove)\nusing this:\n  min_gallery (C # fold_A \\<Turnstile> Gs @ [F])\n  order.greater_eq A (set (fold_A \\<Turnstile> (C # Gs @ [F])))\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> A\n  \\<lbrakk>?Y \\<in> \\<A>; min_gallery ?Cs;\n   order.greater_eq ?Y (set ?Cs)\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain ?Y ?Cs\n  fold_A ` C = C\n  ?F \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n  fixespointwise fold_A (fold_A ` ?F)\n  ?x \\<in> fold_A \\<turnstile> A \\<Longrightarrow> fold_A ` ?x = ?x\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])", "by    simp"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "moreover"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "have \"set (fold_A \\<Turnstile> (C#Gs@[F])) \\<subseteq> fold_A \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order.greater_eq (fold_A \\<turnstile> A)\n     (set (fold_A \\<Turnstile> (C # Gs @ [F])))", "using set_gal"], ["proof (prove)\nusing this:\n  order.greater_eq A (set (C # Gs @ [F]))\n\ngoal (1 subgoal):\n 1. order.greater_eq (fold_A \\<turnstile> A)\n     (set (fold_A \\<Turnstile> (C # Gs @ [F])))", "by auto"], ["proof (state)\nthis:\n  order.greater_eq (fold_A \\<turnstile> A)\n   (set (fold_A \\<Turnstile> (C # Gs @ [F])))\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "ultimately"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])\n  order.greater_eq (fold_A \\<turnstile> A)\n   (set (fold_A \\<Turnstile> (C # Gs @ [F])))", "show ?thesis"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])\n  order.greater_eq (fold_A \\<turnstile> A)\n   (set (fold_A \\<Turnstile> (C # Gs @ [F])))\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "using assms snoc apartments(1) F_in fold_A_chamber_images(1)\n              simplex_in_fold_A_im_image\n              ChamberComplex.min_gallery_in_subcomplex[\n                OF complexes, OF _ chambersubcomplex_fold_A_im\n              ]\n              ChamberComplex.min_gallery_betw_uniform_length[ \n                OF chambercomplex_fold_A_im, of C \"fold_A \\<Turnstile> Gs\" F Fs\n              ]"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain A (C # fold_A \\<Turnstile> Gs @ [F])\n  order.greater_eq (fold_A \\<turnstile> A)\n   (set (fold_A \\<Turnstile> (C # Gs @ [F])))\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n  F \\<in> fold_A \\<turnstile> A\n  fold_A ` C = C\n  ?x \\<in> fold_A \\<turnstile> A \\<Longrightarrow> fold_A ` ?x = ?x\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.min_maxsimpchain A ?Cs;\n   order.greater_eq (fold_A \\<turnstile> A) (set ?Cs)\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.min_maxsimpchain\n                     (fold_A \\<turnstile> A) ?Cs\n  \\<lbrakk>SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n            (C # fold_A \\<Turnstile> Gs @ [F]);\n   SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n    (C # Fs @ [F])\\<rbrakk>\n  \\<Longrightarrow> length (fold_A \\<Turnstile> Gs) = length Fs\n\ngoal (1 subgoal):\n 1. length Fs = length Gs", "by    simp"], ["proof (state)\nthis:\n  length Fs = length Gs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length Fs = length Gs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (C # Fs @ [F])\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.min_maxsimpchain A (C # Cs)", "with snoc"], ["proof (chain)\npicking this:\n  Cs = Fs @ [F]\n  SimplicialComplex.min_maxsimpchain A (C # Fs @ [F])", "show ?thesis"], ["proof (prove)\nusing this:\n  Cs = Fs @ [F]\n  SimplicialComplex.min_maxsimpchain A (C # Fs @ [F])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A (C # Cs)", "by fast"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A (C # Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fold_A_im_min_gallery:\n  \"ChamberComplex.min_gallery (fold_A \\<turnstile> A) (C#Cs) \\<Longrightarrow> min_gallery (C#Cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n     (C # Cs) \\<Longrightarrow>\n    min_gallery (C # Cs)", "using apartments(1) fold_A_im_min_gallery' apartment_min_gallery"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   (C # ?Cs) \\<Longrightarrow>\n  SimplicialComplex.min_maxsimpchain A (C # ?Cs)\n  \\<lbrakk>?A \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?A ?Cs\\<rbrakk>\n  \\<Longrightarrow> min_gallery ?Cs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n     (C # Cs) \\<Longrightarrow>\n    min_gallery (C # Cs)", "by fast"], ["", "lemma fold_A_comp_fixespointwise:\n  \"fixespointwise (fold_A \\<circ> opp_fold_A) (\\<Union> (fold_A \\<turnstile> A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A)\n     (\\<Union> (fold_A \\<turnstile> A))", "proof (rule apartment_standard_uniqueness, rule apartments(1))"], ["proof (state)\ngoal (6 subgoals):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A\n     (fold_A \\<circ> opp_fold_A)\n 2. ChamberComplexMorphism (fold_A \\<turnstile> A) A id\n 3. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\n 4. fixespointwise (fold_A \\<circ> opp_fold_A) ?C\n 5. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (?C # Cs))\n 6. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # Cs))", "have \"fun_eq_on (fold_A \\<circ> opp_fold_A) (res_fold_A \\<circ> res_opp_fold_A) (\\<Union>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun_eq_on (fold_A \\<circ> opp_fold_A)\n     (restrict1 fold_A (\\<Union> A) \\<circ>\n      restrict1 opp_fold_A (\\<Union> A))\n     (\\<Union> A)", "using ChamberComplexEndomorphism.vertex_map[OF opp_res_fold_A_endo_A]\n          fun_eq_onI[of \"\\<Union>A\" \"fold_A \\<circ> opp_fold_A\"]"], ["proof (prove)\nusing this:\n  ?x \\<in> \\<Union> A \\<Longrightarrow>\n  restrict1 opp_fold_A (\\<Union> A) ?x \\<in> \\<Union> A\n  (\\<And>a.\n      a \\<in> \\<Union> A \\<Longrightarrow>\n      (fold_A \\<circ> opp_fold_A) a = ?g a) \\<Longrightarrow>\n  fun_eq_on (fold_A \\<circ> opp_fold_A) ?g (\\<Union> A)\n\ngoal (1 subgoal):\n 1. fun_eq_on (fold_A \\<circ> opp_fold_A)\n     (restrict1 fold_A (\\<Union> A) \\<circ>\n      restrict1 opp_fold_A (\\<Union> A))\n     (\\<Union> A)", "by    auto"], ["proof (state)\nthis:\n  fun_eq_on (fold_A \\<circ> opp_fold_A)\n   (restrict1 fold_A (\\<Union> A) \\<circ> restrict1 opp_fold_A (\\<Union> A))\n   (\\<Union> A)\n\ngoal (6 subgoals):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A\n     (fold_A \\<circ> opp_fold_A)\n 2. ChamberComplexMorphism (fold_A \\<turnstile> A) A id\n 3. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\n 4. fixespointwise (fold_A \\<circ> opp_fold_A) ?C\n 5. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (?C # Cs))\n 6. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # Cs))", "thus \"ChamberComplexMorphism (fold_A \\<turnstile> A) A (fold_A \\<circ> opp_fold_A)\""], ["proof (prove)\nusing this:\n  fun_eq_on (fold_A \\<circ> opp_fold_A)\n   (restrict1 fold_A (\\<Union> A) \\<circ> restrict1 opp_fold_A (\\<Union> A))\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A\n     (fold_A \\<circ> opp_fold_A)", "using ChamberComplexEndomorphism.endo_comp[\n            OF opp_res_fold_A_endo_A res_fold_A_endo_A\n          ]\n          ChamberComplexEndomorphism.axioms(1)\n          ChamberComplexMorphism.cong\n          ChamberComplexMorphism.restrict_domain\n          chambersubcomplex_fold_A_im"], ["proof (prove)\nusing this:\n  fun_eq_on (fold_A \\<circ> opp_fold_A)\n   (restrict1 fold_A (\\<Union> A) \\<circ> restrict1 opp_fold_A (\\<Union> A))\n   (\\<Union> A)\n  ChamberComplexEndomorphism A\n   (restrict1 fold_A (\\<Union> A) \\<circ> restrict1 opp_fold_A (\\<Union> A))\n  ChamberComplexEndomorphism ?X ?f \\<Longrightarrow>\n  ChamberComplexMorphism ?X ?X ?f\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   fun_eq_on ?g ?f (\\<Union> ?X)\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?X ?Y ?g\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   ChamberComplex.ChamberSubcomplex ?X ?W\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?W ?Y ?f\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A\n     (fold_A \\<circ> opp_fold_A)", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism (fold_A \\<turnstile> A) A\n   (fold_A \\<circ> opp_fold_A)\n\ngoal (5 subgoals):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A id\n 2. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\n 3. fixespointwise (fold_A \\<circ> opp_fold_A) ?C\n 4. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (?C # Cs))\n 5. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # Cs))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"ChamberComplexMorphism (fold_A \\<turnstile> A) A id\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A id", "using ChamberComplexMorphism.restrict_domain apartment_trivial_morphism\n          chambersubcomplex_fold_A_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   ChamberComplex.ChamberSubcomplex ?X ?W\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?W ?Y ?f\n  ?X \\<in> \\<A> \\<Longrightarrow> ChamberComplexMorphism ?X ?X id\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A) A id", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism (fold_A \\<turnstile> A) A id\n\ngoal (4 subgoals):\n 1. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\n 2. fixespointwise (fold_A \\<circ> opp_fold_A) ?C\n 3. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (?C # Cs))\n 4. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (?C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (?C # Cs))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"ChamberComplex.chamber (fold_A \\<turnstile> A) C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) C", "using A_chambers(1) apartment_chamberD_simplex fold_A_chamber_images(1)\n          ChamberComplex.chamber_in_subcomplex[\n            OF complexes, OF _ chambersubcomplex_fold_A_im, of C\n          ]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A C\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  fold_A ` C = C\n  \\<lbrakk>A \\<in> \\<A>; C \\<in> fold_A \\<turnstile> A;\n   SimplicialComplex.maxsimp A C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp (fold_A \\<turnstile> A) C\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) C", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp (fold_A \\<turnstile> A) C\n\ngoal (3 subgoals):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) C\n 2. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n 3. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Cs))", "show \"fixespointwise (fold_A \\<circ> opp_fold_A) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) C", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) C", "from facet(1)"], ["proof (chain)\npicking this:\n  z \\<lhd> C", "obtain v where v: \"v\\<notin>z\" \"C = insert v z\""], ["proof (prove)\nusing this:\n  z \\<lhd> C\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<notin> z; C = insert v z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using facetrel_def[of z C]"], ["proof (prove)\nusing this:\n  z \\<lhd> C\n  z \\<lhd> C \\<equiv> \\<exists>v. v \\<notin> z \\<and> C = insert v z\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<notin> z; C = insert v z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  v \\<notin> z\n  C = insert v z\n\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) C", "have \"fixespointwise (fold_A \\<circ> opp_fold_A) (insert v z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) (insert v z)", "proof (rule fixespointwise_insert, rule fixespointwise_comp)"], ["proof (state)\ngoal (3 subgoals):\n 1. fixespointwise opp_fold_A z\n 2. fixespointwise fold_A z\n 3. (fold_A \\<circ> opp_fold_A) ` insert v z = insert v z", "show \"fixespointwise opp_fold_A z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise opp_fold_A z", "using facet_in_chambers(2) fixespointwise_subset[of opp_fold_A D z]\n              opp_fold_A_fixespointwise2"], ["proof (prove)\nusing this:\n  order.greater_eq D z\n  \\<lbrakk>fixespointwise opp_fold_A D; order.greater_eq D z\\<rbrakk>\n  \\<Longrightarrow> fixespointwise opp_fold_A z\n  fixespointwise opp_fold_A D\n\ngoal (1 subgoal):\n 1. fixespointwise opp_fold_A z", "by    fast"], ["proof (state)\nthis:\n  fixespointwise opp_fold_A z\n\ngoal (2 subgoals):\n 1. fixespointwise fold_A z\n 2. (fold_A \\<circ> opp_fold_A) ` insert v z = insert v z", "show \"fixespointwise fold_A z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fixespointwise fold_A z", "using facet_in_chambers(1) fixespointwise_subset[of fold_A C z]\n              fold_A_fixespointwise1"], ["proof (prove)\nusing this:\n  order.greater_eq C z\n  \\<lbrakk>fixespointwise fold_A C; order.greater_eq C z\\<rbrakk>\n  \\<Longrightarrow> fixespointwise fold_A z\n  fixespointwise fold_A C\n\ngoal (1 subgoal):\n 1. fixespointwise fold_A z", "by    fast"], ["proof (state)\nthis:\n  fixespointwise fold_A z\n\ngoal (1 subgoal):\n 1. (fold_A \\<circ> opp_fold_A) ` insert v z = insert v z", "have \"(fold_A \\<circ> opp_fold_A) ` C = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fold_A \\<circ> opp_fold_A) ` C = C", "using fold_A_chamber_images(2) opp_fold_A_chamber_images(2)"], ["proof (prove)\nusing this:\n  fold_A ` D = C\n  opp_fold_A ` C = D\n\ngoal (1 subgoal):\n 1. (fold_A \\<circ> opp_fold_A) ` C = C", "by    (simp add: image_comp[THEN sym])"], ["proof (state)\nthis:\n  (fold_A \\<circ> opp_fold_A) ` C = C\n\ngoal (1 subgoal):\n 1. (fold_A \\<circ> opp_fold_A) ` insert v z = insert v z", "with v(2)"], ["proof (chain)\npicking this:\n  C = insert v z\n  (fold_A \\<circ> opp_fold_A) ` C = C", "show \"(fold_A \\<circ> opp_fold_A) ` (insert v z) = insert v z\""], ["proof (prove)\nusing this:\n  C = insert v z\n  (fold_A \\<circ> opp_fold_A) ` C = C\n\ngoal (1 subgoal):\n 1. (fold_A \\<circ> opp_fold_A) ` insert v z = insert v z", "by simp"], ["proof (state)\nthis:\n  (fold_A \\<circ> opp_fold_A) ` insert v z = insert v z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fixespointwise (fold_A \\<circ> opp_fold_A) (insert v z)\n\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) C", "with v(2)"], ["proof (chain)\npicking this:\n  C = insert v z\n  fixespointwise (fold_A \\<circ> opp_fold_A) (insert v z)", "show ?thesis"], ["proof (prove)\nusing this:\n  C = insert v z\n  fixespointwise (fold_A \\<circ> opp_fold_A) (insert v z)\n\ngoal (1 subgoal):\n 1. fixespointwise (fold_A \\<circ> opp_fold_A) C", "by fast"], ["proof (state)\nthis:\n  fixespointwise (fold_A \\<circ> opp_fold_A) C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fixespointwise (fold_A \\<circ> opp_fold_A) C\n\ngoal (2 subgoals):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n 2. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Cs))", "show \"\\<And>Cs. ChamberComplex.min_gallery (fold_A \\<turnstile> A) (C # Cs) \\<Longrightarrow>\n          ChamberComplex.pgallery A ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "fix Cs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "assume Cs: \"ChamberComplex.min_gallery (fold_A \\<turnstile> A) (C # Cs)\""], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "show \"ChamberComplex.pgallery A ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "proof (cases Cs rule: rev_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow>\n    SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n 2. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "case Nil"], ["proof (state)\nthis:\n  Cs = []\n\ngoal (2 subgoals):\n 1. Cs = [] \\<Longrightarrow>\n    SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n 2. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  Cs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Cs = []\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "using fold_A_chamber_images(2) opp_fold_A_chamber_images(2)\n              A_chambers(1) ChamberComplex.pgallery_def[OF complexes]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  Cs = []\n  fold_A ` D = C\n  opp_fold_A ` C = D\n  SimplicialComplex.maxsimp A C\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  SimplicialComplex.pmaxsimpchain ?X ?xs \\<equiv>\n  (\\<forall>x\\<in>set ?xs. SimplicialComplex.maxsimp ?X x) \\<and>\n  padjacentchain ?xs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "by    (auto simp add: image_comp[THEN sym])"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A\n   ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "case (snoc Fs F)"], ["proof (state)\nthis:\n  Cs = Fs @ [F]\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "from Cs snoc apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>", "have  F: \"F \\<in> fold_A \\<turnstile> A\" \"ChamberComplex.chamber A F\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A &&& SimplicialComplex.maxsimp A F", "using ChamberComplex.min_galleryD_gallery[\n                OF chambercomplex_fold_A_im\n              ]\n              ChamberComplex.galleryD_chamber[\n                OF chambercomplex_fold_A_im, of \"C#Fs@[F]\"\n              ]\n              ChamberComplex.chamberD_simplex[OF chambercomplex_fold_A_im]\n              ChamberComplex.subcomplex_chamber[\n                OF complexes, OF _ chambersubcomplex_fold_A_im\n              ]"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   ?xs \\<Longrightarrow>\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) ?xs\n  \\<lbrakk>SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A)\n            (C # Fs @ [F]);\n   ?x \\<in> set (C # Fs @ [F])\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?x\n  SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?x \\<Longrightarrow>\n  ?x \\<in> fold_A \\<turnstile> A\n  \\<lbrakk>A \\<in> \\<A>;\n   SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp A ?C\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A &&& SimplicialComplex.maxsimp A F", "by    auto"], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> A\n  SimplicialComplex.maxsimp A F\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "from F(2) apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.maxsimp A F\n  A \\<in> \\<A>", "have F': \"chamber F\""], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A F\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. chamber F", "using apartment_chamber"], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A F\n  A \\<in> \\<A>\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. chamber F", "by fast"], ["proof (state)\nthis:\n  chamber F\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "with F(1) apartments(1)"], ["proof (chain)\npicking this:\n  F \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  chamber F", "have  zF_CF: \"face_distance z F = chamber_distance C F\""], ["proof (prove)\nusing this:\n  F \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  chamber F\n\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "using chamber_in_fold_A_im[of F] fold_A_chamber_system_image"], ["proof (prove)\nusing this:\n  F \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  chamber F\n  \\<lbrakk>chamber F; F \\<in> fold_A \\<turnstile> A\\<rbrakk>\n  \\<Longrightarrow> F \\<in> fold_A \\<turnstile>\n                            ChamberComplex.chamber_system A\n  fold_A \\<turnstile> ChamberComplex.chamber_system A =\n  {F \\<in> ChamberComplex.chamber_system A.\n   face_distance z F = chamber_distance C F}\n\ngoal (1 subgoal):\n 1. face_distance z F = chamber_distance C F", "by    auto"], ["proof (state)\nthis:\n  face_distance z F = chamber_distance C F\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "have \"min_gallery (C # fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_gallery\n     (C #\n      fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F]))", "proof (rule fold_A_min_gallery_from2_map)"], ["proof (state)\ngoal (3 subgoals):\n 1. chamber (opp_fold_A ` F)\n 2. opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A\n 3. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "from Cs snoc"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]", "have  Cs': \"ChamberComplex.gallery (fold_A \\<turnstile> A) (C#Fs@[F])\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])", "using ChamberComplex.min_galleryD_gallery chambercomplex_fold_A_im"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  \\<lbrakk>ChamberComplex ?X;\n   SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimpchain ?X ?xs\n  ChamberComplex (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])", "by    fastforce"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])\n\ngoal (3 subgoals):\n 1. chamber (opp_fold_A ` F)\n 2. opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A\n 3. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])", "have chF: \"ChamberComplex.chamber A F\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F", "using ChamberComplex.galleryD_chamber chambercomplex_fold_A_im\n                ChamberComplex.subcomplex_chamber[OF complexes]\n                chambersubcomplex_fold_A_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  ChamberComplex (fold_A \\<turnstile> A)\n  \\<lbrakk>?X \\<in> \\<A>; ChamberComplex.ChamberSubcomplex ?X ?Y;\n   SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?C\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A F", "by    fastforce"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A F\n\ngoal (3 subgoals):\n 1. chamber (opp_fold_A ` F)\n 2. opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A\n 3. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A F", "show  \"chamber (opp_fold_A ` F)\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A F\n\ngoal (1 subgoal):\n 1. chamber (opp_fold_A ` F)", "using ChamberComplexMorphism.chamber_map opp_fold_A_morph_A_A\n                apartment_chamber"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   SimplicialComplex.maxsimp ?X ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y (?f ` ?C)\n  ChamberComplexMorphism A A opp_fold_A\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. chamber (opp_fold_A ` F)", "by    fast"], ["proof (state)\nthis:\n  chamber (opp_fold_A ` F)\n\ngoal (2 subgoals):\n 1. opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A\n 2. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A", "using chF ChamberComplex.chamberD_simplex complexes"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A F\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  ?Y \\<in> \\<A> \\<Longrightarrow> ChamberComplex ?Y\n\ngoal (1 subgoal):\n 1. opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A", "by fast"], ["proof (state)\nthis:\n  opp_fold_A ` F \\<in> opp_fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "from Cs snoc apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>", "show  \"min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "using chF Cs' opp_fold_A_min_gallery_from1_map apartment_chamber\n                ChamberComplex.chamberD_simplex\n                ChamberComplex.galleryD_chamber\n                chambercomplex_fold_A_im fold_A_im_min_gallery"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  Cs = Fs @ [F]\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A F\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Fs @ [F])\n  \\<lbrakk>chamber ?F; ?F \\<in> fold_A \\<turnstile> A;\n   min_gallery (C # ?Fs @ [?F])\\<rbrakk>\n  \\<Longrightarrow> min_gallery (D # opp_fold_A \\<Turnstile> (?Fs @ [?F]))\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimpchain ?X ?xs;\n   ?x \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?X ?x\n  ChamberComplex (fold_A \\<turnstile> A)\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   (C # ?Cs) \\<Longrightarrow>\n  min_gallery (C # ?Cs)\n\ngoal (1 subgoal):\n 1. min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])", "by    fastforce"], ["proof (state)\nthis:\n  min_gallery (D # opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  min_gallery\n   (C # fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F]))\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "with snoc"], ["proof (chain)\npicking this:\n  Cs = Fs @ [F]\n  min_gallery\n   (C # fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F]))", "have \"min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C#Cs)))\""], ["proof (prove)\nusing this:\n  Cs = Fs @ [F]\n  min_gallery\n   (C # fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F]))\n\ngoal (1 subgoal):\n 1. min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "using fold_A_chamber_images(2) opp_fold_A_chamber_images(2)"], ["proof (prove)\nusing this:\n  Cs = Fs @ [F]\n  min_gallery\n   (C # fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> Fs @ [opp_fold_A ` F]))\n  fold_A ` D = C\n  opp_fold_A ` C = D\n\ngoal (1 subgoal):\n 1. min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "by simp"], ["proof (state)\nthis:\n  min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "with Cs apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  A \\<in> \\<A>\n  min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "have  \"ChamberComplex.min_gallery A\n                (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C#Cs)))\""], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  A \\<in> \\<A>\n  min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A\n     (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "using ChamberComplex.min_galleryD_gallery[\n                OF chambercomplex_fold_A_im, of \"C#Cs\"\n              ]\n              ChamberComplex.galleryD_chamber[\n                OF chambercomplex_fold_A_im, of \"C#Cs\"\n              ]\n              ChamberComplex.subcomplex_chamber[\n                OF complexes, OF _ chambersubcomplex_fold_A_im\n              ]\n              apartment_chamberD_simplex\n              ChamberComplexMorphism.simplex_map[OF opp_fold_A_morph_A_A]\n              ChamberComplexMorphism.simplex_map[OF fold_A_morph_A_A]"], ["proof (prove)\nusing this:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  A \\<in> \\<A>\n  min_gallery (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   (C # Cs) \\<Longrightarrow>\n  SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Cs)\n  \\<lbrakk>SimplicialComplex.maxsimpchain (fold_A \\<turnstile> A) (C # Cs);\n   ?x \\<in> set (C # Cs)\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?x\n  \\<lbrakk>A \\<in> \\<A>;\n   SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp A ?C\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  ?x \\<in> A \\<Longrightarrow> opp_fold_A ` ?x \\<in> A\n  ?x \\<in> A \\<Longrightarrow> fold_A ` ?x \\<in> A\n\ngoal (1 subgoal):\n 1. SimplicialComplex.min_maxsimpchain A\n     (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "by    (force intro: min_gallery_in_apartment)"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "have  \"ChamberComplex.pgallery A (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C#Cs)))\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "using apartment_min_gallery_pgallery"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.min_maxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.min_maxsimpchain ?X ?xs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain ?X ?xs\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       Cs = ys @ [y] \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A\n        ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  SimplicialComplex.pmaxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "using ssubst[\n                OF setlistmapim_comp, of \"\\<lambda>Cs. ChamberComplex.pgallery A Cs\"\n              ]"], ["proof (prove)\nusing this:\n  SimplicialComplex.pmaxsimpchain A\n   (fold_A \\<Turnstile> (opp_fold_A \\<Turnstile> (C # Cs)))\n  SimplicialComplex.pmaxsimpchain A\n   (?f1 \\<Turnstile> (?g1 \\<Turnstile> ?xs1)) \\<Longrightarrow>\n  SimplicialComplex.pmaxsimpchain A ((?f1 \\<circ> ?g1) \\<Turnstile> ?xs1)\n\ngoal (1 subgoal):\n 1. SimplicialComplex.pmaxsimpchain A\n     ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))", "by    fast"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A\n   ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SimplicialComplex.pmaxsimpchain A\n   ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # Cs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   (C # ?Cs1) \\<Longrightarrow>\n  SimplicialComplex.pmaxsimpchain A\n   ((fold_A \\<circ> opp_fold_A) \\<Turnstile> (C # ?Cs1))\n\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        (C # Cs) \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> (C # Cs))", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show  \"\\<And>Cs. ChamberComplex.min_gallery (fold_A \\<turnstile> A) Cs \\<Longrightarrow>\n            ChamberComplex.pgallery A (id \\<Turnstile> Cs)\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        Cs \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> Cs)", "using chambersubcomplex_fold_A_im\n          ChamberComplex.min_gallery_pgallery[OF chambercomplex_fold_A_im]\n          ChamberComplex.subcomplex_pgallery[OF complexes, of A \"fold_A \\<turnstile> A\"]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   ?xs \\<Longrightarrow>\n  SimplicialComplex.pmaxsimpchain (fold_A \\<turnstile> A) ?xs\n  \\<lbrakk>A \\<in> \\<A>;\n   ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A);\n   SimplicialComplex.pmaxsimpchain (fold_A \\<turnstile> A) ?Cs\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.pmaxsimpchain A ?Cs\n\ngoal (1 subgoal):\n 1. \\<And>Cs.\n       SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n        Cs \\<Longrightarrow>\n       SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> Cs)", "by    simp"], ["proof (state)\nthis:\n  SimplicialComplex.min_maxsimpchain (fold_A \\<turnstile> A)\n   ?Cs1 \\<Longrightarrow>\n  SimplicialComplex.pmaxsimpchain A (id \\<Turnstile> ?Cs1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas opp_fold_A_comp_fixespointwise =\n  ChamberComplexApartmentSystemTriangle.fold_A_comp_fixespointwise[OF reflect]"], ["", "lemma fold_A_fold:\n  \"ChamberComplexIsomorphism (opp_fold_A \\<turnstile> A) (fold_A \\<turnstile> A) fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexIsomorphism (opp_fold_A \\<turnstile> A)\n     (fold_A \\<turnstile> A) fold_A", "proof (rule ChamberComplexMorphism.isoI_inverse)"], ["proof (state)\ngoal (4 subgoals):\n 1. ChamberComplexMorphism (opp_fold_A \\<turnstile> A)\n     (fold_A \\<turnstile> A) fold_A\n 2. ChamberComplexMorphism (fold_A \\<turnstile> A)\n     (opp_fold_A \\<turnstile> A) ?g\n 3. fixespointwise (?g \\<circ> fold_A)\n     (\\<Union> (opp_fold_A \\<turnstile> A))\n 4. fixespointwise (fold_A \\<circ> ?g) (\\<Union> (fold_A \\<turnstile> A))", "show \"ChamberComplexMorphism (opp_fold_A \\<turnstile> A) (fold_A \\<turnstile> A) fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (opp_fold_A \\<turnstile> A)\n     (fold_A \\<turnstile> A) fold_A", "using ChamberComplexMorphism.restrict_domain\n          ChamberComplexMorphism.restrict_codomain_to_image\n          ChamberComplexMorphism.cong fun_eq_on_sym[OF fun_eq_on_restrict1]\n          ChamberComplexEndomorphism.axioms(1) res_fold_A_endo_A\n          chambersubcomplex_opp_fold_A_im"], ["proof (prove)\nusing this:\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   ChamberComplex.ChamberSubcomplex ?X ?W\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?W ?Y ?f\n  ChamberComplexMorphism ?X ?Y ?f \\<Longrightarrow>\n  ChamberComplexMorphism ?X (?f \\<turnstile> ?X) ?f\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   fun_eq_on ?g ?f (\\<Union> ?X)\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?X ?Y ?g\n  fun_eq_on ?g (restrict1 ?g ?A) ?A\n  ChamberComplexEndomorphism ?X ?f \\<Longrightarrow>\n  ChamberComplexMorphism ?X ?X ?f\n  ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))\n  ChamberComplex.ChamberSubcomplex A (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (opp_fold_A \\<turnstile> A)\n     (fold_A \\<turnstile> A) fold_A", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism (opp_fold_A \\<turnstile> A) (fold_A \\<turnstile> A)\n   fold_A\n\ngoal (3 subgoals):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A)\n     (opp_fold_A \\<turnstile> A) ?g\n 2. fixespointwise (?g \\<circ> fold_A)\n     (\\<Union> (opp_fold_A \\<turnstile> A))\n 3. fixespointwise (fold_A \\<circ> ?g) (\\<Union> (fold_A \\<turnstile> A))", "show \"ChamberComplexMorphism (fold_A \\<turnstile> A) (opp_fold_A \\<turnstile> A) opp_fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A)\n     (opp_fold_A \\<turnstile> A) opp_fold_A", "using ChamberComplexMorphism.restrict_domain\n          ChamberComplexMorphism.restrict_codomain_to_image\n          ChamberComplexMorphism.cong fun_eq_on_sym[OF fun_eq_on_restrict1]\n          ChamberComplexEndomorphism.axioms(1) opp_res_fold_A_endo_A\n          chambersubcomplex_fold_A_im"], ["proof (prove)\nusing this:\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   ChamberComplex.ChamberSubcomplex ?X ?W\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?W ?Y ?f\n  ChamberComplexMorphism ?X ?Y ?f \\<Longrightarrow>\n  ChamberComplexMorphism ?X (?f \\<turnstile> ?X) ?f\n  \\<lbrakk>ChamberComplexMorphism ?X ?Y ?f;\n   fun_eq_on ?g ?f (\\<Union> ?X)\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexMorphism ?X ?Y ?g\n  fun_eq_on ?g (restrict1 ?g ?A) ?A\n  ChamberComplexEndomorphism ?X ?f \\<Longrightarrow>\n  ChamberComplexMorphism ?X ?X ?f\n  ChamberComplexEndomorphism A (restrict1 opp_fold_A (\\<Union> A))\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexMorphism (fold_A \\<turnstile> A)\n     (opp_fold_A \\<turnstile> A) opp_fold_A", "by    fast"], ["proof (state)\nthis:\n  ChamberComplexMorphism (fold_A \\<turnstile> A) (opp_fold_A \\<turnstile> A)\n   opp_fold_A\n\ngoal (2 subgoals):\n 1. fixespointwise (opp_fold_A \\<circ> fold_A)\n     (\\<Union> (opp_fold_A \\<turnstile> A))\n 2. fixespointwise (fold_A \\<circ> opp_fold_A)\n     (\\<Union> (fold_A \\<turnstile> A))", "qed (rule opp_fold_A_comp_fixespointwise, rule fold_A_comp_fixespointwise)"], ["", "lemma res_fold_A: \"ChamberComplexFolding A res_fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexFolding A (restrict1 fold_A (\\<Union> A))", "proof (rule ChamberComplexFolding.intro)"], ["proof (state)\ngoal (2 subgoals):\n 1. ChamberComplexRetraction A (restrict1 fold_A (\\<Union> A))\n 2. ChamberComplexFolding_axioms A (restrict1 fold_A (\\<Union> A))", "have \"ChamberComplexEndomorphism A (res_fold_A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))", "using res_fold_A_endo_A"], ["proof (prove)\nusing this:\n  ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))\n\ngoal (1 subgoal):\n 1. ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))", "by fast"], ["proof (state)\nthis:\n  ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))\n\ngoal (2 subgoals):\n 1. ChamberComplexRetraction A (restrict1 fold_A (\\<Union> A))\n 2. ChamberComplexFolding_axioms A (restrict1 fold_A (\\<Union> A))", "thus \"ChamberComplexRetraction A (res_fold_A)\""], ["proof (prove)\nusing this:\n  ChamberComplexEndomorphism A (restrict1 fold_A (\\<Union> A))\n\ngoal (1 subgoal):\n 1. ChamberComplexRetraction A (restrict1 fold_A (\\<Union> A))", "proof (rule ChamberComplexRetraction.intro, unfold_locales)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>ChamberComplexEndomorphism A\n                 (restrict1 fold_A (\\<Union> A));\n        v \\<in> \\<Union> A\\<rbrakk>\n       \\<Longrightarrow> restrict1 fold_A (\\<Union> A)\n                          (restrict1 fold_A (\\<Union> A) v) =\n                         restrict1 fold_A (\\<Union> A) v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>ChamberComplexEndomorphism A\n                 (restrict1 fold_A (\\<Union> A));\n        v \\<in> \\<Union> A\\<rbrakk>\n       \\<Longrightarrow> restrict1 fold_A (\\<Union> A)\n                          (restrict1 fold_A (\\<Union> A) v) =\n                         restrict1 fold_A (\\<Union> A) v", "assume \"v\\<in>\\<Union>A\""], ["proof (state)\nthis:\n  v \\<in> \\<Union> A\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>ChamberComplexEndomorphism A\n                 (restrict1 fold_A (\\<Union> A));\n        v \\<in> \\<Union> A\\<rbrakk>\n       \\<Longrightarrow> restrict1 fold_A (\\<Union> A)\n                          (restrict1 fold_A (\\<Union> A) v) =\n                         restrict1 fold_A (\\<Union> A) v", "moreover"], ["proof (state)\nthis:\n  v \\<in> \\<Union> A\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>ChamberComplexEndomorphism A\n                 (restrict1 fold_A (\\<Union> A));\n        v \\<in> \\<Union> A\\<rbrakk>\n       \\<Longrightarrow> restrict1 fold_A (\\<Union> A)\n                          (restrict1 fold_A (\\<Union> A) v) =\n                         restrict1 fold_A (\\<Union> A) v", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A", "obtain C\n      where \"C \\<in> ChamberComplex.\\<C> A\" \"v\\<in>C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> ChamberComplex.chamber_system A; v \\<in> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using apartment_simplex_in_max apartment_chamber_system_def"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  v \\<in> \\<Union> A\n  \\<lbrakk>?X \\<in> \\<A>; ?y \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       SimplicialComplex.maxsimp ?X x \\<and>\n                       order.greater_eq x ?y\n  ?X \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> ChamberComplex.chamber_system A; v \\<in> C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by    fast"], ["proof (state)\nthis:\n  C \\<in> ChamberComplex.chamber_system A\n  v \\<in> C\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>ChamberComplexEndomorphism A\n                 (restrict1 fold_A (\\<Union> A));\n        v \\<in> \\<Union> A\\<rbrakk>\n       \\<Longrightarrow> restrict1 fold_A (\\<Union> A)\n                          (restrict1 fold_A (\\<Union> A) v) =\n                         restrict1 fold_A (\\<Union> A) v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> \\<Union> A\n  C \\<in> ChamberComplex.chamber_system A\n  v \\<in> C", "show \"res_fold_A (res_fold_A v) = res_fold_A v\""], ["proof (prove)\nusing this:\n  v \\<in> \\<Union> A\n  C \\<in> ChamberComplex.chamber_system A\n  v \\<in> C\n\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) (restrict1 fold_A (\\<Union> A) v) =\n    restrict1 fold_A (\\<Union> A) v", "using fold_A_chamber_system_image_fixespointwise fixespointwiseD"], ["proof (prove)\nusing this:\n  v \\<in> \\<Union> A\n  C \\<in> ChamberComplex.chamber_system A\n  v \\<in> C\n  ?F \\<in> ChamberComplex.chamber_system A \\<Longrightarrow>\n  fixespointwise fold_A (fold_A ` ?F)\n  \\<lbrakk>fixespointwise ?f ?A; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?f ?a = id ?a\n\ngoal (1 subgoal):\n 1. restrict1 fold_A (\\<Union> A) (restrict1 fold_A (\\<Union> A) v) =\n    restrict1 fold_A (\\<Union> A) v", "by    fastforce"], ["proof (state)\nthis:\n  restrict1 fold_A (\\<Union> A) (restrict1 fold_A (\\<Union> A) v) =\n  restrict1 fold_A (\\<Union> A) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ChamberComplexRetraction A (restrict1 fold_A (\\<Union> A))\n\ngoal (1 subgoal):\n 1. ChamberComplexFolding_axioms A (restrict1 fold_A (\\<Union> A))", "show \"ChamberComplexFolding_axioms A res_fold_A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChamberComplexFolding_axioms A (restrict1 fold_A (\\<Union> A))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "fix F"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "assume F: \"ChamberComplex.chamber A F\" \"F \\<in> res_fold_A \\<turnstile> A\""], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A F\n  F \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "from F(2)"], ["proof (chain)\npicking this:\n  F \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A", "have F': \"F \\<in> fold_A \\<turnstile> A\""], ["proof (prove)\nusing this:\n  F \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A", "using setsetmapim_restrict1[of A A fold_A]"], ["proof (prove)\nusing this:\n  F \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\n  order.greater_eq A A \\<Longrightarrow>\n  restrict1 fold_A (\\<Union> A) \\<turnstile> A = fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> A", "by simp"], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "hence \"F \\<in> fold_A \\<turnstile> (opp_fold_A \\<turnstile> A)\""], ["proof (prove)\nusing this:\n  F \\<in> fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> (opp_fold_A \\<turnstile> A)", "using ChamberComplexIsomorphism.surj_simplex_map[OF fold_A_fold]"], ["proof (prove)\nusing this:\n  F \\<in> fold_A \\<turnstile> A\n  fold_A \\<turnstile> (opp_fold_A \\<turnstile> A) = fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. F \\<in> fold_A \\<turnstile> (opp_fold_A \\<turnstile> A)", "by    simp"], ["proof (state)\nthis:\n  F \\<in> fold_A \\<turnstile> (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "from this"], ["proof (chain)\npicking this:\n  F \\<in> fold_A \\<turnstile> (opp_fold_A \\<turnstile> A)", "obtain G where G: \"G \\<in> opp_fold_A \\<turnstile> A\" \"F = fold_A ` G\""], ["proof (prove)\nusing this:\n  F \\<in> fold_A \\<turnstile> (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<in> opp_fold_A \\<turnstile> A; F = fold_A ` G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  G \\<in> opp_fold_A \\<turnstile> A\n  F = fold_A ` G\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "with F(1) F' apartments(1)"], ["proof (chain)\npicking this:\n  SimplicialComplex.maxsimp A F\n  F \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  G \\<in> opp_fold_A \\<turnstile> A\n  F = fold_A ` G", "have  G': \"ChamberComplex.chamber A G\"\n                \"G \\<in> ChamberComplex.\\<C> (opp_fold_A \\<turnstile> A)\""], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A F\n  F \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  G \\<in> opp_fold_A \\<turnstile> A\n  F = fold_A ` G\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A G &&&\n    G \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "using ChamberComplex.chamber_in_subcomplex[OF complexes]\n            chambersubcomplex_fold_A_im\n            ChamberComplexIsomorphism.chamber_preimage[OF fold_A_fold, of G]\n            ChamberComplex.subcomplex_chamber[\n              OF complexes, OF apartments(1) chambersubcomplex_opp_fold_A_im\n            ]\n            ChamberComplex.chamber_system_def[\n              OF chambercomplex_opp_fold_A_im\n            ]"], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A F\n  F \\<in> fold_A \\<turnstile> A\n  A \\<in> \\<A>\n  G \\<in> opp_fold_A \\<turnstile> A\n  F = fold_A ` G\n  \\<lbrakk>?X \\<in> \\<A>; ChamberComplex.ChamberSubcomplex ?X ?Y;\n   ?C \\<in> ?Y; SimplicialComplex.maxsimp ?X ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp ?Y ?C\n  ChamberComplex.ChamberSubcomplex A (fold_A \\<turnstile> A)\n  \\<lbrakk>G \\<in> opp_fold_A \\<turnstile> A;\n   SimplicialComplex.maxsimp (fold_A \\<turnstile> A) (fold_A ` G)\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp (opp_fold_A \\<turnstile> A) G\n  SimplicialComplex.maxsimp (opp_fold_A \\<turnstile> A) ?C \\<Longrightarrow>\n  SimplicialComplex.maxsimp A ?C\n  ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) \\<equiv>\n  {C. SimplicialComplex.maxsimp (opp_fold_A \\<turnstile> A) C}\n\ngoal (1 subgoal):\n 1. SimplicialComplex.maxsimp A G &&&\n    G \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A G\n  G \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "from apartments(1) G(2)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  F = fold_A ` G", "have  1: \"\\<And>H. ChamberComplex.chamber A H \\<and> H \\<notin> fold_A \\<turnstile> A \\<and>\n                fold_A ` H = F \\<Longrightarrow> H=G\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F = fold_A ` G\n\ngoal (1 subgoal):\n 1. \\<And>H.\n       SimplicialComplex.maxsimp A H \\<and>\n       H \\<notin> fold_A \\<turnstile> A \\<and>\n       fold_A ` H = F \\<Longrightarrow>\n       H = G", "using G'(2) apartment_chamber_system_def[of A]\n            fold_A_opp_fold_A_chamber_systems(1)\n            chambercomplex_fold_A_im ChamberComplex.chamber_system_def\n            ChamberComplex.chamberD_simplex\n            inj_onD[\n              OF ChamberComplexIsomorphism.inj_on_chamber_system,\n              OF fold_A_fold\n            ]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  F = fold_A ` G\n  G \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n  A \\<in> \\<A> \\<Longrightarrow>\n  ChamberComplex.chamber_system A \\<equiv>\n  {C. SimplicialComplex.maxsimp A C}\n  ChamberComplex.chamber_system A =\n  ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<union>\n  ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n  ChamberComplex (fold_A \\<turnstile> A)\n  ChamberComplex ?X \\<Longrightarrow>\n  ChamberComplex.chamber_system ?X \\<equiv>\n  {C. SimplicialComplex.maxsimp ?X C}\n  \\<lbrakk>ChamberComplex ?X; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  \\<lbrakk>fold_A ` ?x = fold_A ` ?y;\n   ?x \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A);\n   ?y \\<in> ChamberComplex.chamber_system\n             (opp_fold_A \\<turnstile> A)\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<And>H.\n       SimplicialComplex.maxsimp A H \\<and>\n       H \\<notin> fold_A \\<turnstile> A \\<and>\n       fold_A ` H = F \\<Longrightarrow>\n       H = G", "by    blast"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> fold_A \\<turnstile> A \\<and>\n  fold_A ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "with apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> fold_A \\<turnstile> A \\<and>\n  fold_A ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G", "have  \"\\<And>H. ChamberComplex.chamber A H \\<and> H \\<notin> res_fold_A \\<turnstile> A \\<and>\n              res_fold_A ` H = F \\<Longrightarrow> H=G\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> fold_A \\<turnstile> A \\<and>\n  fold_A ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n\ngoal (1 subgoal):\n 1. \\<And>H.\n       SimplicialComplex.maxsimp A H \\<and>\n       H \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n       restrict1 fold_A (\\<Union> A) ` H = F \\<Longrightarrow>\n       H = G", "using 1 res_fold_A_A_chamber_image apartment_chamberD_simplex\n            res_fold_A_A_im_fold_A_A_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> fold_A \\<turnstile> A \\<and>\n  fold_A ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> fold_A \\<turnstile> A \\<and>\n  fold_A ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n  SimplicialComplex.maxsimp A ?F \\<Longrightarrow>\n  restrict1 fold_A (\\<Union> A) ` ?F = fold_A ` ?F\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  restrict1 fold_A (\\<Union> A) \\<turnstile> A = fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. \\<And>H.\n       SimplicialComplex.maxsimp A H \\<and>\n       H \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n       restrict1 fold_A (\\<Union> A) ` H = F \\<Longrightarrow>\n       H = G", "by    auto"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n  restrict1 fold_A (\\<Union> A) ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "moreover"], ["proof (state)\nthis:\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n  restrict1 fold_A (\\<Union> A) ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "from apartments(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "have \"G \\<notin> res_fold_A \\<turnstile> A\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A", "using G'\n            ChamberComplex.chamber_system_def[OF chambercomplex_fold_A_im]\n            ChamberComplex.chamber_in_subcomplex[\n              OF complexes, OF _ chambersubcomplex_fold_A_im\n            ]\n            fold_A_opp_fold_A_chamber_systems(2) res_fold_A_A_im_fold_A_A_im"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  SimplicialComplex.maxsimp A G\n  G \\<in> ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A)\n  ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<equiv>\n  {C. SimplicialComplex.maxsimp (fold_A \\<turnstile> A) C}\n  \\<lbrakk>A \\<in> \\<A>; ?C \\<in> fold_A \\<turnstile> A;\n   SimplicialComplex.maxsimp A ?C\\<rbrakk>\n  \\<Longrightarrow> SimplicialComplex.maxsimp (fold_A \\<turnstile> A) ?C\n  ChamberComplex.chamber_system (fold_A \\<turnstile> A) \\<inter>\n  ChamberComplex.chamber_system (opp_fold_A \\<turnstile> A) =\n  {}\n  restrict1 fold_A (\\<Union> A) \\<turnstile> A = fold_A \\<turnstile> A\n\ngoal (1 subgoal):\n 1. G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A", "by    auto"], ["proof (state)\nthis:\n  G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        C \\<in> restrict1 fold_A (\\<Union> A) \\<turnstile> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!D.\n                            SimplicialComplex.maxsimp A D \\<and>\n                            D \\<notin> restrict1 fold_A\n  (\\<Union> A) \\<turnstile>\n A \\<and>\n                            restrict1 fold_A (\\<Union> A) ` D = C", "ultimately"], ["proof (chain)\npicking this:\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n  restrict1 fold_A (\\<Union> A) ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n  G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A", "show  \"\\<exists>!G. ChamberComplex.chamber A G \\<and> G \\<notin> res_fold_A \\<turnstile> A \\<and>\n              res_fold_A ` G = F\""], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n  restrict1 fold_A (\\<Union> A) ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n  G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A\n\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       SimplicialComplex.maxsimp A G \\<and>\n       G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n       restrict1 fold_A (\\<Union> A) ` G = F", "using G'(1) G(2) res_fold_A_A_chamber_image ex1I[of _ G]"], ["proof (prove)\nusing this:\n  SimplicialComplex.maxsimp A ?H1 \\<and>\n  ?H1 \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n  restrict1 fold_A (\\<Union> A) ` ?H1 = F \\<Longrightarrow>\n  ?H1 = G\n  G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A\n  SimplicialComplex.maxsimp A G\n  F = fold_A ` G\n  SimplicialComplex.maxsimp A ?F \\<Longrightarrow>\n  restrict1 fold_A (\\<Union> A) ` ?F = fold_A ` ?F\n  \\<lbrakk>?P G; \\<And>x. ?P x \\<Longrightarrow> x = G\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!x. ?P x\n\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       SimplicialComplex.maxsimp A G \\<and>\n       G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n       restrict1 fold_A (\\<Union> A) ` G = F", "by    force"], ["proof (state)\nthis:\n  \\<exists>!G.\n     SimplicialComplex.maxsimp A G \\<and>\n     G \\<notin> restrict1 fold_A (\\<Union> A) \\<turnstile> A \\<and>\n     restrict1 fold_A (\\<Union> A) ` G = F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ChamberComplexFolding_axioms A (restrict1 fold_A (\\<Union> A))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas opp_res_fold_A =\n  ChamberComplexApartmentSystemTriangle.res_fold_A[OF reflect]"], ["", "end"], ["", "(* context ChamberComplexApartmentSystemTriangle *)"], ["", "subsection \\<open>Building locale and basic lemmas\\<close>"], ["", "text \\<open>\n  Finally, we define a (thick) building to be a thick chamber complex with a system of apartments.\n\\<close>"], ["", "locale Building = ChamberComplexWithApartmentSystem X \\<A>\n  for X :: \"'a set set\"\n  and \\<A> :: \"'a set set set\"\n+ assumes thick: \"ThickChamberComplex X\"\nbegin"], ["", "abbreviation \"some_third_chamber \\<equiv>\n                ThickChamberComplex.some_third_chamber X\""], ["", "lemmas some_third_chamberD_facet =\n  ThickChamberComplex.some_third_chamberD_facet [OF thick]"], ["", "lemmas some_third_chamberD_ne =\n  ThickChamberComplex.some_third_chamberD_ne [OF thick]"], ["", "lemmas chamber_some_third_chamber =\n  ThickChamberComplex.chamber_some_third_chamber [OF thick]"], ["", "end"], ["", "(* context Building *)"], ["", "subsection \\<open>Apartments are uniformly Coxeter\\<close>"], ["", "text \\<open>\n  Using the assumption of thickness, we may use the special situation\n  @{const ChamberComplexApartmentSystemTriangle} to verify that apartments have enough pairs of\n  opposed foldings to ensure that they are isomorphic to a Coxeter complex. Since the apartments\n  are all isomorphic, they are uniformly isomorphic to a single Coxeter complex.\n\\<close>"], ["", "context Building\nbegin"], ["", "lemma apartments_have_many_foldings1:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<sim>D\" \"C\\<noteq>D\" \"C\\<in>A\" \"D\\<in>A\"\n  defines \"E \\<equiv> some_third_chamber C D (C\\<inter>D)\"\n  defines \"B  \\<equiv> supapartment C E\"\n  and     \"B' \\<equiv> supapartment D E\"\n  defines \"f \\<equiv> restrict1 (canonical_retraction A D \\<circ> canonical_retraction B  C)\n            (\\<Union>A)\"\n  and     \"g \\<equiv> restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n            (\\<Union>A)\"\n  shows   \"f`D = C\" \"ChamberComplexFolding A f\"\n          \"g`C = D\" \"ChamberComplexFolding A g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ` D = C &&& ChamberComplexFolding A f) &&&\n    g ` C = D &&& ChamberComplexFolding A g", "proof-"], ["proof (state)\ngoal (4 subgoals):\n 1. f ` D = C\n 2. ChamberComplexFolding A f\n 3. g ` C = D\n 4. ChamberComplexFolding A g", "from assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)", "have 1:\n    \"ChamberComplexApartmentSystemTriangle X \\<A> A B B' C D E (C\\<inter>D)\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexApartmentSystemTriangle X \\<A> A B B' C D E (C \\<inter> D)", "using adjacent_int_facet1[of C D] adjacent_int_facet2[of C D]\n          some_third_chamberD_facet chamber_some_third_chamber\n          some_third_chamberD_ne[of C \"C\\<inter>D\" D] supapartmentD"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  \\<lbrakk>C \\<sim> D; C \\<noteq> D\\<rbrakk>\n  \\<Longrightarrow> C \\<inter> D \\<lhd> C\n  \\<lbrakk>C \\<sim> D; C \\<noteq> D\\<rbrakk>\n  \\<Longrightarrow> C \\<inter> D \\<lhd> D\n  \\<lbrakk>chamber ?C; ?z \\<lhd> ?C\\<rbrakk>\n  \\<Longrightarrow> ?z \\<lhd> some_third_chamber ?C ?D ?z\n  \\<lbrakk>chamber ?C; ?z \\<lhd> ?C\\<rbrakk>\n  \\<Longrightarrow> chamber (some_third_chamber ?C ?D ?z)\n  \\<lbrakk>chamber C; C \\<inter> D \\<lhd> C\\<rbrakk>\n  \\<Longrightarrow> some_third_chamber C D (C \\<inter> D) \\<noteq> C\n  \\<lbrakk>chamber C; C \\<inter> D \\<lhd> C\\<rbrakk>\n  \\<Longrightarrow> some_third_chamber C D (C \\<inter> D) \\<noteq> D\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> supapartment ?C ?D \\<in> \\<A>\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> ?C \\<in> supapartment ?C ?D\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> ?D \\<in> supapartment ?C ?D\n\ngoal (1 subgoal):\n 1. ChamberComplexApartmentSystemTriangle X \\<A> A B B' C D E (C \\<inter> D)", "by    unfold_locales auto"], ["proof (state)\nthis:\n  ChamberComplexApartmentSystemTriangle X \\<A> A B B' C D E (C \\<inter> D)\n\ngoal (4 subgoals):\n 1. f ` D = C\n 2. ChamberComplexFolding A f\n 3. g ` C = D\n 4. ChamberComplexFolding A g", "from f_def g_def"], ["proof (chain)\npicking this:\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)", "show  \"ChamberComplexFolding A f\" \"ChamberComplexFolding A g\"\n          \"f`D = C\" \"g`C = D\""], ["proof (prove)\nusing this:\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. (ChamberComplexFolding A f &&& ChamberComplexFolding A g) &&&\n    f ` D = C &&& g ` C = D", "using ChamberComplexApartmentSystemTriangle.res_fold_A [OF 1]\n          ChamberComplexApartmentSystemTriangle.opp_res_fold_A[OF 1]\n          ChamberComplexApartmentSystemTriangle.res_fold_A_chamber_images(2)[\n            OF 1\n          ]\n          ChamberComplexApartmentSystemTriangle.res_opp_fold_A_chamber_images(2)[\n            OF 1\n          ]"], ["proof (prove)\nusing this:\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  ChamberComplexFolding A\n   (restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n     (\\<Union> A))\n  ChamberComplexFolding A\n   (restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n     (\\<Union> A))\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A) `\n  D =\n  C\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A) `\n  C =\n  D\n\ngoal (1 subgoal):\n 1. (ChamberComplexFolding A f &&& ChamberComplexFolding A g) &&&\n    f ` D = C &&& g ` C = D", "by    auto"], ["proof (state)\nthis:\n  ChamberComplexFolding A f\n  ChamberComplexFolding A g\n  f ` D = C\n  g ` C = D\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma apartments_have_many_foldings2:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<sim>D\" \"C\\<noteq>D\" \"C\\<in>A\" \"D\\<in>A\"\n  defines \"E \\<equiv> some_third_chamber C D (C\\<inter>D)\"\n  defines \"B  \\<equiv> supapartment C E\"\n  and     \"B' \\<equiv> supapartment D E\"\n  defines \"f \\<equiv> restrict1 (canonical_retraction A D \\<circ> canonical_retraction B  C)\n            (\\<Union>A)\"\n  and     \"g \\<equiv> restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n            (\\<Union>A)\"\n  shows   \"OpposedThinChamberComplexFoldings A f g C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings A f g C", "proof (rule OpposedThinChamberComplexFoldings.intro)"], ["proof (state)\ngoal (4 subgoals):\n 1. ThinChamberComplex A\n 2. ChamberComplexFolding A f\n 3. ChamberComplexFolding A g\n 4. OpposedThinChamberComplexFoldings_axioms A f g C", "from assms"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)", "show \"ChamberComplexFolding A f\" \"ChamberComplexFolding A g\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. ChamberComplexFolding A f &&& ChamberComplexFolding A g", "using apartments_have_many_foldings1(2,4)[of A C D]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  \\<lbrakk>A \\<in> \\<A>; chamber C; chamber D; C \\<sim> D; C \\<noteq> D;\n   C \\<in> A; D \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexFolding A\n                     (restrict1\n                       (canonical_retraction A D \\<circ>\n                        canonical_retraction\n                         (supapartment C\n                           (some_third_chamber C D (C \\<inter> D)))\n                         C)\n                       (\\<Union> A))\n  \\<lbrakk>A \\<in> \\<A>; chamber C; chamber D; C \\<sim> D; C \\<noteq> D;\n   C \\<in> A; D \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexFolding A\n                     (restrict1\n                       (canonical_retraction A C \\<circ>\n                        canonical_retraction\n                         (supapartment D\n                           (some_third_chamber C D (C \\<inter> D)))\n                         D)\n                       (\\<Union> A))\n\ngoal (1 subgoal):\n 1. ChamberComplexFolding A f &&& ChamberComplexFolding A g", "by auto"], ["proof (state)\nthis:\n  ChamberComplexFolding A f\n  ChamberComplexFolding A g\n\ngoal (2 subgoals):\n 1. ThinChamberComplex A\n 2. OpposedThinChamberComplexFoldings_axioms A f g C", "show \"OpposedThinChamberComplexFoldings_axioms A f g C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings_axioms A f g C", "proof (\n    unfold_locales, rule chamber_in_apartment, rule assms(1), rule assms(6),\n    rule assms(2)\n  )"], ["proof (state)\ngoal (3 subgoals):\n 1. C \\<sim> g ` C\n 2. C \\<noteq> g ` C\n 3. f ` g ` C = C", "from assms(1-7) E_def B_def B'_def g_def f_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)", "have  gC: \"g`C = D\"\n      and   fD: \"f`D = C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. g ` C = D &&& f ` D = C", "using apartments_have_many_foldings1(1)[of A C D]\n            apartments_have_many_foldings1(3)[of A C D]"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E \\<equiv> some_third_chamber C D (C \\<inter> D)\n  B \\<equiv> supapartment C E\n  B' \\<equiv> supapartment D E\n  g \\<equiv>\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  f \\<equiv>\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  \\<lbrakk>A \\<in> \\<A>; chamber C; chamber D; C \\<sim> D; C \\<noteq> D;\n   C \\<in> A; D \\<in> A\\<rbrakk>\n  \\<Longrightarrow> restrict1\n                     (canonical_retraction A D \\<circ>\n                      canonical_retraction\n                       (supapartment C\n                         (some_third_chamber C D (C \\<inter> D)))\n                       C)\n                     (\\<Union> A) `\n                    D =\n                    C\n  \\<lbrakk>A \\<in> \\<A>; chamber C; chamber D; C \\<sim> D; C \\<noteq> D;\n   C \\<in> A; D \\<in> A\\<rbrakk>\n  \\<Longrightarrow> restrict1\n                     (canonical_retraction A C \\<circ>\n                      canonical_retraction\n                       (supapartment D\n                         (some_third_chamber C D (C \\<inter> D)))\n                       D)\n                     (\\<Union> A) `\n                    C =\n                    D\n\ngoal (1 subgoal):\n 1. g ` C = D &&& f ` D = C", "by    auto"], ["proof (state)\nthis:\n  g ` C = D\n  f ` D = C\n\ngoal (3 subgoals):\n 1. C \\<sim> g ` C\n 2. C \\<noteq> g ` C\n 3. f ` g ` C = C", "with assms(4,5)"], ["proof (chain)\npicking this:\n  C \\<sim> D\n  C \\<noteq> D\n  g ` C = D\n  f ` D = C", "show \"C \\<sim> g`C\" \"C \\<noteq> g`C\" \"f`g`C = C\""], ["proof (prove)\nusing this:\n  C \\<sim> D\n  C \\<noteq> D\n  g ` C = D\n  f ` D = C\n\ngoal (1 subgoal):\n 1. C \\<sim> g ` C &&& C \\<noteq> g ` C &&& f ` g ` C = C", "by auto"], ["proof (state)\nthis:\n  C \\<sim> g ` C\n  C \\<noteq> g ` C\n  f ` g ` C = C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  OpposedThinChamberComplexFoldings_axioms A f g C\n\ngoal (1 subgoal):\n 1. ThinChamberComplex A", "qed (rule thincomplexes, rule assms(1))"], ["", "lemma apartments_have_many_foldings3:\n  assumes \"A\\<in>\\<A>\" \"chamber C\" \"chamber D\" \"C\\<sim>D\" \"C\\<noteq>D\" \"C\\<in>A\" \"D\\<in>A\"\n  shows   \"\\<exists>f g. OpposedThinChamberComplexFoldings A f g C \\<and> D=g`C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f g. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g. OpposedThinChamberComplexFoldings A ?f g C \\<and> D = g ` C", "define E where \"E = some_third_chamber C D (C\\<inter>D)\""], ["proof (state)\nthis:\n  E = some_third_chamber C D (C \\<inter> D)\n\ngoal (1 subgoal):\n 1. \\<exists>g. OpposedThinChamberComplexFoldings A ?f g C \\<and> D = g ` C", "define B where \"B = supapartment C E\""], ["proof (state)\nthis:\n  B = supapartment C E\n\ngoal (1 subgoal):\n 1. \\<exists>g. OpposedThinChamberComplexFoldings A ?f g C \\<and> D = g ` C", "define f where \"f = restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C) (\\<Union>A)\""], ["proof (state)\nthis:\n  f =\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. \\<exists>g. OpposedThinChamberComplexFoldings A ?f g C \\<and> D = g ` C", "show \"\\<exists>g. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings A f ?g C \\<and> D = ?g ` C", "define B' where \"B' = supapartment D E\""], ["proof (state)\nthis:\n  B' = supapartment D E\n\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings A f ?g C \\<and> D = ?g ` C", "define g where \"g = restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D) (\\<Union>A)\""], ["proof (state)\nthis:\n  g =\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings A f ?g C \\<and> D = ?g ` C", "from assms E_def B_def f_def B'_def g_def"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E = some_third_chamber C D (C \\<inter> D)\n  B = supapartment C E\n  f =\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  B' = supapartment D E\n  g =\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)", "show  \"OpposedThinChamberComplexFoldings A f g C \\<and> D = g`C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E = some_third_chamber C D (C \\<inter> D)\n  B = supapartment C E\n  f =\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  B' = supapartment D E\n  g =\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C", "using apartments_have_many_foldings1(3)[of A C D]\n            apartments_have_many_foldings2"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  chamber C\n  chamber D\n  C \\<sim> D\n  C \\<noteq> D\n  C \\<in> A\n  D \\<in> A\n  E = some_third_chamber C D (C \\<inter> D)\n  B = supapartment C E\n  f =\n  restrict1 (canonical_retraction A D \\<circ> canonical_retraction B C)\n   (\\<Union> A)\n  B' = supapartment D E\n  g =\n  restrict1 (canonical_retraction A C \\<circ> canonical_retraction B' D)\n   (\\<Union> A)\n  \\<lbrakk>A \\<in> \\<A>; chamber C; chamber D; C \\<sim> D; C \\<noteq> D;\n   C \\<in> A; D \\<in> A\\<rbrakk>\n  \\<Longrightarrow> restrict1\n                     (canonical_retraction A C \\<circ>\n                      canonical_retraction\n                       (supapartment D\n                         (some_third_chamber C D (C \\<inter> D)))\n                       D)\n                     (\\<Union> A) `\n                    C =\n                    D\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<sim> ?D;\n   ?C \\<noteq> ?D; ?C \\<in> ?A; ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> OpposedThinChamberComplexFoldings ?A\n                     (restrict1\n                       (canonical_retraction ?A ?D \\<circ>\n                        canonical_retraction\n                         (supapartment ?C\n                           (some_third_chamber ?C ?D (?C \\<inter> ?D)))\n                         ?C)\n                       (\\<Union> ?A))\n                     (restrict1\n                       (canonical_retraction ?A ?C \\<circ>\n                        canonical_retraction\n                         (supapartment ?D\n                           (some_third_chamber ?C ?D (?C \\<inter> ?D)))\n                         ?D)\n                       (\\<Union> ?A))\n                     ?C\n\ngoal (1 subgoal):\n 1. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C", "by    auto"], ["proof (state)\nthis:\n  OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>g. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma apartments_have_many_foldings:\n  assumes \"A\\<in>\\<A>\" \"C\\<in>A\" \"chamber C\"\n  shows   \"ThinChamberComplexManyFoldings A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ThinChamberComplexManyFoldings A C", "proof (\n  rule ThinChamberComplex.ThinChamberComplexManyFoldingsI,\n  rule thincomplexes, rule assms(1), rule chamber_in_apartment,\n  rule assms(1), rule assms(2), rule assms(3)\n)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        SimplicialComplex.maxsimp A D; C \\<sim> D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f g.\n                            OpposedThinChamberComplexFoldings A f g C \\<and>\n                            D = g ` C", "from assms(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "show \"\\<And>C D. ChamberComplex.chamber A C \\<Longrightarrow>\n            ChamberComplex.chamber A D \\<Longrightarrow> C\\<sim>D \\<Longrightarrow>\n            C\\<noteq>D \\<Longrightarrow>\n            \\<exists>f g. OpposedThinChamberComplexFoldings A f g C \\<and> D = g ` C\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. \\<And>C D.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        SimplicialComplex.maxsimp A D; C \\<sim> D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f g.\n                            OpposedThinChamberComplexFoldings A f g C \\<and>\n                            D = g ` C", "using apartments_have_many_foldings3 apartment_chamber\n          apartment_chamberD_simplex"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  \\<lbrakk>?A \\<in> \\<A>; chamber ?C; chamber ?D; ?C \\<sim> ?D;\n   ?C \\<noteq> ?D; ?C \\<in> ?A; ?D \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f g.\n                       OpposedThinChamberComplexFoldings ?A f g ?C \\<and>\n                       ?D = g ` ?C\n  \\<lbrakk>?Y \\<in> \\<A>; SimplicialComplex.maxsimp ?Y ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n\ngoal (1 subgoal):\n 1. \\<And>C D.\n       \\<lbrakk>SimplicialComplex.maxsimp A C;\n        SimplicialComplex.maxsimp A D; C \\<sim> D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f g.\n                            OpposedThinChamberComplexFoldings A f g C \\<and>\n                            D = g ` C", "by    simp"], ["proof (state)\nthis:\n  \\<lbrakk>SimplicialComplex.maxsimp A ?C1; SimplicialComplex.maxsimp A ?D1;\n   ?C1 \\<sim> ?D1; ?C1 \\<noteq> ?D1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f g.\n                       OpposedThinChamberComplexFoldings A f g ?C1 \\<and>\n                       ?D1 = g ` ?C1\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem apartments_are_coxeter:\n  \"A\\<in>\\<A> \\<Longrightarrow> \\<exists>S::'a permutation set. (\n    CoxeterComplex S \\<and>\n    (\\<exists>\\<psi>. ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> \\<A> \\<Longrightarrow>\n    \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<exists>\\<psi>.\n           ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>)", "using no_trivial_apartments apartment_simplex_in_max[of A]\n        apartment_chamberD_simplex[of A] apartment_chamber[of A]\n        apartments_have_many_foldings[of A]\n        ThinChamberComplexManyFoldings.ex_iso_to_coxeter_complex[of A]"], ["proof (prove)\nusing this:\n  {} \\<notin> \\<A>\n  \\<lbrakk>A \\<in> \\<A>; ?y \\<in> A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       SimplicialComplex.maxsimp A x \\<and>\n                       order.greater_eq x ?y\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimp A ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> A\n  \\<lbrakk>A \\<in> \\<A>; SimplicialComplex.maxsimp A ?C\\<rbrakk>\n  \\<Longrightarrow> chamber ?C\n  \\<lbrakk>A \\<in> \\<A>; ?C \\<in> A; chamber ?C\\<rbrakk>\n  \\<Longrightarrow> ThinChamberComplexManyFoldings A ?C\n  ThinChamberComplexManyFoldings A ?C0.0 \\<Longrightarrow>\n  \\<exists>S.\n     CoxeterComplex S \\<and>\n     (\\<exists>\\<psi>.\n         ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>)\n\ngoal (1 subgoal):\n 1. A \\<in> \\<A> \\<Longrightarrow>\n    \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<exists>\\<psi>.\n           ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>)", "by    fastforce"], ["", "corollary apartments_are_uniformly_coxeter:\n  assumes \"X\\<noteq>{}\"\n  shows   \"\\<exists>S::'a permutation set. CoxeterComplex S \\<and>\n            (\\<forall>A\\<in>\\<A>. \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>\n            )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "from assms"], ["proof (chain)\npicking this:\n  X \\<noteq> {}", "obtain C where C: \"chamber C\""], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>C. chamber C \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using simplex_in_max"], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n  ?y \\<in> X \\<Longrightarrow>\n  \\<exists>x. chamber x \\<and> order.greater_eq x ?y\n\ngoal (1 subgoal):\n 1. (\\<And>C. chamber C \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fast"], ["proof (state)\nthis:\n  chamber C\n\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "from this"], ["proof (chain)\npicking this:\n  chamber C", "obtain A where A: \"A\\<in>\\<A>\" \"C\\<in>A\""], ["proof (prove)\nusing this:\n  chamber C\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<in> \\<A>; C \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using containtwo"], ["proof (prove)\nusing this:\n  chamber C\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. ?C \\<in> A \\<and> ?D \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<in> \\<A>; C \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  A \\<in> \\<A>\n  C \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "from A(1)"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>", "obtain S :: \"'a permutation set\" and \\<psi>\n    where S: \"CoxeterComplex S\"\n    and   \\<psi>: \"ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. (\\<And>S \\<psi>.\n        \\<lbrakk>CoxeterComplex S;\n         ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n          \\<psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using apartments_are_coxeter"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  ?A \\<in> \\<A> \\<Longrightarrow>\n  \\<exists>S.\n     CoxeterComplex S \\<and>\n     (\\<exists>\\<psi>.\n         ChamberComplexIsomorphism ?A (CoxeterComplex.TheComplex S) \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>S \\<psi>.\n        \\<lbrakk>CoxeterComplex S;\n         ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n          \\<psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by    fast"], ["proof (state)\nthis:\n  CoxeterComplex S\n  ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>\n\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "have \"\\<forall>B\\<in>\\<A>. \\<exists>\\<phi>.\n        ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>B\\<in>\\<A>.\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> \\<A> \\<Longrightarrow>\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "fix B"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> \\<A> \\<Longrightarrow>\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "assume B: \"B\\<in>\\<A>\""], ["proof (state)\nthis:\n  B \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> \\<A> \\<Longrightarrow>\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "hence \"B\\<noteq>{}\""], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n\ngoal (1 subgoal):\n 1. B \\<noteq> {}", "using no_trivial_apartments"], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  {} \\<notin> \\<A>\n\ngoal (1 subgoal):\n 1. B \\<noteq> {}", "by fast"], ["proof (state)\nthis:\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> \\<A> \\<Longrightarrow>\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "with B"], ["proof (chain)\npicking this:\n  B \\<in> \\<A>\n  B \\<noteq> {}", "obtain C' where C': \"chamber C'\" \"C'\\<in>B\""], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>chamber C'; C' \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using apartment_simplex_in_max apartment_chamberD_simplex\n            apartment_chamber[OF B]"], ["proof (prove)\nusing this:\n  B \\<in> \\<A>\n  B \\<noteq> {}\n  \\<lbrakk>?X \\<in> \\<A>; ?y \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       SimplicialComplex.maxsimp ?X x \\<and>\n                       order.greater_eq x ?y\n  \\<lbrakk>?X \\<in> \\<A>; SimplicialComplex.maxsimp ?X ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?X\n  SimplicialComplex.maxsimp B ?C \\<Longrightarrow> chamber ?C\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>chamber C'; C' \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by    force"], ["proof (state)\nthis:\n  chamber C'\n  C' \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> \\<A> \\<Longrightarrow>\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "from C C'(1)"], ["proof (chain)\npicking this:\n  chamber C\n  chamber C'", "obtain B' where \"B'\\<in>\\<A>\" \"C\\<in>B'\" \"C'\\<in>B'\""], ["proof (prove)\nusing this:\n  chamber C\n  chamber C'\n\ngoal (1 subgoal):\n 1. (\\<And>B'.\n        \\<lbrakk>B' \\<in> \\<A>; C \\<in> B'; C' \\<in> B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using containtwo"], ["proof (prove)\nusing this:\n  chamber C\n  chamber C'\n  \\<lbrakk>chamber ?C; chamber ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>A\\<in>\\<A>. ?C \\<in> A \\<and> ?D \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>B'.\n        \\<lbrakk>B' \\<in> \\<A>; C \\<in> B'; C' \\<in> B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  B' \\<in> \\<A>\n  C \\<in> B'\n  C' \\<in> B'\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       B \\<in> \\<A> \\<Longrightarrow>\n       \\<exists>\\<phi>.\n          ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "with A B C C' \\<psi>"], ["proof (chain)\npicking this:\n  A \\<in> \\<A>\n  C \\<in> A\n  B \\<in> \\<A>\n  chamber C\n  chamber C'\n  C' \\<in> B\n  ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>\n  B' \\<in> \\<A>\n  C \\<in> B'\n  C' \\<in> B'", "show  \"\\<exists>\\<phi>. ChamberComplexIsomorphism B\n              (CoxeterComplex.TheComplex S) \\<phi>\""], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  C \\<in> A\n  B \\<in> \\<A>\n  chamber C\n  chamber C'\n  C' \\<in> B\n  ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>\n  B' \\<in> \\<A>\n  C \\<in> B'\n  C' \\<in> B'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>.\n       ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "using strong_intersecttwo\n            ChamberComplexIsomorphism.iso_comp[of B' A _ _ \\<psi>]\n            ChamberComplexIsomorphism.iso_comp[of B B']"], ["proof (prove)\nusing this:\n  A \\<in> \\<A>\n  C \\<in> A\n  B \\<in> \\<A>\n  chamber C\n  chamber C'\n  C' \\<in> B\n  ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S) \\<psi>\n  B' \\<in> \\<A>\n  C \\<in> B'\n  C' \\<in> B'\n  \\<lbrakk>?A \\<in> \\<A>; ?A' \\<in> \\<A>; chamber ?C;\n   ?C \\<in> ?A \\<inter> ?A'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       ChamberComplexIsomorphism ?A ?A' f \\<and>\n                       fixespointwise f (\\<Union> (?A \\<inter> ?A'))\n  \\<lbrakk>ChamberComplexIsomorphism B' A ?f;\n   ChamberComplexIsomorphism A ?Z \\<psi>\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism B' ?Z (\\<psi> \\<circ> ?f)\n  \\<lbrakk>ChamberComplexIsomorphism B B' ?f;\n   ChamberComplexIsomorphism B' ?Z ?g\\<rbrakk>\n  \\<Longrightarrow> ChamberComplexIsomorphism B ?Z (?g \\<circ> ?f)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<phi>.\n       ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "by    blast"], ["proof (state)\nthis:\n  \\<exists>\\<phi>.\n     ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>B\\<in>\\<A>.\n     \\<exists>\\<phi>.\n        ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "with S"], ["proof (chain)\npicking this:\n  CoxeterComplex S\n  \\<forall>B\\<in>\\<A>.\n     \\<exists>\\<phi>.\n        ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  CoxeterComplex S\n  \\<forall>B\\<in>\\<A>.\n     \\<exists>\\<phi>.\n        ChamberComplexIsomorphism B (CoxeterComplex.TheComplex S) \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>S.\n       CoxeterComplex S \\<and>\n       (\\<forall>A\\<in>\\<A>.\n           \\<exists>\\<psi>.\n              ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n               \\<psi>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>S.\n     CoxeterComplex S \\<and>\n     (\\<forall>A\\<in>\\<A>.\n         \\<exists>\\<psi>.\n            ChamberComplexIsomorphism A (CoxeterComplex.TheComplex S)\n             \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context Building *)"], ["", "end"], ["", "(* theory *)"]]}