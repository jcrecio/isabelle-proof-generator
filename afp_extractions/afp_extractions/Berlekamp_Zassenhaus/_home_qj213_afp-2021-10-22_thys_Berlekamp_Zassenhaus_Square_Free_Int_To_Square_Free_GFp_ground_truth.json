{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Square_Free_Int_To_Square_Free_GFp.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma square_free_int_rat: assumes sf: \"square_free f\"\n  shows \"square_free (map_poly rat_of_int f)\"", "lemma content_free_unit:\n  assumes \"content (p::'a::{idom,semiring_gcd} poly) = 1\"\n  shows \"p dvd 1 \\<longleftrightarrow> degree p = 0\"", "lemma square_free_imp_resultant_non_zero: assumes sf: \"square_free (f :: int poly)\"\n  shows \"resultant f (pderiv f) \\<noteq> 0\"", "lemma large_mod_0: assumes \"(n :: int) > 1\" \"\\<bar>k\\<bar> < n\" \"k mod n = 0\" shows \"k = 0\"", "lemma square_free_int_imp_resultant_non_zero_mod_ring: assumes sf: \"square_free f\" \n  and large: \"int CARD('a) > separable_bound f\"\n  shows \"resultant (map_poly of_int f :: 'a :: prime_card mod_ring poly) (pderiv (map_poly of_int f)) \\<noteq> 0\n  \\<and> map_poly of_int f \\<noteq> (0 :: 'a mod_ring poly)\"", "lemma square_free_int_imp_separable_mod_ring: assumes sf: \"square_free f\" \n  and large: \"int CARD('a) > separable_bound f\"\n  shows \"separable (map_poly of_int f :: 'a :: prime_card mod_ring poly)\"", "lemma square_free_int_imp_square_free_mod_ring: assumes sf: \"square_free f\" \n  and large: \"int CARD('a) > separable_bound f\"\nshows \"square_free (map_poly of_int f :: 'a :: prime_card mod_ring poly)\""], "translations": [["", "lemma square_free_int_rat: assumes sf: \"square_free f\"\n  shows \"square_free (map_poly rat_of_int f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "let ?r = \"map_poly rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "from sf[unfolded square_free_def]"], ["proof (chain)\npicking this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)", "have f0: \"f \\<noteq> 0\" \"\\<And> q. degree q \\<noteq> 0 \\<Longrightarrow> \\<not> q * q dvd f\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    (\\<And>q. degree q \\<noteq> 0 \\<Longrightarrow> \\<not> q * q dvd f)", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  degree ?q \\<noteq> 0 \\<Longrightarrow> \\<not> ?q * ?q dvd f\n\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "proof (rule square_freeI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False\n 2. of_int_poly f \\<noteq> 0", "show \"?r f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly f \\<noteq> 0", "using f0"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  degree ?q \\<noteq> 0 \\<Longrightarrow> \\<not> ?q * ?q dvd f\n\ngoal (1 subgoal):\n 1. of_int_poly f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  of_int_poly f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "assume dq: \"degree q > 0\" and dvd: \"q * q dvd ?r f\""], ["proof (state)\nthis:\n  0 < degree q\n  q * q dvd of_int_poly f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "hence q0: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < degree q\n  q * q dvd of_int_poly f\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "obtain q' c where norm: \"rat_to_normalized_int_poly q = (c,q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c q'.\n        rat_to_normalized_int_poly q = (c, q') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  rat_to_normalized_int_poly q = (c, q')\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from rat_to_normalized_int_poly[OF norm]"], ["proof (chain)\npicking this:\n  q = Polynomial.smult c (of_int_poly q')\n  0 < c\n  q \\<noteq> 0 \\<Longrightarrow> content q' = 1\n  degree q' = degree q", "have c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q = Polynomial.smult c (of_int_poly q')\n  0 < c\n  q \\<noteq> 0 \\<Longrightarrow> content q' = 1\n  degree q' = degree q\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "note q = rat_to_normalized_int_poly(1)[OF norm]"], ["proof (state)\nthis:\n  q = Polynomial.smult c (of_int_poly q')\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from dvd"], ["proof (chain)\npicking this:\n  q * q dvd of_int_poly f", "obtain k where rf: \"?r f = q * (q * k)\""], ["proof (prove)\nusing this:\n  q * q dvd of_int_poly f\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        of_int_poly f = q * (q * k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. of_int_poly f = q * q * k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        of_int_poly f = q * (q * k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  of_int_poly f = q * (q * k)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from rat_to_int_factor_explicit[OF this norm]"], ["proof (chain)\npicking this:\n  \\<exists>r. f = q' * Polynomial.smult (content f) r", "obtain s where \n      f: \"f = q' * smult (content f) s\""], ["proof (prove)\nusing this:\n  \\<exists>r. f = q' * Polynomial.smult (content f) r\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        f = q' * Polynomial.smult (content f) s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f = q' * Polynomial.smult (content f) s\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "let ?s = \"smult (content f) s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from arg_cong[OF f, of ?r] c0"], ["proof (chain)\npicking this:\n  of_int_poly f = of_int_poly (q' * Polynomial.smult (content f) s)\n  c \\<noteq> 0", "have \"?r f = q * (smult (inverse c) (?r ?s))\""], ["proof (prove)\nusing this:\n  of_int_poly f = of_int_poly (q' * Polynomial.smult (content f) s)\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int_poly f =\n    q *\n    Polynomial.smult (inverse c)\n     (of_int_poly (Polynomial.smult (content f) s))", "by (simp add: field_simps q hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly f =\n  q *\n  Polynomial.smult (inverse c)\n   (of_int_poly (Polynomial.smult (content f) s))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from arg_cong[OF this[unfolded rf], of \"\\<lambda> f. f div q\"] q0"], ["proof (chain)\npicking this:\n  q * (q * k) div q =\n  q *\n  Polynomial.smult (inverse c)\n   (of_int_poly (Polynomial.smult (content f) s)) div\n  q\n  q \\<noteq> 0", "have \"q * k = smult (inverse c) (?r ?s)\""], ["proof (prove)\nusing this:\n  q * (q * k) div q =\n  q *\n  Polynomial.smult (inverse c)\n   (of_int_poly (Polynomial.smult (content f) s)) div\n  q\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q * k =\n    Polynomial.smult (inverse c)\n     (of_int_poly (Polynomial.smult (content f) s))", "by (metis nonzero_mult_div_cancel_left)"], ["proof (state)\nthis:\n  q * k =\n  Polynomial.smult (inverse c)\n   (of_int_poly (Polynomial.smult (content f) s))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from arg_cong[OF this, of \"smult c\"]"], ["proof (chain)\npicking this:\n  Polynomial.smult c (q * k) =\n  Polynomial.smult c\n   (Polynomial.smult (inverse c)\n     (of_int_poly (Polynomial.smult (content f) s)))", "have \"?r ?s = q * smult c k\""], ["proof (prove)\nusing this:\n  Polynomial.smult c (q * k) =\n  Polynomial.smult c\n   (Polynomial.smult (inverse c)\n     (of_int_poly (Polynomial.smult (content f) s)))\n\ngoal (1 subgoal):\n 1. of_int_poly (Polynomial.smult (content f) s) = q * Polynomial.smult c k", "using c0"], ["proof (prove)\nusing this:\n  Polynomial.smult c (q * k) =\n  Polynomial.smult c\n   (Polynomial.smult (inverse c)\n     (of_int_poly (Polynomial.smult (content f) s)))\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int_poly (Polynomial.smult (content f) s) = q * Polynomial.smult c k", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  of_int_poly (Polynomial.smult (content f) s) = q * Polynomial.smult c k\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from rat_to_int_factor_explicit[OF this norm]"], ["proof (chain)\npicking this:\n  \\<exists>r.\n     Polynomial.smult (content f) s =\n     q' * Polynomial.smult (content (Polynomial.smult (content f) s)) r", "obtain t where \"?s = q' * t\""], ["proof (prove)\nusing this:\n  \\<exists>r.\n     Polynomial.smult (content f) s =\n     q' * Polynomial.smult (content (Polynomial.smult (content f) s)) r\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        Polynomial.smult (content f) s = q' * t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Polynomial.smult (content f) s = q' * t\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from f[unfolded this] sf[unfolded square_free_def] f0"], ["proof (chain)\npicking this:\n  f = q' * (q' * t)\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n  f \\<noteq> 0\n  degree ?q \\<noteq> 0 \\<Longrightarrow> \\<not> ?q * ?q dvd f", "have \"degree q' = 0\""], ["proof (prove)\nusing this:\n  f = q' * (q' * t)\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n  f \\<noteq> 0\n  degree ?q \\<noteq> 0 \\<Longrightarrow> \\<not> ?q * ?q dvd f\n\ngoal (1 subgoal):\n 1. degree q' = 0", "by auto"], ["proof (state)\nthis:\n  degree q' = 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd of_int_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "with rat_to_normalized_int_poly(4)[OF norm] dq"], ["proof (chain)\npicking this:\n  degree q' = degree q\n  0 < degree q\n  degree q' = 0", "show False"], ["proof (prove)\nusing this:\n  degree q' = degree q\n  0 < degree q\n  degree q' = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free (of_int_poly f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_free_unit:\n  assumes \"content (p::'a::{idom,semiring_gcd} poly) = 1\"\n  shows \"p dvd 1 \\<longleftrightarrow> degree p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p dvd 1) = (degree p = 0)", "by (insert assms, auto dest!:degree0_coeffs simp: normalize_1_iff poly_dvd_1)"], ["", "lemma square_free_imp_resultant_non_zero: assumes sf: \"square_free (f :: int poly)\"\n  shows \"resultant f (pderiv f) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resultant f (pderiv f) \\<noteq> 0", "proof (cases \"degree f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0\n 2. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "case True"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0\n 2. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. f = [:a:]", "obtain c where f: \"f = [:c:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. f = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. f = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  f = [:c:]\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0\n 2. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "with sf"], ["proof (chain)\npicking this:\n  square_free f\n  f = [:c:]", "have c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  square_free f\n  f = [:c:]\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "unfolding square_free_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n  f = [:c:]\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0\n 2. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. resultant f (pderiv f) \\<noteq> 0", "unfolding f"], ["proof (prove)\ngoal (1 subgoal):\n 1. resultant [:c:] (pderiv [:c:]) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  resultant f (pderiv f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "case False"], ["proof (state)\nthis:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "note deg = this"], ["proof (state)\nthis:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "define pp where \"pp = primitive_part f\""], ["proof (state)\nthis:\n  pp = primitive_part f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "define c where \"c = content f\""], ["proof (state)\nthis:\n  c = content f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from sf"], ["proof (chain)\npicking this:\n  square_free f", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  square_free f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "unfolding square_free_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "hence c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "unfolding c_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. content f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "have f: \"f = smult c pp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult c pp", "unfolding c_def pp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult (content f) (primitive_part f)", "unfolding content_times_primitive_part[of f]"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = f", ".."], ["proof (state)\nthis:\n  f = Polynomial.smult c pp\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from sf[unfolded f] c0"], ["proof (chain)\npicking this:\n  square_free (Polynomial.smult c pp)\n  c \\<noteq> 0", "have sf': \"square_free pp\""], ["proof (prove)\nusing this:\n  square_free (Polynomial.smult c pp)\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free pp", "by (metis dvd_smult smult_0_right square_free_def)"], ["proof (state)\nthis:\n  square_free pp\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from deg[unfolded f] c0"], ["proof (chain)\npicking this:\n  degree (Polynomial.smult c pp) \\<noteq> 0\n  c \\<noteq> 0", "have deg': \"\\<And> x. degree pp > 0 \\<or> x\""], ["proof (prove)\nusing this:\n  degree (Polynomial.smult c pp) \\<noteq> 0\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x. 0 < degree pp \\<or> x", "by auto"], ["proof (state)\nthis:\n  0 < degree pp \\<or> ?x\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from content_primitive_part[OF f0]"], ["proof (chain)\npicking this:\n  content (primitive_part f) = 1", "have cp: \"content pp = 1\""], ["proof (prove)\nusing this:\n  content (primitive_part f) = 1\n\ngoal (1 subgoal):\n 1. content pp = 1", "unfolding pp_def"], ["proof (prove)\nusing this:\n  content (primitive_part f) = 1\n\ngoal (1 subgoal):\n 1. content (primitive_part f) = 1", "."], ["proof (state)\nthis:\n  content pp = 1\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "let ?p' = \"pderiv pp\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "assume \"resultant pp ?p' = 0\""], ["proof (state)\nthis:\n  resultant pp (pderiv pp) = 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from this[unfolded resultant_0_gcd]"], ["proof (chain)\npicking this:\n  degree (gcd pp (pderiv pp)) \\<noteq> 0", "have \"\\<not> coprime pp ?p'\""], ["proof (prove)\nusing this:\n  degree (gcd pp (pderiv pp)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> coprime pp (pderiv pp)", "by auto"], ["proof (state)\nthis:\n  \\<not> coprime pp (pderiv pp)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "then"], ["proof (chain)\npicking this:\n  \\<not> coprime pp (pderiv pp)", "obtain r where r: \"r dvd pp\" \"r dvd ?p'\" \"\\<not> r dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> coprime pp (pderiv pp)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r dvd pp; r dvd pderiv pp; \\<not> is_unit r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast elim: not_coprimeE)"], ["proof (state)\nthis:\n  r dvd pp\n  r dvd pderiv pp\n  \\<not> is_unit r\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from r(1)"], ["proof (chain)\npicking this:\n  r dvd pp", "obtain k where \"pp = r * k\""], ["proof (prove)\nusing this:\n  r dvd pp\n\ngoal (1 subgoal):\n 1. (\\<And>k. pp = r * k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  pp = r * k\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from pos_zmult_eq_1_iff_lemma[OF arg_cong[OF this, \n      of content, unfolded content_mult cp, symmetric]] content_ge_0_int[of r]"], ["proof (chain)\npicking this:\n  content r = 1 \\<or> content r = - 1\n  0 \\<le> content r", "have cr: \"content r = 1\""], ["proof (prove)\nusing this:\n  content r = 1 \\<or> content r = - 1\n  0 \\<le> content r\n\ngoal (1 subgoal):\n 1. content r = 1", "by auto"], ["proof (state)\nthis:\n  content r = 1\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "with r(3) content_free_unit"], ["proof (chain)\npicking this:\n  \\<not> is_unit r\n  content ?p = (1::?'a) \\<Longrightarrow> (?p dvd 1) = (degree ?p = 0)\n  content r = 1", "have dr: \"degree r \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> is_unit r\n  content ?p = (1::?'a) \\<Longrightarrow> (?p dvd 1) = (degree ?p = 0)\n  content r = 1\n\ngoal (1 subgoal):\n 1. degree r \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "let ?r = \"map_poly rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from r(1)"], ["proof (chain)\npicking this:\n  r dvd pp", "have dvd: \"?r r dvd ?r pp\""], ["proof (prove)\nusing this:\n  r dvd pp\n\ngoal (1 subgoal):\n 1. of_int_poly r dvd of_int_poly pp", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. pp = r * k\n\ngoal (1 subgoal):\n 1. \\<exists>k. of_int_poly pp = of_int_poly r * k", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly r dvd of_int_poly pp\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from r(2)"], ["proof (chain)\npicking this:\n  r dvd pderiv pp", "have \"?r r dvd ?r ?p'\""], ["proof (prove)\nusing this:\n  r dvd pderiv pp\n\ngoal (1 subgoal):\n 1. of_int_poly r dvd of_int_poly (pderiv pp)", "apply (intro of_int_poly_hom.hom_dvd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r dvd pderiv pp \\<Longrightarrow> r dvd pderiv pp", "by auto"], ["proof (state)\nthis:\n  of_int_poly r dvd of_int_poly (pderiv pp)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  of_int_poly r dvd of_int_poly (pderiv pp)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "have \"?r ?p' = pderiv (?r pp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly (pderiv pp) = pderiv (of_int_poly pp)", "unfolding of_int_hom.map_poly_pderiv"], ["proof (prove)\ngoal (1 subgoal):\n 1. pderiv (of_int_poly pp) = pderiv (of_int_poly pp)", ".."], ["proof (state)\nthis:\n  of_int_poly (pderiv pp) = pderiv (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  of_int_poly r dvd pderiv (of_int_poly pp)", "have dvd': \"?r r dvd pderiv (?r pp)\""], ["proof (prove)\nusing this:\n  of_int_poly r dvd pderiv (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. of_int_poly r dvd pderiv (of_int_poly pp)", "by auto"], ["proof (state)\nthis:\n  of_int_poly r dvd pderiv (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from dr"], ["proof (chain)\npicking this:\n  degree r \\<noteq> 0", "have dr': \"degree (?r r) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (of_int_poly r) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  degree (of_int_poly r) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from square_free_imp_separable[OF square_free_int_rat[OF sf']]"], ["proof (chain)\npicking this:\n  separable (of_int_poly pp)", "have \"separable (?r pp)\""], ["proof (prove)\nusing this:\n  separable (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. separable (of_int_poly pp)", "."], ["proof (state)\nthis:\n  separable (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "hence cop: \"coprime (?r pp) (pderiv (?r pp))\""], ["proof (prove)\nusing this:\n  separable (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. coprime (of_int_poly pp) (pderiv (of_int_poly pp))", "unfolding separable_def"], ["proof (prove)\nusing this:\n  coprime (of_int_poly pp) (pderiv (of_int_poly pp))\n\ngoal (1 subgoal):\n 1. coprime (of_int_poly pp) (pderiv (of_int_poly pp))", "."], ["proof (state)\nthis:\n  coprime (of_int_poly pp) (pderiv (of_int_poly pp))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from f0 f"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  f = Polynomial.smult c pp", "have pp0: \"pp \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  f = Polynomial.smult c pp\n\ngoal (1 subgoal):\n 1. pp \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  pp \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from dvd dvd'"], ["proof (chain)\npicking this:\n  of_int_poly r dvd of_int_poly pp\n  of_int_poly r dvd pderiv (of_int_poly pp)", "have \"?r r dvd gcd (?r pp) (pderiv (?r pp))\""], ["proof (prove)\nusing this:\n  of_int_poly r dvd of_int_poly pp\n  of_int_poly r dvd pderiv (of_int_poly pp)\n\ngoal (1 subgoal):\n 1. of_int_poly r dvd gcd (of_int_poly pp) (pderiv (of_int_poly pp))", "by auto"], ["proof (state)\nthis:\n  of_int_poly r dvd gcd (of_int_poly pp) (pderiv (of_int_poly pp))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "from divides_degree[OF this] pp0"], ["proof (chain)\npicking this:\n  degree (of_int_poly r)\n  \\<le> degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp))) \\<or>\n  gcd (of_int_poly pp) (pderiv (of_int_poly pp)) = 0\n  pp \\<noteq> 0", "have \"degree (?r r) \\<le> degree (gcd (?r pp) (pderiv (?r pp)))\""], ["proof (prove)\nusing this:\n  degree (of_int_poly r)\n  \\<le> degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp))) \\<or>\n  gcd (of_int_poly pp) (pderiv (of_int_poly pp)) = 0\n  pp \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (of_int_poly r)\n    \\<le> degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp)))", "by auto"], ["proof (state)\nthis:\n  degree (of_int_poly r)\n  \\<le> degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp)))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "with dr'"], ["proof (chain)\npicking this:\n  degree (of_int_poly r) \\<noteq> 0\n  degree (of_int_poly r)\n  \\<le> degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp)))", "have \"degree (gcd (?r pp) (pderiv (?r pp))) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree (of_int_poly r) \\<noteq> 0\n  degree (of_int_poly r)\n  \\<le> degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp)))\n\ngoal (1 subgoal):\n 1. degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp))) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp))) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "hence \"\\<not> coprime (?r pp) (pderiv (?r pp))\""], ["proof (prove)\nusing this:\n  degree (gcd (of_int_poly pp) (pderiv (of_int_poly pp))) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> coprime (of_int_poly pp) (pderiv (of_int_poly pp))", "by auto"], ["proof (state)\nthis:\n  \\<not> coprime (of_int_poly pp) (pderiv (of_int_poly pp))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "with cop"], ["proof (chain)\npicking this:\n  coprime (of_int_poly pp) (pderiv (of_int_poly pp))\n  \\<not> coprime (of_int_poly pp) (pderiv (of_int_poly pp))", "have False"], ["proof (prove)\nusing this:\n  coprime (of_int_poly pp) (pderiv (of_int_poly pp))\n  \\<not> coprime (of_int_poly pp) (pderiv (of_int_poly pp))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "}"], ["proof (state)\nthis:\n  resultant pp (pderiv pp) = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "hence \"resultant pp ?p' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  resultant pp (pderiv pp) = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. resultant pp (pderiv pp) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  resultant pp (pderiv pp) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "with resultant_smult_left[OF c0, of pp ?p', folded f] c0"], ["proof (chain)\npicking this:\n  resultant f (pderiv pp) =\n  c ^ degree (pderiv pp) * resultant pp (pderiv pp)\n  c \\<noteq> 0\n  resultant pp (pderiv pp) \\<noteq> 0", "have \"resultant f ?p' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  resultant f (pderiv pp) =\n  c ^ degree (pderiv pp) * resultant pp (pderiv pp)\n  c \\<noteq> 0\n  resultant pp (pderiv pp) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. resultant f (pderiv pp) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  resultant f (pderiv pp) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow> resultant f (pderiv f) \\<noteq> 0", "with resultant_smult_right[OF c0, of f ?p', folded pderiv_smult f] c0"], ["proof (chain)\npicking this:\n  resultant f (pderiv f) = c ^ degree f * resultant f (pderiv pp)\n  c \\<noteq> 0\n  resultant f (pderiv pp) \\<noteq> 0", "show \"resultant f (pderiv f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  resultant f (pderiv f) = c ^ degree f * resultant f (pderiv pp)\n  c \\<noteq> 0\n  resultant f (pderiv pp) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. resultant f (pderiv f) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  resultant f (pderiv f) \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma large_mod_0: assumes \"(n :: int) > 1\" \"\\<bar>k\\<bar> < n\" \"k mod n = 0\" shows \"k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. k = 0", "from \\<open>k mod n = 0\\<close>"], ["proof (chain)\npicking this:\n  k mod n = 0", "have \"n dvd k\""], ["proof (prove)\nusing this:\n  k mod n = 0\n\ngoal (1 subgoal):\n 1. n dvd k", "by auto"], ["proof (state)\nthis:\n  n dvd k\n\ngoal (1 subgoal):\n 1. k = 0", "then"], ["proof (chain)\npicking this:\n  n dvd k", "obtain m where \"k = n * m\""], ["proof (prove)\nusing this:\n  n dvd k\n\ngoal (1 subgoal):\n 1. (\\<And>m. k = n * m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  k = n * m\n\ngoal (1 subgoal):\n 1. k = 0", "with \\<open>n > 1\\<close> \\<open>\\<bar>k\\<bar> < n\\<close>"], ["proof (chain)\npicking this:\n  1 < n\n  \\<bar>k\\<bar> < n\n  k = n * m", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < n\n  \\<bar>k\\<bar> < n\n  k = n * m\n\ngoal (1 subgoal):\n 1. k = 0", "by (auto simp add: abs_mult)"], ["proof (state)\nthis:\n  k = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "definition separable_bound :: \"int poly \\<Rightarrow> int\" where\n  \"separable_bound f = max (abs (resultant f (pderiv f))) \n    (max (abs (lead_coeff f)) (abs (lead_coeff (pderiv f))))\""], ["", "lemma square_free_int_imp_resultant_non_zero_mod_ring: assumes sf: \"square_free f\" \n  and large: \"int CARD('a) > separable_bound f\"\n  shows \"resultant (map_poly of_int f :: 'a :: prime_card mod_ring poly) (pderiv (map_poly of_int f)) \\<noteq> 0\n  \\<and> map_poly of_int f \\<noteq> (0 :: 'a mod_ring poly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) \\<noteq> 0 \\<and>\n    of_int_poly f \\<noteq> 0", "proof (intro conjI, rule notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "let ?i = \"of_int :: int \\<Rightarrow> 'a mod_ring\""], ["proof (state)\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "let ?m = \"of_int_poly :: _ \\<Rightarrow> 'a mod_ring poly\""], ["proof (state)\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "let ?f = \"?m f\""], ["proof (state)\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "from sf[unfolded square_free_def]"], ["proof (chain)\npicking this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "hence lf: \"lead_coeff f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lead_coeff f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  lead_coeff f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "{"], ["proof (state)\nthis:\n  lead_coeff f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "fix k :: int"], ["proof (state)\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "have C1: \"int CARD('a) > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < int CARD('a)", "using prime_card[where 'a = 'a]"], ["proof (prove)\nusing this:\n  prime CARD('a)\n\ngoal (1 subgoal):\n 1. 1 < int CARD('a)", "by (auto simp: prime_nat_iff)"], ["proof (state)\nthis:\n  1 < int CARD('a)\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "assume \"abs k < CARD('a)\" and \"?i k = 0\""], ["proof (state)\nthis:\n  \\<bar>k\\<bar> < int CARD('a)\n  of_int k = 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "hence \"k = 0\""], ["proof (prove)\nusing this:\n  \\<bar>k\\<bar> < int CARD('a)\n  of_int k = 0\n\ngoal (1 subgoal):\n 1. k = 0", "unfolding of_int_of_int_mod_ring"], ["proof (prove)\nusing this:\n  \\<bar>k\\<bar> < int CARD('a)\n  of_int_mod_ring k = 0\n\ngoal (1 subgoal):\n 1. k = 0", "by (transfer) (rule large_mod_0[OF C1])"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<bar>?k2\\<bar> < int CARD('a); of_int ?k2 = 0\\<rbrakk>\n  \\<Longrightarrow> ?k2 = 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "note of_int_0 = this"], ["proof (state)\nthis:\n  \\<lbrakk>\\<bar>?k2\\<bar> < int CARD('a); of_int ?k2 = 0\\<rbrakk>\n  \\<Longrightarrow> ?k2 = 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "from square_free_imp_resultant_non_zero[OF sf]"], ["proof (chain)\npicking this:\n  resultant f (pderiv f) \\<noteq> 0", "have non0: \"resultant f (pderiv f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  resultant f (pderiv f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. resultant f (pderiv f) \\<noteq> 0", "."], ["proof (state)\nthis:\n  resultant f (pderiv f) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "{"], ["proof (state)\nthis:\n  resultant f (pderiv f) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "fix g :: \"int poly\""], ["proof (state)\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "assume abs: \"abs (lead_coeff g) < CARD('a)\""], ["proof (state)\nthis:\n  \\<bar>lead_coeff g\\<bar> < int CARD('a)\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "have \"degree (?m g) = degree g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (of_int_poly g) = degree g", "by (rule degree_map_poly, insert of_int_0[OF abs], auto)"], ["proof (state)\nthis:\n  degree (of_int_poly g) = degree g\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "}"], ["proof (state)\nthis:\n  \\<bar>lead_coeff ?g2\\<bar> < int CARD('a) \\<Longrightarrow>\n  degree (of_int_poly ?g2) = degree ?g2\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "note deg = this"], ["proof (state)\nthis:\n  \\<bar>lead_coeff ?g2\\<bar> < int CARD('a) \\<Longrightarrow>\n  degree (of_int_poly ?g2) = degree ?g2\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "note large = large[unfolded separable_bound_def]"], ["proof (state)\nthis:\n  max \\<bar>resultant f (pderiv f)\\<bar>\n   (max \\<bar>lead_coeff f\\<bar> \\<bar>lead_coeff (pderiv f)\\<bar>)\n  < int CARD('a)\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "from of_int_0[of \"lead_coeff f\"] large lf"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<bar>lead_coeff f\\<bar> < int CARD('a);\n   of_int (lead_coeff f) = 0\\<rbrakk>\n  \\<Longrightarrow> lead_coeff f = 0\n  max \\<bar>resultant f (pderiv f)\\<bar>\n   (max \\<bar>lead_coeff f\\<bar> \\<bar>lead_coeff (pderiv f)\\<bar>)\n  < int CARD('a)\n  lead_coeff f \\<noteq> 0", "have \"?i (lead_coeff f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<bar>lead_coeff f\\<bar> < int CARD('a);\n   of_int (lead_coeff f) = 0\\<rbrakk>\n  \\<Longrightarrow> lead_coeff f = 0\n  max \\<bar>resultant f (pderiv f)\\<bar>\n   (max \\<bar>lead_coeff f\\<bar> \\<bar>lead_coeff (pderiv f)\\<bar>)\n  < int CARD('a)\n  lead_coeff f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int (lead_coeff f) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  of_int (lead_coeff f) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False\n 2. of_int_poly f \\<noteq> 0", "thus f0: \"?f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  of_int (lead_coeff f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int_poly f \\<noteq> 0", "unfolding poly_eq_iff"], ["proof (prove)\nusing this:\n  of_int (lead_coeff f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. poly.coeff (of_int_poly f) n = poly.coeff 0 n)", "by auto"], ["proof (state)\nthis:\n  of_int_poly f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False", "assume 0: \"resultant ?f (pderiv ?f) = 0\""], ["proof (state)\nthis:\n  resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0\n\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False", "have \"resultant ?f (pderiv ?f) = ?i (resultant f (pderiv f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) =\n    of_int (resultant f (pderiv f))", "unfolding of_int_hom.map_poly_pderiv[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (of_int_poly (pderiv f)) =\n    of_int (resultant f (pderiv f))", "by (subst of_int_hom.resultant_map_poly(1)[OF deg deg], insert large, auto simp: hom_distribs)"], ["proof (state)\nthis:\n  resultant (of_int_poly f) (pderiv (of_int_poly f)) =\n  of_int (resultant f (pderiv f))\n\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) = 0 \\<Longrightarrow>\n    False", "from of_int_0[OF _ this[symmetric, unfolded 0]] non0"], ["proof (chain)\npicking this:\n  \\<bar>resultant f (pderiv f)\\<bar> < int CARD('a) \\<Longrightarrow>\n  resultant f (pderiv f) = 0\n  resultant f (pderiv f) \\<noteq> 0", "show False"], ["proof (prove)\nusing this:\n  \\<bar>resultant f (pderiv f)\\<bar> < int CARD('a) \\<Longrightarrow>\n  resultant f (pderiv f) = 0\n  resultant f (pderiv f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "using large"], ["proof (prove)\nusing this:\n  \\<bar>resultant f (pderiv f)\\<bar> < int CARD('a) \\<Longrightarrow>\n  resultant f (pderiv f) = 0\n  resultant f (pderiv f) \\<noteq> 0\n  max \\<bar>resultant f (pderiv f)\\<bar>\n   (max \\<bar>lead_coeff f\\<bar> \\<bar>lead_coeff (pderiv f)\\<bar>)\n  < int CARD('a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma square_free_int_imp_separable_mod_ring: assumes sf: \"square_free f\" \n  and large: \"int CARD('a) > separable_bound f\"\n  shows \"separable (map_poly of_int f :: 'a :: prime_card mod_ring poly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "define g where \"g = map_poly (of_int :: int \\<Rightarrow> 'a mod_ring) f\""], ["proof (state)\nthis:\n  g = of_int_poly f\n\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "from square_free_int_imp_resultant_non_zero_mod_ring[OF sf large]"], ["proof (chain)\npicking this:\n  resultant (of_int_poly f) (pderiv (of_int_poly f)) \\<noteq> 0 \\<and>\n  of_int_poly f \\<noteq> 0", "have res: \"resultant g (pderiv g) \\<noteq> 0\" and g: \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  resultant (of_int_poly f) (pderiv (of_int_poly f)) \\<noteq> 0 \\<and>\n  of_int_poly f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. resultant g (pderiv g) \\<noteq> 0 &&& g \\<noteq> 0", "unfolding g_def"], ["proof (prove)\nusing this:\n  resultant (of_int_poly f) (pderiv (of_int_poly f)) \\<noteq> 0 \\<and>\n  of_int_poly f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. resultant (of_int_poly f) (pderiv (of_int_poly f)) \\<noteq> 0 &&&\n    of_int_poly f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  resultant g (pderiv g) \\<noteq> 0\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "from res[unfolded resultant_0_gcd]"], ["proof (chain)\npicking this:\n  \\<not> degree (gcd g (pderiv g)) \\<noteq> 0", "have \"degree (gcd g (pderiv g)) = 0\""], ["proof (prove)\nusing this:\n  \\<not> degree (gcd g (pderiv g)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (gcd g (pderiv g)) = 0", "by auto"], ["proof (state)\nthis:\n  degree (gcd g (pderiv g)) = 0\n\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. gcd g (pderiv g) = [:a:]", "have \"separable g\""], ["proof (prove)\nusing this:\n  \\<exists>a. gcd g (pderiv g) = [:a:]\n\ngoal (1 subgoal):\n 1. separable g", "unfolding separable_def"], ["proof (prove)\nusing this:\n  \\<exists>a. gcd g (pderiv g) = [:a:]\n\ngoal (1 subgoal):\n 1. coprime g (pderiv g)", "by (metis degree_pCons_0 g gcd_eq_0_iff is_unit_gcd is_unit_iff_degree)"], ["proof (state)\nthis:\n  separable g\n\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  separable g\n\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "unfolding g_def"], ["proof (prove)\nusing this:\n  separable (of_int_poly f)\n\ngoal (1 subgoal):\n 1. separable (of_int_poly f)", "."], ["proof (state)\nthis:\n  separable (of_int_poly f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma square_free_int_imp_square_free_mod_ring: assumes sf: \"square_free f\" \n  and large: \"int CARD('a) > separable_bound f\"\nshows \"square_free (map_poly of_int f :: 'a :: prime_card mod_ring poly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "using separable_imp_square_free[OF square_free_int_imp_separable_mod_ring[OF assms]]"], ["proof (prove)\nusing this:\n  square_free (of_int_poly f)\n\ngoal (1 subgoal):\n 1. square_free (of_int_poly f)", "."], ["", "end"]]}