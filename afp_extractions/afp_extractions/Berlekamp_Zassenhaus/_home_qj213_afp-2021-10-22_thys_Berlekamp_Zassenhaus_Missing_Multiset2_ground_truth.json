{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Missing_Multiset2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma id_imp_bij:\n  assumes id: \"\\<And>x. f (f x) = x\" shows \"bij f\"", "lemma rel_mset_Zero_iff[simp]:\n  shows \"rel_mset rel {#} Y \\<longleftrightarrow> Y = {#}\" and \"rel_mset rel X {#} \\<longleftrightarrow> X = {#}\"", "lemma is_mset_setD[dest]: \"is_mset_set X \\<Longrightarrow> x \\<in># X \\<Longrightarrow> count X x = 1\"", "lemma is_mset_setI[intro]:\n  assumes \"\\<And>x. x \\<in># X \\<Longrightarrow> count X x = 1\"\n  shows \"is_mset_set X\"", "lemma is_mset_set[simp]: \"is_mset_set (mset_set X)\"", "lemma is_mset_set_add[simp]:\n  \"is_mset_set (X + {#x#}) \\<longleftrightarrow> is_mset_set X \\<and> x \\<notin># X\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma mset_set_id[simp]:\n  assumes \"is_mset_set X\"\n  shows \"mset_set (set_mset X) = X\"", "lemma count_image_mset:\n  shows \"count (image_mset f X) y = (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x)\"", "lemma is_mset_set_image:\n  assumes \"inj_on f (set_mset X)\" and \"is_mset_set X\"\n  shows \"is_mset_set (image_mset f X)\"", "lemma ex_mset_zip_right:\n  assumes \"length xs = length ys\" \"mset ys' = mset ys\"\n  shows \"\\<exists>xs'. length ys' = length xs' \\<and> mset (zip xs' ys') = mset (zip xs ys)\"", "lemma list_all2_reorder_right_invariance:\n  assumes rel: \"list_all2 R xs ys\" and ms_y: \"mset ys' = mset ys\"\n  shows \"\\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs\"", "lemma rel_mset_via_perm: \"rel_mset rel (mset xs) (mset ys) \\<longleftrightarrow> (\\<exists>zs. perm xs zs \\<and> list_all2 rel zs ys)\"", "lemma rel_mset_free:\n  assumes rel: \"rel_mset rel X Y\" and xs: \"mset xs = X\"\n  shows \"\\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys\"", "lemma rel_mset_split:\n  assumes rel: \"rel_mset rel (X1+X2) Y\"\n  shows \"\\<exists>Y1 Y2. Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2\"", "lemma rel_mset_OO:\n  assumes AB: \"rel_mset R A B\" and BC: \"rel_mset S B C\"\n  shows \"rel_mset (R OO S) A C\""], "translations": [["", "lemma id_imp_bij:\n  assumes id: \"\\<And>x. f (f x) = x\" shows \"bij f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij f", "proof (intro bijI injI surjI[of f, OF id])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. f x = f y \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. f x = f y \\<Longrightarrow> x = y", "assume \"f x = f y\""], ["proof (state)\nthis:\n  f x = f y\n\ngoal (1 subgoal):\n 1. \\<And>x y. f x = f y \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  f x = f y", "have \"f (f x) = f (f y)\""], ["proof (prove)\nusing this:\n  f x = f y\n\ngoal (1 subgoal):\n 1. f (f x) = f (f y)", "by auto"], ["proof (state)\nthis:\n  f (f x) = f (f y)\n\ngoal (1 subgoal):\n 1. \\<And>x y. f x = f y \\<Longrightarrow> x = y", "with id"], ["proof (chain)\npicking this:\n  f (f ?x) = ?x\n  f (f x) = f (f y)", "show \"x = y\""], ["proof (prove)\nusing this:\n  f (f ?x) = ?x\n  f (f x) = f (f y)\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_mset_Zero_iff[simp]:\n  shows \"rel_mset rel {#} Y \\<longleftrightarrow> Y = {#}\" and \"rel_mset rel X {#} \\<longleftrightarrow> X = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_mset rel {#} Y = (Y = {#}) &&& rel_mset rel X {#} = (X = {#})", "using rel_mset_Zero rel_mset_size"], ["proof (prove)\nusing this:\n  rel_mset ?R {#} {#}\n  rel_mset ?R ?M ?N \\<Longrightarrow> size ?M = size ?N\n\ngoal (1 subgoal):\n 1. rel_mset rel {#} Y = (Y = {#}) &&& rel_mset rel X {#} = (X = {#})", "by (fastforce, fastforce)"], ["", "definition \"is_mset_set X \\<equiv> \\<forall>x \\<in># X. count X x = 1\""], ["", "lemma is_mset_setD[dest]: \"is_mset_set X \\<Longrightarrow> x \\<in># X \\<Longrightarrow> count X x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_mset_set X; x \\<in># X\\<rbrakk>\n    \\<Longrightarrow> count X x = 1", "unfolding is_mset_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>#X. count X x = 1; x \\<in># X\\<rbrakk>\n    \\<Longrightarrow> count X x = 1", "by auto"], ["", "lemma is_mset_setI[intro]:\n  assumes \"\\<And>x. x \\<in># X \\<Longrightarrow> count X x = 1\"\n  shows \"is_mset_set X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mset_set X", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in># X \\<Longrightarrow> count X ?x = 1\n\ngoal (1 subgoal):\n 1. is_mset_set X", "unfolding is_mset_set_def"], ["proof (prove)\nusing this:\n  ?x \\<in># X \\<Longrightarrow> count X ?x = 1\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#X. count X x = 1", "by auto"], ["", "lemma is_mset_set[simp]: \"is_mset_set (mset_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mset_set (mset_set X)", "unfolding is_mset_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#mset_set X. count (mset_set X) x = 1", "by (meson count_mset_set(1) count_mset_set(2) count_mset_set(3) not_in_iff)"], ["", "lemma is_mset_set_add[simp]:\n  \"is_mset_set (X + {#x#}) \\<longleftrightarrow> is_mset_set X \\<and> x \\<notin># X\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mset_set (X + {#x#}) = (is_mset_set X \\<and> x \\<notin># X)", "proof(intro iffI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. is_mset_set (X + {#x#}) \\<Longrightarrow> is_mset_set X\n 2. is_mset_set (X + {#x#}) \\<Longrightarrow> x \\<notin># X\n 3. is_mset_set X \\<and> x \\<notin># X \\<Longrightarrow>\n    is_mset_set (X + {#x#})", "assume L: ?L"], ["proof (state)\nthis:\n  is_mset_set (X + {#x#})\n\ngoal (3 subgoals):\n 1. is_mset_set (X + {#x#}) \\<Longrightarrow> is_mset_set X\n 2. is_mset_set (X + {#x#}) \\<Longrightarrow> x \\<notin># X\n 3. is_mset_set X \\<and> x \\<notin># X \\<Longrightarrow>\n    is_mset_set (X + {#x#})", "with count_eq_zero_iff count_single"], ["proof (chain)\npicking this:\n  (count ?M ?x = 0) = (?x \\<notin># ?M)\n  count {#?b#} ?a = (if ?b = ?a then 1 else 0)\n  is_mset_set (X + {#x#})", "show \"is_mset_set X\""], ["proof (prove)\nusing this:\n  (count ?M ?x = 0) = (?x \\<notin># ?M)\n  count {#?b#} ?a = (if ?b = ?a then 1 else 0)\n  is_mset_set (X + {#x#})\n\ngoal (1 subgoal):\n 1. is_mset_set X", "unfolding is_mset_set_def"], ["proof (prove)\nusing this:\n  (count ?M ?x = 0) = (?x \\<notin># ?M)\n  count {#?b#} ?a = (if ?b = ?a then 1 else 0)\n  \\<forall>xa\\<in>#X + {#x#}. count (X + {#x#}) xa = 1\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#X. count X x = 1", "by (metis (no_types, hide_lams) add_mset_add_single count_add_mset nat.inject set_mset_add_mset_insert union_single_eq_member)"], ["proof (state)\nthis:\n  is_mset_set X\n\ngoal (2 subgoals):\n 1. is_mset_set (X + {#x#}) \\<Longrightarrow> x \\<notin># X\n 2. is_mset_set X \\<and> x \\<notin># X \\<Longrightarrow>\n    is_mset_set (X + {#x#})", "show \"x \\<notin># X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin># X", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in># X \\<Longrightarrow> False", "assume \"x \\<in># X\""], ["proof (state)\nthis:\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. x \\<in># X \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x \\<in># X", "have \"count (X + {#x#}) x > 1\""], ["proof (prove)\nusing this:\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. 1 < count (X + {#x#}) x", "by auto"], ["proof (state)\nthis:\n  1 < count (X + {#x#}) x\n\ngoal (1 subgoal):\n 1. x \\<in># X \\<Longrightarrow> False", "with L"], ["proof (chain)\npicking this:\n  is_mset_set (X + {#x#})\n  1 < count (X + {#x#}) x", "show False"], ["proof (prove)\nusing this:\n  is_mset_set (X + {#x#})\n  1 < count (X + {#x#}) x\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: is_mset_set_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin># X\n\ngoal (1 subgoal):\n 1. is_mset_set X \\<and> x \\<notin># X \\<Longrightarrow>\n    is_mset_set (X + {#x#})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_mset_set X \\<and> x \\<notin># X \\<Longrightarrow>\n    is_mset_set (X + {#x#})", "assume R: ?R"], ["proof (state)\nthis:\n  is_mset_set X \\<and> x \\<notin># X\n\ngoal (1 subgoal):\n 1. is_mset_set X \\<and> x \\<notin># X \\<Longrightarrow>\n    is_mset_set (X + {#x#})", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mset_set (X + {#x#})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in># X + {#x#} \\<Longrightarrow> count (X + {#x#}) xa = 1", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in># X + {#x#} \\<Longrightarrow> count (X + {#x#}) xa = 1", "assume x': \"x' \\<in># X + {#x#}\""], ["proof (state)\nthis:\n  x' \\<in># X + {#x#}\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in># X + {#x#} \\<Longrightarrow> count (X + {#x#}) xa = 1", "show \"count (X + {#x#}) x' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (X + {#x#}) x' = 1", "proof(cases \"x' \\<in># X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x' \\<in># X \\<Longrightarrow> count (X + {#x#}) x' = 1\n 2. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "case True"], ["proof (state)\nthis:\n  x' \\<in># X\n\ngoal (2 subgoals):\n 1. x' \\<in># X \\<Longrightarrow> count (X + {#x#}) x' = 1\n 2. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "with R"], ["proof (chain)\npicking this:\n  is_mset_set X \\<and> x \\<notin># X\n  x' \\<in># X", "have \"count X x' = 1\""], ["proof (prove)\nusing this:\n  is_mset_set X \\<and> x \\<notin># X\n  x' \\<in># X\n\ngoal (1 subgoal):\n 1. count X x' = 1", "by auto"], ["proof (state)\nthis:\n  count X x' = 1\n\ngoal (2 subgoals):\n 1. x' \\<in># X \\<Longrightarrow> count (X + {#x#}) x' = 1\n 2. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "moreover"], ["proof (state)\nthis:\n  count X x' = 1\n\ngoal (2 subgoals):\n 1. x' \\<in># X \\<Longrightarrow> count (X + {#x#}) x' = 1\n 2. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "from True R"], ["proof (chain)\npicking this:\n  x' \\<in># X\n  is_mset_set X \\<and> x \\<notin># X", "have \"count {#x#} x' = 0\""], ["proof (prove)\nusing this:\n  x' \\<in># X\n  is_mset_set X \\<and> x \\<notin># X\n\ngoal (1 subgoal):\n 1. count {#x#} x' = 0", "by auto"], ["proof (state)\nthis:\n  count {#x#} x' = 0\n\ngoal (2 subgoals):\n 1. x' \\<in># X \\<Longrightarrow> count (X + {#x#}) x' = 1\n 2. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "ultimately"], ["proof (chain)\npicking this:\n  count X x' = 1\n  count {#x#} x' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  count X x' = 1\n  count {#x#} x' = 0\n\ngoal (1 subgoal):\n 1. count (X + {#x#}) x' = 1", "by auto"], ["proof (state)\nthis:\n  count (X + {#x#}) x' = 1\n\ngoal (1 subgoal):\n 1. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "case False"], ["proof (state)\nthis:\n  x' \\<notin># X\n\ngoal (1 subgoal):\n 1. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "then"], ["proof (chain)\npicking this:\n  x' \\<notin># X", "have \"count X x' = 0\""], ["proof (prove)\nusing this:\n  x' \\<notin># X\n\ngoal (1 subgoal):\n 1. count X x' = 0", "by (simp add: not_in_iff)"], ["proof (state)\nthis:\n  count X x' = 0\n\ngoal (1 subgoal):\n 1. x' \\<notin># X \\<Longrightarrow> count (X + {#x#}) x' = 1", "with R x'"], ["proof (chain)\npicking this:\n  is_mset_set X \\<and> x \\<notin># X\n  x' \\<in># X + {#x#}\n  count X x' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  is_mset_set X \\<and> x \\<notin># X\n  x' \\<in># X + {#x#}\n  count X x' = 0\n\ngoal (1 subgoal):\n 1. count (X + {#x#}) x' = 1", "by auto"], ["proof (state)\nthis:\n  count (X + {#x#}) x' = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  count (X + {#x#}) x' = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_mset_set (X + {#x#})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mset_set_id[simp]:\n  assumes \"is_mset_set X\"\n  shows \"mset_set (set_mset X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (set_mset X) = X", "using assms"], ["proof (prove)\nusing this:\n  is_mset_set X\n\ngoal (1 subgoal):\n 1. mset_set (set_mset X) = X", "unfolding is_mset_set_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>#X. count X x = 1\n\ngoal (1 subgoal):\n 1. mset_set (set_mset X) = X", "by (metis count_eq_zero_iff count_mset_set(1) count_mset_set(3) finite_set_mset multiset_eqI)"], ["", "lemma count_image_mset:\n  shows \"count (image_mset f X) y = (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (image_mset f X) y =\n    (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x)", "proof(induct X)"], ["proof (state)\ngoal (2 subgoals):\n 1. count (image_mset f {#}) y =\n    (\\<Sum>x | x \\<in># {#} \\<and> y = f x. count {#} x)\n 2. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. count (image_mset f {#}) y =\n    (\\<Sum>x | x \\<in># {#} \\<and> y = f x. count {#} x)\n 2. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. count (image_mset f {#}) y =\n    (\\<Sum>x | x \\<in># {#} \\<and> y = f x. count {#} x)", "by auto"], ["proof (state)\nthis:\n  count (image_mset f {#}) y =\n  (\\<Sum>x | x \\<in># {#} \\<and> y = f x. count {#} x)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "case (add x X)"], ["proof (state)\nthis:\n  count (image_mset f X) y =\n  (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "define X' where \"X' \\<equiv> X + {#x#}\""], ["proof (state)\nthis:\n  X' \\<equiv> X + {#x#}\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "have \"(\\<Sum>z | z \\<in># X' \\<and> y = f z. count (X + {#x#}) z) =\n          (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) + (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z. count (X + {#x#}) z) =\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) +\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z)", "unfolding plus_multiset.rep_eq sum.distrib"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) +\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z) =\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) +\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z)", ".."], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count (X + {#x#}) z) =\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) +\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count (X + {#x#}) z) =\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) +\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "have split:\n      \"{z. z \\<in># X' \\<and> y = f z} =\n       {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union> {z. z \\<in># X' \\<and> y = f z \\<and> z = x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z. z \\<in># X' \\<and> y = f z} =\n    {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n    {z. z \\<in># X' \\<and> y = f z \\<and> z = x}", "by blast"], ["proof (state)\nthis:\n  {z. z \\<in># X' \\<and> y = f z} =\n  {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n  {z. z \\<in># X' \\<and> y = f z \\<and> z = x}\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "then"], ["proof (chain)\npicking this:\n  {z. z \\<in># X' \\<and> y = f z} =\n  {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n  {z. z \\<in># X' \\<and> y = f z \\<and> z = x}", "have \"(\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z) =\n      (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z)\""], ["proof (prove)\nusing this:\n  {z. z \\<in># X' \\<and> y = f z} =\n  {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n  {z. z \\<in># X' \\<and> y = f z \\<and> z = x}\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z) =\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z)", "unfolding split"], ["proof (prove)\nusing this:\n  {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n  {z. z \\<in># X' \\<and> y = f z \\<and> z = x} =\n  {z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n  {z. z \\<in># X' \\<and> y = f z \\<and> z = x}\n\ngoal (1 subgoal):\n 1. sum (count {#x#})\n     ({z. z \\<in># X' \\<and> y = f z \\<and> z \\<noteq> x} \\<union>\n      {z. z \\<in># X' \\<and> y = f z \\<and> z = x}) =\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z)", "by (subst sum.union_disjoint, auto)"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z) =\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count {#x#} z) =\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "have \"... = (if y = f x then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z) =\n    (if y = f x then 1 else 0)", "using card_eq_Suc_0_ex1"], ["proof (prove)\nusing this:\n  (card ?A = Suc 0) = (\\<exists>!x. x \\<in> ?A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z) =\n    (if y = f x then 1 else 0)", "by (auto simp: X'_def)"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z) =\n  (if y = f x then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z \\<and> z = x. count {#x#} z) =\n  (if y = f x then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "have \"(\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) = (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "proof(cases \"x \\<in># X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n 2. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "case True"], ["proof (state)\nthis:\n  x \\<in># X\n\ngoal (2 subgoals):\n 1. x \\<in># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n 2. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "then"], ["proof (chain)\npicking this:\n  x \\<in># X", "have \"z \\<in># X' \\<longleftrightarrow> z \\<in># X\" for z"], ["proof (prove)\nusing this:\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. (z \\<in># X') = (z \\<in># X)", "by (auto simp: X'_def)"], ["proof (state)\nthis:\n  (?z \\<in># X') = (?z \\<in># X)\n\ngoal (2 subgoals):\n 1. x \\<in># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n 2. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "then"], ["proof (chain)\npicking this:\n  (?z \\<in># X') = (?z \\<in># X)", "show ?thesis"], ["proof (prove)\nusing this:\n  (?z \\<in># X') = (?z \\<in># X)\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "case False"], ["proof (state)\nthis:\n  x \\<notin># X\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "have split: \"{z. z \\<in># X' \\<and> y = f z} = {z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z. z \\<in># X' \\<and> y = f z} =\n    {z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}", "by (auto simp: X'_def)"], ["proof (state)\nthis:\n  {z. z \\<in># X' \\<and> y = f z} =\n  {z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "also"], ["proof (state)\nthis:\n  {z. z \\<in># X' \\<and> y = f z} =\n  {z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "have \"sum (count X) ... = (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) + (\\<Sum>z | z = x \\<and> y = f z. count X z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (count X)\n     ({z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) +\n    (\\<Sum>z | z = x \\<and> y = f z. count X z)", "by (subst sum.union_disjoint, auto simp: False)"], ["proof (state)\nthis:\n  sum (count X)\n   ({z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) +\n  (\\<Sum>z | z = x \\<and> y = f z. count X z)\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "also"], ["proof (state)\nthis:\n  sum (count X)\n   ({z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) +\n  (\\<Sum>z | z = x \\<and> y = f z. count X z)\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "with False"], ["proof (chain)\npicking this:\n  x \\<notin># X\n  sum (count X)\n   ({z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) +\n  (\\<Sum>z | z = x \\<and> y = f z. count X z)", "have \"\\<And>z. z = x \\<and> y = f z \\<Longrightarrow> count X z = 0\""], ["proof (prove)\nusing this:\n  x \\<notin># X\n  sum (count X)\n   ({z. z \\<in># X \\<and> y = f z} \\<union> {z. z = x \\<and> y = f z}) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) +\n  (\\<Sum>z | z = x \\<and> y = f z. count X z)\n\ngoal (1 subgoal):\n 1. \\<And>z. z = x \\<and> y = f z \\<Longrightarrow> count X z = 0", "by (meson count_inI)"], ["proof (state)\nthis:\n  ?z = x \\<and> y = f ?z \\<Longrightarrow> count X ?z = 0\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "with sum.neutral_const"], ["proof (chain)\npicking this:\n  (\\<Sum>_\\<in>?A. (0::?'a)) = (0::?'a)\n  ?z = x \\<and> y = f ?z \\<Longrightarrow> count X ?z = 0", "have \"(\\<Sum>z | z = x \\<and> y = f z. count X z) = 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>_\\<in>?A. (0::?'a)) = (0::?'a)\n  ?z = x \\<and> y = f ?z \\<Longrightarrow> count X ?z = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | z = x \\<and> y = f z. count X z) = 0", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>z | z = x \\<and> y = f z. count X z) = 0\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "finally"], ["proof (chain)\npicking this:\n  sum (count X) {z. z \\<in># X' \\<and> y = f z} =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) + 0", "show ?thesis"], ["proof (prove)\nusing this:\n  sum (count X) {z. z \\<in># X' \\<and> y = f z} =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) + 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n    (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count X z) =\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z)\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "have \"... = count (image_mset f X) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) =\n    count (image_mset f X) y", "using add"], ["proof (prove)\nusing this:\n  count (image_mset f X) y =\n  (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) =\n    count (image_mset f X) y", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>z | z \\<in># X \\<and> y = f z. count X z) =\n  count (image_mset f X) y\n\ngoal (1 subgoal):\n 1. \\<And>x X.\n       count (image_mset f X) y =\n       (\\<Sum>x | x \\<in># X \\<and> y = f x. count X x) \\<Longrightarrow>\n       count (image_mset f (add_mset x X)) y =\n       (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x.\n          count (add_mset x X) x)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count (X + {#x#}) z) =\n  count (image_mset f X) y + (if y = f x then 1 else 0)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>z | z \\<in># X' \\<and> y = f z. count (X + {#x#}) z) =\n  count (image_mset f X) y + (if y = f x then 1 else 0)\n\ngoal (1 subgoal):\n 1. count (image_mset f (add_mset x X)) y =\n    (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x. count (add_mset x X) x)", "by (simp add: X'_def)"], ["proof (state)\nthis:\n  count (image_mset f (add_mset x X)) y =\n  (\\<Sum>x | x \\<in># add_mset x X \\<and> y = f x. count (add_mset x X) x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_mset_set_image:\n  assumes \"inj_on f (set_mset X)\" and \"is_mset_set X\"\n  shows \"is_mset_set (image_mset f X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mset_set (image_mset f X)", "proof (cases X)"], ["proof (state)\ngoal (2 subgoals):\n 1. X = {#} \\<Longrightarrow> is_mset_set (image_mset f X)\n 2. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "case empty"], ["proof (state)\nthis:\n  X = {#}\n\ngoal (2 subgoals):\n 1. X = {#} \\<Longrightarrow> is_mset_set (image_mset f X)\n 2. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "then"], ["proof (chain)\npicking this:\n  X = {#}", "show ?thesis"], ["proof (prove)\nusing this:\n  X = {#}\n\ngoal (1 subgoal):\n 1. is_mset_set (image_mset f X)", "by auto"], ["proof (state)\nthis:\n  is_mset_set (image_mset f X)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "case (add x X)"], ["proof (state)\nthis:\n  X = add_mset x X\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "define X' where \"X' \\<equiv> add_mset x X\""], ["proof (state)\nthis:\n  X' \\<equiv> add_mset x X\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "with assms add"], ["proof (chain)\npicking this:\n  inj_on f (set_mset X)\n  is_mset_set X\n  X = add_mset x X\n  X' \\<equiv> add_mset x X", "have inj:\"inj_on f (set_mset X')\"\n          and X': \"is_mset_set X'\""], ["proof (prove)\nusing this:\n  inj_on f (set_mset X)\n  is_mset_set X\n  X = add_mset x X\n  X' \\<equiv> add_mset x X\n\ngoal (1 subgoal):\n 1. inj_on f (set_mset X') &&& is_mset_set X'", "by auto"], ["proof (state)\nthis:\n  inj_on f (set_mset X')\n  is_mset_set X'\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       X = add_mset x N \\<Longrightarrow> is_mset_set (image_mset f X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mset_set (image_mset f X)", "proof(unfold add, intro is_mset_setI, fold X'_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "assume \"y \\<in># image_mset f X'\""], ["proof (state)\nthis:\n  y \\<in># image_mset f X'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "then"], ["proof (chain)\npicking this:\n  y \\<in># image_mset f X'", "have \"y \\<in> f ` set_mset X'\""], ["proof (prove)\nusing this:\n  y \\<in># image_mset f X'\n\ngoal (1 subgoal):\n 1. y \\<in> f ` set_mset X'", "by auto"], ["proof (state)\nthis:\n  y \\<in> f ` set_mset X'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "with inj"], ["proof (chain)\npicking this:\n  inj_on f (set_mset X')\n  y \\<in> f ` set_mset X'", "have \"\\<exists>!x'. x' \\<in># X' \\<and> y = f x'\""], ["proof (prove)\nusing this:\n  inj_on f (set_mset X')\n  y \\<in> f ` set_mset X'\n\ngoal (1 subgoal):\n 1. \\<exists>!x'. x' \\<in># X' \\<and> y = f x'", "by (meson imageE inj_onD)"], ["proof (state)\nthis:\n  \\<exists>!x'. x' \\<in># X' \\<and> y = f x'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "then"], ["proof (chain)\npicking this:\n  \\<exists>!x'. x' \\<in># X' \\<and> y = f x'", "obtain x' where x': \"{x'. x' \\<in># X' \\<and> y = f x'} = {x'}\""], ["proof (prove)\nusing this:\n  \\<exists>!x'. x' \\<in># X' \\<and> y = f x'\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        {x'. x' \\<in># X' \\<and> y = f x'} = {x'} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  {x'. x' \\<in># X' \\<and> y = f x'} = {x'}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "then"], ["proof (chain)\npicking this:\n  {x'. x' \\<in># X' \\<and> y = f x'} = {x'}", "have \"count (image_mset f X') y = count X' x'\""], ["proof (prove)\nusing this:\n  {x'. x' \\<in># X' \\<and> y = f x'} = {x'}\n\ngoal (1 subgoal):\n 1. count (image_mset f X') y = count X' x'", "unfolding count_image_mset"], ["proof (prove)\nusing this:\n  {x'. x' \\<in># X' \\<and> y = f x'} = {x'}\n\ngoal (1 subgoal):\n 1. sum (count X') {x. x \\<in># X' \\<and> y = f x} = count X' x'", "by auto"], ["proof (state)\nthis:\n  count (image_mset f X') y = count X' x'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "also"], ["proof (state)\nthis:\n  count (image_mset f X') y = count X' x'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "from X' x'"], ["proof (chain)\npicking this:\n  is_mset_set X'\n  {x'. x' \\<in># X' \\<and> y = f x'} = {x'}", "have \"... = 1\""], ["proof (prove)\nusing this:\n  is_mset_set X'\n  {x'. x' \\<in># X' \\<and> y = f x'} = {x'}\n\ngoal (1 subgoal):\n 1. count X' x' = 1", "by auto"], ["proof (state)\nthis:\n  count X' x' = 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># image_mset f X' \\<Longrightarrow>\n       count (image_mset f X') x = 1", "finally"], ["proof (chain)\npicking this:\n  count (image_mset f X') y = 1", "show \"count (image_mset f X') y = 1\""], ["proof (prove)\nusing this:\n  count (image_mset f X') y = 1\n\ngoal (1 subgoal):\n 1. count (image_mset f X') y = 1", "."], ["proof (state)\nthis:\n  count (image_mset f X') y = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_mset_set (image_mset f X)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* a variant for \"right\" *)"], ["", "lemma ex_mset_zip_right:\n  assumes \"length xs = length ys\" \"mset ys' = mset ys\"\n  shows \"\\<exists>xs'. length ys' = length xs' \\<and> mset (zip xs' ys') = mset (zip xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       length ys' = length xs' \\<and> mset (zip xs' ys') = mset (zip xs ys)", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  mset ys' = mset ys\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       length ys' = length xs' \\<and> mset (zip xs' ys') = mset (zip xs ys)", "proof (induct xs ys arbitrary: ys' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys'.\n       mset ys' = mset [] \\<Longrightarrow>\n       \\<exists>xs'.\n          length ys' = length xs' \\<and>\n          mset (zip xs' ys') = mset (zip [] [])\n 2. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "case Nil"], ["proof (state)\nthis:\n  mset ys' = mset []\n\ngoal (2 subgoals):\n 1. \\<And>ys'.\n       mset ys' = mset [] \\<Longrightarrow>\n       \\<exists>xs'.\n          length ys' = length xs' \\<and>\n          mset (zip xs' ys') = mset (zip [] [])\n 2. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "thus ?case"], ["proof (prove)\nusing this:\n  mset ys' = mset []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       length ys' = length xs' \\<and> mset (zip xs' ys') = mset (zip [] [])", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs'.\n     length ys' = length xs' \\<and> mset (zip xs' ys') = mset (zip [] [])\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "case (Cons x xs y ys ys')"], ["proof (state)\nthis:\n  length xs = length ys\n  mset ?ys' = mset ys \\<Longrightarrow>\n  \\<exists>xs'.\n     length ?ys' = length xs' \\<and> mset (zip xs' ?ys') = mset (zip xs ys)\n  mset ys' = mset (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "obtain j where j_len: \"j < length ys'\" and nth_j: \"ys' ! j = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ys'; ys' ! j = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Cons.prems in_set_conv_nth list.set_intros(1) mset_eq_setD)"], ["proof (state)\nthis:\n  j < length ys'\n  ys' ! j = y\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "define ysa where \"ysa = take j ys' @ drop (Suc j) ys'\""], ["proof (state)\nthis:\n  ysa = take j ys' @ drop (Suc j) ys'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "have \"mset ys' = {#y#} + mset ysa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset ys' = {#y#} + mset ysa", "unfolding ysa_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset ys' = {#y#} + mset (take j ys' @ drop (Suc j) ys')", "using j_len nth_j"], ["proof (prove)\nusing this:\n  j < length ys'\n  ys' ! j = y\n\ngoal (1 subgoal):\n 1. mset ys' = {#y#} + mset (take j ys' @ drop (Suc j) ys')", "by (metis Cons_nth_drop_Suc union_mset_add_mset_right add_mset_remove_trivial add_diff_cancel_left'\n        append_take_drop_id mset.simps(2) mset_append)"], ["proof (state)\nthis:\n  mset ys' = {#y#} + mset ysa\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "hence ms_y: \"mset ysa = mset ys\""], ["proof (prove)\nusing this:\n  mset ys' = {#y#} + mset ysa\n\ngoal (1 subgoal):\n 1. mset ysa = mset ys", "by (simp add: Cons.prems)"], ["proof (state)\nthis:\n  mset ysa = mset ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "then"], ["proof (chain)\npicking this:\n  mset ysa = mset ys", "obtain xsa where\n    len_a: \"length ysa = length xsa\" and ms_a: \"mset (zip xsa ysa) = mset (zip xs ys)\""], ["proof (prove)\nusing this:\n  mset ysa = mset ys\n\ngoal (1 subgoal):\n 1. (\\<And>xsaa.\n        \\<lbrakk>length ysa = length xsaa;\n         mset (zip xsaa ysa) = mset (zip xs ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.hyps(2)"], ["proof (prove)\nusing this:\n  mset ysa = mset ys\n  mset ?ys' = mset ys \\<Longrightarrow>\n  \\<exists>xs'.\n     length ?ys' = length xs' \\<and> mset (zip xs' ?ys') = mset (zip xs ys)\n\ngoal (1 subgoal):\n 1. (\\<And>xsaa.\n        \\<lbrakk>length ysa = length xsaa;\n         mset (zip xsaa ysa) = mset (zip xs ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  length ysa = length xsa\n  mset (zip xsa ysa) = mset (zip xs ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "define xs' where \"xs' = take j xsa @ x # drop j xsa\""], ["proof (state)\nthis:\n  xs' = take j xsa @ x # drop j xsa\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "have ys': \"ys' = take j ysa @ y # drop j ysa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys' = take j ysa @ y # drop j ysa", "using ms_y j_len nth_j Cons.prems ysa_def"], ["proof (prove)\nusing this:\n  mset ysa = mset ys\n  j < length ys'\n  ys' ! j = y\n  mset ys' = mset (y # ys)\n  ysa = take j ys' @ drop (Suc j) ys'\n\ngoal (1 subgoal):\n 1. ys' = take j ysa @ y # drop j ysa", "by (metis append_eq_append_conv append_take_drop_id diff_Suc_Suc Cons_nth_drop_Suc length_Cons\n      length_drop size_mset)"], ["proof (state)\nthis:\n  ys' = take j ysa @ y # drop j ysa\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "have j_len': \"j \\<le> length ysa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> length ysa", "using j_len ys' ysa_def"], ["proof (prove)\nusing this:\n  j < length ys'\n  ys' = take j ysa @ y # drop j ysa\n  ysa = take j ys' @ drop (Suc j) ys'\n\ngoal (1 subgoal):\n 1. j \\<le> length ysa", "by (metis add_Suc_right append_take_drop_id length_Cons length_append less_eq_Suc_le not_less)"], ["proof (state)\nthis:\n  j \\<le> length ysa\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "have \"length ys' = length xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys' = length xs'", "unfolding xs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys' = length (take j xsa @ x # drop j xsa)", "using Cons.prems len_a ms_y"], ["proof (prove)\nusing this:\n  mset ys' = mset (y # ys)\n  length ysa = length xsa\n  mset ysa = mset ys\n\ngoal (1 subgoal):\n 1. length ys' = length (take j xsa @ x # drop j xsa)", "by (metis add_Suc_right append_take_drop_id length_Cons length_append mset_eq_length)"], ["proof (state)\nthis:\n  length ys' = length xs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "moreover"], ["proof (state)\nthis:\n  length ys' = length xs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "have \"mset (zip xs' ys') = mset (zip (x # xs) (y # ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (zip xs' ys') = mset (zip (x # xs) (y # ys))", "unfolding ys' xs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (zip (take j xsa @ x # drop j xsa) (take j ysa @ y # drop j ysa)) =\n    mset (zip (x # xs) (y # ys))", "apply (rule HOL.trans[OF mset_zip_take_Cons_drop_twice])"], ["proof (prove)\ngoal (3 subgoals):\n 1. length xsa = length ysa\n 2. j \\<le> length xsa\n 3. add_mset (x, y) (mset (zip xsa ysa)) = mset (zip (x # xs) (y # ys))", "using j_len'"], ["proof (prove)\nusing this:\n  j \\<le> length ysa\n\ngoal (3 subgoals):\n 1. length xsa = length ysa\n 2. j \\<le> length xsa\n 3. add_mset (x, y) (mset (zip xsa ysa)) = mset (zip (x # xs) (y # ys))", "by (auto simp: len_a ms_a)"], ["proof (state)\nthis:\n  mset (zip xs' ys') = mset (zip (x # xs) (y # ys))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ys'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>ys'.\n           mset ys' = mset ys \\<Longrightarrow>\n           \\<exists>xs'.\n              length ys' = length xs' \\<and>\n              mset (zip xs' ys') = mset (zip xs ys);\n        mset ys' = mset (y # ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'.\n                            length ys' = length xs' \\<and>\n                            mset (zip xs' ys') =\n                            mset (zip (x # xs) (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  length ys' = length xs'\n  mset (zip xs' ys') = mset (zip (x # xs) (y # ys))", "show ?case"], ["proof (prove)\nusing this:\n  length ys' = length xs'\n  mset (zip xs' ys') = mset (zip (x # xs) (y # ys))\n\ngoal (1 subgoal):\n 1. \\<exists>xs'.\n       length ys' = length xs' \\<and>\n       mset (zip xs' ys') = mset (zip (x # xs) (y # ys))", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs'.\n     length ys' = length xs' \\<and>\n     mset (zip xs' ys') = mset (zip (x # xs) (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all2_reorder_right_invariance:\n  assumes rel: \"list_all2 R xs ys\" and ms_y: \"mset ys' = mset ys\"\n  shows \"\\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "have len: \"length xs = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys", "using rel list_all2_conv_all_nth"], ["proof (prove)\nusing this:\n  list_all2 R xs ys\n  list_all2 ?P ?xs ?ys =\n  (length ?xs = length ?ys \\<and>\n   (\\<forall>i<length ?xs. ?P (?xs ! i) (?ys ! i)))\n\ngoal (1 subgoal):\n 1. length xs = length ys", "by auto"], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "obtain xs' where\n    len': \"length xs' = length ys'\" and ms_xy: \"mset (zip xs' ys') = mset (zip xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>length xs' = length ys';\n         mset (zip xs' ys') = mset (zip xs ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using len ms_y"], ["proof (prove)\nusing this:\n  length xs = length ys\n  mset ys' = mset ys\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>length xs' = length ys';\n         mset (zip xs' ys') = mset (zip xs ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_mset_zip_right)"], ["proof (state)\nthis:\n  length xs' = length ys'\n  mset (zip xs' ys') = mset (zip xs ys)\n\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "have \"list_all2 R xs' ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 R xs' ys'", "using assms(1) len' ms_xy"], ["proof (prove)\nusing this:\n  list_all2 R xs ys\n  length xs' = length ys'\n  mset (zip xs' ys') = mset (zip xs ys)\n\ngoal (1 subgoal):\n 1. list_all2 R xs' ys'", "unfolding list_all2_iff"], ["proof (prove)\nusing this:\n  length xs = length ys \\<and> (\\<forall>(x, y)\\<in>set (zip xs ys). R x y)\n  length xs' = length ys'\n  mset (zip xs' ys') = mset (zip xs ys)\n\ngoal (1 subgoal):\n 1. length xs' = length ys' \\<and>\n    (\\<forall>(x, y)\\<in>set (zip xs' ys'). R x y)", "by (blast dest: mset_eq_setD)"], ["proof (state)\nthis:\n  list_all2 R xs' ys'\n\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "moreover"], ["proof (state)\nthis:\n  list_all2 R xs' ys'\n\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "have \"mset xs' = mset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs' = mset xs", "using len len' ms_xy map_fst_zip mset_map"], ["proof (prove)\nusing this:\n  length xs = length ys\n  length xs' = length ys'\n  mset (zip xs' ys') = mset (zip xs ys)\n  length ?xs = length ?ys \\<Longrightarrow> map fst (zip ?xs ?ys) = ?xs\n  mset (map ?f ?xs) = image_mset ?f (mset ?xs)\n\ngoal (1 subgoal):\n 1. mset xs' = mset xs", "by metis"], ["proof (state)\nthis:\n  mset xs' = mset xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "ultimately"], ["proof (chain)\npicking this:\n  list_all2 R xs' ys'\n  mset xs' = mset xs", "show ?thesis"], ["proof (prove)\nusing this:\n  list_all2 R xs' ys'\n  mset xs' = mset xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs'. list_all2 R xs' ys' \\<and> mset xs' = mset xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_mset_via_perm: \"rel_mset rel (mset xs) (mset ys) \\<longleftrightarrow> (\\<exists>zs. perm xs zs \\<and> list_all2 rel zs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_mset rel (mset xs) (mset ys) =\n    (\\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys)", "proof (unfold rel_mset_def, intro iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa \\<Longrightarrow>\n    \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys\n 2. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "case 1"], ["proof (state)\nthis:\n  \\<exists>xsa ysa.\n     mset xsa = mset xs \\<and>\n     mset ysa = mset ys \\<and> list_all2 rel xsa ysa\n\ngoal (2 subgoals):\n 1. \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa \\<Longrightarrow>\n    \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys\n 2. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "then"], ["proof (chain)\npicking this:\n  \\<exists>xsa ysa.\n     mset xsa = mset xs \\<and>\n     mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "obtain zs ws where zs: \"mset zs = mset xs\" and ws: \"mset ws = mset ys\" and zsws: \"list_all2 rel zs ws\""], ["proof (prove)\nusing this:\n  \\<exists>xsa ysa.\n     mset xsa = mset xs \\<and>\n     mset ysa = mset ys \\<and> list_all2 rel xsa ysa\n\ngoal (1 subgoal):\n 1. (\\<And>zs ws.\n        \\<lbrakk>mset zs = mset xs; mset ws = mset ys;\n         list_all2 rel zs ws\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset zs = mset xs\n  mset ws = mset ys\n  list_all2 rel zs ws\n\ngoal (2 subgoals):\n 1. \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa \\<Longrightarrow>\n    \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys\n 2. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "note list_all2_reorder_right_invariance[OF zsws ws[symmetric], unfolded zs mset_eq_perm]"], ["proof (state)\nthis:\n  \\<exists>xs'. list_all2 rel xs' ys \\<and> xs' <~~> xs\n\ngoal (2 subgoals):\n 1. \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa \\<Longrightarrow>\n    \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys\n 2. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "then"], ["proof (chain)\npicking this:\n  \\<exists>xs'. list_all2 rel xs' ys \\<and> xs' <~~> xs", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>xs'. list_all2 rel xs' ys \\<and> xs' <~~> xs\n\ngoal (1 subgoal):\n 1. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys", "using perm_sym"], ["proof (prove)\nusing this:\n  \\<exists>xs'. list_all2 rel xs' ys \\<and> xs' <~~> xs\n  ?xs <~~> ?ys \\<Longrightarrow> ?ys <~~> ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys", "by auto"], ["proof (state)\nthis:\n  \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys\n\ngoal (1 subgoal):\n 1. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "case 2"], ["proof (state)\nthis:\n  \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys\n\ngoal (1 subgoal):\n 1. \\<exists>zs. xs <~~> zs \\<and> list_all2 rel zs ys \\<Longrightarrow>\n    \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "from this[folded mset_eq_perm]"], ["proof (chain)\npicking this:\n  \\<exists>zs. mset xs = mset zs \\<and> list_all2 rel zs ys", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>zs. mset xs = mset zs \\<and> list_all2 rel zs ys\n\ngoal (1 subgoal):\n 1. \\<exists>xsa ysa.\n       mset xsa = mset xs \\<and>\n       mset ysa = mset ys \\<and> list_all2 rel xsa ysa", "by force"], ["proof (state)\nthis:\n  \\<exists>xsa ysa.\n     mset xsa = mset xs \\<and>\n     mset ysa = mset ys \\<and> list_all2 rel xsa ysa\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_mset_free:\n  assumes rel: \"rel_mset rel X Y\" and xs: \"mset xs = X\"\n  shows \"\\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "from rel[unfolded rel_mset_def]"], ["proof (chain)\npicking this:\n  \\<exists>xs ys. mset xs = X \\<and> mset ys = Y \\<and> list_all2 rel xs ys", "obtain xs' ys'\n    where xs': \"mset xs' = X\" and ys': \"mset ys' = Y\" and xsys': \"list_all2 rel xs' ys'\""], ["proof (prove)\nusing this:\n  \\<exists>xs ys. mset xs = X \\<and> mset ys = Y \\<and> list_all2 rel xs ys\n\ngoal (1 subgoal):\n 1. (\\<And>xs' ys'.\n        \\<lbrakk>mset xs' = X; mset ys' = Y; list_all2 rel xs' ys'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset xs' = X\n  mset ys' = Y\n  list_all2 rel xs' ys'\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "from xs' xs"], ["proof (chain)\npicking this:\n  mset xs' = X\n  mset xs = X", "have \"mset xs = mset xs'\""], ["proof (prove)\nusing this:\n  mset xs' = X\n  mset xs = X\n\ngoal (1 subgoal):\n 1. mset xs = mset xs'", "by auto"], ["proof (state)\nthis:\n  mset xs = mset xs'\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "from mset_eq_permutation[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>p.\n      \\<lbrakk>p permutes {..<length xs'}; permute_list p xs' = xs\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f where perm: \"f permutes {..<length xs'}\" and xs': \"permute_list f xs' = xs\""], ["proof (prove)\nusing this:\n  (\\<And>p.\n      \\<lbrakk>p permutes {..<length xs'}; permute_list p xs' = xs\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f permutes {..<length xs'};\n         permute_list f xs' = xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  f permutes {..<length xs'}\n  permute_list f xs' = xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "then"], ["proof (chain)\npicking this:\n  f permutes {..<length xs'}\n  permute_list f xs' = xs", "have [simp]: \"length xs' = length xs\""], ["proof (prove)\nusing this:\n  f permutes {..<length xs'}\n  permute_list f xs' = xs\n\ngoal (1 subgoal):\n 1. length xs' = length xs", "by auto"], ["proof (state)\nthis:\n  length xs' = length xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "from permute_list_nth[OF perm, unfolded xs']"], ["proof (chain)\npicking this:\n  ?i < length xs' \\<Longrightarrow> xs ! ?i = xs' ! f ?i", "have *: \"\\<And>i. i < length xs \\<Longrightarrow> xs ! i = xs' ! f i\""], ["proof (prove)\nusing this:\n  ?i < length xs' \\<Longrightarrow> xs ! ?i = xs' ! f ?i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length xs \\<Longrightarrow> xs ! i = xs' ! f i", "by auto"], ["proof (state)\nthis:\n  ?i < length xs \\<Longrightarrow> xs ! ?i = xs' ! f ?i\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "note [simp] = list_all2_lengthD[OF xsys',symmetric]"], ["proof (state)\nthis:\n  length ys' = length xs'\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "note [simp] = atLeast0LessThan[symmetric]"], ["proof (state)\nthis:\n  {..<?n} = {0..<?n}\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "note bij =  permutes_bij[OF perm]"], ["proof (state)\nthis:\n  bij f\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "define ys where \"ys \\<equiv> map (nth ys' \\<circ> f) [0..<length ys']\""], ["proof (state)\nthis:\n  ys \\<equiv> map ((!) ys' \\<circ> f) [0..<length ys']\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "then"], ["proof (chain)\npicking this:\n  ys \\<equiv> map ((!) ys' \\<circ> f) [0..<length ys']", "have [simp]: \"length ys = length ys'\""], ["proof (prove)\nusing this:\n  ys \\<equiv> map ((!) ys' \\<circ> f) [0..<length ys']\n\ngoal (1 subgoal):\n 1. length ys = length ys'", "by auto"], ["proof (state)\nthis:\n  length ys = length ys'\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"mset ys = mset (map (nth ys') (map f [0..<length ys']))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset ys = mset (map ((!) ys') (map f [0..<length ys']))", "unfolding ys_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map ((!) ys' \\<circ> f) [0..<length ys']) =\n    mset (map ((!) ys') (map f [0..<length ys']))", "by auto"], ["proof (state)\nthis:\n  mset ys = mset (map ((!) ys') (map f [0..<length ys']))\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "also"], ["proof (state)\nthis:\n  mset ys = mset (map ((!) ys') (map f [0..<length ys']))\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"... = image_mset (nth ys') (image_mset f (mset [0..<length ys']))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map ((!) ys') (map f [0..<length ys'])) =\n    image_mset ((!) ys') (image_mset f (mset [0..<length ys']))", "by (simp add: multiset.map_comp)"], ["proof (state)\nthis:\n  mset (map ((!) ys') (map f [0..<length ys'])) =\n  image_mset ((!) ys') (image_mset f (mset [0..<length ys']))\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "also"], ["proof (state)\nthis:\n  mset (map ((!) ys') (map f [0..<length ys'])) =\n  image_mset ((!) ys') (image_mset f (mset [0..<length ys']))\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"(mset [0..<length ys']) = mset_set {0..<length ys'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset [0..<length ys'] = mset_set {0..<length ys'}", "by (metis mset_sorted_list_of_multiset sorted_list_of_mset_set sorted_list_of_set_range)"], ["proof (state)\nthis:\n  mset [0..<length ys'] = mset_set {0..<length ys'}\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "also"], ["proof (state)\nthis:\n  mset [0..<length ys'] = mset_set {0..<length ys'}\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"image_mset f (...) = mset_set (f ` {..<length ys'})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset f (mset_set {0..<length ys'}) =\n    mset_set (f ` {..<length ys'})", "using subset_inj_on[OF bij_is_inj[OF bij]]"], ["proof (prove)\nusing this:\n  ?A \\<subseteq> UNIV \\<Longrightarrow> inj_on f ?A\n\ngoal (1 subgoal):\n 1. image_mset f (mset_set {0..<length ys'}) =\n    mset_set (f ` {..<length ys'})", "by (subst image_mset_mset_set, auto)"], ["proof (state)\nthis:\n  image_mset f (mset_set {0..<length ys'}) = mset_set (f ` {..<length ys'})\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "also"], ["proof (state)\nthis:\n  image_mset f (mset_set {0..<length ys'}) = mset_set (f ` {..<length ys'})\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"... = mset [0..<length ys']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (f ` {..<length ys'}) = mset [0..<length ys']", "using perm"], ["proof (prove)\nusing this:\n  f permutes {..<length xs'}\n\ngoal (1 subgoal):\n 1. mset_set (f ` {..<length ys'}) = mset [0..<length ys']", "by (simp add: permutes_image)"], ["proof (state)\nthis:\n  mset_set (f ` {..<length ys'}) = mset [0..<length ys']\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "also"], ["proof (state)\nthis:\n  mset_set (f ` {..<length ys'}) = mset [0..<length ys']\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"image_mset (nth ys') ... = mset ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset ((!) ys') (mset [0..<length ys']) = mset ys'", "by(fold mset_map, unfold map_nth, auto)"], ["proof (state)\nthis:\n  image_mset ((!) ys') (mset [0..<length ys']) = mset ys'\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "finally"], ["proof (chain)\npicking this:\n  mset ys = mset ys'", "have \"mset ys = Y\""], ["proof (prove)\nusing this:\n  mset ys = mset ys'\n\ngoal (1 subgoal):\n 1. mset ys = Y", "using ys'"], ["proof (prove)\nusing this:\n  mset ys = mset ys'\n  mset ys' = Y\n\ngoal (1 subgoal):\n 1. mset ys = Y", "by auto"], ["proof (state)\nthis:\n  mset ys = Y\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "moreover"], ["proof (state)\nthis:\n  mset ys = Y\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "have \"list_all2 rel xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 rel xs ys", "proof(rule list_all2_all_nthI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs = length ys\n 2. \\<And>n. n < length xs \\<Longrightarrow> rel (xs ! n) (ys ! n)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs = length ys\n 2. \\<And>n. n < length xs \\<Longrightarrow> rel (xs ! n) (ys ! n)", "assume i: \"i < length xs\""], ["proof (state)\nthis:\n  i < length xs\n\ngoal (2 subgoals):\n 1. length xs = length ys\n 2. \\<And>n. n < length xs \\<Longrightarrow> rel (xs ! n) (ys ! n)", "with *"], ["proof (chain)\npicking this:\n  ?i < length xs \\<Longrightarrow> xs ! ?i = xs' ! f ?i\n  i < length xs", "have \"xs ! i = xs' ! f i\""], ["proof (prove)\nusing this:\n  ?i < length xs \\<Longrightarrow> xs ! ?i = xs' ! f ?i\n  i < length xs\n\ngoal (1 subgoal):\n 1. xs ! i = xs' ! f i", "by auto"], ["proof (state)\nthis:\n  xs ! i = xs' ! f i\n\ngoal (2 subgoals):\n 1. length xs = length ys\n 2. \\<And>n. n < length xs \\<Longrightarrow> rel (xs ! n) (ys ! n)", "also"], ["proof (state)\nthis:\n  xs ! i = xs' ! f i\n\ngoal (2 subgoals):\n 1. length xs = length ys\n 2. \\<And>n. n < length xs \\<Longrightarrow> rel (xs ! n) (ys ! n)", "from i permutes_in_image[OF perm]"], ["proof (chain)\npicking this:\n  i < length xs\n  (f ?x \\<in> {..<length xs'}) = (?x \\<in> {..<length xs'})", "have \"rel (xs' ! f i) (ys' ! f i)\""], ["proof (prove)\nusing this:\n  i < length xs\n  (f ?x \\<in> {..<length xs'}) = (?x \\<in> {..<length xs'})\n\ngoal (1 subgoal):\n 1. rel (xs' ! f i) (ys' ! f i)", "by (intro list_all2_nthD[OF xsys'], auto)"], ["proof (state)\nthis:\n  rel (xs' ! f i) (ys' ! f i)\n\ngoal (2 subgoals):\n 1. length xs = length ys\n 2. \\<And>n. n < length xs \\<Longrightarrow> rel (xs ! n) (ys ! n)", "finally"], ["proof (chain)\npicking this:\n  rel (xs ! i) (ys' ! f i)", "show \"rel (xs ! i) (ys ! i)\""], ["proof (prove)\nusing this:\n  rel (xs ! i) (ys' ! f i)\n\ngoal (1 subgoal):\n 1. rel (xs ! i) (ys ! i)", "unfolding ys_def"], ["proof (prove)\nusing this:\n  rel (xs ! i) (ys' ! f i)\n\ngoal (1 subgoal):\n 1. rel (xs ! i) (map ((!) ys' \\<circ> f) [0..<length ys'] ! i)", "using i"], ["proof (prove)\nusing this:\n  rel (xs ! i) (ys' ! f i)\n  i < length xs\n\ngoal (1 subgoal):\n 1. rel (xs ! i) (map ((!) ys' \\<circ> f) [0..<length ys'] ! i)", "by simp"], ["proof (state)\nthis:\n  rel (xs ! i) (ys ! i)\n\ngoal (1 subgoal):\n 1. length xs = length ys", "qed simp"], ["proof (state)\nthis:\n  list_all2 rel xs ys\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "ultimately"], ["proof (chain)\npicking this:\n  mset ys = Y\n  list_all2 rel xs ys", "show ?thesis"], ["proof (prove)\nusing this:\n  mset ys = Y\n  list_all2 rel xs ys\n\ngoal (1 subgoal):\n 1. \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys", "by auto"], ["proof (state)\nthis:\n  \\<exists>ys. mset ys = Y \\<and> list_all2 rel xs ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_mset_split:\n  assumes rel: \"rel_mset rel (X1+X2) Y\"\n  shows \"\\<exists>Y1 Y2. Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "obtain xs1 where xs1: \"mset xs1 = X1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs1. mset xs1 = X1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_mset"], ["proof (prove)\nusing this:\n  \\<exists>xs. mset xs = ?X\n\ngoal (1 subgoal):\n 1. (\\<And>xs1. mset xs1 = X1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset xs1 = X1\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "obtain xs2 where xs2: \"mset xs2 = X2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs2. mset xs2 = X2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_mset"], ["proof (prove)\nusing this:\n  \\<exists>xs. mset xs = ?X\n\ngoal (1 subgoal):\n 1. (\\<And>xs2. mset xs2 = X2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset xs2 = X2\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "from xs1 xs2"], ["proof (chain)\npicking this:\n  mset xs1 = X1\n  mset xs2 = X2", "have \"mset (xs1 @ xs2) = X1 + X2\""], ["proof (prove)\nusing this:\n  mset xs1 = X1\n  mset xs2 = X2\n\ngoal (1 subgoal):\n 1. mset (xs1 @ xs2) = X1 + X2", "by auto"], ["proof (state)\nthis:\n  mset (xs1 @ xs2) = X1 + X2\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "from rel_mset_free[OF rel this]"], ["proof (chain)\npicking this:\n  \\<exists>ys. mset ys = Y \\<and> list_all2 rel (xs1 @ xs2) ys", "obtain ys\n    where ys: \"mset ys = Y\" \"list_all2 rel (xs1 @ xs2) ys\""], ["proof (prove)\nusing this:\n  \\<exists>ys. mset ys = Y \\<and> list_all2 rel (xs1 @ xs2) ys\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        \\<lbrakk>mset ys = Y; list_all2 rel (xs1 @ xs2) ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset ys = Y\n  list_all2 rel (xs1 @ xs2) ys\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "then"], ["proof (chain)\npicking this:\n  mset ys = Y\n  list_all2 rel (xs1 @ xs2) ys", "obtain ys1 ys2\n    where ys12: \"ys = ys1 @ ys2\"\n      and xs1ys1: \"list_all2 rel xs1 ys1\"\n      and xs2ys2: \"list_all2 rel xs2 ys2\""], ["proof (prove)\nusing this:\n  mset ys = Y\n  list_all2 rel (xs1 @ xs2) ys\n\ngoal (1 subgoal):\n 1. (\\<And>ys1 ys2.\n        \\<lbrakk>ys = ys1 @ ys2; list_all2 rel xs1 ys1;\n         list_all2 rel xs2 ys2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using list_all2_append1"], ["proof (prove)\nusing this:\n  mset ys = Y\n  list_all2 rel (xs1 @ xs2) ys\n  list_all2 ?P (?xs @ ?ys) ?zs =\n  (\\<exists>us vs.\n      ?zs = us @ vs \\<and>\n      length us = length ?xs \\<and>\n      length vs = length ?ys \\<and>\n      list_all2 ?P ?xs us \\<and> list_all2 ?P ?ys vs)\n\ngoal (1 subgoal):\n 1. (\\<And>ys1 ys2.\n        \\<lbrakk>ys = ys1 @ ys2; list_all2 rel xs1 ys1;\n         list_all2 rel xs2 ys2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ys = ys1 @ ys2\n  list_all2 rel xs1 ys1\n  list_all2 rel xs2 ys2\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "from ys12 ys"], ["proof (chain)\npicking this:\n  ys = ys1 @ ys2\n  mset ys = Y\n  list_all2 rel (xs1 @ xs2) ys", "have \"Y = mset ys1 + mset ys2\""], ["proof (prove)\nusing this:\n  ys = ys1 @ ys2\n  mset ys = Y\n  list_all2 rel (xs1 @ xs2) ys\n\ngoal (1 subgoal):\n 1. Y = mset ys1 + mset ys2", "by auto"], ["proof (state)\nthis:\n  Y = mset ys1 + mset ys2\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "moreover"], ["proof (state)\nthis:\n  Y = mset ys1 + mset ys2\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "from xs1 xs1ys1"], ["proof (chain)\npicking this:\n  mset xs1 = X1\n  list_all2 rel xs1 ys1", "have \"rel_mset rel X1 (mset ys1)\""], ["proof (prove)\nusing this:\n  mset xs1 = X1\n  list_all2 rel xs1 ys1\n\ngoal (1 subgoal):\n 1. rel_mset rel X1 (mset ys1)", "unfolding rel_mset_def"], ["proof (prove)\nusing this:\n  mset xs1 = X1\n  list_all2 rel xs1 ys1\n\ngoal (1 subgoal):\n 1. \\<exists>xs ys.\n       mset xs = X1 \\<and> mset ys = mset ys1 \\<and> list_all2 rel xs ys", "by auto"], ["proof (state)\nthis:\n  rel_mset rel X1 (mset ys1)\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "moreover"], ["proof (state)\nthis:\n  rel_mset rel X1 (mset ys1)\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "from xs2 xs2ys2"], ["proof (chain)\npicking this:\n  mset xs2 = X2\n  list_all2 rel xs2 ys2", "have \"rel_mset rel X2 (mset ys2)\""], ["proof (prove)\nusing this:\n  mset xs2 = X2\n  list_all2 rel xs2 ys2\n\ngoal (1 subgoal):\n 1. rel_mset rel X2 (mset ys2)", "unfolding rel_mset_def"], ["proof (prove)\nusing this:\n  mset xs2 = X2\n  list_all2 rel xs2 ys2\n\ngoal (1 subgoal):\n 1. \\<exists>xs ys.\n       mset xs = X2 \\<and> mset ys = mset ys2 \\<and> list_all2 rel xs ys", "by auto"], ["proof (state)\nthis:\n  rel_mset rel X2 (mset ys2)\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "ultimately"], ["proof (chain)\npicking this:\n  Y = mset ys1 + mset ys2\n  rel_mset rel X1 (mset ys1)\n  rel_mset rel X2 (mset ys2)", "show ?thesis"], ["proof (prove)\nusing this:\n  Y = mset ys1 + mset ys2\n  rel_mset rel X1 (mset ys1)\n  rel_mset rel X2 (mset ys2)\n\ngoal (1 subgoal):\n 1. \\<exists>Y1 Y2.\n       Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2", "by (subst exI[of _ \"mset ys1\"], subst exI[of _ \"mset ys2\"],auto)"], ["proof (state)\nthis:\n  \\<exists>Y1 Y2.\n     Y = Y1 + Y2 \\<and> rel_mset rel X1 Y1 \\<and> rel_mset rel X2 Y2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_mset_OO:\n  assumes AB: \"rel_mset R A B\" and BC: \"rel_mset S B C\"\n  shows \"rel_mset (R OO S) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_mset (R OO S) A C", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_mset (R OO S) A C", "from AB"], ["proof (chain)\npicking this:\n  rel_mset R A B", "obtain as bs where A_as: \"A = mset as\" and B_bs: \"B = mset bs\" and as_bs: \"list_all2 R as bs\""], ["proof (prove)\nusing this:\n  rel_mset R A B\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>A = mset as; B = mset bs; list_all2 R as bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: rel_mset_def)"], ["proof (state)\nthis:\n  A = mset as\n  B = mset bs\n  list_all2 R as bs\n\ngoal (1 subgoal):\n 1. rel_mset (R OO S) A C", "from rel_mset_free[OF BC] B_bs"], ["proof (chain)\npicking this:\n  mset ?xs = B \\<Longrightarrow>\n  \\<exists>ys. mset ys = C \\<and> list_all2 S ?xs ys\n  B = mset bs", "obtain cs where C_cs: \"C = mset cs\" and bs_cs: \"list_all2 S bs cs\""], ["proof (prove)\nusing this:\n  mset ?xs = B \\<Longrightarrow>\n  \\<exists>ys. mset ys = C \\<and> list_all2 S ?xs ys\n  B = mset bs\n\ngoal (1 subgoal):\n 1. (\\<And>cs.\n        \\<lbrakk>C = mset cs; list_all2 S bs cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C = mset cs\n  list_all2 S bs cs\n\ngoal (1 subgoal):\n 1. rel_mset (R OO S) A C", "from list_all2_trans[OF _ as_bs bs_cs, of \"R OO S\"] A_as C_cs"], ["proof (chain)\npicking this:\n  (\\<And>a b c.\n      \\<lbrakk>R a b; S b c\\<rbrakk>\n      \\<Longrightarrow> (R OO S) a c) \\<Longrightarrow>\n  list_all2 (R OO S) as cs\n  A = mset as\n  C = mset cs", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>a b c.\n      \\<lbrakk>R a b; S b c\\<rbrakk>\n      \\<Longrightarrow> (R OO S) a c) \\<Longrightarrow>\n  list_all2 (R OO S) as cs\n  A = mset as\n  C = mset cs\n\ngoal (1 subgoal):\n 1. rel_mset (R OO S) A C", "by (auto simp: rel_mset_def)"], ["proof (state)\nthis:\n  rel_mset (R OO S) A C\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}