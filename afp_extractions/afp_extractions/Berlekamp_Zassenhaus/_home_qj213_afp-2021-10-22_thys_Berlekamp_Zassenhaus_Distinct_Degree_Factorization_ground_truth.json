{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Distinct_Degree_Factorization.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma factors_of_same_degreeD: assumes \"factors_of_same_degree i f\"\n  shows \"i \\<noteq> 0\" \"degree f \\<noteq> 0\" \"monic f\" \"g dvd f \\<Longrightarrow> irreducible g = (degree g = i)\"", "theorem (in field) finite_field_mult_group_has_gen2:\n  assumes finite:\"finite (carrier R)\"\n  shows \"\\<exists>a \\<in> carrier (mult_of R). group.ord (mult_of R) a = order (mult_of R) \n  \\<and> carrier (mult_of R) = {a[^]i | i::nat . i \\<in> UNIV}\"", "lemma add_power_prime_poly_mod_ring[simp]:\nfixes x :: \"'a::{prime_card} mod_ring poly\"\nshows \"(x + y) ^ CARD('a)^n = x ^ (CARD('a)^n) + y ^ CARD('a)^n\"", "lemma fermat_theorem_mod_ring2[simp]:\nfixes a::\"'a::{prime_card} mod_ring\"\nshows \"a ^ (CARD('a)^n) = a\"", "lemma fermat_theorem_power_poly[simp]:\n  fixes a::\"'a::prime_card mod_ring\"\n  shows \"[:a:] ^ CARD('a::prime_card) ^ n = [:a:]\"", "lemma degree_prod_monom: \"degree (\\<Prod>i = 0..<n. monom 1 1) = n\"", "lemma degree_monom0[simp]: \"degree (monom a 0) = 0\"", "lemma degree_monom0'[simp]: \"degree (monom 0 b) = 0\"", "lemma sum_monom_mod:\n  assumes \"b < degree f\"\n  shows \"(\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\"", "lemma x_power_aq_minus_1_rw:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and b: \"b > 0\"\n  shows \"x ^ (a * q) - 1 = ((x^a) - 1) * sum ((^) (x^a)) {..<q}\"", "lemma dvd_power_minus_1_conv1:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and xa_dvd: \"x ^ a - 1 dvd x^b - 1\" \n    and b0: \"b > 0\"\n  shows \"a dvd b\"", "lemma dvd_power_minus_1_conv2:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and a_dvd_b: \"a dvd b\" \n    and b0: \"b > 0\"\n  shows \"x ^ a - 1 dvd x^b - 1\"", "lemma degree_f[simp]: \"degree f > 0\"", "lemma element_in_carrier: \"(a \\<in> carrier R) = (degree a < degree f)\"", "lemma f_dvd_ab:\n  \"a = 0 \\<or> b = 0\" if \"f dvd a * b\" \n    and a: \"degree a < degree f\" \n    and b: \"degree b < degree f\"", "lemma ab_mod_f0:\n  \"a = 0 \\<or> b = 0\" if \"a * b mod f = 0\" \n    and a: \"degree a < degree f\" \n    and b: \"degree b < degree f\"", "lemma irreducible\\<^sub>dD2:\n  fixes p q :: \"'b::{comm_semiring_1,semiring_no_zero_divisors} poly\"\n  assumes \"irreducible\\<^sub>d p\"\n  and  \"degree q < degree p\" and \"degree q \\<noteq> 0\"\n  shows \"\\<not> q dvd p\"", "lemma times_mod_f_1_imp_0:\n  assumes x: \"degree x < degree f\" \n    and x2: \"\\<forall>xa. x * xa mod f = 1 \\<longrightarrow> \\<not> degree xa < degree f\"    \n  shows \"x = 0\"", "lemma zero_in_carrier[simp]: \"0 \\<in> carrier_irr\"", "lemma card_carrier_irr[simp]: \"card carrier_irr = CARD('a)^(degree f)\"", "lemma finite_carrier_irr[simp]: \"finite (carrier_irr)\"", "lemma finite_carrier_R[simp]: \"finite (carrier R)\"", "lemma finite_carrier_mult_of[simp]: \"finite (carrier (mult_of R))\"", "lemma constant_in_carrier[simp]: \"[:a:] \\<in> carrier R\"", "lemma mod_in_carrier[simp]: \"a mod f \\<in> carrier R\"", "lemma order_irr: \"Coset.order (mult_of R) = CARD('a)^degree f - 1\"", "lemma element_power_order_eq_1:\n    assumes x: \"x \\<in> carrier (mult_of R)\" \n    shows \"x [^]\\<^bsub>(mult_of R)\\<^esub> Coset.order (mult_of R) = \\<one>\\<^bsub>(mult_of R)\\<^esub>\"", "lemma pow_irr[simp]: \"x [^]\\<^bsub>(R)\\<^esub> n= x^n mod f\"", "lemma pow_irr_mult_of[simp]: \"x [^]\\<^bsub>(mult_of R)\\<^esub> n= x^n mod f\"", "lemma fermat_theorem_power_poly_R[simp]: \"[:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = [:a:]\"", "lemma times_mod_expand:\n  \"(a \\<otimes>\\<^bsub>(R)\\<^esub> b) = ((a mod f) \\<otimes>\\<^bsub>(R)\\<^esub> (b mod f))\"", "lemma mult_closed_power:\nassumes x: \"x \\<in> carrier R\" and y: \"y \\<in> carrier R\"\nand \"x [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = x\"\nand \"y [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = y\"\nshows \"(x \\<otimes>\\<^bsub>(R)\\<^esub> y) [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = (x \\<otimes>\\<^bsub>(R)\\<^esub> y)\"", "lemma add_closed_power:\nassumes x1: \"x [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = x\"\nand y1: \"y [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = y\"\nshows \"(x \\<oplus>\\<^bsub>(R)\\<^esub> y) [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = (x \\<oplus>\\<^bsub>(R)\\<^esub> y)\"", "lemma x_power_pm_minus_1: \n  assumes x: \"x \\<in> carrier (mult_of R)\"\n  and \"x [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = x\"\n  shows \"x [^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ m' - 1) = \\<one>\\<^bsub>(R)\\<^esub>\"", "lemma monom_a_1_P:\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and eq: \"monom 1 1 [^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ m') = monom 1 1\"\n  shows \"monom a 1 [^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ m') = monom a 1\"", "lemma prod_monom_1_1:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and eq: \"P (monom 1 1) n\"\n  shows \"P ((\\<Prod>i = 0..<b::nat. monom 1 1) mod f) n\"", "lemma monom_1_b:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and monom_1_1: \"P (monom 1 1) m'\"\n  and b: \"b < degree f\"\n  shows \"P (monom 1 b) m'\"", "lemma monom_a_b:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and m1: \"P (monom 1 1) m'\"\n  and b: \"b < degree f\"\n  shows \"P (monom a b) m'\"", "lemma sum_monoms_P:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and monom_1_1: \"P (monom 1 1) n\"\n  and b: \"b < degree f\"\nshows \"P ((\\<Sum>i\\<le>b. monom (g i) i)) n\"", "lemma element_carrier_P:\n  defines \"P \\<equiv> (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and monom_1_1: \"P (monom 1 1) m'\"\n  and a: \"a \\<in> carrier R\"\nshows \"P a m'\"", "lemma degree_divisor1: \n  assumes f: \"irreducible (f :: 'a :: prime_card mod_ring poly)\" \n  and d: \"degree f = d\" \nshows \"f dvd (monom 1 1)^(CARD('a)^d) - monom 1 1\"", "lemma degree_divisor2: \n  assumes f: \"irreducible (f :: 'a :: prime_card mod_ring poly)\" \n  and d: \"degree f = d\" \n  and c_ge_1: \"1 \\<le> c\" and cd: \"c < d\"\nshows \"\\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\"", "lemma degree_divisor: assumes \"irreducible (f :: 'a :: prime_card mod_ring poly)\" \"degree f = d\" \n  shows \"f dvd (monom 1 1)^(CARD('a)^d) - monom 1 1\" \n  and \"1 \\<le> c \\<Longrightarrow> c < d \\<Longrightarrow> \\<not> f dvd (monom 1 1)^(CARD('a)^c) - monom 1 1\"", "lemma dist_degree_factorize_main: assumes \n  dist: \"dist_degree_factorize_main v w d res = facts\" and\n  w: \"w = (monom 1 1)^(CARD('a)^d) mod v\" and\n  sf: \"square_free u\" and  \n  mon: \"monic u\" and\n  prod: \"u = v * prod_list (map snd res)\" and\n  deg: \"\\<And> f. irreducible f \\<Longrightarrow> f dvd v \\<Longrightarrow> degree f > d\" and\n  res: \"\\<And> i f. (i,f) \\<in> set res \\<Longrightarrow> i \\<noteq> 0 \\<and> degree f \\<noteq> 0 \\<and> monic f \\<and> (\\<forall> g. irreducible g \\<longrightarrow> g dvd f \\<longrightarrow> degree g = i)\" \nshows \"u = prod_list (map snd facts) \\<and> (\\<forall> i f. (i,f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\"", "lemma distinct_degree_factorization: assumes \n  dist: \"distinct_degree_factorization f = facts\" and\n  u: \"square_free f\" and  \n  mon: \"monic f\" \nshows \"f = prod_list (map snd facts) \\<and> (\\<forall> i f. (i,f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\""], "translations": [["", "lemma factors_of_same_degreeD: assumes \"factors_of_same_degree i f\"\n  shows \"i \\<noteq> 0\" \"degree f \\<noteq> 0\" \"monic f\" \"g dvd f \\<Longrightarrow> irreducible g = (degree g = i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i \\<noteq> 0 &&& degree f \\<noteq> 0) &&&\n    monic f &&& (g dvd f \\<Longrightarrow> irreducible g = (degree g = i))", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. i \\<noteq> 0\n 2. degree f \\<noteq> 0\n 3. monic f\n 4. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "note * = assms[unfolded factors_of_same_degree_def]"], ["proof (state)\nthis:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n\ngoal (4 subgoals):\n 1. i \\<noteq> 0\n 2. degree f \\<noteq> 0\n 3. monic f\n 4. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "show i: \"i \\<noteq> 0\" and f: \"degree f \\<noteq> 0\" \"monic f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 &&& degree f \\<noteq> 0 &&& monic f", "using *"], ["proof (prove)\nusing this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 &&& degree f \\<noteq> 0 &&& monic f", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> 0\n  degree f \\<noteq> 0\n  monic f\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "assume gf: \"g dvd f\""], ["proof (state)\nthis:\n  g dvd f\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "with *"], ["proof (chain)\npicking this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n  g dvd f", "have \"irreducible g \\<Longrightarrow> degree g = i\""], ["proof (prove)\nusing this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n  g dvd f\n\ngoal (1 subgoal):\n 1. irreducible g \\<Longrightarrow> degree g = i", "by auto"], ["proof (state)\nthis:\n  irreducible g \\<Longrightarrow> degree g = i\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "moreover"], ["proof (state)\nthis:\n  irreducible g \\<Longrightarrow> degree g = i\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "{"], ["proof (state)\nthis:\n  irreducible g \\<Longrightarrow> degree g = i\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "assume **: \"degree g = i\" \"\\<not> irreducible g\""], ["proof (state)\nthis:\n  degree g = i\n  \\<not> irreducible g\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "with irreducible\\<^sub>d_factor[of g] i"], ["proof (chain)\npicking this:\n  0 < degree g \\<Longrightarrow>\n  \\<exists>q r.\n     irreducible\\<^sub>d q \\<and> g = q * r \\<and> degree r < degree g\n  i \\<noteq> 0\n  degree g = i\n  \\<not> irreducible g", "obtain h1 h2 where irr: \"irreducible h1\" and gh: \"g = h1 * h2\" \n      and deg_h2: \"degree h2 < degree g\""], ["proof (prove)\nusing this:\n  0 < degree g \\<Longrightarrow>\n  \\<exists>q r.\n     irreducible\\<^sub>d q \\<and> g = q * r \\<and> degree r < degree g\n  i \\<noteq> 0\n  degree g = i\n  \\<not> irreducible g\n\ngoal (1 subgoal):\n 1. (\\<And>h1 h2.\n        \\<lbrakk>irreducible h1; g = h1 * h2; degree h2 < degree g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  irreducible h1\n  g = h1 * h2\n  degree h2 < degree g\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "from ** i"], ["proof (chain)\npicking this:\n  degree g = i\n  \\<not> irreducible g\n  i \\<noteq> 0", "have g0: \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree g = i\n  \\<not> irreducible g\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "from gf gh g0"], ["proof (chain)\npicking this:\n  g dvd f\n  g = h1 * h2\n  g \\<noteq> 0", "have \"h1 dvd f\""], ["proof (prove)\nusing this:\n  g dvd f\n  g = h1 * h2\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. h1 dvd f", "using dvd_mult_left"], ["proof (prove)\nusing this:\n  g dvd f\n  g = h1 * h2\n  g \\<noteq> 0\n  ?a * ?b dvd ?c \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. h1 dvd f", "by blast"], ["proof (state)\nthis:\n  h1 dvd f\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "from * f this irr"], ["proof (chain)\npicking this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n  degree f \\<noteq> 0\n  monic f\n  h1 dvd f\n  irreducible h1", "have deg_h: \"degree h1 = i\""], ["proof (prove)\nusing this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n  degree f \\<noteq> 0\n  monic f\n  h1 dvd f\n  irreducible h1\n\ngoal (1 subgoal):\n 1. degree h1 = i", "by auto"], ["proof (state)\nthis:\n  degree h1 = i\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "from arg_cong[OF gh, of degree] g0"], ["proof (chain)\npicking this:\n  degree g = degree (h1 * h2)\n  g \\<noteq> 0", "have \"degree g = degree h1 + degree h2\""], ["proof (prove)\nusing this:\n  degree g = degree (h1 * h2)\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree g = degree h1 + degree h2", "by (simp add: degree_mult_eq gh)"], ["proof (state)\nthis:\n  degree g = degree h1 + degree h2\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "with **(1) deg_h"], ["proof (chain)\npicking this:\n  degree g = i\n  degree h1 = i\n  degree g = degree h1 + degree h2", "have \"degree h2 = 0\""], ["proof (prove)\nusing this:\n  degree g = i\n  degree h1 = i\n  degree g = degree h1 + degree h2\n\ngoal (1 subgoal):\n 1. degree h2 = 0", "by auto"], ["proof (state)\nthis:\n  degree h2 = 0\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. h2 = [:a:]", "obtain c where h2: \"h2 = [:c:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. h2 = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. h2 = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  h2 = [:c:]\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "with gh g0"], ["proof (chain)\npicking this:\n  g = h1 * h2\n  g \\<noteq> 0\n  h2 = [:c:]", "have g: \"g = smult c h1\" \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g = h1 * h2\n  g \\<noteq> 0\n  h2 = [:c:]\n\ngoal (1 subgoal):\n 1. g = Polynomial.smult c h1 &&& c \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  g = Polynomial.smult c h1\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "with irr **(2) irreducible_smult_field[of c h1]"], ["proof (chain)\npicking this:\n  irreducible h1\n  \\<not> irreducible g\n  irreducible (Polynomial.smult c h1) =\n  (c \\<noteq> (0::'a) \\<and> irreducible h1)\n  g = Polynomial.smult c h1\n  c \\<noteq> (0::'a)", "have False"], ["proof (prove)\nusing this:\n  irreducible h1\n  \\<not> irreducible g\n  irreducible (Polynomial.smult c h1) =\n  (c \\<noteq> (0::'a) \\<and> irreducible h1)\n  g = Polynomial.smult c h1\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>degree g = i; \\<not> irreducible g\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. g dvd f \\<Longrightarrow> irreducible g = (degree g = i)", "ultimately"], ["proof (chain)\npicking this:\n  irreducible g \\<Longrightarrow> degree g = i\n  \\<lbrakk>degree g = i; \\<not> irreducible g\\<rbrakk>\n  \\<Longrightarrow> False", "show \"irreducible g = (degree g = i)\""], ["proof (prove)\nusing this:\n  irreducible g \\<Longrightarrow> degree g = i\n  \\<lbrakk>degree g = i; \\<not> irreducible g\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. irreducible g = (degree g = i)", "by auto"], ["proof (state)\nthis:\n  irreducible g = (degree g = i)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Exercise 16 in Knuth, pages 457 and 682 *)"], ["", "hide_const order"], ["", "hide_const up_ring.monom"], ["", "(*This theorem is field.finite_field_mult_group_has_gen but adding the order of the element.*)"], ["", "theorem (in field) finite_field_mult_group_has_gen2:\n  assumes finite:\"finite (carrier R)\"\n  shows \"\\<exists>a \\<in> carrier (mult_of R). group.ord (mult_of R) a = order (mult_of R) \n  \\<and> carrier (mult_of R) = {a[^]i | i::nat . i \\<in> UNIV}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       group.ord (mult_of R) a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       group.ord (mult_of R) a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "note mult_of_simps[simp]"], ["proof (state)\nthis:\n  carrier (mult_of ?R) = carrier ?R - {\\<zero>\\<^bsub>?R\\<^esub>}\n  (\\<otimes>\\<^bsub>mult_of ?R\\<^esub>) = (\\<otimes>\\<^bsub>?R\\<^esub>)\n  ([^]\\<^bsub>mult_of ?R\\<^esub>) = ([^]\\<^bsub>?R\\<^esub>)\n  \\<one>\\<^bsub>mult_of ?R\\<^esub> = \\<one>\\<^bsub>?R\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       group.ord (mult_of R) a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have finite': \"finite (carrier (mult_of R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier (mult_of R))", "using finite"], ["proof (prove)\nusing this:\n  finite (carrier R)\n\ngoal (1 subgoal):\n 1. finite (carrier (mult_of R))", "by (rule finite_mult_of)"], ["proof (state)\nthis:\n  finite (carrier (mult_of R))\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       group.ord (mult_of R) a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "interpret G: group \"mult_of R\" rewrites\n      \"([^]\\<^bsub>mult_of R\\<^esub>) = (([^]) :: _ \\<Rightarrow> nat \\<Rightarrow> _)\" and \"\\<one>\\<^bsub>mult_of R\\<^esub> = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (mult_of R) &&&\n    ([^]\\<^bsub>mult_of R\\<^esub>) = ([^]) &&&\n    \\<one>\\<^bsub>mult_of R\\<^esub> = \\<one>", "by (rule field_mult_group) (simp_all add: fun_eq_iff nat_pow_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "let ?N = \"\\<lambda> x . card {a \\<in> carrier (mult_of R). group.ord (mult_of R) a  = x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"0 < order R - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < order R - 1", "unfolding Coset.order_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < card (carrier R) - 1", "using card_mono[OF finite, of \"{\\<zero>, \\<one>}\"]"], ["proof (prove)\nusing this:\n  {\\<zero>, \\<one>} \\<subseteq> carrier R \\<Longrightarrow>\n  card {\\<zero>, \\<one>} \\<le> card (carrier R)\n\ngoal (1 subgoal):\n 1. 0 < card (carrier R) - 1", "by simp"], ["proof (state)\nthis:\n  0 < order R - 1\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "then"], ["proof (chain)\npicking this:\n  0 < order R - 1", "have *: \"0 < order (mult_of R)\""], ["proof (prove)\nusing this:\n  0 < order R - 1\n\ngoal (1 subgoal):\n 1. 0 < order (mult_of R)", "using assms"], ["proof (prove)\nusing this:\n  0 < order R - 1\n  finite (carrier R)\n\ngoal (1 subgoal):\n 1. 0 < order (mult_of R)", "by (simp add: order_mult_of)"], ["proof (state)\nthis:\n  0 < order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have fin: \"finite {d. d dvd order (mult_of R) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {d. d dvd order (mult_of R)}", "using dvd_nat_bounds[OF *]"], ["proof (prove)\nusing this:\n  ?n dvd order (mult_of R) \\<Longrightarrow>\n  0 < ?n \\<and> ?n \\<le> order (mult_of R)\n\ngoal (1 subgoal):\n 1. finite {d. d dvd order (mult_of R)}", "by force"], ["proof (state)\nthis:\n  finite {d. d dvd order (mult_of R)}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"(\\<Sum>d | d dvd order (mult_of R). ?N d)\n      = card (UN d:{d . d dvd order (mult_of R) }. {a \\<in> carrier (mult_of R). group.ord (mult_of R) a  = d})\"\n      (is \"_ = card ?U\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n    card\n     (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n         {a \\<in> carrier (mult_of R). G.ord a = d})", "using fin finite"], ["proof (prove)\nusing this:\n  finite {d. d dvd order (mult_of R)}\n  finite (carrier R)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n    card\n     (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n         {a \\<in> carrier (mult_of R). G.ord a = d})", "by (subst card_UN_disjoint) auto"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  card\n   (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n       {a \\<in> carrier (mult_of R). G.ord a = d})\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  card\n   (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n       {a \\<in> carrier (mult_of R). G.ord a = d})\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"?U = carrier (mult_of R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d}) =\n    carrier (mult_of R)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "assume x:\"x \\<in> carrier (mult_of R)\""], ["proof (state)\nthis:\n  x \\<in> carrier (mult_of R)\n\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "hence x':\"x\\<in>carrier (mult_of R)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. x \\<in> carrier (mult_of R)", "by simp"], ["proof (state)\nthis:\n  x \\<in> carrier (mult_of R)\n\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "then"], ["proof (chain)\npicking this:\n  x \\<in> carrier (mult_of R)", "have \"group.ord (mult_of R) x dvd order (mult_of R)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. G.ord x dvd order (mult_of R)", "using finite' G.ord_dvd_group_order[OF x']"], ["proof (prove)\nusing this:\n  x \\<in> carrier (mult_of R)\n  finite (carrier (mult_of R))\n  G.ord x dvd order (mult_of R)\n\ngoal (1 subgoal):\n 1. G.ord x dvd order (mult_of R)", "by (simp add: order_mult_of)"], ["proof (state)\nthis:\n  G.ord x dvd order (mult_of R)\n\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "hence \"x \\<in> ?U\""], ["proof (prove)\nusing this:\n  G.ord x dvd order (mult_of R)\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                {a \\<in> carrier (mult_of R). G.ord a = d})", "using dvd_nat_bounds[of \"order (mult_of R)\" \"group.ord (mult_of R) x\"] x"], ["proof (prove)\nusing this:\n  G.ord x dvd order (mult_of R)\n  \\<lbrakk>0 < order (mult_of R); G.ord x dvd order (mult_of R)\\<rbrakk>\n  \\<Longrightarrow> 0 < G.ord x \\<and> G.ord x \\<le> order (mult_of R)\n  x \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                {a \\<in> carrier (mult_of R). G.ord a = d})", "by blast"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n              {a \\<in> carrier (mult_of R). G.ord a = d})\n\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "}"], ["proof (state)\nthis:\n  ?x3 \\<in> carrier (mult_of R) \\<Longrightarrow>\n  ?x3\n  \\<in> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n            {a \\<in> carrier (mult_of R). G.ord a = d})\n\ngoal (2 subgoals):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)\n 2. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "thus \"carrier (mult_of R) \\<subseteq> ?U\""], ["proof (prove)\nusing this:\n  ?x3 \\<in> carrier (mult_of R) \\<Longrightarrow>\n  ?x3\n  \\<in> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n            {a \\<in> carrier (mult_of R). G.ord a = d})\n\ngoal (1 subgoal):\n 1. carrier (mult_of R)\n    \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                    {a \\<in> carrier (mult_of R). G.ord a = d})", "by blast"], ["proof (state)\nthis:\n  carrier (mult_of R)\n  \\<subseteq> (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n                  {a \\<in> carrier (mult_of R). G.ord a = d})\n\ngoal (1 subgoal):\n 1. (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n        {a \\<in> carrier (mult_of R). G.ord a = d})\n    \\<subseteq> carrier (mult_of R)", "qed auto"], ["proof (state)\nthis:\n  (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n      {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "also"], ["proof (state)\nthis:\n  (\\<Union>d\\<in>{d. d dvd order (mult_of R)}.\n      {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"card ... = Coset.order (mult_of R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (carrier (mult_of R)) = order (mult_of R)", "using order_mult_of finite'"], ["proof (prove)\nusing this:\n  finite (carrier R) \\<Longrightarrow> order (mult_of R) = order R - 1\n  finite (carrier (mult_of R))\n\ngoal (1 subgoal):\n 1. card (carrier (mult_of R)) = order (mult_of R)", "by (simp add: Coset.order_def)"], ["proof (state)\nthis:\n  card (carrier (mult_of R)) = order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  order (mult_of R)", "have sum_Ns_eq: \"(\\<Sum>d | d dvd order (mult_of R). ?N d) = order (mult_of R)\""], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  order (mult_of R)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n    order (mult_of R)", "."], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "{"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "assume d:\"d dvd order (mult_of R)\""], ["proof (state)\nthis:\n  d dvd order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"card {a \\<in> carrier (mult_of R). group.ord (mult_of R) a = d} \\<le> phi' d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d\n 2. \\<not> ?P \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "assume \"card {a \\<in> carrier (mult_of R). group.ord (mult_of R) a = d} = 0\""], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d\n 2. \\<not> ?P \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "thus ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} = 0\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "by presburger"], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<noteq>\n    0 \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<noteq>\n    0 \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "assume \"card {a \\<in> carrier (mult_of R). group.ord (mult_of R) a = d} \\<noteq> 0\""], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} \\<noteq> 0\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<noteq>\n    0 \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "hence \"\\<exists>a \\<in> carrier (mult_of R). group.ord (mult_of R) a = d\""], ["proof (prove)\nusing this:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R). G.ord a = d", "by (auto simp: card_eq_0_iff)"], ["proof (state)\nthis:\n  \\<exists>a\\<in>carrier (mult_of R). G.ord a = d\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<noteq>\n    0 \\<Longrightarrow>\n    card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>a\\<in>carrier (mult_of R). G.ord a = d\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "using num_elems_of_ord_eq_phi'[OF finite d]"], ["proof (prove)\nusing this:\n  \\<exists>a\\<in>carrier (mult_of R). G.ord a = d\n  \\<exists>a\\<in>carrier (mult_of R). G.ord a = d \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = d} = phi' d\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = d} \\<le> phi' d\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "}"], ["proof (state)\nthis:\n  ?d3 dvd order (mult_of R) \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?d3} \\<le> phi' ?d3\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence all_le:\"\\<And>i. i \\<in> {d. d dvd order (mult_of R) }\n        \\<Longrightarrow> (\\<lambda>i. card {a \\<in> carrier (mult_of R). group.ord (mult_of R) a = i}) i \\<le> (\\<lambda>i. phi' i) i\""], ["proof (prove)\nusing this:\n  ?d3 dvd order (mult_of R) \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?d3} \\<le> phi' ?d3\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n       card {a \\<in> carrier (mult_of R). G.ord a = i} \\<le> phi' i", "by fast"], ["proof (state)\nthis:\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} \\<le> phi' ?i1\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence le:\"(\\<Sum>i | i dvd order (mult_of R). ?N i)\n            \\<le> (\\<Sum>i | i dvd order (mult_of R). phi' i)\""], ["proof (prove)\nusing this:\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} \\<le> phi' ?i1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | i dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = i})\n    \\<le> (\\<Sum>i | i dvd order (mult_of R). phi' i)", "using sum_mono[of \"{d .  d dvd order (mult_of R)}\"\n                  \"\\<lambda>i. card {a \\<in> carrier (mult_of R). group.ord (mult_of R) a = i}\"]"], ["proof (prove)\nusing this:\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} \\<le> phi' ?i1\n  (\\<And>i.\n      i \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n      card {a \\<in> carrier (mult_of R). G.ord a = i}\n      \\<le> ?g i) \\<Longrightarrow>\n  (\\<Sum>i\\<in>{d. d dvd order (mult_of R)}.\n     card {a \\<in> carrier (mult_of R). G.ord a = i})\n  \\<le> sum ?g {d. d dvd order (mult_of R)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | i dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = i})\n    \\<le> (\\<Sum>i | i dvd order (mult_of R). phi' i)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i})\n  \\<le> (\\<Sum>i | i dvd order (mult_of R). phi' i)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"order (mult_of R) = (\\<Sum>d | d dvd order (mult_of R). phi' d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (mult_of R) = (\\<Sum>d | d dvd order (mult_of R). phi' d)", "using *"], ["proof (prove)\nusing this:\n  0 < order (mult_of R)\n\ngoal (1 subgoal):\n 1. order (mult_of R) = (\\<Sum>d | d dvd order (mult_of R). phi' d)", "by (simp add: sum_phi'_factors)"], ["proof (state)\nthis:\n  order (mult_of R) = (\\<Sum>d | d dvd order (mult_of R). phi' d)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence eq:\"(\\<Sum>i | i dvd order (mult_of R). ?N i)\n          = (\\<Sum>i | i dvd order (mult_of R). phi' i)\""], ["proof (prove)\nusing this:\n  order (mult_of R) = (\\<Sum>d | d dvd order (mult_of R). phi' d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | i dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = i}) =\n    (\\<Sum>i | i dvd order (mult_of R). phi' i)", "using le sum_Ns_eq"], ["proof (prove)\nusing this:\n  order (mult_of R) = (\\<Sum>d | d dvd order (mult_of R). phi' d)\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i})\n  \\<le> (\\<Sum>i | i dvd order (mult_of R). phi' i)\n  (\\<Sum>d | d dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = d}) =\n  order (mult_of R)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | i dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = i}) =\n    (\\<Sum>i | i dvd order (mult_of R). phi' i)", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i}) =\n  (\\<Sum>i | i dvd order (mult_of R). phi' i)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have \"\\<And>i. i \\<in> {d. d dvd order (mult_of R) } \\<Longrightarrow> ?N i = (\\<lambda>i. phi' i) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n       card {a \\<in> carrier (mult_of R). G.ord a = i} = phi' i", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "assume i1:\"i \\<in> {d. d dvd order (mult_of R)}\" and \"?N i \\<noteq> phi' i\""], ["proof (state)\nthis:\n  i \\<in> {d. d dvd order (mult_of R)}\n  card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq> phi' i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"?N i = 0\""], ["proof (prove)\nusing this:\n  i \\<in> {d. d dvd order (mult_of R)}\n  card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq> phi' i\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = i} = 0", "using num_elems_of_ord_eq_phi'[OF finite, of i]"], ["proof (prove)\nusing this:\n  i \\<in> {d. d dvd order (mult_of R)}\n  card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq> phi' i\n  \\<lbrakk>i dvd order (mult_of R);\n   \\<exists>a\\<in>carrier (mult_of R). G.ord a = i\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> carrier (mult_of R). G.ord a = i} = phi' i\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = i} = 0", "by (auto simp: card_eq_0_iff)"], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} = 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} = 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "have \"0 < i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < i", "using * i1"], ["proof (prove)\nusing this:\n  0 < order (mult_of R)\n  i \\<in> {d. d dvd order (mult_of R)}\n\ngoal (1 subgoal):\n 1. 0 < i", "by (simp add: dvd_nat_bounds[of \"order (mult_of R)\" i])"], ["proof (state)\nthis:\n  0 < i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} = 0\n  0 < i", "have \"?N i < phi' i\""], ["proof (prove)\nusing this:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} = 0\n  0 < i\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = i} < phi' i", "using phi'_nonzero"], ["proof (prove)\nusing this:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} = 0\n  0 < i\n  0 < ?m \\<Longrightarrow> 0 < phi' ?m\n\ngoal (1 subgoal):\n 1. card {a \\<in> carrier (mult_of R). G.ord a = i} < phi' i", "by presburger"], ["proof (state)\nthis:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} < phi' i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(\\<Sum>i | i dvd order (mult_of R). ?N i)\n         < (\\<Sum>i | i dvd order (mult_of R). phi' i)\""], ["proof (prove)\nusing this:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} < phi' i\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | i dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = i})\n    < (\\<Sum>i | i dvd order (mult_of R). phi' i)", "using sum_strict_mono_ex1[OF fin, of \"?N\" \"\\<lambda> i . phi' i\"]\n            i1 all_le"], ["proof (prove)\nusing this:\n  card {a \\<in> carrier (mult_of R). G.ord a = i} < phi' i\n  \\<lbrakk>\\<forall>x\\<in>{d. d dvd order (mult_of R)}.\n              card {a \\<in> carrier (mult_of R). G.ord a = x} \\<le> phi' x;\n   \\<exists>a\\<in>{d. d dvd order (mult_of R)}.\n      card {aa \\<in> carrier (mult_of R). G.ord aa = a} < phi' a\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>x\\<in>{d. d dvd order (mult_of R)}.\n                       card {a \\<in> carrier (mult_of R). G.ord a = x})\n                    < sum phi' {d. d dvd order (mult_of R)}\n  i \\<in> {d. d dvd order (mult_of R)}\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} \\<le> phi' ?i1\n\ngoal (1 subgoal):\n 1. (\\<Sum>i | i dvd order (mult_of R).\n       card {a \\<in> carrier (mult_of R). G.ord a = i})\n    < (\\<Sum>i | i dvd order (mult_of R). phi' i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i})\n  < (\\<Sum>i | i dvd order (mult_of R). phi' i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {d. d dvd order (mult_of R)};\n        card {a \\<in> carrier (mult_of R). G.ord a = i} \\<noteq>\n        phi' i\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i})\n  < (\\<Sum>i | i dvd order (mult_of R). phi' i)\n\ngoal (1 subgoal):\n 1. False", "using eq"], ["proof (prove)\nusing this:\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i})\n  < (\\<Sum>i | i dvd order (mult_of R). phi' i)\n  (\\<Sum>i | i dvd order (mult_of R).\n     card {a \\<in> carrier (mult_of R). G.ord a = i}) =\n  (\\<Sum>i | i dvd order (mult_of R). phi' i)\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} = phi' ?i1\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence \"?N (order (mult_of R)) > 0\""], ["proof (prove)\nusing this:\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} = phi' ?i1\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> carrier (mult_of R). G.ord a = order (mult_of R)}", "using *"], ["proof (prove)\nusing this:\n  ?i1 \\<in> {d. d dvd order (mult_of R)} \\<Longrightarrow>\n  card {a \\<in> carrier (mult_of R). G.ord a = ?i1} = phi' ?i1\n  0 < order (mult_of R)\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> carrier (mult_of R). G.ord a = order (mult_of R)}", "by (simp add: phi'_nonzero)"], ["proof (state)\nthis:\n  0 < card {a \\<in> carrier (mult_of R). G.ord a = order (mult_of R)}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "then"], ["proof (chain)\npicking this:\n  0 < card {a \\<in> carrier (mult_of R). G.ord a = order (mult_of R)}", "obtain a where a:\"a \\<in> carrier (mult_of R)\" and a_ord:\"group.ord (mult_of R) a = order (mult_of R)\""], ["proof (prove)\nusing this:\n  0 < card {a \\<in> carrier (mult_of R). G.ord a = order (mult_of R)}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> carrier (mult_of R);\n         G.ord a = order (mult_of R)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: card_gt_0_iff)"], ["proof (state)\nthis:\n  a \\<in> carrier (mult_of R)\n  G.ord a = order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence set_eq:\"{a[^]i | i::nat. i \\<in> UNIV} = (\\<lambda>x. a[^]x) ` {0 .. group.ord (mult_of R) a - 1}\""], ["proof (prove)\nusing this:\n  a \\<in> carrier (mult_of R)\n  G.ord a = order (mult_of R)\n\ngoal (1 subgoal):\n 1. {a [^] i |i. i \\<in> UNIV} = ([^]) a ` {0..G.ord a - 1}", "using G.ord_elems[OF finite']"], ["proof (prove)\nusing this:\n  a \\<in> carrier (mult_of R)\n  G.ord a = order (mult_of R)\n  ?a \\<in> carrier (mult_of R) \\<Longrightarrow>\n  {?a [^] x |x. x \\<in> UNIV} = {?a [^] x |x. x \\<in> {0..G.ord ?a - 1}}\n\ngoal (1 subgoal):\n 1. {a [^] i |i. i \\<in> UNIV} = ([^]) a ` {0..G.ord a - 1}", "by auto"], ["proof (state)\nthis:\n  {a [^] i |i. i \\<in> UNIV} = ([^]) a ` {0..G.ord a - 1}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have card_eq:\"card ((\\<lambda>x. a[^]x) ` {0 .. group.ord (mult_of R) a - 1}) = card {0 .. group.ord (mult_of R) a - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (([^]) a ` {0..G.ord a - 1}) = card {0..G.ord a - 1}", "by (intro card_image G.ord_inj finite' a)"], ["proof (state)\nthis:\n  card (([^]) a ` {0..G.ord a - 1}) = card {0..G.ord a - 1}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence \"card ((\\<lambda> x . a[^]x) ` {0 .. group.ord (mult_of R) a - 1}) = card {0 ..order (mult_of R) - 1}\""], ["proof (prove)\nusing this:\n  card (([^]) a ` {0..G.ord a - 1}) = card {0..G.ord a - 1}\n\ngoal (1 subgoal):\n 1. card (([^]) a ` {0..G.ord a - 1}) = card {0..order (mult_of R) - 1}", "using assms"], ["proof (prove)\nusing this:\n  card (([^]) a ` {0..G.ord a - 1}) = card {0..G.ord a - 1}\n  finite (carrier R)\n\ngoal (1 subgoal):\n 1. card (([^]) a ` {0..G.ord a - 1}) = card {0..order (mult_of R) - 1}", "by (simp add: card_eq a_ord)"], ["proof (state)\nthis:\n  card (([^]) a ` {0..G.ord a - 1}) = card {0..order (mult_of R) - 1}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "hence card_R_minus_1:\"card {a[^]i | i::nat. i \\<in> UNIV} =  order (mult_of R)\""], ["proof (prove)\nusing this:\n  card (([^]) a ` {0..G.ord a - 1}) = card {0..order (mult_of R) - 1}\n\ngoal (1 subgoal):\n 1. card {a [^] i |i. i \\<in> UNIV} = order (mult_of R)", "using *"], ["proof (prove)\nusing this:\n  card (([^]) a ` {0..G.ord a - 1}) = card {0..order (mult_of R) - 1}\n  0 < order (mult_of R)\n\ngoal (1 subgoal):\n 1. card {a [^] i |i. i \\<in> UNIV} = order (mult_of R)", "by (subst set_eq) auto"], ["proof (state)\nthis:\n  card {a [^] i |i. i \\<in> UNIV} = order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "have **:\"{a[^]i | i::nat. i \\<in> UNIV} \\<subseteq> carrier (mult_of R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a [^] i |i. i \\<in> UNIV} \\<subseteq> carrier (mult_of R)", "using G.nat_pow_closed[OF a]"], ["proof (prove)\nusing this:\n  a [^] ?n \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. {a [^] i |i. i \\<in> UNIV} \\<subseteq> carrier (mult_of R)", "by auto"], ["proof (state)\nthis:\n  {a [^] i |i. i \\<in> UNIV} \\<subseteq> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "with _"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  {a [^] i |i. i \\<in> UNIV} \\<subseteq> carrier (mult_of R)", "have \"carrier (mult_of R) = {a[^]i|i::nat. i \\<in> UNIV}\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  {a [^] i |i. i \\<in> UNIV} \\<subseteq> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "by (rule card_seteq[symmetric]) (simp_all add: card_R_minus_1 finite Coset.order_def del: UNIV_I)"], ["proof (state)\nthis:\n  carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "thus ?thesis"], ["proof (prove)\nusing this:\n  carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "using a a_ord"], ["proof (prove)\nusing this:\n  carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}\n  a \\<in> carrier (mult_of R)\n  G.ord a = order (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier (mult_of R).\n       G.ord a = order (mult_of R) \\<and>\n       carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}", "by blast"], ["proof (state)\nthis:\n  \\<exists>a\\<in>carrier (mult_of R).\n     G.ord a = order (mult_of R) \\<and>\n     carrier (mult_of R) = {a [^] i |i. i \\<in> UNIV}\n\ngoal:\nNo subgoals!", "qed"], ["", "(*This lemma is a generalization of the theorem add_power_poly_mod_ring \n  which appears in Belekamp_Type_Based.thy*)"], ["", "lemma add_power_prime_poly_mod_ring[simp]:\nfixes x :: \"'a::{prime_card} mod_ring poly\"\nshows \"(x + y) ^ CARD('a)^n = x ^ (CARD('a)^n) + y ^ CARD('a)^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y) ^ CARD('a) ^ n = x ^ CARD('a) ^ n + y ^ CARD('a) ^ n", "proof (induct n arbitrary: x y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. (x + y) ^ CARD('a) ^ 0 = x ^ CARD('a) ^ 0 + y ^ CARD('a) ^ 0\n 2. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x y. (x + y) ^ CARD('a) ^ 0 = x ^ CARD('a) ^ 0 + y ^ CARD('a) ^ 0\n 2. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y) ^ CARD('a) ^ 0 = x ^ CARD('a) ^ 0 + y ^ CARD('a) ^ 0", "by auto"], ["proof (state)\nthis:\n  (x + y) ^ CARD('a) ^ 0 = x ^ CARD('a) ^ 0 + y ^ CARD('a) ^ 0\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  (?x + ?y) ^ CARD('a) ^ n = ?x ^ CARD('a) ^ n + ?y ^ CARD('a) ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "define p where p: \"p = CARD('a)\""], ["proof (state)\nthis:\n  p = CARD('a)\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "have \"(x + y) ^ p ^ Suc n =  (x + y) ^ (p * p^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y) ^ p ^ Suc n = (x + y) ^ (p * p ^ n)", "by simp"], ["proof (state)\nthis:\n  (x + y) ^ p ^ Suc n = (x + y) ^ (p * p ^ n)\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "also"], ["proof (state)\nthis:\n  (x + y) ^ p ^ Suc n = (x + y) ^ (p * p ^ n)\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "have \"... = ((x + y) ^ p) ^ (p^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y) ^ (p * p ^ n) = ((x + y) ^ p) ^ p ^ n", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  (x + y) ^ (p * p ^ n) = ((x + y) ^ p) ^ p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "also"], ["proof (state)\nthis:\n  (x + y) ^ (p * p ^ n) = ((x + y) ^ p) ^ p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "have \"... = (x^p + y^p)^ (p^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x + y) ^ p) ^ p ^ n = (x ^ p + y ^ p) ^ p ^ n", "by (simp add: add_power_poly_mod_ring p)"], ["proof (state)\nthis:\n  ((x + y) ^ p) ^ p ^ n = (x ^ p + y ^ p) ^ p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "also"], ["proof (state)\nthis:\n  ((x + y) ^ p) ^ p ^ n = (x ^ p + y ^ p) ^ p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "have \"... = (x^p)^(p^n) + (y^p)^(p^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ^ p + y ^ p) ^ p ^ n = (x ^ p) ^ p ^ n + (y ^ p) ^ p ^ n", "using Suc.hyps"], ["proof (prove)\nusing this:\n  (?x + ?y) ^ CARD('a) ^ n = ?x ^ CARD('a) ^ n + ?y ^ CARD('a) ^ n\n\ngoal (1 subgoal):\n 1. (x ^ p + y ^ p) ^ p ^ n = (x ^ p) ^ p ^ n + (y ^ p) ^ p ^ n", "unfolding p"], ["proof (prove)\nusing this:\n  (?x + ?y) ^ CARD('a) ^ n = ?x ^ CARD('a) ^ n + ?y ^ CARD('a) ^ n\n\ngoal (1 subgoal):\n 1. (x ^ CARD('a) + y ^ CARD('a)) ^ CARD('a) ^ n =\n    (x ^ CARD('a)) ^ CARD('a) ^ n + (y ^ CARD('a)) ^ CARD('a) ^ n", "by auto"], ["proof (state)\nthis:\n  (x ^ p + y ^ p) ^ p ^ n = (x ^ p) ^ p ^ n + (y ^ p) ^ p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "also"], ["proof (state)\nthis:\n  (x ^ p + y ^ p) ^ p ^ n = (x ^ p) ^ p ^ n + (y ^ p) ^ p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "have \"... = x^(p^(n+1)) + y^(p^(n+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ^ p) ^ p ^ n + (y ^ p) ^ p ^ n = x ^ p ^ (n + 1) + y ^ p ^ (n + 1)", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  (x ^ p) ^ p ^ n + (y ^ p) ^ p ^ n = x ^ p ^ (n + 1) + y ^ p ^ (n + 1)\n\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       (\\<And>x y.\n           (x + y) ^ CARD('a) ^ n =\n           x ^ CARD('a) ^ n + y ^ CARD('a) ^ n) \\<Longrightarrow>\n       (x + y) ^ CARD('a) ^ Suc n =\n       x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "finally"], ["proof (chain)\npicking this:\n  (x + y) ^ p ^ Suc n = x ^ p ^ (n + 1) + y ^ p ^ (n + 1)", "show ?case"], ["proof (prove)\nusing this:\n  (x + y) ^ p ^ Suc n = x ^ p ^ (n + 1) + y ^ p ^ (n + 1)\n\ngoal (1 subgoal):\n 1. (x + y) ^ CARD('a) ^ Suc n = x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n", "by (simp add: p)"], ["proof (state)\nthis:\n  (x + y) ^ CARD('a) ^ Suc n = x ^ CARD('a) ^ Suc n + y ^ CARD('a) ^ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "(*This lemma is a generalization of the theorem fermat_theorem_mod_ring \n  which appears in Berlekamp_Type_Based.thy*)"], ["", "lemma fermat_theorem_mod_ring2[simp]:\nfixes a::\"'a::{prime_card} mod_ring\"\nshows \"a ^ (CARD('a)^n) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ CARD('a) ^ n = a", "proof (induct n arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "case (Suc n)"], ["proof (state)\nthis:\n  ?a ^ CARD('a) ^ n = ?a\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "define p where \"p = CARD('a)\""], ["proof (state)\nthis:\n  p = CARD('a)\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "have \"a ^ p ^ Suc n = a ^ (p * (p ^ n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ p ^ Suc n = a ^ (p * p ^ n)", "by simp"], ["proof (state)\nthis:\n  a ^ p ^ Suc n = a ^ (p * p ^ n)\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "also"], ["proof (state)\nthis:\n  a ^ p ^ Suc n = a ^ (p * p ^ n)\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "have \"... = (a ^ p) ^(p ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ (p * p ^ n) = (a ^ p) ^ p ^ n", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  a ^ (p * p ^ n) = (a ^ p) ^ p ^ n\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "also"], ["proof (state)\nthis:\n  a ^ (p * p ^ n) = (a ^ p) ^ p ^ n\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "have \"... = a^(p ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a ^ p) ^ p ^ n = a ^ p ^ n", "using fermat_theorem_mod_ring[of \"a^p\"]"], ["proof (prove)\nusing this:\n  (a ^ p) ^ CARD('a) = a ^ p\n\ngoal (1 subgoal):\n 1. (a ^ p) ^ p ^ n = a ^ p ^ n", "unfolding p_def"], ["proof (prove)\nusing this:\n  (a ^ CARD('a)) ^ CARD('a) = a ^ CARD('a)\n\ngoal (1 subgoal):\n 1. (a ^ CARD('a)) ^ CARD('a) ^ n = a ^ CARD('a) ^ n", "by auto"], ["proof (state)\nthis:\n  (a ^ p) ^ p ^ n = a ^ p ^ n\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "also"], ["proof (state)\nthis:\n  (a ^ p) ^ p ^ n = a ^ p ^ n\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "have \"... = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ p ^ n = a", "using Suc.hyps p_def"], ["proof (prove)\nusing this:\n  ?a ^ CARD('a) ^ n = ?a\n  p = CARD('a)\n\ngoal (1 subgoal):\n 1. a ^ p ^ n = a", "by auto"], ["proof (state)\nthis:\n  a ^ p ^ n = a\n\ngoal (2 subgoals):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a\n 2. \\<And>n a.\n       (\\<And>a. a ^ CARD('a) ^ n = a) \\<Longrightarrow>\n       a ^ CARD('a) ^ Suc n = a", "finally"], ["proof (chain)\npicking this:\n  a ^ p ^ Suc n = a", "show ?case"], ["proof (prove)\nusing this:\n  a ^ p ^ Suc n = a\n\ngoal (1 subgoal):\n 1. a ^ CARD('a) ^ Suc n = a", "by (simp add: p_def)"], ["proof (state)\nthis:\n  a ^ CARD('a) ^ Suc n = a\n\ngoal (1 subgoal):\n 1. \\<And>a. a ^ CARD('a) ^ 0 = a", "qed auto"], ["", "lemma fermat_theorem_power_poly[simp]:\n  fixes a::\"'a::prime_card mod_ring\"\n  shows \"[:a:] ^ CARD('a::prime_card) ^ n = [:a:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] ^ CARD('a) ^ n = [:a:]", "by (auto simp add: Missing_Polynomial.poly_const_pow mod_poly_less)"], ["", "(* Some previous facts *)"], ["", "lemma degree_prod_monom: \"degree (\\<Prod>i = 0..<n. monom 1 1) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (\\<Prod>i = 0..<n. monom (1::'a) 1) = n", "by (metis degree_monom_eq prod_pow x_pow_n zero_neq_one)"], ["", "lemma degree_monom0[simp]: \"degree (monom a 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (monom a 0) = 0", "using degree_monom_le"], ["proof (prove)\nusing this:\n  degree (monom ?a ?n) \\<le> ?n\n\ngoal (1 subgoal):\n 1. degree (monom a 0) = 0", "by auto"], ["", "lemma degree_monom0'[simp]: \"degree (monom 0 b) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (monom (0::'a) b) = 0", "by auto"], ["", "lemma sum_monom_mod:\n  assumes \"b < degree f\"\n  shows \"(\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)", "using assms"], ["proof (prove)\nusing this:\n  b < degree f\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)", "proof (induct b)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree f \\<Longrightarrow>\n    (\\<Sum>i\\<le>0. monom (g i) i) mod f = (\\<Sum>i\\<le>0. monom (g i) i)\n 2. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "case 0"], ["proof (state)\nthis:\n  0 < degree f\n\ngoal (2 subgoals):\n 1. 0 < degree f \\<Longrightarrow>\n    (\\<Sum>i\\<le>0. monom (g i) i) mod f = (\\<Sum>i\\<le>0. monom (g i) i)\n 2. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "then"], ["proof (chain)\npicking this:\n  0 < degree f", "show ?case"], ["proof (prove)\nusing this:\n  0 < degree f\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>0. monom (g i) i) mod f = (\\<Sum>i\\<le>0. monom (g i) i)", "by (auto simp add: mod_poly_less)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>0. monom (g i) i) mod f = (\\<Sum>i\\<le>0. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "case (Suc b)"], ["proof (state)\nthis:\n  b < degree f \\<Longrightarrow>\n  (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\n  Suc b < degree f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have hyp: \"(\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)", "using Suc.prems Suc.hyps"], ["proof (prove)\nusing this:\n  Suc b < degree f\n  b < degree f \\<Longrightarrow>\n  (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have rw_monom: \"monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)", "by (metis Suc.prems degree_monom_eq mod_0 mod_poly_less monom_hom.hom_0_iff)"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have rw: \"(\\<Sum>i\\<le>Suc b. monom (g i) i) = (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n    monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have \"(\\<Sum>i\\<le>Suc b. monom (g i) i) mod f \n    = (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n    (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f", "using rw"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n    (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f", "by presburger"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n  (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n  (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have \"... =((monom (g (Suc b)) (Suc b)) mod f) + ((\\<Sum>i\\<le>b. monom (g i) i) mod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f =\n    monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f", "using poly_mod_add_left"], ["proof (prove)\nusing this:\n  (?x + ?y) mod ?z = ?x mod ?z + ?y mod ?z\n\ngoal (1 subgoal):\n 1. (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f =\n    monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f", "by auto"], ["proof (state)\nthis:\n  (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f =\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "also"], ["proof (state)\nthis:\n  (monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)) mod f =\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have \"... = monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n    monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)", "using hyp rw_monom"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\n  monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)\n\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n    monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)", "by presburger"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "also"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "have \"... = (\\<Sum>i\\<le>Suc b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n    (\\<Sum>i\\<le>Suc b. monom (g i) i)", "using rw"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n    (\\<Sum>i\\<le>Suc b. monom (g i) i)", "by auto"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n  (\\<Sum>i\\<le>Suc b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n                (\\<Sum>i\\<le>b. monom (g i) i);\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n                         (\\<Sum>i\\<le>Suc b. monom (g i) i)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n  (\\<Sum>i\\<le>Suc b. monom (g i) i)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n  (\\<Sum>i\\<le>Suc b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n    (\\<Sum>i\\<le>Suc b. monom (g i) i)", "."], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) mod f =\n  (\\<Sum>i\\<le>Suc b. monom (g i) i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma x_power_aq_minus_1_rw:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and b: \"b > 0\"\n  shows \"x ^ (a * q) - 1 = ((x^a) - 1) * sum ((^) (x^a)) {..<q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have xa: \"(x ^ a) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x ^ a", "using x"], ["proof (prove)\nusing this:\n  1 < x\n\ngoal (1 subgoal):\n 1. 0 < x ^ a", "by auto"], ["proof (state)\nthis:\n  0 < x ^ a\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have int_rw1: \"int (x ^ a) - 1 = int ((x ^ a) - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (x ^ a) - 1 = int (x ^ a - 1)", "using xa"], ["proof (prove)\nusing this:\n  0 < x ^ a\n\ngoal (1 subgoal):\n 1. int (x ^ a) - 1 = int (x ^ a - 1)", "by linarith"], ["proof (state)\nthis:\n  int (x ^ a) - 1 = int (x ^ a - 1)\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have int_rw2: \"sum ((^) (int (x ^ a))) {..<q} = int (sum ((^) ((x ^ a))) {..<q})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((^) (int (x ^ a))) {..<q} = int (sum ((^) (x ^ a)) {..<q})", "unfolding int_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((^) (int (x ^ a))) {..<q} = (\\<Sum>xa<q. int ((x ^ a) ^ xa))", "by simp"], ["proof (state)\nthis:\n  sum ((^) (int (x ^ a))) {..<q} = int (sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have \"int (x ^ a) ^ q = int (Suc ((x ^ a) ^ q - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (x ^ a) ^ q = int (Suc ((x ^ a) ^ q - 1))", "using xa"], ["proof (prove)\nusing this:\n  0 < x ^ a\n\ngoal (1 subgoal):\n 1. int (x ^ a) ^ q = int (Suc ((x ^ a) ^ q - 1))", "by auto"], ["proof (state)\nthis:\n  int (x ^ a) ^ q = int (Suc ((x ^ a) ^ q - 1))\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "hence \"int ((x ^ a) ^ q - 1) = int (x ^ a) ^ q - 1\""], ["proof (prove)\nusing this:\n  int (x ^ a) ^ q = int (Suc ((x ^ a) ^ q - 1))\n\ngoal (1 subgoal):\n 1. int ((x ^ a) ^ q - 1) = int (x ^ a) ^ q - 1", "using xa"], ["proof (prove)\nusing this:\n  int (x ^ a) ^ q = int (Suc ((x ^ a) ^ q - 1))\n  0 < x ^ a\n\ngoal (1 subgoal):\n 1. int ((x ^ a) ^ q - 1) = int (x ^ a) ^ q - 1", "by presburger"], ["proof (state)\nthis:\n  int ((x ^ a) ^ q - 1) = int (x ^ a) ^ q - 1\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "also"], ["proof (state)\nthis:\n  int ((x ^ a) ^ q - 1) = int (x ^ a) ^ q - 1\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have \"... = (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (x ^ a) ^ q - 1 = (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q}", "by (rule power_diff_1_eq)"], ["proof (state)\nthis:\n  int (x ^ a) ^ q - 1 = (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q}\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "also"], ["proof (state)\nthis:\n  int (x ^ a) ^ q - 1 = (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q}\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have \"... = (int ((x ^ a) - 1)) * int (sum ((^) ( (x ^ a))) {..<q})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q} =\n    int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q})", "unfolding int_rw1 int_rw2"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q}) =\n    int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q})", "by simp"], ["proof (state)\nthis:\n  (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q} =\n  int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "also"], ["proof (state)\nthis:\n  (int (x ^ a) - 1) * sum ((^) (int (x ^ a))) {..<q} =\n  int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have \"... = int (((x ^ a) - 1) * (sum ((^) ( (x ^ a))) {..<q}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q}) =\n    int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})", "by auto"], ["proof (state)\nthis:\n  int (x ^ a - 1) * int (sum ((^) (x ^ a)) {..<q}) =\n  int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "finally"], ["proof (chain)\npicking this:\n  int ((x ^ a) ^ q - 1) = int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})", "have aux: \"int ((x ^ a) ^ q - 1) = int (((x ^ a) - 1) * sum ((^) (x ^ a)) {..<q})\""], ["proof (prove)\nusing this:\n  int ((x ^ a) ^ q - 1) = int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. int ((x ^ a) ^ q - 1) = int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})", "."], ["proof (state)\nthis:\n  int ((x ^ a) ^ q - 1) = int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have \"x ^ (a * q) - 1 = (x^a)^q - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a) ^ q - 1", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  x ^ (a * q) - 1 = (x ^ a) ^ q - 1\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "also"], ["proof (state)\nthis:\n  x ^ (a * q) - 1 = (x ^ a) ^ q - 1\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "have \"... = ((x^a) - 1) * sum ((^) (x^a)) {..<q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ^ a) ^ q - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "using aux"], ["proof (prove)\nusing this:\n  int ((x ^ a) ^ q - 1) = int ((x ^ a - 1) * sum ((^) (x ^ a)) {..<q})\n\ngoal (1 subgoal):\n 1. (x ^ a) ^ q - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "unfolding int_int_eq"], ["proof (prove)\nusing this:\n  (x ^ a) ^ q - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal (1 subgoal):\n 1. (x ^ a) ^ q - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "."], ["proof (state)\nthis:\n  (x ^ a) ^ q - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "finally"], ["proof (chain)\npicking this:\n  x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "show ?thesis"], ["proof (prove)\nusing this:\n  x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "."], ["proof (state)\nthis:\n  x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dvd_power_minus_1_conv1:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and xa_dvd: \"x ^ a - 1 dvd x^b - 1\" \n    and b0: \"b > 0\"\n  shows \"a dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a dvd b", "define r where r[simp]: \"r = b mod a\""], ["proof (state)\nthis:\n  r = b mod a\n\ngoal (1 subgoal):\n 1. a dvd b", "define q where q[simp]: \"q = b div a\""], ["proof (state)\nthis:\n  q = b div a\n\ngoal (1 subgoal):\n 1. a dvd b", "have b: \"b = a * q + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = a * q + r", "by auto"], ["proof (state)\nthis:\n  b = a * q + r\n\ngoal (1 subgoal):\n 1. a dvd b", "have ra: \"r < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r < a", "by (simp add: a)"], ["proof (state)\nthis:\n  r < a\n\ngoal (1 subgoal):\n 1. a dvd b", "hence xr_less_xa: \"x ^ r - 1 < x ^ a - 1\""], ["proof (prove)\nusing this:\n  r < a\n\ngoal (1 subgoal):\n 1. x ^ r - 1 < x ^ a - 1", "using x power_strict_increasing_iff diff_less_mono x"], ["proof (prove)\nusing this:\n  r < a\n  1 < x\n  (1::?'a) < ?b \\<Longrightarrow> (?b ^ ?x < ?b ^ ?y) = (?x < ?y)\n  \\<lbrakk>?a < ?b; ?c \\<le> ?a\\<rbrakk> \\<Longrightarrow> ?a - ?c < ?b - ?c\n  1 < x\n\ngoal (1 subgoal):\n 1. x ^ r - 1 < x ^ a - 1", "by simp"], ["proof (state)\nthis:\n  x ^ r - 1 < x ^ a - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "have dvd: \"x ^ a - 1 dvd x ^ (a * q) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ (a * q) - 1", "using x_power_aq_minus_1_rw[OF x a b0]"], ["proof (prove)\nusing this:\n  x ^ (a * ?q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<?q}\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ (a * q) - 1", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  x ^ (a * ?q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<?q}\n\ngoal (1 subgoal):\n 1. \\<exists>k. x ^ (a * q) - 1 = (x ^ a - 1) * k", "by auto"], ["proof (state)\nthis:\n  x ^ a - 1 dvd x ^ (a * q) - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "have \"x^b - 1 = x^b - x^r + x^r - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ b - 1 = x ^ b - x ^ r + x ^ r - 1", "using assms(1) assms(4)"], ["proof (prove)\nusing this:\n  1 < x\n  0 < b\n\ngoal (1 subgoal):\n 1. x ^ b - 1 = x ^ b - x ^ r + x ^ r - 1", "by auto"], ["proof (state)\nthis:\n  x ^ b - 1 = x ^ b - x ^ r + x ^ r - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "also"], ["proof (state)\nthis:\n  x ^ b - 1 = x ^ b - x ^ r + x ^ r - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "have \"... = x^r * (x^(a*q) - 1) + x^r - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ b - x ^ r + x ^ r - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1", "by (metis (no_types, lifting) b diff_mult_distrib2 mult.commute nat_mult_1_right power_add)"], ["proof (state)\nthis:\n  x ^ b - x ^ r + x ^ r - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "finally"], ["proof (chain)\npicking this:\n  x ^ b - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1", "have \"x^b - 1 = x^r * (x^(a*q) - 1) + x^r - 1\""], ["proof (prove)\nusing this:\n  x ^ b - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n\ngoal (1 subgoal):\n 1. x ^ b - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1", "."], ["proof (state)\nthis:\n  x ^ b - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "hence \"x ^ a - 1 dvd x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\""], ["proof (prove)\nusing this:\n  x ^ b - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ r * (x ^ (a * q) - 1) + x ^ r - 1", "using xa_dvd"], ["proof (prove)\nusing this:\n  x ^ b - 1 = x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n  x ^ a - 1 dvd x ^ b - 1\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ r * (x ^ (a * q) - 1) + x ^ r - 1", "by presburger"], ["proof (state)\nthis:\n  x ^ a - 1 dvd x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "hence \"x^a - 1 dvd x^r - 1\""], ["proof (prove)\nusing this:\n  x ^ a - 1 dvd x ^ r * (x ^ (a * q) - 1) + x ^ r - 1\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ r - 1", "by (metis (no_types) diff_add_inverse diff_commute dvd dvd_diff_nat dvd_trans dvd_triv_right)"], ["proof (state)\nthis:\n  x ^ a - 1 dvd x ^ r - 1\n\ngoal (1 subgoal):\n 1. a dvd b", "hence \"r = 0\""], ["proof (prove)\nusing this:\n  x ^ a - 1 dvd x ^ r - 1\n\ngoal (1 subgoal):\n 1. r = 0", "using xr_less_xa"], ["proof (prove)\nusing this:\n  x ^ a - 1 dvd x ^ r - 1\n  x ^ r - 1 < x ^ a - 1\n\ngoal (1 subgoal):\n 1. r = 0", "by (meson nat_dvd_not_less neq0_conv one_less_power x zero_less_diff)"], ["proof (state)\nthis:\n  r = 0\n\ngoal (1 subgoal):\n 1. a dvd b", "thus ?thesis"], ["proof (prove)\nusing this:\n  r = 0\n\ngoal (1 subgoal):\n 1. a dvd b", "by auto"], ["proof (state)\nthis:\n  a dvd b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dvd_power_minus_1_conv2:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and a_dvd_b: \"a dvd b\" \n    and b0: \"b > 0\"\n  shows \"x ^ a - 1 dvd x^b - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ b - 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ b - 1", "define q where q[simp]: \"q = b div a\""], ["proof (state)\nthis:\n  q = b div a\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ b - 1", "have b: \"b = a * q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = a * q", "using a_dvd_b"], ["proof (prove)\nusing this:\n  a dvd b\n\ngoal (1 subgoal):\n 1. b = a * q", "by auto"], ["proof (state)\nthis:\n  b = a * q\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ b - 1", "have \"x^b - 1 = ((x ^ a) - 1) * sum ((^) (x ^ a)) {..<q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ b - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "unfolding b"], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ (a * q) - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}", "by (rule x_power_aq_minus_1_rw[OF x a b0])"], ["proof (state)\nthis:\n  x ^ b - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ b - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  x ^ b - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal (1 subgoal):\n 1. x ^ a - 1 dvd x ^ b - 1", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  x ^ b - 1 = (x ^ a - 1) * sum ((^) (x ^ a)) {..<q}\n\ngoal (1 subgoal):\n 1. \\<exists>k. x ^ b - 1 = (x ^ a - 1) * k", "by auto"], ["proof (state)\nthis:\n  x ^ a - 1 dvd x ^ b - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary dvd_power_minus_1_conv:\n  fixes x::nat\n  assumes x: \"x > 1\" \n    and a: \"a > 0\" \n    and b0: \"b > 0\"\n  shows \"a dvd b = (x ^ a - 1 dvd x^b - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a dvd b) = (x ^ a - 1 dvd x ^ b - 1)", "using assms dvd_power_minus_1_conv1 dvd_power_minus_1_conv2"], ["proof (prove)\nusing this:\n  1 < x\n  0 < a\n  0 < b\n  \\<lbrakk>1 < ?x; 0 < ?a; ?x ^ ?a - 1 dvd ?x ^ ?b - 1; 0 < ?b\\<rbrakk>\n  \\<Longrightarrow> ?a dvd ?b\n  \\<lbrakk>1 < ?x; 0 < ?a; ?a dvd ?b; 0 < ?b\\<rbrakk>\n  \\<Longrightarrow> ?x ^ ?a - 1 dvd ?x ^ ?b - 1\n\ngoal (1 subgoal):\n 1. (a dvd b) = (x ^ a - 1 dvd x ^ b - 1)", "by blast"], ["", "(* Proof of part a) of exercise 16: given f(x) an irreducible polynomial modulo a prime p \n  of degree n, the p^n polynomials of degree less than n form a field under arithmetic \n  modulo f(x) and p.\n*)"], ["", "locale poly_mod_type_irr = poly_mod_type m \"TYPE('a::prime_card)\" for m + \n  fixes f::\"'a::{prime_card} mod_ring poly\"\n  assumes irr_f: \"irreducible\\<^sub>d f\"\nbegin"], ["", "definition plus_irr :: \"'a mod_ring poly \\<Rightarrow>'a mod_ring poly \\<Rightarrow> 'a mod_ring poly\"\n  where \"plus_irr a b = (a + b) mod f\""], ["", "definition minus_irr :: \"'a mod_ring poly \\<Rightarrow>'a mod_ring poly \\<Rightarrow> 'a mod_ring poly\"\n  where \"minus_irr x y \\<equiv> (x - y) mod f\""], ["", "definition uminus_irr :: \"'a mod_ring poly \\<Rightarrow>'a mod_ring poly \"\n  where \"uminus_irr x = -x\""], ["", "definition mult_irr :: \"'a mod_ring poly \\<Rightarrow>'a mod_ring poly \\<Rightarrow> 'a mod_ring poly\"\n  where \"mult_irr x y = ((x*y) mod f)\""], ["", "definition carrier_irr :: \"'a mod_ring poly set\"\n  where \"carrier_irr = {x. degree x < degree f}\""], ["", "definition power_irr :: \"'a mod_ring poly \\<Rightarrow> nat \\<Rightarrow> 'a mod_ring poly\"\n  where \"power_irr p n = ((p^n) mod f)\""], ["", "definition \"R = \\<lparr>carrier = carrier_irr, monoid.mult = mult_irr, one = 1, zero = 0, add = plus_irr\\<rparr>\""], ["", "lemma degree_f[simp]: \"degree f > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < degree f", "using irr_f irreducible\\<^sub>dD(1)"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d f\n  irreducible\\<^sub>d ?p \\<Longrightarrow> 0 < degree ?p\n\ngoal (1 subgoal):\n 1. 0 < degree f", "by blast"], ["", "lemma element_in_carrier: \"(a \\<in> carrier R) = (degree a < degree f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> carrier R) = (degree a < degree f)", "unfolding R_def carrier_irr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> carrier\n              \\<lparr>carrier = {x. degree x < degree f},\n                 monoid.mult = mult_irr, one = 1, zero = 0,\n                 add = plus_irr\\<rparr>) =\n    (degree a < degree f)", "by auto"], ["", "lemma f_dvd_ab:\n  \"a = 0 \\<or> b = 0\" if \"f dvd a * b\" \n    and a: \"degree a < degree f\" \n    and b: \"degree b < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = 0 \\<or> b = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (a = 0 \\<or> b = 0) \\<Longrightarrow> False", "assume \"\\<not> (a = 0 \\<or> b = 0)\""], ["proof (state)\nthis:\n  \\<not> (a = 0 \\<or> b = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (a = 0 \\<or> b = 0) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> (a = 0 \\<or> b = 0)", "have \"a \\<noteq> 0\" and \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> (a = 0 \\<or> b = 0)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 &&& b \\<noteq> 0", "by simp_all"], ["proof (state)\nthis:\n  a \\<noteq> 0\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (a = 0 \\<or> b = 0) \\<Longrightarrow> False", "with a b"], ["proof (chain)\npicking this:\n  degree a < degree f\n  degree b < degree f\n  a \\<noteq> 0\n  b \\<noteq> 0", "have \"\\<not> f dvd a\" and \"\\<not> f dvd b\""], ["proof (prove)\nusing this:\n  degree a < degree f\n  degree b < degree f\n  a \\<noteq> 0\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> f dvd a &&& \\<not> f dvd b", "by (auto simp add: mod_poly_less dvd_eq_mod_eq_0)"], ["proof (state)\nthis:\n  \\<not> f dvd a\n  \\<not> f dvd b\n\ngoal (1 subgoal):\n 1. \\<not> (a = 0 \\<or> b = 0) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> f dvd a\n  \\<not> f dvd b\n\ngoal (1 subgoal):\n 1. \\<not> (a = 0 \\<or> b = 0) \\<Longrightarrow> False", "from \\<open>f dvd a * b\\<close> irr_f"], ["proof (chain)\npicking this:\n  f dvd a * b\n  irreducible\\<^sub>d f", "have \"f dvd a \\<or> f dvd b\""], ["proof (prove)\nusing this:\n  f dvd a * b\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. f dvd a \\<or> f dvd b", "by auto"], ["proof (state)\nthis:\n  f dvd a \\<or> f dvd b\n\ngoal (1 subgoal):\n 1. \\<not> (a = 0 \\<or> b = 0) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> f dvd a\n  \\<not> f dvd b\n  f dvd a \\<or> f dvd b", "show False"], ["proof (prove)\nusing this:\n  \\<not> f dvd a\n  \\<not> f dvd b\n  f dvd a \\<or> f dvd b\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ab_mod_f0:\n  \"a = 0 \\<or> b = 0\" if \"a * b mod f = 0\" \n    and a: \"degree a < degree f\" \n    and b: \"degree b < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = 0 \\<or> b = 0", "using that f_dvd_ab"], ["proof (prove)\nusing this:\n  a * b mod f = 0\n  degree a < degree f\n  degree b < degree f\n  \\<lbrakk>f dvd ?a * ?b; degree ?a < degree f;\n   degree ?b < degree f\\<rbrakk>\n  \\<Longrightarrow> ?a = 0 \\<or> ?b = 0\n\ngoal (1 subgoal):\n 1. a = 0 \\<or> b = 0", "by auto"], ["", "lemma irreducible\\<^sub>dD2:\n  fixes p q :: \"'b::{comm_semiring_1,semiring_no_zero_divisors} poly\"\n  assumes \"irreducible\\<^sub>d p\"\n  and  \"degree q < degree p\" and \"degree q \\<noteq> 0\"\n  shows \"\\<not> q dvd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "using assms irreducible\\<^sub>d_dvd_smult"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d p\n  degree q < degree p\n  degree q \\<noteq> 0\n  \\<lbrakk>0 < degree ?p; irreducible\\<^sub>d ?q; ?p dvd ?q\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       c \\<noteq> (0::?'a) \\<and> ?q = Polynomial.smult c ?p\n\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "by force"], ["", "lemma times_mod_f_1_imp_0:\n  assumes x: \"degree x < degree f\" \n    and x2: \"\\<forall>xa. x * xa mod f = 1 \\<longrightarrow> \\<not> degree xa < degree f\"    \n  shows \"x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "assume x3: \"x \\<noteq> 0\""], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "let ?u = \"fst (bezout_coefficients f x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "let ?v = \"snd (bezout_coefficients f x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "have \"?u * f + ?v * x = gcd f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (bezout_coefficients f x) * f + snd (bezout_coefficients f x) * x =\n    gcd f x", "using bezout_coefficients_fst_snd"], ["proof (prove)\nusing this:\n  fst (bezout_coefficients ?a ?b) * ?a +\n  snd (bezout_coefficients ?a ?b) * ?b =\n  gcd ?a ?b\n\ngoal (1 subgoal):\n 1. fst (bezout_coefficients f x) * f + snd (bezout_coefficients f x) * x =\n    gcd f x", "by auto"], ["proof (state)\nthis:\n  fst (bezout_coefficients f x) * f + snd (bezout_coefficients f x) * x =\n  gcd f x\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  fst (bezout_coefficients f x) * f + snd (bezout_coefficients f x) * x =\n  gcd f x\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd f x = 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. gcd f x \\<noteq> 1 \\<Longrightarrow> False", "assume g: \"gcd f x \\<noteq> 1\""], ["proof (state)\nthis:\n  gcd f x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. gcd f x \\<noteq> 1 \\<Longrightarrow> False", "have \"degree (gcd f x) < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (gcd f x) < degree f", "by (metis degree_0 dvd_eq_mod_eq_0 gcd_dvd1 gcd_dvd2 irr_f \n            irreducible\\<^sub>dD(1) mod_poly_less nat_neq_iff x x3)"], ["proof (state)\nthis:\n  degree (gcd f x) < degree f\n\ngoal (1 subgoal):\n 1. gcd f x \\<noteq> 1 \\<Longrightarrow> False", "have \"\\<not> gcd f x dvd f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gcd f x dvd f", "proof (rule irreducible\\<^sub>dD2[OF irr_f])"], ["proof (state)\ngoal (2 subgoals):\n 1. degree (gcd f x) < degree f\n 2. degree (gcd f x) \\<noteq> 0", "show \"degree (gcd f x) < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (gcd f x) < degree f", "by (metis degree_0 dvd_eq_mod_eq_0 gcd_dvd1 gcd_dvd2 irr_f \n            irreducible\\<^sub>dD(1) mod_poly_less nat_neq_iff x x3)"], ["proof (state)\nthis:\n  degree (gcd f x) < degree f\n\ngoal (1 subgoal):\n 1. degree (gcd f x) \\<noteq> 0", "show \"degree (gcd f x) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (gcd f x) \\<noteq> 0", "by (metis (no_types, hide_lams) g degree_mod_less' gcd.bottom_left_bottom gcd_eq_0_iff \n            gcd_left_idem gcd_mod_left gr_implies_not0 x)"], ["proof (state)\nthis:\n  degree (gcd f x) \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> gcd f x dvd f\n\ngoal (1 subgoal):\n 1. gcd f x \\<noteq> 1 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> gcd f x dvd f\n\ngoal (1 subgoal):\n 1. gcd f x \\<noteq> 1 \\<Longrightarrow> False", "have \"gcd f x dvd f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd f x dvd f", "by auto"], ["proof (state)\nthis:\n  gcd f x dvd f\n\ngoal (1 subgoal):\n 1. gcd f x \\<noteq> 1 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> gcd f x dvd f\n  gcd f x dvd f", "show False"], ["proof (prove)\nusing this:\n  \\<not> gcd f x dvd f\n  gcd f x dvd f\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gcd f x = 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  fst (bezout_coefficients f x) * f + snd (bezout_coefficients f x) * x = 1", "have \"?v*x mod f = 1\""], ["proof (prove)\nusing this:\n  fst (bezout_coefficients f x) * f + snd (bezout_coefficients f x) * x = 1\n\ngoal (1 subgoal):\n 1. snd (bezout_coefficients f x) * x mod f = 1", "by (metis degree_1 degree_f mod_mult_self3 mod_poly_less)"], ["proof (state)\nthis:\n  snd (bezout_coefficients f x) * x mod f = 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "hence \"(x*(?v mod f)) mod f = 1\""], ["proof (prove)\nusing this:\n  snd (bezout_coefficients f x) * x mod f = 1\n\ngoal (1 subgoal):\n 1. x * (snd (bezout_coefficients f x) mod f) mod f = 1", "by (simp add: mod_mult_right_eq mult.commute)"], ["proof (state)\nthis:\n  x * (snd (bezout_coefficients f x) mod f) mod f = 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  x * (snd (bezout_coefficients f x) mod f) mod f = 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "have \"degree (?v mod f) < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (snd (bezout_coefficients f x) mod f) < degree f", "by (metis degree_0 degree_f degree_mod_less' not_gr_zero)"], ["proof (state)\nthis:\n  degree (snd (bezout_coefficients f x) mod f) < degree f\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  x * (snd (bezout_coefficients f x) mod f) mod f = 1\n  degree (snd (bezout_coefficients f x) mod f) < degree f", "show False"], ["proof (prove)\nusing this:\n  x * (snd (bezout_coefficients f x) mod f) mod f = 1\n  degree (snd (bezout_coefficients f x) mod f) < degree f\n\ngoal (1 subgoal):\n 1. False", "using x2"], ["proof (prove)\nusing this:\n  x * (snd (bezout_coefficients f x) mod f) mod f = 1\n  degree (snd (bezout_coefficients f x) mod f) < degree f\n  \\<forall>xa.\n     x * xa mod f = 1 \\<longrightarrow> \\<not> degree xa < degree f\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale field_R: field R"], ["proof (prove)\ngoal (1 subgoal):\n 1. field R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. field R", "have *: \"\\<exists>y. degree y < degree f \\<and> f dvd x + y\" if \"degree x < degree f\"\n    for x :: \"'a mod_ring poly\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. degree y < degree f \\<and> f dvd x + y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. degree y < degree f \\<and> f dvd x + y", "from that"], ["proof (chain)\npicking this:\n  degree x < degree f", "have \"degree (- x) < degree f\""], ["proof (prove)\nusing this:\n  degree x < degree f\n\ngoal (1 subgoal):\n 1. degree (- x) < degree f", "by simp"], ["proof (state)\nthis:\n  degree (- x) < degree f\n\ngoal (1 subgoal):\n 1. \\<exists>y. degree y < degree f \\<and> f dvd x + y", "moreover"], ["proof (state)\nthis:\n  degree (- x) < degree f\n\ngoal (1 subgoal):\n 1. \\<exists>y. degree y < degree f \\<and> f dvd x + y", "have \"f dvd (x + - x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd x + - x", "by simp"], ["proof (state)\nthis:\n  f dvd x + - x\n\ngoal (1 subgoal):\n 1. \\<exists>y. degree y < degree f \\<and> f dvd x + y", "ultimately"], ["proof (chain)\npicking this:\n  degree (- x) < degree f\n  f dvd x + - x", "show ?thesis"], ["proof (prove)\nusing this:\n  degree (- x) < degree f\n  f dvd x + - x\n\ngoal (1 subgoal):\n 1. \\<exists>y. degree y < degree f \\<and> f dvd x + y", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. degree y < degree f \\<and> f dvd x + y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree ?x < degree f \\<Longrightarrow>\n  \\<exists>y. degree y < degree f \\<and> f dvd ?x + y\n\ngoal (1 subgoal):\n 1. field R", "have **: \"degree (x * y mod f) < degree f\"\n    if \"degree x < degree f\" and \"degree y < degree f\"\n    for x y :: \"'a mod_ring poly\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (x * y mod f) < degree f", "using that"], ["proof (prove)\nusing this:\n  degree x < degree f\n  degree y < degree f\n\ngoal (1 subgoal):\n 1. degree (x * y mod f) < degree f", "by (cases \"x = 0 \\<or> y = 0\")\n      (auto intro: degree_mod_less' dest: f_dvd_ab)"], ["proof (state)\nthis:\n  \\<lbrakk>degree ?x < degree f; degree ?y < degree f\\<rbrakk>\n  \\<Longrightarrow> degree (?x * ?y mod f) < degree f\n\ngoal (1 subgoal):\n 1. field R", "show \"field R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. field R", "by standard (auto simp add: R_def carrier_irr_def plus_irr_def mult_irr_def Units_def algebra_simps degree_add_less mod_poly_less mod_add_eq mult_poly_add_left mod_mult_left_eq mod_mult_right_eq mod_eq_0_iff_dvd ab_mod_f0 * ** dest: times_mod_f_1_imp_0)"], ["proof (state)\nthis:\n  field R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zero_in_carrier[simp]: \"0 \\<in> carrier_irr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> carrier_irr", "unfolding carrier_irr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> {x. degree x < degree f}", "by auto"], ["", "lemma card_carrier_irr[simp]: \"card carrier_irr = CARD('a)^(degree f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "let ?A = \"(carrier_vec (degree f):: 'a mod_ring vec set)\""], ["proof (state)\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "have bij_A_carrier: \"bij_betw (Poly \\<circ> list_of_vec) ?A carrier_irr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (Poly \\<circ> list_of_vec) (carrier_vec (degree f)) carrier_irr", "proof (unfold bij_betw_def, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on (Poly \\<circ> list_of_vec) (carrier_vec (degree f))\n 2. (Poly \\<circ> list_of_vec) ` carrier_vec (degree f) = carrier_irr", "show \"inj_on (Poly \\<circ> list_of_vec) ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (Poly \\<circ> list_of_vec) (carrier_vec (degree f))", "by (rule inj_Poly_list_of_vec)"], ["proof (state)\nthis:\n  inj_on (Poly \\<circ> list_of_vec) (carrier_vec (degree f))\n\ngoal (1 subgoal):\n 1. (Poly \\<circ> list_of_vec) ` carrier_vec (degree f) = carrier_irr", "show \"(Poly \\<circ> list_of_vec) ` ?A = carrier_irr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Poly \\<circ> list_of_vec) ` carrier_vec (degree f) = carrier_irr", "proof (unfold image_def o_def carrier_irr_def, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> carrier_vec (degree f) \\<Longrightarrow>\n       degree (Poly (list_of_vec xa)) < degree f\n 2. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "fix xa"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> carrier_vec (degree f) \\<Longrightarrow>\n       degree (Poly (list_of_vec xa)) < degree f\n 2. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "assume \"xa \\<in> ?A\""], ["proof (state)\nthis:\n  xa \\<in> carrier_vec (degree f)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> carrier_vec (degree f) \\<Longrightarrow>\n       degree (Poly (list_of_vec xa)) < degree f\n 2. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "thus \"degree (Poly (list_of_vec xa)) < degree f\""], ["proof (prove)\nusing this:\n  xa \\<in> carrier_vec (degree f)\n\ngoal (1 subgoal):\n 1. degree (Poly (list_of_vec xa)) < degree f", "using degree_Poly_list_of_vec irr_f"], ["proof (prove)\nusing this:\n  xa \\<in> carrier_vec (degree f)\n  \\<lbrakk>?x \\<in> carrier_vec ?n; 0 < ?n\\<rbrakk>\n  \\<Longrightarrow> degree (Poly (list_of_vec ?x)) < ?n\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. degree (Poly (list_of_vec xa)) < degree f", "by blast"], ["proof (state)\nthis:\n  degree (Poly (list_of_vec xa)) < degree f\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "fix x::\"'a mod_ring poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "assume deg_x: \"degree x < degree f\""], ["proof (state)\nthis:\n  degree x < degree f\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "let ?xa = \"vec_of_list (coeffs x @ replicate (degree f - length (coeffs x)) 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       degree x < degree f \\<Longrightarrow>\n       \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "show \"\\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)", "by (rule bexI[of _ \"?xa\"], unfold carrier_vec_def, insert deg_x) \n           (auto simp add: degree_eq_length_coeffs)"], ["proof (state)\nthis:\n  \\<exists>xa\\<in>carrier_vec (degree f). x = Poly (list_of_vec xa)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Poly \\<circ> list_of_vec) ` carrier_vec (degree f) = carrier_irr\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw (Poly \\<circ> list_of_vec) (carrier_vec (degree f)) carrier_irr\n\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "have \"CARD('a)^(degree f) = card ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a) ^ degree f = card (carrier_vec (degree f))", "by (simp add: card_carrier_vec)"], ["proof (state)\nthis:\n  CARD('a) ^ degree f = card (carrier_vec (degree f))\n\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "also"], ["proof (state)\nthis:\n  CARD('a) ^ degree f = card (carrier_vec (degree f))\n\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "have \"... = card carrier_irr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (carrier_vec (degree f)) = card carrier_irr", "using bij_A_carrier bij_betw_same_card"], ["proof (prove)\nusing this:\n  bij_betw (Poly \\<circ> list_of_vec) (carrier_vec (degree f)) carrier_irr\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. card (carrier_vec (degree f)) = card carrier_irr", "by blast"], ["proof (state)\nthis:\n  card (carrier_vec (degree f)) = card carrier_irr\n\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", "finally"], ["proof (chain)\npicking this:\n  CARD('a) ^ degree f = card carrier_irr", "show ?thesis"], ["proof (prove)\nusing this:\n  CARD('a) ^ degree f = card carrier_irr\n\ngoal (1 subgoal):\n 1. card carrier_irr = CARD('a) ^ degree f", ".."], ["proof (state)\nthis:\n  card carrier_irr = CARD('a) ^ degree f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_carrier_irr[simp]: \"finite (carrier_irr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite carrier_irr", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite carrier_irr", "have \"degree f > degree 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree 0 < degree f", "using degree_0"], ["proof (prove)\nusing this:\n  degree 0 = 0\n\ngoal (1 subgoal):\n 1. degree 0 < degree f", "by auto"], ["proof (state)\nthis:\n  degree 0 < degree f\n\ngoal (1 subgoal):\n 1. finite carrier_irr", "hence \"carrier_irr \\<noteq> {}\""], ["proof (prove)\nusing this:\n  degree 0 < degree f\n\ngoal (1 subgoal):\n 1. carrier_irr \\<noteq> {}", "using degree_0"], ["proof (prove)\nusing this:\n  degree 0 < degree f\n  degree 0 = 0\n\ngoal (1 subgoal):\n 1. carrier_irr \\<noteq> {}", "unfolding carrier_irr_def"], ["proof (prove)\nusing this:\n  degree 0 < degree f\n  degree 0 = 0\n\ngoal (1 subgoal):\n 1. {x. degree x < degree f} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  carrier_irr \\<noteq> {}\n\ngoal (1 subgoal):\n 1. finite carrier_irr", "moreover"], ["proof (state)\nthis:\n  carrier_irr \\<noteq> {}\n\ngoal (1 subgoal):\n 1. finite carrier_irr", "have \"card carrier_irr \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card carrier_irr \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  card carrier_irr \\<noteq> 0\n\ngoal (1 subgoal):\n 1. finite carrier_irr", "ultimately"], ["proof (chain)\npicking this:\n  carrier_irr \\<noteq> {}\n  card carrier_irr \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  carrier_irr \\<noteq> {}\n  card carrier_irr \\<noteq> 0\n\ngoal (1 subgoal):\n 1. finite carrier_irr", "using card_eq_0_iff"], ["proof (prove)\nusing this:\n  carrier_irr \\<noteq> {}\n  card carrier_irr \\<noteq> 0\n  (card ?A = 0) = (?A = {} \\<or> infinite ?A)\n\ngoal (1 subgoal):\n 1. finite carrier_irr", "by metis"], ["proof (state)\nthis:\n  finite carrier_irr\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_carrier_R[simp]: \"finite (carrier R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier R)", "unfolding R_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (carrier\n       \\<lparr>carrier = carrier_irr, monoid.mult = mult_irr, one = 1,\n          zero = 0, add = plus_irr\\<rparr>)", "by simp"], ["", "lemma finite_carrier_mult_of[simp]: \"finite (carrier (mult_of R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier (mult_of R))", "unfolding carrier_mult_of"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier R - {\\<zero>\\<^bsub>R\\<^esub>})", "by auto"], ["", "lemma constant_in_carrier[simp]: \"[:a:] \\<in> carrier R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] \\<in> carrier R", "unfolding R_def carrier_irr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:]\n    \\<in> carrier\n           \\<lparr>carrier = {x. degree x < degree f},\n              monoid.mult = mult_irr, one = 1, zero = 0,\n              add = plus_irr\\<rparr>", "by auto"], ["", "lemma mod_in_carrier[simp]: \"a mod f \\<in> carrier R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod f \\<in> carrier R", "unfolding R_def carrier_irr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a mod f\n    \\<in> carrier\n           \\<lparr>carrier = {x. degree x < degree f},\n              monoid.mult = mult_irr, one = 1, zero = 0,\n              add = plus_irr\\<rparr>", "by (auto, metis degree_0 degree_f degree_mod_less' less_not_refl)"], ["", "lemma order_irr: \"Coset.order (mult_of R) = CARD('a)^degree f - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (mult_of R) = CARD('a) ^ degree f - 1", "by (simp add: card_Diff_singleton Coset.order_def carrier_mult_of R_def)"], ["", "lemma element_power_order_eq_1:\n    assumes x: \"x \\<in> carrier (mult_of R)\" \n    shows \"x [^]\\<^bsub>(mult_of R)\\<^esub> Coset.order (mult_of R) = \\<one>\\<^bsub>(mult_of R)\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> order (mult_of R) =\n    \\<one>\\<^bsub>mult_of R\\<^esub>", "by (meson field_R.field_mult_group finite_carrier_mult_of group.pow_order_eq_1 x)"], ["", "corollary element_power_order_eq_1': \nassumes x: \"x \\<in> carrier (mult_of R)\"\nshows\"x [^]\\<^bsub>(mult_of R)\\<^esub> CARD('a)^degree f = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "have \"x [^]\\<^bsub>(mult_of R)\\<^esub> CARD('a)^degree f \n  = x \\<otimes>\\<^bsub>(mult_of R)\\<^esub> x [^]\\<^bsub>(mult_of R)\\<^esub> (CARD('a)^degree f - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n    x \\<otimes>\\<^bsub>mult_of R\\<^esub>\n    x [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ degree f - 1)", "by (metis Diff_iff One_nat_def Suc_pred field_R.m_comm field_R.nat_pow_Suc field_R.nat_pow_closed \n        mult_of_simps(1) mult_of_simps(2) nat_pow_mult_of neq0_conv power_eq_0_iff x zero_less_card_finite)"], ["proof (state)\nthis:\n  x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n  x \\<otimes>\\<^bsub>mult_of R\\<^esub>\n  x [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ degree f - 1)\n\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "also"], ["proof (state)\nthis:\n  x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n  x \\<otimes>\\<^bsub>mult_of R\\<^esub>\n  x [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ degree f - 1)\n\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "have \"x \\<otimes>\\<^bsub>(mult_of R)\\<^esub> x [^]\\<^bsub>(mult_of R)\\<^esub> (CARD('a)^degree f - 1) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>mult_of R\\<^esub>\n    x [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ degree f - 1) =\n    x", "by (metis carrier_mult_of element_power_order_eq_1 field_R.Units_closed field_R.field_Units \n        field_R.r_one monoid.simps(2) mult_mult_of mult_of_def order_irr x)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>mult_of R\\<^esub>\n  x [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ degree f - 1) =\n  x\n\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "finally"], ["proof (chain)\npicking this:\n  x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "show ?thesis"], ["proof (prove)\nusing this:\n  x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x\n\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x", "."], ["proof (state)\nthis:\n  x [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_irr[simp]: \"x [^]\\<^bsub>(R)\\<^esub> n= x^n mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>R\\<^esub> n = x ^ n mod f", "by (induct n, auto simp add: mod_poly_less nat_pow_def R_def mult_of_def mult_irr_def \n      carrier_irr_def mod_mult_right_eq mult.commute)"], ["", "lemma pow_irr_mult_of[simp]: \"x [^]\\<^bsub>(mult_of R)\\<^esub> n= x^n mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>mult_of R\\<^esub> n = x ^ n mod f", "by (induct n, auto simp add: mod_poly_less nat_pow_def R_def mult_of_def mult_irr_def \n      carrier_irr_def mod_mult_right_eq mult.commute)"], ["", "lemma fermat_theorem_power_poly_R[simp]: \"[:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = [:a:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = [:a:]", "by (auto simp add: Missing_Polynomial.poly_const_pow mod_poly_less)"], ["", "lemma times_mod_expand:\n  \"(a \\<otimes>\\<^bsub>(R)\\<^esub> b) = ((a mod f) \\<otimes>\\<^bsub>(R)\\<^esub> (b mod f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<otimes>\\<^bsub>R\\<^esub> b =\n    a mod f \\<otimes>\\<^bsub>R\\<^esub> (b mod f)", "by (simp add: mod_mult_eq R_def mult_irr_def)"], ["", "(*Elements that satisfy y^p^m = y in the field are closed under addition and multiplication.*)"], ["", "lemma mult_closed_power:\nassumes x: \"x \\<in> carrier R\" and y: \"y \\<in> carrier R\"\nand \"x [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = x\"\nand \"y [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = y\"\nshows \"(x \\<otimes>\\<^bsub>(R)\\<^esub> y) [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = (x \\<otimes>\\<^bsub>(R)\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<otimes>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<otimes>\\<^bsub>R\\<^esub> y", "using assms assms field_R.nat_pow_distrib"], ["proof (prove)\nusing this:\n  x \\<in> carrier R\n  y \\<in> carrier R\n  x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = x\n  y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = y\n  x \\<in> carrier R\n  y \\<in> carrier R\n  x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = x\n  y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = y\n  \\<lbrakk>?x \\<in> carrier R; ?y \\<in> carrier R\\<rbrakk>\n  \\<Longrightarrow> (?x \\<otimes>\\<^bsub>R\\<^esub> ?y) [^]\\<^bsub>R\\<^esub>\n                    ?n =\n                    ?x [^]\\<^bsub>R\\<^esub> ?n \\<otimes>\\<^bsub>R\\<^esub>\n                    ?y [^]\\<^bsub>R\\<^esub> ?n\n\ngoal (1 subgoal):\n 1. (x \\<otimes>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<otimes>\\<^bsub>R\\<^esub> y", "by auto"], ["", "lemma add_closed_power:\nassumes x1: \"x [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = x\"\nand y1: \"y [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = y\"\nshows \"(x \\<oplus>\\<^bsub>(R)\\<^esub> y) [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = (x \\<oplus>\\<^bsub>(R)\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "have \"(x + y) ^ CARD('a) ^ m' = x^(CARD('a) ^ m') + y ^ (CARD('a) ^ m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y) ^ CARD('a) ^ m' = x ^ CARD('a) ^ m' + y ^ CARD('a) ^ m'", "by auto"], ["proof (state)\nthis:\n  (x + y) ^ CARD('a) ^ m' = x ^ CARD('a) ^ m' + y ^ CARD('a) ^ m'\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "hence \"(x + y) ^ CARD('a) ^ m' mod f = (x^(CARD('a) ^ m') + y ^ (CARD('a) ^ m')) mod f\""], ["proof (prove)\nusing this:\n  (x + y) ^ CARD('a) ^ m' = x ^ CARD('a) ^ m' + y ^ CARD('a) ^ m'\n\ngoal (1 subgoal):\n 1. (x + y) ^ CARD('a) ^ m' mod f =\n    (x ^ CARD('a) ^ m' + y ^ CARD('a) ^ m') mod f", "by auto"], ["proof (state)\nthis:\n  (x + y) ^ CARD('a) ^ m' mod f =\n  (x ^ CARD('a) ^ m' + y ^ CARD('a) ^ m') mod f\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "hence \"(x \\<oplus>\\<^bsub>(R)\\<^esub> y) [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' \n  = (x [^]\\<^bsub>(R)\\<^esub> CARD('a)^m') \\<oplus>\\<^bsub>(R)\\<^esub> (y [^]\\<^bsub>(R)\\<^esub> CARD('a)^m')\""], ["proof (prove)\nusing this:\n  (x + y) ^ CARD('a) ^ m' mod f =\n  (x ^ CARD('a) ^ m' + y ^ CARD('a) ^ m') mod f\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' \\<oplus>\\<^bsub>R\\<^esub>\n    y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m'", "by (auto, unfold R_def plus_irr_def, auto simp add: mod_add_eq power_mod)"], ["proof (state)\nthis:\n  (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n  x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' \\<oplus>\\<^bsub>R\\<^esub>\n  y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m'\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "also"], ["proof (state)\nthis:\n  (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n  x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' \\<oplus>\\<^bsub>R\\<^esub>\n  y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m'\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "have \"... = x \\<oplus>\\<^bsub>(R)\\<^esub> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' \\<oplus>\\<^bsub>R\\<^esub>\n    y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "unfolding x1 y1"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus>\\<^bsub>R\\<^esub> y = x \\<oplus>\\<^bsub>R\\<^esub> y", "by simp"], ["proof (state)\nthis:\n  x [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' \\<oplus>\\<^bsub>R\\<^esub>\n  y [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n  x \\<oplus>\\<^bsub>R\\<^esub> y\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "finally"], ["proof (chain)\npicking this:\n  (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n  x \\<oplus>\\<^bsub>R\\<^esub> y", "show ?thesis"], ["proof (prove)\nusing this:\n  (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n  x \\<oplus>\\<^bsub>R\\<^esub> y\n\ngoal (1 subgoal):\n 1. (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n    x \\<oplus>\\<^bsub>R\\<^esub> y", "."], ["proof (state)\nthis:\n  (x \\<oplus>\\<^bsub>R\\<^esub> y) [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' =\n  x \\<oplus>\\<^bsub>R\\<^esub> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma x_power_pm_minus_1: \n  assumes x: \"x \\<in> carrier (mult_of R)\"\n  and \"x [^]\\<^bsub>(R)\\<^esub> CARD('a) ^ m' = x\"\n  shows \"x [^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ m' - 1) = \\<one>\\<^bsub>(R)\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^]\\<^bsub>R\\<^esub> (CARD('a) ^ m' - 1) = \\<one>\\<^bsub>R\\<^esub>", "by (metis (no_types, lifting) One_nat_def Suc_pred assms(2) carrier_mult_of field_R.Units_closed \n      field_R.Units_l_cancel field_R.field_Units field_R.l_one field_R.m_rcancel field_R.nat_pow_Suc \n      field_R.nat_pow_closed field_R.one_closed field_R.r_null field_R.r_one x zero_less_card_finite \n      zero_less_power)"], ["", "context\nbegin"], ["", "private"], ["", "lemma monom_a_1_P:\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and eq: \"monom 1 1 [^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ m') = monom 1 1\"\n  shows \"monom a 1 [^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ m') = monom a 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "have \"monom a 1 = [:a:] * (monom 1 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom a 1 = [:a:] * monom 1 1", "by (metis One_nat_def monom_0 monom_Suc mult.commute pCons_0_as_mult)"], ["proof (state)\nthis:\n  monom a 1 = [:a:] * monom 1 1\n\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "also"], ["proof (state)\nthis:\n  monom a 1 = [:a:] * monom 1 1\n\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "have \"... = [:a:] \\<otimes>\\<^bsub>(R)\\<^esub> (monom 1 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] * monom 1 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1", "by (auto simp add: R_def mult_irr_def)\n       (metis One_nat_def assms(2) mod_mod_trivial mod_smult_left pow_irr)"], ["proof (state)\nthis:\n  [:a:] * monom 1 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1\n\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "finally"], ["proof (chain)\npicking this:\n  monom a 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1", "have eq2: \"monom a 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1\""], ["proof (prove)\nusing this:\n  monom a 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1\n\ngoal (1 subgoal):\n 1. monom a 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1", "."], ["proof (state)\nthis:\n  monom a 1 = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1\n\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1", "unfolding eq2"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ m' =\n    [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 1", "by (rule mult_closed_power[OF _ m _ eq], insert fermat_theorem_power_poly_R, auto)"], ["proof (state)\nthis:\n  monom a 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom a 1\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma prod_monom_1_1:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and eq: \"P (monom 1 1) n\"\n  shows \"P ((\\<Prod>i = 0..<b::nat. monom 1 1) mod f) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n", "proof (induct b)"], ["proof (state)\ngoal (2 subgoals):\n 1. P ((\\<Prod>i = 0..<0. monom 1 1) mod f) n\n 2. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. P ((\\<Prod>i = 0..<0. monom 1 1) mod f) n\n 2. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((\\<Prod>i = 0..<0. monom 1 1) mod f) n", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Prod>i = 0..<0. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    (\\<Prod>i = 0..<0. monom 1 1) mod f", "by (simp add: power_mod)"], ["proof (state)\nthis:\n  P ((\\<Prod>i = 0..<0. monom 1 1) mod f) n\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "case (Suc b)"], ["proof (state)\nthis:\n  P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "let ?N = \"(\\<Prod>i = 0..<b. monom 1 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "have eq2: \"(\\<Prod>i = 0..<Suc b. monom 1 1) mod f = monom 1 1 \\<otimes>\\<^bsub>(R)\\<^esub> (\\<Prod>i = 0..<b. monom 1 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n    monom 1 1 \\<otimes>\\<^bsub>R\\<^esub> (\\<Prod>i = 0..<b. monom 1 1)", "by (metis field_R.m_comm field_R.nat_pow_Suc mod_in_carrier mod_mod_trivial \n        pow_irr prod_pow times_mod_expand)"], ["proof (state)\nthis:\n  (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n  monom 1 1 \\<otimes>\\<^bsub>R\\<^esub> (\\<Prod>i = 0..<b. monom 1 1)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "also"], ["proof (state)\nthis:\n  (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n  monom 1 1 \\<otimes>\\<^bsub>R\\<^esub> (\\<Prod>i = 0..<b. monom 1 1)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "have \"... = (monom 1 1 mod f) \\<otimes>\\<^bsub>(R)\\<^esub> ((\\<Prod>i = 0..<b. monom 1 1) mod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 \\<otimes>\\<^bsub>R\\<^esub> (\\<Prod>i = 0..<b. monom 1 1) =\n    monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n    ((\\<Prod>i = 0..<b. monom 1 1) mod f)", "by (rule times_mod_expand)"], ["proof (state)\nthis:\n  monom 1 1 \\<otimes>\\<^bsub>R\\<^esub> (\\<Prod>i = 0..<b. monom 1 1) =\n  monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n  ((\\<Prod>i = 0..<b. monom 1 1) mod f)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n  monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n  ((\\<Prod>i = 0..<b. monom 1 1) mod f)", "have eq2: \"(\\<Prod>i = 0..<Suc b. monom 1 1) mod f \n    = (monom 1 1 mod f) \\<otimes>\\<^bsub>(R)\\<^esub> ((\\<Prod>i = 0..<b. monom 1 1) mod f)\""], ["proof (prove)\nusing this:\n  (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n  monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n  ((\\<Prod>i = 0..<b. monom 1 1) mod f)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n    monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n    ((\\<Prod>i = 0..<b. monom 1 1) mod f)", "."], ["proof (state)\nthis:\n  (\\<Prod>i = 0..<Suc b. monom 1 1) mod f =\n  monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n  ((\\<Prod>i = 0..<b. monom 1 1) mod f)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n \\<Longrightarrow>\n       P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n", "unfolding eq2 P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n     ((\\<Prod>i = 0..<b. monom 1 1) mod f)) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    monom 1 1 mod f \\<otimes>\\<^bsub>R\\<^esub>\n    ((\\<Prod>i = 0..<b. monom 1 1) mod f)", "proof (rule mult_closed_power)"], ["proof (state)\ngoal (4 subgoals):\n 1. monom 1 1 mod f \\<in> carrier R\n 2. (\\<Prod>i = 0..<b. monom 1 1) mod f \\<in> carrier R\n 3. (monom 1 1 mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = monom 1 1 mod f\n 4. ((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    (\\<Prod>i = 0..<b. monom 1 1) mod f", "show \"(monom 1 1 mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = monom 1 1 mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = monom 1 1 mod f", "using P_def element_in_carrier eq m mod_poly_less"], ["proof (prove)\nusing this:\n  P \\<equiv> \\<lambda>x n. x [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = x\n  (?a \\<in> carrier R) = (degree ?a < degree f)\n  P (monom 1 1) n\n  monom 1 1 \\<in> carrier R\n  degree ?x < degree ?y \\<Longrightarrow> ?x mod ?y = ?x\n\ngoal (1 subgoal):\n 1. (monom 1 1 mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = monom 1 1 mod f", "by force"], ["proof (state)\nthis:\n  (monom 1 1 mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = monom 1 1 mod f\n\ngoal (3 subgoals):\n 1. monom 1 1 mod f \\<in> carrier R\n 2. (\\<Prod>i = 0..<b. monom 1 1) mod f \\<in> carrier R\n 3. ((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    (\\<Prod>i = 0..<b. monom 1 1) mod f", "show \"((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = (\\<Prod>i = 0..<b. monom 1 1) mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    (\\<Prod>i = 0..<b. monom 1 1) mod f", "using P_def Suc.hyps"], ["proof (prove)\nusing this:\n  P \\<equiv> \\<lambda>x n. x [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = x\n  P ((\\<Prod>i = 0..<b. monom 1 1) mod f) n\n\ngoal (1 subgoal):\n 1. ((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    (\\<Prod>i = 0..<b. monom 1 1) mod f", "by blast"], ["proof (state)\nthis:\n  ((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n  (\\<Prod>i = 0..<b. monom 1 1) mod f\n\ngoal (2 subgoals):\n 1. monom 1 1 mod f \\<in> carrier R\n 2. (\\<Prod>i = 0..<b. monom 1 1) mod f \\<in> carrier R", "qed (auto)"], ["proof (state)\nthis:\n  P ((\\<Prod>i = 0..<Suc b. monom 1 1) mod f) n\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma monom_1_b:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and monom_1_1: \"P (monom 1 1) m'\"\n  and b: \"b < degree f\"\n  shows \"P (monom 1 b) m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "have \"monom 1 b = (\\<Prod>i = 0..<b. monom 1 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (1::'b) b = (\\<Prod>i = 0..<b. monom (1::'b) 1)", "by (metis prod_pow x_pow_n)"], ["proof (state)\nthis:\n  monom (1::?'b2) b = (\\<Prod>i = 0..<b. monom (1::?'b2) 1)\n\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "also"], ["proof (state)\nthis:\n  monom (1::?'b2) b = (\\<Prod>i = 0..<b. monom (1::?'b2) 1)\n\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "have \"... = (\\<Prod>i = 0..<b. monom 1 1) mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..<b. monom 1 1) = (\\<Prod>i = 0..<b. monom 1 1) mod f", "by (rule mod_poly_less[symmetric], auto)\n       (metis One_nat_def b degree_linear_power x_as_monom)"], ["proof (state)\nthis:\n  (\\<Prod>i = 0..<b. monom 1 1) = (\\<Prod>i = 0..<b. monom 1 1) mod f\n\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "finally"], ["proof (chain)\npicking this:\n  monom 1 b = (\\<Prod>i = 0..<b. monom 1 1) mod f", "have eq2: \"monom 1 b = (\\<Prod>i = 0..<b. monom 1 1) mod f\""], ["proof (prove)\nusing this:\n  monom 1 b = (\\<Prod>i = 0..<b. monom 1 1) mod f\n\ngoal (1 subgoal):\n 1. monom 1 b = (\\<Prod>i = 0..<b. monom 1 1) mod f", "."], ["proof (state)\nthis:\n  monom 1 b = (\\<Prod>i = 0..<b. monom 1 1) mod f\n\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (monom 1 b) m'", "unfolding eq2 P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Prod>i = 0..<b. monom 1 1) mod f) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ m' =\n    (\\<Prod>i = 0..<b. monom 1 1) mod f", "by (rule prod_monom_1_1[OF m monom_1_1[unfolded P_def]])"], ["proof (state)\nthis:\n  P (monom 1 b) m'\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma monom_a_b:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and m1: \"P (monom 1 1) m'\"\n  and b: \"b < degree f\"\n  shows \"P (monom a b) m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (monom a b) m'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (monom a b) m'", "have \"monom a b = smult a (monom 1 b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom a b = Polynomial.smult a (monom 1 b)", "by (simp add: smult_monom)"], ["proof (state)\nthis:\n  monom a b = Polynomial.smult a (monom 1 b)\n\ngoal (1 subgoal):\n 1. P (monom a b) m'", "also"], ["proof (state)\nthis:\n  monom a b = Polynomial.smult a (monom 1 b)\n\ngoal (1 subgoal):\n 1. P (monom a b) m'", "have \"... = [:a:] * (monom 1 b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult a (monom 1 b) = [:a:] * monom 1 b", "by auto"], ["proof (state)\nthis:\n  Polynomial.smult a (monom 1 b) = [:a:] * monom 1 b\n\ngoal (1 subgoal):\n 1. P (monom a b) m'", "also"], ["proof (state)\nthis:\n  Polynomial.smult a (monom 1 b) = [:a:] * monom 1 b\n\ngoal (1 subgoal):\n 1. P (monom a b) m'", "have \"... = [:a:] \\<otimes>\\<^bsub>(R)\\<^esub> (monom 1 b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] * monom 1 b = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b", "unfolding R_def mult_irr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] * monom 1 b =\n    [:a:] \\<otimes>\\<^bsub>\\<lparr>carrier = carrier_irr, monoid.mult = \\<lambda>x y. x * y mod f, one = 1, zero = 0, add = plus_irr\\<rparr>\\<^esub>\n    monom 1 b", "by (simp add: b degree_monom_eq mod_poly_less)"], ["proof (state)\nthis:\n  [:a:] * monom 1 b = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b\n\ngoal (1 subgoal):\n 1. P (monom a b) m'", "finally"], ["proof (chain)\npicking this:\n  monom a b = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b", "have eq: \"monom a b = [:a:] \\<otimes>\\<^bsub>(R)\\<^esub> (monom 1 b)\""], ["proof (prove)\nusing this:\n  monom a b = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b\n\ngoal (1 subgoal):\n 1. monom a b = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b", "."], ["proof (state)\nthis:\n  monom a b = [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b\n\ngoal (1 subgoal):\n 1. P (monom a b) m'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (monom a b) m'", "unfolding eq P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ m' =\n    [:a:] \\<otimes>\\<^bsub>R\\<^esub> monom 1 b", "proof (rule mult_closed_power)"], ["proof (state)\ngoal (4 subgoals):\n 1. [:a:] \\<in> carrier R\n 2. monom 1 b \\<in> carrier R\n 3. [:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = [:a:]\n 4. monom 1 b [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom 1 b", "show \"[:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = [:a:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = [:a:]", "by (rule fermat_theorem_power_poly_R)"], ["proof (state)\nthis:\n  [:a:] [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = [:a:]\n\ngoal (3 subgoals):\n 1. [:a:] \\<in> carrier R\n 2. monom 1 b \\<in> carrier R\n 3. monom 1 b [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom 1 b", "show \"monom 1 b [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom 1 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 b [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom 1 b", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 b [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom 1 b", "by (rule monom_1_b[OF m m1[unfolded P_def] b])"], ["proof (state)\nthis:\n  monom 1 b [^]\\<^bsub>R\\<^esub> CARD('a) ^ m' = monom 1 b\n\ngoal (2 subgoals):\n 1. [:a:] \\<in> carrier R\n 2. monom 1 b \\<in> carrier R", "show \"monom 1 b \\<in> carrier R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 b \\<in> carrier R", "unfolding element_in_carrier"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (monom 1 b) < degree f", "using b"], ["proof (prove)\nusing this:\n  b < degree f\n\ngoal (1 subgoal):\n 1. degree (monom 1 b) < degree f", "by (simp add: degree_monom_eq)"], ["proof (state)\nthis:\n  monom 1 b \\<in> carrier R\n\ngoal (1 subgoal):\n 1. [:a:] \\<in> carrier R", "qed (auto)"], ["proof (state)\nthis:\n  P (monom a b) m'\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma sum_monoms_P:\n  defines \"P == (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and monom_1_1: \"P (monom 1 1) n\"\n  and b: \"b < degree f\"\nshows \"P ((\\<Sum>i\\<le>b. monom (g i) i)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>b. monom (g i) i) n", "using b"], ["proof (prove)\nusing this:\n  b < degree f\n\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>b. monom (g i) i) n", "proof (induct b)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree f \\<Longrightarrow> P (\\<Sum>i\\<le>0. monom (g i) i) n\n 2. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "case 0"], ["proof (state)\nthis:\n  0 < degree f\n\ngoal (2 subgoals):\n 1. 0 < degree f \\<Longrightarrow> P (\\<Sum>i\\<le>0. monom (g i) i) n\n 2. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "then"], ["proof (chain)\npicking this:\n  0 < degree f", "show ?case"], ["proof (prove)\nusing this:\n  0 < degree f\n\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>0. monom (g i) i) n", "unfolding P_def"], ["proof (prove)\nusing this:\n  0 < degree f\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>0. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    (\\<Sum>i\\<le>0. monom (g i) i)", "by (simp add: poly_const_pow mod_poly_less monom_0)"], ["proof (state)\nthis:\n  P (\\<Sum>i\\<le>0. monom (g i) i) n\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "case (Suc b)"], ["proof (state)\nthis:\n  b < degree f \\<Longrightarrow> P (\\<Sum>i\\<le>b. monom (g i) i) n\n  Suc b < degree f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have b: \"b < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b < degree f", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc b < degree f\n\ngoal (1 subgoal):\n 1. b < degree f", "by auto"], ["proof (state)\nthis:\n  b < degree f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have rw: \"(\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)", "by (rule sum_monom_mod[OF b])"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have rw2: \"(monom (g (Suc b)) (Suc b) mod f) = monom (g (Suc b)) (Suc b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)", "by (metis Suc.prems field_R.nat_pow_eone m monom_a_b pow_irr power_0 power_one_right)"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have hyp: \"P (\\<Sum>i\\<le>b. monom (g i) i) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>b. monom (g i) i) n", "using Suc.prems Suc.hyps"], ["proof (prove)\nusing this:\n  Suc b < degree f\n  b < degree f \\<Longrightarrow> P (\\<Sum>i\\<le>b. monom (g i) i) n\n\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>b. monom (g i) i) n", "by auto"], ["proof (state)\nthis:\n  P (\\<Sum>i\\<le>b. monom (g i) i) n\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have \"(\\<Sum>i\\<le>Suc b. monom (g i) i) = monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n    monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have \"... = (monom (g (Suc b)) (Suc b) mod f) + ((\\<Sum>i\\<le>b. monom (g i) i) mod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n    monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f", "using rw rw2"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>b. monom (g i) i) mod f = (\\<Sum>i\\<le>b. monom (g i) i)\n  monom (g (Suc b)) (Suc b) mod f = monom (g (Suc b)) (Suc b)\n\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n    monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f", "by argo"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "also"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) + (\\<Sum>i\\<le>b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "have \"... = monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub> (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n    monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n    (\\<Sum>i\\<le>b. monom (g i) i)", "unfolding R_def plus_irr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n    monom (g (Suc b))\n     (Suc b) \\<oplus>\\<^bsub>\\<lparr>carrier = carrier_irr, monoid.mult = mult_irr, one = 1, zero = 0, add = \\<lambda>a b. (a + b) mod f\\<rparr>\\<^esub>\n    (\\<Sum>i\\<le>b. monom (g i) i)", "by (simp add: poly_mod_add_left)"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) mod f + (\\<Sum>i\\<le>b. monom (g i) i) mod f =\n  monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n  (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n  (\\<Sum>i\\<le>b. monom (g i) i)", "have eq: \"(\\<Sum>i\\<le>Suc b. monom (g i) i) \n    = monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub> (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n  (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n    monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n    (\\<Sum>i\\<le>b. monom (g i) i)", "."], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc b. monom (g i) i) =\n  monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n  (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b < degree f \\<Longrightarrow>\n                P (\\<Sum>i\\<le>b. monom (g i) i) n;\n        Suc b < degree f\\<rbrakk>\n       \\<Longrightarrow> P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>Suc b. monom (g i) i) n", "unfolding eq P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n     (\\<Sum>i\\<le>b. monom (g i) i)) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ n =\n    monom (g (Suc b)) (Suc b) \\<oplus>\\<^bsub>R\\<^esub>\n    (\\<Sum>i\\<le>b. monom (g i) i)", "proof (rule add_closed_power)"], ["proof (state)\ngoal (2 subgoals):\n 1. monom (g (Suc b)) (Suc b) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    monom (g (Suc b)) (Suc b)\n 2. (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    (\\<Sum>i\\<le>b. monom (g i) i)", "show \"monom (g (Suc b)) (Suc b) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = monom (g (Suc b)) (Suc b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (g (Suc b)) (Suc b) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    monom (g (Suc b)) (Suc b)", "by (rule monom_a_b[OF m monom_1_1[unfolded P_def] Suc.prems])"], ["proof (state)\nthis:\n  monom (g (Suc b)) (Suc b) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n  monom (g (Suc b)) (Suc b)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    (\\<Sum>i\\<le>b. monom (g i) i)", "show \"(\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n = (\\<Sum>i\\<le>b. monom (g i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    (\\<Sum>i\\<le>b. monom (g i) i)", "using hyp"], ["proof (prove)\nusing this:\n  P (\\<Sum>i\\<le>b. monom (g i) i) n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    (\\<Sum>i\\<le>b. monom (g i) i)", "unfolding P_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n  (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n    (\\<Sum>i\\<le>b. monom (g i) i)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>b. monom (g i) i) [^]\\<^bsub>R\\<^esub> CARD('a) ^ n =\n  (\\<Sum>i\\<le>b. monom (g i) i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (\\<Sum>i\\<le>Suc b. monom (g i) i) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma element_carrier_P:\n  defines \"P \\<equiv> (\\<lambda> x n. (x[^]\\<^bsub>(R)\\<^esub> (CARD('a) ^ n) = x))\"\n  assumes m: \"monom 1 1 \\<in> carrier R\"\n  and monom_1_1: \"P (monom 1 1) m'\"\n  and a: \"a \\<in> carrier R\"\nshows \"P a m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a m'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P a m'", "have degree_a: \"degree a < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a < degree f", "using a element_in_carrier"], ["proof (prove)\nusing this:\n  a \\<in> carrier R\n  (?a \\<in> carrier R) = (degree ?a < degree f)\n\ngoal (1 subgoal):\n 1. degree a < degree f", "by simp"], ["proof (state)\nthis:\n  degree a < degree f\n\ngoal (1 subgoal):\n 1. P a m'", "have \"P (\\<Sum>i\\<le>degree a. monom (poly.coeff a i) i) m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<Sum>i\\<le>degree a. monom (coeff a i) i) m'", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree a. monom (coeff a i) i) [^]\\<^bsub>R\\<^esub>\n    CARD('a) ^ m' =\n    (\\<Sum>i\\<le>degree a. monom (coeff a i) i)", "by (rule sum_monoms_P[OF m monom_1_1[unfolded P_def] degree_a])"], ["proof (state)\nthis:\n  P (\\<Sum>i\\<le>degree a. monom (coeff a i) i) m'\n\ngoal (1 subgoal):\n 1. P a m'", "thus ?thesis"], ["proof (prove)\nusing this:\n  P (\\<Sum>i\\<le>degree a. monom (coeff a i) i) m'\n\ngoal (1 subgoal):\n 1. P a m'", "unfolding poly_as_sum_of_monoms"], ["proof (prove)\nusing this:\n  P a m'\n\ngoal (1 subgoal):\n 1. P a m'", "by simp"], ["proof (state)\nthis:\n  P a m'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "(* First part of the result that we need *)"], ["", "lemma degree_divisor1: \n  assumes f: \"irreducible (f :: 'a :: prime_card mod_ring poly)\" \n  and d: \"degree f = d\" \nshows \"f dvd (monom 1 1)^(CARD('a)^d) - monom 1 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "interpret poly_mod_type_irr \"CARD('a)\" f"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_type_irr (int CARD('a)) f", "by (unfold_locales, auto simp add: f)"], ["proof (state)\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "proof (cases \"d = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = 1 \\<Longrightarrow> f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n 2. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "case True"], ["proof (state)\nthis:\n  d = 1\n\ngoal (2 subgoals):\n 1. d = 1 \\<Longrightarrow> f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n 2. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "proof (cases \"monom 1 1 mod f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. monom 1 1 mod f = 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n 2. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "case True"], ["proof (state)\nthis:\n  monom 1 1 mod f = 0\n\ngoal (2 subgoals):\n 1. monom 1 1 mod f = 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n 2. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "then"], ["proof (chain)\npicking this:\n  monom 1 1 mod f = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  monom 1 1 mod f = 0\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "by (metis Suc_pred dvd_diff dvd_mult2 mod_eq_0_iff_dvd power.simps(2) \n            zero_less_card_finite zero_less_power)"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n\ngoal (1 subgoal):\n 1. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "case False"], ["proof (state)\nthis:\n  monom 1 1 mod f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "note mod_f_not0 = False"], ["proof (state)\nthis:\n  monom 1 1 mod f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "have \"monom 1 (CARD('a)) mod f = monom 1 1 mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "let ?g1 = \"(monom 1 (CARD('a))) mod f\""], ["proof (state)\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "let ?g2 = \"(monom 1 1) mod f\""], ["proof (state)\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "have deg_g1: \"degree ?g1 < degree f\" and deg_g2: \"degree ?g2 < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (monom 1 CARD('a) mod f) < degree f &&&\n    degree (monom 1 1 mod f) < degree f", "by (metis True card_UNIV_unit d degree_0 degree_mod_less' zero_less_card_finite zero_neq_one)+"], ["proof (state)\nthis:\n  degree (monom 1 CARD('a) mod f) < degree f\n  degree (monom 1 1 mod f) < degree f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "have g2: \"?g2 [^]\\<^bsub>(mult_of R)\\<^esub> CARD('a)^degree f = ?g2 ^ (CARD('a)^degree f) mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 mod f) [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n    (monom 1 1 mod f) ^ CARD('a) ^ degree f mod f", "by (rule pow_irr_mult_of)"], ["proof (state)\nthis:\n  (monom 1 1 mod f) [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n  (monom 1 1 mod f) ^ CARD('a) ^ degree f mod f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "have \"?g2 [^]\\<^bsub>(mult_of R)\\<^esub> CARD('a)^degree f = ?g2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 mod f) [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n    monom 1 1 mod f", "by (rule element_power_order_eq_1', insert mod_f_not0 deg_g2, \n              auto simp add: carrier_mult_of R_def carrier_irr_def )"], ["proof (state)\nthis:\n  (monom 1 1 mod f) [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n  monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "hence \"?g2 ^ CARD('a) mod f = ?g2 mod f\""], ["proof (prove)\nusing this:\n  (monom 1 1 mod f) [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n  monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. (monom 1 1 mod f) ^ CARD('a) mod f = monom 1 1 mod f mod f", "using True d"], ["proof (prove)\nusing this:\n  (monom 1 1 mod f) [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f =\n  monom 1 1 mod f\n  d = 1\n  degree f = d\n\ngoal (1 subgoal):\n 1. (monom 1 1 mod f) ^ CARD('a) mod f = monom 1 1 mod f mod f", "by auto"], ["proof (state)\nthis:\n  (monom 1 1 mod f) ^ CARD('a) mod f = monom 1 1 mod f mod f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "hence \"?g1 mod f = ?g2 mod f\""], ["proof (prove)\nusing this:\n  (monom 1 1 mod f) ^ CARD('a) mod f = monom 1 1 mod f mod f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f mod f = monom 1 1 mod f mod f", "by (metis mod_mod_trivial power_mod x_pow_n)"], ["proof (state)\nthis:\n  monom 1 CARD('a) mod f mod f = monom 1 1 mod f mod f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom 1 CARD('a) mod f mod f = monom 1 1 mod f mod f\n\ngoal (1 subgoal):\n 1. monom 1 CARD('a) mod f = monom 1 1 mod f", "by simp"], ["proof (state)\nthis:\n  monom 1 CARD('a) mod f = monom 1 1 mod f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom 1 CARD('a) mod f = monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. monom 1 1 mod f \\<noteq> 0 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom 1 CARD('a) mod f = monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "by (metis True mod_eq_dvd_iff_poly power_one_right x_pow_n)"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n\ngoal (1 subgoal):\n 1. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "case False"], ["proof (state)\nthis:\n  d \\<noteq> 1\n\ngoal (1 subgoal):\n 1. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "have deg_f1: \"1 < degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < degree f", "using False d degree_f"], ["proof (prove)\nusing this:\n  d \\<noteq> 1\n  degree f = d\n  0 < degree f\n\ngoal (1 subgoal):\n 1. 1 < degree f", "by linarith"], ["proof (state)\nthis:\n  1 < degree f\n\ngoal (1 subgoal):\n 1. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "have \"monom 1 1 [^]\\<^bsub>(mult_of R)\\<^esub> CARD('a)^degree f = monom 1 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = monom 1 1", "by (rule element_power_order_eq_1', insert deg_f1) \n          (auto simp add: carrier_mult_of R_def carrier_irr_def degree_monom_eq)"], ["proof (state)\nthis:\n  monom 1 1 [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = monom 1 1\n\ngoal (1 subgoal):\n 1. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "hence \"monom 1 1^CARD('a)^degree f mod f = monom 1 1 mod f\""], ["proof (prove)\nusing this:\n  monom 1 1 [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = monom 1 1\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ degree f mod f = monom 1 1 mod f", "using deg_f1"], ["proof (prove)\nusing this:\n  monom 1 1 [^]\\<^bsub>mult_of R\\<^esub> CARD('a) ^ degree f = monom 1 1\n  1 < degree f\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ degree f mod f = monom 1 1 mod f", "by (auto, metis mod_mod_trivial)"], ["proof (state)\nthis:\n  monom 1 1 ^ CARD('a) ^ degree f mod f = monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. d \\<noteq> 1 \\<Longrightarrow>\n    f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom 1 1 ^ CARD('a) ^ degree f mod f = monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "using d mod_eq_dvd_iff_poly"], ["proof (prove)\nusing this:\n  monom 1 1 ^ CARD('a) ^ degree f mod f = monom 1 1 mod f\n  degree f = d\n  (?x mod ?n = ?y mod ?n) = (?n dvd ?x - ?y)\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1", "by blast"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Second part *)"], ["", "lemma degree_divisor2: \n  assumes f: \"irreducible (f :: 'a :: prime_card mod_ring poly)\" \n  and d: \"degree f = d\" \n  and c_ge_1: \"1 \\<le> c\" and cd: \"c < d\"\nshows \"\\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "interpret poly_mod_type_irr \"CARD('a)\" f"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_type_irr (int CARD('a)) f", "by (unfold_locales, auto simp add: f)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have field_R: \"field R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. field R", "by (simp add: field_R.field_axioms)"], ["proof (state)\nthis:\n  field R\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "assume \"\\<not> \\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\""], ["proof (state)\nthis:\n  \\<not> \\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "hence f_dvd: \"f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1", "by simp"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "obtain a where a_R: \"a \\<in> carrier (mult_of R)\" \n    and ord_a: \"group.ord (mult_of R) a = order (mult_of R)\" \n    and gen: \"carrier (mult_of R) = {a [^]\\<^bsub>R\\<^esub> i |i. i \\<in> (UNIV::nat set)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> carrier (mult_of R);\n         group.ord (mult_of R) a = order (mult_of R);\n         carrier (mult_of R) =\n         {a [^]\\<^bsub>R\\<^esub> i |i. i \\<in> UNIV}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using field.finite_field_mult_group_has_gen2[OF field_R]"], ["proof (prove)\nusing this:\n  finite (carrier R) \\<Longrightarrow>\n  \\<exists>a\\<in>carrier (mult_of R).\n     group.ord (mult_of R) a = order (mult_of R) \\<and>\n     carrier (mult_of R) = {a [^]\\<^bsub>R\\<^esub> i |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> carrier (mult_of R);\n         group.ord (mult_of R) a = order (mult_of R);\n         carrier (mult_of R) =\n         {a [^]\\<^bsub>R\\<^esub> i |i. i \\<in> UNIV}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> carrier (mult_of R)\n  group.ord (mult_of R) a = order (mult_of R)\n  carrier (mult_of R) = {a [^]\\<^bsub>R\\<^esub> i |i. i \\<in> UNIV}\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have d_not1: \"d>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < d", "using c_ge_1 cd"], ["proof (prove)\nusing this:\n  1 \\<le> c\n  c < d\n\ngoal (1 subgoal):\n 1. 1 < d", "by auto"], ["proof (state)\nthis:\n  1 < d\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have monom_in_carrier: \"monom 1 1 \\<in> carrier (mult_of R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 \\<in> carrier (mult_of R)", "using d_not1"], ["proof (prove)\nusing this:\n  1 < d\n\ngoal (1 subgoal):\n 1. monom 1 1 \\<in> carrier (mult_of R)", "unfolding carrier_mult_of R_def carrier_irr_def"], ["proof (prove)\nusing this:\n  1 < d\n\ngoal (1 subgoal):\n 1. monom 1 1\n    \\<in> carrier\n           \\<lparr>carrier = {x. degree x < degree f},\n              monoid.mult = mult_irr, one = 1, zero = 0,\n              add = plus_irr\\<rparr> -\n          {\\<zero>\\<^bsub>\\<lparr>carrier = {x. degree x < degree f}, monoid.mult = mult_irr, one = 1, zero = 0, add = plus_irr\\<rparr>\\<^esub>}", "by (simp add: d degree_monom_eq)"], ["proof (state)\nthis:\n  monom 1 1 \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  monom 1 1 \\<in> carrier (mult_of R)", "have \"monom 1 1 \\<notin> {\\<zero>\\<^bsub>R\\<^esub>}\""], ["proof (prove)\nusing this:\n  monom 1 1 \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. monom 1 1 \\<notin> {\\<zero>\\<^bsub>R\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  monom 1 1 \\<notin> {\\<zero>\\<^bsub>R\\<^esub>}\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  monom 1 1 \\<notin> {\\<zero>\\<^bsub>R\\<^esub>}", "obtain k where \"monom 1 1 = a ^ k mod f\""], ["proof (prove)\nusing this:\n  monom 1 1 \\<notin> {\\<zero>\\<^bsub>R\\<^esub>}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        monom 1 1 = a ^ k mod f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gen monom_in_carrier"], ["proof (prove)\nusing this:\n  monom 1 1 \\<notin> {\\<zero>\\<^bsub>R\\<^esub>}\n  carrier (mult_of R) = {a [^]\\<^bsub>R\\<^esub> i |i. i \\<in> UNIV}\n  monom 1 1 \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        monom 1 1 = a ^ k mod f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  monom 1 1 = a ^ k mod f\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  monom 1 1 = a ^ k mod f", "have k: \"a [^]\\<^bsub>R\\<^esub> k = monom 1 1\""], ["proof (prove)\nusing this:\n  monom 1 1 = a ^ k mod f\n\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>R\\<^esub> k = monom 1 1", "by simp"], ["proof (state)\nthis:\n  a [^]\\<^bsub>R\\<^esub> k = monom 1 1\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have a_m_1: \"a [^]\\<^bsub>R\\<^esub> (CARD('a)^c - 1) = \\<one>\\<^bsub>R\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>R\\<^esub> (CARD('a) ^ c - 1) = \\<one>\\<^bsub>R\\<^esub>", "proof (rule x_power_pm_minus_1[OF a_R])"], ["proof (state)\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = a", "let ?x = \"monom 1 1::'a mod_ring poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = a", "show \"a [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = a", "proof (rule element_carrier_P)"], ["proof (state)\ngoal (3 subgoals):\n 1. monom 1 1 \\<in> carrier R\n 2. monom 1 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = monom 1 1\n 3. a \\<in> carrier R", "show \"?x \\<in> carrier R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 \\<in> carrier R", "by (metis k mod_in_carrier pow_irr)"], ["proof (state)\nthis:\n  monom 1 1 \\<in> carrier R\n\ngoal (2 subgoals):\n 1. monom 1 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = monom 1 1\n 2. a \\<in> carrier R", "have \"?x ^ CARD('a)^ c mod f = ?x mod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ c mod f = monom 1 1 mod f", "using f_dvd"], ["proof (prove)\nusing this:\n  f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ c mod f = monom 1 1 mod f", "using mod_eq_dvd_iff_poly"], ["proof (prove)\nusing this:\n  f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1\n  (?x mod ?n = ?y mod ?n) = (?n dvd ?x - ?y)\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ c mod f = monom 1 1 mod f", "by blast"], ["proof (state)\nthis:\n  monom 1 1 ^ CARD('a) ^ c mod f = monom 1 1 mod f\n\ngoal (2 subgoals):\n 1. monom 1 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = monom 1 1\n 2. a \\<in> carrier R", "thus \"?x [^]\\<^bsub>R\\<^esub> CARD('a)^ c = ?x\""], ["proof (prove)\nusing this:\n  monom 1 1 ^ CARD('a) ^ c mod f = monom 1 1 mod f\n\ngoal (1 subgoal):\n 1. monom 1 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = monom 1 1", "by (metis d d_not1 degree_monom_eq mod_poly_less one_neq_zero pow_irr)"], ["proof (state)\nthis:\n  monom 1 1 [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = monom 1 1\n\ngoal (1 subgoal):\n 1. a \\<in> carrier R", "show \"a \\<in> carrier R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier R", "using a_R"], ["proof (prove)\nusing this:\n  a \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. a \\<in> carrier R", "unfolding carrier_mult_of"], ["proof (prove)\nusing this:\n  a \\<in> carrier R - {\\<zero>\\<^bsub>R\\<^esub>}\n\ngoal (1 subgoal):\n 1. a \\<in> carrier R", "by auto"], ["proof (state)\nthis:\n  a \\<in> carrier R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a [^]\\<^bsub>R\\<^esub> CARD('a) ^ c = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a [^]\\<^bsub>R\\<^esub> (CARD('a) ^ c - 1) = \\<one>\\<^bsub>R\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have \"Group.group (mult_of R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (mult_of R)", "by (simp add: field_R.field_mult_group)"], ["proof (state)\nthis:\n  Group.group (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  Group.group (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have \"finite (carrier (mult_of R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier (mult_of R))", "by auto"], ["proof (state)\nthis:\n  finite (carrier (mult_of R))\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  finite (carrier (mult_of R))\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have \"a \\<in> carrier (mult_of R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier (mult_of R)", "by (rule a_R )"], ["proof (state)\nthis:\n  a \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  a \\<in> carrier (mult_of R)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have \"a [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ c - 1) = \\<one>\\<^bsub>mult_of R\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ c - 1) =\n    \\<one>\\<^bsub>mult_of R\\<^esub>", "using a_m_1"], ["proof (prove)\nusing this:\n  a [^]\\<^bsub>R\\<^esub> (CARD('a) ^ c - 1) = \\<one>\\<^bsub>R\\<^esub>\n\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ c - 1) =\n    \\<one>\\<^bsub>mult_of R\\<^esub>", "unfolding mult_of_def"], ["proof (prove)\nusing this:\n  a [^]\\<^bsub>R\\<^esub> (CARD('a) ^ c - 1) = \\<one>\\<^bsub>R\\<^esub>\n\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>\\<lparr>carrier = carrier R - {\\<zero>\\<^bsub>R\\<^esub>}, monoid.mult = (\\<otimes>\\<^bsub>R\\<^esub>), one = \\<one>\\<^bsub>R\\<^esub>\\<rparr>\\<^esub>\n    (CARD('a) ^ c - 1) =\n    \\<one>\\<^bsub>\\<lparr>carrier = carrier R - {\\<zero>\\<^bsub>R\\<^esub>}, monoid.mult = (\\<otimes>\\<^bsub>R\\<^esub>), one = \\<one>\\<^bsub>R\\<^esub>\\<rparr>\\<^esub>", "by (auto, metis mult_of_def pow_irr_mult_of nat_pow_mult_of)"], ["proof (state)\nthis:\n  a [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ c - 1) =\n  \\<one>\\<^bsub>mult_of R\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  Group.group (mult_of R)\n  finite (carrier (mult_of R))\n  a \\<in> carrier (mult_of R)\n  a [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ c - 1) =\n  \\<one>\\<^bsub>mult_of R\\<^esub>", "have ord_dvd: \"group.ord (mult_of R) a dvd (CARD('a)^c - 1)\""], ["proof (prove)\nusing this:\n  Group.group (mult_of R)\n  finite (carrier (mult_of R))\n  a \\<in> carrier (mult_of R)\n  a [^]\\<^bsub>mult_of R\\<^esub> (CARD('a) ^ c - 1) =\n  \\<one>\\<^bsub>mult_of R\\<^esub>\n\ngoal (1 subgoal):\n 1. group.ord (mult_of R) a dvd CARD('a) ^ c - 1", "by (meson group.pow_eq_id)"], ["proof (state)\nthis:\n  group.ord (mult_of R) a dvd CARD('a) ^ c - 1\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "have \"d dvd c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd c", "proof (rule dvd_power_minus_1_conv1[OF nontriv])"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < d\n 2. CARD(?'a1) ^ d - 1 dvd CARD(?'a1) ^ c - 1\n 3. 0 < c", "show \"0 < d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d", "using cd"], ["proof (prove)\nusing this:\n  c < d\n\ngoal (1 subgoal):\n 1. 0 < d", "by auto"], ["proof (state)\nthis:\n  0 < d\n\ngoal (2 subgoals):\n 1. CARD(?'a1) ^ d - 1 dvd CARD(?'a1) ^ c - 1\n 2. 0 < c", "show \"CARD('a) ^ d - 1 dvd CARD('a) ^ c - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a) ^ d - 1 dvd CARD('a) ^ c - 1", "using ord_dvd"], ["proof (prove)\nusing this:\n  group.ord (mult_of R) a dvd CARD('a) ^ c - 1\n\ngoal (1 subgoal):\n 1. CARD('a) ^ d - 1 dvd CARD('a) ^ c - 1", "by (simp add: d ord_a order_irr)"], ["proof (state)\nthis:\n  CARD('a) ^ d - 1 dvd CARD('a) ^ c - 1\n\ngoal (1 subgoal):\n 1. 0 < c", "show \"0 < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c", "using c_ge_1"], ["proof (prove)\nusing this:\n  1 \\<le> c\n\ngoal (1 subgoal):\n 1. 0 < c", "by auto"], ["proof (state)\nthis:\n  0 < c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d dvd c\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> f dvd\n                  monom 1 1 ^ CARD('a) ^ c - monom 1 1 \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  d dvd c\n\ngoal (1 subgoal):\n 1. False", "using c_ge_1 cd"], ["proof (prove)\nusing this:\n  d dvd c\n  1 \\<le> c\n  c < d\n\ngoal (1 subgoal):\n 1. False", "using nat_dvd_not_less"], ["proof (prove)\nusing this:\n  d dvd c\n  1 \\<le> c\n  c < d\n  \\<lbrakk>0 < ?m; ?m < ?n\\<rbrakk> \\<Longrightarrow> \\<not> ?n dvd ?m\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degree_divisor: assumes \"irreducible (f :: 'a :: prime_card mod_ring poly)\" \"degree f = d\" \n  shows \"f dvd (monom 1 1)^(CARD('a)^d) - monom 1 1\" \n  and \"1 \\<le> c \\<Longrightarrow> c < d \\<Longrightarrow> \\<not> f dvd (monom 1 1)^(CARD('a)^c) - monom 1 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1 &&&\n    (\\<lbrakk>1 \\<le> c; c < d\\<rbrakk>\n     \\<Longrightarrow> \\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1)", "using assms degree_divisor1 degree_divisor2"], ["proof (prove)\nusing this:\n  irreducible f\n  degree f = d\n  \\<lbrakk>irreducible ?f; degree ?f = ?d\\<rbrakk>\n  \\<Longrightarrow> ?f dvd monom 1 1 ^ CARD(?'a) ^ ?d - monom 1 1\n  \\<lbrakk>irreducible ?f; degree ?f = ?d; 1 \\<le> ?c; ?c < ?d\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?f dvd monom 1 1 ^ CARD(?'a) ^ ?c - monom 1 1\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ d - monom 1 1 &&&\n    (\\<lbrakk>1 \\<le> c; c < d\\<rbrakk>\n     \\<Longrightarrow> \\<not> f dvd monom 1 1 ^ CARD('a) ^ c - monom 1 1)", "by blast+"], ["", "context \n  assumes \"SORT_CONSTRAINT('a :: prime_card)\" \nbegin"], ["", "function dist_degree_factorize_main :: \n  \"'a mod_ring poly \\<Rightarrow> 'a mod_ring poly \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> 'a mod_ring poly) list \n  \\<Rightarrow> (nat \\<times> 'a mod_ring poly) list\" where\n  \"dist_degree_factorize_main v w d res = (if v = 1 then res else if d + d > degree v \n    then (degree v, v) # res else let\n      w = w^(CARD('a)) mod v;\n      d = Suc d;\n      gd = gcd (w - monom 1 1) v\n      in if gd = 1 then dist_degree_factorize_main v w d res else \n      let v' = v div gd in \n      dist_degree_factorize_main v' (w mod v') d ((d,gd) # res))\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>v w d res.\n           x = (v, w, d, res) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>v w d res va wa da resa.\n       (v, w, d, res) = (va, wa, da, resa) \\<Longrightarrow>\n       (if v = 1 then res\n        else if degree v < d + d then (degree v, v) # res\n             else let w = w ^ CARD('a) mod v; d = Suc d;\n                      gd = gcd (w - monom 1 1) v\n                  in if gd = 1\n                     then dist_degree_factorize_main_sumC (v, w, d, res)\n                     else let v' = v div gd\n                          in dist_degree_factorize_main_sumC\n                              (v', w mod v', d, (d, gd) # res)) =\n       (if va = 1 then resa\n        else if degree va < da + da then (degree va, va) # resa\n             else let w = wa ^ CARD('a) mod va; d = Suc da;\n                      gd = gcd (w - monom 1 1) va\n                  in if gd = 1\n                     then dist_degree_factorize_main_sumC (va, w, d, resa)\n                     else let v' = va div gd\n                          in dist_degree_factorize_main_sumC\n                              (v', w mod v', d, (d, gd) # resa))", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All local.dist_degree_factorize_main_dom", "proof (relation \"measure (\\<lambda> (v,w,d,res). Suc (degree v) - d)\", goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. wf (measure (\\<lambda>(v, w, d, res). Suc (degree v) - d))\n 2. \\<And>v w d res x xa xb.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb = 1\\<rbrakk>\n       \\<Longrightarrow> ((v, x, xa, res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)\n 3. \\<And>v w d res x xa xb xc.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb \\<noteq> 1; xc = v div xb\\<rbrakk>\n       \\<Longrightarrow> ((xc, x mod xc, xa, (xa, xb) # res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)", "case (3 v w d res x xa xb xc)"], ["proof (state)\nthis:\n  v \\<noteq> 1\n  \\<not> degree v < d + d\n  x = w ^ CARD('a) mod v\n  xa = Suc d\n  xb = gcd (x - monom 1 1) v\n  xb \\<noteq> 1\n  xc = v div xb\n\ngoal (3 subgoals):\n 1. wf (measure (\\<lambda>(v, w, d, res). Suc (degree v) - d))\n 2. \\<And>v w d res x xa xb.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb = 1\\<rbrakk>\n       \\<Longrightarrow> ((v, x, xa, res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)\n 3. \\<And>v w d res x xa xb xc.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb \\<noteq> 1; xc = v div xb\\<rbrakk>\n       \\<Longrightarrow> ((xc, x mod xc, xa, (xa, xb) # res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)", "have \"xb dvd v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xb dvd v", "unfolding 3"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v", "by auto"], ["proof (state)\nthis:\n  xb dvd v\n\ngoal (3 subgoals):\n 1. wf (measure (\\<lambda>(v, w, d, res). Suc (degree v) - d))\n 2. \\<And>v w d res x xa xb.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb = 1\\<rbrakk>\n       \\<Longrightarrow> ((v, x, xa, res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)\n 3. \\<And>v w d res x xa xb xc.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb \\<noteq> 1; xc = v div xb\\<rbrakk>\n       \\<Longrightarrow> ((xc, x mod xc, xa, (xa, xb) # res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)", "hence \"xc dvd v\""], ["proof (prove)\nusing this:\n  xb dvd v\n\ngoal (1 subgoal):\n 1. xc dvd v", "unfolding 3"], ["proof (prove)\nusing this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. v div gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v", "by (metis dvd_def dvd_div_mult_self)"], ["proof (state)\nthis:\n  xc dvd v\n\ngoal (3 subgoals):\n 1. wf (measure (\\<lambda>(v, w, d, res). Suc (degree v) - d))\n 2. \\<And>v w d res x xa xb.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb = 1\\<rbrakk>\n       \\<Longrightarrow> ((v, x, xa, res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)\n 3. \\<And>v w d res x xa xb xc.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb \\<noteq> 1; xc = v div xb\\<rbrakk>\n       \\<Longrightarrow> ((xc, x mod xc, xa, (xa, xb) # res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)", "from divides_degree[OF this] 3"], ["proof (chain)\npicking this:\n  degree xc \\<le> degree v \\<or> v = 0\n  v \\<noteq> 1\n  \\<not> degree v < d + d\n  x = w ^ CARD('a) mod v\n  xa = Suc d\n  xb = gcd (x - monom 1 1) v\n  xb \\<noteq> 1\n  xc = v div xb", "show ?case"], ["proof (prove)\nusing this:\n  degree xc \\<le> degree v \\<or> v = 0\n  v \\<noteq> 1\n  \\<not> degree v < d + d\n  x = w ^ CARD('a) mod v\n  xa = Suc d\n  xb = gcd (x - monom 1 1) v\n  xb \\<noteq> 1\n  xc = v div xb\n\ngoal (1 subgoal):\n 1. ((xc, x mod xc, xa, (xa, xb) # res), v, w, d, res)\n    \\<in> measure (\\<lambda>(v, w, d, res). Suc (degree v) - d)", "by auto"], ["proof (state)\nthis:\n  ((xc, x mod xc, xa, (xa, xb) # res), v, w, d, res)\n  \\<in> measure (\\<lambda>(v, w, d, res). Suc (degree v) - d)\n\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(v, w, d, res). Suc (degree v) - d))\n 2. \\<And>v w d res x xa xb.\n       \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n        x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n        xb = 1\\<rbrakk>\n       \\<Longrightarrow> ((v, x, xa, res), v, w, d, res)\n                         \\<in> measure\n                                (\\<lambda>(v, w, d, res).\n                                    Suc (degree v) - d)", "qed auto"], ["", "declare dist_degree_factorize_main.simps[simp del]"], ["", "lemma dist_degree_factorize_main: assumes \n  dist: \"dist_degree_factorize_main v w d res = facts\" and\n  w: \"w = (monom 1 1)^(CARD('a)^d) mod v\" and\n  sf: \"square_free u\" and  \n  mon: \"monic u\" and\n  prod: \"u = v * prod_list (map snd res)\" and\n  deg: \"\\<And> f. irreducible f \\<Longrightarrow> f dvd v \\<Longrightarrow> degree f > d\" and\n  res: \"\\<And> i f. (i,f) \\<in> set res \\<Longrightarrow> i \\<noteq> 0 \\<and> degree f \\<noteq> 0 \\<and> monic f \\<and> (\\<forall> g. irreducible g \\<longrightarrow> g dvd f \\<longrightarrow> degree g = i)\" \nshows \"u = prod_list (map snd facts) \\<and> (\\<forall> i f. (i,f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "using dist w prod res deg"], ["proof (prove)\nusing this:\n  local.dist_degree_factorize_main v w d res = facts\n  w = monom 1 1 ^ CARD('a) ^ d mod v\n  u = v * prod_list (map snd res)\n  (?i, ?f) \\<in> set res \\<Longrightarrow>\n  ?i \\<noteq> 0 \\<and>\n  degree ?f \\<noteq> 0 \\<and>\n  monic ?f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd ?f \\<longrightarrow> degree g = ?i)\n  \\<lbrakk>irreducible ?f; ?f dvd v\\<rbrakk> \\<Longrightarrow> d < degree ?f\n\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "unfolding factors_of_same_degree_def"], ["proof (prove)\nusing this:\n  local.dist_degree_factorize_main v w d res = facts\n  w = monom 1 1 ^ CARD('a) ^ d mod v\n  u = v * prod_list (map snd res)\n  (?i, ?f) \\<in> set res \\<Longrightarrow>\n  ?i \\<noteq> 0 \\<and>\n  degree ?f \\<noteq> 0 \\<and>\n  monic ?f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd ?f \\<longrightarrow> degree g = ?i)\n  \\<lbrakk>irreducible ?f; ?f dvd v\\<rbrakk> \\<Longrightarrow> d < degree ?f\n\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (induct v w d res rule: dist_degree_factorize_main.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "case (1 v w d res)"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d; ?x = w ^ CARD('a) mod v;\n   ?xa = Suc d; ?xb = gcd (?x - monom 1 1) v; ?xb = 1;\n   local.dist_degree_factorize_main v ?x ?xa res = facts;\n   ?x = monom 1 1 ^ CARD('a) ^ ?xa mod v; u = v * prod_list (map snd res);\n   \\<And>i f.\n      (i, f) \\<in> set res \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n      \\<Longrightarrow> ?xa < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n  \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d; ?x = w ^ CARD('a) mod v;\n   ?xa = Suc d; ?xb = gcd (?x - monom 1 1) v; ?xb \\<noteq> 1;\n   ?xc = v div ?xb;\n   local.dist_degree_factorize_main ?xc (?x mod ?xc) ?xa\n    ((?xa, ?xb) # res) =\n   facts;\n   ?x mod ?xc = monom 1 1 ^ CARD('a) ^ ?xa mod ?xc;\n   u = ?xc * prod_list (map snd ((?xa, ?xb) # res));\n   \\<And>i f.\n      (i, f) \\<in> set ((?xa, ?xb) # res) \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd ?xc\\<rbrakk>\n      \\<Longrightarrow> ?xa < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n  local.dist_degree_factorize_main v w d res = facts\n  w = monom 1 1 ^ CARD('a) ^ d mod v\n  u = v * prod_list (map snd res)\n  (?i, ?f) \\<in> set res \\<Longrightarrow>\n  ?i \\<noteq> 0 \\<and>\n  degree ?f \\<noteq> 0 \\<and>\n  monic ?f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd ?f \\<longrightarrow> degree g = ?i)\n  \\<lbrakk>irreducible ?f; ?f dvd v\\<rbrakk> \\<Longrightarrow> d < degree ?f\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note IH = 1(1-2)"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d; ?x = w ^ CARD('a) mod v;\n   ?xa = Suc d; ?xb = gcd (?x - monom 1 1) v; ?xb = 1;\n   local.dist_degree_factorize_main v ?x ?xa res = facts;\n   ?x = monom 1 1 ^ CARD('a) ^ ?xa mod v; u = v * prod_list (map snd res);\n   \\<And>i f.\n      (i, f) \\<in> set res \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n      \\<Longrightarrow> ?xa < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n  \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d; ?x = w ^ CARD('a) mod v;\n   ?xa = Suc d; ?xb = gcd (?x - monom 1 1) v; ?xb \\<noteq> 1;\n   ?xc = v div ?xb;\n   local.dist_degree_factorize_main ?xc (?x mod ?xc) ?xa\n    ((?xa, ?xb) # res) =\n   facts;\n   ?x mod ?xc = monom 1 1 ^ CARD('a) ^ ?xa mod ?xc;\n   u = ?xc * prod_list (map snd ((?xa, ?xb) # res));\n   \\<And>i f.\n      (i, f) \\<in> set ((?xa, ?xb) # res) \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd ?xc\\<rbrakk>\n      \\<Longrightarrow> ?xa < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note result = 1(3)"], ["proof (state)\nthis:\n  local.dist_degree_factorize_main v w d res = facts\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note w = 1(4)"], ["proof (state)\nthis:\n  w = monom 1 1 ^ CARD('a) ^ d mod v\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note u = 1(5)"], ["proof (state)\nthis:\n  u = v * prod_list (map snd res)\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note res = 1(6)"], ["proof (state)\nthis:\n  (?i, ?f) \\<in> set res \\<Longrightarrow>\n  ?i \\<noteq> 0 \\<and>\n  degree ?f \\<noteq> 0 \\<and>\n  monic ?f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd ?f \\<longrightarrow> degree g = ?i)\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note fact = 1(7)"], ["proof (state)\nthis:\n  \\<lbrakk>irreducible ?f; ?f dvd v\\<rbrakk> \\<Longrightarrow> d < degree ?f\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "note [simp] = dist_degree_factorize_main.simps[of _ _ d]"], ["proof (state)\nthis:\n  local.dist_degree_factorize_main ?v ?w d ?res =\n  (if ?v = 1 then ?res\n   else if degree ?v < d + d then (degree ?v, ?v) # ?res\n        else let w = ?w ^ CARD('a) mod ?v; d = Suc d;\n                 gd = gcd (w - monom 1 1) ?v\n             in if gd = 1 then local.dist_degree_factorize_main ?v w d ?res\n                else let v' = ?v div gd\n                     in local.dist_degree_factorize_main v' (w mod v') d\n                         ((d, gd) # ?res))\n\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "let ?x = \"monom 1 1 :: 'a mod_ring poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v w d res.\n       \\<lbrakk>\\<And>x xa xb.\n                   \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n                    x = w ^ CARD('a) mod v; xa = Suc d;\n                    xb = gcd (x - monom 1 1) v; xb = 1;\n                    local.dist_degree_factorize_main v x xa res = facts;\n                    x = monom 1 1 ^ CARD('a) ^ xa mod v;\n                    u = v * prod_list (map snd res);\n                    \\<And>i f.\n                       (i, f) \\<in> set res \\<Longrightarrow>\n                       i \\<noteq> 0 \\<and>\n                       degree f \\<noteq> 0 \\<and>\n                       monic f \\<and>\n                       (\\<forall>g.\n                           irreducible g \\<longrightarrow>\n                           g dvd f \\<longrightarrow> degree g = i);\n                    \\<And>f.\n                       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n                       \\<Longrightarrow> xa < degree f\\<rbrakk>\n                   \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                                     (\\<forall>i f.\n   (i, f) \\<in> set facts \\<longrightarrow>\n   i \\<noteq> 0 \\<and>\n   degree f \\<noteq> 0 \\<and>\n   monic f \\<and>\n   (\\<forall>g.\n       irreducible g \\<longrightarrow>\n       g dvd f \\<longrightarrow> degree g = i));\n        \\<And>x xa xb xc.\n           \\<lbrakk>v \\<noteq> 1; \\<not> degree v < d + d;\n            x = w ^ CARD('a) mod v; xa = Suc d; xb = gcd (x - monom 1 1) v;\n            xb \\<noteq> 1; xc = v div xb;\n            local.dist_degree_factorize_main xc (x mod xc) xa\n             ((xa, xb) # res) =\n            facts;\n            x mod xc = monom 1 1 ^ CARD('a) ^ xa mod xc;\n            u = xc * prod_list (map snd ((xa, xb) # res));\n            \\<And>i f.\n               (i, f) \\<in> set ((xa, xb) # res) \\<Longrightarrow>\n               i \\<noteq> 0 \\<and>\n               degree f \\<noteq> 0 \\<and>\n               monic f \\<and>\n               (\\<forall>g.\n                   irreducible g \\<longrightarrow>\n                   g dvd f \\<longrightarrow> degree g = i);\n            \\<And>f.\n               \\<lbrakk>irreducible f; f dvd xc\\<rbrakk>\n               \\<Longrightarrow> xa < degree f\\<rbrakk>\n           \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                             (\\<forall>i f.\n                                 (i, f) \\<in> set facts \\<longrightarrow>\n                                 i \\<noteq> 0 \\<and>\n                                 degree f \\<noteq> 0 \\<and>\n                                 monic f \\<and>\n                                 (\\<forall>g.\n                                     irreducible g \\<longrightarrow>\n                                     g dvd f \\<longrightarrow>\n                                     degree g = i));\n        local.dist_degree_factorize_main v w d res = facts;\n        w = monom 1 1 ^ CARD('a) ^ d mod v; u = v * prod_list (map snd res);\n        \\<And>i f.\n           (i, f) \\<in> set res \\<Longrightarrow>\n           i \\<noteq> 0 \\<and>\n           degree f \\<noteq> 0 \\<and>\n           monic f \\<and>\n           (\\<forall>g.\n               irreducible g \\<longrightarrow>\n               g dvd f \\<longrightarrow> degree g = i);\n        \\<And>f.\n           \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n           \\<Longrightarrow> d < degree f\\<rbrakk>\n       \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                         (\\<forall>i f.\n                             (i, f) \\<in> set facts \\<longrightarrow>\n                             i \\<noteq> 0 \\<and>\n                             degree f \\<noteq> 0 \\<and>\n                             monic f \\<and>\n                             (\\<forall>g.\n                                 irreducible g \\<longrightarrow>\n                                 g dvd f \\<longrightarrow> degree g = i))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (cases \"v = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "case True"], ["proof (state)\nthis:\n  v = 1\n\ngoal (2 subgoals):\n 1. v = 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = 1\n\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "using result u mon res"], ["proof (prove)\nusing this:\n  v = 1\n  local.dist_degree_factorize_main v w d res = facts\n  u = v * prod_list (map snd res)\n  monic u\n  (?i, ?f) \\<in> set res \\<Longrightarrow>\n  ?i \\<noteq> 0 \\<and>\n  degree ?f \\<noteq> 0 \\<and>\n  monic ?f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd ?f \\<longrightarrow> degree g = ?i)\n\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "by auto"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "case False"], ["proof (state)\nthis:\n  v \\<noteq> 1\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "note v = this"], ["proof (state)\nthis:\n  v \\<noteq> 1\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "note IH = IH[OF this]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> degree v < d + d; ?x = w ^ CARD('a) mod v; ?xa = Suc d;\n   ?xb = gcd (?x - monom 1 1) v; ?xb = 1;\n   local.dist_degree_factorize_main v ?x ?xa res = facts;\n   ?x = monom 1 1 ^ CARD('a) ^ ?xa mod v; u = v * prod_list (map snd res);\n   \\<And>i f.\n      (i, f) \\<in> set res \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n      \\<Longrightarrow> ?xa < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n  \\<lbrakk>\\<not> degree v < d + d; ?x = w ^ CARD('a) mod v; ?xa = Suc d;\n   ?xb = gcd (?x - monom 1 1) v; ?xb \\<noteq> 1; ?xc = v div ?xb;\n   local.dist_degree_factorize_main ?xc (?x mod ?xc) ?xa\n    ((?xa, ?xb) # res) =\n   facts;\n   ?x mod ?xc = monom 1 1 ^ CARD('a) ^ ?xa mod ?xc;\n   u = ?xc * prod_list (map snd ((?xa, ?xb) # res));\n   \\<And>i f.\n      (i, f) \\<in> set ((?xa, ?xb) # res) \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd ?xc\\<rbrakk>\n      \\<Longrightarrow> ?xa < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have mon_prod: \"monic (prod_list (map snd res))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (prod_list (map snd res))", "by (rule monic_prod_list, insert res, auto)"], ["proof (state)\nthis:\n  monic (prod_list (map snd res))\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "with mon[unfolded u]"], ["proof (chain)\npicking this:\n  monic (v * prod_list (map snd res))\n  monic (prod_list (map snd res))", "have mon_v: \"monic v\""], ["proof (prove)\nusing this:\n  monic (v * prod_list (map snd res))\n  monic (prod_list (map snd res))\n\ngoal (1 subgoal):\n 1. monic v", "by (simp add: coeff_degree_mult)"], ["proof (state)\nthis:\n  monic v\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "with False"], ["proof (chain)\npicking this:\n  v \\<noteq> 1\n  monic v", "have deg_v: \"degree v \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v \\<noteq> 1\n  monic v\n\ngoal (1 subgoal):\n 1. degree v \\<noteq> 0", "by (simp add: monic_degree_0)"], ["proof (state)\nthis:\n  degree v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (cases \"degree v < d + d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "case True"], ["proof (state)\nthis:\n  degree v < d + d\n\ngoal (2 subgoals):\n 1. degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "with result False"], ["proof (chain)\npicking this:\n  local.dist_degree_factorize_main v w d res = facts\n  v \\<noteq> 1\n  degree v < d + d", "have facts: \"facts = (degree v, v) # res\""], ["proof (prove)\nusing this:\n  local.dist_degree_factorize_main v w d res = facts\n  v \\<noteq> 1\n  degree v < d + d\n\ngoal (1 subgoal):\n 1. facts = (degree v, v) # res", "by simp"], ["proof (state)\nthis:\n  facts = (degree v, v) # res\n\ngoal (2 subgoals):\n 1. degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (intro allI conjI impI)"], ["proof (state)\ngoal (5 subgoals):\n 1. u = prod_list (map snd facts)\n 2. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> i \\<noteq> 0\n 3. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> degree f \\<noteq> 0\n 4. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> monic f\n 5. \\<And>i f g.\n       \\<lbrakk>(i, f) \\<in> set facts; irreducible g; g dvd f\\<rbrakk>\n       \\<Longrightarrow> degree g = i", "fix i f g"], ["proof (state)\ngoal (5 subgoals):\n 1. u = prod_list (map snd facts)\n 2. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> i \\<noteq> 0\n 3. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> degree f \\<noteq> 0\n 4. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> monic f\n 5. \\<And>i f g.\n       \\<lbrakk>(i, f) \\<in> set facts; irreducible g; g dvd f\\<rbrakk>\n       \\<Longrightarrow> degree g = i", "assume *: \"(i,f) \\<in> set facts\" \"irreducible g\" \"g dvd f\""], ["proof (state)\nthis:\n  (i, f) \\<in> set facts\n  irreducible g\n  g dvd f\n\ngoal (5 subgoals):\n 1. u = prod_list (map snd facts)\n 2. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> i \\<noteq> 0\n 3. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> degree f \\<noteq> 0\n 4. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> monic f\n 5. \\<And>i f g.\n       \\<lbrakk>(i, f) \\<in> set facts; irreducible g; g dvd f\\<rbrakk>\n       \\<Longrightarrow> degree g = i", "show \"degree g = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree g = i", "proof (cases \"(i,f) \\<in> set res\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (i, f) \\<in> set res \\<Longrightarrow> degree g = i\n 2. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "case True"], ["proof (state)\nthis:\n  (i, f) \\<in> set res\n\ngoal (2 subgoals):\n 1. (i, f) \\<in> set res \\<Longrightarrow> degree g = i\n 2. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from res[OF this] *"], ["proof (chain)\npicking this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n  (i, f) \\<in> set facts\n  irreducible g\n  g dvd f", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n  (i, f) \\<in> set facts\n  irreducible g\n  g dvd f\n\ngoal (1 subgoal):\n 1. degree g = i", "by auto"], ["proof (state)\nthis:\n  degree g = i\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "case False"], ["proof (state)\nthis:\n  (i, f) \\<notin> set res\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "with * facts"], ["proof (chain)\npicking this:\n  (i, f) \\<in> set facts\n  irreducible g\n  g dvd f\n  facts = (degree v, v) # res\n  (i, f) \\<notin> set res", "have id: \"i = degree v\" \"f = v\""], ["proof (prove)\nusing this:\n  (i, f) \\<in> set facts\n  irreducible g\n  g dvd f\n  facts = (degree v, v) # res\n  (i, f) \\<notin> set res\n\ngoal (1 subgoal):\n 1. i = degree v &&& f = v", "by auto"], ["proof (state)\nthis:\n  i = degree v\n  f = v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "note * = *(2-3)[unfolded id]"], ["proof (state)\nthis:\n  irreducible g\n  g dvd v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from fact[OF *]"], ["proof (chain)\npicking this:\n  d < degree g", "have dg: \"d < degree g\""], ["proof (prove)\nusing this:\n  d < degree g\n\ngoal (1 subgoal):\n 1. d < degree g", "by auto"], ["proof (state)\nthis:\n  d < degree g\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from divides_degree[OF *(2)] mon_v"], ["proof (chain)\npicking this:\n  degree g \\<le> degree v \\<or> v = 0\n  monic v", "have deg_gv: \"degree g \\<le> degree v\""], ["proof (prove)\nusing this:\n  degree g \\<le> degree v \\<or> v = 0\n  monic v\n\ngoal (1 subgoal):\n 1. degree g \\<le> degree v", "by auto"], ["proof (state)\nthis:\n  degree g \\<le> degree v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from *(2)"], ["proof (chain)\npicking this:\n  g dvd v", "obtain h where vgh: \"v = g * h\""], ["proof (prove)\nusing this:\n  g dvd v\n\ngoal (1 subgoal):\n 1. (\\<And>h. v = g * h \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. v = g * k\n\ngoal (1 subgoal):\n 1. (\\<And>h. v = g * h \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  v = g * h\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from arg_cong[OF this, of degree] mon_v"], ["proof (chain)\npicking this:\n  degree v = degree (g * h)\n  monic v", "have dvgh: \"degree v = degree g + degree h\""], ["proof (prove)\nusing this:\n  degree v = degree (g * h)\n  monic v\n\ngoal (1 subgoal):\n 1. degree v = degree g + degree h", "by (metis deg_v degree_mult_eq degree_mult_eq_0)"], ["proof (state)\nthis:\n  degree v = degree g + degree h\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "with dg deg_gv dg True"], ["proof (chain)\npicking this:\n  d < degree g\n  degree g \\<le> degree v\n  d < degree g\n  degree v < d + d\n  degree v = degree g + degree h", "have deg_h: \"degree h < d\""], ["proof (prove)\nusing this:\n  d < degree g\n  degree g \\<le> degree v\n  d < degree g\n  degree v < d + d\n  degree v = degree g + degree h\n\ngoal (1 subgoal):\n 1. degree h < d", "by auto"], ["proof (state)\nthis:\n  degree h < d\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "{"], ["proof (state)\nthis:\n  degree h < d\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "assume \"degree h = 0\""], ["proof (state)\nthis:\n  degree h = 0\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "with dvgh"], ["proof (chain)\npicking this:\n  degree v = degree g + degree h\n  degree h = 0", "have \"degree g = degree v\""], ["proof (prove)\nusing this:\n  degree v = degree g + degree h\n  degree h = 0\n\ngoal (1 subgoal):\n 1. degree g = degree v", "by simp"], ["proof (state)\nthis:\n  degree g = degree v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "}"], ["proof (state)\nthis:\n  degree h = 0 \\<Longrightarrow> degree g = degree v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "moreover"], ["proof (state)\nthis:\n  degree h = 0 \\<Longrightarrow> degree g = degree v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "{"], ["proof (state)\nthis:\n  degree h = 0 \\<Longrightarrow> degree g = degree v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "assume deg_h0: \"degree h \\<noteq> 0\""], ["proof (state)\nthis:\n  degree h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "hence \"\\<exists> k. irreducible\\<^sub>d k \\<and> k dvd h\""], ["proof (prove)\nusing this:\n  degree h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>k. irreducible\\<^sub>d k \\<and> k dvd h", "using dvd_triv_left irreducible\\<^sub>d_factor"], ["proof (prove)\nusing this:\n  degree h \\<noteq> 0\n  ?a dvd ?a * ?b\n  0 < degree ?p \\<Longrightarrow>\n  \\<exists>q r.\n     irreducible\\<^sub>d q \\<and> ?p = q * r \\<and> degree r < degree ?p\n\ngoal (1 subgoal):\n 1. \\<exists>k. irreducible\\<^sub>d k \\<and> k dvd h", "by blast"], ["proof (state)\nthis:\n  \\<exists>k. irreducible\\<^sub>d k \\<and> k dvd h\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. irreducible\\<^sub>d k \\<and> k dvd h", "obtain k where irr: \"irreducible k\" and \"k dvd h\""], ["proof (prove)\nusing this:\n  \\<exists>k. irreducible\\<^sub>d k \\<and> k dvd h\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>irreducible k; k dvd h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  irreducible k\n  k dvd h\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from dvd_trans[OF this(2), of v] vgh"], ["proof (chain)\npicking this:\n  h dvd v \\<Longrightarrow> k dvd v\n  v = g * h", "have \"k dvd v\""], ["proof (prove)\nusing this:\n  h dvd v \\<Longrightarrow> k dvd v\n  v = g * h\n\ngoal (1 subgoal):\n 1. k dvd v", "by auto"], ["proof (state)\nthis:\n  k dvd v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from fact[OF irr this]"], ["proof (chain)\npicking this:\n  d < degree k", "have dk: \"d < degree k\""], ["proof (prove)\nusing this:\n  d < degree k\n\ngoal (1 subgoal):\n 1. d < degree k", "."], ["proof (state)\nthis:\n  d < degree k\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "from divides_degree[OF \\<open>k dvd h\\<close>] deg_h0"], ["proof (chain)\npicking this:\n  degree k \\<le> degree h \\<or> h = 0\n  degree h \\<noteq> 0", "have \"degree k \\<le> degree h\""], ["proof (prove)\nusing this:\n  degree k \\<le> degree h \\<or> h = 0\n  degree h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree k \\<le> degree h", "by auto"], ["proof (state)\nthis:\n  degree k \\<le> degree h\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "with deg_h"], ["proof (chain)\npicking this:\n  degree h < d\n  degree k \\<le> degree h", "have \"degree k < d\""], ["proof (prove)\nusing this:\n  degree h < d\n  degree k \\<le> degree h\n\ngoal (1 subgoal):\n 1. degree k < d", "by auto"], ["proof (state)\nthis:\n  degree k < d\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "with dk"], ["proof (chain)\npicking this:\n  d < degree k\n  degree k < d", "have False"], ["proof (prove)\nusing this:\n  d < degree k\n  degree k < d\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "}"], ["proof (state)\nthis:\n  degree h \\<noteq> 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "ultimately"], ["proof (chain)\npicking this:\n  degree h = 0 \\<Longrightarrow> degree g = degree v\n  degree h \\<noteq> 0 \\<Longrightarrow> False", "have \"degree g = degree v\""], ["proof (prove)\nusing this:\n  degree h = 0 \\<Longrightarrow> degree g = degree v\n  degree h \\<noteq> 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. degree g = degree v", "by auto"], ["proof (state)\nthis:\n  degree g = degree v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow> degree g = i", "thus ?thesis"], ["proof (prove)\nusing this:\n  degree g = degree v\n\ngoal (1 subgoal):\n 1. degree g = i", "unfolding id"], ["proof (prove)\nusing this:\n  degree g = degree v\n\ngoal (1 subgoal):\n 1. degree g = degree v", "by auto"], ["proof (state)\nthis:\n  degree g = i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree g = i\n\ngoal (4 subgoals):\n 1. u = prod_list (map snd facts)\n 2. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> i \\<noteq> 0\n 3. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> degree f \\<noteq> 0\n 4. \\<And>i f. (i, f) \\<in> set facts \\<Longrightarrow> monic f", "qed (insert v mon_v deg_v u facts res, force+)"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "case False"], ["proof (state)\nthis:\n  \\<not> degree v < d + d\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "note IH = IH[OF this refl refl refl]"], ["proof (state)\nthis:\n  \\<lbrakk>gcd (w ^ CARD('a) mod v - monom 1 1) v = 1;\n   local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res =\n   facts;\n   w ^ CARD('a) mod v = monom 1 1 ^ CARD('a) ^ Suc d mod v;\n   u = v * prod_list (map snd res);\n   \\<And>i f.\n      (i, f) \\<in> set res \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n      \\<Longrightarrow> Suc d < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n  \\<lbrakk>gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1;\n   ?xc = v div gcd (w ^ CARD('a) mod v - monom 1 1) v;\n   local.dist_degree_factorize_main ?xc (w ^ CARD('a) mod v mod ?xc) (Suc d)\n    ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res) =\n   facts;\n   w ^ CARD('a) mod v mod ?xc = monom 1 1 ^ CARD('a) ^ Suc d mod ?xc;\n   u =\n   ?xc *\n   prod_list\n    (map snd ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res));\n   \\<And>i f.\n      (i, f)\n      \\<in> set ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) #\n                 res) \\<Longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i);\n   \\<And>f.\n      \\<lbrakk>irreducible f; f dvd ?xc\\<rbrakk>\n      \\<Longrightarrow> Suc d < degree f\\<rbrakk>\n  \\<Longrightarrow> u = prod_list (map snd facts) \\<and>\n                    (\\<forall>i f.\n                        (i, f) \\<in> set facts \\<longrightarrow>\n                        i \\<noteq> 0 \\<and>\n                        degree f \\<noteq> 0 \\<and>\n                        monic f \\<and>\n                        (\\<forall>g.\n                            irreducible g \\<longrightarrow>\n                            g dvd f \\<longrightarrow> degree g = i))\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "let ?p = \"CARD('a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "let ?w = \"w ^ ?p mod v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "let ?g = \"gcd (?w - ?x) v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "let ?v = \"v div ?g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "let ?d = \"Suc d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "from result[simplified] v False"], ["proof (chain)\npicking this:\n  (if v = 1 then res\n   else if degree v < d + d then (degree v, v) # res\n        else let w = w ^ CARD('a) mod v; d = Suc d;\n                 gd = gcd (w - monom 1 1) v\n             in if gd = 1 then local.dist_degree_factorize_main v w d res\n                else let v' = v div gd\n                     in local.dist_degree_factorize_main v' (w mod v') d\n                         ((d, gd) # res)) =\n  facts\n  v \\<noteq> 1\n  \\<not> degree v < d + d", "have result: \"(if ?g = 1 then dist_degree_factorize_main v ?w ?d res\n                  else dist_degree_factorize_main ?v (?w mod ?v) ?d ((?d, ?g) # res)) = facts\""], ["proof (prove)\nusing this:\n  (if v = 1 then res\n   else if degree v < d + d then (degree v, v) # res\n        else let w = w ^ CARD('a) mod v; d = Suc d;\n                 gd = gcd (w - monom 1 1) v\n             in if gd = 1 then local.dist_degree_factorize_main v w d res\n                else let v' = v div gd\n                     in local.dist_degree_factorize_main v' (w mod v') d\n                         ((d, gd) # res)) =\n  facts\n  v \\<noteq> 1\n  \\<not> degree v < d + d\n\ngoal (1 subgoal):\n 1. (if gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n     then local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d)\n           res\n     else local.dist_degree_factorize_main\n           (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n           (w ^ CARD('a) mod v mod\n            (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n           (Suc d)\n           ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)) =\n    facts", "by (auto simp: Let_def)"], ["proof (state)\nthis:\n  (if gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n   then local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res\n   else local.dist_degree_factorize_main\n         (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n         (w ^ CARD('a) mod v mod\n          (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n         (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)) =\n  facts\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "from mon_v"], ["proof (chain)\npicking this:\n  monic v", "have mon_g: \"monic ?g\""], ["proof (prove)\nusing this:\n  monic v\n\ngoal (1 subgoal):\n 1. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)", "by (metis deg_v degree_0 poly_gcd_monic)"], ["proof (state)\nthis:\n  monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have ww: \"?w = ?x ^ ?p ^ ?d mod v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w ^ CARD('a) mod v = monom 1 1 ^ CARD('a) ^ Suc d mod v", "unfolding w"], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 ^ CARD('a) ^ d mod v) ^ CARD('a) mod v =\n    monom 1 1 ^ CARD('a) ^ Suc d mod v", "by simp (metis (mono_tags, hide_lams) One_nat_def mult.commute power_Suc power_mod power_mult x_pow_n)"], ["proof (state)\nthis:\n  w ^ CARD('a) mod v = monom 1 1 ^ CARD('a) ^ Suc d mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have gv: \"?g dvd v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v", "by auto"], ["proof (state)\nthis:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "hence gv': \"v div ?g dvd v\""], ["proof (prove)\nusing this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. v div gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v", "by (metis dvd_def dvd_div_mult_self)"], ["proof (state)\nthis:\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "{"], ["proof (state)\nthis:\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "assume irr: \"irreducible f\" and fv: \"f dvd v\" and \"degree f = ?d\""], ["proof (state)\nthis:\n  irreducible f\n  f dvd v\n  degree f = Suc d\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "from degree_divisor(1)[OF this(1,3)]"], ["proof (chain)\npicking this:\n  f dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "have \"f dvd ?x ^ ?p ^ ?d - ?x\""], ["proof (prove)\nusing this:\n  f dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (1 subgoal):\n 1. f dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "by auto"], ["proof (state)\nthis:\n  f dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "hence \"f dvd (?x ^ ?p ^ ?d - ?x) mod v\""], ["proof (prove)\nusing this:\n  f dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (1 subgoal):\n 1. f dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v", "using fv"], ["proof (prove)\nusing this:\n  f dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n  f dvd v\n\ngoal (1 subgoal):\n 1. f dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v", "by (rule dvd_mod)"], ["proof (state)\nthis:\n  f dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "also"], ["proof (state)\nthis:\n  f dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have \"(?x ^ ?p ^ ?d - ?x) mod v = ?x ^ ?p ^ ?d mod v - ?x mod v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v =\n    monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1 mod v", "by (rule poly_mod_diff_left)"], ["proof (state)\nthis:\n  (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v =\n  monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1 mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "also"], ["proof (state)\nthis:\n  (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v =\n  monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1 mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have \"?x ^ ?p ^ ?d mod v = ?w mod v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ Suc d mod v = w ^ CARD('a) mod v mod v", "unfolding ww"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 ^ CARD('a) ^ Suc d mod v =\n    monom 1 1 ^ CARD('a) ^ Suc d mod v mod v", "by auto"], ["proof (state)\nthis:\n  monom 1 1 ^ CARD('a) ^ Suc d mod v = w ^ CARD('a) mod v mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "also"], ["proof (state)\nthis:\n  monom 1 1 ^ CARD('a) ^ Suc d mod v = w ^ CARD('a) mod v mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have \"\\<dots> - ?x mod v = (w ^ ?p mod v - ?x) mod v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w ^ CARD('a) mod v mod v - monom 1 1 mod v =\n    (w ^ CARD('a) mod v - monom 1 1) mod v", "by (metis poly_mod_diff_left)"], ["proof (state)\nthis:\n  w ^ CARD('a) mod v mod v - monom 1 1 mod v =\n  (w ^ CARD('a) mod v - monom 1 1) mod v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "finally"], ["proof (chain)\npicking this:\n  f dvd (w ^ CARD('a) mod v - monom 1 1) mod v", "have \"f dvd (w^?p mod v - ?x)\""], ["proof (prove)\nusing this:\n  f dvd (w ^ CARD('a) mod v - monom 1 1) mod v\n\ngoal (1 subgoal):\n 1. f dvd w ^ CARD('a) mod v - monom 1 1", "using fv"], ["proof (prove)\nusing this:\n  f dvd (w ^ CARD('a) mod v - monom 1 1) mod v\n  f dvd v\n\ngoal (1 subgoal):\n 1. f dvd w ^ CARD('a) mod v - monom 1 1", "by (rule dvd_mod_imp_dvd)"], ["proof (state)\nthis:\n  f dvd w ^ CARD('a) mod v - monom 1 1\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "with fv"], ["proof (chain)\npicking this:\n  f dvd v\n  f dvd w ^ CARD('a) mod v - monom 1 1", "have \"f dvd ?g\""], ["proof (prove)\nusing this:\n  f dvd v\n  f dvd w ^ CARD('a) mod v - monom 1 1\n\ngoal (1 subgoal):\n 1. f dvd gcd (w ^ CARD('a) mod v - monom 1 1) v", "by auto"], ["proof (state)\nthis:\n  f dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>irreducible ?f2; ?f2 dvd v; degree ?f2 = Suc d\\<rbrakk>\n  \\<Longrightarrow> ?f2 dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "note deg_d_dvd_g = this"], ["proof (state)\nthis:\n  \\<lbrakk>irreducible ?f2; ?f2 dvd v; degree ?f2 = Suc d\\<rbrakk>\n  \\<Longrightarrow> ?f2 dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. \\<not> degree v < d + d \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (cases \"?g = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v = 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "case True"], ["proof (state)\nthis:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n\ngoal (2 subgoals):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v = 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "with result"], ["proof (chain)\npicking this:\n  (if gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n   then local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res\n   else local.dist_degree_factorize_main\n         (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n         (w ^ CARD('a) mod v mod\n          (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n         (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)) =\n  facts\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 1", "have dist: \"dist_degree_factorize_main v ?w ?d res = facts\""], ["proof (prove)\nusing this:\n  (if gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n   then local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res\n   else local.dist_degree_factorize_main\n         (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n         (w ^ CARD('a) mod v mod\n          (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n         (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)) =\n  facts\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n\ngoal (1 subgoal):\n 1. local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res =\n    facts", "by auto"], ["proof (state)\nthis:\n  local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res =\n  facts\n\ngoal (2 subgoals):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v = 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))\n 2. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (rule IH(1)[OF True dist ww u res])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res\n 2. \\<And>f.\n       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "fix f"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res\n 2. \\<And>f.\n       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "assume irr: \"irreducible f\" and fv: \"f dvd v\""], ["proof (state)\nthis:\n  irreducible f\n  f dvd v\n\ngoal (2 subgoals):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res\n 2. \\<And>f.\n       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from fact[OF this]"], ["proof (chain)\npicking this:\n  d < degree f", "have \"d < degree f\""], ["proof (prove)\nusing this:\n  d < degree f\n\ngoal (1 subgoal):\n 1. d < degree f", "."], ["proof (state)\nthis:\n  d < degree f\n\ngoal (2 subgoals):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res\n 2. \\<And>f.\n       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "moreover"], ["proof (state)\nthis:\n  d < degree f\n\ngoal (2 subgoals):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res\n 2. \\<And>f.\n       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "have \"degree f \\<noteq> ?d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree f \\<noteq> Suc d", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f = Suc d \\<Longrightarrow> False", "assume \"degree f = ?d\""], ["proof (state)\nthis:\n  degree f = Suc d\n\ngoal (1 subgoal):\n 1. degree f = Suc d \\<Longrightarrow> False", "from divides_degree[OF deg_d_dvd_g[OF irr fv this]] mon_v"], ["proof (chain)\npicking this:\n  degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<or>\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 0\n  monic v", "have \"degree f \\<le> degree ?g\""], ["proof (prove)\nusing this:\n  degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<or>\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 0\n  monic v\n\ngoal (1 subgoal):\n 1. degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v)", "by auto"], ["proof (state)\nthis:\n  degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. degree f = Suc d \\<Longrightarrow> False", "with irr"], ["proof (chain)\npicking this:\n  irreducible f\n  degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v)", "have \"degree ?g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  irreducible f\n  degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0", "unfolding irreducible\\<^sub>d_def"], ["proof (prove)\nusing this:\n  irreducible f\n  degree f \\<le> degree (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f = Suc d \\<Longrightarrow> False", "with True"], ["proof (chain)\npicking this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n  degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0", "show False"], ["proof (prove)\nusing this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n  degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree f \\<noteq> Suc d\n\ngoal (2 subgoals):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res\n 2. \\<And>f.\n       \\<lbrakk>irreducible f; f dvd v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "ultimately"], ["proof (chain)\npicking this:\n  d < degree f\n  degree f \\<noteq> Suc d", "show \"?d < degree f\""], ["proof (prove)\nusing this:\n  d < degree f\n  degree f \\<noteq> Suc d\n\ngoal (1 subgoal):\n 1. Suc d < degree f", "by auto"], ["proof (state)\nthis:\n  Suc d < degree f\n\ngoal (1 subgoal):\n 1. \\<And>i f. (i, f) \\<in> set res \\<Longrightarrow> (i, f) \\<in> set res", "qed"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "case False"], ["proof (state)\nthis:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "with result"], ["proof (chain)\npicking this:\n  (if gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n   then local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res\n   else local.dist_degree_factorize_main\n         (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n         (w ^ CARD('a) mod v mod\n          (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n         (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)) =\n  facts\n  gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1", "have result: \"dist_degree_factorize_main ?v (?w mod ?v) ?d ((?d, ?g) # res) = facts\""], ["proof (prove)\nusing this:\n  (if gcd (w ^ CARD('a) mod v - monom 1 1) v = 1\n   then local.dist_degree_factorize_main v (w ^ CARD('a) mod v) (Suc d) res\n   else local.dist_degree_factorize_main\n         (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n         (w ^ CARD('a) mod v mod\n          (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n         (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)) =\n  facts\n  gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1\n\ngoal (1 subgoal):\n 1. local.dist_degree_factorize_main\n     (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n     (w ^ CARD('a) mod v mod (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n     (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res) =\n    facts", "by auto"], ["proof (state)\nthis:\n  local.dist_degree_factorize_main\n   (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n   (w ^ CARD('a) mod v mod (v div gcd (w ^ CARD('a) mod v - monom 1 1) v))\n   (Suc d) ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res) =\n  facts\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "from False mon_g"], ["proof (chain)\npicking this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1\n  monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)", "have deg_g: \"degree ?g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1\n  monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0", "by (simp add: monic_degree_0)"], ["proof (state)\nthis:\n  degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have www: \"?w mod ?v = monom 1 1 ^ ?p ^ ?d mod ?v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w ^ CARD('a) mod v mod (v div gcd (w ^ CARD('a) mod v - monom 1 1) v) =\n    monom 1 1 ^ CARD('a) ^ Suc d mod\n    (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)", "using gv'"], ["proof (prove)\nusing this:\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. w ^ CARD('a) mod v mod (v div gcd (w ^ CARD('a) mod v - monom 1 1) v) =\n    monom 1 1 ^ CARD('a) ^ Suc d mod\n    (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)", "by (simp add: mod_mod_cancel ww)"], ["proof (state)\nthis:\n  w ^ CARD('a) mod v mod (v div gcd (w ^ CARD('a) mod v - monom 1 1) v) =\n  monom 1 1 ^ CARD('a) ^ Suc d mod\n  (v div gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "from square_free_factor[OF _ sf, of v] u"], ["proof (chain)\npicking this:\n  v dvd u \\<Longrightarrow> square_free v\n  u = v * prod_list (map snd res)", "have sfv: \"square_free v\""], ["proof (prove)\nusing this:\n  v dvd u \\<Longrightarrow> square_free v\n  u = v * prod_list (map snd res)\n\ngoal (1 subgoal):\n 1. square_free v", "by auto"], ["proof (state)\nthis:\n  square_free v\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "have u: \"u = ?v * prod_list (map snd ((?d, ?g) # res))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u =\n    v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n    prod_list\n     (map snd ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res))", "unfolding u"], ["proof (prove)\ngoal (1 subgoal):\n 1. v * prod_list (map snd res) =\n    v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n    prod_list\n     (map snd ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res))", "by simp"], ["proof (state)\nthis:\n  u =\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n  prod_list\n   (map snd ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res))\n\ngoal (1 subgoal):\n 1. gcd (w ^ CARD('a) mod v - monom 1 1) v \\<noteq> 1 \\<Longrightarrow>\n    u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree f \\<noteq> 0 \\<and>\n        monic f \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd f \\<longrightarrow> degree g = i))", "proof (rule IH(2)[OF False refl result www u], goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i f.\n       (i, f)\n       \\<in> set ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) #\n                  res) \\<Longrightarrow>\n       i \\<noteq> 0 \\<and>\n       degree f \\<noteq> 0 \\<and>\n       monic f \\<and>\n       (\\<forall>g.\n           irreducible g \\<longrightarrow>\n           g dvd f \\<longrightarrow> degree g = i)\n 2. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "case (1 i f)"], ["proof (state)\nthis:\n  (i, f) \\<in> set ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)\n\ngoal (2 subgoals):\n 1. \\<And>i f.\n       (i, f)\n       \\<in> set ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) #\n                  res) \\<Longrightarrow>\n       i \\<noteq> 0 \\<and>\n       degree f \\<noteq> 0 \\<and>\n       monic f \\<and>\n       (\\<forall>g.\n           irreducible g \\<longrightarrow>\n           g dvd f \\<longrightarrow> degree g = i)\n 2. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "proof (cases \"(i,f) \\<in> set res\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (i, f) \\<in> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)\n 2. (i, f) \\<notin> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "case True"], ["proof (state)\nthis:\n  (i, f) \\<in> set res\n\ngoal (2 subgoals):\n 1. (i, f) \\<in> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)\n 2. (i, f) \\<notin> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "from res[OF this]"], ["proof (chain)\npicking this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "case False"], ["proof (state)\nthis:\n  (i, f) \\<notin> set res\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "with 1"], ["proof (chain)\npicking this:\n  (i, f) \\<in> set ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)\n  (i, f) \\<notin> set res", "have id: \"i = ?d\" \"f = ?g\""], ["proof (prove)\nusing this:\n  (i, f) \\<in> set ((Suc d, gcd (w ^ CARD('a) mod v - monom 1 1) v) # res)\n  (i, f) \\<notin> set res\n\ngoal (1 subgoal):\n 1. i = Suc d &&& f = gcd (w ^ CARD('a) mod v - monom 1 1) v", "by auto"], ["proof (state)\nthis:\n  i = Suc d\n  f = gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. (i, f) \\<notin> set res \\<Longrightarrow>\n    i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<and>\n    degree f \\<noteq> 0 \\<and>\n    monic f \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd f \\<longrightarrow> degree g = i)", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc d \\<noteq> 0 \\<and>\n    degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0 \\<and>\n    monic (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<and>\n    (\\<forall>g.\n        irreducible g \\<longrightarrow>\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v \\<longrightarrow>\n        degree g = Suc d)", "proof (intro conjI impI allI)"], ["proof (state)\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "fix g"], ["proof (state)\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "assume *: \"irreducible g\" \"g dvd ?g\""], ["proof (state)\nthis:\n  irreducible g\n  g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "hence gv: \"g dvd v\""], ["proof (prove)\nusing this:\n  irreducible g\n  g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. g dvd v", "using dvd_trans[of g ?g v]"], ["proof (prove)\nusing this:\n  irreducible g\n  g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n  \\<lbrakk>g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v;\n   gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\\<rbrakk>\n  \\<Longrightarrow> g dvd v\n\ngoal (1 subgoal):\n 1. g dvd v", "by simp"], ["proof (state)\nthis:\n  g dvd v\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "from fact[OF *(1) this]"], ["proof (chain)\npicking this:\n  d < degree g", "have dg: \"d < degree g\""], ["proof (prove)\nusing this:\n  d < degree g\n\ngoal (1 subgoal):\n 1. d < degree g", "."], ["proof (state)\nthis:\n  d < degree g\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "{"], ["proof (state)\nthis:\n  d < degree g\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "assume \"degree g > ?d\""], ["proof (state)\nthis:\n  Suc d < degree g\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "from degree_divisor(2)[OF *(1) refl _ this]"], ["proof (chain)\npicking this:\n  1 \\<le> Suc d \\<Longrightarrow>\n  \\<not> g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "have ndvd: \"\\<not> g dvd ?x ^ ?p ^ ?d - ?x\""], ["proof (prove)\nusing this:\n  1 \\<le> Suc d \\<Longrightarrow>\n  \\<not> g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (1 subgoal):\n 1. \\<not> g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "by auto"], ["proof (state)\nthis:\n  \\<not> g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "from *(2)"], ["proof (chain)\npicking this:\n  g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v", "have \"g dvd ?w - ?x\""], ["proof (prove)\nusing this:\n  g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. g dvd w ^ CARD('a) mod v - monom 1 1", "by simp"], ["proof (state)\nthis:\n  g dvd w ^ CARD('a) mod v - monom 1 1\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "from this[unfolded ww]"], ["proof (chain)\npicking this:\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1", "have \"g dvd ?x ^ ?p ^ ?d mod v - ?x\""], ["proof (prove)\nusing this:\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1\n\ngoal (1 subgoal):\n 1. g dvd monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1", "."], ["proof (state)\nthis:\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "with gv"], ["proof (chain)\npicking this:\n  g dvd v\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1", "have \"g dvd (?x ^ ?p ^ ?d mod v - ?x) mod v\""], ["proof (prove)\nusing this:\n  g dvd v\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1\n\ngoal (1 subgoal):\n 1. g dvd (monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1) mod v", "by (metis dvd_mod)"], ["proof (state)\nthis:\n  g dvd (monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1) mod v\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "also"], ["proof (state)\nthis:\n  g dvd (monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1) mod v\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "have \"(?x ^ ?p ^ ?d mod v - ?x) mod v = (?x ^ ?p ^ ?d - ?x) mod v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1) mod v =\n    (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v", "by (metis mod_diff_left_eq)"], ["proof (state)\nthis:\n  (monom 1 1 ^ CARD('a) ^ Suc d mod v - monom 1 1) mod v =\n  (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "finally"], ["proof (chain)\npicking this:\n  g dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v", "have \"g dvd ?x ^ ?p ^ ?d - ?x\""], ["proof (prove)\nusing this:\n  g dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v\n\ngoal (1 subgoal):\n 1. g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "using gv"], ["proof (prove)\nusing this:\n  g dvd (monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1) mod v\n  g dvd v\n\ngoal (1 subgoal):\n 1. g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "by (rule dvd_mod_imp_dvd)"], ["proof (state)\nthis:\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "with ndvd"], ["proof (chain)\npicking this:\n  \\<not> g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1", "have False"], ["proof (prove)\nusing this:\n  \\<not> g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n  g dvd monom 1 1 ^ CARD('a) ^ Suc d - monom 1 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "}"], ["proof (state)\nthis:\n  Suc d < degree g \\<Longrightarrow> False\n\ngoal (4 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)\n 4. \\<And>g.\n       \\<lbrakk>irreducible g;\n        g dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc d", "with dg"], ["proof (chain)\npicking this:\n  d < degree g\n  Suc d < degree g \\<Longrightarrow> False", "show \"degree g = ?d\""], ["proof (prove)\nusing this:\n  d < degree g\n  Suc d < degree g \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. degree g = Suc d", "by presburger"], ["proof (state)\nthis:\n  degree g = Suc d\n\ngoal (3 subgoals):\n 1. Suc d \\<noteq> 0\n 2. degree (gcd (w ^ CARD('a) mod v - monom 1 1) v) \\<noteq> 0\n 3. monic (gcd (w ^ CARD('a) mod v - monom 1 1) v)", "qed (insert mon_g deg_g, auto)"], ["proof (state)\nthis:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i \\<noteq> 0 \\<and>\n  degree f \\<noteq> 0 \\<and>\n  monic f \\<and>\n  (\\<forall>g.\n      irreducible g \\<longrightarrow>\n      g dvd f \\<longrightarrow> degree g = i)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "case (2 f)"], ["proof (state)\nthis:\n  irreducible f\n  f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "note irr = 2(1)"], ["proof (state)\nthis:\n  irreducible f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from dvd_trans[OF 2(2) gv']"], ["proof (chain)\npicking this:\n  f dvd v", "have fv: \"f dvd v\""], ["proof (prove)\nusing this:\n  f dvd v\n\ngoal (1 subgoal):\n 1. f dvd v", "."], ["proof (state)\nthis:\n  f dvd v\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from fact[OF irr fv]"], ["proof (chain)\npicking this:\n  d < degree f", "have df: \"d < degree f\" \"degree f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  d < degree f\n\ngoal (1 subgoal):\n 1. d < degree f &&& degree f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  d < degree f\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "{"], ["proof (state)\nthis:\n  d < degree f\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "assume \"degree f = ?d\""], ["proof (state)\nthis:\n  degree f = Suc d\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from deg_d_dvd_g[OF irr fv this]"], ["proof (chain)\npicking this:\n  f dvd gcd (w ^ CARD('a) mod v - monom 1 1) v", "have fg: \"f dvd ?g\""], ["proof (prove)\nusing this:\n  f dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. f dvd gcd (w ^ CARD('a) mod v - monom 1 1) v", "."], ["proof (state)\nthis:\n  f dvd gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from gv"], ["proof (chain)\npicking this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v", "have id: \"v = (v div ?g) * ?g\""], ["proof (prove)\nusing this:\n  gcd (w ^ CARD('a) mod v - monom 1 1) v dvd v\n\ngoal (1 subgoal):\n 1. v =\n    v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n    gcd (w ^ CARD('a) mod v - monom 1 1) v", "by simp"], ["proof (state)\nthis:\n  v =\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n  gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from sfv id"], ["proof (chain)\npicking this:\n  square_free v\n  v =\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n  gcd (w ^ CARD('a) mod v - monom 1 1) v", "have \"square_free (v div ?g * ?g)\""], ["proof (prove)\nusing this:\n  square_free v\n  v =\n  v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n  gcd (w ^ CARD('a) mod v - monom 1 1) v\n\ngoal (1 subgoal):\n 1. square_free\n     (v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n      gcd (w ^ CARD('a) mod v - monom 1 1) v)", "by simp"], ["proof (state)\nthis:\n  square_free\n   (v div gcd (w ^ CARD('a) mod v - monom 1 1) v *\n    gcd (w ^ CARD('a) mod v - monom 1 1) v)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "from square_free_multD(1)[OF this 2(2) fg]"], ["proof (chain)\npicking this:\n  degree f = 0", "have \"degree f = 0\""], ["proof (prove)\nusing this:\n  degree f = 0\n\ngoal (1 subgoal):\n 1. degree f = 0", "."], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "with df"], ["proof (chain)\npicking this:\n  d < degree f\n  degree f \\<noteq> 0\n  degree f = 0", "have False"], ["proof (prove)\nusing this:\n  d < degree f\n  degree f \\<noteq> 0\n  degree f = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "}"], ["proof (state)\nthis:\n  degree f = Suc d \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>irreducible f;\n        f dvd v div gcd (w ^ CARD('a) mod v - monom 1 1) v\\<rbrakk>\n       \\<Longrightarrow> Suc d < degree f", "with df"], ["proof (chain)\npicking this:\n  d < degree f\n  degree f \\<noteq> 0\n  degree f = Suc d \\<Longrightarrow> False", "show \"?d < degree f\""], ["proof (prove)\nusing this:\n  d < degree f\n  degree f \\<noteq> 0\n  degree f = Suc d \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Suc d < degree f", "by presburger"], ["proof (state)\nthis:\n  Suc d < degree f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow>\n      i \\<noteq> 0 \\<and>\n      degree f \\<noteq> 0 \\<and>\n      monic f \\<and>\n      (\\<forall>g.\n          irreducible g \\<longrightarrow>\n          g dvd f \\<longrightarrow> degree g = i))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition distinct_degree_factorization \n  :: \"'a mod_ring poly \\<Rightarrow> (nat \\<times> 'a mod_ring poly) list\" where\n  \"distinct_degree_factorization f = \n     (if degree f = 1 then [(1,f)] else dist_degree_factorize_main f (monom 1 1) 0 [])\""], ["", "lemma distinct_degree_factorization: assumes \n  dist: \"distinct_degree_factorization f = facts\" and\n  u: \"square_free f\" and  \n  mon: \"monic f\" \nshows \"f = prod_list (map snd facts) \\<and> (\\<forall> i f. (i,f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "note dist = dist[unfolded distinct_degree_factorization_def]"], ["proof (state)\nthis:\n  (if degree f = 1 then [(1, f)]\n   else local.dist_degree_factorize_main f (monom 1 1) 0 []) =\n  facts\n\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "proof (cases \"degree f \\<le> 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. \\<not> degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "case False"], ["proof (state)\nthis:\n  \\<not> degree f \\<le> 1\n\ngoal (2 subgoals):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. \\<not> degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "hence \"degree f > 1\" and dist: \"dist_degree_factorize_main f (monom 1 1) 0 [] = facts\""], ["proof (prove)\nusing this:\n  \\<not> degree f \\<le> 1\n\ngoal (1 subgoal):\n 1. 1 < degree f &&&\n    local.dist_degree_factorize_main f (monom 1 1) 0 [] = facts", "using dist"], ["proof (prove)\nusing this:\n  \\<not> degree f \\<le> 1\n  (if degree f = 1 then [(1, f)]\n   else local.dist_degree_factorize_main f (monom 1 1) 0 []) =\n  facts\n\ngoal (1 subgoal):\n 1. 1 < degree f &&&\n    local.dist_degree_factorize_main f (monom 1 1) 0 [] = facts", "by auto"], ["proof (state)\nthis:\n  1 < degree f\n  local.dist_degree_factorize_main f (monom 1 1) 0 [] = facts\n\ngoal (2 subgoals):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. \\<not> degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "hence *: \"monom 1 (Suc 0) = monom 1 (Suc 0) mod f\""], ["proof (prove)\nusing this:\n  1 < degree f\n  local.dist_degree_factorize_main f (monom 1 1) 0 [] = facts\n\ngoal (1 subgoal):\n 1. monom 1 (Suc 0) = monom 1 (Suc 0) mod f", "by (simp add: degree_monom_eq mod_poly_less)"], ["proof (state)\nthis:\n  monom 1 (Suc 0) = monom 1 (Suc 0) mod f\n\ngoal (2 subgoals):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. \\<not> degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "by (rule dist_degree_factorize_main[OF dist _ u mon], insert *, auto simp: irreducible\\<^sub>d_def)"], ["proof (state)\nthis:\n  f = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n\ngoal (1 subgoal):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "case True"], ["proof (state)\nthis:\n  degree f \\<le> 1\n\ngoal (1 subgoal):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "hence \"degree f = 0 \\<or> degree f = 1\""], ["proof (prove)\nusing this:\n  degree f \\<le> 1\n\ngoal (1 subgoal):\n 1. degree f = 0 \\<or> degree f = 1", "by auto"], ["proof (state)\nthis:\n  degree f = 0 \\<or> degree f = 1\n\ngoal (1 subgoal):\n 1. degree f \\<le> 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  degree f = 0 \\<or> degree f = 1\n\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "assume \"degree f = 0\""], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "with mon"], ["proof (chain)\npicking this:\n  monic f\n  degree f = 0", "have f: \"f = 1\""], ["proof (prove)\nusing this:\n  monic f\n  degree f = 0\n\ngoal (1 subgoal):\n 1. f = 1", "using monic_degree_0"], ["proof (prove)\nusing this:\n  monic f\n  degree f = 0\n  monic ?p \\<Longrightarrow> (degree ?p = 0) = (?p = 1)\n\ngoal (1 subgoal):\n 1. f = 1", "by blast"], ["proof (state)\nthis:\n  f = 1\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "hence \"facts = []\""], ["proof (prove)\nusing this:\n  f = 1\n\ngoal (1 subgoal):\n 1. facts = []", "using dist"], ["proof (prove)\nusing this:\n  f = 1\n  (if degree f = 1 then [(1, f)]\n   else local.dist_degree_factorize_main f (monom 1 1) 0 []) =\n  facts\n\ngoal (1 subgoal):\n 1. facts = []", "unfolding dist_degree_factorize_main.simps[of _ _ 0]"], ["proof (prove)\nusing this:\n  f = 1\n  (if degree f = 1 then [(1, f)]\n   else if f = 1 then []\n        else if degree f < 0 + 0 then [(degree f, f)]\n             else let w = monom 1 1 ^ CARD('a) mod f; d = Suc 0;\n                      gd = gcd (w - monom 1 1) f\n                  in if gd = 1\n                     then local.dist_degree_factorize_main f w d []\n                     else let v' = f div gd\n                          in local.dist_degree_factorize_main v' (w mod v')\n                              d [(d, gd)]) =\n  facts\n\ngoal (1 subgoal):\n 1. facts = []", "by auto"], ["proof (state)\nthis:\n  facts = []\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n 2. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  facts = []\n\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "using f"], ["proof (prove)\nusing this:\n  facts = []\n  f = 1\n\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "by auto"], ["proof (state)\nthis:\n  f = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n\ngoal (1 subgoal):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "assume deg: \"degree f = 1\""], ["proof (state)\nthis:\n  degree f = 1\n\ngoal (1 subgoal):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "hence facts: \"facts = [(1,f)]\""], ["proof (prove)\nusing this:\n  degree f = 1\n\ngoal (1 subgoal):\n 1. facts = [(1, f)]", "using dist"], ["proof (prove)\nusing this:\n  degree f = 1\n  (if degree f = 1 then [(1, f)]\n   else local.dist_degree_factorize_main f (monom 1 1) 0 []) =\n  facts\n\ngoal (1 subgoal):\n 1. facts = [(1, f)]", "by auto"], ["proof (state)\nthis:\n  facts = [(1, f)]\n\ngoal (1 subgoal):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list (map snd facts) \\<and>\n    (\\<forall>i f.\n        (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)", "unfolding facts factors_of_same_degree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list (map snd [(1, f)]) \\<and>\n    (\\<forall>i fa.\n        (i, fa) \\<in> set [(1, f)] \\<longrightarrow>\n        i \\<noteq> 0 \\<and>\n        degree fa \\<noteq> 0 \\<and>\n        monic fa \\<and>\n        (\\<forall>g.\n            irreducible g \\<longrightarrow>\n            g dvd fa \\<longrightarrow> degree g = i))", "proof (intro conjI allI impI; clarsimp)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < degree f\n 2. monic f\n 3. \\<And>g.\n       \\<lbrakk>irreducible g; g dvd f\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc 0", "fix g"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < degree f\n 2. monic f\n 3. \\<And>g.\n       \\<lbrakk>irreducible g; g dvd f\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc 0", "assume \"irreducible g\" \"g dvd f\""], ["proof (state)\nthis:\n  irreducible g\n  g dvd f\n\ngoal (3 subgoals):\n 1. 0 < degree f\n 2. monic f\n 3. \\<And>g.\n       \\<lbrakk>irreducible g; g dvd f\\<rbrakk>\n       \\<Longrightarrow> degree g = Suc 0", "thus \"degree g = Suc 0\""], ["proof (prove)\nusing this:\n  irreducible g\n  g dvd f\n\ngoal (1 subgoal):\n 1. degree g = Suc 0", "using deg divides_degree[of g f]"], ["proof (prove)\nusing this:\n  irreducible g\n  g dvd f\n  degree f = 1\n  g dvd f \\<Longrightarrow> degree g \\<le> degree f \\<or> f = 0\n\ngoal (1 subgoal):\n 1. degree g = Suc 0", "by (auto simp: irreducible\\<^sub>d_def)"], ["proof (state)\nthis:\n  degree g = Suc 0\n\ngoal (2 subgoals):\n 1. 0 < degree f\n 2. monic f", "qed (insert mon deg, auto)"], ["proof (state)\nthis:\n  f = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = prod_list (map snd facts) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set facts \\<longrightarrow> factors_of_same_degree i f)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}