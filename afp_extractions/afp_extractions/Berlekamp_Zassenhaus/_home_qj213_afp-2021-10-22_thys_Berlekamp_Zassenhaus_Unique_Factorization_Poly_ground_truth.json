{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Unique_Factorization_Poly.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma ff_list_pairs: \n  \"\\<exists> xs. X = map (\\<lambda> (x,y). Fraction_Field.Fract x y) xs \\<and> 0 \\<notin> snd ` set xs\"", "lemma divides_ff_to_fract[simp]: \"divides_ff (to_fract x) (to_fract y) \\<longleftrightarrow> x dvd y\"", "lemma\n  shows divides_ff_mult_cancel_left[simp]: \"divides_ff (z * x) (z * y) \\<longleftrightarrow> z = 0 \\<or> divides_ff x y\"\n    and divides_ff_mult_cancel_right[simp]: \"divides_ff (x * z) (y * z) \\<longleftrightarrow> z = 0 \\<or> divides_ff x y\"", "lemma gcd_ff_list_exists: \"\\<exists> g. gcd_ff_list (X :: 'a::ufd fract list) g\"", "lemma some_gcd_ff_list: \"gcd_ff_list xs (some_gcd_ff_list xs)\"", "lemma some_gcd_ff_list_divides: \"x \\<in> set xs \\<Longrightarrow> divides_ff (some_gcd_ff_list xs) x\"", "lemma some_gcd_ff_list_greatest: \"(\\<forall>x \\<in> set xs. divides_ff d x) \\<Longrightarrow> divides_ff d (some_gcd_ff_list xs)\"", "lemma divides_ff_refl[simp]: \"divides_ff x x\"", "lemma divides_ff_trans:\n  \"divides_ff x y \\<Longrightarrow> divides_ff y z \\<Longrightarrow> divides_ff x z\"", "lemma divides_ff_mult_right: \"a \\<noteq> 0 \\<Longrightarrow> divides_ff (x * inverse a) y \\<Longrightarrow> divides_ff x (a * y)\"", "lemma eq_dffI[intro]: \"divides_ff x y \\<Longrightarrow> divides_ff y x \\<Longrightarrow> x =dff y\"", "lemma eq_dff_refl[simp]: \"x =dff x\"", "lemma eq_dff_sym: \"x =dff y \\<Longrightarrow> y =dff x\"", "lemma eq_dff_trans[trans]: \"x =dff y \\<Longrightarrow> y =dff z \\<Longrightarrow> x =dff z\"", "lemma eq_dff_cancel_right[simp]: \"x * y =dff x * z \\<longleftrightarrow> x = 0 \\<or> y =dff z\"", "lemma eq_dff_mult_right_trans[trans]: \"x =dff y * z \\<Longrightarrow> z =dff u \\<Longrightarrow> x =dff y * u\"", "lemma some_gcd_ff_list_smult: \"a \\<noteq> 0 \\<Longrightarrow> some_gcd_ff_list (map ((*) a) xs) =dff a * some_gcd_ff_list xs\"", "lemma content_ff_iff: \"divides_ff x (content_ff p) \\<longleftrightarrow> (\\<forall> c \\<in> set (coeffs p). divides_ff x c)\" (is \"?l = ?r\")", "lemma content_ff_divides_ff: \"x \\<in> set (coeffs p) \\<Longrightarrow> divides_ff (content_ff p) x\"", "lemma content_ff_0[simp]: \"content_ff 0 = 0\"", "lemma content_ff_0_iff[simp]: \"(content_ff p = 0) = (p = 0)\"", "lemma content_ff_eq_dff_nonzero: \"content_ff p =dff x \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0\"", "lemma content_ff_smult: \"content_ff (smult (a::'a::ufd fract) p) =dff a * content_ff p\"", "lemma smult_normalize_content_ff: \"smult (content_ff p) (normalize_content_ff p) = p\"", "lemma content_ff_normalize_content_ff_1: assumes p0: \"p \\<noteq> 0\" \n  shows \"content_ff (normalize_content_ff p) =dff 1\"", "lemma content_ff_to_fract: assumes \"set (coeffs p) \\<subseteq> range to_fract\"\n  shows \"content_ff p \\<in> range to_fract\"", "lemma content_ff_map_poly_to_fract: \"content_ff (map_poly to_fract (p :: 'a :: ufd poly)) \\<in> range to_fract\"", "lemma range_coeffs_to_fract: assumes \"set (coeffs p) \\<subseteq> range to_fract\" \n  shows \"\\<exists> m. coeff p i = to_fract m\"", "lemma divides_ff_coeff: assumes \"set (coeffs p) \\<subseteq> range to_fract\" and \"divides_ff (to_fract n) (coeff p i)\"\n  shows \"\\<exists> m. coeff p i = to_fract n * to_fract m\"", "lemma inv_embed[simp]: \"inv_embed (to_fract x) = x\"", "lemma inv_embed_0[simp]: \"inv_embed 0 = 0\"", "lemma range_to_fract_embed_poly: assumes \"set (coeffs p) \\<subseteq> range to_fract\"\n  shows \"p = map_poly to_fract (map_poly inv_embed p)\"", "lemma content_ff_to_fract_coeffs_to_fract: assumes \"content_ff p \\<in> range to_fract\"\n  shows \"set (coeffs p) \\<subseteq> range to_fract\"", "lemma content_ff_1_coeffs_to_fract: assumes \"content_ff p =dff 1\"\n  shows \"set (coeffs p) \\<subseteq> range to_fract\"", "lemma gauss_lemma:\n  fixes p q :: \"'a :: ufd fract poly\"\n  shows \"content_ff (p * q) =dff content_ff p * content_ff q\"", "lemma factorization_to_fract:\n  assumes q: \"q \\<noteq> 0\" and factor: \"map_poly to_fract (p :: 'a :: ufd poly) = q * r\"\n  shows \"\\<exists> q' r' c. c \\<noteq> 0 \\<and> q = smult c (map_poly to_fract q') \\<and>\n    r = smult (inverse c) (map_poly to_fract r') \\<and>\n    content_ff_ff q' =dff 1 \\<and> p = q' * r'\"", "lemma irreducible_PM_M_PFM:\n  assumes irr: \"irreducible p\"\n  shows \"degree p = 0 \\<and> irreducible (coeff p 0) \\<or> \n  degree p \\<noteq> 0 \\<and> irreducible (map_poly to_fract p) \\<and> content_ff_ff p =dff 1\"", "lemma irreducible_M_PM:\n  fixes p :: \"'a :: ufd poly\" assumes 0: \"degree p = 0\" and irr: \"irreducible (coeff p 0)\"\n  shows \"irreducible p\"", "lemma primitive_irreducible_imp_degree:\n \"primitive (p::'a::{semiring_gcd,idom} poly) \\<Longrightarrow> irreducible p \\<Longrightarrow> degree p > 0\"", "lemma irreducible_degree_field:\n  fixes p :: \"'a :: field poly\" assumes \"irreducible p\"\n  shows \"degree p > 0\"", "lemma irreducible_PFM_PM: assumes\n  irr: \"irreducible (map_poly to_fract p)\" and ct: \"content_ff_ff p =dff 1\"\n  shows \"irreducible p\"", "lemma irreducible_cases: \"irreducible p \\<longleftrightarrow>\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or> \n  degree p \\<noteq> 0 \\<and> irreducible (map_poly to_fract p) \\<and> content_ff_ff p =dff 1\"", "lemma dvd_PM_iff: \"p dvd q \\<longleftrightarrow> divides_ff (content_ff_ff p) (content_ff_ff q) \\<and> \n  map_poly to_fract p dvd map_poly to_fract q\"", "lemma factorial_monoid_poly: \"factorial_monoid (mk_monoid :: 'a :: ufd poly monoid)\"", "lemma primitive_iff_some_content_dvd_1:\n  fixes f :: \"'a :: ufd poly\" (* gcd_condition suffices... *)\n  shows \"primitive f \\<longleftrightarrow> some_gcd.listgcd (coeffs f) dvd 1\" (is \"_ \\<longleftrightarrow> ?c dvd 1\")"], "translations": [["", "lemma ff_list_pairs: \n  \"\\<exists> xs. X = map (\\<lambda> (x,y). Fraction_Field.Fract x y) xs \\<and> 0 \\<notin> snd ` set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs \\<and>\n       (0::'a) \\<notin> snd ` set xs", "proof (induct X)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       [] =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xs \\<and>\n       (0::'a) \\<notin> snd ` set xs\n 2. \\<And>a X.\n       \\<exists>xs.\n          X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs \\<Longrightarrow>\n       \\<exists>xs.\n          a # X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs", "case (Cons a X)"], ["proof (state)\nthis:\n  \\<exists>xs.\n     X =\n     map (\\<lambda>a.\n             case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n      xs \\<and>\n     (0::'a) \\<notin> snd ` set xs\n\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       [] =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xs \\<and>\n       (0::'a) \\<notin> snd ` set xs\n 2. \\<And>a X.\n       \\<exists>xs.\n          X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs \\<Longrightarrow>\n       \\<exists>xs.\n          a # X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs", "from Cons(1)"], ["proof (chain)\npicking this:\n  \\<exists>xs.\n     X =\n     map (\\<lambda>a.\n             case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n      xs \\<and>\n     (0::'a) \\<notin> snd ` set xs", "obtain xs where X: \"X = map (\\<lambda> (x,y). Fraction_Field.Fract x y)  xs\" and xs: \"0 \\<notin> snd ` set xs\""], ["proof (prove)\nusing this:\n  \\<exists>xs.\n     X =\n     map (\\<lambda>a.\n             case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n      xs \\<and>\n     (0::'a) \\<notin> snd ` set xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs;\n         (0::'a) \\<notin> snd ` set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs\n  (0::'a) \\<notin> snd ` set xs\n\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       [] =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xs \\<and>\n       (0::'a) \\<notin> snd ` set xs\n 2. \\<And>a X.\n       \\<exists>xs.\n          X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs \\<Longrightarrow>\n       \\<exists>xs.\n          a # X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs", "obtain x y where a: \"a = Fraction_Field.Fract x y\" and y: \"y \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>a = Fraction_Field.Fract x y; y \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases a, auto)"], ["proof (state)\nthis:\n  a = Fraction_Field.Fract x y\n  y \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       [] =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xs \\<and>\n       (0::'a) \\<notin> snd ` set xs\n 2. \\<And>a X.\n       \\<exists>xs.\n          X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs \\<Longrightarrow>\n       \\<exists>xs.\n          a # X =\n          map (\\<lambda>a.\n                  case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n           xs \\<and>\n          (0::'a) \\<notin> snd ` set xs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       a # X =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xs \\<and>\n       (0::'a) \\<notin> snd ` set xs", "unfolding X a"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xsa.\n       Fraction_Field.Fract x y #\n       map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xsa \\<and>\n       (0::'a) \\<notin> snd ` set xsa", "using xs y"], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> snd ` set xs\n  y \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>xsa.\n       Fraction_Field.Fract x y #\n       map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xsa \\<and>\n       (0::'a) \\<notin> snd ` set xsa", "by (intro exI[of _ \"(x,y) # xs\"], auto)"], ["proof (state)\nthis:\n  \\<exists>xs.\n     a # X =\n     map (\\<lambda>a.\n             case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n      xs \\<and>\n     (0::'a) \\<notin> snd ` set xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       [] =\n       map (\\<lambda>a.\n               case a of (x, y) \\<Rightarrow> Fraction_Field.Fract x y)\n        xs \\<and>\n       (0::'a) \\<notin> snd ` set xs", "qed auto"], ["", "lemma divides_ff_to_fract[simp]: \"divides_ff (to_fract x) (to_fract y) \\<longleftrightarrow> x dvd y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (to_fract x) (to_fract y) = (x dvd y)", "unfolding divides_ff_def dvd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. to_fract y = to_fract x * to_fract r) =\n    (\\<exists>k. y = x * k)", "by (simp add: to_fract_def eq_fract(1) mult.commute)"], ["", "lemma\n  shows divides_ff_mult_cancel_left[simp]: \"divides_ff (z * x) (z * y) \\<longleftrightarrow> z = 0 \\<or> divides_ff x y\"\n    and divides_ff_mult_cancel_right[simp]: \"divides_ff (x * z) (y * z) \\<longleftrightarrow> z = 0 \\<or> divides_ff x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (z * x) (z * y) = (z = 0 \\<or> divides_ff x y) &&&\n    divides_ff (x * z) (y * z) = (z = 0 \\<or> divides_ff x y)", "unfolding divides_ff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. z * y = z * x * to_fract r) =\n    (z = 0 \\<or> (\\<exists>r. y = x * to_fract r)) &&&\n    (\\<exists>r. y * z = x * z * to_fract r) =\n    (z = 0 \\<or> (\\<exists>r. y = x * to_fract r))", "by auto"], ["", "definition gcd_ff_list :: \"'a::ufd fract list \\<Rightarrow> 'a fract \\<Rightarrow> bool\" where\n  \"gcd_ff_list X g = (\n     (\\<forall> x \\<in> set X. divides_ff g x) \\<and> \n     (\\<forall> d. (\\<forall> x \\<in> set X. divides_ff d x) \\<longrightarrow> divides_ff d g))\""], ["", "lemma gcd_ff_list_exists: \"\\<exists> g. gcd_ff_list (X :: 'a::ufd fract list) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "interpret some_gcd: idom_gcd \"(*)\" \"1 :: 'a\" \"(+)\" 0 \"(-)\" uminus some_gcd\n    rewrites \"dvd.dvd ((*)) = (dvd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus some_gcd &&&\n    dvd.dvd (*) = (dvd)", "by (unfold_locales, auto simp: dvd_rewrites)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "from ff_list_pairs[of X]"], ["proof (chain)\npicking this:\n  \\<exists>xs.\n     X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs \\<and>\n     (0::'a) \\<notin> snd ` set xs", "obtain xs where X: \"X = map (\\<lambda> (x,y). Fraction_Field.Fract x y) xs\"\n    and xs: \"0 \\<notin> snd ` set xs\""], ["proof (prove)\nusing this:\n  \\<exists>xs.\n     X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs \\<and>\n     (0::'a) \\<notin> snd ` set xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs;\n         (0::'a) \\<notin> snd ` set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  X = map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs\n  (0::'a) \\<notin> snd ` set xs\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "define r where \"r \\<equiv> prod_list (map snd xs)\""], ["proof (state)\nthis:\n  r \\<equiv> prod_list (map snd xs)\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "have r: \"r \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<noteq> (0::'a)", "unfolding r_def prod_list_zero_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<notin> set (map snd xs)", "using xs"], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> snd ` set xs\n\ngoal (1 subgoal):\n 1. (0::'a) \\<notin> set (map snd xs)", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "define ys where \"ys \\<equiv> map (\\<lambda> (x,y). x * prod_list (remove1 y (map snd xs))) xs\""], ["proof (state)\nthis:\n  ys \\<equiv>\n  map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs))) xs\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "{"], ["proof (state)\nthis:\n  ys \\<equiv>\n  map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs))) xs\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "assume \"i < length X\""], ["proof (state)\nthis:\n  i < length X\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "hence i: \"i < length xs\""], ["proof (prove)\nusing this:\n  i < length X\n\ngoal (1 subgoal):\n 1. i < length xs", "unfolding X"], ["proof (prove)\nusing this:\n  i < length (map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs)\n\ngoal (1 subgoal):\n 1. i < length xs", "by auto"], ["proof (state)\nthis:\n  i < length xs\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "obtain x y where xsi: \"xs ! i = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. xs ! i = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  xs ! i = (x, y)\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "with i"], ["proof (chain)\npicking this:\n  i < length xs\n  xs ! i = (x, y)", "have \"(x,y) \\<in> set xs\""], ["proof (prove)\nusing this:\n  i < length xs\n  xs ! i = (x, y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set xs", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  i < length xs\n  xs ! i = (x, y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {xs ! i |i. i < length xs}", "by force"], ["proof (state)\nthis:\n  (x, y) \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "hence y_mem: \"y \\<in> set (map snd xs)\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> set xs\n\ngoal (1 subgoal):\n 1. y \\<in> set (map snd xs)", "by force"], ["proof (state)\nthis:\n  y \\<in> set (map snd xs)\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "with xs"], ["proof (chain)\npicking this:\n  (0::'a) \\<notin> snd ` set xs\n  y \\<in> set (map snd xs)", "have y: \"y \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> snd ` set xs\n  y \\<in> set (map snd xs)\n\ngoal (1 subgoal):\n 1. y \\<noteq> (0::'a)", "by force"], ["proof (state)\nthis:\n  y \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "from i"], ["proof (chain)\npicking this:\n  i < length xs", "have id1: \"ys ! i = x * prod_list (remove1 y (map snd xs))\""], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. ys ! i = x * prod_list (remove1 y (map snd xs))", "unfolding ys_def"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs))) xs ! i =\n    x * prod_list (remove1 y (map snd xs))", "using xsi"], ["proof (prove)\nusing this:\n  i < length xs\n  xs ! i = (x, y)\n\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs))) xs ! i =\n    x * prod_list (remove1 y (map snd xs))", "by auto"], ["proof (state)\nthis:\n  ys ! i = x * prod_list (remove1 y (map snd xs))\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "from i xsi"], ["proof (chain)\npicking this:\n  i < length xs\n  xs ! i = (x, y)", "have id2: \"X ! i = Fraction_Field.Fract x y\""], ["proof (prove)\nusing this:\n  i < length xs\n  xs ! i = (x, y)\n\ngoal (1 subgoal):\n 1. X ! i = Fraction_Field.Fract x y", "unfolding X"], ["proof (prove)\nusing this:\n  i < length xs\n  xs ! i = (x, y)\n\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs ! i =\n    Fraction_Field.Fract x y", "by auto"], ["proof (state)\nthis:\n  X ! i = Fraction_Field.Fract x y\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "have lp: \"prod_list (remove1 y (map snd xs)) * y = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (remove1 y (map snd xs)) * y = r", "unfolding r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (remove1 y (map snd xs)) * y = prod_list (map snd xs)", "by (rule prod_list_remove1[OF y_mem])"], ["proof (state)\nthis:\n  prod_list (remove1 y (map snd xs)) * y = r\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "have \"ys ! i \\<in> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys ! i \\<in> set ys", "using i"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. ys ! i \\<in> set ys", "unfolding ys_def"], ["proof (prove)\nusing this:\n  i < length xs\n\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs))) xs ! i\n    \\<in> set (map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs)))\n                xs)", "by auto"], ["proof (state)\nthis:\n  ys ! i \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "moreover"], ["proof (state)\nthis:\n  ys ! i \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "have \"to_fract (ys ! i) = to_fract r * (X ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (ys ! i) = to_fract r * X ! i", "unfolding id1 id2 to_fract_def mult_fract"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract (x * prod_list (remove1 y (map snd xs))) (1::'a) =\n    Fraction_Field.Fract (r * x) ((1::'a) * y)", "by (subst eq_fract(1), force, force simp: y, simp add: lp)"], ["proof (state)\nthis:\n  to_fract (ys ! i) = to_fract r * X ! i\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "ultimately"], ["proof (chain)\npicking this:\n  ys ! i \\<in> set ys\n  to_fract (ys ! i) = to_fract r * X ! i", "have \"ys ! i \\<in> set ys\" \"to_fract (ys ! i) = to_fract r * (X ! i)\""], ["proof (prove)\nusing this:\n  ys ! i \\<in> set ys\n  to_fract (ys ! i) = to_fract r * X ! i\n\ngoal (1 subgoal):\n 1. ys ! i \\<in> set ys &&& to_fract (ys ! i) = to_fract r * X ! i", "."], ["proof (state)\nthis:\n  ys ! i \\<in> set ys\n  to_fract (ys ! i) = to_fract r * X ! i\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "}"], ["proof (state)\nthis:\n  ?i3 < length X \\<Longrightarrow> ys ! ?i3 \\<in> set ys\n  ?i3 < length X \\<Longrightarrow>\n  to_fract (ys ! ?i3) = to_fract r * X ! ?i3\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "note ys = this"], ["proof (state)\nthis:\n  ?i3 < length X \\<Longrightarrow> ys ! ?i3 \\<in> set ys\n  ?i3 < length X \\<Longrightarrow>\n  to_fract (ys ! ?i3) = to_fract r * X ! ?i3\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "define G where \"G \\<equiv> some_gcd.listgcd ys\""], ["proof (state)\nthis:\n  G \\<equiv> some_gcd.listgcd ys\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "define g where \"g \\<equiv> to_fract G * Fraction_Field.Fract 1 r\""], ["proof (state)\nthis:\n  g \\<equiv> to_fract G * Fraction_Field.Fract (1::'a) r\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "have len: \"length X = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length X = length ys", "unfolding X ys_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (\\<lambda>(x, y). Fraction_Field.Fract x y) xs) =\n    length\n     (map (\\<lambda>(x, y). x * prod_list (remove1 y (map snd xs))) xs)", "by auto"], ["proof (state)\nthis:\n  length X = length ys\n\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. gcd_ff_list X g", "proof (rule exI[of _ g], unfold gcd_ff_list_def, intro ballI conjI impI allI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "assume \"x \\<in> set X\""], ["proof (state)\nthis:\n  x \\<in> set X\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "then"], ["proof (chain)\npicking this:\n  x \\<in> set X", "obtain i where i: \"i < length X\" and x: \"x = X ! i\""], ["proof (prove)\nusing this:\n  x \\<in> set X\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length X; x = X ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  x \\<in> {X ! i |i. i < length X}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length X; x = X ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length X\n  x = X ! i\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "from ys[OF i]"], ["proof (chain)\npicking this:\n  ys ! i \\<in> set ys\n  to_fract (ys ! i) = to_fract r * X ! i", "have id: \"to_fract (ys ! i) = to_fract r * x\" \n      and ysi: \"ys ! i \\<in> set ys\""], ["proof (prove)\nusing this:\n  ys ! i \\<in> set ys\n  to_fract (ys ! i) = to_fract r * X ! i\n\ngoal (1 subgoal):\n 1. to_fract (ys ! i) = to_fract r * x &&& ys ! i \\<in> set ys", "unfolding x"], ["proof (prove)\nusing this:\n  ys ! i \\<in> set ys\n  to_fract (ys ! i) = to_fract r * X ! i\n\ngoal (1 subgoal):\n 1. to_fract (ys ! i) = to_fract r * X ! i &&& ys ! i \\<in> set ys", "by auto"], ["proof (state)\nthis:\n  to_fract (ys ! i) = to_fract r * x\n  ys ! i \\<in> set ys\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "from some_gcd.listgcd[OF ysi]"], ["proof (chain)\npicking this:\n  some_gcd.listgcd ys dvd ys ! i", "have \"G dvd ys ! i\""], ["proof (prove)\nusing this:\n  some_gcd.listgcd ys dvd ys ! i\n\ngoal (1 subgoal):\n 1. G dvd ys ! i", "unfolding G_def"], ["proof (prove)\nusing this:\n  some_gcd.listgcd ys dvd ys ! i\n\ngoal (1 subgoal):\n 1. some_gcd.listgcd ys dvd ys ! i", "."], ["proof (state)\nthis:\n  G dvd ys ! i\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "then"], ["proof (chain)\npicking this:\n  G dvd ys ! i", "obtain d where ysi: \"ys ! i = G * d\""], ["proof (prove)\nusing this:\n  G dvd ys ! i\n\ngoal (1 subgoal):\n 1. (\\<And>d. ys ! i = G * d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. ys ! i = G * k\n\ngoal (1 subgoal):\n 1. (\\<And>d. ys ! i = G * d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ys ! i = G * d\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "have \"to_fract d * (to_fract G * Fraction_Field.Fract 1 r) = x * (to_fract r * Fraction_Field.Fract 1 r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) =\n    x * (to_fract r * Fraction_Field.Fract (1::'a) r)", "using id[unfolded ysi]"], ["proof (prove)\nusing this:\n  to_fract (G * d) = to_fract r * x\n\ngoal (1 subgoal):\n 1. to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) =\n    x * (to_fract r * Fraction_Field.Fract (1::'a) r)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) =\n  x * (to_fract r * Fraction_Field.Fract (1::'a) r)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "also"], ["proof (state)\nthis:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) =\n  x * (to_fract r * Fraction_Field.Fract (1::'a) r)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "have \"\\<dots> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * (to_fract r * Fraction_Field.Fract (1::'a) r) = x", "using r"], ["proof (prove)\nusing this:\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x * (to_fract r * Fraction_Field.Fract (1::'a) r) = x", "unfolding to_fract_def"], ["proof (prove)\nusing this:\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x * (Fraction_Field.Fract r (1::'a) * Fraction_Field.Fract (1::'a) r) =\n    x", "by (simp add: eq_fract One_fract_def)"], ["proof (state)\nthis:\n  x * (to_fract r * Fraction_Field.Fract (1::'a) r) = x\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "finally"], ["proof (chain)\npicking this:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) = x", "have \"to_fract d * (to_fract G * Fraction_Field.Fract 1 r) = x\""], ["proof (prove)\nusing this:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) = x\n\ngoal (1 subgoal):\n 1. to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) = x", "by simp"], ["proof (state)\nthis:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) = x\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> set X \\<Longrightarrow> divides_ff g x\n 2. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "thus \"divides_ff g x\""], ["proof (prove)\nusing this:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) = x\n\ngoal (1 subgoal):\n 1. divides_ff g x", "unfolding divides_ff_def g_def"], ["proof (prove)\nusing this:\n  to_fract d * (to_fract G * Fraction_Field.Fract (1::'a) r) = x\n\ngoal (1 subgoal):\n 1. \\<exists>ra.\n       x = to_fract G * Fraction_Field.Fract (1::'a) r * to_fract ra", "by (intro exI[of _ d], auto)"], ["proof (state)\nthis:\n  divides_ff g x\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "assume \"\\<forall>x \\<in> set X. divides_ff d x\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>set X. divides_ff d x\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "hence \"Ball ((\\<lambda> x. to_fract r * x) ` set X) ( divides_ff (to_fract r * d))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set X. divides_ff d x\n\ngoal (1 subgoal):\n 1. Ball ((*) (to_fract r) ` set X) (divides_ff (to_fract r * d))", "by simp"], ["proof (state)\nthis:\n  Ball ((*) (to_fract r) ` set X) (divides_ff (to_fract r * d))\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "also"], ["proof (state)\nthis:\n  Ball ((*) (to_fract r) ` set X) (divides_ff (to_fract r * d))\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "have \"(\\<lambda> x. to_fract r * x) ` set X = to_fract ` set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (*) (to_fract r) ` set X = to_fract ` set ys", "unfolding set_conv_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. (*) (to_fract r) ` {X ! i |i. i < length X} =\n    to_fract ` {ys ! i |i. i < length ys}", "using ys len"], ["proof (prove)\nusing this:\n  ?i3 < length X \\<Longrightarrow> ys ! ?i3 \\<in> set ys\n  ?i3 < length X \\<Longrightarrow>\n  to_fract (ys ! ?i3) = to_fract r * X ! ?i3\n  length X = length ys\n\ngoal (1 subgoal):\n 1. (*) (to_fract r) ` {X ! i |i. i < length X} =\n    to_fract ` {ys ! i |i. i < length ys}", "by force"], ["proof (state)\nthis:\n  (*) (to_fract r) ` set X = to_fract ` set ys\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "finally"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>to_fract ` set ys. divides_ff (to_fract r * d) a", "have dvd: \"Ball (set ys) (\\<lambda> y. divides_ff (to_fract r * d) (to_fract y))\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>to_fract ` set ys. divides_ff (to_fract r * d) a\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set ys. divides_ff (to_fract r * d) (to_fract y)", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. divides_ff (to_fract r * d) (to_fract y)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "obtain nd dd where d: \"d = Fraction_Field.Fract nd dd\" and dd: \"dd \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nd dd.\n        \\<lbrakk>d = Fraction_Field.Fract nd dd;\n         dd \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases d, auto)"], ["proof (state)\nthis:\n  d = Fraction_Field.Fract nd dd\n  dd \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "{"], ["proof (state)\nthis:\n  d = Fraction_Field.Fract nd dd\n  dd \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "assume \"y \\<in> set ys\""], ["proof (state)\nthis:\n  y \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "hence \"divides_ff (to_fract r * d) (to_fract y)\""], ["proof (prove)\nusing this:\n  y \\<in> set ys\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract r * d) (to_fract y)", "using dvd"], ["proof (prove)\nusing this:\n  y \\<in> set ys\n  \\<forall>y\\<in>set ys. divides_ff (to_fract r * d) (to_fract y)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract r * d) (to_fract y)", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract r * d) (to_fract y)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "from this[unfolded divides_ff_def d to_fract_def mult_fract]"], ["proof (chain)\npicking this:\n  \\<exists>ra.\n     Fraction_Field.Fract y (1::'a) =\n     Fraction_Field.Fract (r * nd * ra) ((1::'a) * dd * (1::'a))", "obtain ra where \"Fraction_Field.Fract y 1 = Fraction_Field.Fract (r * nd * ra) dd\""], ["proof (prove)\nusing this:\n  \\<exists>ra.\n     Fraction_Field.Fract y (1::'a) =\n     Fraction_Field.Fract (r * nd * ra) ((1::'a) * dd * (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>ra.\n        Fraction_Field.Fract y (1::'a) =\n        Fraction_Field.Fract (r * nd * ra) dd \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Fraction_Field.Fract y (1::'a) = Fraction_Field.Fract (r * nd * ra) dd\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "hence \"y * dd = ra * (r * nd)\""], ["proof (prove)\nusing this:\n  Fraction_Field.Fract y (1::'a) = Fraction_Field.Fract (r * nd * ra) dd\n\ngoal (1 subgoal):\n 1. y * dd = ra * (r * nd)", "by (simp add: eq_fract dd)"], ["proof (state)\nthis:\n  y * dd = ra * (r * nd)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "hence \"r * nd dvd y * dd\""], ["proof (prove)\nusing this:\n  y * dd = ra * (r * nd)\n\ngoal (1 subgoal):\n 1. r * nd dvd y * dd", "by auto"], ["proof (state)\nthis:\n  r * nd dvd y * dd\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "}"], ["proof (state)\nthis:\n  ?y3 \\<in> set ys \\<Longrightarrow> r * nd dvd ?y3 * dd\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "hence \"r * nd dvd some_gcd.listgcd ys * dd\""], ["proof (prove)\nusing this:\n  ?y3 \\<in> set ys \\<Longrightarrow> r * nd dvd ?y3 * dd\n\ngoal (1 subgoal):\n 1. r * nd dvd some_gcd.listgcd ys * dd", "by (rule some_gcd.listgcd_greatest_mult)"], ["proof (state)\nthis:\n  r * nd dvd some_gcd.listgcd ys * dd\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "hence \"divides_ff (to_fract r * d) (to_fract G)\""], ["proof (prove)\nusing this:\n  r * nd dvd some_gcd.listgcd ys * dd\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract r * d) (to_fract G)", "unfolding to_fract_def d mult_fract\n      G_def divides_ff_def"], ["proof (prove)\nusing this:\n  r * nd dvd some_gcd.listgcd ys * dd\n\ngoal (1 subgoal):\n 1. \\<exists>ra.\n       Fraction_Field.Fract (some_gcd.listgcd ys) (1::'a) =\n       Fraction_Field.Fract (r * nd * ra) ((1::'a) * dd * (1::'a))", "by (auto simp add: eq_fract dd dvd_def)"], ["proof (state)\nthis:\n  divides_ff (to_fract r * d) (to_fract G)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "also"], ["proof (state)\nthis:\n  divides_ff (to_fract r * d) (to_fract G)\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "have \"to_fract G = to_fract r * g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract G = to_fract r * g", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract G = to_fract r * (to_fract G * Fraction_Field.Fract (1::'a) r)", "using r"], ["proof (prove)\nusing this:\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. to_fract G = to_fract r * (to_fract G * Fraction_Field.Fract (1::'a) r)", "by (auto simp: to_fract_def eq_fract)"], ["proof (state)\nthis:\n  to_fract G = to_fract r * g\n\ngoal (1 subgoal):\n 1. \\<And>d. Ball (set X) (divides_ff d) \\<Longrightarrow> divides_ff d g", "finally"], ["proof (chain)\npicking this:\n  divides_ff (to_fract r * d) (to_fract r * g)", "show \"divides_ff d g\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract r * d) (to_fract r * g)\n\ngoal (1 subgoal):\n 1. divides_ff d g", "using r"], ["proof (prove)\nusing this:\n  divides_ff (to_fract r * d) (to_fract r * g)\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. divides_ff d g", "by simp"], ["proof (state)\nthis:\n  divides_ff d g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>g. gcd_ff_list X g\n\ngoal:\nNo subgoals!", "qed"], ["", "definition some_gcd_ff_list :: \"'a :: ufd fract list \\<Rightarrow> 'a fract\" where\n  \"some_gcd_ff_list xs = (SOME g. gcd_ff_list xs g)\""], ["", "lemma some_gcd_ff_list: \"gcd_ff_list xs (some_gcd_ff_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_ff_list xs (some_gcd_ff_list xs)", "unfolding some_gcd_ff_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_ff_list xs (Eps (gcd_ff_list xs))", "using gcd_ff_list_exists[of xs]"], ["proof (prove)\nusing this:\n  \\<exists>g. gcd_ff_list xs g\n\ngoal (1 subgoal):\n 1. gcd_ff_list xs (Eps (gcd_ff_list xs))", "by (rule someI_ex)"], ["", "lemma some_gcd_ff_list_divides: \"x \\<in> set xs \\<Longrightarrow> divides_ff (some_gcd_ff_list xs) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> divides_ff (some_gcd_ff_list xs) x", "using some_gcd_ff_list[of xs]"], ["proof (prove)\nusing this:\n  gcd_ff_list xs (some_gcd_ff_list xs)\n\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> divides_ff (some_gcd_ff_list xs) x", "unfolding gcd_ff_list_def"], ["proof (prove)\nusing this:\n  Ball (set xs) (divides_ff (some_gcd_ff_list xs)) \\<and>\n  (\\<forall>d.\n      Ball (set xs) (divides_ff d) \\<longrightarrow>\n      divides_ff d (some_gcd_ff_list xs))\n\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> divides_ff (some_gcd_ff_list xs) x", "by auto"], ["", "lemma some_gcd_ff_list_greatest: \"(\\<forall>x \\<in> set xs. divides_ff d x) \\<Longrightarrow> divides_ff d (some_gcd_ff_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. divides_ff d x \\<Longrightarrow>\n    divides_ff d (some_gcd_ff_list xs)", "using some_gcd_ff_list[of xs]"], ["proof (prove)\nusing this:\n  gcd_ff_list xs (some_gcd_ff_list xs)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. divides_ff d x \\<Longrightarrow>\n    divides_ff d (some_gcd_ff_list xs)", "unfolding gcd_ff_list_def"], ["proof (prove)\nusing this:\n  Ball (set xs) (divides_ff (some_gcd_ff_list xs)) \\<and>\n  (\\<forall>d.\n      Ball (set xs) (divides_ff d) \\<longrightarrow>\n      divides_ff d (some_gcd_ff_list xs))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. divides_ff d x \\<Longrightarrow>\n    divides_ff d (some_gcd_ff_list xs)", "by auto"], ["", "lemma divides_ff_refl[simp]: \"divides_ff x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff x x", "unfolding divides_ff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. x = x * to_fract r", "by (rule exI[of _ 1], auto simp: to_fract_def One_fract_def)"], ["", "lemma divides_ff_trans:\n  \"divides_ff x y \\<Longrightarrow> divides_ff y z \\<Longrightarrow> divides_ff x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>divides_ff x y; divides_ff y z\\<rbrakk>\n    \\<Longrightarrow> divides_ff x z", "unfolding divides_ff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>r. y = x * to_fract r;\n     \\<exists>r. z = y * to_fract r\\<rbrakk>\n    \\<Longrightarrow> \\<exists>r. z = x * to_fract r", "by (auto simp del: to_fract_hom.hom_mult simp add: to_fract_hom.hom_mult[symmetric])"], ["", "lemma divides_ff_mult_right: \"a \\<noteq> 0 \\<Longrightarrow> divides_ff (x * inverse a) y \\<Longrightarrow> divides_ff x (a * y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> 0; divides_ff (x * inverse a) y\\<rbrakk>\n    \\<Longrightarrow> divides_ff x (a * y)", "unfolding divides_ff_def divide_inverse[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> 0; \\<exists>r. y = x / a * to_fract r\\<rbrakk>\n    \\<Longrightarrow> \\<exists>r. a * y = x * to_fract r", "by auto"], ["", "definition eq_dff :: \"'a :: ufd fract \\<Rightarrow> 'a fract \\<Rightarrow> bool\" (infix \"=dff\" 50) where\n  \"x =dff y \\<longleftrightarrow> divides_ff x y \\<and> divides_ff y x\""], ["", "lemma eq_dffI[intro]: \"divides_ff x y \\<Longrightarrow> divides_ff y x \\<Longrightarrow> x =dff y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>divides_ff x y; divides_ff y x\\<rbrakk>\n    \\<Longrightarrow> x =dff y", "unfolding eq_dff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>divides_ff x y; divides_ff y x\\<rbrakk>\n    \\<Longrightarrow> divides_ff x y \\<and> divides_ff y x", "by auto"], ["", "lemma eq_dff_refl[simp]: \"x =dff x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =dff x", "by (intro eq_dffI, auto)"], ["", "lemma eq_dff_sym: \"x =dff y \\<Longrightarrow> y =dff x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =dff y \\<Longrightarrow> y =dff x", "unfolding eq_dff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff x y \\<and> divides_ff y x \\<Longrightarrow>\n    divides_ff y x \\<and> divides_ff x y", "by auto"], ["", "lemma eq_dff_trans[trans]: \"x =dff y \\<Longrightarrow> y =dff z \\<Longrightarrow> x =dff z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x =dff y; y =dff z\\<rbrakk> \\<Longrightarrow> x =dff z", "unfolding eq_dff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>divides_ff x y \\<and> divides_ff y x;\n     divides_ff y z \\<and> divides_ff z y\\<rbrakk>\n    \\<Longrightarrow> divides_ff x z \\<and> divides_ff z x", "using divides_ff_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>divides_ff ?x ?y; divides_ff ?y ?z\\<rbrakk>\n  \\<Longrightarrow> divides_ff ?x ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>divides_ff x y \\<and> divides_ff y x;\n     divides_ff y z \\<and> divides_ff z y\\<rbrakk>\n    \\<Longrightarrow> divides_ff x z \\<and> divides_ff z x", "by auto"], ["", "lemma eq_dff_cancel_right[simp]: \"x * y =dff x * z \\<longleftrightarrow> x = 0 \\<or> y =dff z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x * y =dff x * z) = (x = 0 \\<or> y =dff z)", "unfolding eq_dff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (divides_ff (x * y) (x * z) \\<and> divides_ff (x * z) (x * y)) =\n    (x = 0 \\<or> divides_ff y z \\<and> divides_ff z y)", "by auto"], ["", "lemma eq_dff_mult_right_trans[trans]: \"x =dff y * z \\<Longrightarrow> z =dff u \\<Longrightarrow> x =dff y * u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x =dff y * z; z =dff u\\<rbrakk> \\<Longrightarrow> x =dff y * u", "using eq_dff_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x =dff ?y; ?y =dff ?z\\<rbrakk> \\<Longrightarrow> ?x =dff ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x =dff y * z; z =dff u\\<rbrakk> \\<Longrightarrow> x =dff y * u", "by force"], ["", "lemma some_gcd_ff_list_smult: \"a \\<noteq> 0 \\<Longrightarrow> some_gcd_ff_list (map ((*) a) xs) =dff a * some_gcd_ff_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    some_gcd_ff_list (map ((*) a) xs) =dff a * some_gcd_ff_list xs", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    divides_ff (some_gcd_ff_list (map ((*) a) xs)) (a * some_gcd_ff_list xs)\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    divides_ff (a * some_gcd_ff_list xs) (some_gcd_ff_list (map ((*) a) xs))", "let ?g = \"some_gcd_ff_list (map ((*) a) xs)\""], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    divides_ff (some_gcd_ff_list (map ((*) a) xs)) (a * some_gcd_ff_list xs)\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    divides_ff (a * some_gcd_ff_list xs) (some_gcd_ff_list (map ((*) a) xs))", "show \"divides_ff (a * some_gcd_ff_list xs) ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (a * some_gcd_ff_list xs) (some_gcd_ff_list (map ((*) a) xs))", "by (rule some_gcd_ff_list_greatest, insert some_gcd_ff_list_divides[of _ xs], auto simp: divides_ff_def)"], ["proof (state)\nthis:\n  divides_ff (a * some_gcd_ff_list xs) (some_gcd_ff_list (map ((*) a) xs))\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    divides_ff (some_gcd_ff_list (map ((*) a) xs)) (a * some_gcd_ff_list xs)", "assume a: \"a \\<noteq> 0\""], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    divides_ff (some_gcd_ff_list (map ((*) a) xs)) (a * some_gcd_ff_list xs)", "show \"divides_ff ?g (a * some_gcd_ff_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (some_gcd_ff_list (map ((*) a) xs)) (a * some_gcd_ff_list xs)", "proof (rule divides_ff_mult_right[OF a some_gcd_ff_list_greatest], intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "assume x: \"x \\<in> set xs\""], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "have \"divides_ff (?g * inverse a) x = divides_ff (inverse a * ?g) (inverse a * (a * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x =\n    divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n     (inverse a * (a * x))", "using a"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x =\n    divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n     (inverse a * (a * x))", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x =\n  divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n   (inverse a * (a * x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "also"], ["proof (state)\nthis:\n  divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x =\n  divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n   (inverse a * (a * x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n     (inverse a * (a * x))", "using a x"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n     (inverse a * (a * x))", "by (auto intro: some_gcd_ff_list_divides)"], ["proof (state)\nthis:\n  divides_ff (inverse a * some_gcd_ff_list (map ((*) a) xs))\n   (inverse a * (a * x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set xs \\<Longrightarrow>\n       divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "finally"], ["proof (chain)\npicking this:\n  divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "show \"divides_ff (?g * inverse a) x\""], ["proof (prove)\nusing this:\n  divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x\n\ngoal (1 subgoal):\n 1. divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x", "."], ["proof (state)\nthis:\n  divides_ff (some_gcd_ff_list (map ((*) a) xs) * inverse a) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  divides_ff (some_gcd_ff_list (map ((*) a) xs)) (a * some_gcd_ff_list xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition content_ff :: \"'a::ufd fract poly \\<Rightarrow> 'a fract\" where \n  \"content_ff p = some_gcd_ff_list (coeffs p)\""], ["", "lemma content_ff_iff: \"divides_ff x (content_ff p) \\<longleftrightarrow> (\\<forall> c \\<in> set (coeffs p). divides_ff x c)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff x (content_ff p) =\n    (\\<forall>c\\<in>set (coeffs p). divides_ff x c)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. divides_ff x (content_ff p) \\<Longrightarrow>\n    \\<forall>c\\<in>set (coeffs p). divides_ff x c\n 2. \\<forall>c\\<in>set (coeffs p). divides_ff x c \\<Longrightarrow>\n    divides_ff x (content_ff p)", "assume ?l"], ["proof (state)\nthis:\n  divides_ff x (content_ff p)\n\ngoal (2 subgoals):\n 1. divides_ff x (content_ff p) \\<Longrightarrow>\n    \\<forall>c\\<in>set (coeffs p). divides_ff x c\n 2. \\<forall>c\\<in>set (coeffs p). divides_ff x c \\<Longrightarrow>\n    divides_ff x (content_ff p)", "from divides_ff_trans[OF this, unfolded content_ff_def, OF some_gcd_ff_list_divides]"], ["proof (chain)\npicking this:\n  ?z \\<in> set (coeffs p) \\<Longrightarrow> divides_ff x ?z", "show ?r"], ["proof (prove)\nusing this:\n  ?z \\<in> set (coeffs p) \\<Longrightarrow> divides_ff x ?z\n\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (coeffs p). divides_ff x c", ".."], ["proof (state)\nthis:\n  \\<forall>c\\<in>set (coeffs p). divides_ff x c\n\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (coeffs p). divides_ff x c \\<Longrightarrow>\n    divides_ff x (content_ff p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (coeffs p). divides_ff x c \\<Longrightarrow>\n    divides_ff x (content_ff p)", "assume ?r"], ["proof (state)\nthis:\n  \\<forall>c\\<in>set (coeffs p). divides_ff x c\n\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (coeffs p). divides_ff x c \\<Longrightarrow>\n    divides_ff x (content_ff p)", "thus ?l"], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (coeffs p). divides_ff x c\n\ngoal (1 subgoal):\n 1. divides_ff x (content_ff p)", "unfolding content_ff_def"], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (coeffs p). divides_ff x c\n\ngoal (1 subgoal):\n 1. divides_ff x (some_gcd_ff_list (coeffs p))", "by (intro some_gcd_ff_list_greatest, auto)"], ["proof (state)\nthis:\n  divides_ff x (content_ff p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_ff_divides_ff: \"x \\<in> set (coeffs p) \\<Longrightarrow> divides_ff (content_ff p) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (coeffs p) \\<Longrightarrow> divides_ff (content_ff p) x", "unfolding content_ff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (coeffs p) \\<Longrightarrow>\n    divides_ff (some_gcd_ff_list (coeffs p)) x", "by (rule some_gcd_ff_list_divides)"], ["", "lemma content_ff_0[simp]: \"content_ff 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff 0 = 0", "using content_ff_iff[of 0 0]"], ["proof (prove)\nusing this:\n  divides_ff 0 (content_ff 0) =\n  (\\<forall>c\\<in>set (coeffs 0). divides_ff 0 c)\n\ngoal (1 subgoal):\n 1. content_ff 0 = 0", "by (auto simp: divides_ff_def)"], ["", "lemma content_ff_0_iff[simp]: \"(content_ff p = 0) = (p = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (content_ff p = 0) = (p = 0)", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "define a where \"a \\<equiv> last (coeffs p)\""], ["proof (state)\nthis:\n  a \\<equiv> last (coeffs p)\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "define xs where \"xs \\<equiv> coeffs p\""], ["proof (state)\nthis:\n  xs \\<equiv> coeffs p\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "from False"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have mem: \"a \\<in> set (coeffs p)\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<in> set (coeffs p) &&& a \\<noteq> 0", "unfolding a_def last_coeffs_eq_coeff_degree[OF False] coeffs_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. last (if p = 0 then [] else map (coeff p) [0..<Suc (degree p)])\n    \\<in> set (if p = 0 then [] else map (coeff p) [0..<Suc (degree p)]) &&&\n    last (if p = 0 then [] else map (coeff p) [0..<Suc (degree p)]) \\<noteq>\n    0", "by auto"], ["proof (state)\nthis:\n  a \\<in> set (coeffs p)\n  a \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "from content_ff_divides_ff[OF mem]"], ["proof (chain)\npicking this:\n  divides_ff (content_ff p) a", "have \"divides_ff (content_ff p) a\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff p) a\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff p) a", "."], ["proof (state)\nthis:\n  divides_ff (content_ff p) a\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "with a"], ["proof (chain)\npicking this:\n  a \\<noteq> 0\n  divides_ff (content_ff p) a", "have \"content_ff p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n  divides_ff (content_ff p) a\n\ngoal (1 subgoal):\n 1. content_ff p \\<noteq> 0", "unfolding divides_ff_def"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n  \\<exists>r. a = content_ff p * to_fract r\n\ngoal (1 subgoal):\n 1. content_ff p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  content_ff p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)\n 2. p \\<noteq> 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "with False"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  content_ff p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  content_ff p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (content_ff p = 0) = (p = 0)", "by auto"], ["proof (state)\nthis:\n  (content_ff p = 0) = (p = 0)\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> (content_ff p = 0) = (p = 0)", "qed auto"], ["", "lemma content_ff_eq_dff_nonzero: \"content_ff p =dff x \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>content_ff p =dff x; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> 0", "using divides_ff_def eq_dff_def"], ["proof (prove)\nusing this:\n  divides_ff ?x ?y \\<equiv> \\<exists>r. ?y = ?x * to_fract r\n  (?x =dff ?y) = (divides_ff ?x ?y \\<and> divides_ff ?y ?x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>content_ff p =dff x; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> 0", "by force"], ["", "lemma content_ff_smult: \"content_ff (smult (a::'a::ufd fract) p) =dff a * content_ff p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (smult a p) =dff a * content_ff p", "proof (cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow> content_ff (smult a p) =dff a * content_ff p\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    content_ff (smult a p) =dff a * content_ff p", "case False"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow> content_ff (smult a p) =dff a * content_ff p\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    content_ff (smult a p) =dff a * content_ff p", "note a = this"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow> content_ff (smult a p) =dff a * content_ff p\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    content_ff (smult a p) =dff a * content_ff p", "have id: \"coeffs (smult a p) = map ((*) a) (coeffs p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs (smult a p) = map ((*) a) (coeffs p)", "unfolding coeffs_smult"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a = 0 then [] else map ((*) a) (coeffs p)) = map ((*) a) (coeffs p)", "using a"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if a = 0 then [] else map ((*) a) (coeffs p)) = map ((*) a) (coeffs p)", "by (simp add: Polynomial.coeffs_smult)"], ["proof (state)\nthis:\n  coeffs (smult a p) = map ((*) a) (coeffs p)\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow> content_ff (smult a p) =dff a * content_ff p\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    content_ff (smult a p) =dff a * content_ff p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (smult a p) =dff a * content_ff p", "unfolding content_ff_def id"], ["proof (prove)\ngoal (1 subgoal):\n 1. some_gcd_ff_list (map ((*) a) (coeffs p)) =dff\n    a * some_gcd_ff_list (coeffs p)", "using some_gcd_ff_list_smult[OF a]"], ["proof (prove)\nusing this:\n  some_gcd_ff_list (map ((*) a) ?xs) =dff a * some_gcd_ff_list ?xs\n\ngoal (1 subgoal):\n 1. some_gcd_ff_list (map ((*) a) (coeffs p)) =dff\n    a * some_gcd_ff_list (coeffs p)", "."], ["proof (state)\nthis:\n  content_ff (smult a p) =dff a * content_ff p\n\ngoal (1 subgoal):\n 1. a = 0 \\<Longrightarrow> content_ff (smult a p) =dff a * content_ff p", "qed simp"], ["", "definition normalize_content_ff\n  where \"normalize_content_ff (p::'a::ufd fract poly) \\<equiv> smult (inverse (content_ff p)) p\""], ["", "lemma smult_normalize_content_ff: \"smult (content_ff p) (normalize_content_ff p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (content_ff p) (normalize_content_ff p) = p", "unfolding normalize_content_ff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (content_ff p) (smult (inverse (content_ff p)) p) = p", "by (cases \"p = 0\", auto)"], ["", "lemma content_ff_normalize_content_ff_1: assumes p0: \"p \\<noteq> 0\" \n  shows \"content_ff (normalize_content_ff p) =dff 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p) =dff 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p) =dff 1", "have \"content_ff p = content_ff (smult (content_ff p) (normalize_content_ff p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff p =\n    content_ff (smult (content_ff p) (normalize_content_ff p))", "unfolding smult_normalize_content_ff"], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff p = content_ff p", ".."], ["proof (state)\nthis:\n  content_ff p = content_ff (smult (content_ff p) (normalize_content_ff p))\n\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p) =dff 1", "also"], ["proof (state)\nthis:\n  content_ff p = content_ff (smult (content_ff p) (normalize_content_ff p))\n\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p) =dff 1", "have \"\\<dots> =dff content_ff p * content_ff (normalize_content_ff p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (smult (content_ff p) (normalize_content_ff p)) =dff\n    content_ff p * content_ff (normalize_content_ff p)", "by (rule content_ff_smult)"], ["proof (state)\nthis:\n  content_ff (smult (content_ff p) (normalize_content_ff p)) =dff\n  content_ff p * content_ff (normalize_content_ff p)\n\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p) =dff 1", "finally"], ["proof (chain)\npicking this:\n  content_ff p =dff content_ff p * content_ff (normalize_content_ff p)", "show ?thesis"], ["proof (prove)\nusing this:\n  content_ff p =dff content_ff p * content_ff (normalize_content_ff p)\n\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p) =dff 1", "unfolding eq_dff_def divides_ff_def"], ["proof (prove)\nusing this:\n  (\\<exists>r.\n      content_ff p * content_ff (normalize_content_ff p) =\n      content_ff p * to_fract r) \\<and>\n  (\\<exists>r.\n      content_ff p =\n      content_ff p * content_ff (normalize_content_ff p) * to_fract r)\n\ngoal (1 subgoal):\n 1. (\\<exists>r.\n        1 = content_ff (normalize_content_ff p) * to_fract r) \\<and>\n    (\\<exists>r. content_ff (normalize_content_ff p) = 1 * to_fract r)", "using p0"], ["proof (prove)\nusing this:\n  (\\<exists>r.\n      content_ff p * content_ff (normalize_content_ff p) =\n      content_ff p * to_fract r) \\<and>\n  (\\<exists>r.\n      content_ff p =\n      content_ff p * content_ff (normalize_content_ff p) * to_fract r)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<exists>r.\n        1 = content_ff (normalize_content_ff p) * to_fract r) \\<and>\n    (\\<exists>r. content_ff (normalize_content_ff p) = 1 * to_fract r)", "by auto"], ["proof (state)\nthis:\n  content_ff (normalize_content_ff p) =dff 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_ff_to_fract: assumes \"set (coeffs p) \\<subseteq> range to_fract\"\n  shows \"content_ff p \\<in> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff p \\<in> range to_fract", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. content_ff p \\<in> range to_fract", "have \"divides_ff 1 (content_ff p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff 1 (content_ff p)", "using assms"], ["proof (prove)\nusing this:\n  set (coeffs p) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. divides_ff 1 (content_ff p)", "unfolding content_ff_iff"], ["proof (prove)\nusing this:\n  set (coeffs p) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. Ball (set (coeffs p)) (divides_ff 1)", "unfolding divides_ff_def[abs_def]"], ["proof (prove)\nusing this:\n  set (coeffs p) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (coeffs p). \\<exists>r. y = 1 * to_fract r", "by auto"], ["proof (state)\nthis:\n  divides_ff 1 (content_ff p)\n\ngoal (1 subgoal):\n 1. content_ff p \\<in> range to_fract", "thus ?thesis"], ["proof (prove)\nusing this:\n  divides_ff 1 (content_ff p)\n\ngoal (1 subgoal):\n 1. content_ff p \\<in> range to_fract", "unfolding divides_ff_def"], ["proof (prove)\nusing this:\n  \\<exists>r. content_ff p = 1 * to_fract r\n\ngoal (1 subgoal):\n 1. content_ff p \\<in> range to_fract", "by auto"], ["proof (state)\nthis:\n  content_ff p \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_ff_map_poly_to_fract: \"content_ff (map_poly to_fract (p :: 'a :: ufd poly)) \\<in> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract p) \\<in> range to_fract", "by (rule content_ff_to_fract, subst coeffs_map_poly, auto)"], ["", "lemma range_coeffs_to_fract: assumes \"set (coeffs p) \\<subseteq> range to_fract\" \n  shows \"\\<exists> m. coeff p i = to_fract m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract m", "from assms(1) to_fract_0"], ["proof (chain)\npicking this:\n  set (coeffs p) \\<subseteq> range to_fract\n  to_fract (0::?'a) = 0", "have \"coeff p i \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  set (coeffs p) \\<subseteq> range to_fract\n  to_fract (0::?'a) = 0\n\ngoal (1 subgoal):\n 1. coeff p i \\<in> range to_fract", "using range_coeff [of p]"], ["proof (prove)\nusing this:\n  set (coeffs p) \\<subseteq> range to_fract\n  to_fract (0::?'a) = 0\n  range (coeff p) = insert 0 (set (coeffs p))\n\ngoal (1 subgoal):\n 1. coeff p i \\<in> range to_fract", "by auto (metis contra_subsetD to_fract_hom.hom_zero insertE range_eqI)"], ["proof (state)\nthis:\n  coeff p i \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract m", "thus ?thesis"], ["proof (prove)\nusing this:\n  coeff p i \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract m", "by auto"], ["proof (state)\nthis:\n  \\<exists>m. coeff p i = to_fract m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma divides_ff_coeff: assumes \"set (coeffs p) \\<subseteq> range to_fract\" and \"divides_ff (to_fract n) (coeff p i)\"\n  shows \"\\<exists> m. coeff p i = to_fract n * to_fract m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract n * to_fract m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract n * to_fract m", "from range_coeffs_to_fract[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>m. coeff p ?i = to_fract m", "obtain k where pi: \"coeff p i = to_fract k\""], ["proof (prove)\nusing this:\n  \\<exists>m. coeff p ?i = to_fract m\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        coeff p i = to_fract k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  coeff p i = to_fract k\n\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract n * to_fract m", "from assms(2)[unfolded this]"], ["proof (chain)\npicking this:\n  divides_ff (to_fract n) (to_fract k)", "have \"n dvd k\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract n) (to_fract k)\n\ngoal (1 subgoal):\n 1. n dvd k", "by simp"], ["proof (state)\nthis:\n  n dvd k\n\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract n * to_fract m", "then"], ["proof (chain)\npicking this:\n  n dvd k", "obtain j where k: \"k = n * j\""], ["proof (prove)\nusing this:\n  n dvd k\n\ngoal (1 subgoal):\n 1. (\\<And>j. k = n * j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding Rings.dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>ka. k = n * ka\n\ngoal (1 subgoal):\n 1. (\\<And>j. k = n * j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  k = n * j\n\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract n * to_fract m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. coeff p i = to_fract n * to_fract m", "unfolding pi k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. to_fract (n * j) = to_fract n * to_fract m", "by auto"], ["proof (state)\nthis:\n  \\<exists>m. coeff p i = to_fract n * to_fract m\n\ngoal:\nNo subgoals!", "qed"], ["", "definition inv_embed :: \"'a :: ufd fract \\<Rightarrow> 'a\" where\n  \"inv_embed = the_inv to_fract\""], ["", "lemma inv_embed[simp]: \"inv_embed (to_fract x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_embed (to_fract x) = x", "unfolding inv_embed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. the_inv to_fract (to_fract x) = x", "by (rule the_inv_f_f, auto simp: inj_on_def)"], ["", "lemma inv_embed_0[simp]: \"inv_embed 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_embed 0 = (0::'a)", "unfolding to_fract_0[symmetric] inv_embed"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) = (0::'a)", "by simp"], ["", "lemma range_to_fract_embed_poly: assumes \"set (coeffs p) \\<subseteq> range to_fract\"\n  shows \"p = map_poly to_fract (map_poly inv_embed p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "have \"p = map_poly (to_fract o inv_embed) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = map_poly (to_fract \\<circ> inv_embed) p", "by (rule sym, rule map_poly_idI, insert assms, auto)"], ["proof (state)\nthis:\n  p = map_poly (to_fract \\<circ> inv_embed) p\n\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "also"], ["proof (state)\nthis:\n  p = map_poly (to_fract \\<circ> inv_embed) p\n\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "have \"\\<dots> = map_poly to_fract (map_poly inv_embed p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly (to_fract \\<circ> inv_embed) p =\n    map_poly to_fract (map_poly inv_embed p)", "by (subst map_poly_map_poly, auto)"], ["proof (state)\nthis:\n  map_poly (to_fract \\<circ> inv_embed) p =\n  map_poly to_fract (map_poly inv_embed p)\n\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "finally"], ["proof (chain)\npicking this:\n  p = map_poly to_fract (map_poly inv_embed p)", "show ?thesis"], ["proof (prove)\nusing this:\n  p = map_poly to_fract (map_poly inv_embed p)\n\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "."], ["proof (state)\nthis:\n  p = map_poly to_fract (map_poly inv_embed p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_ff_to_fract_coeffs_to_fract: assumes \"content_ff p \\<in> range to_fract\"\n  shows \"set (coeffs p) \\<subseteq> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (coeffs p) \\<subseteq> range to_fract", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (coeffs p) \\<Longrightarrow> x \\<in> range to_fract", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (coeffs p) \\<Longrightarrow> x \\<in> range to_fract", "assume \"x \\<in> set (coeffs p)\""], ["proof (state)\nthis:\n  x \\<in> set (coeffs p)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (coeffs p) \\<Longrightarrow> x \\<in> range to_fract", "from content_ff_divides_ff[OF this] assms[unfolded eq_dff_def]"], ["proof (chain)\npicking this:\n  divides_ff (content_ff p) x\n  content_ff p \\<in> range to_fract", "show \"x \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff p) x\n  content_ff p \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. x \\<in> range to_fract", "unfolding divides_ff_def"], ["proof (prove)\nusing this:\n  \\<exists>r. x = content_ff p * to_fract r\n  content_ff p \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. x \\<in> range to_fract", "by (auto simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  x \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_ff_1_coeffs_to_fract: assumes \"content_ff p =dff 1\"\n  shows \"set (coeffs p) \\<subseteq> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (coeffs p) \\<subseteq> range to_fract", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (coeffs p) \\<Longrightarrow> x \\<in> range to_fract", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (coeffs p) \\<Longrightarrow> x \\<in> range to_fract", "assume \"x \\<in> set (coeffs p)\""], ["proof (state)\nthis:\n  x \\<in> set (coeffs p)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (coeffs p) \\<Longrightarrow> x \\<in> range to_fract", "from content_ff_divides_ff[OF this] assms[unfolded eq_dff_def]"], ["proof (chain)\npicking this:\n  divides_ff (content_ff p) x\n  divides_ff (content_ff p) 1 \\<and> divides_ff 1 (content_ff p)", "show \"x \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff p) x\n  divides_ff (content_ff p) 1 \\<and> divides_ff 1 (content_ff p)\n\ngoal (1 subgoal):\n 1. x \\<in> range to_fract", "unfolding divides_ff_def"], ["proof (prove)\nusing this:\n  \\<exists>r. x = content_ff p * to_fract r\n  (\\<exists>r. 1 = content_ff p * to_fract r) \\<and>\n  (\\<exists>r. content_ff p = 1 * to_fract r)\n\ngoal (1 subgoal):\n 1. x \\<in> range to_fract", "by (auto simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  x \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gauss_lemma:\n  fixes p q :: \"'a :: ufd fract poly\"\n  shows \"content_ff (p * q) =dff content_ff p * content_ff q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (p * q) =dff content_ff p * content_ff q", "proof (cases \"p = 0 \\<or> q = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "case False"], ["proof (state)\nthis:\n  \\<not> (p = 0 \\<or> q = 0)\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "hence p: \"p \\<noteq> 0\" and q: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> (p = 0 \\<or> q = 0)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 &&& q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  q \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "let ?c = \"content_ff :: 'a fract poly \\<Rightarrow> 'a fract\""], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "fix p q :: \"'a fract poly\""], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "assume cp1: \"?c p =dff 1\" and cq1: \"?c q =dff 1\""], ["proof (state)\nthis:\n  content_ff p =dff 1\n  content_ff q =dff 1\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "define ip where \"ip \\<equiv> map_poly inv_embed p\""], ["proof (state)\nthis:\n  ip \\<equiv> map_poly inv_embed p\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "define iq where \"iq \\<equiv> map_poly inv_embed q\""], ["proof (state)\nthis:\n  iq \\<equiv> map_poly inv_embed q\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "interpret map_poly_hom: map_poly_comm_ring_hom to_fract"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_ring_hom to_fract", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "from content_ff_1_coeffs_to_fract[OF cp1]"], ["proof (chain)\npicking this:\n  set (coeffs p) \\<subseteq> range to_fract", "have cp: \"set (coeffs p) \\<subseteq> range to_fract\""], ["proof (prove)\nusing this:\n  set (coeffs p) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. set (coeffs p) \\<subseteq> range to_fract", "."], ["proof (state)\nthis:\n  set (coeffs p) \\<subseteq> range to_fract\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "from content_ff_1_coeffs_to_fract[OF cq1]"], ["proof (chain)\npicking this:\n  set (coeffs q) \\<subseteq> range to_fract", "have cq: \"set (coeffs q) \\<subseteq> range to_fract\""], ["proof (prove)\nusing this:\n  set (coeffs q) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. set (coeffs q) \\<subseteq> range to_fract", "."], ["proof (state)\nthis:\n  set (coeffs q) \\<subseteq> range to_fract\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have ip: \"p = map_poly to_fract ip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = map_poly to_fract ip", "unfolding ip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = map_poly to_fract (map_poly inv_embed p)", "by (rule range_to_fract_embed_poly[OF cp])"], ["proof (state)\nthis:\n  p = map_poly to_fract ip\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have iq: \"q = map_poly to_fract iq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = map_poly to_fract iq", "unfolding iq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. q = map_poly to_fract (map_poly inv_embed q)", "by (rule range_to_fract_embed_poly[OF cq])"], ["proof (state)\nthis:\n  q = map_poly to_fract iq\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have cpq0: \"?c (p * q) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (p * q) \\<noteq> 0", "unfolding content_ff_0_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. p * q \\<noteq> 0", "using cp1 cq1 content_ff_eq_dff_nonzero[of _ 1]"], ["proof (prove)\nusing this:\n  content_ff p =dff 1\n  content_ff q =dff 1\n  \\<lbrakk>content_ff ?p =dff 1; 1 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p * q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  content_ff (p * q) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have cpq: \"set (coeffs (p * q)) \\<subseteq> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (coeffs (p * q)) \\<subseteq> range to_fract", "unfolding ip iq"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (coeffs (map_poly to_fract ip * map_poly to_fract iq))\n    \\<subseteq> range to_fract", "unfolding map_poly_hom.hom_mult[symmetric] to_fract_hom.coeffs_map_poly_hom"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map to_fract (coeffs (ip * iq))) \\<subseteq> range to_fract", "by auto"], ["proof (state)\nthis:\n  set (coeffs (p * q)) \\<subseteq> range to_fract\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have ctnt: \"?c (p * q) \\<in> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (p * q) \\<in> range to_fract", "using content_ff_to_fract[OF cpq]"], ["proof (prove)\nusing this:\n  content_ff (p * q) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. content_ff (p * q) \\<in> range to_fract", "."], ["proof (state)\nthis:\n  content_ff (p * q) \\<in> range to_fract\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "then"], ["proof (chain)\npicking this:\n  content_ff (p * q) \\<in> range to_fract", "obtain cpq where id: \"?c (p * q) = to_fract cpq\""], ["proof (prove)\nusing this:\n  content_ff (p * q) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cpq.\n        content_ff (p * q) = to_fract cpq \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (p * q) = to_fract cpq\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have dvd: \"divides_ff 1 (?c (p * q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff 1 (content_ff (p * q))", "using ctnt"], ["proof (prove)\nusing this:\n  content_ff (p * q) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. divides_ff 1 (content_ff (p * q))", "unfolding divides_ff_def"], ["proof (prove)\nusing this:\n  content_ff (p * q) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>r. content_ff (p * q) = 1 * to_fract r", "by auto"], ["proof (state)\nthis:\n  divides_ff 1 (content_ff (p * q))\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "from cpq0[unfolded id]"], ["proof (chain)\npicking this:\n  to_fract cpq \\<noteq> 0", "have cpq0: \"cpq \\<noteq> 0\""], ["proof (prove)\nusing this:\n  to_fract cpq \\<noteq> 0\n\ngoal (1 subgoal):\n 1. cpq \\<noteq> (0::'a)", "unfolding to_fract_def Zero_fract_def"], ["proof (prove)\nusing this:\n  Fraction_Field.Fract cpq (1::'a) \\<noteq>\n  Fraction_Field.Fract (0::'a) (1::'a)\n\ngoal (1 subgoal):\n 1. cpq \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  cpq \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "hence cpqM: \"cpq \\<in> carrier mk_monoid\""], ["proof (prove)\nusing this:\n  cpq \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. cpq \\<in> carrier mk_monoid", "by auto"], ["proof (state)\nthis:\n  cpq \\<in> carrier mk_monoid\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have \"?c (p * q) =dff 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (p * q) =dff 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "assume \"\\<not> ?c (p * q) =dff 1\""], ["proof (state)\nthis:\n  \\<not> content_ff (p * q) =dff 1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "with dvd"], ["proof (chain)\npicking this:\n  divides_ff 1 (content_ff (p * q))\n  \\<not> content_ff (p * q) =dff 1", "have \"\\<not> divides_ff (?c (p * q)) 1\""], ["proof (prove)\nusing this:\n  divides_ff 1 (content_ff (p * q))\n  \\<not> content_ff (p * q) =dff 1\n\ngoal (1 subgoal):\n 1. \\<not> divides_ff (content_ff (p * q)) 1", "unfolding eq_dff_def"], ["proof (prove)\nusing this:\n  divides_ff 1 (content_ff (p * q))\n  \\<not> (divides_ff (content_ff (p * q)) 1 \\<and>\n          divides_ff 1 (content_ff (p * q)))\n\ngoal (1 subgoal):\n 1. \\<not> divides_ff (content_ff (p * q)) 1", "by auto"], ["proof (state)\nthis:\n  \\<not> divides_ff (content_ff (p * q)) 1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from this[unfolded id divides_ff_def]"], ["proof (chain)\npicking this:\n  \\<nexists>r. 1 = to_fract cpq * to_fract r", "have cpq: \"\\<And> r. cpq * r \\<noteq> 1\""], ["proof (prove)\nusing this:\n  \\<nexists>r. 1 = to_fract cpq * to_fract r\n\ngoal (1 subgoal):\n 1. \\<And>r. cpq * r \\<noteq> (1::'a)", "by (auto simp: to_fract_def One_fract_def eq_fract)"], ["proof (state)\nthis:\n  cpq * ?r1 \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  cpq * ?r1 \\<noteq> (1::'a)", "have cpq1: \"\\<not> cpq dvd 1\""], ["proof (prove)\nusing this:\n  cpq * ?r1 \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> cpq dvd (1::'a)", "by (auto elim:dvdE simp:ac_simps)"], ["proof (state)\nthis:\n  \\<not> cpq dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from mset_factors_exist[OF cpq0 cpq1]"], ["proof (chain)\npicking this:\n  \\<exists>F. mset_factors F cpq", "obtain F where F: \"mset_factors F cpq\""], ["proof (prove)\nusing this:\n  \\<exists>F. mset_factors F cpq\n\ngoal (1 subgoal):\n 1. (\\<And>F. mset_factors F cpq \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset_factors F cpq\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"F \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<noteq> {#}", "using F"], ["proof (prove)\nusing this:\n  mset_factors F cpq\n\ngoal (1 subgoal):\n 1. F \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  F \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  F \\<noteq> {#}", "obtain f where f: \"f \\<in># F\""], ["proof (prove)\nusing this:\n  F \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>f. f \\<in># F \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "with F"], ["proof (chain)\npicking this:\n  mset_factors F cpq\n  f \\<in># F", "have irrf: \"irreducible f\" and f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  mset_factors F cpq\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. irreducible f &&& f \\<noteq> (0::'a)", "by (auto dest: mset_factorsD)"], ["proof (state)\nthis:\n  irreducible f\n  f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from irrf"], ["proof (chain)\npicking this:\n  irreducible f", "have pf: \"prime_elem f\""], ["proof (prove)\nusing this:\n  irreducible f\n\ngoal (1 subgoal):\n 1. prime_elem f", "by simp"], ["proof (state)\nthis:\n  prime_elem f\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "note * = this[unfolded prime_elem_def]"], ["proof (state)\nthis:\n  f \\<noteq> (0::'a) \\<and>\n  \\<not> f dvd (1::'a) \\<and>\n  (\\<forall>a b. f dvd a * b \\<longrightarrow> f dvd a \\<or> f dvd b)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from *"], ["proof (chain)\npicking this:\n  f \\<noteq> (0::'a) \\<and>\n  \\<not> f dvd (1::'a) \\<and>\n  (\\<forall>a b. f dvd a * b \\<longrightarrow> f dvd a \\<or> f dvd b)", "have no_unit: \"\\<not> f dvd 1\""], ["proof (prove)\nusing this:\n  f \\<noteq> (0::'a) \\<and>\n  \\<not> f dvd (1::'a) \\<and>\n  (\\<forall>a b. f dvd a * b \\<longrightarrow> f dvd a \\<or> f dvd b)\n\ngoal (1 subgoal):\n 1. \\<not> f dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from * f0"], ["proof (chain)\npicking this:\n  f \\<noteq> (0::'a) \\<and>\n  \\<not> f dvd (1::'a) \\<and>\n  (\\<forall>a b. f dvd a * b \\<longrightarrow> f dvd a \\<or> f dvd b)\n  f \\<noteq> (0::'a)", "have prime: \"\\<And> a b. f dvd a * b \\<Longrightarrow> f dvd a \\<or> f dvd b\""], ["proof (prove)\nusing this:\n  f \\<noteq> (0::'a) \\<and>\n  \\<not> f dvd (1::'a) \\<and>\n  (\\<forall>a b. f dvd a * b \\<longrightarrow> f dvd a \\<or> f dvd b)\n  f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b. f dvd a * b \\<Longrightarrow> f dvd a \\<or> f dvd b", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  f \\<noteq> (0::'a) \\<and>\n  (\\<nexists>k. (1::'a) = f * k) \\<and>\n  (\\<forall>a b.\n      (\\<exists>k. a * b = f * k) \\<longrightarrow>\n      (\\<exists>k. a = f * k) \\<or> (\\<exists>k. b = f * k))\n  f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<exists>k. a * b = f * k \\<Longrightarrow>\n       (\\<exists>k. a = f * k) \\<or> (\\<exists>k. b = f * k)", "by force"], ["proof (state)\nthis:\n  f dvd ?a1 * ?b1 \\<Longrightarrow> f dvd ?a1 \\<or> f dvd ?b1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "let ?f = \"to_fract f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from F f"], ["proof (chain)\npicking this:\n  mset_factors F cpq\n  f \\<in># F", "have fdvd: \"f dvd cpq\""], ["proof (prove)\nusing this:\n  mset_factors F cpq\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. f dvd cpq", "by (auto intro:mset_factors_imp_dvd)"], ["proof (state)\nthis:\n  f dvd cpq\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "hence \"divides_ff ?f (to_fract cpq)\""], ["proof (prove)\nusing this:\n  f dvd cpq\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) (to_fract cpq)", "by simp"], ["proof (state)\nthis:\n  divides_ff (to_fract f) (to_fract cpq)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from divides_ff_trans[OF this, folded id, OF content_ff_divides_ff]"], ["proof (chain)\npicking this:\n  ?z \\<in> set (coeffs (p * q)) \\<Longrightarrow> divides_ff (to_fract f) ?z", "have dvd: \"\\<And> z. z \\<in> set (coeffs (p * q)) \\<Longrightarrow> divides_ff ?f z\""], ["proof (prove)\nusing this:\n  ?z \\<in> set (coeffs (p * q)) \\<Longrightarrow> divides_ff (to_fract f) ?z\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> set (coeffs (p * q)) \\<Longrightarrow>\n       divides_ff (to_fract f) z", "."], ["proof (state)\nthis:\n  ?z1 \\<in> set (coeffs (p * q)) \\<Longrightarrow>\n  divides_ff (to_fract f) ?z1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  ?z1 \\<in> set (coeffs (p * q)) \\<Longrightarrow>\n  divides_ff (to_fract f) ?z1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "fix p :: \"'a fract poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "assume cp: \"?c p =dff 1\""], ["proof (state)\nthis:\n  content_ff p =dff 1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "let ?P = \"\\<lambda> i. \\<not> divides_ff ?f (coeff p i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "assume \"\\<forall> c \\<in> set (coeffs p). divides_ff ?f c\""], ["proof (state)\nthis:\n  \\<forall>c\\<in>set (coeffs p). divides_ff (to_fract f) c\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "hence n: \"divides_ff ?f (?c p)\""], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (coeffs p). divides_ff (to_fract f) c\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) (content_ff p)", "unfolding content_ff_iff"], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (coeffs p). divides_ff (to_fract f) c\n\ngoal (1 subgoal):\n 1. Ball (set (coeffs p)) (divides_ff (to_fract f))", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract f) (content_ff p)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "from divides_ff_trans[OF this] cp[unfolded eq_dff_def]"], ["proof (chain)\npicking this:\n  divides_ff (content_ff p) ?z \\<Longrightarrow> divides_ff (to_fract f) ?z\n  divides_ff (content_ff p) 1 \\<and> divides_ff 1 (content_ff p)", "have \"divides_ff ?f 1\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff p) ?z \\<Longrightarrow> divides_ff (to_fract f) ?z\n  divides_ff (content_ff p) 1 \\<and> divides_ff 1 (content_ff p)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) 1", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract f) 1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  divides_ff (to_fract f) 1\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "have \"1 = to_fract 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = to_fract (1::'c)", "by simp"], ["proof (state)\nthis:\n  1 = to_fract (1::?'c2)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  divides_ff (to_fract f) (to_fract (1::'a))", "have \"f dvd 1\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract f) (to_fract (1::'a))\n\ngoal (1 subgoal):\n 1. f dvd (1::'a)", "by (unfold divides_ff_to_fract)"], ["proof (state)\nthis:\n  f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "hence False"], ["proof (prove)\nusing this:\n  f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. False", "using no_unit"], ["proof (prove)\nusing this:\n  f dvd (1::'a)\n  \\<not> f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. False", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. (1::'a) = f * k\n  \\<nexists>k. (1::'a) = f * k\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<forall>c\\<in>set (coeffs p). divides_ff (to_fract f) c \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>c\\<in>set (coeffs p). divides_ff (to_fract f) c \\<Longrightarrow>\n  False", "obtain cp where cp: \"cp \\<in> set (coeffs p)\" and ncp: \"\\<not> divides_ff ?f cp\""], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (coeffs p). divides_ff (to_fract f) c \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. (\\<And>cp.\n        \\<lbrakk>cp \\<in> set (coeffs p);\n         \\<not> divides_ff (to_fract f) cp\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cp \\<in> set (coeffs p)\n  \\<not> divides_ff (to_fract f) cp\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "hence \"cp \\<in> range (coeff p)\""], ["proof (prove)\nusing this:\n  cp \\<in> set (coeffs p)\n  \\<not> divides_ff (to_fract f) cp\n\ngoal (1 subgoal):\n 1. cp \\<in> range (coeff p)", "unfolding range_coeff"], ["proof (prove)\nusing this:\n  cp \\<in> set (coeffs p)\n  \\<not> divides_ff (to_fract f) cp\n\ngoal (1 subgoal):\n 1. cp \\<in> insert 0 (set (coeffs p))", "by auto"], ["proof (state)\nthis:\n  cp \\<in> range (coeff p)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "with ncp"], ["proof (chain)\npicking this:\n  \\<not> divides_ff (to_fract f) cp\n  cp \\<in> range (coeff p)", "have \"\\<exists> i. ?P i\""], ["proof (prove)\nusing this:\n  \\<not> divides_ff (to_fract f) cp\n  cp \\<in> range (coeff p)\n\ngoal (1 subgoal):\n 1. \\<exists>i. \\<not> divides_ff (to_fract f) (coeff p i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. \\<not> divides_ff (to_fract f) (coeff p i)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "from LeastI_ex[OF this] not_less_Least[of _ ?P]"], ["proof (chain)\npicking this:\n  \\<not> divides_ff (to_fract f)\n          (coeff p (LEAST i. \\<not> divides_ff (to_fract f) (coeff p i)))\n  ?k < (LEAST x.\n           \\<not> divides_ff (to_fract f) (coeff p x)) \\<Longrightarrow>\n  \\<not> \\<not> divides_ff (to_fract f) (coeff p ?k)", "have \"\\<exists> i. ?P i \\<and> (\\<forall> j. j < i \\<longrightarrow> divides_ff ?f (coeff p j))\""], ["proof (prove)\nusing this:\n  \\<not> divides_ff (to_fract f)\n          (coeff p (LEAST i. \\<not> divides_ff (to_fract f) (coeff p i)))\n  ?k < (LEAST x.\n           \\<not> divides_ff (to_fract f) (coeff p x)) \\<Longrightarrow>\n  \\<not> \\<not> divides_ff (to_fract f) (coeff p ?k)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       \\<not> divides_ff (to_fract f) (coeff p i) \\<and>\n       (\\<forall>j<i. divides_ff (to_fract f) (coeff p j))", "by blast"], ["proof (state)\nthis:\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff p i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff p j))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (pa__ * q) =dff 1 \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  content_ff ?pb3 =dff 1 \\<Longrightarrow>\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff ?pb3 i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff ?pb3 j))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "note cont = this"], ["proof (state)\nthis:\n  content_ff ?pb3 =dff 1 \\<Longrightarrow>\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff ?pb3 i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff ?pb3 j))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from cont[OF cp1]"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff p i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff p j))", "obtain r where \n        r: \"\\<not> divides_ff ?f (coeff p r)\" and r': \"\\<And> i. i < r \\<Longrightarrow> divides_ff ?f (coeff p i)\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff p i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff p j))\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>\\<not> divides_ff (to_fract f) (coeff p r);\n         \\<And>i.\n            i < r \\<Longrightarrow>\n            divides_ff (to_fract f) (coeff p i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<not> divides_ff (to_fract f) (coeff p r)\n  ?i1 < r \\<Longrightarrow> divides_ff (to_fract f) (coeff p ?i1)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"\\<forall> i. \\<exists> k. i < r \\<longrightarrow> coeff p i = ?f * to_fract k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>k.\n          i < r \\<longrightarrow> coeff p i = to_fract f * to_fract k", "using divides_ff_coeff[OF cp r']"], ["proof (prove)\nusing this:\n  ?i < r \\<Longrightarrow> \\<exists>m. coeff p ?i = to_fract f * to_fract m\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>k.\n          i < r \\<longrightarrow> coeff p i = to_fract f * to_fract k", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<exists>k. i < r \\<longrightarrow> coeff p i = to_fract f * to_fract k\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>fa. \\<forall>x<r. coeff p x = to_fract f * to_fract (fa x)", "obtain rr where r': \"\\<And> i. i < r \\<Longrightarrow> coeff p i = ?f * to_fract (rr i)\""], ["proof (prove)\nusing this:\n  \\<exists>fa. \\<forall>x<r. coeff p x = to_fract f * to_fract (fa x)\n\ngoal (1 subgoal):\n 1. (\\<And>rr.\n        (\\<And>i.\n            i < r \\<Longrightarrow>\n            coeff p i = to_fract f * to_fract (rr i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ?i1 < r \\<Longrightarrow> coeff p ?i1 = to_fract f * to_fract (rr ?i1)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "let ?r = \"coeff p r\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from cont[OF cq1]"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff q i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff q j))", "obtain s where \n        s: \"\\<not> divides_ff ?f (coeff q s)\" and s': \"\\<And> i. i < s \\<Longrightarrow> divides_ff ?f (coeff q i)\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     \\<not> divides_ff (to_fract f) (coeff q i) \\<and>\n     (\\<forall>j<i. divides_ff (to_fract f) (coeff q j))\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>\\<not> divides_ff (to_fract f) (coeff q s);\n         \\<And>i.\n            i < s \\<Longrightarrow>\n            divides_ff (to_fract f) (coeff q i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<not> divides_ff (to_fract f) (coeff q s)\n  ?i1 < s \\<Longrightarrow> divides_ff (to_fract f) (coeff q ?i1)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"\\<forall> i. \\<exists> k. i < s \\<longrightarrow> coeff q i = ?f * to_fract k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>k.\n          i < s \\<longrightarrow> coeff q i = to_fract f * to_fract k", "using divides_ff_coeff[OF cq s']"], ["proof (prove)\nusing this:\n  ?i < s \\<Longrightarrow> \\<exists>m. coeff q ?i = to_fract f * to_fract m\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>k.\n          i < s \\<longrightarrow> coeff q i = to_fract f * to_fract k", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<exists>k. i < s \\<longrightarrow> coeff q i = to_fract f * to_fract k\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>fa. \\<forall>x<s. coeff q x = to_fract f * to_fract (fa x)", "obtain ss where s': \"\\<And> i. i < s \\<Longrightarrow> coeff q i = ?f * to_fract (ss i)\""], ["proof (prove)\nusing this:\n  \\<exists>fa. \\<forall>x<s. coeff q x = to_fract f * to_fract (fa x)\n\ngoal (1 subgoal):\n 1. (\\<And>ss.\n        (\\<And>i.\n            i < s \\<Longrightarrow>\n            coeff q i = to_fract f * to_fract (ss i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ?i1 < s \\<Longrightarrow> coeff q ?i1 = to_fract f * to_fract (ss ?i1)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from range_coeffs_to_fract[OF cp]"], ["proof (chain)\npicking this:\n  \\<exists>m. coeff p ?i = to_fract m", "have \"\\<forall> i. \\<exists> m. coeff p i = to_fract m\""], ["proof (prove)\nusing this:\n  \\<exists>m. coeff p ?i = to_fract m\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<exists>m. coeff p i = to_fract m", ".."], ["proof (state)\nthis:\n  \\<forall>i. \\<exists>m. coeff p i = to_fract m\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>f. \\<forall>x. coeff p x = to_fract (f x)", "obtain pi where pi: \"\\<And> i. coeff p i = to_fract (pi i)\""], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>x. coeff p x = to_fract (f x)\n\ngoal (1 subgoal):\n 1. (\\<And>pi.\n        (\\<And>i. coeff p i = to_fract (pi i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  coeff p ?i1 = to_fract (pi ?i1)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from range_coeffs_to_fract[OF cq]"], ["proof (chain)\npicking this:\n  \\<exists>m. coeff q ?i = to_fract m", "have \"\\<forall> i. \\<exists> m. coeff q i = to_fract m\""], ["proof (prove)\nusing this:\n  \\<exists>m. coeff q ?i = to_fract m\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<exists>m. coeff q i = to_fract m", ".."], ["proof (state)\nthis:\n  \\<forall>i. \\<exists>m. coeff q i = to_fract m\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from choice[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>f. \\<forall>x. coeff q x = to_fract (f x)", "obtain qi where qi: \"\\<And> i. coeff q i = to_fract (qi i)\""], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>x. coeff q x = to_fract (f x)\n\ngoal (1 subgoal):\n 1. (\\<And>qi.\n        (\\<And>i. coeff q i = to_fract (qi i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  coeff q ?i1 = to_fract (qi ?i1)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "let ?s = \"coeff q s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "let ?g = \"\\<lambda> i. coeff p i * coeff q (r + s - i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "define a where \"a = (\\<Sum>i\\<in>{..<r}. (rr i * qi (r + s - i)))\""], ["proof (state)\nthis:\n  a = (\\<Sum>i<r. rr i * qi (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "define b where \"b = (\\<Sum> i \\<in> {Suc r..r + s}. pi i * (ss (r + s - i)))\""], ["proof (state)\nthis:\n  b = (\\<Sum>i = Suc r..r + s. pi i * ss (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"coeff (p * q) (r + s) = (\\<Sum>i\\<le>r + s. ?g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (p * q) (r + s) =\n    (\\<Sum>i\\<le>r + s. coeff p i * coeff q (r + s - i))", "unfolding coeff_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>r + s. coeff p i * coeff q (r + s - i)) =\n    (\\<Sum>i\\<le>r + s. coeff p i * coeff q (r + s - i))", ".."], ["proof (state)\nthis:\n  coeff (p * q) (r + s) =\n  (\\<Sum>i\\<le>r + s. coeff p i * coeff q (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  coeff (p * q) (r + s) =\n  (\\<Sum>i\\<le>r + s. coeff p i * coeff q (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"{..r+s} = {..< r} \\<union> {r .. r+s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..r + s} = {..<r} \\<union> {r..r + s}", "by auto"], ["proof (state)\nthis:\n  {..r + s} = {..<r} \\<union> {r..r + s}\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  {..r + s} = {..<r} \\<union> {r..r + s}\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"(\\<Sum>i\\<in>{..<r} \\<union> {r..r + s}. ?g i)\n        = (\\<Sum>i\\<in>{..<r}. ?g i) + (\\<Sum> i \\<in> {r..r + s}. ?g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{..<r} \\<union> {r..r + s}.\n       coeff p i * coeff q (r + s - i)) =\n    (\\<Sum>i<r. coeff p i * coeff q (r + s - i)) +\n    (\\<Sum>i = r..r + s. coeff p i * coeff q (r + s - i))", "by (rule sum.union_disjoint, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{..<r} \\<union> {r..r + s}.\n     coeff p i * coeff q (r + s - i)) =\n  (\\<Sum>i<r. coeff p i * coeff q (r + s - i)) +\n  (\\<Sum>i = r..r + s. coeff p i * coeff q (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{..<r} \\<union> {r..r + s}.\n     coeff p i * coeff q (r + s - i)) =\n  (\\<Sum>i<r. coeff p i * coeff q (r + s - i)) +\n  (\\<Sum>i = r..r + s. coeff p i * coeff q (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"(\\<Sum>i\\<in>{..<r}. ?g i) = (\\<Sum>i\\<in>{..<r}. ?f * (to_fract (rr i) * to_fract (qi (r + s - i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<r. coeff p i * coeff q (r + s - i)) =\n    (\\<Sum>i<r. to_fract f * (to_fract (rr i) * to_fract (qi (r + s - i))))", "by (rule sum.cong[OF refl], insert r' qi, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i<r. coeff p i * coeff q (r + s - i)) =\n  (\\<Sum>i<r. to_fract f * (to_fract (rr i) * to_fract (qi (r + s - i))))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<r. coeff p i * coeff q (r + s - i)) =\n  (\\<Sum>i<r. to_fract f * (to_fract (rr i) * to_fract (qi (r + s - i))))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"\\<dots> = to_fract (f * a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<r.\n        to_fract f * (to_fract (rr i) * to_fract (qi (r + s - i)))) =\n    to_fract (f * a)", "by (simp add: a_def sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>i<r. to_fract f * (to_fract (rr i) * to_fract (qi (r + s - i)))) =\n  to_fract (f * a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>i<r. to_fract f * (to_fract (rr i) * to_fract (qi (r + s - i)))) =\n  to_fract (f * a)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"(\\<Sum> i \\<in> {r..r + s}. ?g i) = ?g r + (\\<Sum> i \\<in> {Suc r..r + s}. ?g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = r..r + s. coeff p i * coeff q (r + s - i)) =\n    coeff p r * coeff q (r + s - r) +\n    (\\<Sum>i = Suc r..r + s. coeff p i * coeff q (r + s - i))", "by (subst sum.remove[of _ r], auto intro: sum.cong)"], ["proof (state)\nthis:\n  (\\<Sum>i = r..r + s. coeff p i * coeff q (r + s - i)) =\n  coeff p r * coeff q (r + s - r) +\n  (\\<Sum>i = Suc r..r + s. coeff p i * coeff q (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = r..r + s. coeff p i * coeff q (r + s - i)) =\n  coeff p r * coeff q (r + s - r) +\n  (\\<Sum>i = Suc r..r + s. coeff p i * coeff q (r + s - i))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"(\\<Sum> i \\<in> {Suc r..r + s}. ?g i) = (\\<Sum> i \\<in> {Suc r..r + s}. ?f * (to_fract (pi i) * to_fract (ss (r + s - i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = Suc r..r + s. coeff p i * coeff q (r + s - i)) =\n    (\\<Sum>i = Suc r..r + s.\n        to_fract f * (to_fract (pi i) * to_fract (ss (r + s - i))))", "by (rule sum.cong[OF refl], insert s' pi, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = Suc r..r + s. coeff p i * coeff q (r + s - i)) =\n  (\\<Sum>i = Suc r..r + s.\n      to_fract f * (to_fract (pi i) * to_fract (ss (r + s - i))))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = Suc r..r + s. coeff p i * coeff q (r + s - i)) =\n  (\\<Sum>i = Suc r..r + s.\n      to_fract f * (to_fract (pi i) * to_fract (ss (r + s - i))))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "have \"\\<dots> = to_fract (f * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = Suc r..r + s.\n        to_fract f * (to_fract (pi i) * to_fract (ss (r + s - i)))) =\n    to_fract (f * b)", "by (simp add: sum_distrib_left b_def)"], ["proof (state)\nthis:\n  (\\<Sum>i = Suc r..r + s.\n      to_fract f * (to_fract (pi i) * to_fract (ss (r + s - i)))) =\n  to_fract (f * b)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  coeff (p * q) (r + s) =\n  to_fract (f * a) + (coeff p r * coeff q (r + s - r) + to_fract (f * b))", "have cpq: \"coeff (p * q) (r + s) = to_fract (f * (a + b)) + ?r * ?s\""], ["proof (prove)\nusing this:\n  coeff (p * q) (r + s) =\n  to_fract (f * a) + (coeff p r * coeff q (r + s - r) + to_fract (f * b))\n\ngoal (1 subgoal):\n 1. coeff (p * q) (r + s) = to_fract (f * (a + b)) + coeff p r * coeff q s", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  coeff (p * q) (r + s) = to_fract (f * (a + b)) + coeff p r * coeff q s\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  coeff (p * q) (r + s) = to_fract (f * (a + b)) + coeff p r * coeff q s\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from dvd[of \"coeff (p * q) i\"]"], ["proof (chain)\npicking this:\n  coeff (p * q) i \\<in> set (coeffs (p * q)) \\<Longrightarrow>\n  divides_ff (to_fract f) (coeff (p * q) i)", "have \"divides_ff ?f (coeff (p * q) i)\""], ["proof (prove)\nusing this:\n  coeff (p * q) i \\<in> set (coeffs (p * q)) \\<Longrightarrow>\n  divides_ff (to_fract f) (coeff (p * q) i)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) (coeff (p * q) i)", "using range_coeff[of \"p * q\"]"], ["proof (prove)\nusing this:\n  coeff (p * q) i \\<in> set (coeffs (p * q)) \\<Longrightarrow>\n  divides_ff (to_fract f) (coeff (p * q) i)\n  range (coeff (p * q)) = insert 0 (set (coeffs (p * q)))\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) (coeff (p * q) i)", "by (cases \"coeff (p * q) i = 0\", auto simp: divides_ff_def)"], ["proof (state)\nthis:\n  divides_ff (to_fract f) (coeff (p * q) i)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  divides_ff (to_fract f) (coeff (p * q) ?i3)\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from this[of \"r + s\", unfolded cpq]"], ["proof (chain)\npicking this:\n  divides_ff (to_fract f) (to_fract (f * (a + b)) + coeff p r * coeff q s)", "have \"divides_ff ?f (to_fract (f * (a + b) + pi r * qi s))\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract f) (to_fract (f * (a + b)) + coeff p r * coeff q s)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) (to_fract (f * (a + b) + pi r * qi s))", "unfolding pi qi"], ["proof (prove)\nusing this:\n  divides_ff (to_fract f)\n   (to_fract (f * (a + b)) + to_fract (pi r) * to_fract (qi s))\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract f) (to_fract (f * (a + b) + pi r * qi s))", "by simp"], ["proof (state)\nthis:\n  divides_ff (to_fract f) (to_fract (f * (a + b) + pi r * qi s))\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from this[unfolded divides_ff_to_fract]"], ["proof (chain)\npicking this:\n  f dvd f * (a + b) + pi r * qi s", "have \"f dvd pi r * qi s\""], ["proof (prove)\nusing this:\n  f dvd f * (a + b) + pi r * qi s\n\ngoal (1 subgoal):\n 1. f dvd pi r * qi s", "by (metis dvd_add_times_triv_left_iff mult.commute)"], ["proof (state)\nthis:\n  f dvd pi r * qi s\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "from prime[OF this]"], ["proof (chain)\npicking this:\n  f dvd pi r \\<or> f dvd qi s", "have \"f dvd pi r \\<or> f dvd qi s\""], ["proof (prove)\nusing this:\n  f dvd pi r \\<or> f dvd qi s\n\ngoal (1 subgoal):\n 1. f dvd pi r \\<or> f dvd qi s", "by auto"], ["proof (state)\nthis:\n  f dvd pi r \\<or> f dvd qi s\n\ngoal (1 subgoal):\n 1. \\<not> content_ff (p * q) =dff 1 \\<Longrightarrow> False", "with r s"], ["proof (chain)\npicking this:\n  \\<not> divides_ff (to_fract f) (coeff p r)\n  \\<not> divides_ff (to_fract f) (coeff q s)\n  f dvd pi r \\<or> f dvd qi s", "show False"], ["proof (prove)\nusing this:\n  \\<not> divides_ff (to_fract f) (coeff p r)\n  \\<not> divides_ff (to_fract f) (coeff q s)\n  f dvd pi r \\<or> f dvd qi s\n\ngoal (1 subgoal):\n 1. False", "unfolding pi qi"], ["proof (prove)\nusing this:\n  \\<not> divides_ff (to_fract f) (to_fract (pi r))\n  \\<not> divides_ff (to_fract f) (to_fract (qi s))\n  f dvd pi r \\<or> f dvd qi s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  content_ff (p * q) =dff 1\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "}"], ["proof (state)\nthis:\n  \\<lbrakk>content_ff ?pa2 =dff 1; content_ff ?qa2 =dff 1\\<rbrakk>\n  \\<Longrightarrow> content_ff (?pa2 * ?qa2) =dff 1\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "note main = this"], ["proof (state)\nthis:\n  \\<lbrakk>content_ff ?pa2 =dff 1; content_ff ?qa2 =dff 1\\<rbrakk>\n  \\<Longrightarrow> content_ff (?pa2 * ?qa2) =dff 1\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "define n where \"n \\<equiv> normalize_content_ff :: 'a fract poly \\<Rightarrow> 'a fract poly\""], ["proof (state)\nthis:\n  n \\<equiv> normalize_content_ff\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "let ?s = \"\\<lambda> p. smult (content_ff p) (n p)\""], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have \"?c (p * q) = ?c (?s p * ?s q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (p * q) =\n    content_ff (smult (content_ff p) (n p) * smult (content_ff q) (n q))", "unfolding smult_normalize_content_ff n_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (p * q) = content_ff (p * q)", "by simp"], ["proof (state)\nthis:\n  content_ff (p * q) =\n  content_ff (smult (content_ff p) (n p) * smult (content_ff q) (n q))\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "also"], ["proof (state)\nthis:\n  content_ff (p * q) =\n  content_ff (smult (content_ff p) (n p) * smult (content_ff q) (n q))\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have \"?s p * ?s q = smult (?c p * ?c q) (n p * n q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (content_ff p) (n p) * smult (content_ff q) (n q) =\n    smult (content_ff p * content_ff q) (n p * n q)", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  smult (content_ff p) (n p) * smult (content_ff q) (n q) =\n  smult (content_ff p * content_ff q) (n p * n q)\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "also"], ["proof (state)\nthis:\n  smult (content_ff p) (n p) * smult (content_ff q) (n q) =\n  smult (content_ff p * content_ff q) (n p * n q)\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have \"?c (\\<dots>) =dff (?c p * ?c q) * ?c (n p * n q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (smult (content_ff p * content_ff q) (n p * n q)) =dff\n    content_ff p * content_ff q * content_ff (n p * n q)", "by (rule content_ff_smult)"], ["proof (state)\nthis:\n  content_ff (smult (content_ff p * content_ff q) (n p * n q)) =dff\n  content_ff p * content_ff q * content_ff (n p * n q)\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "also"], ["proof (state)\nthis:\n  content_ff (smult (content_ff p * content_ff q) (n p * n q)) =dff\n  content_ff p * content_ff q * content_ff (n p * n q)\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "have \"?c (n p * n q) =dff 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (n p * n q) =dff 1", "unfolding n_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff p * normalize_content_ff q) =dff 1", "by (rule main, insert p q, auto simp: content_ff_normalize_content_ff_1)"], ["proof (state)\nthis:\n  content_ff (n p * n q) =dff 1\n\ngoal (2 subgoals):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q\n 2. \\<not> (p = 0 \\<or> q = 0) \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "finally"], ["proof (chain)\npicking this:\n  content_ff (p * q) =dff content_ff p * content_ff q * 1", "show ?thesis"], ["proof (prove)\nusing this:\n  content_ff (p * q) =dff content_ff p * content_ff q * 1\n\ngoal (1 subgoal):\n 1. content_ff (p * q) =dff content_ff p * content_ff q", "by simp"], ["proof (state)\nthis:\n  content_ff (p * q) =dff content_ff p * content_ff q\n\ngoal (1 subgoal):\n 1. p = 0 \\<or> q = 0 \\<Longrightarrow>\n    content_ff (p * q) =dff content_ff p * content_ff q", "qed auto"], ["", "abbreviation (input) \"content_ff_ff p \\<equiv> content_ff (map_poly to_fract p)\""], ["", "lemma factorization_to_fract:\n  assumes q: \"q \\<noteq> 0\" and factor: \"map_poly to_fract (p :: 'a :: ufd poly) = q * r\"\n  shows \"\\<exists> q' r' c. c \\<noteq> 0 \\<and> q = smult c (map_poly to_fract q') \\<and>\n    r = smult (inverse c) (map_poly to_fract r') \\<and>\n    content_ff_ff q' =dff 1 \\<and> p = q' * r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "let ?c = content_ff"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "let ?p = \"map_poly to_fract p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "interpret map_poly_inj_comm_ring_hom \"to_fract :: 'a \\<Rightarrow> _\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_comm_ring_hom to_fract", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "define cq where \"cq \\<equiv> normalize_content_ff q\""], ["proof (state)\nthis:\n  cq \\<equiv> normalize_content_ff q\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "define cr where \"cr \\<equiv> smult (content_ff q) r\""], ["proof (state)\nthis:\n  cr \\<equiv> smult (content_ff q) r\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "define q' where \"q' \\<equiv> map_poly inv_embed cq\""], ["proof (state)\nthis:\n  q' \\<equiv> map_poly inv_embed cq\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "define r' where \"r' \\<equiv> map_poly inv_embed cr\""], ["proof (state)\nthis:\n  r' \\<equiv> map_poly inv_embed cr\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "have cp_ff: \"?c ?p \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract p) \\<in> range to_fract", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from smult_normalize_content_ff[of q]"], ["proof (chain)\npicking this:\n  smult (content_ff q) (normalize_content_ff q) = q", "have cqs: \"q = smult (content_ff q) cq\""], ["proof (prove)\nusing this:\n  smult (content_ff q) (normalize_content_ff q) = q\n\ngoal (1 subgoal):\n 1. q = smult (content_ff q) cq", "unfolding cq_def"], ["proof (prove)\nusing this:\n  smult (content_ff q) (normalize_content_ff q) = q\n\ngoal (1 subgoal):\n 1. q = smult (content_ff q) (normalize_content_ff q)", ".."], ["proof (state)\nthis:\n  q = smult (content_ff q) cq\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from content_ff_normalize_content_ff_1[OF q]"], ["proof (chain)\npicking this:\n  content_ff (normalize_content_ff q) =dff 1", "have c_cq: \"content_ff cq =dff 1\""], ["proof (prove)\nusing this:\n  content_ff (normalize_content_ff q) =dff 1\n\ngoal (1 subgoal):\n 1. content_ff cq =dff 1", "unfolding cq_def"], ["proof (prove)\nusing this:\n  content_ff (normalize_content_ff q) =dff 1\n\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff q) =dff 1", "."], ["proof (state)\nthis:\n  content_ff cq =dff 1\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from content_ff_1_coeffs_to_fract[OF this]"], ["proof (chain)\npicking this:\n  set (coeffs cq) \\<subseteq> range to_fract", "have cq_ff: \"set (coeffs cq) \\<subseteq> range to_fract\""], ["proof (prove)\nusing this:\n  set (coeffs cq) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. set (coeffs cq) \\<subseteq> range to_fract", "."], ["proof (state)\nthis:\n  set (coeffs cq) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "have factor: \"?p = cq * cr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly to_fract p = cq * cr", "unfolding factor cr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. q * r = cq * smult (content_ff q) r", "using cqs"], ["proof (prove)\nusing this:\n  q = smult (content_ff q) cq\n\ngoal (1 subgoal):\n 1. q * r = cq * smult (content_ff q) r", "by (metis mult_smult_left mult_smult_right)"], ["proof (state)\nthis:\n  map_poly to_fract p = cq * cr\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from gauss_lemma[of cq cr]"], ["proof (chain)\npicking this:\n  content_ff (cq * cr) =dff content_ff cq * content_ff cr", "have cp: \"?c ?p =dff ?c cq * ?c cr\""], ["proof (prove)\nusing this:\n  content_ff (cq * cr) =dff content_ff cq * content_ff cr\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract p) =dff content_ff cq * content_ff cr", "unfolding factor"], ["proof (prove)\nusing this:\n  content_ff (cq * cr) =dff content_ff cq * content_ff cr\n\ngoal (1 subgoal):\n 1. content_ff (cq * cr) =dff content_ff cq * content_ff cr", "."], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) =dff content_ff cq * content_ff cr\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "with c_cq"], ["proof (chain)\npicking this:\n  content_ff cq =dff 1\n  content_ff (map_poly to_fract p) =dff content_ff cq * content_ff cr", "have \"?c ?p =dff ?c cr\""], ["proof (prove)\nusing this:\n  content_ff cq =dff 1\n  content_ff (map_poly to_fract p) =dff content_ff cq * content_ff cr\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract p) =dff content_ff cr", "by (metis eq_dff_mult_right_trans mult.commute mult.right_neutral)"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) =dff content_ff cr\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "with cp_ff"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract p) \\<in> range to_fract\n  content_ff (map_poly to_fract p) =dff content_ff cr", "have \"?c cr \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract p) \\<in> range to_fract\n  content_ff (map_poly to_fract p) =dff content_ff cr\n\ngoal (1 subgoal):\n 1. content_ff cr \\<in> range to_fract", "by (metis divides_ff_def to_fract_hom.hom_mult eq_dff_def image_iff range_eqI)"], ["proof (state)\nthis:\n  content_ff cr \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from content_ff_to_fract_coeffs_to_fract[OF this]"], ["proof (chain)\npicking this:\n  set (coeffs cr) \\<subseteq> range to_fract", "have cr_ff: \"set (coeffs cr) \\<subseteq> range to_fract\""], ["proof (prove)\nusing this:\n  set (coeffs cr) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. set (coeffs cr) \\<subseteq> range to_fract", "by auto"], ["proof (state)\nthis:\n  set (coeffs cr) \\<subseteq> range to_fract\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "have cq: \"cq = map_poly to_fract q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cq = map_poly to_fract q'", "unfolding q'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cq = map_poly to_fract (map_poly inv_embed cq)", "by (rule range_to_fract_embed_poly[OF cq_ff])"], ["proof (state)\nthis:\n  cq = map_poly to_fract q'\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "have cr: \"cr = map_poly to_fract r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cr = map_poly to_fract r'", "unfolding r'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cr = map_poly to_fract (map_poly inv_embed cr)", "by (rule range_to_fract_embed_poly[OF cr_ff])"], ["proof (state)\nthis:\n  cr = map_poly to_fract r'\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from factor[unfolded cq cr]"], ["proof (chain)\npicking this:\n  map_poly to_fract p = map_poly to_fract q' * map_poly to_fract r'", "have p: \"p = q' * r'\""], ["proof (prove)\nusing this:\n  map_poly to_fract p = map_poly to_fract q' * map_poly to_fract r'\n\ngoal (1 subgoal):\n 1. p = q' * r'", "by (simp add: injectivity)"], ["proof (state)\nthis:\n  p = q' * r'\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from c_cq"], ["proof (chain)\npicking this:\n  content_ff cq =dff 1", "have ctnt: \"content_ff_ff q' =dff 1\""], ["proof (prove)\nusing this:\n  content_ff cq =dff 1\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract q') =dff 1", "using cq q'_def"], ["proof (prove)\nusing this:\n  content_ff cq =dff 1\n  cq = map_poly to_fract q'\n  q' \\<equiv> map_poly inv_embed cq\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract q') =dff 1", "by force"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q') =dff 1\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from cqs"], ["proof (chain)\npicking this:\n  q = smult (content_ff q) cq", "have idq: \"q = smult (?c q) (map_poly to_fract q')\""], ["proof (prove)\nusing this:\n  q = smult (content_ff q) cq\n\ngoal (1 subgoal):\n 1. q = smult (content_ff q) (map_poly to_fract q')", "unfolding cq"], ["proof (prove)\nusing this:\n  q = smult (content_ff q) (map_poly to_fract q')\n\ngoal (1 subgoal):\n 1. q = smult (content_ff q) (map_poly to_fract q')", "."], ["proof (state)\nthis:\n  q = smult (content_ff q) (map_poly to_fract q')\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "with q"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  q = smult (content_ff q) (map_poly to_fract q')", "have cq: \"?c q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = smult (content_ff q) (map_poly to_fract q')\n\ngoal (1 subgoal):\n 1. content_ff q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  content_ff q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "have \"r = smult (inverse (?c q)) cr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = smult (inverse (content_ff q)) cr", "unfolding cr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r = smult (inverse (content_ff q)) (smult (content_ff q) r)", "using cq"], ["proof (prove)\nusing this:\n  content_ff q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. r = smult (inverse (content_ff q)) (smult (content_ff q) r)", "by auto"], ["proof (state)\nthis:\n  r = smult (inverse (content_ff q)) cr\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "also"], ["proof (state)\nthis:\n  r = smult (inverse (content_ff q)) cr\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "have \"cr = map_poly to_fract r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cr = map_poly to_fract r'", "by (rule cr)"], ["proof (state)\nthis:\n  cr = map_poly to_fract r'\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "finally"], ["proof (chain)\npicking this:\n  r = smult (inverse (content_ff q)) (map_poly to_fract r')", "have idr: \"r = smult (inverse (?c q)) (map_poly to_fract r')\""], ["proof (prove)\nusing this:\n  r = smult (inverse (content_ff q)) (map_poly to_fract r')\n\ngoal (1 subgoal):\n 1. r = smult (inverse (content_ff q)) (map_poly to_fract r')", "by auto"], ["proof (state)\nthis:\n  r = smult (inverse (content_ff q)) (map_poly to_fract r')\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "from cq p ctnt idq idr"], ["proof (chain)\npicking this:\n  content_ff q \\<noteq> 0\n  p = q' * r'\n  content_ff (map_poly to_fract q') =dff 1\n  q = smult (content_ff q) (map_poly to_fract q')\n  r = smult (inverse (content_ff q)) (map_poly to_fract r')", "show ?thesis"], ["proof (prove)\nusing this:\n  content_ff q \\<noteq> 0\n  p = q' * r'\n  content_ff (map_poly to_fract q') =dff 1\n  q = smult (content_ff q) (map_poly to_fract q')\n  r = smult (inverse (content_ff q)) (map_poly to_fract r')\n\ngoal (1 subgoal):\n 1. \\<exists>q' r' c.\n       c \\<noteq> 0 \\<and>\n       q = smult c (map_poly to_fract q') \\<and>\n       r = smult (inverse c) (map_poly to_fract r') \\<and>\n       content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "by blast"], ["proof (state)\nthis:\n  \\<exists>q' r' c.\n     c \\<noteq> 0 \\<and>\n     q = smult c (map_poly to_fract q') \\<and>\n     r = smult (inverse c) (map_poly to_fract r') \\<and>\n     content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_PM_M_PFM:\n  assumes irr: \"irreducible p\"\n  shows \"degree p = 0 \\<and> irreducible (coeff p 0) \\<or> \n  degree p \\<noteq> 0 \\<and> irreducible (map_poly to_fract p) \\<and> content_ff_ff p =dff 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "interpret map_poly_inj_idom_hom to_fract"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_idom_hom to_fract", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from irr[unfolded irreducible_altdef]"], ["proof (chain)\npicking this:\n  p \\<noteq> 0 \\<and>\n  \\<not> p dvd 1 \\<and>\n  (\\<forall>b. b dvd p \\<longrightarrow> p dvd b \\<or> b dvd 1)", "have p0: \"p \\<noteq> 0\" and irr: \"\\<not> p dvd 1\" \"\\<And> b. b dvd p \\<Longrightarrow> \\<not> p dvd b \\<Longrightarrow> b dvd 1\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0 \\<and>\n  \\<not> p dvd 1 \\<and>\n  (\\<forall>b. b dvd p \\<longrightarrow> p dvd b \\<or> b dvd 1)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 &&&\n    \\<not> p dvd 1 &&&\n    (\\<And>b.\n        \\<lbrakk>b dvd p; \\<not> p dvd b\\<rbrakk> \\<Longrightarrow> b dvd 1)", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  \\<not> p dvd 1\n  \\<lbrakk>?b1 dvd p; \\<not> p dvd ?b1\\<rbrakk> \\<Longrightarrow> ?b1 dvd 1\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "proof (cases \"degree p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "case True"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from degree0_coeffs[OF True]"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]", "obtain a where p: \"p = [:a:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>a. p = [:a:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p = [:a:]\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "note irr = irr[unfolded p]"], ["proof (state)\nthis:\n  \\<not> [:a:] dvd 1\n  \\<lbrakk>?b1 dvd [:a:]; \\<not> [:a:] dvd ?b1\\<rbrakk>\n  \\<Longrightarrow> ?b1 dvd 1\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from p p0"], ["proof (chain)\npicking this:\n  p = [:a:]\n  p \\<noteq> 0", "have a0: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p = [:a:]\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "moreover"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have \"\\<not> a dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> a dvd (1::'a)", "using irr(1)"], ["proof (prove)\nusing this:\n  \\<not> [:a:] dvd 1\n\ngoal (1 subgoal):\n 1. \\<not> a dvd (1::'a)", "by simp"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "moreover"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "{"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "assume \"b dvd a\" \"\\<not> a dvd b\""], ["proof (state)\nthis:\n  b dvd a\n  \\<not> a dvd b\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "hence \"[:b:] dvd [:a:]\" \"\\<not> [:a:] dvd [:b:]\""], ["proof (prove)\nusing this:\n  b dvd a\n  \\<not> a dvd b\n\ngoal (1 subgoal):\n 1. [:b:] dvd [:a:] &&& \\<not> [:a:] dvd [:b:]", "unfolding const_poly_dvd"], ["proof (prove)\nusing this:\n  b dvd a\n  \\<not> a dvd b\n\ngoal (1 subgoal):\n 1. b dvd a &&& \\<not> a dvd b", "."], ["proof (state)\nthis:\n  [:b:] dvd [:a:]\n  \\<not> [:a:] dvd [:b:]\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from irr(2)[OF this]"], ["proof (chain)\npicking this:\n  [:b:] dvd 1", "have \"b dvd 1\""], ["proof (prove)\nusing this:\n  [:b:] dvd 1\n\ngoal (1 subgoal):\n 1. b dvd (1::'a)", "unfolding const_poly_dvd_1"], ["proof (prove)\nusing this:\n  b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. b dvd (1::'a)", "."], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?b3 dvd a; \\<not> a dvd ?b3\\<rbrakk>\n  \\<Longrightarrow> ?b3 dvd (1::'a)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "ultimately"], ["proof (chain)\npicking this:\n  a \\<noteq> (0::'a)\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b3 dvd a; \\<not> a dvd ?b3\\<rbrakk>\n  \\<Longrightarrow> ?b3 dvd (1::'a)", "have \"irreducible a\""], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b3 dvd a; \\<not> a dvd ?b3\\<rbrakk>\n  \\<Longrightarrow> ?b3 dvd (1::'a)\n\ngoal (1 subgoal):\n 1. irreducible a", "unfolding irreducible_altdef"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b3 dvd a; \\<not> a dvd ?b3\\<rbrakk>\n  \\<Longrightarrow> ?b3 dvd (1::'a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) \\<and>\n    \\<not> a dvd (1::'a) \\<and>\n    (\\<forall>b. b dvd a \\<longrightarrow> a dvd b \\<or> b dvd (1::'a))", "by auto"], ["proof (state)\nthis:\n  irreducible a\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "with True"], ["proof (chain)\npicking this:\n  degree p = 0\n  irreducible a", "show ?thesis"], ["proof (prove)\nusing this:\n  degree p = 0\n  irreducible a\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "unfolding p"], ["proof (prove)\nusing this:\n  degree [:a:] = 0\n  irreducible a\n\ngoal (1 subgoal):\n 1. degree [:a:] = 0 \\<and> irreducible (coeff [:a:] 0) \\<or>\n    degree [:a:] \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract [:a:]) \\<and>\n    content_ff (map_poly to_fract [:a:]) =dff 1", "by auto"], ["proof (state)\nthis:\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irreducible (map_poly to_fract p) \\<and>\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "let ?E = \"map_poly to_fract\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "let ?p = \"?E p\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have dp: \"degree ?p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly to_fract p) \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (map_poly to_fract p) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  degree (map_poly to_fract p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from p0"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have p': \"?p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map_poly to_fract p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  map_poly to_fract p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "moreover"], ["proof (state)\nthis:\n  map_poly to_fract p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have \"\\<not> ?p dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_unit (map_poly to_fract p)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. is_unit (map_poly to_fract p) \\<Longrightarrow> False", "assume \"?p dvd 1\""], ["proof (state)\nthis:\n  is_unit (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. is_unit (map_poly to_fract p) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_unit (map_poly to_fract p)", "obtain q where id: \"?p * q = 1\""], ["proof (prove)\nusing this:\n  is_unit (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        map_poly to_fract p * q = 1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. 1 = map_poly to_fract p * k\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        map_poly to_fract p * q = 1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract p * q = 1\n\ngoal (1 subgoal):\n 1. is_unit (map_poly to_fract p) \\<Longrightarrow> False", "have deg: \"degree (?p * q) = degree ?p + degree q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly to_fract p * q) =\n    degree (map_poly to_fract p) + degree q", "by (rule degree_mult_eq, insert id, auto)"], ["proof (state)\nthis:\n  degree (map_poly to_fract p * q) = degree (map_poly to_fract p) + degree q\n\ngoal (1 subgoal):\n 1. is_unit (map_poly to_fract p) \\<Longrightarrow> False", "from arg_cong[OF id, of degree, unfolded deg] dp"], ["proof (chain)\npicking this:\n  degree (map_poly to_fract p) + degree q = degree 1\n  degree (map_poly to_fract p) \\<noteq> 0", "show False"], ["proof (prove)\nusing this:\n  degree (map_poly to_fract p) + degree q = degree 1\n  degree (map_poly to_fract p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_unit (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "moreover"], ["proof (state)\nthis:\n  \\<not> is_unit (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "{"], ["proof (state)\nthis:\n  \\<not> is_unit (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "assume \"q dvd ?p\" and ndvd: \"\\<not> ?p dvd q\""], ["proof (state)\nthis:\n  q dvd map_poly to_fract p\n  \\<not> map_poly to_fract p dvd q\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "then"], ["proof (chain)\npicking this:\n  q dvd map_poly to_fract p\n  \\<not> map_poly to_fract p dvd q", "obtain r where fact: \"?p = q * r\""], ["proof (prove)\nusing this:\n  q dvd map_poly to_fract p\n  \\<not> map_poly to_fract p dvd q\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        map_poly to_fract p = q * r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. map_poly to_fract p = q * k\n  \\<nexists>k. q = map_poly to_fract p * k\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        map_poly to_fract p = q * r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract p = q * r\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "with p'"], ["proof (chain)\npicking this:\n  map_poly to_fract p \\<noteq> 0\n  map_poly to_fract p = q * r", "have q0: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  map_poly to_fract p \\<noteq> 0\n  map_poly to_fract p = q * r\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from factorization_to_fract[OF this fact]"], ["proof (chain)\npicking this:\n  \\<exists>q' r' c.\n     c \\<noteq> 0 \\<and>\n     q = smult c (map_poly to_fract q') \\<and>\n     r = smult (inverse c) (map_poly to_fract r') \\<and>\n     content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'", "obtain q' r' c where *: \"c \\<noteq> 0\" \"q = smult c (?E q')\"\n        \"r = smult (inverse c) (?E r')\" \"content_ff_ff q' =dff 1\"\n        \"p = q' * r'\""], ["proof (prove)\nusing this:\n  \\<exists>q' r' c.\n     c \\<noteq> 0 \\<and>\n     q = smult c (map_poly to_fract q') \\<and>\n     r = smult (inverse c) (map_poly to_fract r') \\<and>\n     content_ff (map_poly to_fract q') =dff 1 \\<and> p = q' * r'\n\ngoal (1 subgoal):\n 1. (\\<And>c q' r'.\n        \\<lbrakk>c \\<noteq> 0; q = smult c (map_poly to_fract q');\n         r = smult (inverse c) (map_poly to_fract r');\n         content_ff (map_poly to_fract q') =dff 1; p = q' * r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n  q = smult c (map_poly to_fract q')\n  r = smult (inverse c) (map_poly to_fract r')\n  content_ff (map_poly to_fract q') =dff 1\n  p = q' * r'\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "hence \"q' dvd p\""], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n  q = smult c (map_poly to_fract q')\n  r = smult (inverse c) (map_poly to_fract r')\n  content_ff (map_poly to_fract q') =dff 1\n  p = q' * r'\n\ngoal (1 subgoal):\n 1. q' dvd p", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n  q = smult c (map_poly to_fract q')\n  r = smult (inverse c) (map_poly to_fract r')\n  content_ff (map_poly to_fract q') =dff 1\n  p = q' * r'\n\ngoal (1 subgoal):\n 1. \\<exists>k. p = q' * k", "by auto"], ["proof (state)\nthis:\n  q' dvd p\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "note irr = irr(2)[OF this]"], ["proof (state)\nthis:\n  \\<not> p dvd q' \\<Longrightarrow> q' dvd 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have \"\\<not> p dvd q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd q'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p dvd q' \\<Longrightarrow> False", "assume \"p dvd q'\""], ["proof (state)\nthis:\n  p dvd q'\n\ngoal (1 subgoal):\n 1. p dvd q' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p dvd q'", "obtain u where q': \"q' = p * u\""], ["proof (prove)\nusing this:\n  p dvd q'\n\ngoal (1 subgoal):\n 1. (\\<And>u. q' = p * u \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. q' = p * k\n\ngoal (1 subgoal):\n 1. (\\<And>u. q' = p * u \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  q' = p * u\n\ngoal (1 subgoal):\n 1. p dvd q' \\<Longrightarrow> False", "from arg_cong[OF this, of \"\\<lambda> x. smult c (?E x)\", unfolded *(2)[symmetric]]"], ["proof (chain)\npicking this:\n  q = smult c (map_poly to_fract (p * u))", "have \"q = ?p * smult c (?E u)\""], ["proof (prove)\nusing this:\n  q = smult c (map_poly to_fract (p * u))\n\ngoal (1 subgoal):\n 1. q = map_poly to_fract p * smult c (map_poly to_fract u)", "by simp"], ["proof (state)\nthis:\n  q = map_poly to_fract p * smult c (map_poly to_fract u)\n\ngoal (1 subgoal):\n 1. p dvd q' \\<Longrightarrow> False", "hence \"?p dvd q\""], ["proof (prove)\nusing this:\n  q = map_poly to_fract p * smult c (map_poly to_fract u)\n\ngoal (1 subgoal):\n 1. map_poly to_fract p dvd q", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  q = map_poly to_fract p * smult c (map_poly to_fract u)\n\ngoal (1 subgoal):\n 1. \\<exists>k. q = map_poly to_fract p * k", "by blast"], ["proof (state)\nthis:\n  map_poly to_fract p dvd q\n\ngoal (1 subgoal):\n 1. p dvd q' \\<Longrightarrow> False", "with ndvd"], ["proof (chain)\npicking this:\n  \\<not> map_poly to_fract p dvd q\n  map_poly to_fract p dvd q", "show False"], ["proof (prove)\nusing this:\n  \\<not> map_poly to_fract p dvd q\n  map_poly to_fract p dvd q\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> p dvd q'\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from irr[OF this]"], ["proof (chain)\npicking this:\n  q' dvd 1", "have \"q' dvd 1\""], ["proof (prove)\nusing this:\n  q' dvd 1\n\ngoal (1 subgoal):\n 1. q' dvd 1", "."], ["proof (state)\nthis:\n  q' dvd 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from divides_degree[OF this]"], ["proof (chain)\npicking this:\n  degree q' \\<le> degree 1 \\<or> 1 = 0", "have \"degree q' = 0\""], ["proof (prove)\nusing this:\n  degree q' \\<le> degree 1 \\<or> 1 = 0\n\ngoal (1 subgoal):\n 1. degree q' = 0", "by auto"], ["proof (state)\nthis:\n  degree q' = 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. q' = [:a:]", "obtain a' where \"q' = [:a':]\""], ["proof (prove)\nusing this:\n  \\<exists>a. q' = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>a'. q' = [:a':] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q' = [:a':]\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from *(2)[unfolded this]"], ["proof (chain)\npicking this:\n  q = smult c (map_poly to_fract [:a':])", "obtain a where q: \"q = [:a:]\""], ["proof (prove)\nusing this:\n  q = smult c (map_poly to_fract [:a':])\n\ngoal (1 subgoal):\n 1. (\\<And>a. q = [:a:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (simp add: to_fract_hom.map_poly_pCons_hom)"], ["proof (state)\nthis:\n  q = [:a:]\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "with q0"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  q = [:a:]", "have a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = [:a:]\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have \"q dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit q", "unfolding q const_poly_dvd_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit a", "using a"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_unit a", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>k. 1 = a * k", "by (intro exI[of _ \"inverse a\"], auto)"], ["proof (state)\nthis:\n  is_unit q\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?q4 dvd map_poly to_fract p;\n   \\<not> map_poly to_fract p dvd ?q4\\<rbrakk>\n  \\<Longrightarrow> is_unit ?q4\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "ultimately"], ["proof (chain)\npicking this:\n  map_poly to_fract p \\<noteq> 0\n  \\<not> is_unit (map_poly to_fract p)\n  \\<lbrakk>?q4 dvd map_poly to_fract p;\n   \\<not> map_poly to_fract p dvd ?q4\\<rbrakk>\n  \\<Longrightarrow> is_unit ?q4", "have irr_p': \"irreducible ?p\""], ["proof (prove)\nusing this:\n  map_poly to_fract p \\<noteq> 0\n  \\<not> is_unit (map_poly to_fract p)\n  \\<lbrakk>?q4 dvd map_poly to_fract p;\n   \\<not> map_poly to_fract p dvd ?q4\\<rbrakk>\n  \\<Longrightarrow> is_unit ?q4\n\ngoal (1 subgoal):\n 1. irreducible (map_poly to_fract p)", "unfolding irreducible_altdef"], ["proof (prove)\nusing this:\n  map_poly to_fract p \\<noteq> 0\n  \\<not> is_unit (map_poly to_fract p)\n  \\<lbrakk>?q4 dvd map_poly to_fract p;\n   \\<not> map_poly to_fract p dvd ?q4\\<rbrakk>\n  \\<Longrightarrow> is_unit ?q4\n\ngoal (1 subgoal):\n 1. map_poly to_fract p \\<noteq> 0 \\<and>\n    \\<not> is_unit (map_poly to_fract p) \\<and>\n    (\\<forall>b.\n        b dvd map_poly to_fract p \\<longrightarrow>\n        map_poly to_fract p dvd b \\<or> is_unit b)", "by auto"], ["proof (state)\nthis:\n  irreducible (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "let ?c = \"content_ff\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have \"?c ?p \\<in> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract p) \\<in> range to_fract", "by (rule content_ff_to_fract, unfold to_fract_hom.coeffs_map_poly_hom, auto)"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "then"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract p) \\<in> range to_fract", "obtain c where cp: \"?c ?p = to_fract c\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        content_ff (map_poly to_fract p) = to_fract c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) = to_fract c\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "from p' cp"], ["proof (chain)\npicking this:\n  map_poly to_fract p \\<noteq> 0\n  content_ff (map_poly to_fract p) = to_fract c", "have c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  map_poly to_fract p \\<noteq> 0\n  content_ff (map_poly to_fract p) = to_fract c\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "have \"?c ?p =dff 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract p) =dff 1", "unfolding cp"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract c =dff 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "define cp where \"cp = normalize_content_ff ?p\""], ["proof (state)\nthis:\n  cp = normalize_content_ff (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "from smult_normalize_content_ff[of ?p]"], ["proof (chain)\npicking this:\n  smult (content_ff (map_poly to_fract p))\n   (normalize_content_ff (map_poly to_fract p)) =\n  map_poly to_fract p", "have cps: \"?p = smult (to_fract c) cp\""], ["proof (prove)\nusing this:\n  smult (content_ff (map_poly to_fract p))\n   (normalize_content_ff (map_poly to_fract p)) =\n  map_poly to_fract p\n\ngoal (1 subgoal):\n 1. map_poly to_fract p = smult (to_fract c) cp", "unfolding cp_def cp"], ["proof (prove)\nusing this:\n  smult (to_fract c) (normalize_content_ff (map_poly to_fract p)) =\n  map_poly to_fract p\n\ngoal (1 subgoal):\n 1. map_poly to_fract p =\n    smult (to_fract c) (normalize_content_ff (map_poly to_fract p))", ".."], ["proof (state)\nthis:\n  map_poly to_fract p = smult (to_fract c) cp\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "from content_ff_normalize_content_ff_1[OF p']"], ["proof (chain)\npicking this:\n  content_ff (normalize_content_ff (map_poly to_fract p)) =dff 1", "have c_cp: \"content_ff cp =dff 1\""], ["proof (prove)\nusing this:\n  content_ff (normalize_content_ff (map_poly to_fract p)) =dff 1\n\ngoal (1 subgoal):\n 1. content_ff cp =dff 1", "unfolding cp_def"], ["proof (prove)\nusing this:\n  content_ff (normalize_content_ff (map_poly to_fract p)) =dff 1\n\ngoal (1 subgoal):\n 1. content_ff (normalize_content_ff (map_poly to_fract p)) =dff 1", "."], ["proof (state)\nthis:\n  content_ff cp =dff 1\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "from range_to_fract_embed_poly[OF content_ff_1_coeffs_to_fract[OF c_cp]]"], ["proof (chain)\npicking this:\n  cp = map_poly to_fract (map_poly inv_embed cp)", "obtain cp' where \"cp = ?E cp'\""], ["proof (prove)\nusing this:\n  cp = map_poly to_fract (map_poly inv_embed cp)\n\ngoal (1 subgoal):\n 1. (\\<And>cp'.\n        cp = map_poly to_fract cp' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cp = map_poly to_fract cp'\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "from cps[unfolded this]"], ["proof (chain)\npicking this:\n  map_poly to_fract p = smult (to_fract c) (map_poly to_fract cp')", "have \"p = smult c cp'\""], ["proof (prove)\nusing this:\n  map_poly to_fract p = smult (to_fract c) (map_poly to_fract cp')\n\ngoal (1 subgoal):\n 1. p = smult c cp'", "by (simp add: injectivity)"], ["proof (state)\nthis:\n  p = smult c cp'\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "hence dvd: \"[: c :] dvd p\""], ["proof (prove)\nusing this:\n  p = smult c cp'\n\ngoal (1 subgoal):\n 1. [:c:] dvd p", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  p = smult c cp'\n\ngoal (1 subgoal):\n 1. \\<exists>k. p = [:c:] * k", "by auto"], ["proof (state)\nthis:\n  [:c:] dvd p\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "have \"\\<not> p dvd [: c :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd [:c:]", "using divides_degree[of p \"[: c :]\"] c False"], ["proof (prove)\nusing this:\n  p dvd [:c:] \\<Longrightarrow> degree p \\<le> degree [:c:] \\<or> [:c:] = 0\n  c \\<noteq> (0::'a)\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> p dvd [:c:]", "by auto"], ["proof (state)\nthis:\n  \\<not> p dvd [:c:]\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "from irr(2)[OF dvd this]"], ["proof (chain)\npicking this:\n  [:c:] dvd 1", "have \"c dvd 1\""], ["proof (prove)\nusing this:\n  [:c:] dvd 1\n\ngoal (1 subgoal):\n 1. c dvd (1::'a)", "by simp"], ["proof (state)\nthis:\n  c dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "assume \"\\<not> to_fract c =dff 1\""], ["proof (state)\nthis:\n  \\<not> to_fract c =dff 1\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "from this[unfolded eq_dff_def One_fract_def to_fract_def[symmetric] divides_ff_def to_fract_mult]"], ["proof (chain)\npicking this:\n  \\<not> ((\\<exists>r. to_fract (1::'a) = to_fract c * to_fract r) \\<and>\n          (\\<exists>r. to_fract c = to_fract (1::'a) * to_fract r))", "have c1: \"\\<And> r. 1 \\<noteq> c * r\""], ["proof (prove)\nusing this:\n  \\<not> ((\\<exists>r. to_fract (1::'a) = to_fract c * to_fract r) \\<and>\n          (\\<exists>r. to_fract c = to_fract (1::'a) * to_fract r))\n\ngoal (1 subgoal):\n 1. \\<And>r. (1::'a) \\<noteq> c * r", "by (auto simp: ac_simps simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  (1::'a) \\<noteq> c * ?r3\n\ngoal (1 subgoal):\n 1. \\<not> to_fract c =dff 1 \\<Longrightarrow> False", "with \\<open>c dvd 1\\<close>"], ["proof (chain)\npicking this:\n  c dvd (1::'a)\n  (1::'a) \\<noteq> c * ?r3", "show False"], ["proof (prove)\nusing this:\n  c dvd (1::'a)\n  (1::'a) \\<noteq> c * ?r3\n\ngoal (1 subgoal):\n 1. False", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. (1::'a) = c * k\n  (1::'a) \\<noteq> c * ?r3\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "with False irr_p'"], ["proof (chain)\npicking this:\n  degree p \\<noteq> 0\n  irreducible (map_poly to_fract p)\n  content_ff (map_poly to_fract p) =dff 1", "show ?thesis"], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n  irreducible (map_poly to_fract p)\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irreducible (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "by auto"], ["proof (state)\nthis:\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irreducible (map_poly to_fract p) \\<and>\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irreducible (map_poly to_fract p) \\<and>\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_M_PM:\n  fixes p :: \"'a :: ufd poly\" assumes 0: \"degree p = 0\" and irr: \"irreducible (coeff p 0)\"\n  shows \"irreducible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible p", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> irreducible p\n 2. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> irreducible p\n 2. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. irreducible p", "using assms"], ["proof (prove)\nusing this:\n  p = 0\n  degree p = 0\n  irreducible (coeff p 0)\n\ngoal (1 subgoal):\n 1. irreducible p", "by auto"], ["proof (state)\nthis:\n  irreducible p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "from degree0_coeffs[OF 0]"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]", "obtain a where p: \"p = [:a:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>a. p = [:a:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p = [:a:]\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "with False"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  p = [:a:]", "have a0: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = [:a:]\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "from p irr"], ["proof (chain)\npicking this:\n  p = [:a:]\n  irreducible (coeff p 0)", "have \"irreducible a\""], ["proof (prove)\nusing this:\n  p = [:a:]\n  irreducible (coeff p 0)\n\ngoal (1 subgoal):\n 1. irreducible a", "by auto"], ["proof (state)\nthis:\n  irreducible a\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "from this[unfolded irreducible_altdef]"], ["proof (chain)\npicking this:\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>b. b dvd a \\<longrightarrow> a dvd b \\<or> b dvd (1::'a))", "have a1: \"\\<not> a dvd 1\" and irr: \"\\<And> b. b dvd a \\<Longrightarrow> \\<not> a dvd b \\<Longrightarrow> b dvd 1\""], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>b. b dvd a \\<longrightarrow> a dvd b \\<or> b dvd (1::'a))\n\ngoal (1 subgoal):\n 1. \\<not> a dvd (1::'a) &&&\n    (\\<And>b.\n        \\<lbrakk>b dvd a; \\<not> a dvd b\\<rbrakk>\n        \\<Longrightarrow> b dvd (1::'a))", "by auto"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b dvd a; \\<not> a dvd ?b\\<rbrakk>\n  \\<Longrightarrow> ?b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "{"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b dvd a; \\<not> a dvd ?b\\<rbrakk>\n  \\<Longrightarrow> ?b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "assume *: \"b dvd [:a:]\" \"\\<not> [:a:] dvd b\""], ["proof (state)\nthis:\n  b dvd [:a:]\n  \\<not> [:a:] dvd b\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "from divides_degree[OF this(1)] a0"], ["proof (chain)\npicking this:\n  degree b \\<le> degree [:a:] \\<or> [:a:] = 0\n  a \\<noteq> (0::'a)", "have \"degree b = 0\""], ["proof (prove)\nusing this:\n  degree b \\<le> degree [:a:] \\<or> [:a:] = 0\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree b = 0", "by auto"], ["proof (state)\nthis:\n  degree b = 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. b = [:a:]", "obtain bb where b: \"b = [: bb :]\""], ["proof (prove)\nusing this:\n  \\<exists>a. b = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>bb. b = [:bb:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  b = [:bb:]\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "from * irr[of bb]"], ["proof (chain)\npicking this:\n  b dvd [:a:]\n  \\<not> [:a:] dvd b\n  \\<lbrakk>bb dvd a; \\<not> a dvd bb\\<rbrakk>\n  \\<Longrightarrow> bb dvd (1::'a)", "have \"b dvd 1\""], ["proof (prove)\nusing this:\n  b dvd [:a:]\n  \\<not> [:a:] dvd b\n  \\<lbrakk>bb dvd a; \\<not> a dvd bb\\<rbrakk>\n  \\<Longrightarrow> bb dvd (1::'a)\n\ngoal (1 subgoal):\n 1. b dvd 1", "unfolding b const_poly_dvd"], ["proof (prove)\nusing this:\n  bb dvd a\n  \\<not> a dvd bb\n  \\<lbrakk>bb dvd a; \\<not> a dvd bb\\<rbrakk>\n  \\<Longrightarrow> bb dvd (1::'a)\n\ngoal (1 subgoal):\n 1. [:bb:] dvd 1", "by auto"], ["proof (state)\nthis:\n  b dvd 1\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?b2 dvd [:a:]; \\<not> [:a:] dvd ?b2\\<rbrakk>\n  \\<Longrightarrow> ?b2 dvd 1\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> irreducible p", "with a0 a1"], ["proof (chain)\npicking this:\n  a \\<noteq> (0::'a)\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b2 dvd [:a:]; \\<not> [:a:] dvd ?b2\\<rbrakk>\n  \\<Longrightarrow> ?b2 dvd 1", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  \\<not> a dvd (1::'a)\n  \\<lbrakk>?b2 dvd [:a:]; \\<not> [:a:] dvd ?b2\\<rbrakk>\n  \\<Longrightarrow> ?b2 dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "by (auto simp: irreducible_altdef p)"], ["proof (state)\nthis:\n  irreducible p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primitive_irreducible_imp_degree:\n \"primitive (p::'a::{semiring_gcd,idom} poly) \\<Longrightarrow> irreducible p \\<Longrightarrow> degree p > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive p; irreducible p\\<rbrakk>\n    \\<Longrightarrow> 0 < degree p", "by (unfold irreducible_primitive_connect[symmetric], auto)"], ["", "lemma irreducible_degree_field:\n  fixes p :: \"'a :: field poly\" assumes \"irreducible p\"\n  shows \"degree p > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < degree p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < degree p", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < degree p", "assume \"degree p = 0\""], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. 0 < degree p", "from degree0_coeffs[OF this] assms"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]\n  irreducible p", "obtain a where p: \"p = [:a:]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n  irreducible p\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>p = [:a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. 0 < degree p", "hence \"1 = p * [:inverse a:]\""], ["proof (prove)\nusing this:\n  p = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. 1 = p * [:inverse a:]", "by auto"], ["proof (state)\nthis:\n  1 = p * [:inverse a:]\n\ngoal (1 subgoal):\n 1. 0 < degree p", "hence \"p dvd 1\""], ["proof (prove)\nusing this:\n  1 = p * [:inverse a:]\n\ngoal (1 subgoal):\n 1. is_unit p", ".."], ["proof (state)\nthis:\n  is_unit p\n\ngoal (1 subgoal):\n 1. 0 < degree p", "hence \"p \\<in> Units mk_monoid\""], ["proof (prove)\nusing this:\n  is_unit p\n\ngoal (1 subgoal):\n 1. p \\<in> Units mk_monoid", "by simp"], ["proof (state)\nthis:\n  p \\<in> Units mk_monoid\n\ngoal (1 subgoal):\n 1. 0 < degree p", "with assms"], ["proof (chain)\npicking this:\n  irreducible p\n  p \\<in> Units mk_monoid", "have False"], ["proof (prove)\nusing this:\n  irreducible p\n  p \\<in> Units mk_monoid\n\ngoal (1 subgoal):\n 1. False", "unfolding irreducible_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0 \\<and>\n  \\<not> is_unit p \\<and>\n  (\\<forall>a b. p = a * b \\<longrightarrow> is_unit a \\<or> is_unit b)\n  p \\<in> Units mk_monoid\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 0 < degree p", "}"], ["proof (state)\nthis:\n  degree p = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 0 < degree p", "then"], ["proof (chain)\npicking this:\n  degree p = 0 \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  degree p = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. 0 < degree p", "by auto"], ["proof (state)\nthis:\n  0 < degree p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_PFM_PM: assumes\n  irr: \"irreducible (map_poly to_fract p)\" and ct: \"content_ff_ff p =dff 1\"\n  shows \"irreducible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. irreducible p", "let ?E = \"map_poly to_fract\""], ["proof (state)\ngoal (1 subgoal):\n 1. irreducible p", "let ?p = \"?E p\""], ["proof (state)\ngoal (1 subgoal):\n 1. irreducible p", "from ct"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract p) =dff 1", "have p0: \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by (auto simp: eq_dff_def divides_ff_def)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. irreducible p", "moreover"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. irreducible p", "from irreducible_degree_field[OF irr]"], ["proof (chain)\npicking this:\n  0 < degree (map_poly to_fract p)", "have deg: \"degree p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < degree (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. irreducible p", "from irr[unfolded irreducible_altdef]"], ["proof (chain)\npicking this:\n  map_poly to_fract p \\<noteq> 0 \\<and>\n  \\<not> is_unit (map_poly to_fract p) \\<and>\n  (\\<forall>b.\n      b dvd map_poly to_fract p \\<longrightarrow>\n      map_poly to_fract p dvd b \\<or> is_unit b)", "have irr: \"\\<And> b. b dvd ?p \\<Longrightarrow> \\<not> ?p dvd b \\<Longrightarrow> b dvd 1\""], ["proof (prove)\nusing this:\n  map_poly to_fract p \\<noteq> 0 \\<and>\n  \\<not> is_unit (map_poly to_fract p) \\<and>\n  (\\<forall>b.\n      b dvd map_poly to_fract p \\<longrightarrow>\n      map_poly to_fract p dvd b \\<or> is_unit b)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b dvd map_poly to_fract p;\n        \\<not> map_poly to_fract p dvd b\\<rbrakk>\n       \\<Longrightarrow> is_unit b", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?b1 dvd map_poly to_fract p;\n   \\<not> map_poly to_fract p dvd ?b1\\<rbrakk>\n  \\<Longrightarrow> is_unit ?b1\n\ngoal (1 subgoal):\n 1. irreducible p", "have \"\\<not> p dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd 1", "using deg divides_degree[of p 1]"], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n  p dvd 1 \\<Longrightarrow> degree p \\<le> degree 1 \\<or> 1 = 0\n\ngoal (1 subgoal):\n 1. \\<not> p dvd 1", "by auto"], ["proof (state)\nthis:\n  \\<not> p dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "moreover"], ["proof (state)\nthis:\n  \\<not> p dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "{"], ["proof (state)\nthis:\n  \\<not> p dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "fix q :: \"'a poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. irreducible p", "assume dvd: \"q dvd p\" and ndvd: \"\\<not> p dvd q\""], ["proof (state)\nthis:\n  q dvd p\n  \\<not> p dvd q\n\ngoal (1 subgoal):\n 1. irreducible p", "from dvd"], ["proof (chain)\npicking this:\n  q dvd p", "obtain r where pqr: \"p = q * r\""], ["proof (prove)\nusing this:\n  q dvd p\n\ngoal (1 subgoal):\n 1. (\\<And>r. p = q * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  p = q * r\n\ngoal (1 subgoal):\n 1. irreducible p", "from arg_cong[OF this, of ?E]"], ["proof (chain)\npicking this:\n  map_poly to_fract p = map_poly to_fract (q * r)", "have pqr': \"?p = ?E q * ?E r\""], ["proof (prove)\nusing this:\n  map_poly to_fract p = map_poly to_fract (q * r)\n\ngoal (1 subgoal):\n 1. map_poly to_fract p = map_poly to_fract q * map_poly to_fract r", "by simp"], ["proof (state)\nthis:\n  map_poly to_fract p = map_poly to_fract q * map_poly to_fract r\n\ngoal (1 subgoal):\n 1. irreducible p", "from p0 pqr"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  p = q * r", "have q: \"q \\<noteq> 0\" and r: \"r \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = q * r\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 &&& r \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. irreducible p", "have dp: \"degree p = degree q + degree r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = degree q + degree r", "unfolding pqr"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (q * r) = degree q + degree r", "by (subst degree_mult_eq, insert q r, auto)"], ["proof (state)\nthis:\n  degree p = degree q + degree r\n\ngoal (1 subgoal):\n 1. irreducible p", "from eq_dff_trans[OF eq_dff_sym[OF gauss_lemma[of \"?E q\" \"?E r\", folded pqr']] ct]"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r) =dff 1", "have ct: \"content_ff (?E q) * content_ff (?E r) =dff 1\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r) =dff 1\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r) =dff\n    1", "."], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r) =dff 1\n\ngoal (1 subgoal):\n 1. irreducible p", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cq where cq: \"content_ff (?E q) = to_fract cq\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cq.\n        content_ff (map_poly to_fract q) = to_fract cq \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) = to_fract cq\n\ngoal (1 subgoal):\n 1. irreducible p", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cr where cr: \"content_ff (?E r) = to_fract cr\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cr.\n        content_ff (map_poly to_fract r) = to_fract cr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract r) = to_fract cr\n\ngoal (1 subgoal):\n 1. irreducible p", "note ct[unfolded cq cr to_fract_mult eq_dff_def divides_ff_def]"], ["proof (state)\nthis:\n  (\\<exists>r. 1 = to_fract cq * to_fract cr * to_fract r) \\<and>\n  (\\<exists>r. to_fract cq * to_fract cr = 1 * to_fract r)\n\ngoal (1 subgoal):\n 1. irreducible p", "from this[folded hom_distribs]"], ["proof (chain)\npicking this:\n  (\\<exists>r. 1 = to_fract (cq * cr * r)) \\<and>\n  (\\<exists>r. to_fract (cq * cr) = 1 * to_fract r)", "obtain c where c: \"cq * cr * c = 1\""], ["proof (prove)\nusing this:\n  (\\<exists>r. 1 = to_fract (cq * cr * r)) \\<and>\n  (\\<exists>r. to_fract (cq * cr) = 1 * to_fract r)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        cq * cr * c = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  cq * cr * c = (1::'a)\n\ngoal (1 subgoal):\n 1. irreducible p", "hence one: \"1 = cq * (c * cr)\" \"1 = cr * (c * cq)\""], ["proof (prove)\nusing this:\n  cq * cr * c = (1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) = cq * (c * cr) &&& (1::'a) = cr * (c * cq)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  (1::'a) = cq * (c * cr)\n  (1::'a) = cr * (c * cq)\n\ngoal (1 subgoal):\n 1. irreducible p", "{"], ["proof (state)\nthis:\n  (1::'a) = cq * (c * cr)\n  (1::'a) = cr * (c * cq)\n\ngoal (1 subgoal):\n 1. irreducible p", "assume *: \"degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0\""], ["proof (state)\nthis:\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. irreducible p", "with dp"], ["proof (chain)\npicking this:\n  degree p = degree q + degree r\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0", "have \"degree q < degree p\""], ["proof (prove)\nusing this:\n  degree p = degree q + degree r\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree q < degree p", "by auto"], ["proof (state)\nthis:\n  degree q < degree p\n\ngoal (1 subgoal):\n 1. irreducible p", "hence \"degree (?E q) < degree (?E p)\""], ["proof (prove)\nusing this:\n  degree q < degree p\n\ngoal (1 subgoal):\n 1. degree (map_poly to_fract q) < degree (map_poly to_fract p)", "by simp"], ["proof (state)\nthis:\n  degree (map_poly to_fract q) < degree (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. irreducible p", "hence ndvd: \"\\<not> ?p dvd ?E q\""], ["proof (prove)\nusing this:\n  degree (map_poly to_fract q) < degree (map_poly to_fract p)\n\ngoal (1 subgoal):\n 1. \\<not> map_poly to_fract p dvd map_poly to_fract q", "using divides_degree[of ?p \"?E q\"] q"], ["proof (prove)\nusing this:\n  degree (map_poly to_fract q) < degree (map_poly to_fract p)\n  map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n  degree (map_poly to_fract p) \\<le> degree (map_poly to_fract q) \\<or>\n  map_poly to_fract q = 0\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> map_poly to_fract p dvd map_poly to_fract q", "by auto"], ["proof (state)\nthis:\n  \\<not> map_poly to_fract p dvd map_poly to_fract q\n\ngoal (1 subgoal):\n 1. irreducible p", "have \"?E q dvd ?p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly to_fract q dvd map_poly to_fract p", "unfolding pqr'"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly to_fract q dvd map_poly to_fract q * map_poly to_fract r", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract q dvd map_poly to_fract p\n\ngoal (1 subgoal):\n 1. irreducible p", "from irr[OF this ndvd]"], ["proof (chain)\npicking this:\n  is_unit (map_poly to_fract q)", "have \"?E q dvd 1\""], ["proof (prove)\nusing this:\n  is_unit (map_poly to_fract q)\n\ngoal (1 subgoal):\n 1. is_unit (map_poly to_fract q)", "."], ["proof (state)\nthis:\n  is_unit (map_poly to_fract q)\n\ngoal (1 subgoal):\n 1. irreducible p", "from divides_degree[OF this] *"], ["proof (chain)\npicking this:\n  degree (map_poly to_fract q) \\<le> degree 1 \\<or> 1 = 0\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0", "have False"], ["proof (prove)\nusing this:\n  degree (map_poly to_fract q) \\<le> degree 1 \\<or> 1 = 0\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. irreducible p", "}"], ["proof (state)\nthis:\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. irreducible p", "hence \"degree q = 0 \\<or> degree r = 0\""], ["proof (prove)\nusing this:\n  degree q \\<noteq> 0 \\<and> degree r \\<noteq> 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. degree q = 0 \\<or> degree r = 0", "by blast"], ["proof (state)\nthis:\n  degree q = 0 \\<or> degree r = 0\n\ngoal (1 subgoal):\n 1. irreducible p", "then"], ["proof (chain)\npicking this:\n  degree q = 0 \\<or> degree r = 0", "have \"q dvd 1\""], ["proof (prove)\nusing this:\n  degree q = 0 \\<or> degree r = 0\n\ngoal (1 subgoal):\n 1. q dvd 1", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "assume \"degree q = 0\""], ["proof (state)\nthis:\n  degree q = 0\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "from degree0_coeffs[OF this] q"], ["proof (chain)\npicking this:\n  \\<exists>a. q = [:a:]\n  q \\<noteq> 0", "obtain a where q: \"q = [:a:]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a. q = [:a:]\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>q = [:a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "hence id: \"set (coeffs (?E q)) = {to_fract a}\""], ["proof (prove)\nusing this:\n  q = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. set (coeffs (map_poly to_fract q)) = {to_fract a}", "by auto"], ["proof (state)\nthis:\n  set (coeffs (map_poly to_fract q)) = {to_fract a}\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "have \"divides_ff (to_fract a) (content_ff (?E q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (to_fract a) (content_ff (map_poly to_fract q))", "unfolding content_ff_iff id"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball {to_fract a} (divides_ff (to_fract a))", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract a) (content_ff (map_poly to_fract q))\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "from this[unfolded cq divides_ff_def, folded hom_distribs]"], ["proof (chain)\npicking this:\n  \\<exists>r. to_fract cq = to_fract (a * r)", "obtain rr where cq: \"cq = a * rr\""], ["proof (prove)\nusing this:\n  \\<exists>r. to_fract cq = to_fract (a * r)\n\ngoal (1 subgoal):\n 1. (\\<And>rr. cq = a * rr \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  cq = a * rr\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "with one(1)"], ["proof (chain)\npicking this:\n  (1::'a) = cq * (c * cr)\n  cq = a * rr", "have \"1 = a * (rr * c * cr)\""], ["proof (prove)\nusing this:\n  (1::'a) = cq * (c * cr)\n  cq = a * rr\n\ngoal (1 subgoal):\n 1. (1::'a) = a * (rr * c * cr)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  (1::'a) = a * (rr * c * cr)\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "hence \"a dvd 1\""], ["proof (prove)\nusing this:\n  (1::'a) = a * (rr * c * cr)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a)", ".."], ["proof (state)\nthis:\n  a dvd (1::'a)\n\ngoal (2 subgoals):\n 1. degree q = 0 \\<Longrightarrow> q dvd 1\n 2. degree r = 0 \\<Longrightarrow> q dvd 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. q dvd 1", "by (simp add: q)"], ["proof (state)\nthis:\n  q dvd 1\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "assume \"degree r = 0\""], ["proof (state)\nthis:\n  degree r = 0\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "from degree0_coeffs[OF this] r"], ["proof (chain)\npicking this:\n  \\<exists>a. r = [:a:]\n  r \\<noteq> 0", "obtain a where r: \"r = [:a:]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a. r = [:a:]\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>r = [:a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "hence id: \"set (coeffs (?E r)) = {to_fract a}\""], ["proof (prove)\nusing this:\n  r = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. set (coeffs (map_poly to_fract r)) = {to_fract a}", "by auto"], ["proof (state)\nthis:\n  set (coeffs (map_poly to_fract r)) = {to_fract a}\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "have \"divides_ff (to_fract a) (content_ff (?E r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (to_fract a) (content_ff (map_poly to_fract r))", "unfolding content_ff_iff id"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball {to_fract a} (divides_ff (to_fract a))", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract a) (content_ff (map_poly to_fract r))\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "note this[unfolded cr divides_ff_def to_fract_mult]"], ["proof (state)\nthis:\n  \\<exists>r. to_fract cr = to_fract a * to_fract r\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "note this[folded hom_distribs]"], ["proof (state)\nthis:\n  \\<exists>r. to_fract cr = to_fract (a * r)\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "then"], ["proof (chain)\npicking this:\n  \\<exists>r. to_fract cr = to_fract (a * r)", "obtain rr where cr: \"cr = a * rr\""], ["proof (prove)\nusing this:\n  \\<exists>r. to_fract cr = to_fract (a * r)\n\ngoal (1 subgoal):\n 1. (\\<And>rr. cr = a * rr \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  cr = a * rr\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "with one(2)"], ["proof (chain)\npicking this:\n  (1::'a) = cr * (c * cq)\n  cr = a * rr", "have one: \"1 = a * (rr * c * cq)\""], ["proof (prove)\nusing this:\n  (1::'a) = cr * (c * cq)\n  cr = a * rr\n\ngoal (1 subgoal):\n 1. (1::'a) = a * (rr * c * cq)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  (1::'a) = a * (rr * c * cq)\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "from arg_cong[OF pqr[unfolded r], of \"\\<lambda> p. p * [:rr * c * cq:]\"]"], ["proof (chain)\npicking this:\n  p * [:rr * c * cq:] = q * [:a:] * [:rr * c * cq:]", "have \"p * [:rr * c * cq:] = q * [:a * (rr * c * cq):]\""], ["proof (prove)\nusing this:\n  p * [:rr * c * cq:] = q * [:a:] * [:rr * c * cq:]\n\ngoal (1 subgoal):\n 1. p * [:rr * c * cq:] = q * [:a * (rr * c * cq):]", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  p * [:rr * c * cq:] = q * [:a * (rr * c * cq):]\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "also"], ["proof (state)\nthis:\n  p * [:rr * c * cq:] = q * [:a * (rr * c * cq):]\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "have \"\\<dots> = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q * [:a * (rr * c * cq):] = q", "unfolding one[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. q * [:1::'a:] = q", "by auto"], ["proof (state)\nthis:\n  q * [:a * (rr * c * cq):] = q\n\ngoal (1 subgoal):\n 1. degree r = 0 \\<Longrightarrow> q dvd 1", "finally"], ["proof (chain)\npicking this:\n  p * [:rr * c * cq:] = q", "obtain r where \"q = p * r\""], ["proof (prove)\nusing this:\n  p * [:rr * c * cq:] = q\n\ngoal (1 subgoal):\n 1. (\\<And>r. q = p * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  q = p * r\n\ngoal (1 subgoal):\n 1. degree r__ = 0 \\<Longrightarrow> q dvd 1", "hence \"p dvd q\""], ["proof (prove)\nusing this:\n  q = p * r\n\ngoal (1 subgoal):\n 1. p dvd q", ".."], ["proof (state)\nthis:\n  p dvd q\n\ngoal (1 subgoal):\n 1. degree r__ = 0 \\<Longrightarrow> q dvd 1", "with ndvd"], ["proof (chain)\npicking this:\n  \\<not> p dvd q\n  p dvd q", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> p dvd q\n  p dvd q\n\ngoal (1 subgoal):\n 1. q dvd 1", "by auto"], ["proof (state)\nthis:\n  q dvd 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?q3 dvd p; \\<not> p dvd ?q3\\<rbrakk> \\<Longrightarrow> ?q3 dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "ultimately"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  \\<not> p dvd 1\n  \\<lbrakk>?q3 dvd p; \\<not> p dvd ?q3\\<rbrakk> \\<Longrightarrow> ?q3 dvd 1", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  \\<not> p dvd 1\n  \\<lbrakk>?q3 dvd p; \\<not> p dvd ?q3\\<rbrakk> \\<Longrightarrow> ?q3 dvd 1\n\ngoal (1 subgoal):\n 1. irreducible p", "by (auto simp:irreducible_altdef)"], ["proof (state)\nthis:\n  irreducible p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_cases: \"irreducible p \\<longleftrightarrow>\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or> \n  degree p \\<noteq> 0 \\<and> irreducible (map_poly to_fract p) \\<and> content_ff_ff p =dff 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible p =\n    (degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n     degree p \\<noteq> 0 \\<and>\n     irreducible (map_poly to_fract p) \\<and>\n     content_ff (map_poly to_fract p) =dff 1)", "using irreducible_PM_M_PFM irreducible_M_PM irreducible_PFM_PM"], ["proof (prove)\nusing this:\n  irreducible ?p \\<Longrightarrow>\n  degree ?p = 0 \\<and> irreducible (coeff ?p 0) \\<or>\n  degree ?p \\<noteq> 0 \\<and>\n  irreducible (map_poly to_fract ?p) \\<and>\n  content_ff (map_poly to_fract ?p) =dff 1\n  \\<lbrakk>degree ?p = 0; irreducible (coeff ?p 0)\\<rbrakk>\n  \\<Longrightarrow> irreducible ?p\n  \\<lbrakk>irreducible (map_poly to_fract ?p);\n   content_ff (map_poly to_fract ?p) =dff 1\\<rbrakk>\n  \\<Longrightarrow> irreducible ?p\n\ngoal (1 subgoal):\n 1. irreducible p =\n    (degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n     degree p \\<noteq> 0 \\<and>\n     irreducible (map_poly to_fract p) \\<and>\n     content_ff (map_poly to_fract p) =dff 1)", "by blast"], ["", "lemma dvd_PM_iff: \"p dvd q \\<longleftrightarrow> divides_ff (content_ff_ff p) (content_ff_ff q) \\<and> \n  map_poly to_fract p dvd map_poly to_fract q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p dvd q) =\n    (divides_ff (content_ff (map_poly to_fract p))\n      (content_ff (map_poly to_fract q)) \\<and>\n     map_poly to_fract p dvd map_poly to_fract q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (p dvd q) =\n    (divides_ff (content_ff (map_poly to_fract p))\n      (content_ff (map_poly to_fract q)) \\<and>\n     map_poly to_fract p dvd map_poly to_fract q)", "interpret map_poly_inj_idom_hom to_fract"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_idom_hom to_fract", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. (p dvd q) =\n    (divides_ff (content_ff (map_poly to_fract p))\n      (content_ff (map_poly to_fract q)) \\<and>\n     map_poly to_fract p dvd map_poly to_fract q)", "let ?E = \"map_poly to_fract\""], ["proof (state)\ngoal (1 subgoal):\n 1. (p dvd q) =\n    (divides_ff (content_ff (map_poly to_fract p))\n      (content_ff (map_poly to_fract q)) \\<and>\n     map_poly to_fract p dvd map_poly to_fract q)", "show ?thesis (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (p dvd q) =\n    (divides_ff (content_ff (map_poly to_fract p))\n      (content_ff (map_poly to_fract q)) \\<and>\n     map_poly to_fract p dvd map_poly to_fract q)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "assume \"p dvd q\""], ["proof (state)\nthis:\n  p dvd q\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "then"], ["proof (chain)\npicking this:\n  p dvd q", "obtain r where qpr: \"q = p * r\""], ["proof (prove)\nusing this:\n  p dvd q\n\ngoal (1 subgoal):\n 1. (\\<And>r. q = p * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  q = p * r\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "from arg_cong[OF this, of ?E]"], ["proof (chain)\npicking this:\n  map_poly to_fract q = map_poly to_fract (p * r)", "have dvd: \"?E p dvd ?E q\""], ["proof (prove)\nusing this:\n  map_poly to_fract q = map_poly to_fract (p * r)\n\ngoal (1 subgoal):\n 1. map_poly to_fract p dvd map_poly to_fract q", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract p dvd map_poly to_fract q\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cq where cq: \"content_ff_ff q = to_fract cq\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cq.\n        content_ff (map_poly to_fract q) = to_fract cq \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) = to_fract cq\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cp where cp: \"content_ff_ff p = to_fract cp\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cp.\n        content_ff (map_poly to_fract p) = to_fract cp \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) = to_fract cp\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cr where cr: \"content_ff_ff r = to_fract cr\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cr.\n        content_ff (map_poly to_fract r) = to_fract cr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract r) = to_fract cr\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "from gauss_lemma[of \"?E p\" \"?E r\", folded hom_distribs qpr, unfolded cq cp cr]"], ["proof (chain)\npicking this:\n  to_fract cq =dff to_fract cp * to_fract cr", "have \"divides_ff (content_ff_ff p) (content_ff_ff q)\""], ["proof (prove)\nusing this:\n  to_fract cq =dff to_fract cp * to_fract cr\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q))", "unfolding cq cp eq_dff_def"], ["proof (prove)\nusing this:\n  divides_ff (to_fract cq) (to_fract cp * to_fract cr) \\<and>\n  divides_ff (to_fract cp * to_fract cr) (to_fract cq)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract cp) (to_fract cq)", "by (metis divides_ff_def divides_ff_trans)"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q))\n\ngoal (2 subgoals):\n 1. p dvd q \\<Longrightarrow>\n    divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q\n 2. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "with dvd"], ["proof (chain)\npicking this:\n  map_poly to_fract p dvd map_poly to_fract q\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q))", "show ?r"], ["proof (prove)\nusing this:\n  map_poly to_fract p dvd map_poly to_fract q\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q))\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q", "by blast"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "assume ?r"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q)) \\<and>\n    map_poly to_fract p dvd map_poly to_fract q \\<Longrightarrow>\n    p dvd q", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd q", "proof (cases \"q = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> p dvd q\n 2. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "case True"], ["proof (state)\nthis:\n  q = 0\n\ngoal (2 subgoals):\n 1. q = 0 \\<Longrightarrow> p dvd q\n 2. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "with \\<open>?r\\<close>"], ["proof (chain)\npicking this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n  q = 0", "show ?l"], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n  q = 0\n\ngoal (1 subgoal):\n 1. p dvd q", "by auto"], ["proof (state)\nthis:\n  p dvd q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "case False"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "note q = this"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "hence q': \"?E q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map_poly to_fract q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from \\<open>?r\\<close>"], ["proof (chain)\npicking this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q", "obtain rr where qpr: \"?E q = ?E p * rr\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n\ngoal (1 subgoal):\n 1. (\\<And>rr.\n        map_poly to_fract q = map_poly to_fract p * rr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q)) \\<and>\n  (\\<exists>k. map_poly to_fract q = map_poly to_fract p * k)\n\ngoal (1 subgoal):\n 1. (\\<And>rr.\n        map_poly to_fract q = map_poly to_fract p * rr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract q = map_poly to_fract p * rr\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "with q"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  map_poly to_fract q = map_poly to_fract p * rr", "have p: \"p \\<noteq> 0\" and Ep: \"?E p \\<noteq> 0\" and rr: \"rr \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  map_poly to_fract q = map_poly to_fract p * rr\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 &&& map_poly to_fract p \\<noteq> 0 &&& rr \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  map_poly to_fract p \\<noteq> 0\n  rr \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from gauss_lemma[of \"?E p\" rr, folded qpr]"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract q) =dff\n  content_ff (map_poly to_fract p) * content_ff rr", "have ct: \"content_ff_ff q =dff content_ff_ff p * content_ff rr\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract q) =dff\n  content_ff (map_poly to_fract p) * content_ff rr\n\ngoal (1 subgoal):\n 1. content_ff (map_poly to_fract q) =dff\n    content_ff (map_poly to_fract p) * content_ff rr", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) =dff\n  content_ff (map_poly to_fract p) * content_ff rr\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from content_ff_map_poly_to_fract[of p]"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract p) \\<in> range to_fract", "obtain cp where cp: \"content_ff_ff p = to_fract cp\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cp.\n        content_ff (map_poly to_fract p) = to_fract cp \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) = to_fract cp\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from content_ff_map_poly_to_fract[of q]"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract q) \\<in> range to_fract", "obtain cq where cq: \"content_ff_ff q = to_fract cq\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract q) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cq.\n        content_ff (map_poly to_fract q) = to_fract cq \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) = to_fract cq\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from \\<open>?r\\<close>[unfolded cp cq]"], ["proof (chain)\npicking this:\n  divides_ff (to_fract cp) (to_fract cq) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q", "have \"divides_ff (to_fract cp) (to_fract cq)\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract cp) (to_fract cq) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract cp) (to_fract cq)", ".."], ["proof (state)\nthis:\n  divides_ff (to_fract cp) (to_fract cq)\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "with ct[unfolded cp cq eq_dff_def]"], ["proof (chain)\npicking this:\n  divides_ff (to_fract cq) (to_fract cp * content_ff rr) \\<and>\n  divides_ff (to_fract cp * content_ff rr) (to_fract cq)\n  divides_ff (to_fract cp) (to_fract cq)", "have \"content_ff rr \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract cq) (to_fract cp * content_ff rr) \\<and>\n  divides_ff (to_fract cp * content_ff rr) (to_fract cq)\n  divides_ff (to_fract cp) (to_fract cq)\n\ngoal (1 subgoal):\n 1. content_ff rr \\<in> range to_fract", "by (metis (no_types, lifting) Ep content_ff_0_iff cp divides_ff_def \n          divides_ff_trans mult.commute mult_right_cancel range_eqI)"], ["proof (state)\nthis:\n  content_ff rr \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from range_to_fract_embed_poly[OF content_ff_to_fract_coeffs_to_fract[OF this]]"], ["proof (chain)\npicking this:\n  rr = map_poly to_fract (map_poly inv_embed rr)", "obtain r\n        where rr: \"rr = ?E r\""], ["proof (prove)\nusing this:\n  rr = map_poly to_fract (map_poly inv_embed rr)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        rr = map_poly to_fract r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rr = map_poly to_fract r\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "from qpr[unfolded rr, folded hom_distribs]"], ["proof (chain)\npicking this:\n  map_poly to_fract q = map_poly to_fract (p * r)", "have \"q = p * r\""], ["proof (prove)\nusing this:\n  map_poly to_fract q = map_poly to_fract (p * r)\n\ngoal (1 subgoal):\n 1. q = p * r", "by (rule injectivity)"], ["proof (state)\nthis:\n  q = p * r\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> p dvd q", "thus \"p dvd q\""], ["proof (prove)\nusing this:\n  q = p * r\n\ngoal (1 subgoal):\n 1. p dvd q", ".."], ["proof (state)\nthis:\n  p dvd q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p dvd q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (p dvd q) =\n  (divides_ff (content_ff (map_poly to_fract p))\n    (content_ff (map_poly to_fract q)) \\<and>\n   map_poly to_fract p dvd map_poly to_fract q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factorial_monoid_poly: \"factorial_monoid (mk_monoid :: 'a :: ufd poly monoid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorial_monoid mk_monoid", "proof (fold factorial_condition_one, intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. divisor_chain_condition_monoid mk_monoid\n 2. primeness_condition_monoid mk_monoid", "interpret M: factorial_monoid \"mk_monoid :: 'a monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorial_monoid mk_monoid", "by (fact factorial_monoid)"], ["proof (state)\ngoal (2 subgoals):\n 1. divisor_chain_condition_monoid mk_monoid\n 2. primeness_condition_monoid mk_monoid", "interpret PFM: factorial_monoid \"mk_monoid :: 'a fract poly monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorial_monoid mk_monoid", "by (rule as_ufd.factorial_monoid)"], ["proof (state)\ngoal (2 subgoals):\n 1. divisor_chain_condition_monoid mk_monoid\n 2. primeness_condition_monoid mk_monoid", "interpret PM: comm_monoid_cancel \"mk_monoid :: 'a poly monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_cancel mk_monoid", "by (unfold_locales, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. divisor_chain_condition_monoid mk_monoid\n 2. primeness_condition_monoid mk_monoid", "let ?E = \"map_poly to_fract\""], ["proof (state)\ngoal (2 subgoals):\n 1. divisor_chain_condition_monoid mk_monoid\n 2. primeness_condition_monoid mk_monoid", "show \"divisor_chain_condition_monoid (mk_monoid::'a poly monoid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisor_chain_condition_monoid mk_monoid", "proof (unfold_locales, unfold mk_monoid_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "let ?rel' = \"{(x::'a poly, y). x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> properfactor x y}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "let ?rel'' = \"{(x::'a, y). x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> properfactor x y}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "let ?relPM = \"{(x, y). x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> x dvd y \\<and> \\<not> y dvd (x :: 'a poly)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "let ?relM = \"{(x, y). x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> x dvd y \\<and> \\<not> y dvd (x :: 'a)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "have id: \"?rel' = ?relPM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y).\n     x \\<noteq> 0 \\<and>\n     y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y} =\n    {(x, y).\n     x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> x dvd y \\<and> \\<not> y dvd x}", "using properfactor_nz"], ["proof (prove)\nusing this:\n  ?y \\<noteq> (0::?'a) \\<Longrightarrow>\n  comm_semiring_1_class.properfactor ?x ?y =\n  (?x dvd ?y \\<and> \\<not> ?y dvd ?x)\n\ngoal (1 subgoal):\n 1. {(x, y).\n     x \\<noteq> 0 \\<and>\n     y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y} =\n    {(x, y).\n     x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> x dvd y \\<and> \\<not> y dvd x}", "by auto"], ["proof (state)\nthis:\n  {(x, y).\n   x \\<noteq> 0 \\<and>\n   y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y} =\n  {(x, y).\n   x \\<noteq> 0 \\<and> y \\<noteq> 0 \\<and> x dvd y \\<and> \\<not> y dvd x}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "have id': \"?rel'' = ?relM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y).\n     x \\<noteq> (0::'a) \\<and>\n     y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y} =\n    {(x, y).\n     x \\<noteq> (0::'a) \\<and>\n     y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "using properfactor_nz"], ["proof (prove)\nusing this:\n  ?y \\<noteq> (0::?'a) \\<Longrightarrow>\n  comm_semiring_1_class.properfactor ?x ?y =\n  (?x dvd ?y \\<and> \\<not> ?y dvd ?x)\n\ngoal (1 subgoal):\n 1. {(x, y).\n     x \\<noteq> (0::'a) \\<and>\n     y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y} =\n    {(x, y).\n     x \\<noteq> (0::'a) \\<and>\n     y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "by auto"], ["proof (state)\nthis:\n  {(x, y).\n   x \\<noteq> (0::'a) \\<and>\n   y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y} =\n  {(x, y).\n   x \\<noteq> (0::'a) \\<and>\n   y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "have \"wf ?rel''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> (0::'a) \\<and>\n        y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y}", "using M.division_wellfounded"], ["proof (prove)\nusing this:\n  wf {(x, y).\n      x \\<in> carrier mk_monoid \\<and>\n      y \\<in> carrier mk_monoid \\<and>\n      comm_semiring_1_class.properfactor x y}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> (0::'a) \\<and>\n        y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y}", "by auto"], ["proof (state)\nthis:\n  wf {(x, y).\n      x \\<noteq> (0::'a) \\<and>\n      y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "hence wfM: \"wf ?relM\""], ["proof (prove)\nusing this:\n  wf {(x, y).\n      x \\<noteq> (0::'a) \\<and>\n      y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> (0::'a) \\<and>\n        y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "using id'"], ["proof (prove)\nusing this:\n  wf {(x, y).\n      x \\<noteq> (0::'a) \\<and>\n      y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y}\n  {(x, y).\n   x \\<noteq> (0::'a) \\<and>\n   y \\<noteq> (0::'a) \\<and> comm_semiring_1_class.properfactor x y} =\n  {(x, y).\n   x \\<noteq> (0::'a) \\<and>\n   y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> (0::'a) \\<and>\n        y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "by auto"], ["proof (state)\nthis:\n  wf {(x, y).\n      x \\<noteq> (0::'a) \\<and>\n      y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "let ?c = \"\\<lambda> p. inv_embed (content_ff_ff p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "let ?f = \"\\<lambda> p. (degree p, ?c p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "note wf = wf_inv_image[OF wf_lex_prod[OF wf_less wfM], of ?f]"], ["proof (state)\nthis:\n  wf (inv_image\n       ({(x, y). x < y} <*lex*>\n        {(x, y).\n         x \\<noteq> (0::'a) \\<and>\n         y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n       (\\<lambda>p.\n           (degree p, inv_embed (content_ff (map_poly to_fract p)))))\n\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "show \"wf ?rel'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y).\n        x \\<noteq> 0 \\<and>\n        y \\<noteq> 0 \\<and> x dvd y \\<and> \\<not> y dvd x}", "proof (rule wf_subset[OF wf], clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0; a dvd b; \\<not> b dvd a\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> inv_image\n                                ({(x, y). x < y} <*lex*>\n                                 {(x, y).\n                                  x \\<noteq> (0::'a) \\<and>\n                                  y \\<noteq> (0::'a) \\<and>\n                                  x dvd y \\<and> \\<not> y dvd x})\n                                (\\<lambda>p.\n                                    (degree p,\n                                     inv_embed\n(content_ff (map_poly to_fract p))))", "fix p q :: \"'a poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0; a dvd b; \\<not> b dvd a\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> inv_image\n                                ({(x, y). x < y} <*lex*>\n                                 {(x, y).\n                                  x \\<noteq> (0::'a) \\<and>\n                                  y \\<noteq> (0::'a) \\<and>\n                                  x dvd y \\<and> \\<not> y dvd x})\n                                (\\<lambda>p.\n                                    (degree p,\n                                     inv_embed\n(content_ff (map_poly to_fract p))))", "assume p: \"p \\<noteq> 0\" and q: \"q \\<noteq> 0\" and dvd: \"p dvd q\" and ndvd: \"\\<not> q dvd p\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  q \\<noteq> 0\n  p dvd q\n  \\<not> q dvd p\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0; a dvd b; \\<not> b dvd a\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> inv_image\n                                ({(x, y). x < y} <*lex*>\n                                 {(x, y).\n                                  x \\<noteq> (0::'a) \\<and>\n                                  y \\<noteq> (0::'a) \\<and>\n                                  x dvd y \\<and> \\<not> y dvd x})\n                                (\\<lambda>p.\n                                    (degree p,\n                                     inv_embed\n(content_ff (map_poly to_fract p))))", "from dvd"], ["proof (chain)\npicking this:\n  p dvd q", "obtain r where qpr: \"q = p * r\""], ["proof (prove)\nusing this:\n  p dvd q\n\ngoal (1 subgoal):\n 1. (\\<And>r. q = p * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  q = p * r\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0; a dvd b; \\<not> b dvd a\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> inv_image\n                                ({(x, y). x < y} <*lex*>\n                                 {(x, y).\n                                  x \\<noteq> (0::'a) \\<and>\n                                  y \\<noteq> (0::'a) \\<and>\n                                  x dvd y \\<and> \\<not> y dvd x})\n                                (\\<lambda>p.\n                                    (degree p,\n                                     inv_embed\n(content_ff (map_poly to_fract p))))", "from degree_mult_eq[of p r, folded qpr] q qpr"], ["proof (chain)\npicking this:\n  \\<lbrakk>p \\<noteq> 0; r \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> degree q = degree p + degree r\n  q \\<noteq> 0\n  q = p * r", "have r: \"r \\<noteq> 0\" \n        and deg: \"degree q = degree p + degree r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; r \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> degree q = degree p + degree r\n  q \\<noteq> 0\n  q = p * r\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 &&& degree q = degree p + degree r", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> 0\n  degree q = degree p + degree r\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0; a dvd b; \\<not> b dvd a\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> inv_image\n                                ({(x, y). x < y} <*lex*>\n                                 {(x, y).\n                                  x \\<noteq> (0::'a) \\<and>\n                                  y \\<noteq> (0::'a) \\<and>\n                                  x dvd y \\<and> \\<not> y dvd x})\n                                (\\<lambda>p.\n                                    (degree p,\n                                     inv_embed\n(content_ff (map_poly to_fract p))))", "show \"(p,q) \\<in> inv_image ({(x, y). x < y} <*lex*> ?relM) ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "proof (cases \"degree p = degree q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))\n 2. degree p \\<noteq> degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> degree q\n\ngoal (2 subgoals):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))\n 2. degree p \\<noteq> degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "with deg"], ["proof (chain)\npicking this:\n  degree q = degree p + degree r\n  degree p \\<noteq> degree q", "have \"degree p < degree q\""], ["proof (prove)\nusing this:\n  degree q = degree p + degree r\n  degree p \\<noteq> degree q\n\ngoal (1 subgoal):\n 1. degree p < degree q", "by auto"], ["proof (state)\nthis:\n  degree p < degree q\n\ngoal (2 subgoals):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))\n 2. degree p \\<noteq> degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  degree p < degree q\n\ngoal (1 subgoal):\n 1. (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "by auto"], ["proof (state)\nthis:\n  (p, q)\n  \\<in> inv_image\n         ({(x, y). x < y} <*lex*>\n          {(x, y).\n           x \\<noteq> (0::'a) \\<and>\n           y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n         (\\<lambda>p.\n             (degree p, inv_embed (content_ff (map_poly to_fract p))))\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "case True"], ["proof (state)\nthis:\n  degree p = degree q\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "with deg"], ["proof (chain)\npicking this:\n  degree q = degree p + degree r\n  degree p = degree q", "have \"degree r = 0\""], ["proof (prove)\nusing this:\n  degree q = degree p + degree r\n  degree p = degree q\n\ngoal (1 subgoal):\n 1. degree r = 0", "by simp"], ["proof (state)\nthis:\n  degree r = 0\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from degree0_coeffs[OF this] r"], ["proof (chain)\npicking this:\n  \\<exists>a. r = [:a:]\n  r \\<noteq> 0", "obtain a where ra: \"r = [:a:]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a. r = [:a:]\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>r = [:a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from arg_cong[OF qpr, of \"\\<lambda> p. ?E p * [:inverse (to_fract a):]\"] a"], ["proof (chain)\npicking this:\n  map_poly to_fract q * [:inverse (to_fract a):] =\n  map_poly to_fract (p * r) * [:inverse (to_fract a):]\n  a \\<noteq> (0::'a)", "have \"?E p = ?E q * [:inverse (to_fract a):]\""], ["proof (prove)\nusing this:\n  map_poly to_fract q * [:inverse (to_fract a):] =\n  map_poly to_fract (p * r) * [:inverse (to_fract a):]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. map_poly to_fract p = map_poly to_fract q * [:inverse (to_fract a):]", "by (auto simp: ac_simps ra)"], ["proof (state)\nthis:\n  map_poly to_fract p = map_poly to_fract q * [:inverse (to_fract a):]\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "hence \"?E q dvd ?E p\""], ["proof (prove)\nusing this:\n  map_poly to_fract p = map_poly to_fract q * [:inverse (to_fract a):]\n\ngoal (1 subgoal):\n 1. map_poly to_fract q dvd map_poly to_fract p", ".."], ["proof (state)\nthis:\n  map_poly to_fract q dvd map_poly to_fract p\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "with ndvd dvd_PM_iff"], ["proof (chain)\npicking this:\n  \\<not> q dvd p\n  (?p dvd ?q) =\n  (divides_ff (content_ff (map_poly to_fract ?p))\n    (content_ff (map_poly to_fract ?q)) \\<and>\n   map_poly to_fract ?p dvd map_poly to_fract ?q)\n  map_poly to_fract q dvd map_poly to_fract p", "have ndvd: \"\\<not> divides_ff (content_ff_ff q) (content_ff_ff p)\""], ["proof (prove)\nusing this:\n  \\<not> q dvd p\n  (?p dvd ?q) =\n  (divides_ff (content_ff (map_poly to_fract ?p))\n    (content_ff (map_poly to_fract ?q)) \\<and>\n   map_poly to_fract ?p dvd map_poly to_fract ?q)\n  map_poly to_fract q dvd map_poly to_fract p\n\ngoal (1 subgoal):\n 1. \\<not> divides_ff (content_ff (map_poly to_fract q))\n            (content_ff (map_poly to_fract p))", "by auto"], ["proof (state)\nthis:\n  \\<not> divides_ff (content_ff (map_poly to_fract q))\n          (content_ff (map_poly to_fract p))\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cq where cq: \"content_ff_ff q = to_fract cq\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cq.\n        content_ff (map_poly to_fract q) = to_fract cq \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) = to_fract cq\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cp where cp: \"content_ff_ff p = to_fract cp\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cp.\n        content_ff (map_poly to_fract p) = to_fract cp \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) = to_fract cp\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from ndvd[unfolded cp cq]"], ["proof (chain)\npicking this:\n  \\<not> divides_ff (to_fract cq) (to_fract cp)", "have ndvd: \"\\<not> cq dvd cp\""], ["proof (prove)\nusing this:\n  \\<not> divides_ff (to_fract cq) (to_fract cp)\n\ngoal (1 subgoal):\n 1. \\<not> cq dvd cp", "by simp"], ["proof (state)\nthis:\n  \\<not> cq dvd cp\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from iffD1[OF dvd_PM_iff,OF dvd,unfolded cq cp]"], ["proof (chain)\npicking this:\n  divides_ff (to_fract cp) (to_fract cq) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q", "have dvd: \"cp dvd cq\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract cp) (to_fract cq) \\<and>\n  map_poly to_fract p dvd map_poly to_fract q\n\ngoal (1 subgoal):\n 1. cp dvd cq", "by simp"], ["proof (state)\nthis:\n  cp dvd cq\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "have c_p: \"?c p = cp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_embed (content_ff (map_poly to_fract p)) = cp", "unfolding cp"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_embed (to_fract cp) = cp", "by simp"], ["proof (state)\nthis:\n  inv_embed (content_ff (map_poly to_fract p)) = cp\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "have c_q: \"?c q = cq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_embed (content_ff (map_poly to_fract q)) = cq", "unfolding cq"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_embed (to_fract cq) = cq", "by simp"], ["proof (state)\nthis:\n  inv_embed (content_ff (map_poly to_fract q)) = cq\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from q cq"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  content_ff (map_poly to_fract q) = to_fract cq", "have cq0: \"cq \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  content_ff (map_poly to_fract q) = to_fract cq\n\ngoal (1 subgoal):\n 1. cq \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  cq \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from p cp"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  content_ff (map_poly to_fract p) = to_fract cp", "have cp0: \"cp \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  content_ff (map_poly to_fract p) = to_fract cp\n\ngoal (1 subgoal):\n 1. cp \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  cp \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "from ndvd cq0 cp0 dvd"], ["proof (chain)\npicking this:\n  \\<not> cq dvd cp\n  cq \\<noteq> (0::'a)\n  cp \\<noteq> (0::'a)\n  cp dvd cq", "have \"(?c p, ?c q) \\<in> ?relM\""], ["proof (prove)\nusing this:\n  \\<not> cq dvd cp\n  cq \\<noteq> (0::'a)\n  cp \\<noteq> (0::'a)\n  cp dvd cq\n\ngoal (1 subgoal):\n 1. (inv_embed (content_ff (map_poly to_fract p)),\n     inv_embed (content_ff (map_poly to_fract q)))\n    \\<in> {(x, y).\n           x \\<noteq> (0::'a) \\<and>\n           y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "unfolding c_p c_q"], ["proof (prove)\nusing this:\n  \\<not> cq dvd cp\n  cq \\<noteq> (0::'a)\n  cp \\<noteq> (0::'a)\n  cp dvd cq\n\ngoal (1 subgoal):\n 1. (cp, cq)\n    \\<in> {(x, y).\n           x \\<noteq> (0::'a) \\<and>\n           y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "by auto"], ["proof (state)\nthis:\n  (inv_embed (content_ff (map_poly to_fract p)),\n   inv_embed (content_ff (map_poly to_fract q)))\n  \\<in> {(x, y).\n         x \\<noteq> (0::'a) \\<and>\n         y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}\n\ngoal (1 subgoal):\n 1. degree p = degree q \\<Longrightarrow>\n    (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "with True"], ["proof (chain)\npicking this:\n  degree p = degree q\n  (inv_embed (content_ff (map_poly to_fract p)),\n   inv_embed (content_ff (map_poly to_fract q)))\n  \\<in> {(x, y).\n         x \\<noteq> (0::'a) \\<and>\n         y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}", "show ?thesis"], ["proof (prove)\nusing this:\n  degree p = degree q\n  (inv_embed (content_ff (map_poly to_fract p)),\n   inv_embed (content_ff (map_poly to_fract q)))\n  \\<in> {(x, y).\n         x \\<noteq> (0::'a) \\<and>\n         y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x}\n\ngoal (1 subgoal):\n 1. (p, q)\n    \\<in> inv_image\n           ({(x, y). x < y} <*lex*>\n            {(x, y).\n             x \\<noteq> (0::'a) \\<and>\n             y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n           (\\<lambda>p.\n               (degree p, inv_embed (content_ff (map_poly to_fract p))))", "by auto"], ["proof (state)\nthis:\n  (p, q)\n  \\<in> inv_image\n         ({(x, y). x < y} <*lex*>\n          {(x, y).\n           x \\<noteq> (0::'a) \\<and>\n           y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n         (\\<lambda>p.\n             (degree p, inv_embed (content_ff (map_poly to_fract p))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (p, q)\n  \\<in> inv_image\n         ({(x, y). x < y} <*lex*>\n          {(x, y).\n           x \\<noteq> (0::'a) \\<and>\n           y \\<noteq> (0::'a) \\<and> x dvd y \\<and> \\<not> y dvd x})\n         (\\<lambda>p.\n             (degree p, inv_embed (content_ff (map_poly to_fract p))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf {(x, y).\n      x \\<noteq> 0 \\<and>\n      y \\<noteq> 0 \\<and> comm_semiring_1_class.properfactor x y}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  divisor_chain_condition_monoid mk_monoid\n\ngoal (1 subgoal):\n 1. primeness_condition_monoid mk_monoid", "show \"primeness_condition_monoid (mk_monoid::'a poly monoid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primeness_condition_monoid mk_monoid", "proof (unfold_locales, unfold mk_monoid_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<noteq> 0; irred a\\<rbrakk>\n       \\<Longrightarrow> Divisibility.prime mk_monoid a", "fix p :: \"'a poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<noteq> 0; irred a\\<rbrakk>\n       \\<Longrightarrow> Divisibility.prime mk_monoid a", "assume p: \"p \\<noteq> 0\" and \"irred p\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  irred p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<noteq> 0; irred a\\<rbrakk>\n       \\<Longrightarrow> Divisibility.prime mk_monoid a", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  irred p", "have irr: \"irreducible p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  irred p\n\ngoal (1 subgoal):\n 1. irreducible p", "by auto"], ["proof (state)\nthis:\n  irreducible p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<noteq> 0; irred a\\<rbrakk>\n       \\<Longrightarrow> Divisibility.prime mk_monoid a", "from p"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have p': \"?E p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map_poly to_fract p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<noteq> 0; irred a\\<rbrakk>\n       \\<Longrightarrow> Divisibility.prime mk_monoid a", "from irreducible_PM_M_PFM[OF irr]"], ["proof (chain)\npicking this:\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irreducible (map_poly to_fract p) \\<and>\n  content_ff (map_poly to_fract p) =dff 1", "have choice: \"degree p = 0 \\<and> irred (coeff p 0)\n      \\<or> degree p \\<noteq> 0 \\<and> irred (?E p) \\<and> content_ff_ff p =dff 1\""], ["proof (prove)\nusing this:\n  degree p = 0 \\<and> irreducible (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irreducible (map_poly to_fract p) \\<and>\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<or>\n    degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1", "by auto"], ["proof (state)\nthis:\n  degree p = 0 \\<and> irred (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<noteq> 0; irred a\\<rbrakk>\n       \\<Longrightarrow> Divisibility.prime mk_monoid a", "show \"Divisibility.prime mk_monoid p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Divisibility.prime mk_monoid p", "proof (rule Divisibility.primeI, unfold mk_monoid_simps mem_Units)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> p dvd 1\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "show \"\\<not> p dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p dvd 1 \\<Longrightarrow> False", "assume \"p dvd 1\""], ["proof (state)\nthis:\n  p dvd 1\n\ngoal (1 subgoal):\n 1. p dvd 1 \\<Longrightarrow> False", "from divides_degree[OF this]"], ["proof (chain)\npicking this:\n  degree p \\<le> degree 1 \\<or> 1 = 0", "have dp: \"degree p = 0\""], ["proof (prove)\nusing this:\n  degree p \\<le> degree 1 \\<or> 1 = 0\n\ngoal (1 subgoal):\n 1. degree p = 0", "by auto"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. p dvd 1 \\<Longrightarrow> False", "from degree0_coeffs[OF this] p"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]\n  p \\<noteq> 0", "obtain a where p: \"p = [:a:]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>p = [:a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p dvd 1 \\<Longrightarrow> False", "with choice"], ["proof (chain)\npicking this:\n  degree p = 0 \\<and> irred (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1\n  p = [:a:]\n  a \\<noteq> (0::'a)", "have irr: \"irreducible a\""], ["proof (prove)\nusing this:\n  degree p = 0 \\<and> irred (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1\n  p = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. irreducible a", "by auto"], ["proof (state)\nthis:\n  irreducible a\n\ngoal (1 subgoal):\n 1. p dvd 1 \\<Longrightarrow> False", "from \\<open>p dvd 1\\<close>[unfolded p]"], ["proof (chain)\npicking this:\n  [:a:] dvd 1", "have \"a dvd 1\""], ["proof (prove)\nusing this:\n  [:a:] dvd 1\n\ngoal (1 subgoal):\n 1. a dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. p dvd 1 \\<Longrightarrow> False", "with irr"], ["proof (chain)\npicking this:\n  irreducible a\n  a dvd (1::'a)", "show False"], ["proof (prove)\nusing this:\n  irreducible a\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. False", "unfolding irreducible_def"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>aa b.\n      a = aa * b \\<longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a))\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> p dvd 1\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "fix q r :: \"'a poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "assume q: \"q \\<noteq> 0\" and r: \"r \\<noteq> 0\" and \"factor p (q * r)\""], ["proof (state)\nthis:\n  q \\<noteq> 0\n  r \\<noteq> 0\n  comm_semiring_1_class.factor p (q * r)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "from this[unfolded factor_idom]"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  r \\<noteq> 0\n  if q * r = 0 then p = 0 else p dvd q * r", "have \"p dvd q * r\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  r \\<noteq> 0\n  if q * r = 0 then p = 0 else p dvd q * r\n\ngoal (1 subgoal):\n 1. p dvd q * r", "by auto"], ["proof (state)\nthis:\n  p dvd q * r\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "from iffD1[OF dvd_PM_iff this]"], ["proof (chain)\npicking this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract (q * r))) \\<and>\n  map_poly to_fract p dvd map_poly to_fract (q * r)", "have dvd_ct: \"divides_ff (content_ff_ff p) (content_ff (?E (q * r)))\"\n        and dvd_E: \"?E p dvd ?E q * ?E r\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract (q * r))) \\<and>\n  map_poly to_fract p dvd map_poly to_fract (q * r)\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract (q * r))) &&&\n    map_poly to_fract p dvd map_poly to_fract q * map_poly to_fract r", "by auto"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract (q * r)))\n  map_poly to_fract p dvd map_poly to_fract q * map_poly to_fract r\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "from gauss_lemma[of \"?E q\" \"?E r\"] divides_ff_trans[OF dvd_ct, of \"content_ff_ff q * content_ff_ff r\"]"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract q * map_poly to_fract r) =dff\n  content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r)\n  divides_ff (content_ff (map_poly to_fract (q * r)))\n   (content_ff (map_poly to_fract q) *\n    content_ff (map_poly to_fract r)) \\<Longrightarrow>\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))", "have dvd_ct: \"divides_ff (content_ff_ff p) (content_ff_ff q * content_ff_ff r)\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract q * map_poly to_fract r) =dff\n  content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r)\n  divides_ff (content_ff (map_poly to_fract (q * r)))\n   (content_ff (map_poly to_fract q) *\n    content_ff (map_poly to_fract r)) \\<Longrightarrow>\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))", "unfolding eq_dff_def"], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract q * map_poly to_fract r))\n   (content_ff (map_poly to_fract q) *\n    content_ff (map_poly to_fract r)) \\<and>\n  divides_ff\n   (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))\n   (content_ff (map_poly to_fract q * map_poly to_fract r))\n  divides_ff (content_ff (map_poly to_fract (q * r)))\n   (content_ff (map_poly to_fract q) *\n    content_ff (map_poly to_fract r)) \\<Longrightarrow>\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p))\n     (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))", "by auto"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract q) * content_ff (map_poly to_fract r))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "from choice"], ["proof (chain)\npicking this:\n  degree p = 0 \\<and> irred (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1", "have \"p dvd q \\<or> p dvd r\""], ["proof (prove)\nusing this:\n  degree p = 0 \\<and> irred (coeff p 0) \\<or>\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. p dvd q \\<or> p dvd r", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "assume \"degree p \\<noteq> 0 \\<and> irred (?E p) \\<and> content_ff_ff p =dff 1\""], ["proof (state)\nthis:\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "hence deg: \"degree p \\<noteq> 0\" and irr: \"irred (?E p)\" and ct: \"content_ff_ff p =dff 1\""], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0 \\<and>\n  irred (map_poly to_fract p) \\<and> content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 &&&\n    irred (map_poly to_fract p) &&& content_ff (map_poly to_fract p) =dff 1", "by auto"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n  irred (map_poly to_fract p)\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from PFM.irreducible_prime[OF irr] p"], ["proof (chain)\npicking this:\n  map_poly to_fract p \\<in> carrier mk_monoid \\<Longrightarrow>\n  Divisibility.prime mk_monoid (map_poly to_fract p)\n  p \\<noteq> 0", "have prime: \"Divisibility.prime mk_monoid (?E p)\""], ["proof (prove)\nusing this:\n  map_poly to_fract p \\<in> carrier mk_monoid \\<Longrightarrow>\n  Divisibility.prime mk_monoid (map_poly to_fract p)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Divisibility.prime mk_monoid (map_poly to_fract p)", "by auto"], ["proof (state)\nthis:\n  Divisibility.prime mk_monoid (map_poly to_fract p)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from q r"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  r \\<noteq> 0", "have Eq: \"?E q \\<in> carrier mk_monoid\" and Er: \"?E r \\<in> carrier mk_monoid\" \n          and q': \"?E q \\<noteq> 0\" and r': \"?E r \\<noteq> 0\" and qr': \"?E q * ?E r \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (map_poly to_fract q \\<in> carrier mk_monoid &&&\n     map_poly to_fract r \\<in> carrier mk_monoid) &&&\n    map_poly to_fract q \\<noteq> 0 &&&\n    map_poly to_fract r \\<noteq> 0 &&&\n    map_poly to_fract q * map_poly to_fract r \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  map_poly to_fract q \\<in> carrier mk_monoid\n  map_poly to_fract r \\<in> carrier mk_monoid\n  map_poly to_fract q \\<noteq> 0\n  map_poly to_fract r \\<noteq> 0\n  map_poly to_fract q * map_poly to_fract r \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from PFM.prime_divides[OF Eq Er prime] q' r' qr' dvd_E"], ["proof (chain)\npicking this:\n  comm_semiring_1_class.factor (map_poly to_fract p)\n   (map_poly to_fract q \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n    map_poly to_fract r) \\<Longrightarrow>\n  comm_semiring_1_class.factor (map_poly to_fract p)\n   (map_poly to_fract q) \\<or>\n  comm_semiring_1_class.factor (map_poly to_fract p) (map_poly to_fract r)\n  map_poly to_fract q \\<noteq> 0\n  map_poly to_fract r \\<noteq> 0\n  map_poly to_fract q * map_poly to_fract r \\<noteq> 0\n  map_poly to_fract p dvd map_poly to_fract q * map_poly to_fract r", "have dvd_E: \"?E p dvd ?E q \\<or> ?E p dvd ?E r\""], ["proof (prove)\nusing this:\n  comm_semiring_1_class.factor (map_poly to_fract p)\n   (map_poly to_fract q \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n    map_poly to_fract r) \\<Longrightarrow>\n  comm_semiring_1_class.factor (map_poly to_fract p)\n   (map_poly to_fract q) \\<or>\n  comm_semiring_1_class.factor (map_poly to_fract p) (map_poly to_fract r)\n  map_poly to_fract q \\<noteq> 0\n  map_poly to_fract r \\<noteq> 0\n  map_poly to_fract q * map_poly to_fract r \\<noteq> 0\n  map_poly to_fract p dvd map_poly to_fract q * map_poly to_fract r\n\ngoal (1 subgoal):\n 1. map_poly to_fract p dvd map_poly to_fract q \\<or>\n    map_poly to_fract p dvd map_poly to_fract r", "by simp"], ["proof (state)\nthis:\n  map_poly to_fract p dvd map_poly to_fract q \\<or>\n  map_poly to_fract p dvd map_poly to_fract r\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from ct"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract p) =dff 1", "have ct: \"divides_ff (content_ff_ff p) 1\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract p) =dff 1\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p)) 1", "unfolding eq_dff_def"], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract p)) 1 \\<and>\n  divides_ff 1 (content_ff (map_poly to_fract p))\n\ngoal (1 subgoal):\n 1. divides_ff (content_ff (map_poly to_fract p)) 1", "by auto"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p)) 1\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "moreover"], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p)) 1\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "have \"\\<And> q. divides_ff 1 (content_ff_ff q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q. divides_ff 1 (content_ff (map_poly to_fract q))", "using content_ff_map_poly_to_fract"], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<And>q. divides_ff 1 (content_ff (map_poly to_fract q))", "unfolding divides_ff_def"], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<And>q. \\<exists>r. content_ff (map_poly to_fract q) = 1 * to_fract r", "by auto"], ["proof (state)\nthis:\n  divides_ff 1 (content_ff (map_poly to_fract ?q1))\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from divides_ff_trans[OF ct this]"], ["proof (chain)\npicking this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract ?q2))", "have ct: \"\\<And> q. divides_ff (content_ff_ff p) (content_ff_ff q)\""], ["proof (prove)\nusing this:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract ?q2))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       divides_ff (content_ff (map_poly to_fract p))\n        (content_ff (map_poly to_fract q))", "."], ["proof (state)\nthis:\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract ?q2))\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r\n 2. degree p \\<noteq> 0 \\<and>\n    irred (map_poly to_fract p) \\<and>\n    content_ff (map_poly to_fract p) =dff 1 \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "with dvd_E"], ["proof (chain)\npicking this:\n  map_poly to_fract p dvd map_poly to_fract q \\<or>\n  map_poly to_fract p dvd map_poly to_fract r\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract ?q2))", "show ?thesis"], ["proof (prove)\nusing this:\n  map_poly to_fract p dvd map_poly to_fract q \\<or>\n  map_poly to_fract p dvd map_poly to_fract r\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract ?q2))\n\ngoal (1 subgoal):\n 1. p dvd q \\<or> p dvd r", "using dvd_PM_iff"], ["proof (prove)\nusing this:\n  map_poly to_fract p dvd map_poly to_fract q \\<or>\n  map_poly to_fract p dvd map_poly to_fract r\n  divides_ff (content_ff (map_poly to_fract p))\n   (content_ff (map_poly to_fract ?q2))\n  (?p dvd ?q) =\n  (divides_ff (content_ff (map_poly to_fract ?p))\n    (content_ff (map_poly to_fract ?q)) \\<and>\n   map_poly to_fract ?p dvd map_poly to_fract ?q)\n\ngoal (1 subgoal):\n 1. p dvd q \\<or> p dvd r", "by blast"], ["proof (state)\nthis:\n  p dvd q \\<or> p dvd r\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "assume \"degree p = 0 \\<and> irred (coeff p 0)\""], ["proof (state)\nthis:\n  degree p = 0 \\<and> irred (coeff p 0)\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "hence deg: \"degree p = 0\" and irr: \"irred (coeff p 0)\""], ["proof (prove)\nusing this:\n  degree p = 0 \\<and> irred (coeff p 0)\n\ngoal (1 subgoal):\n 1. degree p = 0 &&& irred (coeff p 0)", "by auto"], ["proof (state)\nthis:\n  degree p = 0\n  irred (coeff p 0)\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from degree0_coeffs[OF deg] p"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]\n  p \\<noteq> 0", "obtain a where p: \"p = [:a:]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>p = [:a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "with irr"], ["proof (chain)\npicking this:\n  irred (coeff p 0)\n  p = [:a:]\n  a \\<noteq> (0::'a)", "have irr: \"irred a\" and aM: \"a \\<in> carrier mk_monoid\""], ["proof (prove)\nusing this:\n  irred (coeff p 0)\n  p = [:a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. irred a &&& a \\<in> carrier mk_monoid", "by auto"], ["proof (state)\nthis:\n  irred a\n  a \\<in> carrier mk_monoid\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from M.irreducible_prime[OF irr aM]"], ["proof (chain)\npicking this:\n  Divisibility.prime mk_monoid a", "have prime: \"Divisibility.prime mk_monoid a\""], ["proof (prove)\nusing this:\n  Divisibility.prime mk_monoid a\n\ngoal (1 subgoal):\n 1. Divisibility.prime mk_monoid a", "."], ["proof (state)\nthis:\n  Divisibility.prime mk_monoid a\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cq where cq: \"content_ff_ff q = to_fract cq\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cq.\n        content_ff (map_poly to_fract q) = to_fract cq \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract q) = to_fract cq\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cp where cp: \"content_ff_ff p = to_fract cp\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cp.\n        content_ff (map_poly to_fract p) = to_fract cp \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract p) = to_fract cp\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from content_ff_map_poly_to_fract"], ["proof (chain)\npicking this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract", "obtain cr where cr: \"content_ff_ff r = to_fract cr\""], ["proof (prove)\nusing this:\n  content_ff (map_poly to_fract ?p) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>cr.\n        content_ff (map_poly to_fract r) = to_fract cr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  content_ff (map_poly to_fract r) = to_fract cr\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "have \"divides_ff (to_fract a) (content_ff_ff p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divides_ff (to_fract a) (content_ff (map_poly to_fract p))", "unfolding p content_ff_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set (coeffs (map_poly to_fract [:a:]))) (divides_ff (to_fract a))", "using a"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Ball (set (coeffs (map_poly to_fract [:a:]))) (divides_ff (to_fract a))", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract a) (content_ff (map_poly to_fract p))\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from divides_ff_trans[OF this[unfolded cp] dvd_ct[unfolded cp cq cr]]"], ["proof (chain)\npicking this:\n  divides_ff (to_fract a) (to_fract cq * to_fract cr)", "have \"divides_ff (to_fract a) (to_fract (cq * cr))\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract a) (to_fract cq * to_fract cr)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract a) (to_fract (cq * cr))", "by simp"], ["proof (state)\nthis:\n  divides_ff (to_fract a) (to_fract (cq * cr))\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "hence dvd: \"a dvd cq * cr\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract a) (to_fract (cq * cr))\n\ngoal (1 subgoal):\n 1. a dvd cq * cr", "by (auto simp add: divides_ff_def simp del: to_fract_hom.hom_mult simp: to_fract_hom.hom_mult[symmetric])"], ["proof (state)\nthis:\n  a dvd cq * cr\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from content_ff_divides_ff[of \"to_fract a\" \"?E p\"]"], ["proof (chain)\npicking this:\n  to_fract a \\<in> set (coeffs (map_poly to_fract p)) \\<Longrightarrow>\n  divides_ff (content_ff (map_poly to_fract p)) (to_fract a)", "have \"divides_ff (to_fract cp) (to_fract a)\""], ["proof (prove)\nusing this:\n  to_fract a \\<in> set (coeffs (map_poly to_fract p)) \\<Longrightarrow>\n  divides_ff (content_ff (map_poly to_fract p)) (to_fract a)\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract cp) (to_fract a)", "using cp a p"], ["proof (prove)\nusing this:\n  to_fract a \\<in> set (coeffs (map_poly to_fract p)) \\<Longrightarrow>\n  divides_ff (content_ff (map_poly to_fract p)) (to_fract a)\n  content_ff (map_poly to_fract p) = to_fract cp\n  a \\<noteq> (0::'a)\n  p = [:a:]\n\ngoal (1 subgoal):\n 1. divides_ff (to_fract cp) (to_fract a)", "by auto"], ["proof (state)\nthis:\n  divides_ff (to_fract cp) (to_fract a)\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "hence cpa: \"cp dvd a\""], ["proof (prove)\nusing this:\n  divides_ff (to_fract cp) (to_fract a)\n\ngoal (1 subgoal):\n 1. cp dvd a", "by simp"], ["proof (state)\nthis:\n  cp dvd a\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from a q r cq cr"], ["proof (chain)\npicking this:\n  a \\<noteq> (0::'a)\n  q \\<noteq> 0\n  r \\<noteq> 0\n  content_ff (map_poly to_fract q) = to_fract cq\n  content_ff (map_poly to_fract r) = to_fract cr", "have aM: \"a \\<in> carrier mk_monoid\" and qM: \"cq \\<in> carrier mk_monoid\" and rM: \"cr \\<in> carrier mk_monoid\"\n          and q': \"cq \\<noteq> 0\" and r': \"cr \\<noteq> 0\" and qr': \"cq * cr \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  q \\<noteq> 0\n  r \\<noteq> 0\n  content_ff (map_poly to_fract q) = to_fract cq\n  content_ff (map_poly to_fract r) = to_fract cr\n\ngoal (1 subgoal):\n 1. (a \\<in> carrier mk_monoid &&&\n     cq \\<in> carrier mk_monoid &&& cr \\<in> carrier mk_monoid) &&&\n    cq \\<noteq> (0::'a) &&& cr \\<noteq> (0::'a) &&& cq * cr \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<in> carrier mk_monoid\n  cq \\<in> carrier mk_monoid\n  cr \\<in> carrier mk_monoid\n  cq \\<noteq> (0::'a)\n  cr \\<noteq> (0::'a)\n  cq * cr \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from M.prime_divides[OF qM rM prime] q' r' qr' dvd"], ["proof (chain)\npicking this:\n  comm_semiring_1_class.factor a\n   (cq \\<otimes>\\<^bsub>mk_monoid\\<^esub> cr) \\<Longrightarrow>\n  comm_semiring_1_class.factor a cq \\<or> comm_semiring_1_class.factor a cr\n  cq \\<noteq> (0::'a)\n  cr \\<noteq> (0::'a)\n  cq * cr \\<noteq> (0::'a)\n  a dvd cq * cr", "have \"a dvd cq \\<or> a dvd cr\""], ["proof (prove)\nusing this:\n  comm_semiring_1_class.factor a\n   (cq \\<otimes>\\<^bsub>mk_monoid\\<^esub> cr) \\<Longrightarrow>\n  comm_semiring_1_class.factor a cq \\<or> comm_semiring_1_class.factor a cr\n  cq \\<noteq> (0::'a)\n  cr \\<noteq> (0::'a)\n  cq * cr \\<noteq> (0::'a)\n  a dvd cq * cr\n\ngoal (1 subgoal):\n 1. a dvd cq \\<or> a dvd cr", "by simp"], ["proof (state)\nthis:\n  a dvd cq \\<or> a dvd cr\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "with dvd_trans[OF cpa]"], ["proof (chain)\npicking this:\n  a dvd ?c \\<Longrightarrow> cp dvd ?c\n  a dvd cq \\<or> a dvd cr", "have dvd: \"cp dvd cq \\<or> cp dvd cr\""], ["proof (prove)\nusing this:\n  a dvd ?c \\<Longrightarrow> cp dvd ?c\n  a dvd cq \\<or> a dvd cr\n\ngoal (1 subgoal):\n 1. cp dvd cq \\<or> cp dvd cr", "by auto"], ["proof (state)\nthis:\n  cp dvd cq \\<or> cp dvd cr\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "have \"\\<And> q. ?E p * (smult (inverse (to_fract a)) q) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q. map_poly to_fract p * smult (inverse (to_fract a)) q = q", "unfolding p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q. map_poly to_fract [:a:] * smult (inverse (to_fract a)) q = q", "using a"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>q. map_poly to_fract [:a:] * smult (inverse (to_fract a)) q = q", "by (auto simp: one_poly_def)"], ["proof (state)\nthis:\n  map_poly to_fract p * smult (inverse (to_fract a)) ?q1 = ?q1\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "hence Edvd: \"\\<And> q. ?E p dvd q\""], ["proof (prove)\nusing this:\n  map_poly to_fract p * smult (inverse (to_fract a)) ?q1 = ?q1\n\ngoal (1 subgoal):\n 1. \\<And>q. map_poly to_fract p dvd q", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  map_poly to_fract p * smult (inverse (to_fract a)) ?q1 = ?q1\n\ngoal (1 subgoal):\n 1. \\<And>q. \\<exists>k. q = map_poly to_fract p * k", "by metis"], ["proof (state)\nthis:\n  map_poly to_fract p dvd ?q1\n\ngoal (1 subgoal):\n 1. degree p = 0 \\<and> irred (coeff p 0) \\<Longrightarrow>\n    p dvd q \\<or> p dvd r", "from dvd Edvd"], ["proof (chain)\npicking this:\n  cp dvd cq \\<or> cp dvd cr\n  map_poly to_fract p dvd ?q1", "show ?thesis"], ["proof (prove)\nusing this:\n  cp dvd cq \\<or> cp dvd cr\n  map_poly to_fract p dvd ?q1\n\ngoal (1 subgoal):\n 1. p dvd q \\<or> p dvd r", "apply (subst(1 2) dvd_PM_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp dvd cq \\<or> cp dvd cr;\n     \\<And>q. map_poly to_fract p dvd q\\<rbrakk>\n    \\<Longrightarrow> divides_ff (content_ff (map_poly to_fract p))\n                       (content_ff (map_poly to_fract q)) \\<and>\n                      map_poly to_fract p dvd map_poly to_fract q \\<or>\n                      divides_ff (content_ff (map_poly to_fract p))\n                       (content_ff (map_poly to_fract r)) \\<and>\n                      map_poly to_fract p dvd map_poly to_fract r", "unfolding cp cq cr"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp dvd cq \\<or> cp dvd cr;\n     \\<And>q. map_poly to_fract p dvd q\\<rbrakk>\n    \\<Longrightarrow> divides_ff (to_fract cp) (to_fract cq) \\<and>\n                      map_poly to_fract p dvd map_poly to_fract q \\<or>\n                      divides_ff (to_fract cp) (to_fract cr) \\<and>\n                      map_poly to_fract p dvd map_poly to_fract r", "by auto"], ["proof (state)\nthis:\n  p dvd q \\<or> p dvd r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p dvd q \\<or> p dvd r\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0;\n        comm_semiring_1_class.factor p (a * b)\\<rbrakk>\n       \\<Longrightarrow> comm_semiring_1_class.factor p a \\<or>\n                         comm_semiring_1_class.factor p b", "thus \"factor p q \\<or> factor p r\""], ["proof (prove)\nusing this:\n  p dvd q \\<or> p dvd r\n\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factor p q \\<or> comm_semiring_1_class.factor p r", "unfolding factor_idom"], ["proof (prove)\nusing this:\n  p dvd q \\<or> p dvd r\n\ngoal (1 subgoal):\n 1. (if q = 0 then p = 0 else p dvd q) \\<or>\n    (if r = 0 then p = 0 else p dvd r)", "using p q r"], ["proof (prove)\nusing this:\n  p dvd q \\<or> p dvd r\n  p \\<noteq> 0\n  q \\<noteq> 0\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if q = 0 then p = 0 else p dvd q) \\<or>\n    (if r = 0 then p = 0 else p dvd r)", "by auto"], ["proof (state)\nthis:\n  comm_semiring_1_class.factor p q \\<or> comm_semiring_1_class.factor p r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Divisibility.prime mk_monoid p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  primeness_condition_monoid mk_monoid\n\ngoal:\nNo subgoals!", "qed"], ["", "instance poly :: (ufd) ufd"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a poly, ufd_class)", "by (intro class.ufd.of_class.intro factorial_monoid_imp_ufd factorial_monoid_poly)"], ["", "lemma primitive_iff_some_content_dvd_1:\n  fixes f :: \"'a :: ufd poly\" (* gcd_condition suffices... *)\n  shows \"primitive f \\<longleftrightarrow> some_gcd.listgcd (coeffs f) dvd 1\" (is \"_ \\<longleftrightarrow> ?c dvd 1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive f = (some_gcd.listgcd (coeffs f) dvd (1::'a))", "proof(intro iffI primitiveI)"], ["proof (state)\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>some_gcd.listgcd (coeffs f) dvd (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> x dvd (1::'a)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>some_gcd.listgcd (coeffs f) dvd (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> x dvd (1::'a)", "assume \"(\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y)\""], ["proof (state)\nthis:\n  ?y \\<in> set (coeffs f) \\<Longrightarrow> x dvd ?y\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>some_gcd.listgcd (coeffs f) dvd (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> x dvd (1::'a)", "from some_gcd.listgcd_greatest[of \"coeffs f\", OF this]"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      x \\<in> set (coeffs f) \\<Longrightarrow>\n      x \\<in> set (coeffs f)) \\<Longrightarrow>\n  x dvd some_gcd.listgcd (coeffs f)", "have \"x dvd ?c\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> set (coeffs f) \\<Longrightarrow>\n      x \\<in> set (coeffs f)) \\<Longrightarrow>\n  x dvd some_gcd.listgcd (coeffs f)\n\ngoal (1 subgoal):\n 1. x dvd some_gcd.listgcd (coeffs f)", "by simp"], ["proof (state)\nthis:\n  x dvd some_gcd.listgcd (coeffs f)\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>some_gcd.listgcd (coeffs f) dvd (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> x dvd (1::'a)", "also"], ["proof (state)\nthis:\n  x dvd some_gcd.listgcd (coeffs f)\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>some_gcd.listgcd (coeffs f) dvd (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> x dvd (1::'a)", "assume \"?c dvd 1\""], ["proof (state)\nthis:\n  some_gcd.listgcd (coeffs f) dvd (1::'a)\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>some_gcd.listgcd (coeffs f) dvd (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> x dvd (1::'a)", "finally"], ["proof (chain)\npicking this:\n  x dvd (1::'a)", "show \"x dvd 1\""], ["proof (prove)\nusing this:\n  x dvd (1::'a)\n\ngoal (1 subgoal):\n 1. x dvd (1::'a)", "."], ["proof (state)\nthis:\n  x dvd (1::'a)\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)", "assume \"primitive f\""], ["proof (state)\nthis:\n  primitive f\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow> some_gcd.listgcd (coeffs f) dvd (1::'a)", "from primitiveD[OF this some_gcd.listgcd[of _ \"coeffs f\"]]"], ["proof (chain)\npicking this:\n  (\\<And>y.\n      y \\<in> set (coeffs f) \\<Longrightarrow>\n      y \\<in> set (coeffs f)) \\<Longrightarrow>\n  some_gcd.listgcd (coeffs f) dvd (1::'a)", "show \"?c dvd 1\""], ["proof (prove)\nusing this:\n  (\\<And>y.\n      y \\<in> set (coeffs f) \\<Longrightarrow>\n      y \\<in> set (coeffs f)) \\<Longrightarrow>\n  some_gcd.listgcd (coeffs f) dvd (1::'a)\n\ngoal (1 subgoal):\n 1. some_gcd.listgcd (coeffs f) dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  some_gcd.listgcd (coeffs f) dvd (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}