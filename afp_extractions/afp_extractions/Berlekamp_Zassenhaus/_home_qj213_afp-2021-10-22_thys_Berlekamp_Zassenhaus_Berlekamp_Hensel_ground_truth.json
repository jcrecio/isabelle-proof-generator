{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Berlekamp_Hensel.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma berlekamp_hensel_main:\n  assumes n: \"n \\<noteq> 0\"\n    and res: \"berlekamp_hensel p n f = gs\" \n    and cop: \"coprime (lead_coeff f) p\" \n    and sf: \"square_free_m f\" \n    and berl: \"finite_field_factorization_int p f = (c,fs)\" \n  shows \"poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) \\<comment> \\<open>factorization mod \\<open>p^n\\<close>\\<close>\"\n    and \"sort (map degree fs) = sort (map degree gs)\"\n    and \"\\<And> g. g \\<in> set gs \\<Longrightarrow> monic g \\<and> poly_mod.Mp (p^n) g = g \\<and>  \\<comment> \\<open>monic and normalized\\<close>\n        poly_mod.irreducible_m p g \\<and> \\<comment> \\<open>irreducibility even mod \\<open>p\\<close>\\<close>\n        poly_mod.degree_m p g = degree g  \\<comment> \\<open>mod \\<open>p\\<close> does not change degree of \\<open>g\\<close>\\<close>\"", "theorem berlekamp_hensel:\n  assumes cop: \"coprime (lead_coeff f) p\"\n    and sf: \"square_free_m f\"\n    and res: \"berlekamp_hensel p n f = gs\"\n    and n: \"n \\<noteq> 0\"\n  shows \"poly_mod.factorization_m (p^n) f (lead_coeff f, mset gs) \\<comment> \\<open>factorization mod \\<open>p^n\\<close>\\<close>\"\n    and \"\\<And> g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p^n) g = g \\<and> poly_mod.irreducible_m p g\n      \\<comment> \\<open>normalized and \\<open>irreducible\\<close> even mod \\<open>p\\<close>\\<close>\"", "lemma berlekamp_and_hensel_separated:\n  assumes cop: \"coprime (lead_coeff f) p\"\n    and sf: \"square_free_m f\"\n    and res: \"hensel_lifting p n f fs = gs\"\n    and berl: \"finite_field_factorization_int p f = (c,fs)\"\n    and n: \"n \\<noteq> 0\"\n  shows \"berlekamp_hensel p n f = gs\"\n    and \"sort (map degree fs) = sort (map degree gs)\"", "lemma prime_cop_exp_poly_mod:\n  assumes prime: \"prime p\" and cop: \"coprime c p\" and n: \"n \\<noteq> 0\"\n  shows \"poly_mod.M (p^n) c \\<in> {1 ..< p^n}\"", "lemma coprime_lead_coeff_factor: assumes \"coprime (lead_coeff (f * g)) p\"\n  shows \"coprime (lead_coeff f) p\" \"coprime (lead_coeff g) p\"", "lemma unique_factorization_m_factor: assumes uf: \"unique_factorization_m (f * g) (c,hs)\"\n  and cop: \"coprime (lead_coeff (f * g)) p\"  \n  and sf: \"p.square_free_m (f * g)\" \n  and n: \"n \\<noteq> 0\" \n  and m: \"m = p^n\" \n  shows \"\\<exists> fs gs. unique_factorization_m f (lead_coeff f,fs) \n  \\<and> unique_factorization_m g (lead_coeff g,gs) \n  \\<and> Mf (c,hs) = Mf (lead_coeff f * lead_coeff g, fs + gs)\n  \\<and> image_mset Mp fs = fs \\<and> image_mset Mp gs = gs\"", "lemma unique_factorization_factorI:\n  assumes ufact: \"unique_factorization_m (f * g) FG\"\n    and cop: \"coprime (lead_coeff (f * g)) p\"\n    and sf: \"poly_mod.square_free_m p (f * g)\"\n    and n: \"n \\<noteq> 0\" \n    and m: \"m = p^n\" \n  shows \"factorization_m f F \\<Longrightarrow> unique_factorization_m f F\"\n    and \"factorization_m g G \\<Longrightarrow> unique_factorization_m g G\"", "lemma monic_Mp_prod_mset: assumes fs: \"\\<And> f. f \\<in># fs \\<Longrightarrow> monic (Mp f)\" \n  shows \"monic (Mp (prod_mset fs))\"", "lemma degree_Mp_mult_monic: assumes \"monic f\" \"monic g\"\n  shows \"degree (Mp (f * g)) = degree f + degree g\"", "lemma factorization_m_degree: assumes \"factorization_m f (c,fs)\" \n  and 0: \"Mp f \\<noteq> 0\" \n  shows \"degree_m f = sum_mset (image_mset degree_m fs)\"", "lemma degree_m_mult_le: \"degree_m (f * g) \\<le> degree_m f + degree_m g\"", "lemma degree_m_prod_mset_le: \"degree_m (prod_mset fs) \\<le> sum_mset (image_mset degree_m fs)\"", "lemma unique_factorization_m_factor_partition: assumes l0: \"l \\<noteq> 0\" \n  and uf: \"poly_mod.unique_factorization_m (p^l) f (lead_coeff f, mset gs)\" \n  and f: \"f = f1 * f2\" \n  and cop: \"coprime (lead_coeff f) p\" \n  and sf: \"square_free_m f\" \n  and part: \"List.partition (\\<lambda>gi. gi dvdm f1) gs = (gs1, gs2)\" \nshows \"poly_mod.unique_factorization_m (p^l) f1 (lead_coeff f1, mset gs1)\"\n  \"poly_mod.unique_factorization_m (p^l) f2 (lead_coeff f2, mset gs2)\"", "lemma factorization_pn_to_factorization_p: assumes fact: \"poly_mod.factorization_m (p^n) C (c,fs)\"\n  and sf: \"square_free_m C\" \n  and n: \"n \\<noteq> 0\" \nshows \"factorization_m C (c,fs)\"", "lemma unique_monic_hensel_factorization: \n  assumes ufact: \"unique_factorization_m C (1,Fs)\"\n  and C: \"monic C\" \"square_free_m C\" \n  and n: \"n \\<noteq> 0\" \n  shows \"\\<exists> Gs. poly_mod.unique_factorization_m (p^n) C (1, Gs)\"", "theorem berlekamp_hensel_unique:\n  assumes cop: \"coprime (lead_coeff f) p\"\n  and sf: \"poly_mod.square_free_m p f\"\n  and res: \"berlekamp_hensel p n f = gs\"\n  and n: \"n \\<noteq> 0\"\n  shows \"poly_mod.unique_factorization_m (p^n) f (lead_coeff f, mset gs) \\<comment> \\<open>unique factorization mod \\<open>p^n\\<close>\\<close>\"\n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p^n) g = g   \\<comment> \\<open>normalized\\<close>\"", "lemma hensel_lifting_unique:\n  assumes n: \"n \\<noteq> 0\" \n  and res: \"hensel_lifting p n f fs = gs\"                        \\<comment> \\<open>result of hensel is fact. \\<open>gs\\<close>\\<close>\n  and cop: \"coprime (lead_coeff f) p\" \n  and sf: \"poly_mod.square_free_m p f\" \n  and fact: \"poly_mod.factorization_m p f (c, mset fs)\"          \\<comment> \\<open>input is fact. \\<open>fs mod p\\<close>\\<close>\n  and c: \"c \\<in> {0..<p}\" \n  and norm: \"(\\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p})\" \nshows \"poly_mod.unique_factorization_m (p^n) f (lead_coeff f, mset gs)\" \\<comment> \\<open>unique factorization mod \\<open>p^n\\<close>\\<close>\n    \"sort (map degree fs) = sort (map degree gs)\"                       \\<comment> \\<open>degrees stay the same\\<close>\n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> monic g \\<and> poly_mod.Mp (p^n) g = g \\<and>    \\<comment> \\<open>monic and normalized\\<close>\n      poly_mod.irreducible_m p g \\<and>                              \\<comment> \\<open>irreducibility even mod \\<open>p\\<close>\\<close>\n      poly_mod.degree_m p g = degree g   \\<comment> \\<open>mod \\<open>p\\<close> does not change degree of \\<open>g\\<close>\\<close>\""], "translations": [["", "lemma berlekamp_hensel_main:\n  assumes n: \"n \\<noteq> 0\"\n    and res: \"berlekamp_hensel p n f = gs\" \n    and cop: \"coprime (lead_coeff f) p\" \n    and sf: \"square_free_m f\" \n    and berl: \"finite_field_factorization_int p f = (c,fs)\" \n  shows \"poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) \\<comment> \\<open>factorization mod \\<open>p^n\\<close>\\<close>\"\n    and \"sort (map degree fs) = sort (map degree gs)\"\n    and \"\\<And> g. g \\<in> set gs \\<Longrightarrow> monic g \\<and> poly_mod.Mp (p^n) g = g \\<and>  \\<comment> \\<open>monic and normalized\\<close>\n        poly_mod.irreducible_m p g \\<and> \\<comment> \\<open>irreducibility even mod \\<open>p\\<close>\\<close>\n        poly_mod.degree_m p g = degree g  \\<comment> \\<open>mod \\<open>p\\<close> does not change degree of \\<open>g\\<close>\\<close>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    sort (map degree fs) = sort (map degree gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        monic g \\<and>\n        poly_mod.Mp (p ^ n) g = g \\<and>\n        irreducible_m g \\<and> degree_m g = degree g)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "from res[unfolded berlekamp_hensel_def berl split]"], ["proof (chain)\npicking this:\n  hensel_lifting p n f fs = gs", "have hen: \"hensel_lifting p n f fs = gs\""], ["proof (prove)\nusing this:\n  hensel_lifting p n f fs = gs\n\ngoal (1 subgoal):\n 1. hensel_lifting p n f fs = gs", "."], ["proof (state)\nthis:\n  hensel_lifting p n f fs = gs\n\ngoal (3 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "note bh = finite_field_factorization_int[OF sf berl]"], ["proof (state)\nthis:\n  unique_factorization_m f (c, mset fs) \\<and>\n  c \\<in> {0..<p} \\<and>\n  (\\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p})\n\ngoal (3 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "from bh"], ["proof (chain)\npicking this:\n  unique_factorization_m f (c, mset fs) \\<and>\n  c \\<in> {0..<p} \\<and>\n  (\\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p})", "have \"poly_mod.factorization_m p f (c, mset fs)\" \"c \\<in> {0..<p}\" \"(\\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p})\""], ["proof (prove)\nusing this:\n  unique_factorization_m f (c, mset fs) \\<and>\n  c \\<in> {0..<p} \\<and>\n  (\\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p})\n\ngoal (1 subgoal):\n 1. factorization_m f (c, mset fs) &&&\n    c \\<in> {0..<p} &&&\n    \\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p}", "by (auto simp: poly_mod.unique_factorization_m_alt_def)"], ["proof (state)\nthis:\n  factorization_m f (c, mset fs)\n  c \\<in> {0..<p}\n  \\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p}\n\ngoal (3 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "note hen = hensel_lifting[OF n hen cop sf, OF this]"], ["proof (state)\nthis:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (3 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "show \"poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\" \n    \"sort (map degree fs) = sort (map degree gs)\"\n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> monic g \\<and> poly_mod.Mp (p^n) g = g \\<and>  \n      poly_mod.irreducible_m p g \\<and> \n      poly_mod.degree_m p g = degree g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    sort (map degree fs) = sort (map degree gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        monic g \\<and>\n        poly_mod.Mp (p ^ n) g = g \\<and>\n        irreducible_m g \\<and> degree_m g = degree g)", "using hen"], ["proof (prove)\nusing this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (1 subgoal):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    sort (map degree fs) = sort (map degree gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        monic g \\<and>\n        poly_mod.Mp (p ^ n) g = g \\<and>\n        irreducible_m g \\<and> degree_m g = degree g)", "by auto"], ["proof (state)\nthis:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem berlekamp_hensel:\n  assumes cop: \"coprime (lead_coeff f) p\"\n    and sf: \"square_free_m f\"\n    and res: \"berlekamp_hensel p n f = gs\"\n    and n: \"n \\<noteq> 0\"\n  shows \"poly_mod.factorization_m (p^n) f (lead_coeff f, mset gs) \\<comment> \\<open>factorization mod \\<open>p^n\\<close>\\<close>\"\n    and \"\\<And> g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p^n) g = g \\<and> poly_mod.irreducible_m p g\n      \\<comment> \\<open>normalized and \\<open>irreducible\\<close> even mod \\<open>p\\<close>\\<close>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        poly_mod.Mp (p ^ n) g = g \\<and> irreducible_m g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       poly_mod.Mp (p ^ n) g = g \\<and> irreducible_m g", "obtain c fs where \"finite_field_factorization_int p f = (c,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c fs.\n        finite_field_factorization_int p f = (c, fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  finite_field_factorization_int p f = (c, fs)\n\ngoal (2 subgoals):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       poly_mod.Mp (p ^ n) g = g \\<and> irreducible_m g", "from berlekamp_hensel_main[OF n res cop sf this]"], ["proof (chain)\npicking this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g", "show \"poly_mod.factorization_m (p^n) f (lead_coeff f, mset gs)\" \n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p^n) g = g \\<and> poly_mod.irreducible_m p g\""], ["proof (prove)\nusing this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (1 subgoal):\n 1. poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        poly_mod.Mp (p ^ n) g = g \\<and> irreducible_m g)", "by auto"], ["proof (state)\nthis:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and> irreducible_m ?g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma berlekamp_and_hensel_separated:\n  assumes cop: \"coprime (lead_coeff f) p\"\n    and sf: \"square_free_m f\"\n    and res: \"hensel_lifting p n f fs = gs\"\n    and berl: \"finite_field_factorization_int p f = (c,fs)\"\n    and n: \"n \\<noteq> 0\"\n  shows \"berlekamp_hensel p n f = gs\"\n    and \"sort (map degree fs) = sort (map degree gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. berlekamp_hensel p n f = gs &&&\n    sort (map degree fs) = sort (map degree gs)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. berlekamp_hensel p n f = gs\n 2. sort (map degree fs) = sort (map degree gs)", "show \"berlekamp_hensel p n f = gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. berlekamp_hensel p n f = gs", "unfolding res[symmetric]\n    berlekamp_hensel_def hensel_lifting_def berl split Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. hensel_lifting_monic p n\n     (Polynomial.smult (inverse_mod (lead_coeff f) (p ^ n)) f) fs =\n    hensel_lifting_monic p n\n     (Polynomial.smult (inverse_mod (lead_coeff f) (p ^ n)) f) fs", ".."], ["proof (state)\nthis:\n  berlekamp_hensel p n f = gs\n\ngoal (1 subgoal):\n 1. sort (map degree fs) = sort (map degree gs)", "from berlekamp_hensel_main[OF n this cop sf berl]"], ["proof (chain)\npicking this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g", "show \"sort (map degree fs) = sort (map degree gs)\""], ["proof (prove)\nusing this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (1 subgoal):\n 1. sort (map degree fs) = sort (map degree gs)", "by auto"], ["proof (state)\nthis:\n  sort (map degree fs) = sort (map degree gs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma prime_cop_exp_poly_mod:\n  assumes prime: \"prime p\" and cop: \"coprime c p\" and n: \"n \\<noteq> 0\"\n  shows \"poly_mod.M (p^n) c \\<in> {1 ..< p^n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.M (p ^ n) c \\<in> {1..<p ^ n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. poly_mod.M (p ^ n) c \\<in> {1..<p ^ n}", "from prime"], ["proof (chain)\npicking this:\n  prime p", "have p1: \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (simp add: prime_int_iff)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. poly_mod.M (p ^ n) c \\<in> {1..<p ^ n}", "interpret poly_mod_2 \"p^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_2 (p ^ n)", "unfolding poly_mod_2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < p ^ n", "using p1 n"], ["proof (prove)\nusing this:\n  1 < p\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < p ^ n", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. M c \\<in> {1..<p ^ n}", "from cop p1 m1"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime c p\n  1 < p\n  1 < p ^ n", "have \"M c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime c p\n  1 < p\n  1 < p ^ n\n\ngoal (1 subgoal):\n 1. M c \\<noteq> 0", "by (auto simp add: M_def)"], ["proof (state)\nthis:\n  M c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. M c \\<in> {1..<p ^ n}", "moreover"], ["proof (state)\nthis:\n  M c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. M c \\<in> {1..<p ^ n}", "have \"M c < p^n\" \"M c \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M c < p ^ n &&& 0 \\<le> M c", "unfolding M_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. c mod p ^ n < p ^ n &&& 0 \\<le> c mod p ^ n", "using m1"], ["proof (prove)\nusing this:\n  1 < p ^ n\n\ngoal (1 subgoal):\n 1. c mod p ^ n < p ^ n &&& 0 \\<le> c mod p ^ n", "by auto"], ["proof (state)\nthis:\n  M c < p ^ n\n  0 \\<le> M c\n\ngoal (1 subgoal):\n 1. M c \\<in> {1..<p ^ n}", "ultimately"], ["proof (chain)\npicking this:\n  M c \\<noteq> 0\n  M c < p ^ n\n  0 \\<le> M c", "show ?thesis"], ["proof (prove)\nusing this:\n  M c \\<noteq> 0\n  M c < p ^ n\n  0 \\<le> M c\n\ngoal (1 subgoal):\n 1. M c \\<in> {1..<p ^ n}", "by auto"], ["proof (state)\nthis:\n  M c \\<in> {1..<p ^ n}\n\ngoal:\nNo subgoals!", "qed"], ["", "context poly_mod_2\nbegin"], ["", "context\n  fixes p :: int\n  assumes prime: \"prime p\"\nbegin"], ["", "interpretation p: poly_mod_prime p"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_prime p", "using prime"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. poly_mod_prime p", "by unfold_locales"], ["", "lemma coprime_lead_coeff_factor: assumes \"coprime (lead_coeff (f * g)) p\"\n  shows \"coprime (lead_coeff f) p\" \"coprime (lead_coeff g) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p &&&\n    comm_monoid_mult_class.coprime (lead_coeff g) p", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p\n 2. comm_monoid_mult_class.coprime (lead_coeff g) p", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p\n 2. comm_monoid_mult_class.coprime (lead_coeff g) p", "fix f g"], ["proof (state)\ngoal (2 subgoals):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p\n 2. comm_monoid_mult_class.coprime (lead_coeff g) p", "assume cop: \"coprime (lead_coeff (f * g)) p\""], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff (f * g)) p\n\ngoal (2 subgoals):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p\n 2. comm_monoid_mult_class.coprime (lead_coeff g) p", "from this[unfolded lead_coeff_mult]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (lead_coeff f * lead_coeff g) p", "have \"coprime (lead_coeff f) p\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f * lead_coeff g) p\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p", "using prime"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f * lead_coeff g) p\n  prime p\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p", "by simp"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n\ngoal (2 subgoals):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p\n 2. comm_monoid_mult_class.coprime (lead_coeff g) p", "}"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff (?fa2 * ?ga2))\n   p \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (lead_coeff ?fa2) p\n\ngoal (2 subgoals):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p\n 2. comm_monoid_mult_class.coprime (lead_coeff g) p", "from this[OF assms] this[of g f] assms"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  comm_monoid_mult_class.coprime (lead_coeff (g * f)) p \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (lead_coeff g) p\n  comm_monoid_mult_class.coprime (lead_coeff (f * g)) p", "show \"coprime (lead_coeff f) p\" \"coprime (lead_coeff g) p\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  comm_monoid_mult_class.coprime (lead_coeff (g * f)) p \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (lead_coeff g) p\n  comm_monoid_mult_class.coprime (lead_coeff (f * g)) p\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) p &&&\n    comm_monoid_mult_class.coprime (lead_coeff g) p", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  comm_monoid_mult_class.coprime (lead_coeff g) p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_factorization_m_factor: assumes uf: \"unique_factorization_m (f * g) (c,hs)\"\n  and cop: \"coprime (lead_coeff (f * g)) p\"  \n  and sf: \"p.square_free_m (f * g)\" \n  and n: \"n \\<noteq> 0\" \n  and m: \"m = p^n\" \n  shows \"\\<exists> fs gs. unique_factorization_m f (lead_coeff f,fs) \n  \\<and> unique_factorization_m g (lead_coeff g,gs) \n  \\<and> Mf (c,hs) = Mf (lead_coeff f * lead_coeff g, fs + gs)\n  \\<and> image_mset Mp fs = fs \\<and> image_mset Mp gs = gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "from prime"], ["proof (chain)\npicking this:\n  prime p", "have p1: \"1 < p\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (simp add: prime_int_iff)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "interpret p: poly_mod_2 p"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_2 p", "by (standard, rule p1)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "note sf = p.square_free_m_factor[OF sf]"], ["proof (state)\nthis:\n  p.square_free_m f\n  p.square_free_m g\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "note cop = coprime_lead_coeff_factor[OF cop]"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  comm_monoid_mult_class.coprime (lead_coeff g) p\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "from cop"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  comm_monoid_mult_class.coprime (lead_coeff g) p", "have copm: \"coprime (lead_coeff f) m\" \"coprime (lead_coeff g) m\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  comm_monoid_mult_class.coprime (lead_coeff g) p\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff f) m &&&\n    comm_monoid_mult_class.coprime (lead_coeff g) m", "by (simp_all add: m)"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff f) m\n  comm_monoid_mult_class.coprime (lead_coeff g) m\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "have df: \"degree_m f = degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m f = degree f", "by (rule degree_m_eq[OF _ m1], insert copm(1) m1, auto)"], ["proof (state)\nthis:\n  degree_m f = degree f\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "have dg: \"degree_m g = degree g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m g = degree g", "by (rule degree_m_eq[OF _ m1], insert copm(2) m1, auto)"], ["proof (state)\nthis:\n  degree_m g = degree g\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "define fs where \"fs \\<equiv> mset (berlekamp_hensel p n f)\""], ["proof (state)\nthis:\n  fs \\<equiv> mset (berlekamp_hensel p n f)\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "define gs where \"gs \\<equiv> mset (berlekamp_hensel p n g)\""], ["proof (state)\nthis:\n  gs \\<equiv> mset (berlekamp_hensel p n g)\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "from p.berlekamp_hensel[OF cop(1) sf(1) refl n, folded m]"], ["proof (chain)\npicking this:\n  factorization_m f (lead_coeff f, mset (berlekamp_hensel p n f))\n  ?g \\<in> set (berlekamp_hensel p n f) \\<Longrightarrow>\n  Mp ?g = ?g \\<and> p.irreducible_m ?g", "have f: \"factorization_m f (lead_coeff f,fs)\" \n    and f_id: \"\\<And> f. f \\<in># fs \\<Longrightarrow> Mp f = f\""], ["proof (prove)\nusing this:\n  factorization_m f (lead_coeff f, mset (berlekamp_hensel p n f))\n  ?g \\<in> set (berlekamp_hensel p n f) \\<Longrightarrow>\n  Mp ?g = ?g \\<and> p.irreducible_m ?g\n\ngoal (1 subgoal):\n 1. factorization_m f (lead_coeff f, fs) &&&\n    (\\<And>f. f \\<in># fs \\<Longrightarrow> Mp f = f)", "unfolding fs_def"], ["proof (prove)\nusing this:\n  factorization_m f (lead_coeff f, mset (berlekamp_hensel p n f))\n  ?g \\<in> set (berlekamp_hensel p n f) \\<Longrightarrow>\n  Mp ?g = ?g \\<and> p.irreducible_m ?g\n\ngoal (1 subgoal):\n 1. factorization_m f (lead_coeff f, mset (berlekamp_hensel p n f)) &&&\n    (\\<And>fa.\n        fa \\<in># mset (berlekamp_hensel p n f) \\<Longrightarrow>\n        Mp fa = fa)", "by auto"], ["proof (state)\nthis:\n  factorization_m f (lead_coeff f, fs)\n  ?f \\<in># fs \\<Longrightarrow> Mp ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "from p.berlekamp_hensel[OF cop(2) sf(2) refl n, folded m]"], ["proof (chain)\npicking this:\n  factorization_m g (lead_coeff g, mset (berlekamp_hensel p n g))\n  ?g \\<in> set (berlekamp_hensel p n g) \\<Longrightarrow>\n  Mp ?g = ?g \\<and> p.irreducible_m ?g", "have g: \"factorization_m g (lead_coeff g,gs)\" \n    and g_id: \"\\<And> f. f \\<in># gs \\<Longrightarrow> Mp f = f\""], ["proof (prove)\nusing this:\n  factorization_m g (lead_coeff g, mset (berlekamp_hensel p n g))\n  ?g \\<in> set (berlekamp_hensel p n g) \\<Longrightarrow>\n  Mp ?g = ?g \\<and> p.irreducible_m ?g\n\ngoal (1 subgoal):\n 1. factorization_m g (lead_coeff g, gs) &&&\n    (\\<And>f. f \\<in># gs \\<Longrightarrow> Mp f = f)", "unfolding gs_def"], ["proof (prove)\nusing this:\n  factorization_m g (lead_coeff g, mset (berlekamp_hensel p n g))\n  ?g \\<in> set (berlekamp_hensel p n g) \\<Longrightarrow>\n  Mp ?g = ?g \\<and> p.irreducible_m ?g\n\ngoal (1 subgoal):\n 1. factorization_m g (lead_coeff g, mset (berlekamp_hensel p n g)) &&&\n    (\\<And>f.\n        f \\<in># mset (berlekamp_hensel p n g) \\<Longrightarrow> Mp f = f)", "by auto"], ["proof (state)\nthis:\n  factorization_m g (lead_coeff g, gs)\n  ?f \\<in># gs \\<Longrightarrow> Mp ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "from factorization_m_prod[OF f g] uf[unfolded unique_factorization_m_alt_def]"], ["proof (chain)\npicking this:\n  factorization_m (f * g) (lead_coeff f * lead_coeff g, fs + gs)\n  factorization_m (f * g) (c, hs) \\<and>\n  (\\<forall>dgs.\n      factorization_m (f * g) dgs \\<longrightarrow> Mf dgs = Mf (c, hs))", "have eq: \"Mf (lead_coeff f * lead_coeff g, fs + gs) = Mf (c,hs)\""], ["proof (prove)\nusing this:\n  factorization_m (f * g) (lead_coeff f * lead_coeff g, fs + gs)\n  factorization_m (f * g) (c, hs) \\<and>\n  (\\<forall>dgs.\n      factorization_m (f * g) dgs \\<longrightarrow> Mf dgs = Mf (c, hs))\n\ngoal (1 subgoal):\n 1. Mf (lead_coeff f * lead_coeff g, fs + gs) = Mf (c, hs)", "by blast"], ["proof (state)\nthis:\n  Mf (lead_coeff f * lead_coeff g, fs + gs) = Mf (c, hs)\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "have uff: \"unique_factorization_m f (lead_coeff f,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unique_factorization_m f (lead_coeff f, fs)", "proof (rule unique_factorization_mI[OF f])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       factorization_m f (d, gs) \\<Longrightarrow>\n       Mf (d, gs) = Mf (lead_coeff f, fs)", "fix e ks"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       factorization_m f (d, gs) \\<Longrightarrow>\n       Mf (d, gs) = Mf (lead_coeff f, fs)", "assume \"factorization_m f (e,ks)\""], ["proof (state)\nthis:\n  factorization_m f (e, ks)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       factorization_m f (d, gs) \\<Longrightarrow>\n       Mf (d, gs) = Mf (lead_coeff f, fs)", "from factorization_m_prod[OF this g] uf[unfolded unique_factorization_m_alt_def]\n      factorization_m_lead_coeff[OF this, unfolded degree_m_eq_lead_coeff[OF df]]"], ["proof (chain)\npicking this:\n  factorization_m (f * g) (e * lead_coeff g, ks + gs)\n  factorization_m (f * g) (c, hs) \\<and>\n  (\\<forall>dgs.\n      factorization_m (f * g) dgs \\<longrightarrow> Mf dgs = Mf (c, hs))\n  M (lead_coeff f) = M e", "have \"Mf (e * lead_coeff g, ks + gs) = Mf (c,hs)\" and e: \"M (lead_coeff f) = M e\""], ["proof (prove)\nusing this:\n  factorization_m (f * g) (e * lead_coeff g, ks + gs)\n  factorization_m (f * g) (c, hs) \\<and>\n  (\\<forall>dgs.\n      factorization_m (f * g) dgs \\<longrightarrow> Mf dgs = Mf (c, hs))\n  M (lead_coeff f) = M e\n\ngoal (1 subgoal):\n 1. Mf (e * lead_coeff g, ks + gs) = Mf (c, hs) &&& M (lead_coeff f) = M e", "by blast+"], ["proof (state)\nthis:\n  Mf (e * lead_coeff g, ks + gs) = Mf (c, hs)\n  M (lead_coeff f) = M e\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       factorization_m f (d, gs) \\<Longrightarrow>\n       Mf (d, gs) = Mf (lead_coeff f, fs)", "from this[folded eq, unfolded Mf_def split]"], ["proof (chain)\npicking this:\n  (M (e * lead_coeff g), image_mset Mp (ks + gs)) =\n  (M (lead_coeff f * lead_coeff g), image_mset Mp (fs + gs))\n  M (lead_coeff f) = M e", "have ks: \"image_mset Mp ks = image_mset Mp fs\""], ["proof (prove)\nusing this:\n  (M (e * lead_coeff g), image_mset Mp (ks + gs)) =\n  (M (lead_coeff f * lead_coeff g), image_mset Mp (fs + gs))\n  M (lead_coeff f) = M e\n\ngoal (1 subgoal):\n 1. image_mset Mp ks = image_mset Mp fs", "by auto"], ["proof (state)\nthis:\n  image_mset Mp ks = image_mset Mp fs\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       factorization_m f (d, gs) \\<Longrightarrow>\n       Mf (d, gs) = Mf (lead_coeff f, fs)", "show \"Mf (e, ks) = Mf (lead_coeff f, fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mf (e, ks) = Mf (lead_coeff f, fs)", "unfolding Mf_def split ks e"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M e, image_mset Mp fs) = (M e, image_mset Mp fs)", "by simp"], ["proof (state)\nthis:\n  Mf (e, ks) = Mf (lead_coeff f, fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unique_factorization_m f (lead_coeff f, fs)\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "have idf: \"image_mset Mp fs = fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset Mp fs = fs", "using f_id"], ["proof (prove)\nusing this:\n  ?f \\<in># fs \\<Longrightarrow> Mp ?f = ?f\n\ngoal (1 subgoal):\n 1. image_mset Mp fs = fs", "by (induct fs, auto)"], ["proof (state)\nthis:\n  image_mset Mp fs = fs\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "have idg: \"image_mset Mp gs = gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset Mp gs = gs", "using g_id"], ["proof (prove)\nusing this:\n  ?f \\<in># gs \\<Longrightarrow> Mp ?f = ?f\n\ngoal (1 subgoal):\n 1. image_mset Mp gs = gs", "by (induct gs, auto)"], ["proof (state)\nthis:\n  image_mset Mp gs = gs\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "have ufg: \"unique_factorization_m g (lead_coeff g,gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unique_factorization_m g (lead_coeff g, gs)", "proof (rule unique_factorization_mI[OF g])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gsa.\n       factorization_m g (d, gsa) \\<Longrightarrow>\n       Mf (d, gsa) = Mf (lead_coeff g, gs)", "fix e ks"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gsa.\n       factorization_m g (d, gsa) \\<Longrightarrow>\n       Mf (d, gsa) = Mf (lead_coeff g, gs)", "assume \"factorization_m g (e,ks)\""], ["proof (state)\nthis:\n  factorization_m g (e, ks)\n\ngoal (1 subgoal):\n 1. \\<And>d gsa.\n       factorization_m g (d, gsa) \\<Longrightarrow>\n       Mf (d, gsa) = Mf (lead_coeff g, gs)", "from factorization_m_prod[OF f this] uf[unfolded unique_factorization_m_alt_def]\n      factorization_m_lead_coeff[OF this, unfolded degree_m_eq_lead_coeff[OF dg]]"], ["proof (chain)\npicking this:\n  factorization_m (f * g) (lead_coeff f * e, fs + ks)\n  factorization_m (f * g) (c, hs) \\<and>\n  (\\<forall>dgs.\n      factorization_m (f * g) dgs \\<longrightarrow> Mf dgs = Mf (c, hs))\n  M (lead_coeff g) = M e", "have \"Mf (lead_coeff f * e, fs + ks) = Mf (c,hs)\" and e: \"M (lead_coeff g) = M e\""], ["proof (prove)\nusing this:\n  factorization_m (f * g) (lead_coeff f * e, fs + ks)\n  factorization_m (f * g) (c, hs) \\<and>\n  (\\<forall>dgs.\n      factorization_m (f * g) dgs \\<longrightarrow> Mf dgs = Mf (c, hs))\n  M (lead_coeff g) = M e\n\ngoal (1 subgoal):\n 1. Mf (lead_coeff f * e, fs + ks) = Mf (c, hs) &&& M (lead_coeff g) = M e", "by blast+"], ["proof (state)\nthis:\n  Mf (lead_coeff f * e, fs + ks) = Mf (c, hs)\n  M (lead_coeff g) = M e\n\ngoal (1 subgoal):\n 1. \\<And>d gsa.\n       factorization_m g (d, gsa) \\<Longrightarrow>\n       Mf (d, gsa) = Mf (lead_coeff g, gs)", "from this[folded eq, unfolded Mf_def split]"], ["proof (chain)\npicking this:\n  (M (lead_coeff f * e), image_mset Mp (fs + ks)) =\n  (M (lead_coeff f * lead_coeff g), image_mset Mp (fs + gs))\n  M (lead_coeff g) = M e", "have ks: \"image_mset Mp ks = image_mset Mp gs\""], ["proof (prove)\nusing this:\n  (M (lead_coeff f * e), image_mset Mp (fs + ks)) =\n  (M (lead_coeff f * lead_coeff g), image_mset Mp (fs + gs))\n  M (lead_coeff g) = M e\n\ngoal (1 subgoal):\n 1. image_mset Mp ks = image_mset Mp gs", "by auto"], ["proof (state)\nthis:\n  image_mset Mp ks = image_mset Mp gs\n\ngoal (1 subgoal):\n 1. \\<And>d gsa.\n       factorization_m g (d, gsa) \\<Longrightarrow>\n       Mf (d, gsa) = Mf (lead_coeff g, gs)", "show \"Mf (e, ks) = Mf (lead_coeff g, gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mf (e, ks) = Mf (lead_coeff g, gs)", "unfolding Mf_def split ks e"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M e, image_mset Mp gs) = (M e, image_mset Mp gs)", "by simp"], ["proof (state)\nthis:\n  Mf (e, ks) = Mf (lead_coeff g, gs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unique_factorization_m g (lead_coeff g, gs)\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "from uff ufg eq[symmetric] idf idg"], ["proof (chain)\npicking this:\n  unique_factorization_m f (lead_coeff f, fs)\n  unique_factorization_m g (lead_coeff g, gs)\n  Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs)\n  image_mset Mp fs = fs\n  image_mset Mp gs = gs", "show ?thesis"], ["proof (prove)\nusing this:\n  unique_factorization_m f (lead_coeff f, fs)\n  unique_factorization_m g (lead_coeff g, gs)\n  Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs)\n  image_mset Mp fs = fs\n  image_mset Mp gs = gs\n\ngoal (1 subgoal):\n 1. \\<exists>fs gs.\n       unique_factorization_m f (lead_coeff f, fs) \\<and>\n       unique_factorization_m g (lead_coeff g, gs) \\<and>\n       Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n       image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "by auto"], ["proof (state)\nthis:\n  \\<exists>fs gs.\n     unique_factorization_m f (lead_coeff f, fs) \\<and>\n     unique_factorization_m g (lead_coeff g, gs) \\<and>\n     Mf (c, hs) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n     image_mset Mp fs = fs \\<and> image_mset Mp gs = gs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_factorization_factorI:\n  assumes ufact: \"unique_factorization_m (f * g) FG\"\n    and cop: \"coprime (lead_coeff (f * g)) p\"\n    and sf: \"poly_mod.square_free_m p (f * g)\"\n    and n: \"n \\<noteq> 0\" \n    and m: \"m = p^n\" \n  shows \"factorization_m f F \\<Longrightarrow> unique_factorization_m f F\"\n    and \"factorization_m g G \\<Longrightarrow> unique_factorization_m g G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (factorization_m f F \\<Longrightarrow> unique_factorization_m f F) &&&\n    (factorization_m g G \\<Longrightarrow> unique_factorization_m g G)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. factorization_m f F \\<Longrightarrow> unique_factorization_m f F\n 2. factorization_m g G \\<Longrightarrow> unique_factorization_m g G", "obtain c fg where FG: \"FG = (c,fg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c fg. FG = (c, fg) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  FG = (c, fg)\n\ngoal (2 subgoals):\n 1. factorization_m f F \\<Longrightarrow> unique_factorization_m f F\n 2. factorization_m g G \\<Longrightarrow> unique_factorization_m g G", "from unique_factorization_m_factor[OF ufact[unfolded FG] cop sf n m]"], ["proof (chain)\npicking this:\n  \\<exists>fs gs.\n     unique_factorization_m f (lead_coeff f, fs) \\<and>\n     unique_factorization_m g (lead_coeff g, gs) \\<and>\n     Mf (c, fg) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n     image_mset Mp fs = fs \\<and> image_mset Mp gs = gs", "obtain fs gs where ufact: \"unique_factorization_m f (lead_coeff f, fs)\" \n    \"unique_factorization_m g (lead_coeff g, gs)\""], ["proof (prove)\nusing this:\n  \\<exists>fs gs.\n     unique_factorization_m f (lead_coeff f, fs) \\<and>\n     unique_factorization_m g (lead_coeff g, gs) \\<and>\n     Mf (c, fg) = Mf (lead_coeff f * lead_coeff g, fs + gs) \\<and>\n     image_mset Mp fs = fs \\<and> image_mset Mp gs = gs\n\ngoal (1 subgoal):\n 1. (\\<And>fs gs.\n        \\<lbrakk>unique_factorization_m f (lead_coeff f, fs);\n         unique_factorization_m g (lead_coeff g, gs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  unique_factorization_m f (lead_coeff f, fs)\n  unique_factorization_m g (lead_coeff g, gs)\n\ngoal (2 subgoals):\n 1. factorization_m f F \\<Longrightarrow> unique_factorization_m f F\n 2. factorization_m g G \\<Longrightarrow> unique_factorization_m g G", "from ufact(1)"], ["proof (chain)\npicking this:\n  unique_factorization_m f (lead_coeff f, fs)", "show \"factorization_m f F \\<Longrightarrow> unique_factorization_m f F\""], ["proof (prove)\nusing this:\n  unique_factorization_m f (lead_coeff f, fs)\n\ngoal (1 subgoal):\n 1. factorization_m f F \\<Longrightarrow> unique_factorization_m f F", "by (metis unique_factorization_m_alt_def)"], ["proof (state)\nthis:\n  factorization_m f F \\<Longrightarrow> unique_factorization_m f F\n\ngoal (1 subgoal):\n 1. factorization_m g G \\<Longrightarrow> unique_factorization_m g G", "from ufact(2)"], ["proof (chain)\npicking this:\n  unique_factorization_m g (lead_coeff g, gs)", "show \"factorization_m g G \\<Longrightarrow> unique_factorization_m g G\""], ["proof (prove)\nusing this:\n  unique_factorization_m g (lead_coeff g, gs)\n\ngoal (1 subgoal):\n 1. factorization_m g G \\<Longrightarrow> unique_factorization_m g G", "by (metis unique_factorization_m_alt_def)"], ["proof (state)\nthis:\n  factorization_m g G \\<Longrightarrow> unique_factorization_m g G\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma monic_Mp_prod_mset: assumes fs: \"\\<And> f. f \\<in># fs \\<Longrightarrow> monic (Mp f)\" \n  shows \"monic (Mp (prod_mset fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "have \"monic (prod_mset (image_mset Mp fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (\\<Prod>\\<^sub># (image_mset Mp fs))", "by (rule monic_prod_mset, insert fs, auto)"], ["proof (state)\nthis:\n  monic (\\<Prod>\\<^sub># (image_mset Mp fs))\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "from monic_Mp[OF this]"], ["proof (chain)\npicking this:\n  monic (Mp (\\<Prod>\\<^sub># (image_mset Mp fs)))", "have \"monic (Mp (prod_mset (image_mset Mp fs)))\""], ["proof (prove)\nusing this:\n  monic (Mp (\\<Prod>\\<^sub># (image_mset Mp fs)))\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># (image_mset Mp fs)))", "."], ["proof (state)\nthis:\n  monic (Mp (\\<Prod>\\<^sub># (image_mset Mp fs)))\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "also"], ["proof (state)\nthis:\n  monic (Mp (\\<Prod>\\<^sub># (image_mset Mp fs)))\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "have \"Mp (prod_mset (image_mset Mp fs)) = Mp (prod_mset fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (image_mset Mp fs) =m \\<Prod>\\<^sub># fs", "by (rule Mp_prod_mset)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (image_mset Mp fs) =m \\<Prod>\\<^sub># fs\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "finally"], ["proof (chain)\npicking this:\n  monic (Mp (\\<Prod>\\<^sub># fs))", "show ?thesis"], ["proof (prove)\nusing this:\n  monic (Mp (\\<Prod>\\<^sub># fs))\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "."], ["proof (state)\nthis:\n  monic (Mp (\\<Prod>\\<^sub># fs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degree_Mp_mult_monic: assumes \"monic f\" \"monic g\"\n  shows \"degree (Mp (f * g)) = degree f + degree g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (f * g) = degree f + degree g", "by (metis zero_neq_one assms degree_monic_mult leading_coeff_0_iff monic_degree_m monic_mult)"], ["", "lemma factorization_m_degree: assumes \"factorization_m f (c,fs)\" \n  and 0: \"Mp f \\<noteq> 0\" \n  shows \"degree_m f = sum_mset (image_mset degree_m fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "note a = assms[unfolded factorization_m_def split]"], ["proof (state)\nthis:\n  f =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n  (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))\n  Mp f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "hence deg: \"degree_m f = degree_m (smult c (prod_mset fs))\" \n    and fs: \"\\<And> f. f \\<in># fs \\<Longrightarrow> monic (Mp f)\""], ["proof (prove)\nusing this:\n  f =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n  (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))\n  Mp f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree_m f = degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs)) &&&\n    (\\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f))", "by auto"], ["proof (state)\nthis:\n  degree_m f = degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs))\n  ?f \\<in># fs \\<Longrightarrow> monic (Mp ?f)\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "define gs where \"gs \\<equiv> Mp (prod_mset fs)\""], ["proof (state)\nthis:\n  gs \\<equiv> Mp (\\<Prod>\\<^sub># fs)\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "from monic_Mp_prod_mset[OF fs]"], ["proof (chain)\npicking this:\n  (\\<And>f. f \\<in># ?fs \\<Longrightarrow> f \\<in># fs) \\<Longrightarrow>\n  monic (Mp (\\<Prod>\\<^sub># ?fs))", "have mon_gs: \"monic gs\""], ["proof (prove)\nusing this:\n  (\\<And>f. f \\<in># ?fs \\<Longrightarrow> f \\<in># fs) \\<Longrightarrow>\n  monic (Mp (\\<Prod>\\<^sub># ?fs))\n\ngoal (1 subgoal):\n 1. monic gs", "unfolding gs_def"], ["proof (prove)\nusing this:\n  (\\<And>f. f \\<in># ?fs \\<Longrightarrow> f \\<in># fs) \\<Longrightarrow>\n  monic (Mp (\\<Prod>\\<^sub># ?fs))\n\ngoal (1 subgoal):\n 1. monic (Mp (\\<Prod>\\<^sub># fs))", "."], ["proof (state)\nthis:\n  monic gs\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "have d:\"degree (Mp (Polynomial.smult c gs)) = degree gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "have f1: \"0 \\<noteq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> c", "by (metis \"0\" Mp_0 a(1) smult_eq_0_iff)"], ["proof (state)\nthis:\n  0 \\<noteq> c\n\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "then"], ["proof (chain)\npicking this:\n  0 \\<noteq> c", "have \"M c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 \\<noteq> c\n\ngoal (1 subgoal):\n 1. M c \\<noteq> 0", "by (metis (no_types) \"0\" assms(1) factorization_m_lead_coeff leading_coeff_0_iff)"], ["proof (state)\nthis:\n  M c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "then"], ["proof (chain)\npicking this:\n  M c \\<noteq> 0", "show \"degree (Mp (Polynomial.smult c gs)) = degree gs\""], ["proof (prove)\nusing this:\n  M c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "unfolding monic_degree_m[OF mon_gs,symmetric]"], ["proof (prove)\nusing this:\n  M c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree_m gs", "using f1"], ["proof (prove)\nusing this:\n  M c \\<noteq> 0\n  0 \\<noteq> c\n\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree_m gs", "by (metis coeff_smult degree_m_eq degree_smult_eq m1 mon_gs monic_degree_m mult_cancel_left1 poly_mod.M_def)"], ["proof (state)\nthis:\n  degree_m (Polynomial.smult c gs) = degree gs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree_m (Polynomial.smult c gs) = degree gs\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "note deg"], ["proof (state)\nthis:\n  degree_m f = degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs))\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "also"], ["proof (state)\nthis:\n  degree_m f = degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs))\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "have \"degree_m (smult c (prod_mset fs)) = degree_m (smult c gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs)) =\n    degree_m (Polynomial.smult c gs)", "unfolding gs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs)) =\n    degree_m (Polynomial.smult c (Mp (\\<Prod>\\<^sub># fs)))", "by simp"], ["proof (state)\nthis:\n  degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs)) =\n  degree_m (Polynomial.smult c gs)\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "also"], ["proof (state)\nthis:\n  degree_m (Polynomial.smult c (\\<Prod>\\<^sub># fs)) =\n  degree_m (Polynomial.smult c gs)\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "have \"\\<dots> = degree gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "using d"], ["proof (prove)\nusing this:\n  degree_m (Polynomial.smult c gs) = degree gs\n\ngoal (1 subgoal):\n 1. degree_m (Polynomial.smult c gs) = degree gs", "."], ["proof (state)\nthis:\n  degree_m (Polynomial.smult c gs) = degree gs\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "also"], ["proof (state)\nthis:\n  degree_m (Polynomial.smult c gs) = degree gs\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "have \"\\<dots> = sum_mset (image_mset degree_m fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree gs = \\<Sum>\\<^sub># (image_mset degree_m fs)", "unfolding gs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># fs) = \\<Sum>\\<^sub># (image_mset degree_m fs)", "using fs"], ["proof (prove)\nusing this:\n  ?f \\<in># fs \\<Longrightarrow> monic (Mp ?f)\n\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># fs) = \\<Sum>\\<^sub># (image_mset degree_m fs)", "proof (induct fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "case (add f fs)"], ["proof (state)\nthis:\n  (\\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n  degree_m (\\<Prod>\\<^sub># fs) = \\<Sum>\\<^sub># (image_mset degree_m fs)\n  ?f \\<in># add_mset f fs \\<Longrightarrow> monic (Mp ?f)\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "have mon: \"monic (Mp f)\" \"monic (Mp (prod_mset fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (Mp f) &&& monic (Mp (\\<Prod>\\<^sub># fs))", "using monic_Mp_prod_mset[of fs]\n      add(2)"], ["proof (prove)\nusing this:\n  (\\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n  monic (Mp (\\<Prod>\\<^sub># fs))\n  ?f \\<in># add_mset f fs \\<Longrightarrow> monic (Mp ?f)\n\ngoal (1 subgoal):\n 1. monic (Mp f) &&& monic (Mp (\\<Prod>\\<^sub># fs))", "by auto"], ["proof (state)\nthis:\n  monic (Mp f)\n  monic (Mp (\\<Prod>\\<^sub># fs))\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "have \"degree (Mp (prod_mset (add_mset f fs))) = degree (Mp (Mp f * Mp (prod_mset fs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n    degree_m (Mp f * Mp (\\<Prod>\\<^sub># fs))", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n  degree_m (Mp f * Mp (\\<Prod>\\<^sub># fs))\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "also"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n  degree_m (Mp f * Mp (\\<Prod>\\<^sub># fs))\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "have \"\\<dots> = degree (Mp f) + degree (Mp (prod_mset fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (Mp f * Mp (\\<Prod>\\<^sub># fs)) =\n    degree_m f + degree_m (\\<Prod>\\<^sub># fs)", "by (rule degree_Mp_mult_monic[OF mon])"], ["proof (state)\nthis:\n  degree_m (Mp f * Mp (\\<Prod>\\<^sub># fs)) =\n  degree_m f + degree_m (\\<Prod>\\<^sub># fs)\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "also"], ["proof (state)\nthis:\n  degree_m (Mp f * Mp (\\<Prod>\\<^sub># fs)) =\n  degree_m f + degree_m (\\<Prod>\\<^sub># fs)\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "have \"degree (Mp (prod_mset fs)) = sum_mset (image_mset degree_m fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># fs) = \\<Sum>\\<^sub># (image_mset degree_m fs)", "by (rule add(1), insert add(2), auto)"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># fs) = \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal (2 subgoals):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       \\<lbrakk>(\\<And>f.\n                    f \\<in># fs \\<Longrightarrow>\n                    monic (Mp f)) \\<Longrightarrow>\n                degree_m (\\<Prod>\\<^sub># fs) =\n                \\<Sum>\\<^sub># (image_mset degree_m fs);\n        \\<And>f.\n           f \\<in># add_mset x fs \\<Longrightarrow> monic (Mp f)\\<rbrakk>\n       \\<Longrightarrow> degree_m (\\<Prod>\\<^sub># (add_mset x fs)) =\n                         \\<Sum>\\<^sub>#\n                          (image_mset degree_m (add_mset x fs))", "finally"], ["proof (chain)\npicking this:\n  degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n  degree_m f + \\<Sum>\\<^sub># (image_mset degree_m fs)", "show ?case"], ["proof (prove)\nusing this:\n  degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n  degree_m f + \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n    \\<Sum>\\<^sub># (image_mset degree_m (add_mset f fs))", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># (add_mset f fs)) =\n  \\<Sum>\\<^sub># (image_mset degree_m (add_mset f fs))\n\ngoal (1 subgoal):\n 1. (\\<And>f. f \\<in># {#} \\<Longrightarrow> monic (Mp f)) \\<Longrightarrow>\n    degree_m (\\<Prod>\\<^sub># {#}) =\n    \\<Sum>\\<^sub># (image_mset degree_m {#})", "qed simp"], ["proof (state)\nthis:\n  degree gs = \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "finally"], ["proof (chain)\npicking this:\n  degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal (1 subgoal):\n 1. degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)", "."], ["proof (state)\nthis:\n  degree_m f = \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degree_m_mult_le: \"degree_m (f * g) \\<le> degree_m f + degree_m g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (f * g) \\<le> degree_m f + degree_m g", "using degree_m_mult_le"], ["proof (prove)\nusing this:\n  ?f =m ?g * ?h \\<Longrightarrow>\n  degree_m ?f \\<le> degree_m ?g + degree_m ?h\n\ngoal (1 subgoal):\n 1. degree_m (f * g) \\<le> degree_m f + degree_m g", "by auto"], ["", "lemma degree_m_prod_mset_le: \"degree_m (prod_mset fs) \\<le> sum_mset (image_mset degree_m fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># fs)\n    \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs)", "proof (induct fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. degree_m (\\<Prod>\\<^sub># {#})\n    \\<le> \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       degree_m (\\<Prod>\\<^sub># fs)\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs) \\<Longrightarrow>\n       degree_m (\\<Prod>\\<^sub># (add_mset x fs))\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset x fs))", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. degree_m (\\<Prod>\\<^sub># {#})\n    \\<le> \\<Sum>\\<^sub># (image_mset degree_m {#})\n 2. \\<And>x fs.\n       degree_m (\\<Prod>\\<^sub># fs)\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs) \\<Longrightarrow>\n       degree_m (\\<Prod>\\<^sub># (add_mset x fs))\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset x fs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># {#})\n    \\<le> \\<Sum>\\<^sub># (image_mset degree_m {#})", "by simp"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># {#})\n  \\<le> \\<Sum>\\<^sub># (image_mset degree_m {#})\n\ngoal (1 subgoal):\n 1. \\<And>x fs.\n       degree_m (\\<Prod>\\<^sub># fs)\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs) \\<Longrightarrow>\n       degree_m (\\<Prod>\\<^sub># (add_mset x fs))\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset x fs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x fs.\n       degree_m (\\<Prod>\\<^sub># fs)\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs) \\<Longrightarrow>\n       degree_m (\\<Prod>\\<^sub># (add_mset x fs))\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset x fs))", "case (add f fs)"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># fs)\n  \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal (1 subgoal):\n 1. \\<And>x fs.\n       degree_m (\\<Prod>\\<^sub># fs)\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs) \\<Longrightarrow>\n       degree_m (\\<Prod>\\<^sub># (add_mset x fs))\n       \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset x fs))", "then"], ["proof (chain)\npicking this:\n  degree_m (\\<Prod>\\<^sub># fs)\n  \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs)", "show ?case"], ["proof (prove)\nusing this:\n  degree_m (\\<Prod>\\<^sub># fs)\n  \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs)\n\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># (add_mset f fs))\n    \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset f fs))", "using degree_m_mult_le[of f \"prod_mset fs\"]"], ["proof (prove)\nusing this:\n  degree_m (\\<Prod>\\<^sub># fs)\n  \\<le> \\<Sum>\\<^sub># (image_mset degree_m fs)\n  degree_m (f * \\<Prod>\\<^sub># fs)\n  \\<le> degree_m f + degree_m (\\<Prod>\\<^sub># fs)\n\ngoal (1 subgoal):\n 1. degree_m (\\<Prod>\\<^sub># (add_mset f fs))\n    \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset f fs))", "by auto"], ["proof (state)\nthis:\n  degree_m (\\<Prod>\\<^sub># (add_mset f fs))\n  \\<le> \\<Sum>\\<^sub># (image_mset degree_m (add_mset f fs))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context poly_mod_prime\nbegin"], ["", "lemma unique_factorization_m_factor_partition: assumes l0: \"l \\<noteq> 0\" \n  and uf: \"poly_mod.unique_factorization_m (p^l) f (lead_coeff f, mset gs)\" \n  and f: \"f = f1 * f2\" \n  and cop: \"coprime (lead_coeff f) p\" \n  and sf: \"square_free_m f\" \n  and part: \"List.partition (\\<lambda>gi. gi dvdm f1) gs = (gs1, gs2)\" \nshows \"poly_mod.unique_factorization_m (p^l) f1 (lead_coeff f1, mset gs1)\"\n  \"poly_mod.unique_factorization_m (p^l) f2 (lead_coeff f2, mset gs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ l) f1 (lead_coeff f1, mset gs1) &&&\n    poly_mod.unique_factorization_m (p ^ l) f2 (lead_coeff f2, mset gs2)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_mod.unique_factorization_m (p ^ l) f1 (lead_coeff f1, mset gs1)\n 2. poly_mod.unique_factorization_m (p ^ l) f2 (lead_coeff f2, mset gs2)", "interpret pl: poly_mod_2 \"p^l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_2 (p ^ l)", "by (standard, insert m1 l0, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "let ?I = \"image_mset pl.Mp\""], ["proof (state)\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "note Mp_pow [simp] = Mp_Mp_pow_is_Mp[OF l0 m1]"], ["proof (state)\nthis:\n  pl.Mp ?f =m ?f\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have [simp]: \"pl.Mp x dvdm u = (x dvdm u)\" for x u"], ["proof (prove)\ngoal (1 subgoal):\n 1. (pl.Mp x dvdm u) = (x dvdm u)", "unfolding dvdm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>h. u =m pl.Mp x * h) = (\\<exists>h. u =m x * h)", "using Mp_pow[of x]"], ["proof (prove)\nusing this:\n  pl.Mp x =m x\n\ngoal (1 subgoal):\n 1. (\\<exists>h. u =m pl.Mp x * h) = (\\<exists>h. u =m x * h)", "by (metis poly_mod.mult_Mp(1))"], ["proof (state)\nthis:\n  (pl.Mp ?x dvdm ?u) = (?x dvdm ?u)\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have gs_split: \"set gs = set gs1 \\<union> set gs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set gs = set gs1 \\<union> set gs2", "using part"], ["proof (prove)\nusing this:\n  List.partition (\\<lambda>gi. gi dvdm f1) gs = (gs1, gs2)\n\ngoal (1 subgoal):\n 1. set gs = set gs1 \\<union> set gs2", "by auto"], ["proof (state)\nthis:\n  set gs = set gs1 \\<union> set gs2\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "from pl.unique_factorization_m_factor[OF prime uf[unfolded f] _ _ l0 refl, folded f, OF cop sf]"], ["proof (chain)\npicking this:\n  \\<exists>fs gsa.\n     pl.unique_factorization_m f1 (lead_coeff f1, fs) \\<and>\n     pl.unique_factorization_m f2 (lead_coeff f2, gsa) \\<and>\n     pl.Mf (lead_coeff f, mset gs) =\n     pl.Mf (lead_coeff f1 * lead_coeff f2, fs + gsa) \\<and>\n     image_mset pl.Mp fs = fs \\<and> image_mset pl.Mp gsa = gsa", "obtain hs1 hs2 where uf': \"pl.unique_factorization_m f1 (lead_coeff f1, hs1)\" \n      \"pl.unique_factorization_m f2 (lead_coeff f2, hs2)\"\n    and gs_hs: \"?I (mset gs) = hs1 + hs2\""], ["proof (prove)\nusing this:\n  \\<exists>fs gsa.\n     pl.unique_factorization_m f1 (lead_coeff f1, fs) \\<and>\n     pl.unique_factorization_m f2 (lead_coeff f2, gsa) \\<and>\n     pl.Mf (lead_coeff f, mset gs) =\n     pl.Mf (lead_coeff f1 * lead_coeff f2, fs + gsa) \\<and>\n     image_mset pl.Mp fs = fs \\<and> image_mset pl.Mp gsa = gsa\n\ngoal (1 subgoal):\n 1. (\\<And>hs1 hs2.\n        \\<lbrakk>pl.unique_factorization_m f1 (lead_coeff f1, hs1);\n         pl.unique_factorization_m f2 (lead_coeff f2, hs2);\n         image_mset pl.Mp (mset gs) = hs1 + hs2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding pl.Mf_def split"], ["proof (prove)\nusing this:\n  \\<exists>fs gsa.\n     pl.unique_factorization_m f1 (lead_coeff f1, fs) \\<and>\n     pl.unique_factorization_m f2 (lead_coeff f2, gsa) \\<and>\n     (pl.M (lead_coeff f), image_mset pl.Mp (mset gs)) =\n     (pl.M (lead_coeff f1 * lead_coeff f2),\n      image_mset pl.Mp (fs + gsa)) \\<and>\n     image_mset pl.Mp fs = fs \\<and> image_mset pl.Mp gsa = gsa\n\ngoal (1 subgoal):\n 1. (\\<And>hs1 hs2.\n        \\<lbrakk>pl.unique_factorization_m f1 (lead_coeff f1, hs1);\n         pl.unique_factorization_m f2 (lead_coeff f2, hs2);\n         image_mset pl.Mp (mset gs) = hs1 + hs2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  pl.unique_factorization_m f1 (lead_coeff f1, hs1)\n  pl.unique_factorization_m f2 (lead_coeff f2, hs2)\n  image_mset pl.Mp (mset gs) = hs1 + hs2\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have gs_gs: \"?I (mset gs) = ?I (mset gs1) + ?I (mset gs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs) =\n    image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2)", "using part"], ["proof (prove)\nusing this:\n  List.partition (\\<lambda>gi. gi dvdm f1) gs = (gs1, gs2)\n\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs) =\n    image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2)", "by (auto, induct gs arbitrary: gs1 gs2, auto)"], ["proof (state)\nthis:\n  image_mset pl.Mp (mset gs) =\n  image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2)\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "with gs_hs"], ["proof (chain)\npicking this:\n  image_mset pl.Mp (mset gs) = hs1 + hs2\n  image_mset pl.Mp (mset gs) =\n  image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2)", "have gs_hs12: \"?I (mset gs1) + ?I (mset gs2) = hs1 + hs2\""], ["proof (prove)\nusing this:\n  image_mset pl.Mp (mset gs) = hs1 + hs2\n  image_mset pl.Mp (mset gs) =\n  image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2)\n\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2) = hs1 + hs2", "by auto"], ["proof (state)\nthis:\n  image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2) = hs1 + hs2\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "note pl_dvdm_imp_p_dvdm = pl_dvdm_imp_p_dvdm[OF l0]"], ["proof (state)\nthis:\n  pl.dvdm ?a ?b \\<Longrightarrow> ?a dvdm ?b\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "note fact = pl.unique_factorization_m_imp_factorization[OF uf]"], ["proof (state)\nthis:\n  pl.factorization_m f (lead_coeff f, mset gs)\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have gs1: \"?I (mset gs1) = {#x \\<in># ?I (mset gs). x dvdm f1#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs1) =\n    {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#}", "using part"], ["proof (prove)\nusing this:\n  List.partition (\\<lambda>gi. gi dvdm f1) gs = (gs1, gs2)\n\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs1) =\n    {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#}", "by (auto, induct gs arbitrary: gs1 gs2, auto)"], ["proof (state)\nthis:\n  image_mset pl.Mp (mset gs1) =\n  {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#}\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "also"], ["proof (state)\nthis:\n  image_mset pl.Mp (mset gs1) =\n  {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#}\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have \"\\<dots> = {#x \\<in># hs1. x dvdm f1#} + {#x \\<in># hs2. x dvdm f1#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#} =\n    {#x \\<in># hs1. x dvdm f1#} + {#x \\<in># hs2. x dvdm f1#}", "unfolding gs_hs"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># hs1 + hs2. x dvdm f1#} =\n    {#x \\<in># hs1. x dvdm f1#} + {#x \\<in># hs2. x dvdm f1#}", "by simp"], ["proof (state)\nthis:\n  {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#} =\n  {#x \\<in># hs1. x dvdm f1#} + {#x \\<in># hs2. x dvdm f1#}\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "also"], ["proof (state)\nthis:\n  {#x \\<in># image_mset pl.Mp (mset gs). x dvdm f1#} =\n  {#x \\<in># hs1. x dvdm f1#} + {#x \\<in># hs2. x dvdm f1#}\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have \"{#x \\<in># hs2. x dvdm f1#} = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} = {#}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#}", "obtain x where x: \"x \\<in># hs2\" and dvd: \"x dvdm f1\""], ["proof (prove)\nusing this:\n  {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in># hs2; x dvdm f1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in># hs2\n  x dvdm f1\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "from x gs_hs"], ["proof (chain)\npicking this:\n  x \\<in># hs2\n  image_mset pl.Mp (mset gs) = hs1 + hs2", "have \"x \\<in># ?I (mset gs)\""], ["proof (prove)\nusing this:\n  x \\<in># hs2\n  image_mset pl.Mp (mset gs) = hs1 + hs2\n\ngoal (1 subgoal):\n 1. x \\<in># image_mset pl.Mp (mset gs)", "by auto"], ["proof (state)\nthis:\n  x \\<in># image_mset pl.Mp (mset gs)\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "with fact[unfolded pl.factorization_m_def]"], ["proof (chain)\npicking this:\n  case (lead_coeff f, mset gs) of\n  (c, fs) \\<Rightarrow>\n    pl.eq_m f (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n    (\\<forall>f\\<in>#fs. pl.irreducible\\<^sub>d_m f \\<and> monic (pl.Mp f))\n  x \\<in># image_mset pl.Mp (mset gs)", "have xx: \"pl.irreducible\\<^sub>d_m x\" \"monic x\""], ["proof (prove)\nusing this:\n  case (lead_coeff f, mset gs) of\n  (c, fs) \\<Rightarrow>\n    pl.eq_m f (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n    (\\<forall>f\\<in>#fs. pl.irreducible\\<^sub>d_m f \\<and> monic (pl.Mp f))\n  x \\<in># image_mset pl.Mp (mset gs)\n\ngoal (1 subgoal):\n 1. pl.irreducible\\<^sub>d_m x &&& monic x", "by auto"], ["proof (state)\nthis:\n  pl.irreducible\\<^sub>d_m x\n  monic x\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "from square_free_m_prod_imp_coprime_m[OF sf[unfolded f]]"], ["proof (chain)\npicking this:\n  coprime_m f1 f2", "have cop_h_f: \"coprime_m f1 f2\""], ["proof (prove)\nusing this:\n  coprime_m f1 f2\n\ngoal (1 subgoal):\n 1. coprime_m f1 f2", "by auto"], ["proof (state)\nthis:\n  coprime_m f1 f2\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "from pl.factorization_m_mem_dvdm[OF pl.unique_factorization_m_imp_factorization[OF uf'(2)], of x] x"], ["proof (chain)\npicking this:\n  pl.Mp x \\<in># image_mset pl.Mp hs2 \\<Longrightarrow> pl.dvdm x f2\n  x \\<in># hs2", "have \"pl.dvdm x f2\""], ["proof (prove)\nusing this:\n  pl.Mp x \\<in># image_mset pl.Mp hs2 \\<Longrightarrow> pl.dvdm x f2\n  x \\<in># hs2\n\ngoal (1 subgoal):\n 1. pl.dvdm x f2", "by auto"], ["proof (state)\nthis:\n  pl.dvdm x f2\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "hence \"x dvdm f2\""], ["proof (prove)\nusing this:\n  pl.dvdm x f2\n\ngoal (1 subgoal):\n 1. x dvdm f2", "by (rule pl_dvdm_imp_p_dvdm)"], ["proof (state)\nthis:\n  x dvdm f2\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "from cop_h_f[unfolded coprime_m_def, rule_format, OF dvd this]"], ["proof (chain)\npicking this:\n  x dvdm 1", "have \"x dvdm 1\""], ["proof (prove)\nusing this:\n  x dvdm 1\n\ngoal (1 subgoal):\n 1. x dvdm 1", "by auto"], ["proof (state)\nthis:\n  x dvdm 1\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "from dvdm_imp_degree_le[OF this xx(2) _ m1]"], ["proof (chain)\npicking this:\n  Mp 1 \\<noteq> 0 \\<Longrightarrow> degree x \\<le> degree 1", "have \"degree x = 0\""], ["proof (prove)\nusing this:\n  Mp 1 \\<noteq> 0 \\<Longrightarrow> degree x \\<le> degree 1\n\ngoal (1 subgoal):\n 1. degree x = 0", "by auto"], ["proof (state)\nthis:\n  degree x = 0\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs2. x dvdm f1#} \\<noteq> {#} \\<Longrightarrow> False", "with xx"], ["proof (chain)\npicking this:\n  pl.irreducible\\<^sub>d_m x\n  monic x\n  degree x = 0", "show False"], ["proof (prove)\nusing this:\n  pl.irreducible\\<^sub>d_m x\n  monic x\n  degree x = 0\n\ngoal (1 subgoal):\n 1. False", "unfolding pl.irreducible\\<^sub>d_m_def"], ["proof (prove)\nusing this:\n  0 < pl.degree_m x \\<and>\n  (\\<forall>g h.\n      pl.degree_m g < pl.degree_m x \\<longrightarrow>\n      pl.degree_m h < pl.degree_m x \\<longrightarrow>\n      pl.Mp x \\<noteq> pl.Mp (g * h))\n  monic x\n  degree x = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {#x \\<in># hs2. x dvdm f1#} = {#}\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "also"], ["proof (state)\nthis:\n  {#x \\<in># hs2. x dvdm f1#} = {#}\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "have \"{#x \\<in># hs1. x dvdm f1#} = hs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># hs1. x dvdm f1#} = hs1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. {#x \\<in># hs1. x dvdm f1#} \\<noteq> hs1 \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  {#x \\<in># hs1. x dvdm f1#} \\<noteq> hs1\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs1. x dvdm f1#} \\<noteq> hs1 \\<Longrightarrow> False", "from filter_mset_inequality[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>#hs1. \\<not> x dvdm f1", "obtain x where x: \"x \\<in># hs1\" and dvd: \"\\<not> x dvdm f1\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>#hs1. \\<not> x dvdm f1\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in># hs1; \\<not> x dvdm f1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in># hs1\n  \\<not> x dvdm f1\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs1. x dvdm f1#} \\<noteq> hs1 \\<Longrightarrow> False", "from pl.factorization_m_mem_dvdm[OF pl.unique_factorization_m_imp_factorization[OF uf'(1)], \n      of x] x dvd"], ["proof (chain)\npicking this:\n  pl.Mp x \\<in># image_mset pl.Mp hs1 \\<Longrightarrow> pl.dvdm x f1\n  x \\<in># hs1\n  \\<not> x dvdm f1", "have \"pl.dvdm x f1\""], ["proof (prove)\nusing this:\n  pl.Mp x \\<in># image_mset pl.Mp hs1 \\<Longrightarrow> pl.dvdm x f1\n  x \\<in># hs1\n  \\<not> x dvdm f1\n\ngoal (1 subgoal):\n 1. pl.dvdm x f1", "by auto"], ["proof (state)\nthis:\n  pl.dvdm x f1\n\ngoal (1 subgoal):\n 1. {#x \\<in># hs1. x dvdm f1#} \\<noteq> hs1 \\<Longrightarrow> False", "from pl_dvdm_imp_p_dvdm[OF this] dvd"], ["proof (chain)\npicking this:\n  x dvdm f1\n  \\<not> x dvdm f1", "show False"], ["proof (prove)\nusing this:\n  x dvdm f1\n  \\<not> x dvdm f1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {#x \\<in># hs1. x dvdm f1#} = hs1\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "finally"], ["proof (chain)\npicking this:\n  image_mset pl.Mp (mset gs1) = hs1 + {#}", "have gs_hs1: \"?I (mset gs1) = hs1\""], ["proof (prove)\nusing this:\n  image_mset pl.Mp (mset gs1) = hs1 + {#}\n\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs1) = hs1", "by simp"], ["proof (state)\nthis:\n  image_mset pl.Mp (mset gs1) = hs1\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "with gs_hs12"], ["proof (chain)\npicking this:\n  image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2) = hs1 + hs2\n  image_mset pl.Mp (mset gs1) = hs1", "have \"?I (mset gs2) = hs2\""], ["proof (prove)\nusing this:\n  image_mset pl.Mp (mset gs1) + image_mset pl.Mp (mset gs2) = hs1 + hs2\n  image_mset pl.Mp (mset gs1) = hs1\n\ngoal (1 subgoal):\n 1. image_mset pl.Mp (mset gs2) = hs2", "by auto"], ["proof (state)\nthis:\n  image_mset pl.Mp (mset gs2) = hs2\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "with uf' gs_hs1"], ["proof (chain)\npicking this:\n  pl.unique_factorization_m f1 (lead_coeff f1, hs1)\n  pl.unique_factorization_m f2 (lead_coeff f2, hs2)\n  image_mset pl.Mp (mset gs1) = hs1\n  image_mset pl.Mp (mset gs2) = hs2", "have \"pl.unique_factorization_m f1 (lead_coeff f1, ?I (mset gs1))\"\n     \"pl.unique_factorization_m f2 (lead_coeff f2, ?I (mset gs2))\""], ["proof (prove)\nusing this:\n  pl.unique_factorization_m f1 (lead_coeff f1, hs1)\n  pl.unique_factorization_m f2 (lead_coeff f2, hs2)\n  image_mset pl.Mp (mset gs1) = hs1\n  image_mset pl.Mp (mset gs2) = hs2\n\ngoal (1 subgoal):\n 1. pl.unique_factorization_m f1\n     (lead_coeff f1, image_mset pl.Mp (mset gs1)) &&&\n    pl.unique_factorization_m f2\n     (lead_coeff f2, image_mset pl.Mp (mset gs2))", "by auto"], ["proof (state)\nthis:\n  pl.unique_factorization_m f1 (lead_coeff f1, image_mset pl.Mp (mset gs1))\n  pl.unique_factorization_m f2 (lead_coeff f2, image_mset pl.Mp (mset gs2))\n\ngoal (2 subgoals):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n 2. pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "thus \"pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\"\n     \"pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)\""], ["proof (prove)\nusing this:\n  pl.unique_factorization_m f1 (lead_coeff f1, image_mset pl.Mp (mset gs1))\n  pl.unique_factorization_m f2 (lead_coeff f2, image_mset pl.Mp (mset gs2))\n\ngoal (1 subgoal):\n 1. pl.unique_factorization_m f1 (lead_coeff f1, mset gs1) &&&\n    pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)", "unfolding pl.unique_factorization_m_def"], ["proof (prove)\nusing this:\n  pl.Mf ` Collect (pl.factorization_m f1) =\n  {pl.Mf (lead_coeff f1, image_mset pl.Mp (mset gs1))}\n  pl.Mf ` Collect (pl.factorization_m f2) =\n  {pl.Mf (lead_coeff f2, image_mset pl.Mp (mset gs2))}\n\ngoal (1 subgoal):\n 1. pl.Mf ` Collect (pl.factorization_m f1) =\n    {pl.Mf (lead_coeff f1, mset gs1)} &&&\n    pl.Mf ` Collect (pl.factorization_m f2) =\n    {pl.Mf (lead_coeff f2, mset gs2)}", "by (auto simp: pl.Mf_def image_mset.compositionality o_def)"], ["proof (state)\nthis:\n  pl.unique_factorization_m f1 (lead_coeff f1, mset gs1)\n  pl.unique_factorization_m f2 (lead_coeff f2, mset gs2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factorization_pn_to_factorization_p: assumes fact: \"poly_mod.factorization_m (p^n) C (c,fs)\"\n  and sf: \"square_free_m C\" \n  and n: \"n \\<noteq> 0\" \nshows \"factorization_m C (c,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "let ?q = \"p^n\""], ["proof (state)\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "from n m1"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  1 < p", "have q: \"?q > 1\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  1 < p\n\ngoal (1 subgoal):\n 1. 1 < p ^ n", "by simp"], ["proof (state)\nthis:\n  1 < p ^ n\n\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "interpret q: poly_mod_2 ?q"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_2 (p ^ n)", "by (standard, insert q, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "from fact[unfolded q.factorization_m_def]"], ["proof (chain)\npicking this:\n  case (c, fs) of\n  (c, fs) \\<Rightarrow>\n    q.eq_m C (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n    (\\<forall>f\\<in>#fs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))", "have eq: \"q.Mp C = q.Mp (Polynomial.smult c (prod_mset fs))\" \n    and irr: \"\\<And> f. f \\<in># fs \\<Longrightarrow> q.irreducible\\<^sub>d_m f\" \n    and mon: \"\\<And> f. f \\<in># fs \\<Longrightarrow> monic (q.Mp f)\""], ["proof (prove)\nusing this:\n  case (c, fs) of\n  (c, fs) \\<Rightarrow>\n    q.eq_m C (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n    (\\<forall>f\\<in>#fs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))\n\ngoal (1 subgoal):\n 1. q.eq_m C (Polynomial.smult c (\\<Prod>\\<^sub># fs)) &&&\n    (\\<And>f. f \\<in># fs \\<Longrightarrow> q.irreducible\\<^sub>d_m f) &&&\n    (\\<And>f. f \\<in># fs \\<Longrightarrow> monic (q.Mp f))", "by auto"], ["proof (state)\nthis:\n  q.eq_m C (Polynomial.smult c (\\<Prod>\\<^sub># fs))\n  ?f \\<in># fs \\<Longrightarrow> q.irreducible\\<^sub>d_m ?f\n  ?f \\<in># fs \\<Longrightarrow> monic (q.Mp ?f)\n\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "from arg_cong[OF eq, of Mp]"], ["proof (chain)\npicking this:\n  q.Mp C =m q.Mp (Polynomial.smult c (\\<Prod>\\<^sub># fs))", "have eq: \"eq_m C (smult c (prod_mset fs))\""], ["proof (prove)\nusing this:\n  q.Mp C =m q.Mp (Polynomial.smult c (\\<Prod>\\<^sub># fs))\n\ngoal (1 subgoal):\n 1. C =m Polynomial.smult c (\\<Prod>\\<^sub># fs)", "by (simp add: Mp_Mp_pow_is_Mp m1 n)"], ["proof (state)\nthis:\n  C =m Polynomial.smult c (\\<Prod>\\<^sub># fs)\n\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. factorization_m C (c, fs)", "unfolding factorization_m_def split"], ["proof (prove)\ngoal (1 subgoal):\n 1. C =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n    (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))", "proof (rule conjI[OF eq], intro ballI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f\n 2. \\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)", "fix f"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f\n 2. \\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)", "assume f: \"f \\<in># fs\""], ["proof (state)\nthis:\n  f \\<in># fs\n\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f\n 2. \\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)", "from mon[OF this]"], ["proof (chain)\npicking this:\n  monic (q.Mp f)", "have mon_qf: \"monic (q.Mp f)\""], ["proof (prove)\nusing this:\n  monic (q.Mp f)\n\ngoal (1 subgoal):\n 1. monic (q.Mp f)", "."], ["proof (state)\nthis:\n  monic (q.Mp f)\n\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f\n 2. \\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)", "hence lc: \"lead_coeff (q.Mp f) = 1\""], ["proof (prove)\nusing this:\n  monic (q.Mp f)\n\ngoal (1 subgoal):\n 1. monic (q.Mp f)", "by auto"], ["proof (state)\nthis:\n  monic (q.Mp f)\n\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f\n 2. \\<And>f. f \\<in># fs \\<Longrightarrow> monic (Mp f)", "from mon_qf"], ["proof (chain)\npicking this:\n  monic (q.Mp f)", "show mon_f: \"monic (Mp f)\""], ["proof (prove)\nusing this:\n  monic (q.Mp f)\n\ngoal (1 subgoal):\n 1. monic (Mp f)", "by (metis Mp_Mp_pow_is_Mp m1 monic_Mp n)"], ["proof (state)\nthis:\n  monic (Mp f)\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from irr[OF f]"], ["proof (chain)\npicking this:\n  q.irreducible\\<^sub>d_m f", "have irr: \"q.irreducible\\<^sub>d_m f\""], ["proof (prove)\nusing this:\n  q.irreducible\\<^sub>d_m f\n\ngoal (1 subgoal):\n 1. q.irreducible\\<^sub>d_m f", "."], ["proof (state)\nthis:\n  q.irreducible\\<^sub>d_m f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "hence \"q.degree_m f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q.irreducible\\<^sub>d_m f\n\ngoal (1 subgoal):\n 1. q.degree_m f \\<noteq> 0", "unfolding q.irreducible\\<^sub>d_m_def"], ["proof (prove)\nusing this:\n  0 < q.degree_m f \\<and>\n  (\\<forall>g h.\n      q.degree_m g < q.degree_m f \\<longrightarrow>\n      q.degree_m h < q.degree_m f \\<longrightarrow>\n      q.Mp f \\<noteq> q.Mp (g * h))\n\ngoal (1 subgoal):\n 1. q.degree_m f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q.degree_m f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "also"], ["proof (state)\nthis:\n  q.degree_m f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have \"q.degree_m f = degree_m f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.degree_m f = degree_m f", "using mon[OF f]"], ["proof (prove)\nusing this:\n  monic (q.Mp f)\n\ngoal (1 subgoal):\n 1. q.degree_m f = degree_m f", "by (metis Mp_Mp_pow_is_Mp m1 monic_degree_m n)"], ["proof (state)\nthis:\n  q.degree_m f = degree_m f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "finally"], ["proof (chain)\npicking this:\n  degree_m f \\<noteq> 0", "have deg: \"degree_m f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree_m f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree_m f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree_m f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from f"], ["proof (chain)\npicking this:\n  f \\<in># fs", "obtain gs where fs: \"fs = {#f#} + gs\""], ["proof (prove)\nusing this:\n  f \\<in># fs\n\ngoal (1 subgoal):\n 1. (\\<And>gs. fs = {#f#} + gs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mset_subset_eq_single subset_mset.add_diff_inverse)"], ["proof (state)\nthis:\n  fs = {#f#} + gs\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from eq[unfolded fs]"], ["proof (chain)\npicking this:\n  C =m Polynomial.smult c (\\<Prod>\\<^sub># ({#f#} + gs))", "have \"Mp C = Mp (f * smult c (prod_mset gs))\""], ["proof (prove)\nusing this:\n  C =m Polynomial.smult c (\\<Prod>\\<^sub># ({#f#} + gs))\n\ngoal (1 subgoal):\n 1. C =m f * Polynomial.smult c (\\<Prod>\\<^sub># gs)", "by auto"], ["proof (state)\nthis:\n  C =m f * Polynomial.smult c (\\<Prod>\\<^sub># gs)\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from square_free_m_factor[OF square_free_m_cong[OF sf this]]"], ["proof (chain)\npicking this:\n  square_free_m f\n  square_free_m (Polynomial.smult c (\\<Prod>\\<^sub># gs))", "have sf_f: \"square_free_m f\""], ["proof (prove)\nusing this:\n  square_free_m f\n  square_free_m (Polynomial.smult c (\\<Prod>\\<^sub># gs))\n\ngoal (1 subgoal):\n 1. square_free_m f", "by simp"], ["proof (state)\nthis:\n  square_free_m f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have sf_Mf: \"square_free_m (q.Mp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_m (q.Mp f)", "by (rule square_free_m_cong[OF sf_f], auto simp: Mp_Mp_pow_is_Mp n m1)"], ["proof (state)\nthis:\n  square_free_m (q.Mp f)\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have \"coprime (lead_coeff (q.Mp f)) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff (q.Mp f)) p", "using mon[OF f] prime"], ["proof (prove)\nusing this:\n  monic (q.Mp f)\n  prime p\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff (q.Mp f)) p", "by simp"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff (q.Mp f)) p\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from berlekamp_hensel[OF this sf_Mf refl n, unfolded lc]"], ["proof (chain)\npicking this:\n  q.factorization_m (q.Mp f) (1, mset (berlekamp_hensel p n (q.Mp f)))\n  ?g \\<in> set (berlekamp_hensel p n (q.Mp f)) \\<Longrightarrow>\n  q.Mp ?g = ?g \\<and> irreducible_m ?g", "obtain gs where\n      qfact: \"q.factorization_m (q.Mp f) (1, mset gs)\"\n      and \"\\<And> g. g \\<in> set gs \\<Longrightarrow> irreducible_m g\""], ["proof (prove)\nusing this:\n  q.factorization_m (q.Mp f) (1, mset (berlekamp_hensel p n (q.Mp f)))\n  ?g \\<in> set (berlekamp_hensel p n (q.Mp f)) \\<Longrightarrow>\n  q.Mp ?g = ?g \\<and> irreducible_m ?g\n\ngoal (1 subgoal):\n 1. (\\<And>gs.\n        \\<lbrakk>q.factorization_m (q.Mp f) (1, mset gs);\n         \\<And>g. g \\<in> set gs \\<Longrightarrow> irreducible_m g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q.factorization_m (q.Mp f) (1, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow> irreducible_m ?g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "hence fact: \"q.Mp f = q.Mp (prod_list gs)\" \n      and gs: \"\\<And> g. g\\<in> set gs \\<Longrightarrow> irreducible\\<^sub>d_m g \\<and> q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g)\""], ["proof (prove)\nusing this:\n  q.factorization_m (q.Mp f) (1, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow> irreducible_m ?g\n\ngoal (1 subgoal):\n 1. q.eq_m f (prod_list gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        irreducible\\<^sub>d_m g \\<and>\n        q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g))", "unfolding q.factorization_m_def"], ["proof (prove)\nusing this:\n  case (1, mset gs) of\n  (c, fs) \\<Rightarrow>\n    q.eq_m (q.Mp f) (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n    (\\<forall>f\\<in>#fs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))\n  ?g \\<in> set gs \\<Longrightarrow> irreducible_m ?g\n\ngoal (1 subgoal):\n 1. q.eq_m f (prod_list gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        irreducible\\<^sub>d_m g \\<and>\n        q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g))", "by auto"], ["proof (state)\nthis:\n  q.eq_m f (prod_list gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  irreducible\\<^sub>d_m ?g \\<and>\n  q.irreducible\\<^sub>d_m ?g \\<and> monic (q.Mp ?g)\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from q.factorization_m_degree[OF qfact]"], ["proof (chain)\npicking this:\n  q.Mp (q.Mp f) \\<noteq> 0 \\<Longrightarrow>\n  q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))", "have deg: \"q.degree_m (q.Mp f) = sum_mset (image_mset q.degree_m (mset gs))\""], ["proof (prove)\nusing this:\n  q.Mp (q.Mp f) \\<noteq> 0 \\<Longrightarrow>\n  q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))\n\ngoal (1 subgoal):\n 1. q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))", "using mon_qf"], ["proof (prove)\nusing this:\n  q.Mp (q.Mp f) \\<noteq> 0 \\<Longrightarrow>\n  q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))\n  monic (q.Mp f)\n\ngoal (1 subgoal):\n 1. q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))", "by fastforce"], ["proof (state)\nthis:\n  q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from irr[unfolded q.irreducible\\<^sub>d_m_def]"], ["proof (chain)\npicking this:\n  0 < q.degree_m f \\<and>\n  (\\<forall>g h.\n      q.degree_m g < q.degree_m f \\<longrightarrow>\n      q.degree_m h < q.degree_m f \\<longrightarrow>\n      q.Mp f \\<noteq> q.Mp (g * h))", "have \"sum_mset (image_mset q.degree_m (mset gs)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < q.degree_m f \\<and>\n  (\\<forall>g h.\n      q.degree_m g < q.degree_m f \\<longrightarrow>\n      q.degree_m h < q.degree_m f \\<longrightarrow>\n      q.Mp f \\<noteq> q.Mp (g * h))\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs)) \\<noteq> 0", "by (fold deg, auto)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "then"], ["proof (chain)\npicking this:\n  \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs)) \\<noteq> 0", "obtain g gs' where gs1: \"gs = g # gs'\""], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g gs'. gs = g # gs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases gs, auto)"], ["proof (state)\nthis:\n  gs = g # gs'\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "{"], ["proof (state)\nthis:\n  gs = g # gs'\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "assume \"gs' \\<noteq> []\""], ["proof (state)\nthis:\n  gs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "then"], ["proof (chain)\npicking this:\n  gs' \\<noteq> []", "obtain h hs where gs2: \"gs' = h # hs\""], ["proof (prove)\nusing this:\n  gs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>h hs. gs' = h # hs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases gs', auto)"], ["proof (state)\nthis:\n  gs' = h # hs\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from deg gs[unfolded q.irreducible\\<^sub>d_m_def]"], ["proof (chain)\npicking this:\n  q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))\n  ?g \\<in> set gs \\<Longrightarrow>\n  irreducible\\<^sub>d_m ?g \\<and>\n  (0 < q.degree_m ?g \\<and>\n   (\\<forall>g h.\n       q.degree_m g < q.degree_m ?g \\<longrightarrow>\n       q.degree_m h < q.degree_m ?g \\<longrightarrow>\n       q.Mp ?g \\<noteq> q.Mp (g * h))) \\<and>\n  monic (q.Mp ?g)", "have small: \"q.degree_m g < q.degree_m f\" \n        \"q.degree_m h + sum_mset (image_mset q.degree_m (mset hs)) < q.degree_m f\""], ["proof (prove)\nusing this:\n  q.degree_m (q.Mp f) = \\<Sum>\\<^sub># (image_mset q.degree_m (mset gs))\n  ?g \\<in> set gs \\<Longrightarrow>\n  irreducible\\<^sub>d_m ?g \\<and>\n  (0 < q.degree_m ?g \\<and>\n   (\\<forall>g h.\n       q.degree_m g < q.degree_m ?g \\<longrightarrow>\n       q.degree_m h < q.degree_m ?g \\<longrightarrow>\n       q.Mp ?g \\<noteq> q.Mp (g * h))) \\<and>\n  monic (q.Mp ?g)\n\ngoal (1 subgoal):\n 1. q.degree_m g < q.degree_m f &&&\n    q.degree_m h + \\<Sum>\\<^sub># (image_mset q.degree_m (mset hs))\n    < q.degree_m f", "unfolding gs1 gs2"], ["proof (prove)\nusing this:\n  q.degree_m (q.Mp f) =\n  \\<Sum>\\<^sub># (image_mset q.degree_m (mset (g # h # hs)))\n  ?g \\<in> set (g # h # hs) \\<Longrightarrow>\n  irreducible\\<^sub>d_m ?g \\<and>\n  (0 < q.degree_m ?g \\<and>\n   (\\<forall>g h.\n       q.degree_m g < q.degree_m ?g \\<longrightarrow>\n       q.degree_m h < q.degree_m ?g \\<longrightarrow>\n       q.Mp ?g \\<noteq> q.Mp (g * h))) \\<and>\n  monic (q.Mp ?g)\n\ngoal (1 subgoal):\n 1. q.degree_m g < q.degree_m f &&&\n    q.degree_m h + \\<Sum>\\<^sub># (image_mset q.degree_m (mset hs))\n    < q.degree_m f", "by auto"], ["proof (state)\nthis:\n  q.degree_m g < q.degree_m f\n  q.degree_m h + \\<Sum>\\<^sub># (image_mset q.degree_m (mset hs))\n  < q.degree_m f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have \"q.eq_m f (g * (h * prod_list hs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m f (g * (h * prod_list hs))", "using fact"], ["proof (prove)\nusing this:\n  q.eq_m f (prod_list gs)\n\ngoal (1 subgoal):\n 1. q.eq_m f (g * (h * prod_list hs))", "unfolding gs1 gs2"], ["proof (prove)\nusing this:\n  q.eq_m f (prod_list (g # h # hs))\n\ngoal (1 subgoal):\n 1. q.eq_m f (g * (h * prod_list hs))", "by simp"], ["proof (state)\nthis:\n  q.eq_m f (g * (h * prod_list hs))\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "with irr[unfolded q.irreducible\\<^sub>d_m_def, THEN conjunct2, rule_format, of g \"h * prod_list hs\"]\n        small(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>q.degree_m g < q.degree_m f;\n   q.degree_m (h * prod_list hs) < q.degree_m f\\<rbrakk>\n  \\<Longrightarrow> q.Mp f \\<noteq> q.Mp (g * (h * prod_list hs))\n  q.degree_m g < q.degree_m f\n  q.eq_m f (g * (h * prod_list hs))", "have \"\\<not> q.degree_m (h * prod_list hs) < q.degree_m f\""], ["proof (prove)\nusing this:\n  \\<lbrakk>q.degree_m g < q.degree_m f;\n   q.degree_m (h * prod_list hs) < q.degree_m f\\<rbrakk>\n  \\<Longrightarrow> q.Mp f \\<noteq> q.Mp (g * (h * prod_list hs))\n  q.degree_m g < q.degree_m f\n  q.eq_m f (g * (h * prod_list hs))\n\ngoal (1 subgoal):\n 1. \\<not> q.degree_m (h * prod_list hs) < q.degree_m f", "by auto"], ["proof (state)\nthis:\n  \\<not> q.degree_m (h * prod_list hs) < q.degree_m f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "hence \"q.degree_m f \\<le> q.degree_m (h * prod_list hs)\""], ["proof (prove)\nusing this:\n  \\<not> q.degree_m (h * prod_list hs) < q.degree_m f\n\ngoal (1 subgoal):\n 1. q.degree_m f \\<le> q.degree_m (h * prod_list hs)", "by simp"], ["proof (state)\nthis:\n  q.degree_m f \\<le> q.degree_m (h * prod_list hs)\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "also"], ["proof (state)\nthis:\n  q.degree_m f \\<le> q.degree_m (h * prod_list hs)\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have \"\\<dots> = q.degree_m (prod_mset ({#h#} + mset hs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.degree_m (h * prod_list hs) =\n    q.degree_m (\\<Prod>\\<^sub># ({#h#} + mset hs))", "by simp"], ["proof (state)\nthis:\n  q.degree_m (h * prod_list hs) =\n  q.degree_m (\\<Prod>\\<^sub># ({#h#} + mset hs))\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "also"], ["proof (state)\nthis:\n  q.degree_m (h * prod_list hs) =\n  q.degree_m (\\<Prod>\\<^sub># ({#h#} + mset hs))\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have \"\\<dots> \\<le> sum_mset (image_mset q.degree_m ({#h#} + mset hs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.degree_m (\\<Prod>\\<^sub># ({#h#} + mset hs))\n    \\<le> \\<Sum>\\<^sub># (image_mset q.degree_m ({#h#} + mset hs))", "by (rule q.degree_m_prod_mset_le)"], ["proof (state)\nthis:\n  q.degree_m (\\<Prod>\\<^sub># ({#h#} + mset hs))\n  \\<le> \\<Sum>\\<^sub># (image_mset q.degree_m ({#h#} + mset hs))\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "also"], ["proof (state)\nthis:\n  q.degree_m (\\<Prod>\\<^sub># ({#h#} + mset hs))\n  \\<le> \\<Sum>\\<^sub># (image_mset q.degree_m ({#h#} + mset hs))\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "have \"\\<dots> < q.degree_m f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset q.degree_m ({#h#} + mset hs)) < q.degree_m f", "using small(2)"], ["proof (prove)\nusing this:\n  q.degree_m h + \\<Sum>\\<^sub># (image_mset q.degree_m (mset hs))\n  < q.degree_m f\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset q.degree_m ({#h#} + mset hs)) < q.degree_m f", "by simp"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset q.degree_m ({#h#} + mset hs)) < q.degree_m f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "finally"], ["proof (chain)\npicking this:\n  q.degree_m f < q.degree_m f", "have False"], ["proof (prove)\nusing this:\n  q.degree_m f < q.degree_m f\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "}"], ["proof (state)\nthis:\n  gs' \\<noteq> [] \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "hence gs1: \"gs = [g]\""], ["proof (prove)\nusing this:\n  gs' \\<noteq> [] \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. gs = [g]", "unfolding gs1"], ["proof (prove)\nusing this:\n  gs' \\<noteq> [] \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. g # gs' = [g]", "by (cases gs', auto)"], ["proof (state)\nthis:\n  gs = [g]\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "with fact"], ["proof (chain)\npicking this:\n  q.eq_m f (prod_list gs)\n  gs = [g]", "have \"q.Mp f = q.Mp g\""], ["proof (prove)\nusing this:\n  q.eq_m f (prod_list gs)\n  gs = [g]\n\ngoal (1 subgoal):\n 1. q.eq_m f g", "by auto"], ["proof (state)\nthis:\n  q.eq_m f g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from arg_cong[OF this, of Mp]"], ["proof (chain)\npicking this:\n  q.Mp f =m q.Mp g", "have eq: \"Mp f = Mp g\""], ["proof (prove)\nusing this:\n  q.Mp f =m q.Mp g\n\ngoal (1 subgoal):\n 1. f =m g", "by (simp add: Mp_Mp_pow_is_Mp m1 n)"], ["proof (state)\nthis:\n  f =m g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "from gs[unfolded gs1]"], ["proof (chain)\npicking this:\n  ?g \\<in> set [g] \\<Longrightarrow>\n  irreducible\\<^sub>d_m ?g \\<and>\n  q.irreducible\\<^sub>d_m ?g \\<and> monic (q.Mp ?g)", "have g: \"irreducible\\<^sub>d_m g\""], ["proof (prove)\nusing this:\n  ?g \\<in> set [g] \\<Longrightarrow>\n  irreducible\\<^sub>d_m ?g \\<and>\n  q.irreducible\\<^sub>d_m ?g \\<and> monic (q.Mp ?g)\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d_m g", "by auto"], ["proof (state)\nthis:\n  irreducible\\<^sub>d_m g\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># fs \\<Longrightarrow> irreducible\\<^sub>d_m f", "with eq"], ["proof (chain)\npicking this:\n  f =m g\n  irreducible\\<^sub>d_m g", "show \"irreducible\\<^sub>d_m f\""], ["proof (prove)\nusing this:\n  f =m g\n  irreducible\\<^sub>d_m g\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d_m f", "unfolding irreducible\\<^sub>d_m_def"], ["proof (prove)\nusing this:\n  f =m g\n  0 < degree_m g \\<and>\n  (\\<forall>ga h.\n      degree_m ga < degree_m g \\<longrightarrow>\n      degree_m h < degree_m g \\<longrightarrow> Mp g \\<noteq> Mp (ga * h))\n\ngoal (1 subgoal):\n 1. 0 < degree_m f \\<and>\n    (\\<forall>g h.\n        degree_m g < degree_m f \\<longrightarrow>\n        degree_m h < degree_m f \\<longrightarrow> Mp f \\<noteq> Mp (g * h))", "by auto"], ["proof (state)\nthis:\n  irreducible\\<^sub>d_m f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  factorization_m C (c, fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unique_monic_hensel_factorization: \n  assumes ufact: \"unique_factorization_m C (1,Fs)\"\n  and C: \"monic C\" \"square_free_m C\" \n  and n: \"n \\<noteq> 0\" \n  shows \"\\<exists> Gs. poly_mod.unique_factorization_m (p^n) C (1, Gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Gs. poly_mod.unique_factorization_m (p ^ n) C (1, Gs)", "using ufact C"], ["proof (prove)\nusing this:\n  unique_factorization_m C (1, Fs)\n  monic C\n  square_free_m C\n\ngoal (1 subgoal):\n 1. \\<exists>Gs. poly_mod.unique_factorization_m (p ^ n) C (1, Gs)", "proof (induct Fs arbitrary: C rule: wf_induct[OF wf_measure[of size]])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs.\n                           poly_mod.unique_factorization_m (p ^ n) x\n                            (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs.\n                            poly_mod.unique_factorization_m (p ^ n) C\n                             (1, Gs)", "case (1 Fs C)"], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, Fs) \\<in> measure size \\<longrightarrow>\n     (\\<forall>x.\n         unique_factorization_m x (1, y) \\<longrightarrow>\n         monic x \\<longrightarrow>\n         square_free_m x \\<longrightarrow>\n         (\\<exists>Gs. poly_mod.unique_factorization_m (p ^ n) x (1, Gs)))\n  unique_factorization_m C (1, Fs)\n  monic C\n  square_free_m C\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs.\n                           poly_mod.unique_factorization_m (p ^ n) x\n                            (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs.\n                            poly_mod.unique_factorization_m (p ^ n) C\n                             (1, Gs)", "let ?q = \"p^n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs.\n                           poly_mod.unique_factorization_m (p ^ n) x\n                            (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs.\n                            poly_mod.unique_factorization_m (p ^ n) C\n                             (1, Gs)", "from n m1"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  1 < p", "have q: \"?q > 1\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  1 < p\n\ngoal (1 subgoal):\n 1. 1 < p ^ n", "by simp"], ["proof (state)\nthis:\n  1 < p ^ n\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs.\n                           poly_mod.unique_factorization_m (p ^ n) x\n                            (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs.\n                            poly_mod.unique_factorization_m (p ^ n) C\n                             (1, Gs)", "interpret q: poly_mod_2 ?q"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_2 (p ^ n)", "by (standard, insert q, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note [simp] = Mp_Mp_pow_is_Mp[OF n m1]"], ["proof (state)\nthis:\n  q.Mp ?f =m ?f\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note IH = 1(1)[rule_format]"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, Fs) \\<in> measure size; unique_factorization_m ?x (1, ?y);\n   monic ?x; square_free_m ?x\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m ?x (1, Gs)\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note ufact = 1(2)"], ["proof (state)\nthis:\n  unique_factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence fact: \"factorization_m C (1, Fs)\""], ["proof (prove)\nusing this:\n  unique_factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. factorization_m C (1, Fs)", "unfolding unique_factorization_m_alt_def"], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs) \\<and>\n  (\\<forall>dgs.\n      factorization_m C dgs \\<longrightarrow> Mf dgs = Mf (1, Fs))\n\ngoal (1 subgoal):\n 1. factorization_m C (1, Fs)", "by auto"], ["proof (state)\nthis:\n  factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note monC = 1(3)"], ["proof (state)\nthis:\n  monic C\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note sf = 1(4)"], ["proof (state)\nthis:\n  square_free_m C\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "let ?n = \"size Fs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "fix d gs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "assume qfact: \"q.factorization_m C (d,gs)\""], ["proof (state)\nthis:\n  q.factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from q.factorization_m_lead_coeff[OF this] q.monic_Mp[OF monC]"], ["proof (chain)\npicking this:\n  lead_coeff (q.Mp C) = q.M d\n  monic (q.Mp C)", "have d1: \"q.M d = 1\""], ["proof (prove)\nusing this:\n  lead_coeff (q.Mp C) = q.M d\n  monic (q.Mp C)\n\ngoal (1 subgoal):\n 1. q.M d = 1", "by auto"], ["proof (state)\nthis:\n  q.M d = 1\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from factorization_pn_to_factorization_p[OF qfact sf n]"], ["proof (chain)\npicking this:\n  factorization_m C (d, gs)", "have \"factorization_m C (d,gs)\""], ["proof (prove)\nusing this:\n  factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. factorization_m C (d, gs)", "."], ["proof (state)\nthis:\n  factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "with ufact d1"], ["proof (chain)\npicking this:\n  unique_factorization_m C (1, Fs)\n  q.M d = 1\n  factorization_m C (d, gs)", "have \"q.M d = 1\" \"M d = 1\" \"image_mset Mp gs = image_mset Mp Fs\""], ["proof (prove)\nusing this:\n  unique_factorization_m C (1, Fs)\n  q.M d = 1\n  factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. q.M d = 1 &&& M d = 1 &&& image_mset Mp gs = image_mset Mp Fs", "unfolding unique_factorization_m_alt_def Mf_def"], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs) \\<and>\n  (\\<forall>dgs.\n      factorization_m C dgs \\<longrightarrow>\n      (case dgs of (c, fs) \\<Rightarrow> (M c, image_mset Mp fs)) =\n      (case (1, Fs) of (c, fs) \\<Rightarrow> (M c, image_mset Mp fs)))\n  q.M d = 1\n  factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. q.M d = 1 &&& M d = 1 &&& image_mset Mp gs = image_mset Mp Fs", "by auto"], ["proof (state)\nthis:\n  q.M d = 1\n  M d = 1\n  image_mset Mp gs = image_mset Mp Fs\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "}"], ["proof (state)\nthis:\n  q.factorization_m C (?d2, ?gs2) \\<Longrightarrow> q.M ?d2 = 1\n  q.factorization_m C (?d2, ?gs2) \\<Longrightarrow> M ?d2 = 1\n  q.factorization_m C (?d2, ?gs2) \\<Longrightarrow>\n  image_mset Mp ?gs2 = image_mset Mp Fs\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note pre_unique = this"], ["proof (state)\nthis:\n  q.factorization_m C (?d2, ?gs2) \\<Longrightarrow> q.M ?d2 = 1\n  q.factorization_m C (?d2, ?gs2) \\<Longrightarrow> M ?d2 = 1\n  q.factorization_m C (?d2, ?gs2) \\<Longrightarrow>\n  image_mset Mp ?gs2 = image_mset Mp Fs\n\ngoal (1 subgoal):\n 1. \\<And>x C.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> measure size \\<longrightarrow>\n                   (\\<forall>x.\n                       unique_factorization_m x (1, y) \\<longrightarrow>\n                       monic x \\<longrightarrow>\n                       square_free_m x \\<longrightarrow>\n                       (\\<exists>Gs. q.unique_factorization_m x (1, Gs)));\n        unique_factorization_m C (1, x); monic C; square_free_m C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "proof (cases Fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "case empty"], ["proof (state)\nthis:\n  Fs = {#}\n\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "with fact C"], ["proof (chain)\npicking this:\n  factorization_m C (1, Fs)\n  monic C\n  square_free_m C\n  Fs = {#}", "have \"Mp C = 1\""], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs)\n  monic C\n  square_free_m C\n  Fs = {#}\n\ngoal (1 subgoal):\n 1. Mp C = 1", "unfolding factorization_m_def"], ["proof (prove)\nusing this:\n  case (1, Fs) of\n  (c, fs) \\<Rightarrow>\n    C =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n    (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))\n  monic C\n  square_free_m C\n  Fs = {#}\n\ngoal (1 subgoal):\n 1. Mp C = 1", "by auto"], ["proof (state)\nthis:\n  Mp C = 1\n\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence \"degree (Mp C) = 0\""], ["proof (prove)\nusing this:\n  Mp C = 1\n\ngoal (1 subgoal):\n 1. degree_m C = 0", "by simp"], ["proof (state)\nthis:\n  degree_m C = 0\n\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "with degree_m_eq_monic[OF monC m1]"], ["proof (chain)\npicking this:\n  degree_m C = degree C\n  degree_m C = 0", "have \"degree C = 0\""], ["proof (prove)\nusing this:\n  degree_m C = degree C\n  degree_m C = 0\n\ngoal (1 subgoal):\n 1. degree C = 0", "by simp"], ["proof (state)\nthis:\n  degree C = 0\n\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "with monC"], ["proof (chain)\npicking this:\n  monic C\n  degree C = 0", "have C1: \"C = 1\""], ["proof (prove)\nusing this:\n  monic C\n  degree C = 0\n\ngoal (1 subgoal):\n 1. C = 1", "using monic_degree_0"], ["proof (prove)\nusing this:\n  monic C\n  degree C = 0\n  monic ?p \\<Longrightarrow> (degree ?p = 0) = (?p = 1)\n\ngoal (1 subgoal):\n 1. C = 1", "by blast"], ["proof (state)\nthis:\n  C = 1\n\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "with fact"], ["proof (chain)\npicking this:\n  factorization_m C (1, Fs)\n  C = 1", "have fact: \"q.factorization_m C (1,{#})\""], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs)\n  C = 1\n\ngoal (1 subgoal):\n 1. q.factorization_m C (1, {#})", "by (auto simp: q.factorization_m_def)"], ["proof (state)\nthis:\n  q.factorization_m C (1, {#})\n\ngoal (2 subgoals):\n 1. Fs = {#} \\<Longrightarrow>\n    \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n 2. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "proof (rule exI, rule q.unique_factorization_mI[OF fact])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#})", "fix d gs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#})", "assume fact: \"q.factorization_m C (d,gs)\""], ["proof (state)\nthis:\n  q.factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#})", "from pre_unique[OF this, unfolded empty]"], ["proof (chain)\npicking this:\n  q.M d = 1\n  M d = 1\n  image_mset Mp gs = image_mset Mp {#}", "show \"q.Mf (d, gs) = q.Mf (1, {#})\""], ["proof (prove)\nusing this:\n  q.M d = 1\n  M d = 1\n  image_mset Mp gs = image_mset Mp {#}\n\ngoal (1 subgoal):\n 1. q.Mf (d, gs) = q.Mf (1, {#})", "by (auto simp: q.Mf_def)"], ["proof (state)\nthis:\n  q.Mf (d, gs) = q.Mf (1, {#})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "case (add D H)"], ["proof (state)\nthis:\n  Fs = add_mset D H\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note FDH = this"], ["proof (state)\nthis:\n  Fs = add_mset D H\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "let ?D = \"Mp D\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "let ?H = \"Mp (prod_mset H)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from fact"], ["proof (chain)\npicking this:\n  factorization_m C (1, Fs)", "have monFs: \"\\<And> F. F \\<in># Fs \\<Longrightarrow> monic (Mp F)\" \n      and prod: \"eq_m C (prod_mset Fs)\""], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. (\\<And>F. F \\<in># Fs \\<Longrightarrow> monic (Mp F)) &&&\n    C =m \\<Prod>\\<^sub># Fs", "unfolding factorization_m_def"], ["proof (prove)\nusing this:\n  case (1, Fs) of\n  (c, fs) \\<Rightarrow>\n    C =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n    (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))\n\ngoal (1 subgoal):\n 1. (\\<And>F. F \\<in># Fs \\<Longrightarrow> monic (Mp F)) &&&\n    C =m \\<Prod>\\<^sub># Fs", "by auto"], ["proof (state)\nthis:\n  ?F \\<in># Fs \\<Longrightarrow> monic (Mp ?F)\n  C =m \\<Prod>\\<^sub># Fs\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence monD: \"monic ?D\""], ["proof (prove)\nusing this:\n  ?F \\<in># Fs \\<Longrightarrow> monic (Mp ?F)\n  C =m \\<Prod>\\<^sub># Fs\n\ngoal (1 subgoal):\n 1. monic (Mp D)", "unfolding FDH"], ["proof (prove)\nusing this:\n  ?F \\<in># add_mset D H \\<Longrightarrow> monic (Mp ?F)\n  C =m \\<Prod>\\<^sub># (add_mset D H)\n\ngoal (1 subgoal):\n 1. monic (Mp D)", "by auto"], ["proof (state)\nthis:\n  monic (Mp D)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from square_free_m_cong[OF sf, of \"D * prod_mset H\"] prod[unfolded FDH]"], ["proof (chain)\npicking this:\n  C =m D * \\<Prod>\\<^sub># H \\<Longrightarrow>\n  square_free_m (D * \\<Prod>\\<^sub># H)\n  C =m \\<Prod>\\<^sub># (add_mset D H)", "have \"square_free_m (D * prod_mset H)\""], ["proof (prove)\nusing this:\n  C =m D * \\<Prod>\\<^sub># H \\<Longrightarrow>\n  square_free_m (D * \\<Prod>\\<^sub># H)\n  C =m \\<Prod>\\<^sub># (add_mset D H)\n\ngoal (1 subgoal):\n 1. square_free_m (D * \\<Prod>\\<^sub># H)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  square_free_m (D * \\<Prod>\\<^sub># H)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from square_free_m_prod_imp_coprime_m[OF this]"], ["proof (chain)\npicking this:\n  coprime_m D (\\<Prod>\\<^sub># H)", "have \"coprime_m D (prod_mset H)\""], ["proof (prove)\nusing this:\n  coprime_m D (\\<Prod>\\<^sub># H)\n\ngoal (1 subgoal):\n 1. coprime_m D (\\<Prod>\\<^sub># H)", "."], ["proof (state)\nthis:\n  coprime_m D (\\<Prod>\\<^sub># H)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence cop': \"coprime_m ?D ?H\""], ["proof (prove)\nusing this:\n  coprime_m D (\\<Prod>\\<^sub># H)\n\ngoal (1 subgoal):\n 1. coprime_m (Mp D) (Mp (\\<Prod>\\<^sub># H))", "unfolding coprime_m_def dvdm_def Mp_Mp"], ["proof (prove)\nusing this:\n  \\<forall>h.\n     (\\<exists>ha. D =m h * ha) \\<longrightarrow>\n     (\\<exists>ha. \\<Prod>\\<^sub># H =m h * ha) \\<longrightarrow>\n     (\\<exists>ha. 1 =m h * ha)\n\ngoal (1 subgoal):\n 1. \\<forall>h.\n       (\\<exists>ha. D =m h * ha) \\<longrightarrow>\n       (\\<exists>ha. \\<Prod>\\<^sub># H =m h * ha) \\<longrightarrow>\n       (\\<exists>ha. 1 =m h * ha)", "by simp"], ["proof (state)\nthis:\n  coprime_m (Mp D) (Mp (\\<Prod>\\<^sub># H))\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from fact"], ["proof (chain)\npicking this:\n  factorization_m C (1, Fs)", "have eq': \"eq_m (?D * ?H) C\""], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. Mp D * Mp (\\<Prod>\\<^sub># H) =m C", "unfolding FDH"], ["proof (prove)\nusing this:\n  factorization_m C (1, add_mset D H)\n\ngoal (1 subgoal):\n 1. Mp D * Mp (\\<Prod>\\<^sub># H) =m C", "by (simp add: factorization_m_def ac_simps)"], ["proof (state)\nthis:\n  Mp D * Mp (\\<Prod>\\<^sub># H) =m C\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note unique_hensel_binary[OF prime cop' eq' Mp_Mp Mp_Mp monD n]"], ["proof (state)\nthis:\n  \\<exists>!(D', H').\n     q.eq_m (D' * H') C \\<and>\n     monic D' \\<and>\n     Mp D =m D' \\<and>\n     Mp (\\<Prod>\\<^sub># H) =m H' \\<and> q.Mp D' = D' \\<and> q.Mp H' = H'\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from ex1_implies_ex[OF this] this"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     case x of\n     (D', H') \\<Rightarrow>\n       q.eq_m (D' * H') C \\<and>\n       monic D' \\<and>\n       Mp D =m D' \\<and>\n       Mp (\\<Prod>\\<^sub># H) =m H' \\<and> q.Mp D' = D' \\<and> q.Mp H' = H'\n  \\<exists>!(D', H').\n     q.eq_m (D' * H') C \\<and>\n     monic D' \\<and>\n     Mp D =m D' \\<and>\n     Mp (\\<Prod>\\<^sub># H) =m H' \\<and> q.Mp D' = D' \\<and> q.Mp H' = H'", "obtain A B where CAB: \"q.eq_m (A * B) C\" and monA: \"monic A\" and DA: \"eq_m ?D A\"\n      and HB: \"eq_m ?H B\" and norm: \"q.Mp A = A\" \"q.Mp B = B\" \n      and unique: \"\\<And> D' H'. q.eq_m (D' * H') C \\<Longrightarrow>\n          monic D' \\<Longrightarrow>\n          eq_m (Mp D) D' \\<Longrightarrow> eq_m (Mp (prod_mset H)) H' \\<Longrightarrow> q.Mp D' = D' \\<Longrightarrow> q.Mp H' = H'\n        \\<Longrightarrow> D' = A \\<and> H' = B\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     case x of\n     (D', H') \\<Rightarrow>\n       q.eq_m (D' * H') C \\<and>\n       monic D' \\<and>\n       Mp D =m D' \\<and>\n       Mp (\\<Prod>\\<^sub># H) =m H' \\<and> q.Mp D' = D' \\<and> q.Mp H' = H'\n  \\<exists>!(D', H').\n     q.eq_m (D' * H') C \\<and>\n     monic D' \\<and>\n     Mp D =m D' \\<and>\n     Mp (\\<Prod>\\<^sub># H) =m H' \\<and> q.Mp D' = D' \\<and> q.Mp H' = H'\n\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        \\<lbrakk>q.eq_m (A * B) C; monic A; Mp D =m A;\n         Mp (\\<Prod>\\<^sub># H) =m B; q.Mp A = A; q.Mp B = B;\n         \\<And>D' H'.\n            \\<lbrakk>q.eq_m (D' * H') C; monic D'; Mp D =m D';\n             Mp (\\<Prod>\\<^sub># H) =m H'; q.Mp D' = D';\n             q.Mp H' = H'\\<rbrakk>\n            \\<Longrightarrow> D' = A \\<and> H' = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q.eq_m (A * B) C\n  monic A\n  Mp D =m A\n  Mp (\\<Prod>\\<^sub># H) =m B\n  q.Mp A = A\n  q.Mp B = B\n  \\<lbrakk>q.eq_m (?D' * ?H') C; monic ?D'; Mp D =m ?D';\n   Mp (\\<Prod>\\<^sub># H) =m ?H'; q.Mp ?D' = ?D'; q.Mp ?H' = ?H'\\<rbrakk>\n  \\<Longrightarrow> ?D' = A \\<and> ?H' = B\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note hensel_bin_wit = CAB monA DA HB norm"], ["proof (state)\nthis:\n  q.eq_m (A * B) C\n  monic A\n  Mp D =m A\n  Mp (\\<Prod>\\<^sub># H) =m B\n  q.Mp A = A\n  q.Mp B = B\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from monA"], ["proof (chain)\npicking this:\n  monic A", "have monA': \"monic (q.Mp A)\""], ["proof (prove)\nusing this:\n  monic A\n\ngoal (1 subgoal):\n 1. monic (q.Mp A)", "by (rule q.monic_Mp)"], ["proof (state)\nthis:\n  monic (q.Mp A)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from q.monic_Mp[OF monC] CAB"], ["proof (chain)\npicking this:\n  monic (q.Mp C)\n  q.eq_m (A * B) C", "have monicP:\"monic (q.Mp (A * B))\""], ["proof (prove)\nusing this:\n  monic (q.Mp C)\n  q.eq_m (A * B) C\n\ngoal (1 subgoal):\n 1. monic (q.Mp (A * B))", "by auto"], ["proof (state)\nthis:\n  monic (q.Mp (A * B))\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "have f4: \"\\<And>p. coeff (A * p) (degree (A * p)) = coeff p (degree p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. lead_coeff (A * p) = lead_coeff p", "by (simp add: coeff_degree_mult monA)"], ["proof (state)\nthis:\n  lead_coeff (A * ?p) = lead_coeff ?p\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "have f2: \"\\<And>p n i. coeff p n mod i = coeff (poly_mod.Mp i p) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p n i. coeff p n mod i = coeff (poly_mod.Mp i p) n", "using poly_mod.M_def poly_mod.Mp_coeff"], ["proof (prove)\nusing this:\n  poly_mod.M ?m ?x = ?x mod ?m\n  coeff (poly_mod.Mp ?m ?f) ?i = poly_mod.M ?m (coeff ?f ?i)\n\ngoal (1 subgoal):\n 1. \\<And>p n i. coeff p n mod i = coeff (poly_mod.Mp i p) n", "by presburger"], ["proof (state)\nthis:\n  coeff ?p ?n mod ?i = coeff (poly_mod.Mp ?i ?p) ?n\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence \"coeff B (degree B) = 0 \\<or> monic B\""], ["proof (prove)\nusing this:\n  coeff ?p ?n mod ?i = coeff (poly_mod.Mp ?i ?p) ?n\n\ngoal (1 subgoal):\n 1. lead_coeff B = 0 \\<or> monic B", "using monicP f4"], ["proof (prove)\nusing this:\n  coeff ?p ?n mod ?i = coeff (poly_mod.Mp ?i ?p) ?n\n  monic (q.Mp (A * B))\n  lead_coeff (A * ?p) = lead_coeff ?p\n\ngoal (1 subgoal):\n 1. lead_coeff B = 0 \\<or> monic B", "by (metis (no_types) norm(2) q.degree_m_eq q.m1)"], ["proof (state)\nthis:\n  lead_coeff B = 0 \\<or> monic B\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence monB: \"monic B\""], ["proof (prove)\nusing this:\n  lead_coeff B = 0 \\<or> monic B\n\ngoal (1 subgoal):\n 1. monic B", "using f4 monicP"], ["proof (prove)\nusing this:\n  lead_coeff B = 0 \\<or> monic B\n  lead_coeff (A * ?p) = lead_coeff ?p\n  monic (q.Mp (A * B))\n\ngoal (1 subgoal):\n 1. monic B", "by (metis norm(2) leading_coeff_0_iff)"], ["proof (state)\nthis:\n  monic B\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from monA monB"], ["proof (chain)\npicking this:\n  monic A\n  monic B", "have lcAB: \"lead_coeff (A * B) = 1\""], ["proof (prove)\nusing this:\n  monic A\n  monic B\n\ngoal (1 subgoal):\n 1. monic (A * B)", "by (rule monic_mult)"], ["proof (state)\nthis:\n  monic (A * B)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence copAB: \"coprime (lead_coeff (A * B)) p\""], ["proof (prove)\nusing this:\n  monic (A * B)\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (lead_coeff (A * B)) p", "by auto"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (lead_coeff (A * B)) p\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from arg_cong[OF CAB, of Mp]"], ["proof (chain)\npicking this:\n  q.Mp (A * B) =m q.Mp C", "have CAB': \"eq_m C (A * B)\""], ["proof (prove)\nusing this:\n  q.Mp (A * B) =m q.Mp C\n\ngoal (1 subgoal):\n 1. C =m A * B", "by auto"], ["proof (state)\nthis:\n  C =m A * B\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from sf CAB'"], ["proof (chain)\npicking this:\n  square_free_m C\n  C =m A * B", "have sfAB: \"square_free_m (A * B)\""], ["proof (prove)\nusing this:\n  square_free_m C\n  C =m A * B\n\ngoal (1 subgoal):\n 1. square_free_m (A * B)", "using square_free_m_cong"], ["proof (prove)\nusing this:\n  square_free_m C\n  C =m A * B\n  \\<lbrakk>square_free_m ?f; ?f =m ?g\\<rbrakk>\n  \\<Longrightarrow> square_free_m ?g\n\ngoal (1 subgoal):\n 1. square_free_m (A * B)", "by blast"], ["proof (state)\nthis:\n  square_free_m (A * B)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from CAB' ufact"], ["proof (chain)\npicking this:\n  C =m A * B\n  unique_factorization_m C (1, Fs)", "have ufact: \"unique_factorization_m (A * B) (1, Fs)\""], ["proof (prove)\nusing this:\n  C =m A * B\n  unique_factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. unique_factorization_m (A * B) (1, Fs)", "using unique_factorization_m_cong"], ["proof (prove)\nusing this:\n  C =m A * B\n  unique_factorization_m C (1, Fs)\n  \\<lbrakk>unique_factorization_m ?f ?cfs; ?f =m ?g\\<rbrakk>\n  \\<Longrightarrow> unique_factorization_m ?g ?cfs\n\ngoal (1 subgoal):\n 1. unique_factorization_m (A * B) (1, Fs)", "by blast"], ["proof (state)\nthis:\n  unique_factorization_m (A * B) (1, Fs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "have \"(1 :: nat) \\<noteq> 0\" \"p = p ^ 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<noteq> 0 &&& p = p ^ 1", "by auto"], ["proof (state)\nthis:\n  1 \\<noteq> 0\n  p = p ^ 1\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "note u_factor = unique_factorization_factorI[OF prime ufact copAB sfAB this]"], ["proof (state)\nthis:\n  factorization_m A ?F \\<Longrightarrow> unique_factorization_m A ?F\n  factorization_m B ?G \\<Longrightarrow> unique_factorization_m B ?G\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from fact DA"], ["proof (chain)\npicking this:\n  factorization_m C (1, Fs)\n  Mp D =m A", "have \"irreducible\\<^sub>d_m D\" \"eq_m A D\""], ["proof (prove)\nusing this:\n  factorization_m C (1, Fs)\n  Mp D =m A\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d_m D &&& A =m D", "unfolding add factorization_m_def"], ["proof (prove)\nusing this:\n  case (1, add_mset D H) of\n  (c, fs) \\<Rightarrow>\n    C =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n    (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))\n  Mp D =m A\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d_m D &&& A =m D", "by auto"], ["proof (state)\nthis:\n  irreducible\\<^sub>d_m D\n  A =m D\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "hence \"irreducible\\<^sub>d_m A\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d_m D\n  A =m D\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d_m A", "using Mp_irreducible\\<^sub>d_m"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d_m D\n  A =m D\n  irreducible\\<^sub>d_m (Mp ?f) = irreducible\\<^sub>d_m ?f\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d_m A", "by fastforce"], ["proof (state)\nthis:\n  irreducible\\<^sub>d_m A\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from irreducible\\<^sub>d_lifting[OF n _ this]"], ["proof (chain)\npicking this:\n  q.degree_m A = degree_m A \\<Longrightarrow> q.irreducible\\<^sub>d_m A", "have irrA: \"q.irreducible\\<^sub>d_m A\""], ["proof (prove)\nusing this:\n  q.degree_m A = degree_m A \\<Longrightarrow> q.irreducible\\<^sub>d_m A\n\ngoal (1 subgoal):\n 1. q.irreducible\\<^sub>d_m A", "using monA"], ["proof (prove)\nusing this:\n  q.degree_m A = degree_m A \\<Longrightarrow> q.irreducible\\<^sub>d_m A\n  monic A\n\ngoal (1 subgoal):\n 1. q.irreducible\\<^sub>d_m A", "by (simp add: m1 poly_mod.degree_m_eq_monic q.m1)"], ["proof (state)\nthis:\n  q.irreducible\\<^sub>d_m A\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from add"], ["proof (chain)\npicking this:\n  Fs = add_mset D H", "have lenH: \"(H,Fs) \\<in> measure size\""], ["proof (prove)\nusing this:\n  Fs = add_mset D H\n\ngoal (1 subgoal):\n 1. (H, Fs) \\<in> measure size", "by auto"], ["proof (state)\nthis:\n  (H, Fs) \\<in> measure size\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from HB fact"], ["proof (chain)\npicking this:\n  Mp (\\<Prod>\\<^sub># H) =m B\n  factorization_m C (1, Fs)", "have factB: \"factorization_m B (1, H)\""], ["proof (prove)\nusing this:\n  Mp (\\<Prod>\\<^sub># H) =m B\n  factorization_m C (1, Fs)\n\ngoal (1 subgoal):\n 1. factorization_m B (1, H)", "unfolding FDH factorization_m_def"], ["proof (prove)\nusing this:\n  Mp (\\<Prod>\\<^sub># H) =m B\n  case (1, add_mset D H) of\n  (c, fs) \\<Rightarrow>\n    C =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n    (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))\n\ngoal (1 subgoal):\n 1. case (1, H) of\n    (c, fs) \\<Rightarrow>\n      B =m Polynomial.smult c (\\<Prod>\\<^sub># fs) \\<and>\n      (\\<forall>f\\<in>#fs. irreducible\\<^sub>d_m f \\<and> monic (Mp f))", "by auto"], ["proof (state)\nthis:\n  factorization_m B (1, H)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from u_factor(2)[OF factB]"], ["proof (chain)\npicking this:\n  unique_factorization_m B (1, H)", "have ufactB: \"unique_factorization_m B (1, H)\""], ["proof (prove)\nusing this:\n  unique_factorization_m B (1, H)\n\ngoal (1 subgoal):\n 1. unique_factorization_m B (1, H)", "."], ["proof (state)\nthis:\n  unique_factorization_m B (1, H)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from sfAB"], ["proof (chain)\npicking this:\n  square_free_m (A * B)", "have sfB: \"square_free_m B\""], ["proof (prove)\nusing this:\n  square_free_m (A * B)\n\ngoal (1 subgoal):\n 1. square_free_m B", "by (rule square_free_m_factor)"], ["proof (state)\nthis:\n  square_free_m B\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from IH[OF lenH ufactB monB sfB]"], ["proof (chain)\npicking this:\n  \\<exists>Gs. q.unique_factorization_m B (1, Gs)", "obtain Bs where\n      IH2: \"q.unique_factorization_m B (1, Bs)\""], ["proof (prove)\nusing this:\n  \\<exists>Gs. q.unique_factorization_m B (1, Gs)\n\ngoal (1 subgoal):\n 1. (\\<And>Bs.\n        q.unique_factorization_m B (1, Bs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q.unique_factorization_m B (1, Bs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "from CAB"], ["proof (chain)\npicking this:\n  q.eq_m (A * B) C", "have \"q.Mp C = q.Mp (q.Mp A * q.Mp B)\""], ["proof (prove)\nusing this:\n  q.eq_m (A * B) C\n\ngoal (1 subgoal):\n 1. q.eq_m C (q.Mp A * q.Mp B)", "by simp"], ["proof (state)\nthis:\n  q.eq_m C (q.Mp A * q.Mp B)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "also"], ["proof (state)\nthis:\n  q.eq_m C (q.Mp A * q.Mp B)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "have \"q.Mp A * q.Mp B = q.Mp A * q.Mp (prod_mset Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.Mp A * q.Mp B = q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)", "using IH2"], ["proof (prove)\nusing this:\n  q.unique_factorization_m B (1, Bs)\n\ngoal (1 subgoal):\n 1. q.Mp A * q.Mp B = q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)", "unfolding q.unique_factorization_m_alt_def q.factorization_m_def"], ["proof (prove)\nusing this:\n  (case (1, Bs) of\n   (c, fs) \\<Rightarrow>\n     q.eq_m B (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n     (\\<forall>f\\<in>#fs.\n         q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))) \\<and>\n  (\\<forall>dgs.\n      (case dgs of\n       (c, fs) \\<Rightarrow>\n         q.eq_m B (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n         (\\<forall>f\\<in>#fs.\n             q.irreducible\\<^sub>d_m f \\<and>\n             monic (q.Mp f))) \\<longrightarrow>\n      q.Mf dgs = q.Mf (1, Bs))\n\ngoal (1 subgoal):\n 1. q.Mp A * q.Mp B = q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)", "by auto"], ["proof (state)\nthis:\n  q.Mp A * q.Mp B = q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "also"], ["proof (state)\nthis:\n  q.Mp A * q.Mp B = q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "have \"q.Mp \\<dots> = q.Mp (A * prod_mset Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)) (A * \\<Prod>\\<^sub># Bs)", "by simp"], ["proof (state)\nthis:\n  q.eq_m (q.Mp A * q.Mp (\\<Prod>\\<^sub># Bs)) (A * \\<Prod>\\<^sub># Bs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "finally"], ["proof (chain)\npicking this:\n  q.eq_m C (A * \\<Prod>\\<^sub># Bs)", "have factC: \"q.factorization_m C (1, {# A #} + Bs)\""], ["proof (prove)\nusing this:\n  q.eq_m C (A * \\<Prod>\\<^sub># Bs)\n\ngoal (1 subgoal):\n 1. q.factorization_m C (1, {#A#} + Bs)", "using IH2 monA' irrA"], ["proof (prove)\nusing this:\n  q.eq_m C (A * \\<Prod>\\<^sub># Bs)\n  q.unique_factorization_m B (1, Bs)\n  monic (q.Mp A)\n  q.irreducible\\<^sub>d_m A\n\ngoal (1 subgoal):\n 1. q.factorization_m C (1, {#A#} + Bs)", "by (auto simp: q.unique_factorization_m_alt_def q.factorization_m_def)"], ["proof (state)\nthis:\n  q.factorization_m C (1, {#A#} + Bs)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       Fs = add_mset x N \\<Longrightarrow>\n       \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Gs. q.unique_factorization_m C (1, Gs)", "proof (rule exI, rule q.unique_factorization_mI[OF factC])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "fix d gs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "assume dgs: \"q.factorization_m C (d,gs)\""], ["proof (state)\nthis:\n  q.factorization_m C (d, gs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "from pre_unique[OF dgs, unfolded add]"], ["proof (chain)\npicking this:\n  q.M d = 1\n  M d = 1\n  image_mset Mp gs = image_mset Mp (add_mset D H)", "have d1: \"q.M d = 1\" and\n        gs_fs: \"image_mset Mp gs = {# Mp D #} + image_mset Mp H\""], ["proof (prove)\nusing this:\n  q.M d = 1\n  M d = 1\n  image_mset Mp gs = image_mset Mp (add_mset D H)\n\ngoal (1 subgoal):\n 1. q.M d = 1 &&& image_mset Mp gs = {#Mp D#} + image_mset Mp H", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  q.M d = 1\n  image_mset Mp gs = {#Mp D#} + image_mset Mp H\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "have \"\\<forall>f m p ma. image_mset f m \\<noteq> add_mset (p::int poly) ma \\<or>\n                (\\<exists>mb pa. m = add_mset (pa::int poly) mb \\<and> f pa = p \\<and> image_mset f mb = ma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f m p ma.\n       image_mset f m \\<noteq> add_mset p ma \\<or>\n       (\\<exists>mb pa.\n           m = add_mset pa mb \\<and> f pa = p \\<and> image_mset f mb = ma)", "by (simp add: msed_map_invR)"], ["proof (state)\nthis:\n  \\<forall>f m p ma.\n     image_mset f m \\<noteq> add_mset p ma \\<or>\n     (\\<exists>mb pa.\n         m = add_mset pa mb \\<and> f pa = p \\<and> image_mset f mb = ma)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "then"], ["proof (chain)\npicking this:\n  \\<forall>f m p ma.\n     image_mset f m \\<noteq> add_mset p ma \\<or>\n     (\\<exists>mb pa.\n         m = add_mset pa mb \\<and> f pa = p \\<and> image_mset f mb = ma)", "obtain g hs where gs: \"gs = {# g #} + hs\" and gD: \"Mp g = Mp D\" \n        and hsH: \"image_mset Mp hs = image_mset Mp H\""], ["proof (prove)\nusing this:\n  \\<forall>f m p ma.\n     image_mset f m \\<noteq> add_mset p ma \\<or>\n     (\\<exists>mb pa.\n         m = add_mset pa mb \\<and> f pa = p \\<and> image_mset f mb = ma)\n\ngoal (1 subgoal):\n 1. (\\<And>g hs.\n        \\<lbrakk>gs = {#g#} + hs; g =m D;\n         image_mset Mp hs = image_mset Mp H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gs_fs"], ["proof (prove)\nusing this:\n  \\<forall>f m p ma.\n     image_mset f m \\<noteq> add_mset p ma \\<or>\n     (\\<exists>mb pa.\n         m = add_mset pa mb \\<and> f pa = p \\<and> image_mset f mb = ma)\n  image_mset Mp gs = {#Mp D#} + image_mset Mp H\n\ngoal (1 subgoal):\n 1. (\\<And>g hs.\n        \\<lbrakk>gs = {#g#} + hs; g =m D;\n         image_mset Mp hs = image_mset Mp H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_mset_add_single union_commute)"], ["proof (state)\nthis:\n  gs = {#g#} + hs\n  g =m D\n  image_mset Mp hs = image_mset Mp H\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "from dgs[unfolded q.factorization_m_def split]"], ["proof (chain)\npicking this:\n  q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs)) \\<and>\n  (\\<forall>f\\<in>#gs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))", "have eq: \"q.Mp C = q.Mp (smult d (prod_mset gs))\" \n        and irr_mon: \"\\<And> g. g\\<in>#gs \\<Longrightarrow> q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g)\""], ["proof (prove)\nusing this:\n  q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs)) \\<and>\n  (\\<forall>f\\<in>#gs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))\n\ngoal (1 subgoal):\n 1. q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs)) &&&\n    (\\<And>g.\n        g \\<in># gs \\<Longrightarrow>\n        q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g))", "using d1"], ["proof (prove)\nusing this:\n  q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs)) \\<and>\n  (\\<forall>f\\<in>#gs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))\n  q.M d = 1\n\ngoal (1 subgoal):\n 1. q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs)) &&&\n    (\\<And>g.\n        g \\<in># gs \\<Longrightarrow>\n        q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g))", "by auto"], ["proof (state)\nthis:\n  q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs))\n  ?g \\<in># gs \\<Longrightarrow>\n  q.irreducible\\<^sub>d_m ?g \\<and> monic (q.Mp ?g)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "note eq"], ["proof (state)\nthis:\n  q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs))\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "also"], ["proof (state)\nthis:\n  q.eq_m C (Polynomial.smult d (\\<Prod>\\<^sub># gs))\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "have \"q.Mp (smult d (prod_mset gs)) = q.Mp (smult (q.M d) (prod_mset gs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (Polynomial.smult d (\\<Prod>\\<^sub># gs))\n     (Polynomial.smult (q.M d) (\\<Prod>\\<^sub># gs))", "by simp"], ["proof (state)\nthis:\n  q.eq_m (Polynomial.smult d (\\<Prod>\\<^sub># gs))\n   (Polynomial.smult (q.M d) (\\<Prod>\\<^sub># gs))\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "also"], ["proof (state)\nthis:\n  q.eq_m (Polynomial.smult d (\\<Prod>\\<^sub># gs))\n   (Polynomial.smult (q.M d) (\\<Prod>\\<^sub># gs))\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "have \"\\<dots> = q.Mp (prod_mset gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (Polynomial.smult (q.M d) (\\<Prod>\\<^sub># gs))\n     (\\<Prod>\\<^sub># gs)", "unfolding d1"], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (Polynomial.smult 1 (\\<Prod>\\<^sub># gs)) (\\<Prod>\\<^sub># gs)", "by simp"], ["proof (state)\nthis:\n  q.eq_m (Polynomial.smult (q.M d) (\\<Prod>\\<^sub># gs))\n   (\\<Prod>\\<^sub># gs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "finally"], ["proof (chain)\npicking this:\n  q.eq_m C (\\<Prod>\\<^sub># gs)", "have eq: \"q.eq_m (q.Mp g * q.Mp (prod_mset hs)) C\""], ["proof (prove)\nusing this:\n  q.eq_m C (\\<Prod>\\<^sub># gs)\n\ngoal (1 subgoal):\n 1. q.eq_m (q.Mp g * q.Mp (\\<Prod>\\<^sub># hs)) C", "unfolding gs"], ["proof (prove)\nusing this:\n  q.eq_m C (\\<Prod>\\<^sub># ({#g#} + hs))\n\ngoal (1 subgoal):\n 1. q.eq_m (q.Mp g * q.Mp (\\<Prod>\\<^sub># hs)) C", "by simp"], ["proof (state)\nthis:\n  q.eq_m (q.Mp g * q.Mp (\\<Prod>\\<^sub># hs)) C\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "from gD"], ["proof (chain)\npicking this:\n  g =m D", "have Dg: \"eq_m (Mp D) (q.Mp g)\""], ["proof (prove)\nusing this:\n  g =m D\n\ngoal (1 subgoal):\n 1. Mp D =m q.Mp g", "by simp"], ["proof (state)\nthis:\n  Mp D =m q.Mp g\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "have \"Mp (prod_mset H) = Mp (prod_mset (image_mset Mp H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># H =m \\<Prod>\\<^sub># (image_mset Mp H)", "by simp"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># H =m \\<Prod>\\<^sub># (image_mset Mp H)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "also"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># H =m \\<Prod>\\<^sub># (image_mset Mp H)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "have \"\\<dots> = Mp (prod_mset hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (image_mset Mp H) =m \\<Prod>\\<^sub># hs", "unfolding hsH[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (image_mset Mp hs) =m \\<Prod>\\<^sub># hs", "by simp"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (image_mset Mp H) =m \\<Prod>\\<^sub># hs\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "finally"], ["proof (chain)\npicking this:\n  \\<Prod>\\<^sub># H =m \\<Prod>\\<^sub># hs", "have Hhs: \"eq_m (Mp (prod_mset H)) (q.Mp (prod_mset hs))\""], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># H =m \\<Prod>\\<^sub># hs\n\ngoal (1 subgoal):\n 1. Mp (\\<Prod>\\<^sub># H) =m q.Mp (\\<Prod>\\<^sub># hs)", "by simp"], ["proof (state)\nthis:\n  Mp (\\<Prod>\\<^sub># H) =m q.Mp (\\<Prod>\\<^sub># hs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "from irr_mon[of g, unfolded gs]"], ["proof (chain)\npicking this:\n  g \\<in># {#g#} + hs \\<Longrightarrow>\n  q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g)", "have mon_g: \"monic (q.Mp g)\""], ["proof (prove)\nusing this:\n  g \\<in># {#g#} + hs \\<Longrightarrow>\n  q.irreducible\\<^sub>d_m g \\<and> monic (q.Mp g)\n\ngoal (1 subgoal):\n 1. monic (q.Mp g)", "by auto"], ["proof (state)\nthis:\n  monic (q.Mp g)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "from unique[OF eq mon_g Dg Hhs q.Mp_Mp q.Mp_Mp]"], ["proof (chain)\npicking this:\n  q.Mp g = A \\<and> q.Mp (\\<Prod>\\<^sub># hs) = B", "have gA: \"q.Mp g = A\" and hsB: \"q.Mp (prod_mset hs) = B\""], ["proof (prove)\nusing this:\n  q.Mp g = A \\<and> q.Mp (\\<Prod>\\<^sub># hs) = B\n\ngoal (1 subgoal):\n 1. q.Mp g = A &&& q.Mp (\\<Prod>\\<^sub># hs) = B", "by auto"], ["proof (state)\nthis:\n  q.Mp g = A\n  q.Mp (\\<Prod>\\<^sub># hs) = B\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "have \"q.factorization_m B (1, hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.factorization_m B (1, hs)", "unfolding q.factorization_m_def split"], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m B (Polynomial.smult 1 (\\<Prod>\\<^sub># hs)) \\<and>\n    (\\<forall>f\\<in>#hs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))", "by (simp add: hsB norm irr_mon[unfolded gs])"], ["proof (state)\nthis:\n  q.factorization_m B (1, hs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "with IH2"], ["proof (chain)\npicking this:\n  q.unique_factorization_m B (1, Bs)\n  q.factorization_m B (1, hs)", "have hsBs: \"q.Mf (1,hs) = q.Mf (1,Bs)\""], ["proof (prove)\nusing this:\n  q.unique_factorization_m B (1, Bs)\n  q.factorization_m B (1, hs)\n\ngoal (1 subgoal):\n 1. q.Mf (1, hs) = q.Mf (1, Bs)", "unfolding q.unique_factorization_m_alt_def"], ["proof (prove)\nusing this:\n  q.factorization_m B (1, Bs) \\<and>\n  (\\<forall>dgs.\n      q.factorization_m B dgs \\<longrightarrow> q.Mf dgs = q.Mf (1, Bs))\n  q.factorization_m B (1, hs)\n\ngoal (1 subgoal):\n 1. q.Mf (1, hs) = q.Mf (1, Bs)", "by blast"], ["proof (state)\nthis:\n  q.Mf (1, hs) = q.Mf (1, Bs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m C (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "show \"q.Mf (d, gs) = q.Mf (1, {# A #} + Bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "using gA hsBs d1"], ["proof (prove)\nusing this:\n  q.Mp g = A\n  q.Mf (1, hs) = q.Mf (1, Bs)\n  q.M d = 1\n\ngoal (1 subgoal):\n 1. q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)", "unfolding gs q.Mf_def"], ["proof (prove)\nusing this:\n  q.Mp g = A\n  (case (1, hs) of (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs)) =\n  (case (1, Bs) of (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs))\n  q.M d = 1\n\ngoal (1 subgoal):\n 1. (case (d, {#g#} + hs) of\n     (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs)) =\n    (case (1, {#A#} + Bs) of\n     (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs))", "by auto"], ["proof (state)\nthis:\n  q.Mf (d, gs) = q.Mf (1, {#A#} + Bs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Gs. q.unique_factorization_m C (1, Gs)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem berlekamp_hensel_unique:\n  assumes cop: \"coprime (lead_coeff f) p\"\n  and sf: \"poly_mod.square_free_m p f\"\n  and res: \"berlekamp_hensel p n f = gs\"\n  and n: \"n \\<noteq> 0\"\n  shows \"poly_mod.unique_factorization_m (p^n) f (lead_coeff f, mset gs) \\<comment> \\<open>unique factorization mod \\<open>p^n\\<close>\\<close>\"\n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p^n) g = g   \\<comment> \\<open>normalized\\<close>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    (\\<And>g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p ^ n) g = g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. \\<And>g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p ^ n) g = g", "let ?q = \"p^n\""], ["proof (state)\ngoal (2 subgoals):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. \\<And>g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p ^ n) g = g", "interpret q: poly_mod_2 ?q"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod_2 (p ^ n)", "unfolding poly_mod_2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < p ^ n", "using m1 n"], ["proof (prove)\nusing this:\n  1 < p\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < p ^ n", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)\n 2. \\<And>g. g \\<in> set gs \\<Longrightarrow> q.Mp g = g", "from berlekamp_hensel[OF assms]"], ["proof (chain)\npicking this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow> q.Mp ?g = ?g \\<and> irreducible_m ?g", "have bh_fact: \"q.factorization_m f (lead_coeff f, mset gs)\""], ["proof (prove)\nusing this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow> q.Mp ?g = ?g \\<and> irreducible_m ?g\n\ngoal (1 subgoal):\n 1. q.factorization_m f (lead_coeff f, mset gs)", "by auto"], ["proof (state)\nthis:\n  q.factorization_m f (lead_coeff f, mset gs)\n\ngoal (2 subgoals):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)\n 2. \\<And>g. g \\<in> set gs \\<Longrightarrow> q.Mp g = g", "from berlekamp_hensel[OF assms]"], ["proof (chain)\npicking this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow> q.Mp ?g = ?g \\<and> irreducible_m ?g", "show \"\\<And> g. g \\<in> set gs \\<Longrightarrow> poly_mod.Mp (p^n) g = g\""], ["proof (prove)\nusing this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  ?g \\<in> set gs \\<Longrightarrow> q.Mp ?g = ?g \\<and> irreducible_m ?g\n\ngoal (1 subgoal):\n 1. \\<And>g. g \\<in> set gs \\<Longrightarrow> q.Mp g = g", "by blast"], ["proof (state)\nthis:\n  ?g \\<in> set gs \\<Longrightarrow> q.Mp ?g = ?g\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from prime"], ["proof (chain)\npicking this:\n  prime p", "have p1: \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (simp add: prime_int_iff)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "let ?lc = \"coeff f (degree f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "define ilc where \"ilc \\<equiv> inverse_mod ?lc (p ^ n)\""], ["proof (state)\nthis:\n  ilc \\<equiv> inverse_mod (lead_coeff f) (p ^ n)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from cop p1 n"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  1 < p\n  n \\<noteq> 0", "have inv: \"q.M (ilc * ?lc) = 1\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  1 < p\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q.M (ilc * lead_coeff f) = 1", "by (auto simp add: q.M_def ilc_def inverse_mod_pow)"], ["proof (state)\nthis:\n  q.M (ilc * lead_coeff f) = 1\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "hence ilc0: \"ilc \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q.M (ilc * lead_coeff f) = 1\n\ngoal (1 subgoal):\n 1. ilc \\<noteq> 0", "by (cases \"ilc = 0\", auto)"], ["proof (state)\nthis:\n  ilc \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "{"], ["proof (state)\nthis:\n  ilc \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "assume \"ilc * ?lc = ?q * q\""], ["proof (state)\nthis:\n  ilc * lead_coeff f = p ^ n * q\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from arg_cong[OF this, of q.M]"], ["proof (chain)\npicking this:\n  q.M (ilc * lead_coeff f) = q.M (p ^ n * q)", "have \"q.M (ilc * ?lc) = 0\""], ["proof (prove)\nusing this:\n  q.M (ilc * lead_coeff f) = q.M (p ^ n * q)\n\ngoal (1 subgoal):\n 1. q.M (ilc * lead_coeff f) = 0", "unfolding q.M_def"], ["proof (prove)\nusing this:\n  ilc * lead_coeff f mod p ^ n = p ^ n * q mod p ^ n\n\ngoal (1 subgoal):\n 1. ilc * lead_coeff f mod p ^ n = 0", "by auto"], ["proof (state)\nthis:\n  q.M (ilc * lead_coeff f) = 0\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "with inv"], ["proof (chain)\npicking this:\n  q.M (ilc * lead_coeff f) = 1\n  q.M (ilc * lead_coeff f) = 0", "have False"], ["proof (prove)\nusing this:\n  q.M (ilc * lead_coeff f) = 1\n  q.M (ilc * lead_coeff f) = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "}"], ["proof (state)\nthis:\n  ilc * lead_coeff f = p ^ n * ?q2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "note not_dvd = this"], ["proof (state)\nthis:\n  ilc * lead_coeff f = p ^ n * ?q2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "let ?in = \"q.Mp (smult ilc f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "have mon: \"monic ?in\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (q.Mp (Polynomial.smult ilc f))", "unfolding q.Mp_coeff coeff_smult"], ["proof (prove)\ngoal (1 subgoal):\n 1. q.M (ilc * coeff f (q.degree_m (Polynomial.smult ilc f))) = 1", "by (subst q.degree_m_eq[OF _ q.m1], insert not_dvd, auto simp: inv ilc0)"], ["proof (state)\nthis:\n  monic (q.Mp (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "have \"q.Mp f = q.Mp (smult (q.M (?lc * ilc)) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m f (Polynomial.smult (q.M (lead_coeff f * ilc)) f)", "using inv"], ["proof (prove)\nusing this:\n  q.M (ilc * lead_coeff f) = 1\n\ngoal (1 subgoal):\n 1. q.eq_m f (Polynomial.smult (q.M (lead_coeff f * ilc)) f)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  q.eq_m f (Polynomial.smult (q.M (lead_coeff f * ilc)) f)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "also"], ["proof (state)\nthis:\n  q.eq_m f (Polynomial.smult (q.M (lead_coeff f * ilc)) f)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "have \"\\<dots> = q.Mp (smult ?lc (smult ilc f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (Polynomial.smult (q.M (lead_coeff f * ilc)) f)\n     (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))", "by simp"], ["proof (state)\nthis:\n  q.eq_m (Polynomial.smult (q.M (lead_coeff f * ilc)) f)\n   (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "finally"], ["proof (chain)\npicking this:\n  q.eq_m f (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))", "have f: \"q.Mp f = q.Mp (smult ?lc (smult ilc f))\""], ["proof (prove)\nusing this:\n  q.eq_m f (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. q.eq_m f (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))", "."], ["proof (state)\nthis:\n  q.eq_m f (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from arg_cong[OF f, of Mp]"], ["proof (chain)\npicking this:\n  q.Mp f =m q.Mp (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))", "have \"Mp f = Mp (smult ?lc (smult ilc f))\""], ["proof (prove)\nusing this:\n  q.Mp f =m q.Mp (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. f =m Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f)", "by (simp add: Mp_Mp_pow_is_Mp n p1)"], ["proof (state)\nthis:\n  f =m Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from arg_cong[OF this, of square_free_m, unfolded Mp_square_free_m] sf"], ["proof (chain)\npicking this:\n  square_free_m f =\n  square_free_m (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n  square_free_m f", "have \"square_free_m (smult (coeff f (degree f)) (smult ilc f))\""], ["proof (prove)\nusing this:\n  square_free_m f =\n  square_free_m (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n  square_free_m f\n\ngoal (1 subgoal):\n 1. square_free_m (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))", "by simp"], ["proof (state)\nthis:\n  square_free_m (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from square_free_m_smultD[OF this]"], ["proof (chain)\npicking this:\n  square_free_m (Polynomial.smult ilc f)", "have sf: \"square_free_m (smult ilc f)\""], ["proof (prove)\nusing this:\n  square_free_m (Polynomial.smult ilc f)\n\ngoal (1 subgoal):\n 1. square_free_m (Polynomial.smult ilc f)", "."], ["proof (state)\nthis:\n  square_free_m (Polynomial.smult ilc f)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "have Mp_in: \"Mp ?in = Mp (smult ilc f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.Mp (Polynomial.smult ilc f) =m Polynomial.smult ilc f", "by (simp add: Mp_Mp_pow_is_Mp n p1)"], ["proof (state)\nthis:\n  q.Mp (Polynomial.smult ilc f) =m Polynomial.smult ilc f\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from Mp_square_free_m[of ?in, unfolded Mp_in] sf"], ["proof (chain)\npicking this:\n  square_free_m (Mp (Polynomial.smult ilc f)) =\n  square_free_m (q.Mp (Polynomial.smult ilc f))\n  square_free_m (Polynomial.smult ilc f)", "have sf: \"square_free_m ?in\""], ["proof (prove)\nusing this:\n  square_free_m (Mp (Polynomial.smult ilc f)) =\n  square_free_m (q.Mp (Polynomial.smult ilc f))\n  square_free_m (Polynomial.smult ilc f)\n\ngoal (1 subgoal):\n 1. square_free_m (q.Mp (Polynomial.smult ilc f))", "unfolding Mp_square_free_m"], ["proof (prove)\nusing this:\n  square_free_m (Polynomial.smult ilc f) =\n  square_free_m (q.Mp (Polynomial.smult ilc f))\n  square_free_m (Polynomial.smult ilc f)\n\ngoal (1 subgoal):\n 1. square_free_m (q.Mp (Polynomial.smult ilc f))", "by simp"], ["proof (state)\nthis:\n  square_free_m (q.Mp (Polynomial.smult ilc f))\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "obtain a b where \"finite_field_factorization_int p ?in = (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        finite_field_factorization_int p (q.Mp (Polynomial.smult ilc f)) =\n        (a, b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  finite_field_factorization_int p (q.Mp (Polynomial.smult ilc f)) = (a, b)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from finite_field_factorization_int[OF sf this]"], ["proof (chain)\npicking this:\n  unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b) \\<and>\n  a \\<in> {0..<p} \\<and>\n  (\\<forall>fi\\<in>set b. set (coeffs fi) \\<subseteq> {0..<p})", "have ufact: \"unique_factorization_m ?in (a, mset b)\""], ["proof (prove)\nusing this:\n  unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b) \\<and>\n  a \\<in> {0..<p} \\<and>\n  (\\<forall>fi\\<in>set b. set (coeffs fi) \\<subseteq> {0..<p})\n\ngoal (1 subgoal):\n 1. unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)", "by auto"], ["proof (state)\nthis:\n  unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from unique_factorization_m_imp_factorization[OF this]"], ["proof (chain)\npicking this:\n  factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)", "have fact: \"factorization_m ?in (a, mset b)\""], ["proof (prove)\nusing this:\n  factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)\n\ngoal (1 subgoal):\n 1. factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)", "."], ["proof (state)\nthis:\n  factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from factorization_m_lead_coeff[OF this] monic_Mp[OF mon]"], ["proof (chain)\npicking this:\n  lead_coeff (Mp (q.Mp (Polynomial.smult ilc f))) = M a\n  monic (Mp (q.Mp (Polynomial.smult ilc f)))", "have \"M a = 1\""], ["proof (prove)\nusing this:\n  lead_coeff (Mp (q.Mp (Polynomial.smult ilc f))) = M a\n  monic (Mp (q.Mp (Polynomial.smult ilc f)))\n\ngoal (1 subgoal):\n 1. M a = 1", "by auto"], ["proof (state)\nthis:\n  M a = 1\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "with ufact"], ["proof (chain)\npicking this:\n  unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)\n  M a = 1", "have \"unique_factorization_m ?in (1, mset b)\""], ["proof (prove)\nusing this:\n  unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (a, mset b)\n  M a = 1\n\ngoal (1 subgoal):\n 1. unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, mset b)", "unfolding unique_factorization_m_def Mf_def"], ["proof (prove)\nusing this:\n  (\\<lambda>cfs.\n      case cfs of (c, fs) \\<Rightarrow> (M c, image_mset Mp fs)) `\n  Collect (factorization_m (q.Mp (Polynomial.smult ilc f))) =\n  {case (a, mset b) of (c, fs) \\<Rightarrow> (M c, image_mset Mp fs)}\n  M a = 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>cfs.\n        case cfs of (c, fs) \\<Rightarrow> (M c, image_mset Mp fs)) `\n    Collect (factorization_m (q.Mp (Polynomial.smult ilc f))) =\n    {case (1, mset b) of (c, fs) \\<Rightarrow> (M c, image_mset Mp fs)}", "by auto"], ["proof (state)\nthis:\n  unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, mset b)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from unique_monic_hensel_factorization[OF this mon sf n]"], ["proof (chain)\npicking this:\n  \\<exists>Gs.\n     q.unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, Gs)", "obtain hs where \"q.unique_factorization_m ?in (1, hs)\""], ["proof (prove)\nusing this:\n  \\<exists>Gs.\n     q.unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, Gs)\n\ngoal (1 subgoal):\n 1. (\\<And>hs.\n        q.unique_factorization_m (q.Mp (Polynomial.smult ilc f))\n         (1, hs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q.unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "hence unique: \"q.unique_factorization_m (smult ilc f) (1, hs)\""], ["proof (prove)\nusing this:\n  q.unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m (Polynomial.smult ilc f) (1, hs)", "unfolding unique_factorization_m_def Mf_def"], ["proof (prove)\nusing this:\n  q.unique_factorization_m (q.Mp (Polynomial.smult ilc f)) (1, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m (Polynomial.smult ilc f) (1, hs)", "by auto"], ["proof (state)\nthis:\n  q.unique_factorization_m (Polynomial.smult ilc f) (1, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "from q.factorization_m_smult[OF q.unique_factorization_m_imp_factorization[OF unique], of ?lc]"], ["proof (chain)\npicking this:\n  q.factorization_m\n   (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n   (1 * lead_coeff f, hs)", "have \"q.factorization_m (smult (ilc * ?lc) f) (?lc, hs)\""], ["proof (prove)\nusing this:\n  q.factorization_m\n   (Polynomial.smult (lead_coeff f) (Polynomial.smult ilc f))\n   (1 * lead_coeff f, hs)\n\ngoal (1 subgoal):\n 1. q.factorization_m (Polynomial.smult (ilc * lead_coeff f) f)\n     (lead_coeff f, hs)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  q.factorization_m (Polynomial.smult (ilc * lead_coeff f) f)\n   (lead_coeff f, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "moreover"], ["proof (state)\nthis:\n  q.factorization_m (Polynomial.smult (ilc * lead_coeff f) f)\n   (lead_coeff f, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "have \"q.Mp (smult (q.M (ilc * ?lc)) f) = q.Mp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (Polynomial.smult (q.M (ilc * lead_coeff f)) f) f", "unfolding inv"], ["proof (prove)\ngoal (1 subgoal):\n 1. q.eq_m (Polynomial.smult 1 f) f", "by simp"], ["proof (state)\nthis:\n  q.eq_m (Polynomial.smult (q.M (ilc * lead_coeff f)) f) f\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "ultimately"], ["proof (chain)\npicking this:\n  q.factorization_m (Polynomial.smult (ilc * lead_coeff f) f)\n   (lead_coeff f, hs)\n  q.eq_m (Polynomial.smult (q.M (ilc * lead_coeff f)) f) f", "have fact: \"q.factorization_m f (?lc, hs)\""], ["proof (prove)\nusing this:\n  q.factorization_m (Polynomial.smult (ilc * lead_coeff f) f)\n   (lead_coeff f, hs)\n  q.eq_m (Polynomial.smult (q.M (ilc * lead_coeff f)) f) f\n\ngoal (1 subgoal):\n 1. q.factorization_m f (lead_coeff f, hs)", "unfolding q.factorization_m_def"], ["proof (prove)\nusing this:\n  case (lead_coeff f, hs) of\n  (c, fs) \\<Rightarrow>\n    q.eq_m (Polynomial.smult (ilc * lead_coeff f) f)\n     (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n    (\\<forall>f\\<in>#fs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))\n  q.eq_m (Polynomial.smult (q.M (ilc * lead_coeff f)) f) f\n\ngoal (1 subgoal):\n 1. case (lead_coeff f, hs) of\n    (c, fs) \\<Rightarrow>\n      q.eq_m f (Polynomial.smult c (\\<Prod>\\<^sub># fs)) \\<and>\n      (\\<forall>f\\<in>#fs. q.irreducible\\<^sub>d_m f \\<and> monic (q.Mp f))", "by auto"], ["proof (state)\nthis:\n  q.factorization_m f (lead_coeff f, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "have \"q.unique_factorization_m f (?lc, hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, hs)", "proof (rule q.unique_factorization_mI[OF fact])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m f (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (lead_coeff f, hs)", "fix d us"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m f (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (lead_coeff f, hs)", "assume other_fact: \"q.factorization_m f (d,us)\""], ["proof (state)\nthis:\n  q.factorization_m f (d, us)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m f (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (lead_coeff f, hs)", "from q.factorization_m_lead_coeff[OF this]"], ["proof (chain)\npicking this:\n  lead_coeff (q.Mp f) = q.M d", "have lc: \"q.M d = lead_coeff (q.Mp f)\""], ["proof (prove)\nusing this:\n  lead_coeff (q.Mp f) = q.M d\n\ngoal (1 subgoal):\n 1. q.M d = lead_coeff (q.Mp f)", ".."], ["proof (state)\nthis:\n  q.M d = lead_coeff (q.Mp f)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m f (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (lead_coeff f, hs)", "have lc: \"q.M d = q.M ?lc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q.M d = q.M (lead_coeff f)", "unfolding lc"], ["proof (prove)\ngoal (1 subgoal):\n 1. lead_coeff (q.Mp f) = q.M (lead_coeff f)", "by (metis bh_fact q.factorization_m_lead_coeff)"], ["proof (state)\nthis:\n  q.M d = q.M (lead_coeff f)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m f (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (lead_coeff f, hs)", "from q.factorization_m_smult[OF other_fact, of ilc] unique"], ["proof (chain)\npicking this:\n  q.factorization_m (Polynomial.smult ilc f) (d * ilc, us)\n  q.unique_factorization_m (Polynomial.smult ilc f) (1, hs)", "have eq: \"q.Mf (d * ilc, us) = q.Mf (1, hs)\""], ["proof (prove)\nusing this:\n  q.factorization_m (Polynomial.smult ilc f) (d * ilc, us)\n  q.unique_factorization_m (Polynomial.smult ilc f) (1, hs)\n\ngoal (1 subgoal):\n 1. q.Mf (d * ilc, us) = q.Mf (1, hs)", "unfolding q.unique_factorization_m_def"], ["proof (prove)\nusing this:\n  q.factorization_m (Polynomial.smult ilc f) (d * ilc, us)\n  q.Mf ` Collect (q.factorization_m (Polynomial.smult ilc f)) =\n  {q.Mf (1, hs)}\n\ngoal (1 subgoal):\n 1. q.Mf (d * ilc, us) = q.Mf (1, hs)", "by auto"], ["proof (state)\nthis:\n  q.Mf (d * ilc, us) = q.Mf (1, hs)\n\ngoal (1 subgoal):\n 1. \\<And>d gs.\n       q.factorization_m f (d, gs) \\<Longrightarrow>\n       q.Mf (d, gs) = q.Mf (lead_coeff f, hs)", "thus \"q.Mf (d, us) = q.Mf (?lc, hs)\""], ["proof (prove)\nusing this:\n  q.Mf (d * ilc, us) = q.Mf (1, hs)\n\ngoal (1 subgoal):\n 1. q.Mf (d, us) = q.Mf (lead_coeff f, hs)", "using lc"], ["proof (prove)\nusing this:\n  q.Mf (d * ilc, us) = q.Mf (1, hs)\n  q.M d = q.M (lead_coeff f)\n\ngoal (1 subgoal):\n 1. q.Mf (d, us) = q.Mf (lead_coeff f, hs)", "unfolding q.Mf_def"], ["proof (prove)\nusing this:\n  (case (d * ilc, us) of\n   (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs)) =\n  (case (1, hs) of (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs))\n  q.M d = q.M (lead_coeff f)\n\ngoal (1 subgoal):\n 1. (case (d, us) of (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs)) =\n    (case (lead_coeff f, hs) of\n     (c, fs) \\<Rightarrow> (q.M c, image_mset q.Mp fs))", "by auto"], ["proof (state)\nthis:\n  q.Mf (d, us) = q.Mf (lead_coeff f, hs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q.unique_factorization_m f (lead_coeff f, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "with bh_fact"], ["proof (chain)\npicking this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  q.unique_factorization_m f (lead_coeff f, hs)", "show \"q.unique_factorization_m f (lead_coeff f, mset gs)\""], ["proof (prove)\nusing this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  q.unique_factorization_m f (lead_coeff f, hs)\n\ngoal (1 subgoal):\n 1. q.unique_factorization_m f (lead_coeff f, mset gs)", "unfolding q.unique_factorization_m_alt_def"], ["proof (prove)\nusing this:\n  q.factorization_m f (lead_coeff f, mset gs)\n  q.factorization_m f (lead_coeff f, hs) \\<and>\n  (\\<forall>dgs.\n      q.factorization_m f dgs \\<longrightarrow>\n      q.Mf dgs = q.Mf (lead_coeff f, hs))\n\ngoal (1 subgoal):\n 1. q.factorization_m f (lead_coeff f, mset gs) \\<and>\n    (\\<forall>dgs.\n        q.factorization_m f dgs \\<longrightarrow>\n        q.Mf dgs = q.Mf (lead_coeff f, mset gs))", "by metis"], ["proof (state)\nthis:\n  q.unique_factorization_m f (lead_coeff f, mset gs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hensel_lifting_unique:\n  assumes n: \"n \\<noteq> 0\" \n  and res: \"hensel_lifting p n f fs = gs\"                        \\<comment> \\<open>result of hensel is fact. \\<open>gs\\<close>\\<close>\n  and cop: \"coprime (lead_coeff f) p\" \n  and sf: \"poly_mod.square_free_m p f\" \n  and fact: \"poly_mod.factorization_m p f (c, mset fs)\"          \\<comment> \\<open>input is fact. \\<open>fs mod p\\<close>\\<close>\n  and c: \"c \\<in> {0..<p}\" \n  and norm: \"(\\<forall>fi\\<in>set fs. set (coeffs fi) \\<subseteq> {0..<p})\" \nshows \"poly_mod.unique_factorization_m (p^n) f (lead_coeff f, mset gs)\" \\<comment> \\<open>unique factorization mod \\<open>p^n\\<close>\\<close>\n    \"sort (map degree fs) = sort (map degree gs)\"                       \\<comment> \\<open>degrees stay the same\\<close>\n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> monic g \\<and> poly_mod.Mp (p^n) g = g \\<and>    \\<comment> \\<open>monic and normalized\\<close>\n      poly_mod.irreducible_m p g \\<and>                              \\<comment> \\<open>irreducibility even mod \\<open>p\\<close>\\<close>\n      poly_mod.degree_m p g = degree g   \\<comment> \\<open>mod \\<open>p\\<close> does not change degree of \\<open>g\\<close>\\<close>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs) &&&\n    sort (map degree fs) = sort (map degree gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        monic g \\<and>\n        poly_mod.Mp (p ^ n) g = g \\<and>\n        irreducible_m g \\<and> degree_m g = degree g)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "note hensel = hensel_lifting[OF assms]"], ["proof (state)\nthis:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (3 subgoals):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)\n 2. sort (map degree fs) = sort (map degree gs)\n 3. \\<And>g.\n       g \\<in> set gs \\<Longrightarrow>\n       monic g \\<and>\n       poly_mod.Mp (p ^ n) g = g \\<and>\n       irreducible_m g \\<and> degree_m g = degree g", "show \"sort (map degree fs) = sort (map degree gs)\" \n    \"\\<And> g. g \\<in> set gs \\<Longrightarrow> monic g \\<and> poly_mod.Mp (p^n) g = g \\<and> \n      poly_mod.irreducible_m p g \\<and>                            \n      poly_mod.degree_m p g = degree g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort (map degree fs) = sort (map degree gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        monic g \\<and>\n        poly_mod.Mp (p ^ n) g = g \\<and>\n        irreducible_m g \\<and> degree_m g = degree g)", "using hensel"], ["proof (prove)\nusing this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (1 subgoal):\n 1. sort (map degree fs) = sort (map degree gs) &&&\n    (\\<And>g.\n        g \\<in> set gs \\<Longrightarrow>\n        monic g \\<and>\n        poly_mod.Mp (p ^ n) g = g \\<and>\n        irreducible_m g \\<and> degree_m g = degree g)", "by auto"], ["proof (state)\nthis:\n  sort (map degree fs) = sort (map degree gs)\n  ?g \\<in> set gs \\<Longrightarrow>\n  monic ?g \\<and>\n  poly_mod.Mp (p ^ n) ?g = ?g \\<and>\n  irreducible_m ?g \\<and> degree_m ?g = degree ?g\n\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)", "from berlekamp_hensel_unique[OF cop sf refl n]"], ["proof (chain)\npicking this:\n  poly_mod.unique_factorization_m (p ^ n) f\n   (lead_coeff f, mset (berlekamp_hensel p n f))\n  ?g \\<in> set (berlekamp_hensel p n f) \\<Longrightarrow>\n  poly_mod.Mp (p ^ n) ?g = ?g", "have \"poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset (berlekamp_hensel p n f))\""], ["proof (prove)\nusing this:\n  poly_mod.unique_factorization_m (p ^ n) f\n   (lead_coeff f, mset (berlekamp_hensel p n f))\n  ?g \\<in> set (berlekamp_hensel p n f) \\<Longrightarrow>\n  poly_mod.Mp (p ^ n) ?g = ?g\n\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ n) f\n     (lead_coeff f, mset (berlekamp_hensel p n f))", "by auto"], ["proof (state)\nthis:\n  poly_mod.unique_factorization_m (p ^ n) f\n   (lead_coeff f, mset (berlekamp_hensel p n f))\n\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)", "with hensel(1)"], ["proof (chain)\npicking this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  poly_mod.unique_factorization_m (p ^ n) f\n   (lead_coeff f, mset (berlekamp_hensel p n f))", "show \"poly_mod.unique_factorization_m (p^n) f (lead_coeff f, mset gs)\""], ["proof (prove)\nusing this:\n  poly_mod.factorization_m (p ^ n) f (lead_coeff f, mset gs)\n  poly_mod.unique_factorization_m (p ^ n) f\n   (lead_coeff f, mset (berlekamp_hensel p n f))\n\ngoal (1 subgoal):\n 1. poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)", "by (metis poly_mod.unique_factorization_m_alt_def)"], ["proof (state)\nthis:\n  poly_mod.unique_factorization_m (p ^ n) f (lead_coeff f, mset gs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}