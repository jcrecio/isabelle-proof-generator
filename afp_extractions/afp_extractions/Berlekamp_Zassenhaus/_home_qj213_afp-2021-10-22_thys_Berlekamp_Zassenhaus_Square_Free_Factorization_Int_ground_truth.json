{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Square_Free_Factorization_Int.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma yun_wrelD: assumes \"yun_wrel F c f\"\n  shows \"map_poly rat_of_int F = smult c f\"", "lemma yun_relD: assumes \"yun_rel F c f\"\n  shows \"yun_wrel F c f\" \"map_poly rat_of_int F = smult c f\" \n    \"degree F = degree f\" \"F \\<noteq> 0\" \"lead_coeff F > 0\" \"monic f\" \n    \"f = 1 \\<longleftrightarrow> F = 1\" \"content F = 1\"", "lemma yun_erel_1_eq: assumes \"yun_erel F f\"\n  shows \"(F = 1) \\<longleftrightarrow> (f = 1)\"", "lemma yun_rel_1[simp]: \"yun_rel 1 1 1\"", "lemma yun_erel_1[simp]: \"yun_erel 1 1\"", "lemma yun_rel_mult: \"yun_rel F c f \\<Longrightarrow> yun_rel G d g \\<Longrightarrow> yun_rel (F * G) (c * d) (f * g)\"", "lemma yun_erel_mult: \"yun_erel F f \\<Longrightarrow> yun_erel G g \\<Longrightarrow> yun_erel (F * G) (f * g)\"", "lemma yun_rel_pow: assumes \"yun_rel F c f\"\n  shows \"yun_rel (F^n) (c^n) (f^n)\"", "lemma yun_erel_pow: \"yun_erel F f \\<Longrightarrow> yun_erel (F^n) (f^n)\"", "lemma yun_wrel_pderiv: assumes \"yun_wrel F c f\"\n  shows \"yun_wrel (pderiv F) c (pderiv f)\"", "lemma yun_wrel_minus: assumes \"yun_wrel F c f\" \"yun_wrel G c g\" \n  shows \"yun_wrel (F - G) c (f - g)\"", "lemma yun_wrel_div: assumes f: \"yun_wrel F c f\" and g: \"yun_wrel G d g\" \n  and dvd: \"G dvd F\" \"g dvd f\" \n  and G0: \"G \\<noteq> 0\" \n  shows \"yun_wrel (F div G) (c / d) (f div g)\"", "lemma yun_rel_div: assumes f: \"yun_rel F c f\" and g: \"yun_rel G d g\" \n  and dvd: \"G dvd F\" \"g dvd f\" \nshows \"yun_rel (F div G) (c / d) (f div g)\"", "lemma yun_wrel_gcd: assumes \"yun_wrel F c' f\" \"yun_wrel G c g\" and c: \"c' \\<noteq> 0\" \"c \\<noteq> 0\" \n  and d: \"d = rat_of_int (lead_coeff (gcd F G))\" \"d \\<noteq> 0\" \n  shows \"yun_wrel (gcd F G) d (gcd f g)\"", "lemma yun_rel_gcd: assumes f: \"yun_rel F c f\" and g: \"yun_wrel G c' g\"  and c': \"c' \\<noteq> 0\" \n  and d: \"d = rat_of_int (lead_coeff (gcd F G))\"  \nshows \"yun_rel (gcd F G) d (gcd f g)\"", "lemma yun_factorization_main_int: assumes f: \"f = p div gcd p (pderiv p)\"\n    and \"g = pderiv p div gcd p (pderiv p)\" \"monic p\" \n    and \"yun_gcd.yun_factorization_main gcd f g i hs = res\"\n    and \"yun_gcd.yun_factorization_main gcd F G i Hs = Res\" \n    and \"yun_rel F c f\" \"yun_wrel G c g\" \"list_all2 (rel_prod yun_erel (=)) Hs hs\"\n  shows \"list_all2 (rel_prod yun_erel (=)) Res res\"", "lemma yun_monic_factorization_int_yun_rel: assumes  \n    res: \"yun_gcd.yun_monic_factorization gcd f = res\"\n    and Res: \"yun_gcd.yun_monic_factorization gcd F = Res\" \n    and f: \"yun_rel F c f\" \n  shows \"list_all2 (rel_prod yun_erel (=)) Res res\"", "lemma yun_rel_same_right: assumes \"yun_rel f c G\" \"yun_rel g d G\" \n  shows \"f = g\"", "lemma square_free_factorization_int_main: assumes res: \"square_free_factorization_int_main f = fs\"\n  and ct: \"content f = 1\" and lc: \"lead_coeff f > 0\" \n  and deg: \"degree f \\<noteq> 0\" \nshows \"square_free_factorization f (1,fs) \\<and> (\\<forall> fi i. (fi, i) \\<in> set fs \\<longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0) \\<and>\n  distinct (map snd fs)\"", "lemma square_free_factorization_int': assumes res: \"square_free_factorization_int' f = (d, fs)\"\n  shows \"square_free_factorization f (d,fs)\" \n    \"(fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0\" \n    \"distinct (map snd fs)\"", "lemma x_split: assumes \"x_split f = (n, g)\" \n  shows \"f = monom 1 n * g\" \"n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\"", "lemma square_free_factorization_int: assumes res: \"square_free_factorization_int f = (d, fs)\"\n  shows \"square_free_factorization f (d,fs)\" \n    \"(fi, i) \\<in> set fs \\<Longrightarrow> primitive fi \\<and> lead_coeff fi > 0\""], "translations": [["", "lemma yun_wrelD: assumes \"yun_wrel F c f\"\n  shows \"map_poly rat_of_int F = smult c f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly F = Polynomial.smult c f", "using assms"], ["proof (prove)\nusing this:\n  yun_wrel F c f\n\ngoal (1 subgoal):\n 1. of_int_poly F = Polynomial.smult c f", "unfolding yun_wrel_def"], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c f\n\ngoal (1 subgoal):\n 1. of_int_poly F = Polynomial.smult c f", "by auto"], ["", "lemma yun_relD: assumes \"yun_rel F c f\"\n  shows \"yun_wrel F c f\" \"map_poly rat_of_int F = smult c f\" \n    \"degree F = degree f\" \"F \\<noteq> 0\" \"lead_coeff F > 0\" \"monic f\" \n    \"f = 1 \\<longleftrightarrow> F = 1\" \"content F = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((yun_wrel F c f &&& of_int_poly F = Polynomial.smult c f) &&&\n     degree F = degree f &&& F \\<noteq> 0) &&&\n    (0 < lead_coeff F &&& monic f) &&& (f = 1) = (F = 1) &&& content F = 1", "proof -"], ["proof (state)\ngoal (8 subgoals):\n 1. yun_wrel F c f\n 2. of_int_poly F = Polynomial.smult c f\n 3. degree F = degree f\n 4. F \\<noteq> 0\n 5. 0 < lead_coeff F\n 6. monic f\n 7. (f = 1) = (F = 1)\n 8. content F = 1", "note * = assms[unfolded yun_rel_def yun_wrel_def, simplified]"], ["proof (state)\nthis:\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f\n\ngoal (8 subgoals):\n 1. yun_wrel F c f\n 2. of_int_poly F = Polynomial.smult c f\n 3. degree F = degree f\n 4. F \\<noteq> 0\n 5. 0 < lead_coeff F\n 6. monic f\n 7. (f = 1) = (F = 1)\n 8. content F = 1", "then"], ["proof (chain)\npicking this:\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f", "have \"degree (map_poly rat_of_int F) = degree f\""], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f\n\ngoal (1 subgoal):\n 1. degree (of_int_poly F) = degree f", "by auto"], ["proof (state)\nthis:\n  degree (of_int_poly F) = degree f\n\ngoal (8 subgoals):\n 1. yun_wrel F c f\n 2. of_int_poly F = Polynomial.smult c f\n 3. degree F = degree f\n 4. F \\<noteq> 0\n 5. 0 < lead_coeff F\n 6. monic f\n 7. (f = 1) = (F = 1)\n 8. content F = 1", "then"], ["proof (chain)\npicking this:\n  degree (of_int_poly F) = degree f", "show deg: \"degree F = degree f\""], ["proof (prove)\nusing this:\n  degree (of_int_poly F) = degree f\n\ngoal (1 subgoal):\n 1. degree F = degree f", "by simp"], ["proof (state)\nthis:\n  degree F = degree f\n\ngoal (7 subgoals):\n 1. yun_wrel F c f\n 2. of_int_poly F = Polynomial.smult c f\n 3. F \\<noteq> 0\n 4. 0 < lead_coeff F\n 5. monic f\n 6. (f = 1) = (F = 1)\n 7. content F = 1", "show \"F \\<noteq> 0\" \"lead_coeff F > 0\" \"monic f\" \"content F = 1\" \n    \"map_poly rat_of_int F = smult c f\"\n    \"yun_wrel F c f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F \\<noteq> 0 &&& 0 < lead_coeff F &&& monic f) &&&\n    content F = 1 &&&\n    of_int_poly F = Polynomial.smult c f &&& yun_wrel F c f", "using *"], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f\n\ngoal (1 subgoal):\n 1. (F \\<noteq> 0 &&& 0 < lead_coeff F &&& monic f) &&&\n    content F = 1 &&&\n    of_int_poly F = Polynomial.smult c f &&& yun_wrel F c f", "by (auto simp: yun_wrel_def)"], ["proof (state)\nthis:\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  content F = 1\n  of_int_poly F = Polynomial.smult c f\n  yun_wrel F c f\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "{"], ["proof (state)\nthis:\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  content F = 1\n  of_int_poly F = Polynomial.smult c f\n  yun_wrel F c f\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "assume \"f = 1\""], ["proof (state)\nthis:\n  f = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "with deg"], ["proof (chain)\npicking this:\n  degree F = degree f\n  f = 1", "have \"degree F = 0\""], ["proof (prove)\nusing this:\n  degree F = degree f\n  f = 1\n\ngoal (1 subgoal):\n 1. degree F = 0", "by auto"], ["proof (state)\nthis:\n  degree F = 0\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. F = [:a:]", "obtain c where F: \"F = [:c:]\" and c: \"c = lead_coeff F\""], ["proof (prove)\nusing this:\n  \\<exists>a. F = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>F = [:c:]; c = lead_coeff F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  F = [:c:]\n  c = lead_coeff F\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "from c *"], ["proof (chain)\npicking this:\n  c = lead_coeff F\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f", "have c0: \"c > 0\""], ["proof (prove)\nusing this:\n  c = lead_coeff F\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f\n\ngoal (1 subgoal):\n 1. 0 < c", "by auto"], ["proof (state)\nthis:\n  0 < c\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "hence cF: \"content F = c\""], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. content F = c", "unfolding F content_def"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. gcd_list (coeffs [:c:]) = c", "by auto"], ["proof (state)\nthis:\n  content F = c\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "with *"], ["proof (chain)\npicking this:\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f\n  content F = c", "have \"c = 1\""], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c f \\<and>\n  content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f\n  content F = c\n\ngoal (1 subgoal):\n 1. c = 1", "by auto"], ["proof (state)\nthis:\n  c = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "with F"], ["proof (chain)\npicking this:\n  F = [:c:]\n  c = 1", "have \"F = 1\""], ["proof (prove)\nusing this:\n  F = [:c:]\n  c = 1\n\ngoal (1 subgoal):\n 1. F = 1", "by simp"], ["proof (state)\nthis:\n  F = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "}"], ["proof (state)\nthis:\n  f = 1 \\<Longrightarrow> F = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "moreover"], ["proof (state)\nthis:\n  f = 1 \\<Longrightarrow> F = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "{"], ["proof (state)\nthis:\n  f = 1 \\<Longrightarrow> F = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "assume \"F = 1\""], ["proof (state)\nthis:\n  F = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "with deg"], ["proof (chain)\npicking this:\n  degree F = degree f\n  F = 1", "have \"degree f = 0\""], ["proof (prove)\nusing this:\n  degree F = degree f\n  F = 1\n\ngoal (1 subgoal):\n 1. degree f = 0", "by auto"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "with \\<open>monic f\\<close>"], ["proof (chain)\npicking this:\n  monic f\n  degree f = 0", "have \"f = 1\""], ["proof (prove)\nusing this:\n  monic f\n  degree f = 0\n\ngoal (1 subgoal):\n 1. f = 1", "using monic_degree_0"], ["proof (prove)\nusing this:\n  monic f\n  degree f = 0\n  monic ?p \\<Longrightarrow> (degree ?p = 0) = (?p = 1)\n\ngoal (1 subgoal):\n 1. f = 1", "by blast"], ["proof (state)\nthis:\n  f = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "}"], ["proof (state)\nthis:\n  F = 1 \\<Longrightarrow> f = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "ultimately"], ["proof (chain)\npicking this:\n  f = 1 \\<Longrightarrow> F = 1\n  F = 1 \\<Longrightarrow> f = 1", "show \"(f = 1) \\<longleftrightarrow> (F = 1)\""], ["proof (prove)\nusing this:\n  f = 1 \\<Longrightarrow> F = 1\n  F = 1 \\<Longrightarrow> f = 1\n\ngoal (1 subgoal):\n 1. (f = 1) = (F = 1)", "by auto"], ["proof (state)\nthis:\n  (f = 1) = (F = 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_erel_1_eq: assumes \"yun_erel F f\"\n  shows \"(F = 1) \\<longleftrightarrow> (f = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F = 1) = (f = 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (F = 1) = (f = 1)", "from assms[unfolded yun_erel_def]"], ["proof (chain)\npicking this:\n  \\<exists>c. yun_rel F c f", "obtain c where \"yun_rel F c f\""], ["proof (prove)\nusing this:\n  \\<exists>c. yun_rel F c f\n\ngoal (1 subgoal):\n 1. (\\<And>c. yun_rel F c f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  yun_rel F c f\n\ngoal (1 subgoal):\n 1. (F = 1) = (f = 1)", "from yun_relD[OF this]"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. (F = 1) = (f = 1)", "by simp"], ["proof (state)\nthis:\n  (F = 1) = (f = 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_rel_1[simp]: \"yun_rel 1 1 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel 1 1 1", "by (auto simp: yun_rel_def yun_wrel_def content_def)"], ["", "lemma yun_erel_1[simp]: \"yun_erel 1 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_erel 1 1", "unfolding yun_erel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. yun_rel 1 c 1", "using yun_rel_1"], ["proof (prove)\nusing this:\n  yun_rel 1 1 1\n\ngoal (1 subgoal):\n 1. \\<exists>c. yun_rel 1 c 1", "by blast"], ["", "lemma yun_rel_mult: \"yun_rel F c f \\<Longrightarrow> yun_rel G d g \\<Longrightarrow> yun_rel (F * G) (c * d) (f * g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>yun_rel F c f; yun_rel G d g\\<rbrakk>\n    \\<Longrightarrow> yun_rel (F * G) (c * d) (f * g)", "unfolding yun_rel_def yun_wrel_def content_mult lead_coeff_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>of_int_poly F = Polynomial.smult c f \\<and>\n             content F = 1 \\<and> 0 < lead_coeff F \\<and> monic f;\n     of_int_poly G = Polynomial.smult d g \\<and>\n     content G = 1 \\<and> 0 < lead_coeff G \\<and> monic g\\<rbrakk>\n    \\<Longrightarrow> of_int_poly (F * G) =\n                      Polynomial.smult (c * d) (f * g) \\<and>\n                      content F * content G = 1 \\<and>\n                      0 < lead_coeff F * lead_coeff G \\<and>\n                      lead_coeff f * lead_coeff g = 1", "by (auto simp: monic_mult hom_distribs)"], ["", "lemma yun_erel_mult: \"yun_erel F f \\<Longrightarrow> yun_erel G g \\<Longrightarrow> yun_erel (F * G) (f * g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>yun_erel F f; yun_erel G g\\<rbrakk>\n    \\<Longrightarrow> yun_erel (F * G) (f * g)", "unfolding yun_erel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>c. yun_rel F c f; \\<exists>c. yun_rel G c g\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. yun_rel (F * G) c (f * g)", "using yun_rel_mult[of F _ f G _ g]"], ["proof (prove)\nusing this:\n  \\<lbrakk>yun_rel F ?c f; yun_rel G ?d g\\<rbrakk>\n  \\<Longrightarrow> yun_rel (F * G) (?c * ?d) (f * g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>c. yun_rel F c f; \\<exists>c. yun_rel G c g\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. yun_rel (F * G) c (f * g)", "by blast"], ["", "lemma yun_rel_pow: assumes \"yun_rel F c f\"\n  shows \"yun_rel (F^n) (c^n) (f^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel (F ^ n) (c ^ n) (f ^ n)", "by (induct n, insert assms yun_rel_mult, auto)"], ["", "lemma yun_erel_pow: \"yun_erel F f \\<Longrightarrow> yun_erel (F^n) (f^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_erel F f \\<Longrightarrow> yun_erel (F ^ n) (f ^ n)", "using yun_rel_pow"], ["proof (prove)\nusing this:\n  yun_rel ?F ?c ?f \\<Longrightarrow> yun_rel (?F ^ ?n) (?c ^ ?n) (?f ^ ?n)\n\ngoal (1 subgoal):\n 1. yun_erel F f \\<Longrightarrow> yun_erel (F ^ n) (f ^ n)", "unfolding yun_erel_def"], ["proof (prove)\nusing this:\n  yun_rel ?F ?c ?f \\<Longrightarrow> yun_rel (?F ^ ?n) (?c ^ ?n) (?f ^ ?n)\n\ngoal (1 subgoal):\n 1. \\<exists>c. yun_rel F c f \\<Longrightarrow>\n    \\<exists>c. yun_rel (F ^ n) c (f ^ n)", "by blast"], ["", "lemma yun_wrel_pderiv: assumes \"yun_wrel F c f\"\n  shows \"yun_wrel (pderiv F) c (pderiv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_wrel (pderiv F) c (pderiv f)", "by (unfold yun_wrel_def, simp add: yun_wrelD[OF assms] pderiv_smult hom_distribs)"], ["", "lemma yun_wrel_minus: assumes \"yun_wrel F c f\" \"yun_wrel G c g\" \n  shows \"yun_wrel (F - G) c (f - g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_wrel (F - G) c (f - g)", "using assms"], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  yun_wrel G c g\n\ngoal (1 subgoal):\n 1. yun_wrel (F - G) c (f - g)", "unfolding yun_wrel_def"], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c f\n  of_int_poly G = Polynomial.smult c g\n\ngoal (1 subgoal):\n 1. of_int_poly (F - G) = Polynomial.smult c (f - g)", "by (auto simp: smult_diff_right hom_distribs)"], ["", "lemma yun_wrel_div: assumes f: \"yun_wrel F c f\" and g: \"yun_wrel G d g\" \n  and dvd: \"G dvd F\" \"g dvd f\" \n  and G0: \"G \\<noteq> 0\" \n  shows \"yun_wrel (F div G) (c / d) (f div g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "let ?r = \"rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "let ?rp = \"map_poly ?r\""], ["proof (state)\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "from dvd"], ["proof (chain)\npicking this:\n  G dvd F\n  g dvd f", "obtain H h where fgh: \"F = G * H\" \"f = g * h\""], ["proof (prove)\nusing this:\n  G dvd F\n  g dvd f\n\ngoal (1 subgoal):\n 1. (\\<And>H h.\n        \\<lbrakk>F = G * H; f = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. F = G * k\n  \\<exists>k. f = g * k\n\ngoal (1 subgoal):\n 1. (\\<And>H h.\n        \\<lbrakk>F = G * H; f = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  F = G * H\n  f = g * h\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "from G0 yun_wrelD[OF g]"], ["proof (chain)\npicking this:\n  G \\<noteq> 0\n  of_int_poly G = Polynomial.smult d g", "have g0: \"g \\<noteq> 0\" and d0: \"d \\<noteq> 0\""], ["proof (prove)\nusing this:\n  G \\<noteq> 0\n  of_int_poly G = Polynomial.smult d g\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 &&& d \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  g \\<noteq> 0\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "from arg_cong[OF fgh(1), of \"\\<lambda> x. x div G\"]"], ["proof (chain)\npicking this:\n  F div G = G * H div G", "have H: \"H = F div G\""], ["proof (prove)\nusing this:\n  F div G = G * H div G\n\ngoal (1 subgoal):\n 1. H = F div G", "using G0"], ["proof (prove)\nusing this:\n  F div G = G * H div G\n  G \\<noteq> 0\n\ngoal (1 subgoal):\n 1. H = F div G", "by simp"], ["proof (state)\nthis:\n  H = F div G\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "from arg_cong[OF fgh(1), of ?rp]"], ["proof (chain)\npicking this:\n  of_int_poly F = of_int_poly (G * H)", "have \"?rp F = ?rp G * ?rp H\""], ["proof (prove)\nusing this:\n  of_int_poly F = of_int_poly (G * H)\n\ngoal (1 subgoal):\n 1. of_int_poly F = of_int_poly G * of_int_poly H", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly F = of_int_poly G * of_int_poly H\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "from arg_cong[OF this, of \"\\<lambda> x. x div ?rp G\"] G0"], ["proof (chain)\npicking this:\n  of_int_poly F div of_int_poly G =\n  of_int_poly G * of_int_poly H div of_int_poly G\n  G \\<noteq> 0", "have id: \"?rp H = ?rp F div ?rp G\""], ["proof (prove)\nusing this:\n  of_int_poly F div of_int_poly G =\n  of_int_poly G * of_int_poly H div of_int_poly G\n  G \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int_poly H = of_int_poly F div of_int_poly G", "by auto"], ["proof (state)\nthis:\n  of_int_poly H = of_int_poly F div of_int_poly G\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "have \"?rp (F div G) = ?rp F div ?rp G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly (F div G) = of_int_poly F div of_int_poly G", "unfolding H[symmetric] id"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly F div of_int_poly G = of_int_poly F div of_int_poly G", "by simp"], ["proof (state)\nthis:\n  of_int_poly (F div G) = of_int_poly F div of_int_poly G\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "also"], ["proof (state)\nthis:\n  of_int_poly (F div G) = of_int_poly F div of_int_poly G\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "have \"\\<dots> = smult c f div smult d g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly F div of_int_poly G =\n    Polynomial.smult c f div Polynomial.smult d g", "using f g"], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  yun_wrel G d g\n\ngoal (1 subgoal):\n 1. of_int_poly F div of_int_poly G =\n    Polynomial.smult c f div Polynomial.smult d g", "unfolding yun_wrel_def"], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c f\n  of_int_poly G = Polynomial.smult d g\n\ngoal (1 subgoal):\n 1. of_int_poly F div of_int_poly G =\n    Polynomial.smult c f div Polynomial.smult d g", "by auto"], ["proof (state)\nthis:\n  of_int_poly F div of_int_poly G =\n  Polynomial.smult c f div Polynomial.smult d g\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "also"], ["proof (state)\nthis:\n  of_int_poly F div of_int_poly G =\n  Polynomial.smult c f div Polynomial.smult d g\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "have \"\\<dots> = smult (c / d) (f div g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult c f div Polynomial.smult d g =\n    Polynomial.smult (c / d) (f div g)", "unfolding div_smult_right[OF d0] div_smult_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (inverse d) (Polynomial.smult c (f div g)) =\n    Polynomial.smult (c / d) (f div g)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  Polynomial.smult c f div Polynomial.smult d g =\n  Polynomial.smult (c / d) (f div g)\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "finally"], ["proof (chain)\npicking this:\n  of_int_poly (F div G) = Polynomial.smult (c / d) (f div g)", "show ?thesis"], ["proof (prove)\nusing this:\n  of_int_poly (F div G) = Polynomial.smult (c / d) (f div g)\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "unfolding yun_wrel_def"], ["proof (prove)\nusing this:\n  of_int_poly (F div G) = Polynomial.smult (c / d) (f div g)\n\ngoal (1 subgoal):\n 1. of_int_poly (F div G) = Polynomial.smult (c / d) (f div g)", "by simp"], ["proof (state)\nthis:\n  yun_wrel (F div G) (c / d) (f div g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_rel_div: assumes f: \"yun_rel F c f\" and g: \"yun_rel G d g\" \n  and dvd: \"G dvd F\" \"g dvd f\" \nshows \"yun_rel (F div G) (c / d) (f div g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel (F div G) (c / d) (f div g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. yun_rel (F div G) (c / d) (f div g)", "note ff = yun_relD[OF f]"], ["proof (state)\nthis:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. yun_rel (F div G) (c / d) (f div g)", "note gg = yun_relD[OF g]"], ["proof (state)\nthis:\n  yun_wrel G d g\n  of_int_poly G = Polynomial.smult d g\n  degree G = degree g\n  G \\<noteq> 0\n  0 < lead_coeff G\n  monic g\n  (g = 1) = (G = 1)\n  content G = 1\n\ngoal (1 subgoal):\n 1. yun_rel (F div G) (c / d) (f div g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel (F div G) (c / d) (f div g)", "unfolding yun_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g) \\<and>\n    content (F div G) = 1 \\<and>\n    0 < lead_coeff (F div G) \\<and> monic (f div g)", "proof (intro conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. yun_wrel (F div G) (c / d) (f div g)\n 2. content (F div G) = 1\n 3. 0 < lead_coeff (F div G)\n 4. monic (f div g)", "from yun_wrel_div[OF ff(1) gg(1) dvd gg(4)]"], ["proof (chain)\npicking this:\n  yun_wrel (F div G) (c / d) (f div g)", "show \"yun_wrel (F div G) (c / d) (f div g)\""], ["proof (prove)\nusing this:\n  yun_wrel (F div G) (c / d) (f div g)\n\ngoal (1 subgoal):\n 1. yun_wrel (F div G) (c / d) (f div g)", "by auto"], ["proof (state)\nthis:\n  yun_wrel (F div G) (c / d) (f div g)\n\ngoal (3 subgoals):\n 1. content (F div G) = 1\n 2. 0 < lead_coeff (F div G)\n 3. monic (f div g)", "from dvd"], ["proof (chain)\npicking this:\n  G dvd F\n  g dvd f", "have fg: \"f = g * (f div g)\""], ["proof (prove)\nusing this:\n  G dvd F\n  g dvd f\n\ngoal (1 subgoal):\n 1. f = g * (f div g)", "by auto"], ["proof (state)\nthis:\n  f = g * (f div g)\n\ngoal (3 subgoals):\n 1. content (F div G) = 1\n 2. 0 < lead_coeff (F div G)\n 3. monic (f div g)", "from arg_cong[OF fg, of monic] ff(6) gg(6)"], ["proof (chain)\npicking this:\n  monic f = monic (g * (f div g))\n  monic f\n  monic g", "show \"monic (f div g)\""], ["proof (prove)\nusing this:\n  monic f = monic (g * (f div g))\n  monic f\n  monic g\n\ngoal (1 subgoal):\n 1. monic (f div g)", "using monic_factor"], ["proof (prove)\nusing this:\n  monic f = monic (g * (f div g))\n  monic f\n  monic g\n  \\<lbrakk>monic (?p * ?q); monic ?p\\<rbrakk> \\<Longrightarrow> monic ?q\n\ngoal (1 subgoal):\n 1. monic (f div g)", "by blast"], ["proof (state)\nthis:\n  monic (f div g)\n\ngoal (2 subgoals):\n 1. content (F div G) = 1\n 2. 0 < lead_coeff (F div G)", "from dvd"], ["proof (chain)\npicking this:\n  G dvd F\n  g dvd f", "have FG: \"F = G * (F div G)\""], ["proof (prove)\nusing this:\n  G dvd F\n  g dvd f\n\ngoal (1 subgoal):\n 1. F = G * (F div G)", "by auto"], ["proof (state)\nthis:\n  F = G * (F div G)\n\ngoal (2 subgoals):\n 1. content (F div G) = 1\n 2. 0 < lead_coeff (F div G)", "from arg_cong[OF FG, of content, unfolded content_mult] ff(8) gg(8)"], ["proof (chain)\npicking this:\n  content F = content G * content (F div G)\n  content F = 1\n  content G = 1", "show \"content (F div G) = 1\""], ["proof (prove)\nusing this:\n  content F = content G * content (F div G)\n  content F = 1\n  content G = 1\n\ngoal (1 subgoal):\n 1. content (F div G) = 1", "by simp"], ["proof (state)\nthis:\n  content (F div G) = 1\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff (F div G)", "from arg_cong[OF FG, of lead_coeff, unfolded lead_coeff_mult] ff(5) gg(5)"], ["proof (chain)\npicking this:\n  lead_coeff F = lead_coeff G * lead_coeff (F div G)\n  0 < lead_coeff F\n  0 < lead_coeff G", "show \"lead_coeff (F div G) > 0\""], ["proof (prove)\nusing this:\n  lead_coeff F = lead_coeff G * lead_coeff (F div G)\n  0 < lead_coeff F\n  0 < lead_coeff G\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff (F div G)", "by (simp add: zero_less_mult_iff)"], ["proof (state)\nthis:\n  0 < lead_coeff (F div G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  yun_rel (F div G) (c / d) (f div g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_wrel_gcd: assumes \"yun_wrel F c' f\" \"yun_wrel G c g\" and c: \"c' \\<noteq> 0\" \"c \\<noteq> 0\" \n  and d: \"d = rat_of_int (lead_coeff (gcd F G))\" \"d \\<noteq> 0\" \n  shows \"yun_wrel (gcd F G) d (gcd f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "let ?r = \"rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "let ?rp = \"map_poly ?r\""], ["proof (state)\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "have \"smult d (gcd f g) = smult d (gcd (smult c' f) (smult c g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult d (gcd f g) =\n    Polynomial.smult d (gcd (Polynomial.smult c' f) (Polynomial.smult c g))", "by (simp add: c gcd_smult_left gcd_smult_right)"], ["proof (state)\nthis:\n  Polynomial.smult d (gcd f g) =\n  Polynomial.smult d (gcd (Polynomial.smult c' f) (Polynomial.smult c g))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "also"], ["proof (state)\nthis:\n  Polynomial.smult d (gcd f g) =\n  Polynomial.smult d (gcd (Polynomial.smult c' f) (Polynomial.smult c g))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "have \"\\<dots> = smult d (gcd (?rp F) (?rp G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult d\n     (gcd (Polynomial.smult c' f) (Polynomial.smult c g)) =\n    Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G))", "using assms(1-2)[unfolded yun_wrel_def]"], ["proof (prove)\nusing this:\n  of_int_poly F = Polynomial.smult c' f\n  of_int_poly G = Polynomial.smult c g\n\ngoal (1 subgoal):\n 1. Polynomial.smult d\n     (gcd (Polynomial.smult c' f) (Polynomial.smult c g)) =\n    Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G))", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult d (gcd (Polynomial.smult c' f) (Polynomial.smult c g)) =\n  Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "also"], ["proof (state)\nthis:\n  Polynomial.smult d (gcd (Polynomial.smult c' f) (Polynomial.smult c g)) =\n  Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "have \"\\<dots> = smult (d * inverse d) (?rp (gcd F G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G)) =\n    Polynomial.smult (d * inverse d) (of_int_poly (gcd F G))", "unfolding gcd_rat_to_gcd_int d"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (rat_of_int (lead_coeff (gcd F G)))\n     (Polynomial.smult (inverse (rat_of_int (lead_coeff (gcd F G))))\n       (of_int_poly (gcd F G))) =\n    Polynomial.smult\n     (rat_of_int (lead_coeff (gcd F G)) *\n      inverse (rat_of_int (lead_coeff (gcd F G))))\n     (of_int_poly (gcd F G))", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G)) =\n  Polynomial.smult (d * inverse d) (of_int_poly (gcd F G))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "also"], ["proof (state)\nthis:\n  Polynomial.smult d (gcd (of_int_poly F) (of_int_poly G)) =\n  Polynomial.smult (d * inverse d) (of_int_poly (gcd F G))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "have \"d * inverse d = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d * inverse d = 1", "using d"], ["proof (prove)\nusing this:\n  d = rat_of_int (lead_coeff (gcd F G))\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d * inverse d = 1", "by auto"], ["proof (state)\nthis:\n  d * inverse d = 1\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "finally"], ["proof (chain)\npicking this:\n  Polynomial.smult d (gcd f g) = Polynomial.smult 1 (of_int_poly (gcd F G))", "show ?thesis"], ["proof (prove)\nusing this:\n  Polynomial.smult d (gcd f g) = Polynomial.smult 1 (of_int_poly (gcd F G))\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "unfolding yun_wrel_def"], ["proof (prove)\nusing this:\n  Polynomial.smult d (gcd f g) = Polynomial.smult 1 (of_int_poly (gcd F G))\n\ngoal (1 subgoal):\n 1. of_int_poly (gcd F G) = Polynomial.smult d (gcd f g)", "by simp"], ["proof (state)\nthis:\n  yun_wrel (gcd F G) d (gcd f g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_rel_gcd: assumes f: \"yun_rel F c f\" and g: \"yun_wrel G c' g\"  and c': \"c' \\<noteq> 0\" \n  and d: \"d = rat_of_int (lead_coeff (gcd F G))\"  \nshows \"yun_rel (gcd F G) d (gcd f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel (gcd F G) d (gcd f g)", "unfolding yun_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g) \\<and>\n    content (gcd F G) = 1 \\<and>\n    0 < lead_coeff (gcd F G) \\<and> monic (gcd f g)", "proof (intro conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. yun_wrel (gcd F G) d (gcd f g)\n 2. content (gcd F G) = 1\n 3. 0 < lead_coeff (gcd F G)\n 4. monic (gcd f g)", "note ff = yun_relD[OF f]"], ["proof (state)\nthis:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (4 subgoals):\n 1. yun_wrel (gcd F G) d (gcd f g)\n 2. content (gcd F G) = 1\n 3. 0 < lead_coeff (gcd F G)\n 4. monic (gcd f g)", "from ff"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1", "have c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (4 subgoals):\n 1. yun_wrel (gcd F G) d (gcd f g)\n 2. content (gcd F G) = 1\n 3. 0 < lead_coeff (gcd F G)\n 4. monic (gcd f g)", "from ff d"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n  d = rat_of_int (lead_coeff (gcd F G))", "have d0: \"d \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n  d = rat_of_int (lead_coeff (gcd F G))\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (4 subgoals):\n 1. yun_wrel (gcd F G) d (gcd f g)\n 2. content (gcd F G) = 1\n 3. 0 < lead_coeff (gcd F G)\n 4. monic (gcd f g)", "from yun_wrel_gcd[OF ff(1) g c0 c' d d0]"], ["proof (chain)\npicking this:\n  yun_wrel (gcd F G) d (gcd f g)", "show \"yun_wrel (gcd F G) d (gcd f g)\""], ["proof (prove)\nusing this:\n  yun_wrel (gcd F G) d (gcd f g)\n\ngoal (1 subgoal):\n 1. yun_wrel (gcd F G) d (gcd f g)", "by auto"], ["proof (state)\nthis:\n  yun_wrel (gcd F G) d (gcd f g)\n\ngoal (3 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)\n 3. monic (gcd f g)", "from ff"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1", "have \"gcd f g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. gcd f g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  gcd f g \\<noteq> 0\n\ngoal (3 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)\n 3. monic (gcd f g)", "thus \"monic (gcd f g)\""], ["proof (prove)\nusing this:\n  gcd f g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monic (gcd f g)", "by (simp add: poly_gcd_monic)"], ["proof (state)\nthis:\n  monic (gcd f g)\n\ngoal (2 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)", "obtain H where H: \"gcd F G = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>H. gcd F G = H \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  gcd F G = H\n\ngoal (2 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)", "obtain lc where lc: \"coeff H (degree H) = lc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lc. lead_coeff H = lc \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lead_coeff H = lc\n\ngoal (2 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)", "from ff"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1", "have \"gcd F G \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. gcd F G \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  gcd F G \\<noteq> 0\n\ngoal (2 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)", "hence \"H \\<noteq> 0\" \"lc \\<noteq> 0\""], ["proof (prove)\nusing this:\n  gcd F G \\<noteq> 0\n\ngoal (1 subgoal):\n 1. H \\<noteq> 0 &&& lc \\<noteq> 0", "unfolding H[symmetric] lc[symmetric]"], ["proof (prove)\nusing this:\n  gcd F G \\<noteq> 0\n\ngoal (1 subgoal):\n 1. gcd F G \\<noteq> 0 &&& lead_coeff (gcd F G) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  H \\<noteq> 0\n  lc \\<noteq> 0\n\ngoal (2 subgoals):\n 1. content (gcd F G) = 1\n 2. 0 < lead_coeff (gcd F G)", "thus \"0 < lead_coeff (gcd F G)\""], ["proof (prove)\nusing this:\n  H \\<noteq> 0\n  lc \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff (gcd F G)", "unfolding \n    arg_cong[OF normalize_gcd[of F G], of lead_coeff, symmetric]"], ["proof (prove)\nusing this:\n  H \\<noteq> 0\n  lc \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff (normalize (gcd F G))", "unfolding normalize_poly_eq_map_poly H"], ["proof (prove)\nusing this:\n  H \\<noteq> 0\n  lc \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff\n         (map_poly (\\<lambda>x. x div unit_factor (lead_coeff H)) H)", "by (auto, subst Polynomial.coeff_map_poly, auto, \n    subst Polynomial.degree_map_poly, auto simp: sgn_if)"], ["proof (state)\nthis:\n  0 < lead_coeff (gcd F G)\n\ngoal (1 subgoal):\n 1. content (gcd F G) = 1", "have \"H dvd F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H dvd F", "unfolding H[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd F G dvd F", "by auto"], ["proof (state)\nthis:\n  H dvd F\n\ngoal (1 subgoal):\n 1. content (gcd F G) = 1", "then"], ["proof (chain)\npicking this:\n  H dvd F", "obtain K where F: \"F = H * K\""], ["proof (prove)\nusing this:\n  H dvd F\n\ngoal (1 subgoal):\n 1. (\\<And>K. F = H * K \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. F = H * k\n\ngoal (1 subgoal):\n 1. (\\<And>K. F = H * K \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  F = H * K\n\ngoal (1 subgoal):\n 1. content (gcd F G) = 1", "from arg_cong[OF this, of content, unfolded content_mult ff(8)]\n    content_ge_0_int[of H]"], ["proof (chain)\npicking this:\n  1 = content H * content K\n  0 \\<le> content H", "have \"content H = 1\""], ["proof (prove)\nusing this:\n  1 = content H * content K\n  0 \\<le> content H\n\ngoal (1 subgoal):\n 1. content H = 1", "by (auto simp add: zmult_eq_1_iff)"], ["proof (state)\nthis:\n  content H = 1\n\ngoal (1 subgoal):\n 1. content (gcd F G) = 1", "thus \"content (gcd F G) = 1\""], ["proof (prove)\nusing this:\n  content H = 1\n\ngoal (1 subgoal):\n 1. content (gcd F G) = 1", "unfolding H"], ["proof (prove)\nusing this:\n  content H = 1\n\ngoal (1 subgoal):\n 1. content H = 1", "."], ["proof (state)\nthis:\n  content (gcd F G) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_factorization_main_int: assumes f: \"f = p div gcd p (pderiv p)\"\n    and \"g = pderiv p div gcd p (pderiv p)\" \"monic p\" \n    and \"yun_gcd.yun_factorization_main gcd f g i hs = res\"\n    and \"yun_gcd.yun_factorization_main gcd F G i Hs = Res\" \n    and \"yun_rel F c f\" \"yun_wrel G c g\" \"list_all2 (rel_prod yun_erel (=)) Hs hs\"\n  shows \"list_all2 (rel_prod yun_erel (=)) Res res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "let ?P = \"\\<lambda> f g. \\<forall> i hs res F G Hs Res c. \n    yun_gcd.yun_factorization_main gcd f g i hs = res\n    \\<longrightarrow> yun_gcd.yun_factorization_main gcd F G i Hs = Res \n    \\<longrightarrow> yun_rel F c f \\<longrightarrow> yun_wrel G c g \\<longrightarrow> list_all2 (rel_prod yun_erel (=)) Hs hs\n    \\<longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "note simps = yun_gcd.yun_factorization_main.simps"], ["proof (state)\nthis:\n  yun_gcd.yun_factorization_main ?Gcd ?bn ?cn ?i ?sqr =\n  (if ?bn = 1 then ?sqr\n   else let dn = ?cn - pderiv ?bn; an = ?Gcd ?bn dn\n        in yun_gcd.yun_factorization_main ?Gcd (?bn div an) (dn div an)\n            (Suc ?i) ((an, ?i) # ?sqr))\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "note rel = yun_relD"], ["proof (state)\nthis:\n  yun_rel ?F ?c ?f \\<Longrightarrow> yun_wrel ?F ?c ?f\n  yun_rel ?F ?c ?f \\<Longrightarrow> of_int_poly ?F = Polynomial.smult ?c ?f\n  yun_rel ?F ?c ?f \\<Longrightarrow> degree ?F = degree ?f\n  yun_rel ?F ?c ?f \\<Longrightarrow> ?F \\<noteq> 0\n  yun_rel ?F ?c ?f \\<Longrightarrow> 0 < lead_coeff ?F\n  yun_rel ?F ?c ?f \\<Longrightarrow> monic ?f\n  yun_rel ?F ?c ?f \\<Longrightarrow> (?f = 1) = (?F = 1)\n  yun_rel ?F ?c ?f \\<Longrightarrow> content ?F = 1\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "let ?rel = \"\\<lambda> F f. map_poly rat_of_int F = smult (rat_of_int (lead_coeff F)) f\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "proof (induct rule: yun_factorization_induct[of ?P, rule_format, OF _ _ assms])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn = 1; yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res\n 2. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "case (1 f g i hs res F G Hs Res c)"], ["proof (state)\nthis:\n  f = 1\n  yun_gcd.yun_factorization_main gcd f g i hs = res\n  yun_gcd.yun_factorization_main gcd F G i Hs = Res\n  yun_rel F c f\n  yun_wrel G c g\n  list_all2 (rel_prod yun_erel (=)) Hs hs\n\ngoal (2 subgoals):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn = 1; yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res\n 2. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "from rel[OF 1(4)] 1(1)"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n  f = 1", "have \"f = 1\" \"F = 1\""], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n  f = 1\n\ngoal (1 subgoal):\n 1. f = 1 &&& F = 1", "by auto"], ["proof (state)\nthis:\n  f = 1\n  F = 1\n\ngoal (2 subgoals):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn = 1; yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res\n 2. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "from 1(2-3)[unfolded simps[of _ 1] this]"], ["proof (chain)\npicking this:\n  (if 1 = 1 then hs\n   else let dn = g - pderiv 1; an = gcd 1 dn\n        in yun_gcd.yun_factorization_main gcd (1 div an) (dn div an) (Suc i)\n            ((an, i) # hs)) =\n  res\n  (if 1 = 1 then Hs\n   else let dn = G - pderiv 1; an = gcd 1 dn\n        in yun_gcd.yun_factorization_main gcd (1 div an) (dn div an) (Suc i)\n            ((an, i) # Hs)) =\n  Res", "have \"res = hs\" \"Res = Hs\""], ["proof (prove)\nusing this:\n  (if 1 = 1 then hs\n   else let dn = g - pderiv 1; an = gcd 1 dn\n        in yun_gcd.yun_factorization_main gcd (1 div an) (dn div an) (Suc i)\n            ((an, i) # hs)) =\n  res\n  (if 1 = 1 then Hs\n   else let dn = G - pderiv 1; an = gcd 1 dn\n        in yun_gcd.yun_factorization_main gcd (1 div an) (dn div an) (Suc i)\n            ((an, i) # Hs)) =\n  Res\n\ngoal (1 subgoal):\n 1. res = hs &&& Res = Hs", "by auto"], ["proof (state)\nthis:\n  res = hs\n  Res = Hs\n\ngoal (2 subgoals):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn = 1; yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res\n 2. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "with 1(6)"], ["proof (chain)\npicking this:\n  list_all2 (rel_prod yun_erel (=)) Hs hs\n  res = hs\n  Res = Hs", "show ?case"], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) Hs hs\n  res = hs\n  Res = Hs\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "by simp"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) Res res\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "case (2 f g i hs res F G Hs Res c)"], ["proof (state)\nthis:\n  f \\<noteq> 1\n  \\<lbrakk>yun_gcd.yun_factorization_main gcd (f div gcd f (g - pderiv f))\n            ((g - pderiv f) div gcd f (g - pderiv f)) ?i ?hs =\n           ?res;\n   yun_gcd.yun_factorization_main gcd ?F ?G ?i ?Hs = ?Res;\n   yun_rel ?F ?c (f div gcd f (g - pderiv f));\n   yun_wrel ?G ?c ((g - pderiv f) div gcd f (g - pderiv f));\n   list_all2 (rel_prod yun_erel (=)) ?Hs ?hs\\<rbrakk>\n  \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) ?Res ?res\n  yun_gcd.yun_factorization_main gcd f g i hs = res\n  yun_gcd.yun_factorization_main gcd F G i Hs = Res\n  yun_rel F c f\n  yun_wrel G c g\n  list_all2 (rel_prod yun_erel (=)) Hs hs\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "define d where \"d = g - pderiv f\""], ["proof (state)\nthis:\n  d = g - pderiv f\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "define a where \"a = gcd f d\""], ["proof (state)\nthis:\n  a = gcd f d\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "define D where \"D = G - pderiv F\""], ["proof (state)\nthis:\n  D = G - pderiv F\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "define A where \"A = gcd F D\""], ["proof (state)\nthis:\n  A = gcd F D\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note f = 2(5)"], ["proof (state)\nthis:\n  yun_rel F c f\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note g = 2(6)"], ["proof (state)\nthis:\n  yun_wrel G c g\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note hs = 2(7)"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) Hs hs\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note f1 = 2(1)"], ["proof (state)\nthis:\n  f \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "from f1 rel[OF f]"], ["proof (chain)\npicking this:\n  f \\<noteq> 1\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1", "have *: \"(f = 1) = False\" \"(F = 1) = False\" and c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 1\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. ((f = 1) = False &&& (F = 1) = False) &&& c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  (f = 1) = False\n  (F = 1) = False\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note res = 2(3)[unfolded simps[of _ f] * if_False Let_def, folded d_def a_def]"], ["proof (state)\nthis:\n  yun_gcd.yun_factorization_main gcd (f div a) (d div a) (Suc i)\n   ((a, i) # hs) =\n  res\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note Res = 2(4)[unfolded simps[of _ F] * if_False Let_def, folded D_def A_def]"], ["proof (state)\nthis:\n  yun_gcd.yun_factorization_main gcd (F div A) (D div A) (Suc i)\n   ((A, i) # Hs) =\n  Res\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "note IH = 2(2)[folded d_def a_def, OF res Res]"], ["proof (state)\nthis:\n  \\<lbrakk>yun_rel (F div A) ?c (f div a); yun_wrel (D div A) ?c (d div a);\n   list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)\\<rbrakk>\n  \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "obtain c' where c': \"c' = rat_of_int (lead_coeff (gcd F D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        c' = rat_of_int (lead_coeff (gcd F D)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c' = rat_of_int (lead_coeff (gcd F D))\n\ngoal (1 subgoal):\n 1. \\<And>bn cn i hs res F G Hs Res c.\n       \\<lbrakk>bn \\<noteq> 1;\n        \\<And>i hs res F G Hs Res c.\n           \\<lbrakk>yun_gcd.yun_factorization_main gcd\n                     (bn div gcd bn (cn - pderiv bn))\n                     ((cn - pderiv bn) div gcd bn (cn - pderiv bn)) i hs =\n                    res;\n            yun_gcd.yun_factorization_main gcd F G i Hs = Res;\n            yun_rel F c (bn div gcd bn (cn - pderiv bn));\n            yun_wrel G c ((cn - pderiv bn) div gcd bn (cn - pderiv bn));\n            list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n           \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res;\n        yun_gcd.yun_factorization_main gcd bn cn i hs = res;\n        yun_gcd.yun_factorization_main gcd F G i Hs = Res; yun_rel F c bn;\n        yun_wrel G c cn; list_all2 (rel_prod yun_erel (=)) Hs hs\\<rbrakk>\n       \\<Longrightarrow> list_all2 (rel_prod yun_erel (=)) Res res", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "proof (rule IH)"], ["proof (state)\ngoal (3 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)\n 3. list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)", "from yun_wrel_minus[OF g yun_wrel_pderiv[OF rel(1)[OF f]]]"], ["proof (chain)\npicking this:\n  yun_wrel (G - pderiv F) c (g - pderiv f)", "have d: \"yun_wrel D c d\""], ["proof (prove)\nusing this:\n  yun_wrel (G - pderiv F) c (g - pderiv f)\n\ngoal (1 subgoal):\n 1. yun_wrel D c d", "unfolding D_def d_def"], ["proof (prove)\nusing this:\n  yun_wrel (G - pderiv F) c (g - pderiv f)\n\ngoal (1 subgoal):\n 1. yun_wrel (G - pderiv F) c (g - pderiv f)", "."], ["proof (state)\nthis:\n  yun_wrel D c d\n\ngoal (3 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)\n 3. list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)", "have a: \"yun_rel A c' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel A c' a", "unfolding A_def a_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel (gcd F D) c' (gcd f d)", "by (rule yun_rel_gcd[OF f d c c'])"], ["proof (state)\nthis:\n  yun_rel A c' a\n\ngoal (3 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)\n 3. list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)", "hence \"yun_erel A a\""], ["proof (prove)\nusing this:\n  yun_rel A c' a\n\ngoal (1 subgoal):\n 1. yun_erel A a", "unfolding yun_erel_def"], ["proof (prove)\nusing this:\n  yun_rel A c' a\n\ngoal (1 subgoal):\n 1. \\<exists>c. yun_rel A c a", "by auto"], ["proof (state)\nthis:\n  yun_erel A a\n\ngoal (3 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)\n 3. list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)", "thus \"list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)\""], ["proof (prove)\nusing this:\n  yun_erel A a\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)", "using hs"], ["proof (prove)\nusing this:\n  yun_erel A a\n  list_all2 (rel_prod yun_erel (=)) Hs hs\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)", "by auto"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) ((A, i) # Hs) ((a, i) # hs)\n\ngoal (2 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)", "have A0: \"A \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> 0", "by (rule rel(4)[OF a])"], ["proof (state)\nthis:\n  A \\<noteq> 0\n\ngoal (2 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)", "have \"A dvd D\" \"a dvd d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A dvd D &&& a dvd d", "unfolding A_def a_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd F D dvd D &&& gcd f d dvd d", "by auto"], ["proof (state)\nthis:\n  A dvd D\n  a dvd d\n\ngoal (2 subgoals):\n 1. yun_rel (F div A) ?c (f div a)\n 2. yun_wrel (D div A) ?c (d div a)", "from yun_wrel_div[OF d rel(1)[OF a] this A0]"], ["proof (chain)\npicking this:\n  yun_wrel (D div A) (c / c') (d div a)", "show \"yun_wrel (D div A) (c / c') (d div a)\""], ["proof (prove)\nusing this:\n  yun_wrel (D div A) (c / c') (d div a)\n\ngoal (1 subgoal):\n 1. yun_wrel (D div A) (c / c') (d div a)", "."], ["proof (state)\nthis:\n  yun_wrel (D div A) (c / c') (d div a)\n\ngoal (1 subgoal):\n 1. yun_rel (F div A) (c / c') (f div a)", "have \"A dvd F\" \"a dvd f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A dvd F &&& a dvd f", "unfolding A_def a_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd F D dvd F &&& gcd f d dvd f", "by auto"], ["proof (state)\nthis:\n  A dvd F\n  a dvd f\n\ngoal (1 subgoal):\n 1. yun_rel (F div A) (c / c') (f div a)", "from yun_rel_div[OF f a this]"], ["proof (chain)\npicking this:\n  yun_rel (F div A) (c / c') (f div a)", "show \"yun_rel (F div A) (c / c') (f div a)\""], ["proof (prove)\nusing this:\n  yun_rel (F div A) (c / c') (f div a)\n\ngoal (1 subgoal):\n 1. yun_rel (F div A) (c / c') (f div a)", "."], ["proof (state)\nthis:\n  yun_rel (F div A) (c / c') (f div a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) Res res\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) Res res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_monic_factorization_int_yun_rel: assumes  \n    res: \"yun_gcd.yun_monic_factorization gcd f = res\"\n    and Res: \"yun_gcd.yun_monic_factorization gcd F = Res\" \n    and f: \"yun_rel F c f\" \n  shows \"list_all2 (rel_prod yun_erel (=)) Res res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "note ff = yun_relD[OF f]"], ["proof (state)\nthis:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "let ?g = \"gcd f (pderiv f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "let ?yf = \"yun_gcd.yun_factorization_main gcd (f div ?g) (pderiv f div ?g) 0 []\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "let ?G = \"gcd F (pderiv F)\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "let ?yF = \"yun_gcd.yun_factorization_main gcd (F div ?G) (pderiv F div ?G) 0 []\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "obtain r R where r: \"?yf = r\" and R: \"?yF = R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r R.\n        \\<lbrakk>yun_gcd.yun_factorization_main gcd (f div gcd f (pderiv f))\n                  (pderiv f div gcd f (pderiv f)) 0 [] =\n                 r;\n         yun_gcd.yun_factorization_main gcd (F div gcd F (pderiv F))\n          (pderiv F div gcd F (pderiv F)) 0 [] =\n         R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  yun_gcd.yun_factorization_main gcd (f div gcd f (pderiv f))\n   (pderiv f div gcd f (pderiv f)) 0 [] =\n  r\n  yun_gcd.yun_factorization_main gcd (F div gcd F (pderiv F))\n   (pderiv F div gcd F (pderiv F)) 0 [] =\n  R\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from res[unfolded yun_gcd.yun_monic_factorization_def Let_def r]"], ["proof (chain)\npicking this:\n  filter (\\<lambda>(a, i). a \\<noteq> 1) r = res", "have res: \"res = [(a, i)\\<leftarrow>r . a \\<noteq> 1]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>(a, i). a \\<noteq> 1) r = res\n\ngoal (1 subgoal):\n 1. res = filter (\\<lambda>(a, i). a \\<noteq> 1) r", "by simp"], ["proof (state)\nthis:\n  res = filter (\\<lambda>(a, i). a \\<noteq> 1) r\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from Res[unfolded yun_gcd.yun_monic_factorization_def Let_def R]"], ["proof (chain)\npicking this:\n  filter (\\<lambda>(a, i). a \\<noteq> 1) R = Res", "have Res: \"Res = [(A, i)\\<leftarrow>R . A \\<noteq> 1]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>(a, i). a \\<noteq> 1) R = Res\n\ngoal (1 subgoal):\n 1. Res = filter (\\<lambda>(A, i). A \\<noteq> 1) R", "by simp"], ["proof (state)\nthis:\n  Res = filter (\\<lambda>(A, i). A \\<noteq> 1) R\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from yun_wrel_pderiv[OF ff(1)]"], ["proof (chain)\npicking this:\n  yun_wrel (pderiv F) c (pderiv f)", "have f': \"yun_wrel (pderiv F) c (pderiv f)\""], ["proof (prove)\nusing this:\n  yun_wrel (pderiv F) c (pderiv f)\n\ngoal (1 subgoal):\n 1. yun_wrel (pderiv F) c (pderiv f)", "."], ["proof (state)\nthis:\n  yun_wrel (pderiv F) c (pderiv f)\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from ff"], ["proof (chain)\npicking this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1", "have c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel F c f\n  of_int_poly F = Polynomial.smult c f\n  degree F = degree f\n  F \\<noteq> 0\n  0 < lead_coeff F\n  monic f\n  (f = 1) = (F = 1)\n  content F = 1\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from yun_rel_gcd[OF f f' c refl]"], ["proof (chain)\npicking this:\n  yun_rel (gcd F (pderiv F)) (rat_of_int (lead_coeff (gcd F (pderiv F))))\n   (gcd f (pderiv f))", "obtain d where g: \"yun_rel ?G d ?g\""], ["proof (prove)\nusing this:\n  yun_rel (gcd F (pderiv F)) (rat_of_int (lead_coeff (gcd F (pderiv F))))\n   (gcd f (pderiv f))\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        yun_rel (gcd F (pderiv F)) d (gcd f (pderiv f)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  yun_rel (gcd F (pderiv F)) d (gcd f (pderiv f))\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from yun_rel_div[OF f g]"], ["proof (chain)\npicking this:\n  \\<lbrakk>gcd F (pderiv F) dvd F; gcd f (pderiv f) dvd f\\<rbrakk>\n  \\<Longrightarrow> yun_rel (F div gcd F (pderiv F)) (c / d)\n                     (f div gcd f (pderiv f))", "have 1: \"yun_rel (F div ?G) (c / d) (f div ?g)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>gcd F (pderiv F) dvd F; gcd f (pderiv f) dvd f\\<rbrakk>\n  \\<Longrightarrow> yun_rel (F div gcd F (pderiv F)) (c / d)\n                     (f div gcd f (pderiv f))\n\ngoal (1 subgoal):\n 1. yun_rel (F div gcd F (pderiv F)) (c / d) (f div gcd f (pderiv f))", "by auto"], ["proof (state)\nthis:\n  yun_rel (F div gcd F (pderiv F)) (c / d) (f div gcd f (pderiv f))\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from yun_wrel_div[OF f' yun_relD(1)[OF g] _ _ yun_relD(4)[OF g]]"], ["proof (chain)\npicking this:\n  \\<lbrakk>gcd F (pderiv F) dvd pderiv F;\n   gcd f (pderiv f) dvd pderiv f\\<rbrakk>\n  \\<Longrightarrow> yun_wrel (pderiv F div gcd F (pderiv F)) (c / d)\n                     (pderiv f div gcd f (pderiv f))", "have 2: \"yun_wrel (pderiv F div ?G) (c / d) (pderiv f div ?g)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>gcd F (pderiv F) dvd pderiv F;\n   gcd f (pderiv f) dvd pderiv f\\<rbrakk>\n  \\<Longrightarrow> yun_wrel (pderiv F div gcd F (pderiv F)) (c / d)\n                     (pderiv f div gcd f (pderiv f))\n\ngoal (1 subgoal):\n 1. yun_wrel (pderiv F div gcd F (pderiv F)) (c / d)\n     (pderiv f div gcd f (pderiv f))", "by auto"], ["proof (state)\nthis:\n  yun_wrel (pderiv F div gcd F (pderiv F)) (c / d)\n   (pderiv f div gcd f (pderiv f))\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "from yun_factorization_main_int[OF refl refl ff(6) r R 1 2]"], ["proof (chain)\npicking this:\n  list_all2 (rel_prod yun_erel (=)) [] [] \\<Longrightarrow>\n  list_all2 (rel_prod yun_erel (=)) R r", "have \"list_all2 (rel_prod yun_erel (=)) R r\""], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) [] [] \\<Longrightarrow>\n  list_all2 (rel_prod yun_erel (=)) R r\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) R r", "by simp"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) R r\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "thus ?thesis"], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) R r\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) Res res", "unfolding res Res"], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) R r\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=))\n     (filter (\\<lambda>(A, i). A \\<noteq> 1) R)\n     (filter (\\<lambda>(a, i). a \\<noteq> 1) r)", "by (induct R r rule: list_all2_induct, auto dest: yun_erel_1_eq)"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) Res res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma yun_rel_same_right: assumes \"yun_rel f c G\" \"yun_rel g d G\" \n  shows \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = g", "note f = yun_relD[OF assms(1)]"], ["proof (state)\nthis:\n  yun_wrel f c G\n  of_int_poly f = Polynomial.smult c G\n  degree f = degree G\n  f \\<noteq> 0\n  0 < lead_coeff f\n  monic G\n  (G = 1) = (f = 1)\n  content f = 1\n\ngoal (1 subgoal):\n 1. f = g", "note g = yun_relD[OF assms(2)]"], ["proof (state)\nthis:\n  yun_wrel g d G\n  of_int_poly g = Polynomial.smult d G\n  degree g = degree G\n  g \\<noteq> 0\n  0 < lead_coeff g\n  monic G\n  (G = 1) = (g = 1)\n  content g = 1\n\ngoal (1 subgoal):\n 1. f = g", "let ?r = \"rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. f = g", "let ?rp = \"map_poly ?r\""], ["proof (state)\ngoal (1 subgoal):\n 1. f = g", "from g"], ["proof (chain)\npicking this:\n  yun_wrel g d G\n  of_int_poly g = Polynomial.smult d G\n  degree g = degree G\n  g \\<noteq> 0\n  0 < lead_coeff g\n  monic G\n  (G = 1) = (g = 1)\n  content g = 1", "have d: \"d \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel g d G\n  of_int_poly g = Polynomial.smult d G\n  degree g = degree G\n  g \\<noteq> 0\n  0 < lead_coeff g\n  monic G\n  (G = 1) = (g = 1)\n  content g = 1\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = g", "obtain a b where quot: \"quotient_of (c / d) = (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        quotient_of (c / d) = (a, b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  quotient_of (c / d) = (a, b)\n\ngoal (1 subgoal):\n 1. f = g", "from quotient_of_nonzero[of \"c/d\", unfolded quot]"], ["proof (chain)\npicking this:\n  0 < snd (a, b)\n  snd (a, b) \\<noteq> 0", "have b: \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < snd (a, b)\n  snd (a, b) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = g", "note f(2)"], ["proof (state)\nthis:\n  of_int_poly f = Polynomial.smult c G\n\ngoal (1 subgoal):\n 1. f = g", "also"], ["proof (state)\nthis:\n  of_int_poly f = Polynomial.smult c G\n\ngoal (1 subgoal):\n 1. f = g", "have \"smult c G = smult (c / d) (smult d G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult c G = Polynomial.smult (c / d) (Polynomial.smult d G)", "using d"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Polynomial.smult c G = Polynomial.smult (c / d) (Polynomial.smult d G)", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  Polynomial.smult c G = Polynomial.smult (c / d) (Polynomial.smult d G)\n\ngoal (1 subgoal):\n 1. f = g", "also"], ["proof (state)\nthis:\n  Polynomial.smult c G = Polynomial.smult (c / d) (Polynomial.smult d G)\n\ngoal (1 subgoal):\n 1. f = g", "have \"smult d G = ?rp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult d G = of_int_poly g", "using g(2)"], ["proof (prove)\nusing this:\n  of_int_poly g = Polynomial.smult d G\n\ngoal (1 subgoal):\n 1. Polynomial.smult d G = of_int_poly g", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult d G = of_int_poly g\n\ngoal (1 subgoal):\n 1. f = g", "also"], ["proof (state)\nthis:\n  Polynomial.smult d G = of_int_poly g\n\ngoal (1 subgoal):\n 1. f = g", "have cd: \"c / d = (?r a / ?r b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c / d = rat_of_int a / rat_of_int b", "using quotient_of_div[OF quot]"], ["proof (prove)\nusing this:\n  c / d = rat_of_int a / rat_of_int b\n\ngoal (1 subgoal):\n 1. c / d = rat_of_int a / rat_of_int b", "."], ["proof (state)\nthis:\n  c / d = rat_of_int a / rat_of_int b\n\ngoal (1 subgoal):\n 1. f = g", "finally"], ["proof (chain)\npicking this:\n  of_int_poly f =\n  Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g)", "have fg: \"?rp f = smult (?r a / ?r b) (?rp g)\""], ["proof (prove)\nusing this:\n  of_int_poly f =\n  Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g)\n\ngoal (1 subgoal):\n 1. of_int_poly f =\n    Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g)", "by simp"], ["proof (state)\nthis:\n  of_int_poly f =\n  Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g)\n\ngoal (1 subgoal):\n 1. f = g", "from f"], ["proof (chain)\npicking this:\n  yun_wrel f c G\n  of_int_poly f = Polynomial.smult c G\n  degree f = degree G\n  f \\<noteq> 0\n  0 < lead_coeff f\n  monic G\n  (G = 1) = (f = 1)\n  content f = 1", "have \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel f c G\n  of_int_poly f = Polynomial.smult c G\n  degree f = degree G\n  f \\<noteq> 0\n  0 < lead_coeff f\n  monic G\n  (G = 1) = (f = 1)\n  content f = 1\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = g", "with cd d"], ["proof (chain)\npicking this:\n  c / d = rat_of_int a / rat_of_int b\n  d \\<noteq> 0\n  c \\<noteq> 0", "have a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c / d = rat_of_int a / rat_of_int b\n  d \\<noteq> 0\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = g", "from arg_cong[OF fg, of \"\\<lambda> x. smult (?r b) x\"]"], ["proof (chain)\npicking this:\n  Polynomial.smult (rat_of_int b) (of_int_poly f) =\n  Polynomial.smult (rat_of_int b)\n   (Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g))", "have \"smult (?r b) (?rp f) = smult (?r a) (?rp g)\""], ["proof (prove)\nusing this:\n  Polynomial.smult (rat_of_int b) (of_int_poly f) =\n  Polynomial.smult (rat_of_int b)\n   (Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g))\n\ngoal (1 subgoal):\n 1. Polynomial.smult (rat_of_int b) (of_int_poly f) =\n    Polynomial.smult (rat_of_int a) (of_int_poly g)", "using b"], ["proof (prove)\nusing this:\n  Polynomial.smult (rat_of_int b) (of_int_poly f) =\n  Polynomial.smult (rat_of_int b)\n   (Polynomial.smult (rat_of_int a / rat_of_int b) (of_int_poly g))\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Polynomial.smult (rat_of_int b) (of_int_poly f) =\n    Polynomial.smult (rat_of_int a) (of_int_poly g)", "by auto"], ["proof (state)\nthis:\n  Polynomial.smult (rat_of_int b) (of_int_poly f) =\n  Polynomial.smult (rat_of_int a) (of_int_poly g)\n\ngoal (1 subgoal):\n 1. f = g", "hence \"?rp (smult b f) = ?rp (smult a g)\""], ["proof (prove)\nusing this:\n  Polynomial.smult (rat_of_int b) (of_int_poly f) =\n  Polynomial.smult (rat_of_int a) (of_int_poly g)\n\ngoal (1 subgoal):\n 1. of_int_poly (Polynomial.smult b f) = of_int_poly (Polynomial.smult a g)", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly (Polynomial.smult b f) = of_int_poly (Polynomial.smult a g)\n\ngoal (1 subgoal):\n 1. f = g", "then"], ["proof (chain)\npicking this:\n  of_int_poly (Polynomial.smult b f) = of_int_poly (Polynomial.smult a g)", "have fg: \"[:b:] * f = [:a:] * g\""], ["proof (prove)\nusing this:\n  of_int_poly (Polynomial.smult b f) = of_int_poly (Polynomial.smult a g)\n\ngoal (1 subgoal):\n 1. [:b:] * f = [:a:] * g", "by auto"], ["proof (state)\nthis:\n  [:b:] * f = [:a:] * g\n\ngoal (1 subgoal):\n 1. f = g", "from arg_cong[OF this, of content, unfolded content_mult f(8) g(8)]"], ["proof (chain)\npicking this:\n  content [:b:] * 1 = content [:a:] * 1", "have \"content [: b :] = content [: a :]\""], ["proof (prove)\nusing this:\n  content [:b:] * 1 = content [:a:] * 1\n\ngoal (1 subgoal):\n 1. content [:b:] = content [:a:]", "by simp"], ["proof (state)\nthis:\n  content [:b:] = content [:a:]\n\ngoal (1 subgoal):\n 1. f = g", "hence abs: \"abs a = abs b\""], ["proof (prove)\nusing this:\n  content [:b:] = content [:a:]\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "unfolding content_def"], ["proof (prove)\nusing this:\n  gcd_list (coeffs [:b:]) = gcd_list (coeffs [:a:])\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "using b a"], ["proof (prove)\nusing this:\n  gcd_list (coeffs [:b:]) = gcd_list (coeffs [:a:])\n  b \\<noteq> 0\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "by auto"], ["proof (state)\nthis:\n  \\<bar>a\\<bar> = \\<bar>b\\<bar>\n\ngoal (1 subgoal):\n 1. f = g", "from arg_cong[OF fg, of \"\\<lambda> x. lead_coeff x > 0\", unfolded lead_coeff_mult] f(5) g(5) a b"], ["proof (chain)\npicking this:\n  (0 < lead_coeff [:b:] * lead_coeff f) =\n  (0 < lead_coeff [:a:] * lead_coeff g)\n  0 < lead_coeff f\n  0 < lead_coeff g\n  a \\<noteq> 0\n  b \\<noteq> 0", "have \"(a > 0) = (b > 0)\""], ["proof (prove)\nusing this:\n  (0 < lead_coeff [:b:] * lead_coeff f) =\n  (0 < lead_coeff [:a:] * lead_coeff g)\n  0 < lead_coeff f\n  0 < lead_coeff g\n  a \\<noteq> 0\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (0 < a) = (0 < b)", "by (simp add: zero_less_mult_iff)"], ["proof (state)\nthis:\n  (0 < a) = (0 < b)\n\ngoal (1 subgoal):\n 1. f = g", "with a b abs"], ["proof (chain)\npicking this:\n  a \\<noteq> 0\n  b \\<noteq> 0\n  \\<bar>a\\<bar> = \\<bar>b\\<bar>\n  (0 < a) = (0 < b)", "have \"a = b\""], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n  b \\<noteq> 0\n  \\<bar>a\\<bar> = \\<bar>b\\<bar>\n  (0 < a) = (0 < b)\n\ngoal (1 subgoal):\n 1. a = b", "by auto"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. f = g", "with arg_cong[OF fg, of \"\\<lambda> x. x div [:b:]\"] b"], ["proof (chain)\npicking this:\n  [:b:] * f div [:b:] = [:a:] * g div [:b:]\n  b \\<noteq> 0\n  a = b", "show ?thesis"], ["proof (prove)\nusing this:\n  [:b:] * f div [:b:] = [:a:] * g div [:b:]\n  b \\<noteq> 0\n  a = b\n\ngoal (1 subgoal):\n 1. f = g", "by (metis nonzero_mult_div_cancel_left pCons_eq_0_iff)"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "definition square_free_factorization_int_main :: \"int poly \\<Rightarrow> (int poly \\<times> nat) list\" where \n  \"square_free_factorization_int_main f = (case square_free_heuristic f of None \\<Rightarrow> \n    yun_gcd.yun_monic_factorization gcd f | Some p \\<Rightarrow> [(f,0)])\""], ["", "lemma square_free_factorization_int_main: assumes res: \"square_free_factorization_int_main f = fs\"\n  and ct: \"content f = 1\" and lc: \"lead_coeff f > 0\" \n  and deg: \"degree f \\<noteq> 0\" \nshows \"square_free_factorization f (1,fs) \\<and> (\\<forall> fi i. (fi, i) \\<in> set fs \\<longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0) \\<and>\n  distinct (map snd fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "proof (cases \"square_free_heuristic f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "case None"], ["proof (state)\nthis:\n  square_free_heuristic f = None\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from lc"], ["proof (chain)\npicking this:\n  0 < lead_coeff f", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < lead_coeff f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from res None"], ["proof (chain)\npicking this:\n  square_free_factorization_int_main f = fs\n  square_free_heuristic f = None", "have fs: \"yun_gcd.yun_monic_factorization gcd f = fs\""], ["proof (prove)\nusing this:\n  square_free_factorization_int_main f = fs\n  square_free_heuristic f = None\n\ngoal (1 subgoal):\n 1. yun_gcd.yun_monic_factorization gcd f = fs", "unfolding square_free_factorization_int_main_def"], ["proof (prove)\nusing this:\n  (case square_free_heuristic f of\n   None \\<Rightarrow> yun_gcd.yun_monic_factorization gcd f\n   | Some p \\<Rightarrow> [(f, 0)]) =\n  fs\n  square_free_heuristic f = None\n\ngoal (1 subgoal):\n 1. yun_gcd.yun_monic_factorization gcd f = fs", "by auto"], ["proof (state)\nthis:\n  yun_gcd.yun_monic_factorization gcd f = fs\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "let ?r = \"rat_of_int\""], ["proof (state)\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "let ?rp = \"map_poly ?r\""], ["proof (state)\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "define G where \"G = smult (inverse (lead_coeff (?rp f))) (?rp f)\""], ["proof (state)\nthis:\n  G =\n  Polynomial.smult (inverse (lead_coeff (of_int_poly f))) (of_int_poly f)\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "have \"?rp f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly f \\<noteq> 0", "using f0"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int_poly f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  of_int_poly f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "hence mon: \"monic G\""], ["proof (prove)\nusing this:\n  of_int_poly f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monic G", "unfolding G_def coeff_smult"], ["proof (prove)\nusing this:\n  of_int_poly f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. inverse (lead_coeff (of_int_poly f)) *\n    poly.coeff (of_int_poly f)\n     (degree\n       (Polynomial.smult (inverse (lead_coeff (of_int_poly f)))\n         (of_int_poly f))) =\n    1", "by simp"], ["proof (state)\nthis:\n  monic G\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "obtain Fs where Fs: \"yun_gcd.yun_monic_factorization gcd G = Fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Fs.\n        yun_gcd.yun_monic_factorization gcd G = Fs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  yun_gcd.yun_monic_factorization gcd G = Fs\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from lc"], ["proof (chain)\npicking this:\n  0 < lead_coeff f", "have lg: \"lead_coeff (?rp f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < lead_coeff f\n\ngoal (1 subgoal):\n 1. lead_coeff (of_int_poly f) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  lead_coeff (of_int_poly f) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "let ?c = \"lead_coeff (?rp f)\""], ["proof (state)\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "define c where \"c = ?c\""], ["proof (state)\nthis:\n  c = lead_coeff (of_int_poly f)\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "have rp: \"?rp f = smult c G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly f = Polynomial.smult c G", "unfolding G_def c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly f =\n    Polynomial.smult (lead_coeff (of_int_poly f))\n     (Polynomial.smult (inverse (lead_coeff (of_int_poly f)))\n       (of_int_poly f))", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  of_int_poly f = Polynomial.smult c G\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "have in_rel: \"yun_rel f c G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_rel f c G", "unfolding yun_rel_def yun_wrel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly f = Polynomial.smult c G \\<and>\n    content f = 1 \\<and> 0 < lead_coeff f \\<and> monic G", "using rp mon lc ct"], ["proof (prove)\nusing this:\n  of_int_poly f = Polynomial.smult c G\n  monic G\n  0 < lead_coeff f\n  content f = 1\n\ngoal (1 subgoal):\n 1. of_int_poly f = Polynomial.smult c G \\<and>\n    content f = 1 \\<and> 0 < lead_coeff f \\<and> monic G", "by auto"], ["proof (state)\nthis:\n  yun_rel f c G\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from yun_monic_factorization_int_yun_rel[OF Fs fs in_rel]"], ["proof (chain)\npicking this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs", "have out_rel: \"list_all2 (rel_prod yun_erel (=)) fs Fs\""], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n\ngoal (1 subgoal):\n 1. list_all2 (rel_prod yun_erel (=)) fs Fs", "by auto"], ["proof (state)\nthis:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from yun_monic_factorization[OF Fs mon]"], ["proof (chain)\npicking this:\n  square_free_factorization G (1, Fs)\n  (?b, ?i) \\<in> set Fs \\<Longrightarrow> monic ?b\n  distinct (map snd Fs)", "have \"square_free_factorization G (1, Fs)\" and dist: \"distinct (map snd Fs)\""], ["proof (prove)\nusing this:\n  square_free_factorization G (1, Fs)\n  (?b, ?i) \\<in> set Fs \\<Longrightarrow> monic ?b\n  distinct (map snd Fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization G (1, Fs) &&& distinct (map snd Fs)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization G (1, Fs)\n  distinct (map snd Fs)\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "note sff = square_free_factorizationD[OF this(1)]"], ["proof (state)\nthis:\n  G = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i)\n  (?a, ?i) \\<in> set Fs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set Fs; (?b, ?j) \\<in> set Fs;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  G = 0 \\<Longrightarrow> 1 = 0 \\<and> Fs = []\n  distinct Fs\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from out_rel"], ["proof (chain)\npicking this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs", "have \"map snd fs = map snd Fs\""], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n\ngoal (1 subgoal):\n 1. map snd fs = map snd Fs", "by (induct fs Fs rule: list_all2_induct, auto)"], ["proof (state)\nthis:\n  map snd fs = map snd Fs\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "with dist"], ["proof (chain)\npicking this:\n  distinct (map snd Fs)\n  map snd fs = map snd Fs", "have dist': \"distinct (map snd fs)\""], ["proof (prove)\nusing this:\n  distinct (map snd Fs)\n  map snd fs = map snd Fs\n\ngoal (1 subgoal):\n 1. distinct (map snd fs)", "by auto"], ["proof (state)\nthis:\n  distinct (map snd fs)\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "have main: \"square_free_factorization f (1, fs) \\<and> (\\<forall> fi i. (fi, i) \\<in> set fs \\<longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi)", "unfolding square_free_factorization_def split"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) \\<and>\n     (f = 0 \\<longrightarrow> 1 = 0 \\<and> fs = []) \\<and>\n     (\\<forall>a i.\n         (a, i) \\<in> set fs \\<longrightarrow>\n         square_free a \\<and> 0 < degree a) \\<and>\n     (\\<forall>a i b j.\n         (a, i) \\<in> set fs \\<longrightarrow>\n         (b, j) \\<in> set fs \\<longrightarrow>\n         (a, i) \\<noteq> (b, j) \\<longrightarrow>\n         algebraic_semidom_class.coprime a b) \\<and>\n     distinct fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (9 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. f = 0 \\<Longrightarrow> 1 = 0\n 3. f = 0 \\<Longrightarrow> fs = []\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 5. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 6. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 7. distinct fs\n 8. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 9. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from ct"], ["proof (chain)\npicking this:\n  content f = 1", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  content f = 1\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (9 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. f = 0 \\<Longrightarrow> 1 = 0\n 3. f = 0 \\<Longrightarrow> fs = []\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 5. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 6. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 7. distinct fs\n 8. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 9. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "thus \"f = 0 \\<Longrightarrow> 1 = 0\" \"f = 0 \\<Longrightarrow> fs = []\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (f = 0 \\<Longrightarrow> (1::'a) = (0::'a)) &&&\n    (f = 0 \\<Longrightarrow> fs = [])", "by auto"], ["proof (state)\nthis:\n  f = 0 \\<Longrightarrow> (1::?'a) = (0::?'a)\n  f = 0 \\<Longrightarrow> fs = []\n\ngoal (7 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. distinct fs\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 7. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from dist'"], ["proof (chain)\npicking this:\n  distinct (map snd fs)", "show \"distinct fs\""], ["proof (prove)\nusing this:\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. distinct fs", "by (simp add: distinct_map)"], ["proof (state)\nthis:\n  distinct fs\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "{"], ["proof (state)\nthis:\n  distinct fs\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "fix a i"], ["proof (state)\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "assume a: \"(a,i) \\<in> set fs\""], ["proof (state)\nthis:\n  (a, i) \\<in> set fs\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "with out_rel"], ["proof (chain)\npicking this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n  (a, i) \\<in> set fs", "obtain bj where \"bj \\<in> set Fs\" and \"rel_prod yun_erel (=) (a,i) bj\""], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n  (a, i) \\<in> set fs\n\ngoal (1 subgoal):\n 1. (\\<And>bj.\n        \\<lbrakk>bj \\<in> set Fs; rel_prod yun_erel (=) (a, i) bj\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding list_all2_conv_all_nth set_conv_nth"], ["proof (prove)\nusing this:\n  length fs = length Fs \\<and>\n  (\\<forall>i<length fs. rel_prod yun_erel (=) (fs ! i) (Fs ! i))\n  (a, i) \\<in> {fs ! i |i. i < length fs}\n\ngoal (1 subgoal):\n 1. (\\<And>bj.\n        \\<lbrakk>bj \\<in> {Fs ! i |i. i < length Fs};\n         rel_prod yun_erel (=) (a, i) bj\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  bj \\<in> set Fs\n  rel_prod yun_erel (=) (a, i) bj\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "then"], ["proof (chain)\npicking this:\n  bj \\<in> set Fs\n  rel_prod yun_erel (=) (a, i) bj", "obtain b where b: \"(b,i) \\<in> set Fs\" and ab: \"yun_erel a b\""], ["proof (prove)\nusing this:\n  bj \\<in> set Fs\n  rel_prod yun_erel (=) (a, i) bj\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>(b, i) \\<in> set Fs; yun_erel a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases bj, auto simp: rel_prod.simps)"], ["proof (state)\nthis:\n  (b, i) \\<in> set Fs\n  yun_erel a b\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from sff(2)[OF b]"], ["proof (chain)\npicking this:\n  square_free b \\<and> degree b \\<noteq> 0", "have b': \"square_free b\" \"degree b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  square_free b \\<and> degree b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free b &&& degree b \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  square_free b\n  degree b \\<noteq> 0\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from ab"], ["proof (chain)\npicking this:\n  yun_erel a b", "obtain c where rel: \"yun_rel a c b\""], ["proof (prove)\nusing this:\n  yun_erel a b\n\ngoal (1 subgoal):\n 1. (\\<And>c. yun_rel a c b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding yun_erel_def"], ["proof (prove)\nusing this:\n  \\<exists>c. yun_rel a c b\n\ngoal (1 subgoal):\n 1. (\\<And>c. yun_rel a c b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  yun_rel a c b\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "note aa = yun_relD[OF this]"], ["proof (state)\nthis:\n  yun_wrel a c b\n  of_int_poly a = Polynomial.smult c b\n  degree a = degree b\n  a \\<noteq> 0\n  0 < lead_coeff a\n  monic b\n  (b = 1) = (a = 1)\n  content a = 1\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from aa"], ["proof (chain)\npicking this:\n  yun_wrel a c b\n  of_int_poly a = Polynomial.smult c b\n  degree a = degree b\n  a \\<noteq> 0\n  0 < lead_coeff a\n  monic b\n  (b = 1) = (a = 1)\n  content a = 1", "have c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel a c b\n  of_int_poly a = Polynomial.smult c b\n  degree a = degree b\n  a \\<noteq> 0\n  0 < lead_coeff a\n  monic b\n  (b = 1) = (a = 1)\n  content a = 1\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (6 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 6. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from b' aa(3)"], ["proof (chain)\npicking this:\n  square_free b\n  degree b \\<noteq> 0\n  degree a = degree b", "show \"degree a > 0\""], ["proof (prove)\nusing this:\n  square_free b\n  degree b \\<noteq> 0\n  degree a = degree b\n\ngoal (1 subgoal):\n 1. 0 < degree a", "by simp"], ["proof (state)\nthis:\n  0 < degree a\n\ngoal (5 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 5. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "from square_free_smult[OF c0 b'(1), folded aa(2)]"], ["proof (chain)\npicking this:\n  square_free (of_int_poly a)", "show \"square_free a\""], ["proof (prove)\nusing this:\n  square_free (of_int_poly a)\n\ngoal (1 subgoal):\n 1. square_free a", "unfolding square_free_def"], ["proof (prove)\nusing this:\n  of_int_poly a \\<noteq> 0 \\<and>\n  (\\<forall>q.\n      0 < degree q \\<longrightarrow> \\<not> q * q dvd of_int_poly a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<and>\n    (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd a)", "by (force simp: dvd_def hom_distribs)"], ["proof (state)\nthis:\n  square_free a\n\ngoal (4 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 4. \\<And>fi i. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi", "show cnt: \"content a = 1\" and lc: \"lead_coeff a > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content a = 1 &&& 0 < lead_coeff a", "using aa"], ["proof (prove)\nusing this:\n  yun_wrel a c b\n  of_int_poly a = Polynomial.smult c b\n  degree a = degree b\n  a \\<noteq> 0\n  0 < lead_coeff a\n  monic b\n  (b = 1) = (a = 1)\n  content a = 1\n\ngoal (1 subgoal):\n 1. content a = 1 &&& 0 < lead_coeff a", "by auto"], ["proof (state)\nthis:\n  content a = 1\n  0 < lead_coeff a\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "fix A I"], ["proof (state)\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "assume A: \"(A,I) \\<in> set fs\" and diff: \"(a,i) \\<noteq> (A,I)\""], ["proof (state)\nthis:\n  (A, I) \\<in> set fs\n  (a, i) \\<noteq> (A, I)\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from a[unfolded set_conv_nth]"], ["proof (chain)\npicking this:\n  (a, i) \\<in> {fs ! i |i. i < length fs}", "obtain k where k: \"fs ! k = (a,i)\" \"k < length fs\""], ["proof (prove)\nusing this:\n  (a, i) \\<in> {fs ! i |i. i < length fs}\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>fs ! k = (a, i); k < length fs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fs ! k = (a, i)\n  k < length fs\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from A[unfolded set_conv_nth]"], ["proof (chain)\npicking this:\n  (A, I) \\<in> {fs ! i |i. i < length fs}", "obtain K where K: \"fs ! K = (A,I)\" \"K < length fs\""], ["proof (prove)\nusing this:\n  (A, I) \\<in> {fs ! i |i. i < length fs}\n\ngoal (1 subgoal):\n 1. (\\<And>K.\n        \\<lbrakk>fs ! K = (A, I); K < length fs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fs ! K = (A, I)\n  K < length fs\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from diff k K"], ["proof (chain)\npicking this:\n  (a, i) \\<noteq> (A, I)\n  fs ! k = (a, i)\n  k < length fs\n  fs ! K = (A, I)\n  K < length fs", "have kK: \"k \\<noteq> K\""], ["proof (prove)\nusing this:\n  (a, i) \\<noteq> (A, I)\n  fs ! k = (a, i)\n  k < length fs\n  fs ! K = (A, I)\n  K < length fs\n\ngoal (1 subgoal):\n 1. k \\<noteq> K", "by auto"], ["proof (state)\nthis:\n  k \\<noteq> K\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from dist'[unfolded distinct_conv_nth length_map, rule_format, OF k(2) K(2) kK]"], ["proof (chain)\npicking this:\n  map snd fs ! k \\<noteq> map snd fs ! K", "have iI: \"i \\<noteq> I\""], ["proof (prove)\nusing this:\n  map snd fs ! k \\<noteq> map snd fs ! K\n\ngoal (1 subgoal):\n 1. i \\<noteq> I", "using k K"], ["proof (prove)\nusing this:\n  map snd fs ! k \\<noteq> map snd fs ! K\n  fs ! k = (a, i)\n  k < length fs\n  fs ! K = (A, I)\n  K < length fs\n\ngoal (1 subgoal):\n 1. i \\<noteq> I", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> I\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from A out_rel"], ["proof (chain)\npicking this:\n  (A, I) \\<in> set fs\n  list_all2 (rel_prod yun_erel (=)) fs Fs", "obtain Bj where \"Bj \\<in> set Fs\" and \"rel_prod yun_erel (=) (A,I) Bj\""], ["proof (prove)\nusing this:\n  (A, I) \\<in> set fs\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n\ngoal (1 subgoal):\n 1. (\\<And>Bj.\n        \\<lbrakk>Bj \\<in> set Fs; rel_prod yun_erel (=) (A, I) Bj\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding list_all2_conv_all_nth set_conv_nth"], ["proof (prove)\nusing this:\n  (A, I) \\<in> {fs ! i |i. i < length fs}\n  length fs = length Fs \\<and>\n  (\\<forall>i<length fs. rel_prod yun_erel (=) (fs ! i) (Fs ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>Bj.\n        \\<lbrakk>Bj \\<in> {Fs ! i |i. i < length Fs};\n         rel_prod yun_erel (=) (A, I) Bj\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Bj \\<in> set Fs\n  rel_prod yun_erel (=) (A, I) Bj\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "then"], ["proof (chain)\npicking this:\n  Bj \\<in> set Fs\n  rel_prod yun_erel (=) (A, I) Bj", "obtain B where B: \"(B,I) \\<in> set Fs\" and AB: \"yun_erel A B\""], ["proof (prove)\nusing this:\n  Bj \\<in> set Fs\n  rel_prod yun_erel (=) (A, I) Bj\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>(B, I) \\<in> set Fs; yun_erel A B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Bj, auto simp: rel_prod.simps)"], ["proof (state)\nthis:\n  (B, I) \\<in> set Fs\n  yun_erel A B\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "then"], ["proof (chain)\npicking this:\n  (B, I) \\<in> set Fs\n  yun_erel A B", "obtain C where Rel: \"yun_rel A C B\""], ["proof (prove)\nusing this:\n  (B, I) \\<in> set Fs\n  yun_erel A B\n\ngoal (1 subgoal):\n 1. (\\<And>C. yun_rel A C B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding yun_erel_def"], ["proof (prove)\nusing this:\n  (B, I) \\<in> set Fs\n  \\<exists>c. yun_rel A c B\n\ngoal (1 subgoal):\n 1. (\\<And>C. yun_rel A C B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  yun_rel A C B\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "note AA = yun_relD[OF this]"], ["proof (state)\nthis:\n  yun_wrel A C B\n  of_int_poly A = Polynomial.smult C B\n  degree A = degree B\n  A \\<noteq> 0\n  0 < lead_coeff A\n  monic B\n  (B = 1) = (A = 1)\n  content A = 1\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from iI"], ["proof (chain)\npicking this:\n  i \\<noteq> I", "have \"(b,i) \\<noteq> (B,I)\""], ["proof (prove)\nusing this:\n  i \\<noteq> I\n\ngoal (1 subgoal):\n 1. (b, i) \\<noteq> (B, I)", "by auto"], ["proof (state)\nthis:\n  (b, i) \\<noteq> (B, I)\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from sff(3)[OF b B this]"], ["proof (chain)\npicking this:\n  algebraic_semidom_class.coprime b B", "have cop: \"coprime b B\""], ["proof (prove)\nusing this:\n  algebraic_semidom_class.coprime b B\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime b B", "by simp"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime b B\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from AA"], ["proof (chain)\npicking this:\n  yun_wrel A C B\n  of_int_poly A = Polynomial.smult C B\n  degree A = degree B\n  A \\<noteq> 0\n  0 < lead_coeff A\n  monic B\n  (B = 1) = (A = 1)\n  content A = 1", "have C: \"C \\<noteq> 0\""], ["proof (prove)\nusing this:\n  yun_wrel A C B\n  of_int_poly A = Polynomial.smult C B\n  degree A = degree B\n  A \\<noteq> 0\n  0 < lead_coeff A\n  monic B\n  (B = 1) = (A = 1)\n  content A = 1\n\ngoal (1 subgoal):\n 1. C \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  C \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from yun_rel_gcd[OF rel AA(1) C refl]"], ["proof (chain)\npicking this:\n  yun_rel (gcd a A) (rat_of_int (lead_coeff (gcd a A))) (gcd b B)", "obtain c where \"yun_rel (gcd a A) c (gcd b B)\""], ["proof (prove)\nusing this:\n  yun_rel (gcd a A) (rat_of_int (lead_coeff (gcd a A))) (gcd b B)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        yun_rel (gcd a A) c (gcd b B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  yun_rel (gcd a A) c (gcd b B)\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "note rel = yun_relD[OF this]"], ["proof (state)\nthis:\n  yun_wrel (gcd a A) c (gcd b B)\n  of_int_poly (gcd a A) = Polynomial.smult c (gcd b B)\n  degree (gcd a A) = degree (gcd b B)\n  gcd a A \\<noteq> 0\n  0 < lead_coeff (gcd a A)\n  monic (gcd b B)\n  (gcd b B = 1) = (gcd a A = 1)\n  content (gcd a A) = 1\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from rel(2) cop"], ["proof (chain)\npicking this:\n  of_int_poly (gcd a A) = Polynomial.smult c (gcd b B)\n  comm_monoid_mult_class.coprime b B", "have \"?rp (gcd a A) = [: c :]\""], ["proof (prove)\nusing this:\n  of_int_poly (gcd a A) = Polynomial.smult c (gcd b B)\n  comm_monoid_mult_class.coprime b B\n\ngoal (1 subgoal):\n 1. of_int_poly (gcd a A) = [:c:]", "by simp"], ["proof (state)\nthis:\n  of_int_poly (gcd a A) = [:c:]\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from arg_cong[OF this, of degree]"], ["proof (chain)\npicking this:\n  degree (of_int_poly (gcd a A)) = degree [:c:]", "have \"degree (gcd a A) = 0\""], ["proof (prove)\nusing this:\n  degree (of_int_poly (gcd a A)) = degree [:c:]\n\ngoal (1 subgoal):\n 1. degree (gcd a A) = 0", "by simp"], ["proof (state)\nthis:\n  degree (gcd a A) = 0\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>aa. gcd a A = [:aa:]", "obtain c where gcd: \"gcd a A = [: c :]\""], ["proof (prove)\nusing this:\n  \\<exists>aa. gcd a A = [:aa:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. gcd a A = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gcd a A = [:c:]\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from rel(8) rel(5)"], ["proof (chain)\npicking this:\n  content (gcd a A) = 1\n  0 < lead_coeff (gcd a A)", "show \"Rings.coprime a A\""], ["proof (prove)\nusing this:\n  content (gcd a A) = 1\n  0 < lead_coeff (gcd a A)\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a A", "by (auto intro!: gcd_eq_1_imp_coprime simp add: gcd)"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a A\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?a3, ?i3) \\<in> set fs; (?A3, ?I3) \\<in> set fs;\n   (?a3, ?i3) \\<noteq> (?A3, ?I3)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a3 ?A3\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "let ?prod = \"\\<lambda> fs. (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "let ?pr = \"\\<lambda> fs. (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "define pr where \"pr = ?prod fs\""], ["proof (state)\nthis:\n  pr = (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "from \\<open>distinct fs\\<close>"], ["proof (chain)\npicking this:\n  distinct fs", "have pfs: \"?prod fs = ?pr fs\""], ["proof (prove)\nusing this:\n  distinct fs\n\ngoal (1 subgoal):\n 1. (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) =\n    (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)", "by (rule prod.distinct_set_conv_list)"], ["proof (state)\nthis:\n  (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) =\n  (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "from \\<open>distinct Fs\\<close>"], ["proof (chain)\npicking this:\n  distinct Fs", "have pFs: \"?prod Fs = ?pr Fs\""], ["proof (prove)\nusing this:\n  distinct Fs\n\ngoal (1 subgoal):\n 1. (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i) =\n    (\\<Prod>(a, i)\\<leftarrow>Fs. a ^ Suc i)", "by (rule prod.distinct_set_conv_list)"], ["proof (state)\nthis:\n  (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i) =\n  (\\<Prod>(a, i)\\<leftarrow>Fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "from out_rel"], ["proof (chain)\npicking this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs", "have \"yun_erel (?prod fs) (?prod Fs)\""], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n\ngoal (1 subgoal):\n 1. yun_erel (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n     (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i)", "unfolding pfs pFs"], ["proof (prove)\nusing this:\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n\ngoal (1 subgoal):\n 1. yun_erel (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\n     (\\<Prod>(a, i)\\<leftarrow>Fs. a ^ Suc i)", "proof (induct fs Fs rule: list_all2_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>rel_prod yun_erel (=) x y;\n        list_all2 (rel_prod yun_erel (=)) xs ys;\n        yun_erel\n         (\\<Prod>a\\<leftarrow>xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n         (\\<Prod>a\\<leftarrow>ys. case a of\n                                  (a, i) \\<Rightarrow> a ^ Suc i)\\<rbrakk>\n       \\<Longrightarrow> yun_erel\n                          (\\<Prod>a\\<leftarrow>x #\n         xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n                          (\\<Prod>a\\<leftarrow>y #\n         ys. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "case (Cons ai fs Ai Fs)"], ["proof (state)\nthis:\n  rel_prod yun_erel (=) ai Ai\n  list_all2 (rel_prod yun_erel (=)) fs Fs\n  yun_erel\n   (\\<Prod>a\\<leftarrow>fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n   (\\<Prod>a\\<leftarrow>Fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n\ngoal (2 subgoals):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>rel_prod yun_erel (=) x y;\n        list_all2 (rel_prod yun_erel (=)) xs ys;\n        yun_erel\n         (\\<Prod>a\\<leftarrow>xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n         (\\<Prod>a\\<leftarrow>ys. case a of\n                                  (a, i) \\<Rightarrow> a ^ Suc i)\\<rbrakk>\n       \\<Longrightarrow> yun_erel\n                          (\\<Prod>a\\<leftarrow>x #\n         xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n                          (\\<Prod>a\\<leftarrow>y #\n         ys. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "obtain a i where ai: \"ai = (a,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a i. ai = (a, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ai = (a, i)\n\ngoal (2 subgoals):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>rel_prod yun_erel (=) x y;\n        list_all2 (rel_prod yun_erel (=)) xs ys;\n        yun_erel\n         (\\<Prod>a\\<leftarrow>xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n         (\\<Prod>a\\<leftarrow>ys. case a of\n                                  (a, i) \\<Rightarrow> a ^ Suc i)\\<rbrakk>\n       \\<Longrightarrow> yun_erel\n                          (\\<Prod>a\\<leftarrow>x #\n         xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n                          (\\<Prod>a\\<leftarrow>y #\n         ys. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "from Cons(1) ai"], ["proof (chain)\npicking this:\n  rel_prod yun_erel (=) ai Ai\n  ai = (a, i)", "obtain A where Ai: \"Ai = (A,i)\" \n        and rel: \"yun_erel a A\""], ["proof (prove)\nusing this:\n  rel_prod yun_erel (=) ai Ai\n  ai = (a, i)\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>Ai = (A, i); yun_erel a A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases Ai, auto simp: rel_prod.simps)"], ["proof (state)\nthis:\n  Ai = (A, i)\n  yun_erel a A\n\ngoal (2 subgoals):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n 2. \\<And>x xs y ys.\n       \\<lbrakk>rel_prod yun_erel (=) x y;\n        list_all2 (rel_prod yun_erel (=)) xs ys;\n        yun_erel\n         (\\<Prod>a\\<leftarrow>xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n         (\\<Prod>a\\<leftarrow>ys. case a of\n                                  (a, i) \\<Rightarrow> a ^ Suc i)\\<rbrakk>\n       \\<Longrightarrow> yun_erel\n                          (\\<Prod>a\\<leftarrow>x #\n         xs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n                          (\\<Prod>a\\<leftarrow>y #\n         ys. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>ai # fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>Ai # Fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "unfolding ai Ai"], ["proof (prove)\ngoal (1 subgoal):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>(a, i) #\n                          fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>(A, i) #\n                          Fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "using yun_erel_mult[OF yun_erel_pow[OF rel, of \"Suc i\"] Cons(3)]"], ["proof (prove)\nusing this:\n  yun_erel\n   (a ^ Suc i *\n    (\\<Prod>a\\<leftarrow>fs. case a of (a, i) \\<Rightarrow> a ^ Suc i))\n   (A ^ Suc i *\n    (\\<Prod>a\\<leftarrow>Fs. case a of (a, i) \\<Rightarrow> a ^ Suc i))\n\ngoal (1 subgoal):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>(a, i) #\n                          fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>(A, i) #\n                          Fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "by auto"], ["proof (state)\nthis:\n  yun_erel\n   (\\<Prod>a\\<leftarrow>ai # fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n   (\\<Prod>a\\<leftarrow>Ai # Fs. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n\ngoal (1 subgoal):\n 1. yun_erel\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)\n     (\\<Prod>a\\<leftarrow>[]. case a of (a, i) \\<Rightarrow> a ^ Suc i)", "qed simp"], ["proof (state)\nthis:\n  yun_erel (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n   (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "also"], ["proof (state)\nthis:\n  yun_erel (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n   (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "have \"?prod Fs = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i) = G", "using sff(1)"], ["proof (prove)\nusing this:\n  G = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i) = G", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>(a, i)\\<in>set Fs. a ^ Suc i) = G\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "finally"], ["proof (chain)\npicking this:\n  yun_erel (\\<Prod>a\\<in>set fs. case a of (a, i) \\<Rightarrow> a ^ Suc i) G", "obtain d where rel: \"yun_rel pr d G\""], ["proof (prove)\nusing this:\n  yun_erel (\\<Prod>a\\<in>set fs. case a of (a, i) \\<Rightarrow> a ^ Suc i) G\n\ngoal (1 subgoal):\n 1. (\\<And>d. yun_rel pr d G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding yun_erel_def pr_def"], ["proof (prove)\nusing this:\n  \\<exists>c. yun_rel (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) c G\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        yun_rel (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) d G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  yun_rel pr d G\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "with in_rel"], ["proof (chain)\npicking this:\n  yun_rel f c G\n  yun_rel pr d G", "have \"f = pr\""], ["proof (prove)\nusing this:\n  yun_rel f c G\n  yun_rel pr d G\n\ngoal (1 subgoal):\n 1. f = pr", "by (rule yun_rel_same_right)"], ["proof (state)\nthis:\n  f = pr\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "thus \"f = smult 1 (?prod fs)\""], ["proof (prove)\nusing this:\n  f = pr\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "unfolding pr_def"], ["proof (prove)\nusing this:\n  f = (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "by simp"], ["proof (state)\nthis:\n  f = Polynomial.smult 1 (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi)\n\ngoal (2 subgoals):\n 1. square_free_heuristic f = None \\<Longrightarrow>\n    square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from main dist'"], ["proof (chain)\npicking this:\n  square_free_factorization f (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi)\n  distinct (map snd fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  square_free_factorization f (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi)\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "case (Some p)"], ["proof (state)\nthis:\n  square_free_heuristic f = Some p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from res[unfolded square_free_factorization_int_main_def Some]"], ["proof (chain)\npicking this:\n  (case Some p of None \\<Rightarrow> yun_gcd.yun_monic_factorization gcd f\n   | Some p \\<Rightarrow> [(f, 0)]) =\n  fs", "have fs: \"fs = [(f,0)]\""], ["proof (prove)\nusing this:\n  (case Some p of None \\<Rightarrow> yun_gcd.yun_monic_factorization gcd f\n   | Some p \\<Rightarrow> [(f, 0)]) =\n  fs\n\ngoal (1 subgoal):\n 1. fs = [(f, 0)]", "by auto"], ["proof (state)\nthis:\n  fs = [(f, 0)]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from lc"], ["proof (chain)\npicking this:\n  0 < lead_coeff f", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < lead_coeff f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       square_free_heuristic f = Some a \\<Longrightarrow>\n       square_free_factorization f (1, fs) \\<and>\n       (\\<forall>fi i.\n           (fi, i) \\<in> set fs \\<longrightarrow>\n           content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n       distinct (map snd fs)", "from square_free_heuristic[OF Some] poly_mod_prime.separable_impl(1)[of p f] square_free_mod_imp_square_free[of p f] deg"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p \\<and>\n  separable_impl p f \\<and> prime p\n  \\<lbrakk>poly_mod_prime p; separable_impl p f\\<rbrakk>\n  \\<Longrightarrow> poly_mod.square_free_m p f\n  \\<lbrakk>prime p; poly_mod.square_free_m p f;\n   comm_monoid_mult_class.coprime (lead_coeff f) p\\<rbrakk>\n  \\<Longrightarrow> square_free f\n  degree f \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p \\<and>\n  separable_impl p f \\<and> prime p\n  \\<lbrakk>poly_mod_prime p; separable_impl p f\\<rbrakk>\n  \\<Longrightarrow> poly_mod.square_free_m p f\n  \\<lbrakk>prime p; poly_mod.square_free_m p f;\n   comm_monoid_mult_class.coprime (lead_coeff f) p\\<rbrakk>\n  \\<Longrightarrow> square_free f\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (1, fs) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set fs \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "unfolding fs"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (lead_coeff f) p \\<and>\n  separable_impl p f \\<and> prime p\n  \\<lbrakk>poly_mod_prime p; separable_impl p f\\<rbrakk>\n  \\<Longrightarrow> poly_mod.square_free_m p f\n  \\<lbrakk>prime p; poly_mod.square_free_m p f;\n   comm_monoid_mult_class.coprime (lead_coeff f) p\\<rbrakk>\n  \\<Longrightarrow> square_free f\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (1, [(f, 0)]) \\<and>\n    (\\<forall>fi i.\n        (fi, i) \\<in> set [(f, 0)] \\<longrightarrow>\n        content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd [(f, 0)])", "by (auto simp: ct lc square_free_factorization_def f0 poly_mod_prime_def)"], ["proof (state)\nthis:\n  square_free_factorization f (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition square_free_factorization_int' :: \"int poly \\<Rightarrow> int \\<times> (int poly \\<times> nat)list\" where\n  \"square_free_factorization_int' f = (if degree f = 0\n    then (lead_coeff f,[]) else (let \\<comment> \\<open>content factorization\\<close>\n      c = content f;\n      d = (sgn (lead_coeff f) * c);\n      g = sdiv_poly f d\n      \\<comment> \\<open>and \\<open>square_free\\<close> factorization\\<close>\n    in (d, square_free_factorization_int_main g)))\""], ["", "lemma square_free_factorization_int': assumes res: \"square_free_factorization_int' f = (d, fs)\"\n  shows \"square_free_factorization f (d,fs)\" \n    \"(fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0\" \n    \"distinct (map snd fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) &&&\n    distinct (map snd fs)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    content fi = 1 \\<and> 0 < lead_coeff fi\n 3. distinct (map snd fs)", "note res = res[unfolded square_free_factorization_int'_def Let_def]"], ["proof (state)\nthis:\n  (if degree f = 0 then (lead_coeff f, [])\n   else (sgn (lead_coeff f) * content f,\n         square_free_factorization_int_main\n          (sdiv_poly f (sgn (lead_coeff f) * content f)))) =\n  (d, fs)\n\ngoal (3 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    content fi = 1 \\<and> 0 < lead_coeff fi\n 3. distinct (map snd fs)", "have \"square_free_factorization f (d,fs) \n    \\<and> ((fi, i) \\<in> set fs \\<longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0)\n    \\<and> distinct (map snd fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "proof (cases \"degree f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "case True"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "from degree0_coeffs[OF True]"], ["proof (chain)\npicking this:\n  \\<exists>a. f = [:a:]", "obtain c where f: \"f = [: c :]\""], ["proof (prove)\nusing this:\n  \\<exists>a. f = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. f = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  f = [:c:]\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = [:c:]\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "using res"], ["proof (prove)\nusing this:\n  f = [:c:]\n  (if degree f = 0 then (lead_coeff f, [])\n   else (sgn (lead_coeff f) * content f,\n         square_free_factorization_int_main\n          (sdiv_poly f (sgn (lead_coeff f) * content f)))) =\n  (d, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "by (simp add: square_free_factorization_def)"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow>\n   content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "case False"], ["proof (state)\nthis:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "let ?s = \"sgn (lead_coeff f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have s: \"?s \\<in> {-1,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sgn (lead_coeff f) \\<in> {- 1, 1}", "using False"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. sgn (lead_coeff f) \\<in> {- 1, 1}", "unfolding sgn_if"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if lead_coeff f = 0 then 0 else if 0 < lead_coeff f then 1 else - 1)\n    \\<in> {- 1, 1}", "by auto"], ["proof (state)\nthis:\n  sgn (lead_coeff f) \\<in> {- 1, 1}\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "define g where \"g = smult ?s f\""], ["proof (state)\nthis:\n  g = Polynomial.smult (sgn (lead_coeff f)) f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "let ?d = \"?s * content f\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have \"content g = content ([:?s:] * f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content g = content ([:sgn (lead_coeff f):] * f)", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. content (Polynomial.smult (sgn (lead_coeff f)) f) =\n    content ([:sgn (lead_coeff f):] * f)", "by simp"], ["proof (state)\nthis:\n  content g = content ([:sgn (lead_coeff f):] * f)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "also"], ["proof (state)\nthis:\n  content g = content ([:sgn (lead_coeff f):] * f)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have \"\\<dots> = content [:?s:] * content f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content ([:sgn (lead_coeff f):] * f) =\n    content [:sgn (lead_coeff f):] * content f", "unfolding content_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. content [:sgn (lead_coeff f):] * content f =\n    content [:sgn (lead_coeff f):] * content f", "by simp"], ["proof (state)\nthis:\n  content ([:sgn (lead_coeff f):] * f) =\n  content [:sgn (lead_coeff f):] * content f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "also"], ["proof (state)\nthis:\n  content ([:sgn (lead_coeff f):] * f) =\n  content [:sgn (lead_coeff f):] * content f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have \"content [:?s:] = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content [:sgn (lead_coeff f):] = 1", "using s"], ["proof (prove)\nusing this:\n  sgn (lead_coeff f) \\<in> {- 1, 1}\n\ngoal (1 subgoal):\n 1. content [:sgn (lead_coeff f):] = 1", "by (auto simp: content_def)"], ["proof (state)\nthis:\n  content [:sgn (lead_coeff f):] = 1\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "finally"], ["proof (chain)\npicking this:\n  content g = 1 * content f", "have cg: \"content g = content f\""], ["proof (prove)\nusing this:\n  content g = 1 * content f\n\ngoal (1 subgoal):\n 1. content g = content f", "by simp"], ["proof (state)\nthis:\n  content g = content f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "from False res"], ["proof (chain)\npicking this:\n  degree f \\<noteq> 0\n  (if degree f = 0 then (lead_coeff f, [])\n   else (sgn (lead_coeff f) * content f,\n         square_free_factorization_int_main\n          (sdiv_poly f (sgn (lead_coeff f) * content f)))) =\n  (d, fs)", "have d: \"d = ?d\" and fs: \"fs = square_free_factorization_int_main (sdiv_poly f ?d)\""], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  (if degree f = 0 then (lead_coeff f, [])\n   else (sgn (lead_coeff f) * content f,\n         square_free_factorization_int_main\n          (sdiv_poly f (sgn (lead_coeff f) * content f)))) =\n  (d, fs)\n\ngoal (1 subgoal):\n 1. d = sgn (lead_coeff f) * content f &&&\n    fs =\n    square_free_factorization_int_main\n     (sdiv_poly f (sgn (lead_coeff f) * content f))", "by auto"], ["proof (state)\nthis:\n  d = sgn (lead_coeff f) * content f\n  fs =\n  square_free_factorization_int_main\n   (sdiv_poly f (sgn (lead_coeff f) * content f))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "let ?g = \"primitive_part g\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "define ng where \"ng = primitive_part g\""], ["proof (state)\nthis:\n  ng = primitive_part g\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "note fs"], ["proof (state)\nthis:\n  fs =\n  square_free_factorization_int_main\n   (sdiv_poly f (sgn (lead_coeff f) * content f))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "also"], ["proof (state)\nthis:\n  fs =\n  square_free_factorization_int_main\n   (sdiv_poly f (sgn (lead_coeff f) * content f))\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have \"sdiv_poly f ?d = sdiv_poly g (content g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sdiv_poly f (sgn (lead_coeff f) * content f) = sdiv_poly g (content g)", "unfolding cg"], ["proof (prove)\ngoal (1 subgoal):\n 1. sdiv_poly f (sgn (lead_coeff f) * content f) = sdiv_poly g (content f)", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sdiv_poly f (sgn (lead_coeff f) * content f) =\n    sdiv_poly (Polynomial.smult (sgn (lead_coeff f)) f) (content f)", "by (rule poly_eqI, unfold coeff_sdiv_poly coeff_smult, insert s, auto simp: div_minus_right)"], ["proof (state)\nthis:\n  sdiv_poly f (sgn (lead_coeff f) * content f) = sdiv_poly g (content g)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "finally"], ["proof (chain)\npicking this:\n  fs = square_free_factorization_int_main (sdiv_poly g (content g))", "have fs: \"square_free_factorization_int_main ng = fs\""], ["proof (prove)\nusing this:\n  fs = square_free_factorization_int_main (sdiv_poly g (content g))\n\ngoal (1 subgoal):\n 1. square_free_factorization_int_main ng = fs", "unfolding primitive_part_alt_def ng_def"], ["proof (prove)\nusing this:\n  fs = square_free_factorization_int_main (sdiv_poly g (content g))\n\ngoal (1 subgoal):\n 1. square_free_factorization_int_main (sdiv_poly g (content g)) = fs", "by simp"], ["proof (state)\nthis:\n  square_free_factorization_int_main ng = fs\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have \"lead_coeff f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lead_coeff f \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lead_coeff f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  lead_coeff f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "hence lg: \"lead_coeff g > 0\""], ["proof (prove)\nusing this:\n  lead_coeff f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff g", "unfolding g_def lead_coeff_smult"], ["proof (prove)\nusing this:\n  lead_coeff f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < sgn (lead_coeff f) * lead_coeff f", "by (meson linorder_neqE_linordered_idom sgn_greater sgn_less zero_less_mult_iff)"], ["proof (state)\nthis:\n  0 < lead_coeff g\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "hence g0: \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < lead_coeff g\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "from g0"], ["proof (chain)\npicking this:\n  g \\<noteq> 0", "have \"content g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. content g \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  content g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "from arg_cong[OF content_times_primitive_part[of g], of lead_coeff, unfolded lead_coeff_smult]\n      lg content_ge_0_int[of g]"], ["proof (chain)\npicking this:\n  content g * lead_coeff (primitive_part g) = lead_coeff g\n  0 < lead_coeff g\n  0 \\<le> content g", "have lg': \"lead_coeff ng > 0\""], ["proof (prove)\nusing this:\n  content g * lead_coeff (primitive_part g) = lead_coeff g\n  0 < lead_coeff g\n  0 \\<le> content g\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff ng", "unfolding ng_def"], ["proof (prove)\nusing this:\n  content g * lead_coeff (primitive_part g) = lead_coeff g\n  0 < lead_coeff g\n  0 \\<le> content g\n\ngoal (1 subgoal):\n 1. 0 < lead_coeff (primitive_part g)", "by (metis \\<open>content g \\<noteq> 0\\<close> dual_order.antisym dual_order.strict_implies_order zero_less_mult_iff)"], ["proof (state)\nthis:\n  0 < lead_coeff ng\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "from content_primitive_part[OF g0]"], ["proof (chain)\npicking this:\n  content (primitive_part g) = 1", "have c_ng: \"content ng = 1\""], ["proof (prove)\nusing this:\n  content (primitive_part g) = 1\n\ngoal (1 subgoal):\n 1. content ng = 1", "unfolding ng_def"], ["proof (prove)\nusing this:\n  content (primitive_part g) = 1\n\ngoal (1 subgoal):\n 1. content (primitive_part g) = 1", "."], ["proof (state)\nthis:\n  content ng = 1\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "have \"degree ng = degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree ng = degree f", "using \\<open>content [:sgn (lead_coeff f):] = 1\\<close> g_def ng_def"], ["proof (prove)\nusing this:\n  content [:sgn (lead_coeff f):] = 1\n  g = Polynomial.smult (sgn (lead_coeff f)) f\n  ng = primitive_part g\n\ngoal (1 subgoal):\n 1. degree ng = degree f", "by (auto simp add: sgn_eq_0_iff)"], ["proof (state)\nthis:\n  degree ng = degree f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "with False"], ["proof (chain)\npicking this:\n  degree f \\<noteq> 0\n  degree ng = degree f", "have \"degree ng \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  degree ng = degree f\n\ngoal (1 subgoal):\n 1. degree ng \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree ng \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "note main = square_free_factorization_int_main[OF fs c_ng lg' this]"], ["proof (state)\nthis:\n  square_free_factorization ng (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n    distinct (map snd fs)", "proof (intro conjI impI)"], ["proof (state)\ngoal (4 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 3. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi\n 4. distinct (map snd fs)", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 3. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi\n 4. distinct (map snd fs)", "assume \"(fi, i) \\<in> set fs\""], ["proof (state)\nthis:\n  (fi, i) \\<in> set fs\n\ngoal (4 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n 3. (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi\n 4. distinct (map snd fs)", "with main"], ["proof (chain)\npicking this:\n  square_free_factorization ng (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n  (fi, i) \\<in> set fs", "show \"content fi = 1\" \"0 < lead_coeff fi\""], ["proof (prove)\nusing this:\n  square_free_factorization ng (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n  (fi, i) \\<in> set fs\n\ngoal (1 subgoal):\n 1. content fi = 1 &&& 0 < lead_coeff fi", "by auto"], ["proof (state)\nthis:\n  content fi = 1\n  0 < lead_coeff fi\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "}"], ["proof (state)\nthis:\n  (fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1\n  (fi, i) \\<in> set fs \\<Longrightarrow> 0 < lead_coeff fi\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "have d0: \"d \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "using \\<open>content [:?s:] = 1\\<close> d"], ["proof (prove)\nusing this:\n  content [:sgn (lead_coeff f):] = 1\n  d = sgn (lead_coeff f) * content f\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by (auto simp:sgn_eq_0_iff)"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "have \"smult d ng = smult ?s (smult (content g) (primitive_part g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult d ng =\n    Polynomial.smult (sgn (lead_coeff f))\n     (Polynomial.smult (content g) (primitive_part g))", "unfolding ng_def d cg"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (sgn (lead_coeff f) * content f) (primitive_part g) =\n    Polynomial.smult (sgn (lead_coeff f))\n     (Polynomial.smult (content f) (primitive_part g))", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult d ng =\n  Polynomial.smult (sgn (lead_coeff f))\n   (Polynomial.smult (content g) (primitive_part g))\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "also"], ["proof (state)\nthis:\n  Polynomial.smult d ng =\n  Polynomial.smult (sgn (lead_coeff f))\n   (Polynomial.smult (content g) (primitive_part g))\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "have \"smult (content g) (primitive_part g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (content g) (primitive_part g) = g", "using content_times_primitive_part"], ["proof (prove)\nusing this:\n  Polynomial.smult (content ?p) (primitive_part ?p) = ?p\n\ngoal (1 subgoal):\n 1. Polynomial.smult (content g) (primitive_part g) = g", "."], ["proof (state)\nthis:\n  Polynomial.smult (content g) (primitive_part g) = g\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "also"], ["proof (state)\nthis:\n  Polynomial.smult (content g) (primitive_part g) = g\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "have \"smult ?s g = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (sgn (lead_coeff f)) g = f", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (sgn (lead_coeff f))\n     (Polynomial.smult (sgn (lead_coeff f)) f) =\n    f", "using s"], ["proof (prove)\nusing this:\n  sgn (lead_coeff f) \\<in> {- 1, 1}\n\ngoal (1 subgoal):\n 1. Polynomial.smult (sgn (lead_coeff f))\n     (Polynomial.smult (sgn (lead_coeff f)) f) =\n    f", "by auto"], ["proof (state)\nthis:\n  Polynomial.smult (sgn (lead_coeff f)) g = f\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "finally"], ["proof (chain)\npicking this:\n  Polynomial.smult d ng = f", "have id: \"smult d ng = f\""], ["proof (prove)\nusing this:\n  Polynomial.smult d ng = f\n\ngoal (1 subgoal):\n 1. Polynomial.smult d ng = f", "."], ["proof (state)\nthis:\n  Polynomial.smult d ng = f\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "from main"], ["proof (chain)\npicking this:\n  square_free_factorization ng (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)", "have \"square_free_factorization ng (1, fs)\""], ["proof (prove)\nusing this:\n  square_free_factorization ng (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization ng (1, fs)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization ng (1, fs)\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. distinct (map snd fs)", "from square_free_factorization_smult[OF d0 this]"], ["proof (chain)\npicking this:\n  square_free_factorization (Polynomial.smult d ng) (d * 1, fs)", "show \"square_free_factorization f (d,fs)\""], ["proof (prove)\nusing this:\n  square_free_factorization (Polynomial.smult d ng) (d * 1, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "unfolding id"], ["proof (prove)\nusing this:\n  square_free_factorization f (d * 1, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "by simp"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs)\n\ngoal (1 subgoal):\n 1. distinct (map snd fs)", "show \"distinct (map snd fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map snd fs)", "using main"], ["proof (prove)\nusing this:\n  square_free_factorization ng (1, fs) \\<and>\n  (\\<forall>fi i.\n      (fi, i) \\<in> set fs \\<longrightarrow>\n      content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. distinct (map snd fs)", "by auto"], ["proof (state)\nthis:\n  distinct (map snd fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow>\n   content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow>\n   content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (3 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    content fi = 1 \\<and> 0 < lead_coeff fi\n 3. distinct (map snd fs)", "thus  \"square_free_factorization f (d,fs)\" \n    \"(fi, i) \\<in> set fs \\<Longrightarrow> content fi = 1 \\<and> lead_coeff fi > 0\" \"distinct (map snd fs)\""], ["proof (prove)\nusing this:\n  square_free_factorization f (d, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow>\n   content fi = 1 \\<and> 0 < lead_coeff fi) \\<and>\n  distinct (map snd fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow>\n     content fi = 1 \\<and> 0 < lead_coeff fi) &&&\n    distinct (map snd fs)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs)\n  (fi, i) \\<in> set fs \\<Longrightarrow>\n  content fi = 1 \\<and> 0 < lead_coeff fi\n  distinct (map snd fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition x_split :: \"'a :: semiring_0 poly \\<Rightarrow> nat \\<times> 'a poly\" where\n  \"x_split f = (let fs = coeffs f; zs = takeWhile ((=) 0) fs\n     in case zs of [] \\<Rightarrow> (0,f) | _ \\<Rightarrow> (length zs, poly_of_list (dropWhile ((=) 0) fs)))\""], ["", "lemma x_split: assumes \"x_split f = (n, g)\" \n  shows \"f = monom 1 n * g\" \"n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g &&&\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. f = Polynomial.monom (1::'a) n * g\n 2. n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n    \\<not> Polynomial.monom (1::'a) 1 dvd g", "define zs where \"zs = takeWhile ((=) 0) (coeffs f)\""], ["proof (state)\nthis:\n  zs = takeWhile ((=) (0::'a)) (coeffs f)\n\ngoal (2 subgoals):\n 1. f = Polynomial.monom (1::'a) n * g\n 2. n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n    \\<not> Polynomial.monom (1::'a) 1 dvd g", "note res = assms[unfolded zs_def[symmetric] x_split_def Let_def]"], ["proof (state)\nthis:\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n\ngoal (2 subgoals):\n 1. f = Polynomial.monom (1::'a) n * g\n 2. n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n    \\<not> Polynomial.monom (1::'a) 1 dvd g", "have \"f = monom 1 n * g \\<and> ((n \\<noteq> 0 \\<or> f \\<noteq> 0) \\<longrightarrow> \\<not> (monom 1 1 dvd g))\" (is \"_ \\<and> (_ \\<longrightarrow> \\<not> (?x dvd _))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "with res"], ["proof (chain)\npicking this:\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  f = 0", "have \"n = 0\" \"g = 0\""], ["proof (prove)\nusing this:\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  f = 0\n\ngoal (1 subgoal):\n 1. n = 0 &&& g = 0", "unfolding zs_def"], ["proof (prove)\nusing this:\n  (case takeWhile ((=) (0::'a)) (coeffs f) of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length (takeWhile ((=) (0::'a)) (coeffs f)),\n        poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  f = 0\n\ngoal (1 subgoal):\n 1. n = 0 &&& g = 0", "by auto"], ["proof (state)\nthis:\n  n = 0\n  g = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n  g = 0\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "using True"], ["proof (prove)\nusing this:\n  n = 0\n  g = 0\n  f = 0\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "by auto"], ["proof (state)\nthis:\n  f = Polynomial.monom (1::'a) n * g \\<and>\n  (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n   \\<not> Polynomial.monom (1::'a) 1 dvd g)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "note f = this"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "proof (cases \"zs = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "case True"], ["proof (state)\nthis:\n  zs = []\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "hence choice: \"coeff f 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  zs = []\n\ngoal (1 subgoal):\n 1. poly.coeff f 0 \\<noteq> (0::'a)", "using f"], ["proof (prove)\nusing this:\n  zs = []\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. poly.coeff f 0 \\<noteq> (0::'a)", "unfolding zs_def coeff_f_0_code poly_compare_0_code"], ["proof (prove)\nusing this:\n  takeWhile ((=) (0::'a)) (coeffs f) = []\n  \\<not> (case coeffs f of [] \\<Rightarrow> True\n          | a # list \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. (case coeffs f of [] \\<Rightarrow> 0::'a\n     | x # xa \\<Rightarrow> x) \\<noteq>\n    (0::'a)", "by (cases \"coeffs f\", auto)"], ["proof (state)\nthis:\n  poly.coeff f 0 \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "have dvd: \"?x dvd h \\<longleftrightarrow> coeff h 0 = 0\" for h"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Polynomial.monom (1::'a) 1 dvd h) = (poly.coeff h 0 = (0::'a))", "by (simp add: monom_1_dvd_iff')"], ["proof (state)\nthis:\n  (Polynomial.monom (1::'a) 1 dvd ?h) = (poly.coeff ?h 0 = (0::'a))\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)\n 2. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "from True choice res f"], ["proof (chain)\npicking this:\n  zs = []\n  poly.coeff f 0 \\<noteq> (0::'a)\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  f \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  zs = []\n  poly.coeff f 0 \\<noteq> (0::'a)\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "unfolding dvd"], ["proof (prove)\nusing this:\n  zs = []\n  poly.coeff f 0 \\<noteq> (0::'a)\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     poly.coeff g 0 \\<noteq> (0::'a))", "by auto"], ["proof (state)\nthis:\n  f = Polynomial.monom (1::'a) n * g \\<and>\n  (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n   \\<not> Polynomial.monom (1::'a) 1 dvd g)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "case False"], ["proof (state)\nthis:\n  zs \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "define ys where \"ys = dropWhile ((=) 0) (coeffs f)\""], ["proof (state)\nthis:\n  ys = dropWhile ((=) (0::'a)) (coeffs f)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "have dvd: \"?x dvd h \\<longleftrightarrow> coeff h 0 = 0\" for h"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Polynomial.monom (1::'a) 1 dvd h) = (poly.coeff h 0 = (0::'a))", "by (simp add: monom_1_dvd_iff')"], ["proof (state)\nthis:\n  (Polynomial.monom (1::'a) 1 dvd ?h) = (poly.coeff ?h 0 = (0::'a))\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "from res False"], ["proof (chain)\npicking this:\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  zs \\<noteq> []", "have n: \"n = length zs\" and g: \"g = poly_of_list ys\""], ["proof (prove)\nusing this:\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  zs \\<noteq> []\n\ngoal (1 subgoal):\n 1. n = length zs &&& g = poly_of_list ys", "unfolding ys_def"], ["proof (prove)\nusing this:\n  (case zs of [] \\<Rightarrow> (0, f)\n   | a # list \\<Rightarrow>\n       (length zs, poly_of_list (dropWhile ((=) (0::'a)) (coeffs f)))) =\n  (n, g)\n  zs \\<noteq> []\n\ngoal (1 subgoal):\n 1. n = length zs &&& g = poly_of_list (dropWhile ((=) (0::'a)) (coeffs f))", "by (cases zs, auto)+"], ["proof (state)\nthis:\n  n = length zs\n  g = poly_of_list ys\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "obtain xx where xx: \"coeffs f = xx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xx. coeffs f = xx \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  coeffs f = xx\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "have \"coeffs f = zs @ ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs f = zs @ ys", "unfolding zs_def ys_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs f =\n    takeWhile ((=) (0::'a)) (coeffs f) @ dropWhile ((=) (0::'a)) (coeffs f)", "by auto"], ["proof (state)\nthis:\n  coeffs f = zs @ ys\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "also"], ["proof (state)\nthis:\n  coeffs f = zs @ ys\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "have \"zs = replicate n 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zs = replicate n (0::'a)", "unfolding zs_def n xx"], ["proof (prove)\ngoal (1 subgoal):\n 1. takeWhile ((=) (0::'a)) xx =\n    replicate (length (takeWhile ((=) (0::'a)) xx)) (0::'a)", "by (induct xx, auto)"], ["proof (state)\nthis:\n  zs = replicate n (0::'a)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "finally"], ["proof (chain)\npicking this:\n  coeffs f = replicate n (0::'a) @ ys", "have ff: \"coeffs f = replicate n 0 @ ys\""], ["proof (prove)\nusing this:\n  coeffs f = replicate n (0::'a) @ ys\n\ngoal (1 subgoal):\n 1. coeffs f = replicate n (0::'a) @ ys", "by auto"], ["proof (state)\nthis:\n  coeffs f = replicate n (0::'a) @ ys\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "from f"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"lead_coeff f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lead_coeff f \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  lead_coeff f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "then"], ["proof (chain)\npicking this:\n  lead_coeff f \\<noteq> (0::'a)", "have nz: \"coeffs f \\<noteq> []\" \"last (coeffs f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lead_coeff f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeffs f \\<noteq> [] &&& last (coeffs f) \\<noteq> (0::'a)", "by (simp_all add: last_coeffs_eq_coeff_degree)"], ["proof (state)\nthis:\n  coeffs f \\<noteq> []\n  last (coeffs f) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "have ys: \"ys \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<noteq> []", "using nz[unfolded ff]"], ["proof (prove)\nusing this:\n  replicate n (0::'a) @ ys \\<noteq> []\n  last (replicate n (0::'a) @ ys) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. ys \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "with ys_def"], ["proof (chain)\npicking this:\n  ys = dropWhile ((=) (0::'a)) (coeffs f)\n  ys \\<noteq> []", "have hd: \"hd ys \\<noteq> 0\""], ["proof (prove)\nusing this:\n  ys = dropWhile ((=) (0::'a)) (coeffs f)\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd ys \\<noteq> (0::'a)", "by (metis (full_types) hd_dropWhile)"], ["proof (state)\nthis:\n  hd ys \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "hence \"coeff (poly_of_list ys) 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  hd ys \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a)", "unfolding poly_of_list_def coeff_Poly"], ["proof (prove)\nusing this:\n  hd ys \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. nth_default (0::'a) ys 0 \\<noteq> (0::'a)", "using ys"], ["proof (prove)\nusing this:\n  hd ys \\<noteq> (0::'a)\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. nth_default (0::'a) ys 0 \\<noteq> (0::'a)", "by (cases ys, auto)"], ["proof (state)\nthis:\n  poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "moreover"], ["proof (state)\nthis:\n  poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "have \"coeffs (Poly ys) = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs (Poly ys) = ys", "by (simp add: ys_def strip_while_dropWhile_commute)"], ["proof (state)\nthis:\n  coeffs (Poly ys) = ys\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "then"], ["proof (chain)\npicking this:\n  coeffs (Poly ys) = ys", "have \"coeffs (monom_mult n (Poly ys)) = replicate n 0 @ ys\""], ["proof (prove)\nusing this:\n  coeffs (Poly ys) = ys\n\ngoal (1 subgoal):\n 1. coeffs (monom_mult n (Poly ys)) = replicate n (0::'a) @ ys", "by (simp add: coeffs_eq_iff monom_mult_def [symmetric] ff ys monom_mult_code)"], ["proof (state)\nthis:\n  coeffs (monom_mult n (Poly ys)) = replicate n (0::'a) @ ys\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow>\n    f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "ultimately"], ["proof (chain)\npicking this:\n  poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a)\n  coeffs (monom_mult n (Poly ys)) = replicate n (0::'a) @ ys", "show ?thesis"], ["proof (prove)\nusing this:\n  poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a)\n  coeffs (monom_mult n (Poly ys)) = replicate n (0::'a) @ ys\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "unfolding dvd g"], ["proof (prove)\nusing this:\n  poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a)\n  coeffs (monom_mult n (Poly ys)) = replicate n (0::'a) @ ys\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * poly_of_list ys \\<and>\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n     poly.coeff (poly_of_list ys) 0 \\<noteq> (0::'a))", "by (auto simp add: coeffs_eq_iff monom_mult_def [symmetric] ff)"], ["proof (state)\nthis:\n  f = Polynomial.monom (1::'a) n * g \\<and>\n  (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n   \\<not> Polynomial.monom (1::'a) 1 dvd g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = Polynomial.monom (1::'a) n * g \\<and>\n  (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n   \\<not> Polynomial.monom (1::'a) 1 dvd g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = Polynomial.monom (1::'a) n * g \\<and>\n  (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n   \\<not> Polynomial.monom (1::'a) 1 dvd g)\n\ngoal (2 subgoals):\n 1. f = Polynomial.monom (1::'a) n * g\n 2. n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n    \\<not> Polynomial.monom (1::'a) 1 dvd g", "thus \"f = monom 1 n * g\" \"n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\""], ["proof (prove)\nusing this:\n  f = Polynomial.monom (1::'a) n * g \\<and>\n  (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<longrightarrow>\n   \\<not> Polynomial.monom (1::'a) 1 dvd g)\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom (1::'a) n * g &&&\n    (n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n     \\<not> Polynomial.monom (1::'a) 1 dvd g)", "by auto"], ["proof (state)\nthis:\n  f = Polynomial.monom (1::'a) n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom (1::'a) 1 dvd g\n\ngoal:\nNo subgoals!", "qed"], ["", "definition square_free_factorization_int :: \"int poly \\<Rightarrow> int \\<times> (int poly \\<times> nat)list\" where\n  \"square_free_factorization_int f = (case x_split f of (n,g) \\<comment> \\<open>extract \\<open>x^n\\<close>\\<close>\n    \\<Rightarrow> case square_free_factorization_int' g of (d,fs)\n    \\<Rightarrow> if n = 0 then (d,fs) else (d, (monom 1 1, n - 1) # fs))\""], ["", "lemma square_free_factorization_int: assumes res: \"square_free_factorization_int f = (d, fs)\"\n  shows \"square_free_factorization f (d,fs)\" \n    \"(fi, i) \\<in> set fs \\<Longrightarrow> primitive fi \\<and> lead_coeff fi > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow>\n     primitive fi \\<and> 0 < lead_coeff fi)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "obtain n g where xs: \"x_split f = (n,g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n g.\n        x_split f = (n, g) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x_split f = (n, g)\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "obtain c hs where sf: \"square_free_factorization_int' g = (c,hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c hs.\n        square_free_factorization_int' g = (c, hs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  square_free_factorization_int' g = (c, hs)\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "from res[unfolded square_free_factorization_int_def xs sf split]"], ["proof (chain)\npicking this:\n  (if n = 0 then (c, hs) else (c, (Polynomial.monom 1 1, n - 1) # hs)) =\n  (d, fs)", "have d: \"d = c\" and fs: \"fs = (if n = 0 then hs else (monom 1 1, n - 1) # hs)\""], ["proof (prove)\nusing this:\n  (if n = 0 then (c, hs) else (c, (Polynomial.monom 1 1, n - 1) # hs)) =\n  (d, fs)\n\ngoal (1 subgoal):\n 1. d = c &&&\n    fs = (if n = 0 then hs else (Polynomial.monom 1 1, n - 1) # hs)", "by (cases n, auto)"], ["proof (state)\nthis:\n  d = c\n  fs = (if n = 0 then hs else (Polynomial.monom 1 1, n - 1) # hs)\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "note sff = square_free_factorization_int'(1-2)[OF sf]"], ["proof (state)\nthis:\n  square_free_factorization g (c, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow>\n  content ?fi = 1 \\<and> 0 < lead_coeff ?fi\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "note xs = x_split[OF xs]"], ["proof (state)\nthis:\n  f = Polynomial.monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "let ?x = \"monom 1 1 :: int poly\""], ["proof (state)\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "have x: \"primitive ?x \\<and> lead_coeff ?x = 1 \\<and> degree ?x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive (Polynomial.monom 1 1) \\<and>\n    monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1", "by (auto simp add: degree_monom_eq content_def monom_Suc)"], ["proof (state)\nthis:\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1\n\ngoal (2 subgoals):\n 1. square_free_factorization f (d, fs)\n 2. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "thus \"(fi, i) \\<in> set fs \\<Longrightarrow> primitive fi \\<and> lead_coeff fi > 0\""], ["proof (prove)\nusing this:\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "using sff(2)"], ["proof (prove)\nusing this:\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow>\n  content ?fi = 1 \\<and> 0 < lead_coeff ?fi\n\ngoal (1 subgoal):\n 1. (fi, i) \\<in> set fs \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "unfolding fs"], ["proof (prove)\nusing this:\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow>\n  content ?fi = 1 \\<and> 0 < lead_coeff ?fi\n\ngoal (1 subgoal):\n 1. (fi, i)\n    \\<in> set (if n = 0 then hs\n               else (Polynomial.monom 1 1, n - 1) # hs) \\<Longrightarrow>\n    primitive fi \\<and> 0 < lead_coeff fi", "by (cases n, auto)"], ["proof (state)\nthis:\n  (fi, i) \\<in> set fs \\<Longrightarrow>\n  primitive fi \\<and> 0 < lead_coeff fi\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "show \"square_free_factorization f (d,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> square_free_factorization f (d, fs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> square_free_factorization f (d, fs)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "with d fs sff xs"], ["proof (chain)\npicking this:\n  d = c\n  fs = (if n = 0 then hs else (Polynomial.monom 1 1, n - 1) # hs)\n  square_free_factorization g (c, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow>\n  content ?fi = 1 \\<and> 0 < lead_coeff ?fi\n  f = Polynomial.monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  d = c\n  fs = (if n = 0 then hs else (Polynomial.monom 1 1, n - 1) # hs)\n  square_free_factorization g (c, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow>\n  content ?fi = 1 \\<and> 0 < lead_coeff ?fi\n  f = Polynomial.monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n  n = 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "with xs"], ["proof (chain)\npicking this:\n  f = Polynomial.monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n  n = Suc m", "have fg: \"f = monom 1 (Suc m) * g\" and dvd: \"\\<not> ?x dvd g\""], ["proof (prove)\nusing this:\n  f = Polynomial.monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n  n = Suc m\n\ngoal (1 subgoal):\n 1. f = Polynomial.monom 1 (Suc m) * g &&& \\<not> Polynomial.monom 1 1 dvd g", "by auto"], ["proof (state)\nthis:\n  f = Polynomial.monom 1 (Suc m) * g\n  \\<not> Polynomial.monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "from Suc"], ["proof (chain)\npicking this:\n  n = Suc m", "have fs: \"fs = (?x,m) # hs\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. fs = (Polynomial.monom 1 1, m) # hs", "unfolding fs"], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. (if n = 0 then hs else (Polynomial.monom 1 1, n - 1) # hs) =\n    (Polynomial.monom 1 1, m) # hs", "by auto"], ["proof (state)\nthis:\n  fs = (Polynomial.monom 1 1, m) # hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "have degx: \"degree ?x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (Polynomial.monom 1 1) = 1", "by code_simp"], ["proof (state)\nthis:\n  degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "from irreducible\\<^sub>d_square_free[OF linear_irreducible\\<^sub>d[OF this]]"], ["proof (chain)\npicking this:\n  square_free (Polynomial.monom 1 1)", "have sfx: \"square_free ?x\""], ["proof (prove)\nusing this:\n  square_free (Polynomial.monom 1 1)\n\ngoal (1 subgoal):\n 1. square_free (Polynomial.monom 1 1)", "by auto"], ["proof (state)\nthis:\n  square_free (Polynomial.monom 1 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "have fg: \"f = ?x ^ n * g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.monom 1 1 ^ n * g", "unfolding fg Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.monom 1 (Suc m) * g = Polynomial.monom 1 1 ^ Suc m * g", "by (metis x_pow_n)"], ["proof (state)\nthis:\n  f = Polynomial.monom 1 1 ^ n * g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "have eq0: \"?x ^ n * g = 0 \\<longleftrightarrow> g = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Polynomial.monom 1 1 ^ n * g = 0) = (g = 0)", "by simp"], ["proof (state)\nthis:\n  (Polynomial.monom 1 1 ^ n * g = 0) = (g = 0)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "note sf = square_free_factorizationD[OF sff(1)]"], ["proof (state)\nthis:\n  g = Polynomial.smult c (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i)\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set hs; (?b, ?j) \\<in> set hs;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  g = 0 \\<Longrightarrow> c = 0 \\<and> hs = []\n  distinct hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "{"], ["proof (state)\nthis:\n  g = Polynomial.smult c (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i)\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set hs; (?b, ?j) \\<in> set hs;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  g = 0 \\<Longrightarrow> c = 0 \\<and> hs = []\n  distinct hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "fix a i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "assume ai: \"(a,i) \\<in> set hs\""], ["proof (state)\nthis:\n  (a, i) \\<in> set hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "with sf(4)"], ["proof (chain)\npicking this:\n  g = 0 \\<Longrightarrow> c = 0 \\<and> hs = []\n  (a, i) \\<in> set hs", "have g0: \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g = 0 \\<Longrightarrow> c = 0 \\<and> hs = []\n  (a, i) \\<in> set hs\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "from split_list[OF ai]"], ["proof (chain)\npicking this:\n  \\<exists>ys zs. hs = ys @ (a, i) # zs", "obtain ys zs where hs: \"hs = ys @ (a,i) # zs\""], ["proof (prove)\nusing this:\n  \\<exists>ys zs. hs = ys @ (a, i) # zs\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        hs = ys @ (a, i) # zs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  hs = ys @ (a, i) # zs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "have \"a dvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd g", "unfolding square_free_factorization_prod_list[OF sff(1)] hs"], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd\n    Polynomial.smult c\n     (\\<Prod>(a, i)\\<leftarrow>ys @ (a, i) # zs. a ^ Suc i)", "by (rule dvd_smult, simp add: ac_simps)"], ["proof (state)\nthis:\n  a dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "moreover"], ["proof (state)\nthis:\n  a dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "have \"\\<not> ?x dvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Polynomial.monom 1 1 dvd g", "using xs[unfolded Suc]"], ["proof (prove)\nusing this:\n  f = Polynomial.monom 1 (Suc m) * g\n  Suc m \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<not> Polynomial.monom 1 1 dvd g", "by auto"], ["proof (state)\nthis:\n  \\<not> Polynomial.monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "ultimately"], ["proof (chain)\npicking this:\n  a dvd g\n  \\<not> Polynomial.monom 1 1 dvd g", "have dvd: \"\\<not> ?x dvd a\""], ["proof (prove)\nusing this:\n  a dvd g\n  \\<not> Polynomial.monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<not> Polynomial.monom 1 1 dvd a", "using dvd_trans"], ["proof (prove)\nusing this:\n  a dvd g\n  \\<not> Polynomial.monom 1 1 dvd g\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. \\<not> Polynomial.monom 1 1 dvd a", "by blast"], ["proof (state)\nthis:\n  \\<not> Polynomial.monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "from sf(2)[OF ai]"], ["proof (chain)\npicking this:\n  square_free a \\<and> degree a \\<noteq> 0", "have \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  square_free a \\<and> degree a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "have \"1 = gcd ?x a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = gcd (Polynomial.monom 1 1) a", "proof (rule gcdI)"], ["proof (state)\ngoal (4 subgoals):\n 1. 1 dvd Polynomial.monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd Polynomial.monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "fix d"], ["proof (state)\ngoal (4 subgoals):\n 1. 1 dvd Polynomial.monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd Polynomial.monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "assume d: \"d dvd ?x\" \"d dvd a\""], ["proof (state)\nthis:\n  d dvd Polynomial.monom 1 1\n  d dvd a\n\ngoal (4 subgoals):\n 1. 1 dvd Polynomial.monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd Polynomial.monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "from content_dvd_contentI[OF d(1)] x"], ["proof (chain)\npicking this:\n  content d dvd content (Polynomial.monom 1 1)\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1", "have cnt: \"is_unit (content d)\""], ["proof (prove)\nusing this:\n  content d dvd content (Polynomial.monom 1 1)\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. is_unit (content d)", "by auto"], ["proof (state)\nthis:\n  is_unit (content d)\n\ngoal (4 subgoals):\n 1. 1 dvd Polynomial.monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd Polynomial.monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "show \"is_unit d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit d", "proof (cases \"degree d = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "case False"], ["proof (state)\nthis:\n  degree d \\<noteq> 1\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "with divides_degree[OF d(1), unfolded degx]"], ["proof (chain)\npicking this:\n  degree d \\<le> 1 \\<or> Polynomial.monom 1 1 = 0\n  degree d \\<noteq> 1", "have \"degree d = 0\""], ["proof (prove)\nusing this:\n  degree d \\<le> 1 \\<or> Polynomial.monom 1 1 = 0\n  degree d \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree d = 0", "by auto"], ["proof (state)\nthis:\n  degree d = 0\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. d = [:a:]", "obtain c where dc: \"d = [:c:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. d = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. d = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  d = [:c:]\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "from cnt[unfolded dc]"], ["proof (chain)\npicking this:\n  is_unit (content [:c:])", "have \"is_unit c\""], ["proof (prove)\nusing this:\n  is_unit (content [:c:])\n\ngoal (1 subgoal):\n 1. is_unit c", "by (auto simp: content_def, cases \"c = 0\", auto)"], ["proof (state)\nthis:\n  is_unit c\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "hence \"d * d = 1\""], ["proof (prove)\nusing this:\n  is_unit c\n\ngoal (1 subgoal):\n 1. d * d = 1", "unfolding dc"], ["proof (prove)\nusing this:\n  is_unit c\n\ngoal (1 subgoal):\n 1. [:c:] * [:c:] = 1", "by (cases \"c = -1\"; cases \"c = 1\", auto)"], ["proof (state)\nthis:\n  d * d = 1\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "thus \"is_unit d\""], ["proof (prove)\nusing this:\n  d * d = 1\n\ngoal (1 subgoal):\n 1. is_unit d", "by (metis dvd_triv_right)"], ["proof (state)\nthis:\n  is_unit d\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "case True"], ["proof (state)\nthis:\n  degree d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from d(1)"], ["proof (chain)\npicking this:\n  d dvd Polynomial.monom 1 1", "obtain e where xde: \"?x = d * e\""], ["proof (prove)\nusing this:\n  d dvd Polynomial.monom 1 1\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        Polynomial.monom 1 1 = d * e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. Polynomial.monom 1 1 = d * k\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        Polynomial.monom 1 1 = d * e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Polynomial.monom 1 1 = d * e\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from arg_cong[OF this, of degree] degx"], ["proof (chain)\npicking this:\n  degree (Polynomial.monom 1 1) = degree (d * e)\n  degree (Polynomial.monom 1 1) = 1", "have \"degree d + degree e = 1\""], ["proof (prove)\nusing this:\n  degree (Polynomial.monom 1 1) = degree (d * e)\n  degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. degree d + degree e = 1", "by (metis True add.right_neutral degree_0 degree_mult_eq one_neq_zero)"], ["proof (state)\nthis:\n  degree d + degree e = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with True"], ["proof (chain)\npicking this:\n  degree d = 1\n  degree d + degree e = 1", "have \"degree e = 0\""], ["proof (prove)\nusing this:\n  degree d = 1\n  degree d + degree e = 1\n\ngoal (1 subgoal):\n 1. degree e = 0", "by auto"], ["proof (state)\nthis:\n  degree e = 0\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from degree0_coeffs[OF this] xde"], ["proof (chain)\npicking this:\n  \\<exists>a. e = [:a:]\n  Polynomial.monom 1 1 = d * e", "obtain e where xde: \"?x = [:e:] * d\""], ["proof (prove)\nusing this:\n  \\<exists>a. e = [:a:]\n  Polynomial.monom 1 1 = d * e\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        Polynomial.monom 1 1 = [:e:] * d \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Polynomial.monom 1 1 = [:e:] * d\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from arg_cong[OF this, of content, unfolded content_mult] x"], ["proof (chain)\npicking this:\n  content (Polynomial.monom 1 1) = content [:e:] * content d\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1", "have \"content [:e:] * content d = 1\""], ["proof (prove)\nusing this:\n  content (Polynomial.monom 1 1) = content [:e:] * content d\n  primitive (Polynomial.monom 1 1) \\<and>\n  monic (Polynomial.monom 1 1) \\<and> degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. content [:e:] * content d = 1", "by auto"], ["proof (state)\nthis:\n  content [:e:] * content d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "also"], ["proof (state)\nthis:\n  content [:e:] * content d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "have \"content [:e :] = abs e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content [:e:] = \\<bar>e\\<bar>", "by (auto simp: content_def, cases \"e = 0\", auto)"], ["proof (state)\nthis:\n  content [:e:] = \\<bar>e\\<bar>\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "finally"], ["proof (chain)\npicking this:\n  \\<bar>e\\<bar> * content d = 1", "have \"\\<bar>e\\<bar> * content d = 1\""], ["proof (prove)\nusing this:\n  \\<bar>e\\<bar> * content d = 1\n\ngoal (1 subgoal):\n 1. \\<bar>e\\<bar> * content d = 1", "."], ["proof (state)\nthis:\n  \\<bar>e\\<bar> * content d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from pos_zmult_eq_1_iff_lemma[OF this]"], ["proof (chain)\npicking this:\n  \\<bar>e\\<bar> = 1 \\<or> \\<bar>e\\<bar> = - 1", "have \"e * e = 1\""], ["proof (prove)\nusing this:\n  \\<bar>e\\<bar> = 1 \\<or> \\<bar>e\\<bar> = - 1\n\ngoal (1 subgoal):\n 1. e * e = 1", "by (cases \"e = 1\"; cases \"e = -1\", auto)"], ["proof (state)\nthis:\n  e * e = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with arg_cong[OF xde, of \"smult e\"]"], ["proof (chain)\npicking this:\n  Polynomial.smult e (Polynomial.monom 1 1) = Polynomial.smult e ([:e:] * d)\n  e * e = 1", "have \"d = ?x * [:e:]\""], ["proof (prove)\nusing this:\n  Polynomial.smult e (Polynomial.monom 1 1) = Polynomial.smult e ([:e:] * d)\n  e * e = 1\n\ngoal (1 subgoal):\n 1. d = Polynomial.monom 1 1 * [:e:]", "by auto"], ["proof (state)\nthis:\n  d = Polynomial.monom 1 1 * [:e:]\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "hence \"?x dvd d\""], ["proof (prove)\nusing this:\n  d = Polynomial.monom 1 1 * [:e:]\n\ngoal (1 subgoal):\n 1. Polynomial.monom 1 1 dvd d", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  d = Polynomial.monom 1 1 * [:e:]\n\ngoal (1 subgoal):\n 1. \\<exists>k. d = Polynomial.monom 1 1 * k", "by blast"], ["proof (state)\nthis:\n  Polynomial.monom 1 1 dvd d\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with d(2)"], ["proof (chain)\npicking this:\n  d dvd a\n  Polynomial.monom 1 1 dvd d", "have \"?x dvd a\""], ["proof (prove)\nusing this:\n  d dvd a\n  Polynomial.monom 1 1 dvd d\n\ngoal (1 subgoal):\n 1. Polynomial.monom 1 1 dvd a", "by (metis dvd_trans)"], ["proof (state)\nthis:\n  Polynomial.monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with dvd"], ["proof (chain)\npicking this:\n  \\<not> Polynomial.monom 1 1 dvd a\n  Polynomial.monom 1 1 dvd a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Polynomial.monom 1 1 dvd a\n  Polynomial.monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. is_unit d", "by auto"], ["proof (state)\nthis:\n  is_unit d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_unit d\n\ngoal (3 subgoals):\n 1. 1 dvd Polynomial.monom 1 1\n 2. 1 dvd a\n 3. normalize 1 = 1", "qed auto"], ["proof (state)\nthis:\n  1 = gcd (Polynomial.monom 1 1) a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "hence \"coprime ?x a\""], ["proof (prove)\nusing this:\n  1 = gcd (Polynomial.monom 1 1) a\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (Polynomial.monom 1 1) a", "by (simp add: gcd_eq_1_imp_coprime)"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "note this dvd"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) a\n  \\<not> Polynomial.monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "}"], ["proof (state)\nthis:\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) ?a2\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd ?a2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "note hs_dvd_x = this"], ["proof (state)\nthis:\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) ?a2\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd ?a2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "from hs_dvd_x[of ?x m]"], ["proof (chain)\npicking this:\n  (Polynomial.monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1)\n   (Polynomial.monom 1 1)\n  (Polynomial.monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd Polynomial.monom 1 1", "have nmem: \"(?x,m) \\<notin> set hs\""], ["proof (prove)\nusing this:\n  (Polynomial.monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1)\n   (Polynomial.monom 1 1)\n  (Polynomial.monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd Polynomial.monom 1 1\n\ngoal (1 subgoal):\n 1. (Polynomial.monom 1 1, m) \\<notin> set hs", "by auto"], ["proof (state)\nthis:\n  (Polynomial.monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "hence eq: \"?x ^ n * g = smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\""], ["proof (prove)\nusing this:\n  (Polynomial.monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. Polynomial.monom 1 1 ^ n * g =\n    Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "unfolding sf(1)"], ["proof (prove)\nusing this:\n  (Polynomial.monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. Polynomial.monom 1 1 ^ n *\n    Polynomial.smult c (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i) =\n    Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "unfolding fs Suc"], ["proof (prove)\nusing this:\n  (Polynomial.monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. Polynomial.monom 1 1 ^ Suc m *\n    Polynomial.smult c (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i) =\n    Polynomial.smult c\n     (\\<Prod>(a, i)\\<in>set ((Polynomial.monom 1 1, m) # hs). a ^ Suc i)", "by simp"], ["proof (state)\nthis:\n  Polynomial.monom 1 1 ^ n * g =\n  Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> square_free_factorization f (d, fs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "unfolding fg d"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization (Polynomial.monom 1 1 ^ n * g) (c, fs)", "unfolding square_free_factorization_def split eq0"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.monom 1 1 ^ n * g =\n    Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) \\<and>\n    (g = 0 \\<longrightarrow> c = 0 \\<and> fs = []) \\<and>\n    (\\<forall>a i.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        square_free a \\<and> 0 < degree a) \\<and>\n    (\\<forall>a i b j.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        (b, j) \\<in> set fs \\<longrightarrow>\n        (a, i) \\<noteq> (b, j) \\<longrightarrow>\n        algebraic_semidom_class.coprime a b) \\<and>\n    distinct fs", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) =\n    Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) \\<and>\n    (g = 0 \\<longrightarrow> c = 0 \\<and> fs = []) \\<and>\n    (\\<forall>a i.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        square_free a \\<and> 0 < degree a) \\<and>\n    (\\<forall>a i b j.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        (b, j) \\<in> set fs \\<longrightarrow>\n        (a, i) \\<noteq> (b, j) \\<longrightarrow>\n        algebraic_semidom_class.coprime a b) \\<and>\n    distinct fs", "proof (intro conjI allI impI, rule refl)"], ["proof (state)\ngoal (6 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 5. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 6. distinct fs", "fix a i"], ["proof (state)\ngoal (6 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 5. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 6. distinct fs", "assume ai: \"(a,i) \\<in> set fs\""], ["proof (state)\nthis:\n  (a, i) \\<in> set fs\n\ngoal (6 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 5. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 6. distinct fs", "thus \"square_free a\" \"degree a > 0\""], ["proof (prove)\nusing this:\n  (a, i) \\<in> set fs\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "using sf(2) sfx degx"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set fs\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  square_free (Polynomial.monom 1 1)\n  degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "unfolding fs"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set ((Polynomial.monom 1 1, m) # hs)\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  square_free (Polynomial.monom 1 1)\n  degree (Polynomial.monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "by auto"], ["proof (state)\nthis:\n  square_free a\n  0 < degree a\n\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "fix b j"], ["proof (state)\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "assume bj: \"(b,j) \\<in> set fs\" and diff: \"(a,i) \\<noteq> (b,j)\""], ["proof (state)\nthis:\n  (b, j) \\<in> set fs\n  (a, i) \\<noteq> (b, j)\n\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "consider (hs_hs) \"(a,i) \\<in> set hs\" \"(b,j) \\<in> set hs\" \n        | (hs_x) \"(a,i) \\<in> set hs\" \"b = ?x\" \n        | (x_hs) \"(b,j) \\<in> set hs\" \"a = ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using ai bj diff"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set fs\n  (b, j) \\<in> set fs\n  (a, i) \\<noteq> (b, j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding fs"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set ((Polynomial.monom 1 1, m) # hs)\n  (b, j) \\<in> set ((Polynomial.monom 1 1, m) # hs)\n  (a, i) \\<noteq> (b, j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"Rings.coprime a b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "case hs_hs"], ["proof (state)\nthis:\n  (a, i) \\<in> set hs\n  (b, j) \\<in> set hs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from sf(3)[OF this diff]"], ["proof (chain)\npicking this:\n  algebraic_semidom_class.coprime a b", "show ?thesis"], ["proof (prove)\nusing this:\n  algebraic_semidom_class.coprime a b\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "."], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "case hs_x"], ["proof (state)\nthis:\n  (a, i) \\<in> set hs\n  b = Polynomial.monom 1 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; b = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from hs_dvd_x(1)[OF hs_x(1)]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) a", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) a\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "unfolding hs_x(2)"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) a\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a (Polynomial.monom 1 1)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "case x_hs"], ["proof (state)\nthis:\n  (b, j) \\<in> set hs\n  a = Polynomial.monom 1 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(b, j) \\<in> set hs; a = Polynomial.monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from hs_dvd_x(1)[OF x_hs(1)]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) b", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) b\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "unfolding x_hs(2)"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (Polynomial.monom 1 1) b\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime (Polynomial.monom 1 1) b", "by simp"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal (3 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. distinct fs", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. g = 0 \\<Longrightarrow> c = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. distinct fs", "show \"g = 0 \\<Longrightarrow> c = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> c = 0", "using sf(4)"], ["proof (prove)\nusing this:\n  g = 0 \\<Longrightarrow> c = 0 \\<and> hs = []\n\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> c = 0", "by auto"], ["proof (state)\nthis:\n  g = 0 \\<Longrightarrow> c = 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow> fs = []\n 2. distinct fs", "show \"g = 0 \\<Longrightarrow> fs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> fs = []", "using sf(4) xs Suc"], ["proof (prove)\nusing this:\n  g = 0 \\<Longrightarrow> c = 0 \\<and> hs = []\n  f = Polynomial.monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> Polynomial.monom 1 1 dvd g\n  n = Suc m\n\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> fs = []", "by auto"], ["proof (state)\nthis:\n  g = 0 \\<Longrightarrow> fs = []\n\ngoal (1 subgoal):\n 1. distinct fs", "show \"distinct fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct fs", "using sf(5) nmem"], ["proof (prove)\nusing this:\n  distinct hs\n  (Polynomial.monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. distinct fs", "unfolding fs"], ["proof (prove)\nusing this:\n  distinct hs\n  (Polynomial.monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. distinct ((Polynomial.monom 1 1, m) # hs)", "by auto"], ["proof (state)\nthis:\n  distinct fs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}