{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Factorize_Int_Poly.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma int_poly_factorization_algorithm_irreducible\\<^sub>d: \n  assumes \"int_poly_factorization_algorithm alg f = fs\" \n  and \"square_free f\"\n  and \"degree f > 0\" \nshows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible\\<^sub>d fi)\"", "lemma irreducible_imp_square_free:\n  assumes irr: \"irreducible (p::'a::idom poly)\" shows \"square_free p\"", "lemma not_mem_set_dropWhileD: \"x \\<notin> set (dropWhile P xs) \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> P x\"", "lemma primitive_reflect_poly:\n  fixes f :: \"'a :: comm_semiring_1 poly\"\n  shows \"primitive (reflect_poly f) = primitive f\"", "lemma gcd_list_sub:\n  assumes \"set xs \\<subseteq> set ys\" shows \"gcd_list ys dvd gcd_list xs\"", "lemma content_reflect_poly:\n  \"content (reflect_poly f) = content f\" (is \"?l = ?r\")", "lemma coeff_primitive_part: \"content f * coeff (primitive_part f) i = coeff f i\"", "lemma smult_cancel[simp]:\n  fixes c :: \"'a :: idom\"\n  shows \"smult c f = smult c g \\<longleftrightarrow> c = 0 \\<or> f = g\"", "lemma primitive_part_reflect_poly:\n  fixes f :: \"'a :: {semiring_gcd,idom} poly\"\n  shows \"primitive_part (reflect_poly f) = reflect_poly (primitive_part f)\" (is \"?l = ?r\")", "lemma reflect_poly_eq_zero[simp]:\n  \"reflect_poly f = 0 \\<longleftrightarrow> f = 0\"", "lemma irreducible\\<^sub>d_reflect_poly_main:\n  fixes f :: \"'a :: {idom, semiring_gcd} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\"\n    and irr: \"irreducible\\<^sub>d (reflect_poly f)\"\n  shows \"irreducible\\<^sub>d f\"", "lemma irreducible\\<^sub>d_reflect_poly:\n  fixes f :: \"'a :: {idom, semiring_gcd} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\"\n  shows \"irreducible\\<^sub>d (reflect_poly f) = irreducible\\<^sub>d f\"", "lemma irreducible_reflect_poly:\n  fixes f :: \"'a :: {idom,semiring_gcd} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\"\n  shows \"irreducible (reflect_poly f) = irreducible f\" (is \"?l = ?r\")", "lemma reflect_poly_dvd: \"(f :: 'a :: idom poly) dvd g \\<Longrightarrow> reflect_poly f dvd reflect_poly g\"", "lemma square_free_reflect_poly: fixes f :: \"'a :: idom poly\" \n  assumes sf: \"square_free f\" \n  and nz: \"coeff f 0 \\<noteq> 0\" \nshows \"square_free (reflect_poly f)\"", "lemma gcd_reflect_poly: fixes f :: \"'a :: {factorial_ring_gcd, semiring_gcd_mult_normalize} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\" \"coeff g 0 \\<noteq> 0\"\n  shows \"gcd (reflect_poly f) (reflect_poly g) = normalize (reflect_poly (gcd f g))\"", "lemma linear_primitive_irreducible:\n  fixes f :: \"'a :: {comm_semiring_1,semiring_no_zero_divisors} poly\"\n  assumes deg: \"degree f = 1\" and cf: \"primitive f\"\n  shows \"irreducible f\"", "lemma square_free_factorization_last_coeff_nz: \n  assumes sff: \"square_free_factorization f (a, fs)\" \n  and mem: \"(fi,i) \\<in> set fs\" \n  and nz: \"coeff f 0 \\<noteq> 0\" \nshows \"coeff fi 0 \\<noteq> 0\"", "lemma internal_int_poly_factorization_code[code]: \"internal_int_poly_factorization f = (\n    case square_free_factorization_int f of (a,gis) \\<Rightarrow>\n   (a, concat (map (\\<lambda> (g,i). (map (\\<lambda> f. (f,i)) (main_int_poly_factorization g))) gis)))\"", "lemma factorize_int_poly_0[simp]: \"factorize_int_poly_generic 0 = (0,[])\"", "lemma main_int_poly_factorization: \n  assumes res: \"main_int_poly_factorization f = fs\" \n  and sf: \"square_free f\"\n  and df: \"degree f > 0\"\n  and nz: \"coeff f 0 \\<noteq> 0\" \nshows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible\\<^sub>d fi)\"", "lemma internal_int_poly_factorization_mem:\n  assumes f: \"coeff f 0 \\<noteq> 0\" \n  and res: \"internal_int_poly_factorization f = (c,fs)\"\n  and mem: \"(fi,i) \\<in> set fs\"\n  shows \"irreducible fi\" \"irreducible\\<^sub>d fi\" and \"primitive fi\" and \"degree fi \\<noteq> 0\"", "lemma internal_int_poly_factorization:\n  assumes f: \"coeff f 0 \\<noteq> 0\"\n  and res: \"internal_int_poly_factorization f = (c,fs)\"\n  shows \"square_free_factorization f (c,fs)\"", "lemma factorize_int_last_nz_poly: assumes res: \"factorize_int_last_nz_poly f = (c,fs)\"\n    and nz: \"coeff f 0 \\<noteq> 0\"\nshows \"square_free_factorization f (c,fs)\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> irreducible fi\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> degree fi \\<noteq> 0\"", "lemma factorize_int_poly: assumes res: \"factorize_int_poly_generic f = (c,fs)\"\nshows \"square_free_factorization f (c,fs)\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> irreducible fi\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> degree fi \\<noteq> 0\""], "translations": [["", "lemma int_poly_factorization_algorithm_irreducible\\<^sub>d: \n  assumes \"int_poly_factorization_algorithm alg f = fs\" \n  and \"square_free f\"\n  and \"degree f > 0\" \nshows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible\\<^sub>d fi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "using assms"], ["proof (prove)\nusing this:\n  int_poly_factorization_algorithm alg f = fs\n  square_free f\n  0 < degree f\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "by (transfer, auto)"], ["", "corollary int_poly_factorization_algorithm_irreducible:\n  assumes res: \"int_poly_factorization_algorithm alg f = fs\" \n  and sf: \"square_free f\"\n  and deg: \"degree f > 0\"\n  and pr: \"primitive f\"\n  shows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible fi \\<and> degree fi > 0 \\<and> primitive fi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and>\n    (\\<forall>fi\\<in>set fs.\n        irreducible fi \\<and> 0 < degree fi \\<and> primitive fi)", "proof (intro conjI ballI)"], ["proof (state)\ngoal (4 subgoals):\n 1. f = prod_list fs\n 2. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> irreducible fi\n 3. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi\n 4. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> primitive fi", "note * = int_poly_factorization_algorithm_irreducible\\<^sub>d[OF res sf deg]"], ["proof (state)\nthis:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal (4 subgoals):\n 1. f = prod_list fs\n 2. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> irreducible fi\n 3. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi\n 4. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> primitive fi", "from *"], ["proof (chain)\npicking this:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "show f: \"f = prod_list fs\""], ["proof (prove)\nusing this:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. f = prod_list fs", "by auto"], ["proof (state)\nthis:\n  f = prod_list fs\n\ngoal (3 subgoals):\n 1. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> irreducible fi\n 2. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi\n 3. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> primitive fi", "fix fi"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> irreducible fi\n 2. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi\n 3. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> primitive fi", "assume fi: \"fi \\<in> set fs\""], ["proof (state)\nthis:\n  fi \\<in> set fs\n\ngoal (3 subgoals):\n 1. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> irreducible fi\n 2. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi\n 3. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> primitive fi", "with primitive_prod_list[OF pr[unfolded f]]"], ["proof (chain)\npicking this:\n  ?f \\<in> set fs \\<Longrightarrow> primitive ?f\n  fi \\<in> set fs", "show \"primitive fi\""], ["proof (prove)\nusing this:\n  ?f \\<in> set fs \\<Longrightarrow> primitive ?f\n  fi \\<in> set fs\n\ngoal (1 subgoal):\n 1. primitive fi", "by auto"], ["proof (state)\nthis:\n  primitive fi\n\ngoal (2 subgoals):\n 1. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> irreducible fi\n 2. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi", "from irreducible_primitive_connect[OF this] * pr[unfolded f] fi"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d fi = irreducible fi\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n  primitive (prod_list fs)\n  fi \\<in> set fs", "show \"irreducible fi\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d fi = irreducible fi\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n  primitive (prod_list fs)\n  fi \\<in> set fs\n\ngoal (1 subgoal):\n 1. irreducible fi", "by auto"], ["proof (state)\nthis:\n  irreducible fi\n\ngoal (1 subgoal):\n 1. \\<And>fi. fi \\<in> set fs \\<Longrightarrow> 0 < degree fi", "from * fi"], ["proof (chain)\npicking this:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n  fi \\<in> set fs", "show \"degree fi > 0\""], ["proof (prove)\nusing this:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n  fi \\<in> set fs\n\ngoal (1 subgoal):\n 1. 0 < degree fi", "by (auto)"], ["proof (state)\nthis:\n  0 < degree fi\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_imp_square_free:\n  assumes irr: \"irreducible (p::'a::idom poly)\" shows \"square_free p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free p", "proof(intro square_freeI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. p \\<noteq> 0", "from irr"], ["proof (chain)\npicking this:\n  irreducible p", "show p0: \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  irreducible p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"a * a dvd p\""], ["proof (state)\nthis:\n  a * a dvd p\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a * a dvd p", "obtain b where paab: \"p = a * (a * b)\""], ["proof (prove)\nusing this:\n  a * a dvd p\n\ngoal (1 subgoal):\n 1. (\\<And>b. p = a * (a * b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  p = a * (a * b)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"degree a > 0\""], ["proof (state)\nthis:\n  0 < degree a\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  0 < degree a", "have a1: \"\\<not> a dvd 1\""], ["proof (prove)\nusing this:\n  0 < degree a\n\ngoal (1 subgoal):\n 1. \\<not> a dvd 1", "by (auto simp: poly_dvd_1)"], ["proof (state)\nthis:\n  \\<not> a dvd 1\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> a dvd 1", "have ab1: \"\\<not> a * b dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> a dvd 1\n\ngoal (1 subgoal):\n 1. \\<not> a * b dvd 1", "using dvd_mult_left"], ["proof (prove)\nusing this:\n  \\<not> a dvd 1\n  ?a * ?b dvd ?c \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. \\<not> a * b dvd 1", "by auto"], ["proof (state)\nthis:\n  \\<not> a * b dvd 1\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q \\<noteq> 0; q * q dvd p\\<rbrakk>\n       \\<Longrightarrow> False", "from paab irr a1 ab1"], ["proof (chain)\npicking this:\n  p = a * (a * b)\n  irreducible p\n  \\<not> a dvd 1\n  \\<not> a * b dvd 1", "show False"], ["proof (prove)\nusing this:\n  p = a * (a * b)\n  irreducible p\n  \\<not> a dvd 1\n  \\<not> a * b dvd 1\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Move *)"], ["", "lemma not_mem_set_dropWhileD: \"x \\<notin> set (dropWhile P xs) \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set (dropWhile P xs); x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> P x", "by (metis dropWhile_append3 in_set_conv_decomp)"], ["", "lemma primitive_reflect_poly:\n  fixes f :: \"'a :: comm_semiring_1 poly\"\n  shows \"primitive (reflect_poly f) = primitive f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive (reflect_poly f) = primitive f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. primitive (reflect_poly f) = primitive f", "have \"(\\<forall> a \\<in> set (coeffs f). x dvd a) \\<longleftrightarrow> (\\<forall>a \\<in> set (dropWhile ((=) 0) (coeffs f)). x dvd a)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set (coeffs f). x dvd a) =\n    (\\<forall>a\\<in>set (dropWhile ((=) (0::'a)) (coeffs f)). x dvd a)", "by (auto dest: not_mem_set_dropWhileD set_dropWhileD)"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set (coeffs f). ?x dvd a) =\n  (\\<forall>a\\<in>set (dropWhile ((=) (0::'a)) (coeffs f)). ?x dvd a)\n\ngoal (1 subgoal):\n 1. primitive (reflect_poly f) = primitive f", "then"], ["proof (chain)\npicking this:\n  (\\<forall>a\\<in>set (coeffs f). ?x dvd a) =\n  (\\<forall>a\\<in>set (dropWhile ((=) (0::'a)) (coeffs f)). ?x dvd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set (coeffs f). ?x dvd a) =\n  (\\<forall>a\\<in>set (dropWhile ((=) (0::'a)) (coeffs f)). ?x dvd a)\n\ngoal (1 subgoal):\n 1. primitive (reflect_poly f) = primitive f", "by (auto simp: primitive_def coeffs_reflect_poly)"], ["proof (state)\nthis:\n  primitive (reflect_poly f) = primitive f\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: move *)"], ["", "lemma gcd_list_sub:\n  assumes \"set xs \\<subseteq> set ys\" shows \"gcd_list ys dvd gcd_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_list ys dvd gcd_list xs", "by (metis Gcd_fin.subset assms semiring_gcd_class.gcd_dvd1)"], ["", "lemma content_reflect_poly:\n  \"content (reflect_poly f) = content f\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "have l: \"?l = gcd_list (dropWhile ((=) 0) (coeffs f))\" (is \"_ = gcd_list ?xs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. content (reflect_poly f) = gcd_list (dropWhile ((=) (0::'a)) (coeffs f))", "by (simp add: content_def reflect_poly_def)"], ["proof (state)\nthis:\n  content (reflect_poly f) = gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "have \"set ?xs \\<subseteq> set (coeffs f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (dropWhile ((=) (0::'a)) (coeffs f)) \\<subseteq> set (coeffs f)", "by (auto dest: set_dropWhileD)"], ["proof (state)\nthis:\n  set (dropWhile ((=) (0::'a)) (coeffs f)) \\<subseteq> set (coeffs f)\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "from gcd_list_sub[OF this]"], ["proof (chain)\npicking this:\n  gcd_list (coeffs f) dvd gcd_list (dropWhile ((=) (0::'a)) (coeffs f))", "have \"?r dvd gcd_list ?xs\""], ["proof (prove)\nusing this:\n  gcd_list (coeffs f) dvd gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n\ngoal (1 subgoal):\n 1. content f dvd gcd_list (dropWhile ((=) (0::'a)) (coeffs f))", "by (simp add: content_def)"], ["proof (state)\nthis:\n  content f dvd gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "with l"], ["proof (chain)\npicking this:\n  content (reflect_poly f) = gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n  content f dvd gcd_list (dropWhile ((=) (0::'a)) (coeffs f))", "have rl: \"?r dvd ?l\""], ["proof (prove)\nusing this:\n  content (reflect_poly f) = gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n  content f dvd gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n\ngoal (1 subgoal):\n 1. content f dvd content (reflect_poly f)", "by auto"], ["proof (state)\nthis:\n  content f dvd content (reflect_poly f)\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "have \"set (coeffs f) \\<subseteq> set (0 # ?xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (coeffs f)\n    \\<subseteq> set ((0::'a) # dropWhile ((=) (0::'a)) (coeffs f))", "by (auto dest: not_mem_set_dropWhileD)"], ["proof (state)\nthis:\n  set (coeffs f)\n  \\<subseteq> set ((0::'a) # dropWhile ((=) (0::'a)) (coeffs f))\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "from gcd_list_sub[OF this]"], ["proof (chain)\npicking this:\n  gcd_list ((0::'a) # dropWhile ((=) (0::'a)) (coeffs f)) dvd\n  gcd_list (coeffs f)", "have \"gcd_list ?xs dvd ?r\""], ["proof (prove)\nusing this:\n  gcd_list ((0::'a) # dropWhile ((=) (0::'a)) (coeffs f)) dvd\n  gcd_list (coeffs f)\n\ngoal (1 subgoal):\n 1. gcd_list (dropWhile ((=) (0::'a)) (coeffs f)) dvd content f", "by (simp add: content_def)"], ["proof (state)\nthis:\n  gcd_list (dropWhile ((=) (0::'a)) (coeffs f)) dvd content f\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "with l"], ["proof (chain)\npicking this:\n  content (reflect_poly f) = gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n  gcd_list (dropWhile ((=) (0::'a)) (coeffs f)) dvd content f", "have lr: \"?l dvd ?r\""], ["proof (prove)\nusing this:\n  content (reflect_poly f) = gcd_list (dropWhile ((=) (0::'a)) (coeffs f))\n  gcd_list (dropWhile ((=) (0::'a)) (coeffs f)) dvd content f\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) dvd content f", "by auto"], ["proof (state)\nthis:\n  content (reflect_poly f) dvd content f\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "from rl lr"], ["proof (chain)\npicking this:\n  content f dvd content (reflect_poly f)\n  content (reflect_poly f) dvd content f", "show \"?l = ?r\""], ["proof (prove)\nusing this:\n  content f dvd content (reflect_poly f)\n  content (reflect_poly f) dvd content f\n\ngoal (1 subgoal):\n 1. content (reflect_poly f) = content f", "by (simp add: associated_eqI)"], ["proof (state)\nthis:\n  content (reflect_poly f) = content f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coeff_primitive_part: \"content f * coeff (primitive_part f) i = coeff f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content f * coeff (primitive_part f) i = coeff f i", "using arg_cong[OF content_times_primitive_part[of f], of \"\\<lambda>f. coeff f _\", unfolded coeff_smult]"], ["proof (prove)\nusing this:\n  content f * coeff (primitive_part f) ?uu3 = coeff f ?uu3\n\ngoal (1 subgoal):\n 1. content f * coeff (primitive_part f) i = coeff f i", "."], ["", "(* TODO: move *)"], ["", "lemma smult_cancel[simp]:\n  fixes c :: \"'a :: idom\"\n  shows \"smult c f = smult c g \\<longleftrightarrow> c = 0 \\<or> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Polynomial.smult c f = Polynomial.smult c g) =\n    (c = (0::'a) \\<or> f = g)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (Polynomial.smult c f = Polynomial.smult c g) =\n    (c = (0::'a) \\<or> f = g)", "have l: \"smult c f = [:c:] * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult c f = [:c:] * f", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult c f = [:c:] * f\n\ngoal (1 subgoal):\n 1. (Polynomial.smult c f = Polynomial.smult c g) =\n    (c = (0::'a) \\<or> f = g)", "have r: \"smult c g = [:c:] * g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult c g = [:c:] * g", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult c g = [:c:] * g\n\ngoal (1 subgoal):\n 1. (Polynomial.smult c f = Polynomial.smult c g) =\n    (c = (0::'a) \\<or> f = g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Polynomial.smult c f = Polynomial.smult c g) =\n    (c = (0::'a) \\<or> f = g)", "unfolding l r mult_cancel_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([:c:] = 0 \\<or> f = g) = (c = (0::'a) \\<or> f = g)", "by simp"], ["proof (state)\nthis:\n  (Polynomial.smult c f = Polynomial.smult c g) = (c = (0::'a) \\<or> f = g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primitive_part_reflect_poly:\n  fixes f :: \"'a :: {semiring_gcd,idom} poly\"\n  shows \"primitive_part (reflect_poly f) = reflect_poly (primitive_part f)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "using content_times_primitive_part[of \"reflect_poly f\"]"], ["proof (prove)\nusing this:\n  Polynomial.smult (content (reflect_poly f))\n   (primitive_part (reflect_poly f)) =\n  reflect_poly f\n\ngoal (1 subgoal):\n 1. primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f \\<Longrightarrow>\n    primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "note content_reflect_poly[of f, symmetric]"], ["proof (state)\nthis:\n  content f = content (reflect_poly f)\n\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f \\<Longrightarrow>\n    primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "also"], ["proof (state)\nthis:\n  content f = content (reflect_poly f)\n\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f \\<Longrightarrow>\n    primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "have \"smult (content (reflect_poly f)) ?l = reflect_poly f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f", "by simp"], ["proof (state)\nthis:\n  Polynomial.smult (content (reflect_poly f))\n   (primitive_part (reflect_poly f)) =\n  reflect_poly f\n\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f \\<Longrightarrow>\n    primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "also"], ["proof (state)\nthis:\n  Polynomial.smult (content (reflect_poly f))\n   (primitive_part (reflect_poly f)) =\n  reflect_poly f\n\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f \\<Longrightarrow>\n    primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "have \"... = reflect_poly (smult (content f) (primitive_part f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly f =\n    reflect_poly (Polynomial.smult (content f) (primitive_part f))", "by simp"], ["proof (state)\nthis:\n  reflect_poly f =\n  reflect_poly (Polynomial.smult (content f) (primitive_part f))\n\ngoal (1 subgoal):\n 1. Polynomial.smult (content (reflect_poly f))\n     (primitive_part (reflect_poly f)) =\n    reflect_poly f \\<Longrightarrow>\n    primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "finally"], ["proof (chain)\npicking this:\n  Polynomial.smult (content f) (primitive_part (reflect_poly f)) =\n  reflect_poly (Polynomial.smult (content f) (primitive_part f))", "show ?thesis"], ["proof (prove)\nusing this:\n  Polynomial.smult (content f) (primitive_part (reflect_poly f)) =\n  reflect_poly (Polynomial.smult (content f) (primitive_part f))\n\ngoal (1 subgoal):\n 1. primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "unfolding reflect_poly_smult smult_cancel"], ["proof (prove)\nusing this:\n  content f = (0::'a) \\<or>\n  primitive_part (reflect_poly f) = reflect_poly (primitive_part f)\n\ngoal (1 subgoal):\n 1. primitive_part (reflect_poly f) = reflect_poly (primitive_part f)", "by auto"], ["proof (state)\nthis:\n  primitive_part (reflect_poly f) = reflect_poly (primitive_part f)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: move *)"], ["", "lemma reflect_poly_eq_zero[simp]:\n  \"reflect_poly f = 0 \\<longleftrightarrow> f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (reflect_poly f = 0) = (f = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> f = 0\n 2. f = 0 \\<Longrightarrow> reflect_poly f = 0", "assume \"reflect_poly f = 0\""], ["proof (state)\nthis:\n  reflect_poly f = 0\n\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> f = 0\n 2. f = 0 \\<Longrightarrow> reflect_poly f = 0", "then"], ["proof (chain)\npicking this:\n  reflect_poly f = 0", "have \"coeff (reflect_poly f) 0 = 0\""], ["proof (prove)\nusing this:\n  reflect_poly f = 0\n\ngoal (1 subgoal):\n 1. coeff (reflect_poly f) 0 = (0::'a)", "by simp"], ["proof (state)\nthis:\n  coeff (reflect_poly f) 0 = (0::'a)\n\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> f = 0\n 2. f = 0 \\<Longrightarrow> reflect_poly f = 0", "then"], ["proof (chain)\npicking this:\n  coeff (reflect_poly f) 0 = (0::'a)", "have \"lead_coeff f = 0\""], ["proof (prove)\nusing this:\n  coeff (reflect_poly f) 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. lead_coeff f = (0::'a)", "by simp"], ["proof (state)\nthis:\n  lead_coeff f = (0::'a)\n\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> f = 0\n 2. f = 0 \\<Longrightarrow> reflect_poly f = 0", "then"], ["proof (chain)\npicking this:\n  lead_coeff f = (0::'a)", "show \"f = 0\""], ["proof (prove)\nusing this:\n  lead_coeff f = (0::'a)\n\ngoal (1 subgoal):\n 1. f = 0", "by simp"], ["proof (state)\nthis:\n  f = 0\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> reflect_poly f = 0", "qed simp"], ["", "lemma irreducible\\<^sub>d_reflect_poly_main:\n  fixes f :: \"'a :: {idom, semiring_gcd} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\"\n    and irr: \"irreducible\\<^sub>d (reflect_poly f)\"\n  shows \"irreducible\\<^sub>d f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree f\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "let ?r = reflect_poly"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree f\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "from irr degree_reflect_poly_eq[OF nz]"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d (reflect_poly f)\n  degree (reflect_poly f) = degree f", "show \"degree f > 0\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d (reflect_poly f)\n  degree (reflect_poly f) = degree f\n\ngoal (1 subgoal):\n 1. 0 < degree f", "by auto"], ["proof (state)\nthis:\n  0 < degree f\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "fix g h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "assume deg: \"degree g < degree f\" \"degree h < degree f\" and fgh: \"f = g * h\""], ["proof (state)\nthis:\n  degree g < degree f\n  degree h < degree f\n  f = g * h\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "from arg_cong[OF fgh, of \"\\<lambda> f. coeff f 0\"] nz"], ["proof (chain)\npicking this:\n  coeff f 0 = coeff (g * h) 0\n  coeff f 0 \\<noteq> (0::'a)", "have nz': \"coeff g 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff f 0 = coeff (g * h) 0\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeff g 0 \\<noteq> (0::'a)", "by (auto simp: coeff_mult_0)"], ["proof (state)\nthis:\n  coeff g 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "note rfgh = arg_cong[OF fgh, of reflect_poly, unfolded reflect_poly_mult[of g h]]"], ["proof (state)\nthis:\n  reflect_poly f = reflect_poly g * reflect_poly h\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "from deg degree_reflect_poly_le[of g] degree_reflect_poly_le[of h] degree_reflect_poly_eq[OF nz]"], ["proof (chain)\npicking this:\n  degree g < degree f\n  degree h < degree f\n  degree (reflect_poly g) \\<le> degree g\n  degree (reflect_poly h) \\<le> degree h\n  degree (reflect_poly f) = degree f", "have \"degree (?r h) < degree (?r f)\" \"degree (?r g) < degree (?r f)\""], ["proof (prove)\nusing this:\n  degree g < degree f\n  degree h < degree f\n  degree (reflect_poly g) \\<le> degree g\n  degree (reflect_poly h) \\<le> degree h\n  degree (reflect_poly f) = degree f\n\ngoal (1 subgoal):\n 1. degree (reflect_poly h) < degree (reflect_poly f) &&&\n    degree (reflect_poly g) < degree (reflect_poly f)", "by auto"], ["proof (state)\nthis:\n  degree (reflect_poly h) < degree (reflect_poly f)\n  degree (reflect_poly g) < degree (reflect_poly f)\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "with irr rfgh"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d (reflect_poly f)\n  reflect_poly f = reflect_poly g * reflect_poly h\n  degree (reflect_poly h) < degree (reflect_poly f)\n  degree (reflect_poly g) < degree (reflect_poly f)", "show False"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d (reflect_poly f)\n  reflect_poly f = reflect_poly g * reflect_poly h\n  degree (reflect_poly h) < degree (reflect_poly f)\n  degree (reflect_poly g) < degree (reflect_poly f)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible\\<^sub>d_reflect_poly:\n  fixes f :: \"'a :: {idom, semiring_gcd} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\"\n  shows \"irreducible\\<^sub>d (reflect_poly f) = irreducible\\<^sub>d f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d (reflect_poly f) = irreducible\\<^sub>d f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. irreducible\\<^sub>d (reflect_poly f) \\<Longrightarrow>\n    irreducible\\<^sub>d f\n 2. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "assume \"irreducible\\<^sub>d (reflect_poly f)\""], ["proof (state)\nthis:\n  irreducible\\<^sub>d (reflect_poly f)\n\ngoal (2 subgoals):\n 1. irreducible\\<^sub>d (reflect_poly f) \\<Longrightarrow>\n    irreducible\\<^sub>d f\n 2. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "from irreducible\\<^sub>d_reflect_poly_main[OF nz this]"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d f", "show \"irreducible\\<^sub>d f\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f", "."], ["proof (state)\nthis:\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "from nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> (0::'a)", "have nzr: \"coeff (reflect_poly f) 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeff (reflect_poly f) 0 \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  coeff (reflect_poly f) 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "assume \"irreducible\\<^sub>d f\""], ["proof (state)\nthis:\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "with nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> (0::'a)\n  irreducible\\<^sub>d f", "have \"irreducible\\<^sub>d (reflect_poly (reflect_poly f))\""], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> (0::'a)\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d (reflect_poly (reflect_poly f))", "by simp"], ["proof (state)\nthis:\n  irreducible\\<^sub>d (reflect_poly (reflect_poly f))\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f \\<Longrightarrow>\n    irreducible\\<^sub>d (reflect_poly f)", "from irreducible\\<^sub>d_reflect_poly_main[OF nzr this]"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d (reflect_poly f)", "show \"irreducible\\<^sub>d (reflect_poly f)\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d (reflect_poly f)\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d (reflect_poly f)", "."], ["proof (state)\nthis:\n  irreducible\\<^sub>d (reflect_poly f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_reflect_poly:\n  fixes f :: \"'a :: {idom,semiring_gcd} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\"\n  shows \"irreducible (reflect_poly f) = irreducible f\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible (reflect_poly f) = irreducible f", "proof (cases \"degree f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "case True"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "then"], ["proof (chain)\npicking this:\n  degree f = 0", "obtain f0 where \"f = [:f0:]\""], ["proof (prove)\nusing this:\n  degree f = 0\n\ngoal (1 subgoal):\n 1. (\\<And>f0. f = [:f0:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: degree0_coeffs)"], ["proof (state)\nthis:\n  f = [:f0:]\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "then"], ["proof (chain)\npicking this:\n  f = [:f0:]", "show ?thesis"], ["proof (prove)\nusing this:\n  f = [:f0:]\n\ngoal (1 subgoal):\n 1. irreducible (reflect_poly f) = irreducible f", "by simp"], ["proof (state)\nthis:\n  irreducible (reflect_poly f) = irreducible f\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "case deg: False"], ["proof (state)\nthis:\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 0 \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible (reflect_poly f) = irreducible f", "proof (cases \"primitive f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f\n 2. \\<not> primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "case False"], ["proof (state)\nthis:\n  \\<not> primitive f\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f\n 2. \\<not> primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "with deg irreducible_imp_primitive[of f] irreducible_imp_primitive[of \"reflect_poly f\"] nz"], ["proof (chain)\npicking this:\n  degree f \\<noteq> 0\n  \\<lbrakk>irreducible f; degree f \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> primitive f\n  \\<lbrakk>irreducible (reflect_poly f);\n   degree (reflect_poly f) \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> primitive (reflect_poly f)\n  coeff f 0 \\<noteq> (0::'a)\n  \\<not> primitive f", "show ?thesis"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  \\<lbrakk>irreducible f; degree f \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> primitive f\n  \\<lbrakk>irreducible (reflect_poly f);\n   degree (reflect_poly f) \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> primitive (reflect_poly f)\n  coeff f 0 \\<noteq> (0::'a)\n  \\<not> primitive f\n\ngoal (1 subgoal):\n 1. irreducible (reflect_poly f) = irreducible f", "unfolding primitive_reflect_poly"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  \\<lbrakk>irreducible f; degree f \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> primitive f\n  \\<lbrakk>irreducible (reflect_poly f);\n   degree (reflect_poly f) \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> primitive f\n  coeff f 0 \\<noteq> (0::'a)\n  \\<not> primitive f\n\ngoal (1 subgoal):\n 1. irreducible (reflect_poly f) = irreducible f", "by auto"], ["proof (state)\nthis:\n  irreducible (reflect_poly f) = irreducible f\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "case cf: True"], ["proof (state)\nthis:\n  primitive f\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "let ?r = \"reflect_poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "from nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> (0::'a)", "have nz': \"coeff (?r f) 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeff (reflect_poly f) 0 \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  coeff (reflect_poly f) 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "let ?ir = irreducible\\<^sub>d"], ["proof (state)\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "from irreducible\\<^sub>d_reflect_poly[OF nz] irreducible\\<^sub>d_reflect_poly[OF nz'] nz"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d (reflect_poly f) = irreducible\\<^sub>d f\n  irreducible\\<^sub>d (reflect_poly (reflect_poly f)) =\n  irreducible\\<^sub>d (reflect_poly f)\n  coeff f 0 \\<noteq> (0::'a)", "have \"?ir f \\<longleftrightarrow> ?ir (reflect_poly f)\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d (reflect_poly f) = irreducible\\<^sub>d f\n  irreducible\\<^sub>d (reflect_poly (reflect_poly f)) =\n  irreducible\\<^sub>d (reflect_poly f)\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f = irreducible\\<^sub>d (reflect_poly f)", "by auto"], ["proof (state)\nthis:\n  irreducible\\<^sub>d f = irreducible\\<^sub>d (reflect_poly f)\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "also"], ["proof (state)\nthis:\n  irreducible\\<^sub>d f = irreducible\\<^sub>d (reflect_poly f)\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "have \"... \\<longleftrightarrow> irreducible (reflect_poly f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d (reflect_poly f) = irreducible (reflect_poly f)", "by (rule irreducible_primitive_connect, unfold primitive_reflect_poly, fact cf)"], ["proof (state)\nthis:\n  irreducible\\<^sub>d (reflect_poly f) = irreducible (reflect_poly f)\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow>\n    irreducible (reflect_poly f) = irreducible f", "finally"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d f = irreducible (reflect_poly f)", "show ?thesis"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d f = irreducible (reflect_poly f)\n\ngoal (1 subgoal):\n 1. irreducible (reflect_poly f) = irreducible f", "by (unfold irreducible_primitive_connect[OF cf], auto)"], ["proof (state)\nthis:\n  irreducible (reflect_poly f) = irreducible f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  irreducible (reflect_poly f) = irreducible f\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Move *)"], ["", "lemma reflect_poly_dvd: \"(f :: 'a :: idom poly) dvd g \\<Longrightarrow> reflect_poly f dvd reflect_poly g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd g \\<Longrightarrow> reflect_poly f dvd reflect_poly g", "unfolding dvd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. g = f * k \\<Longrightarrow>\n    \\<exists>k. reflect_poly g = reflect_poly f * k", "by (auto simp: reflect_poly_mult)"], ["", "lemma square_free_reflect_poly: fixes f :: \"'a :: idom poly\" \n  assumes sf: \"square_free f\" \n  and nz: \"coeff f 0 \\<noteq> 0\" \nshows \"square_free (reflect_poly f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free (reflect_poly f)", "unfolding square_free_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly f \\<noteq> 0 \\<and>\n    (\\<forall>q.\n        0 < degree q \\<longrightarrow> \\<not> q * q dvd reflect_poly f)", "proof (intro allI conjI impI notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> False\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "let ?r = reflect_poly"], ["proof (state)\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> False\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from sf[unfolded square_free_def]"], ["proof (chain)\npicking this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)", "have f0: \"f \\<noteq> 0\" and sf: \"\\<And> q. 0 < degree q \\<Longrightarrow> q * q dvd f \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    (\\<And>q.\n        \\<lbrakk>0 < degree q; q * q dvd f\\<rbrakk> \\<Longrightarrow> False)", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  \\<lbrakk>0 < degree ?q1; ?q1 * ?q1 dvd f\\<rbrakk> \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. reflect_poly f = 0 \\<Longrightarrow> False\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from f0 nz"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  coeff f 0 \\<noteq> (0::'a)", "show \"?r f = 0 \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. reflect_poly f = 0 \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  reflect_poly f = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "assume 0: \"0 < degree q\" and dvd: \"q * q dvd ?r f\""], ["proof (state)\nthis:\n  0 < degree q\n  q * q dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from dvd"], ["proof (chain)\npicking this:\n  q * q dvd reflect_poly f", "have \"q dvd ?r f\""], ["proof (prove)\nusing this:\n  q * q dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. q dvd reflect_poly f", "by auto"], ["proof (state)\nthis:\n  q dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  q dvd reflect_poly f", "obtain x where id: \"?r f = q * x\""], ["proof (prove)\nusing this:\n  q dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        reflect_poly f = q * x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  reflect_poly f = q * x\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  reflect_poly f = q * x\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"coeff q 0 = 0\""], ["proof (state)\nthis:\n  coeff q 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"coeff (?r f) 0 = 0\""], ["proof (prove)\nusing this:\n  coeff q 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. coeff (reflect_poly f) 0 = (0::'a)", "using id"], ["proof (prove)\nusing this:\n  coeff q 0 = (0::'a)\n  reflect_poly f = q * x\n\ngoal (1 subgoal):\n 1. coeff (reflect_poly f) 0 = (0::'a)", "by (auto simp: coeff_mult)"], ["proof (state)\nthis:\n  coeff (reflect_poly f) 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "with nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> (0::'a)\n  coeff (reflect_poly f) 0 = (0::'a)", "have False"], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> (0::'a)\n  coeff (reflect_poly f) 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  coeff q 0 = (0::'a) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "hence nzq: \"coeff q 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff q 0 = (0::'a) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coeff q 0 \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  coeff q 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from dvd"], ["proof (chain)\npicking this:\n  q * q dvd reflect_poly f", "have \"?r (q * q) dvd ?r (?r f)\""], ["proof (prove)\nusing this:\n  q * q dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. reflect_poly (q * q) dvd reflect_poly (reflect_poly f)", "by (rule reflect_poly_dvd)"], ["proof (state)\nthis:\n  reflect_poly (q * q) dvd reflect_poly (reflect_poly f)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  reflect_poly (q * q) dvd reflect_poly (reflect_poly f)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "have \"?r (?r f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly (reflect_poly f) = f", "using nz"], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. reflect_poly (reflect_poly f) = f", "by auto"], ["proof (state)\nthis:\n  reflect_poly (reflect_poly f) = f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  reflect_poly (reflect_poly f) = f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "have \"?r (q * q) = ?r q * ?r q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly (q * q) = reflect_poly q * reflect_poly q", "by (rule reflect_poly_mult)"], ["proof (state)\nthis:\n  reflect_poly (q * q) = reflect_poly q * reflect_poly q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  reflect_poly q * reflect_poly q dvd f", "have \"?r q * ?r q dvd f\""], ["proof (prove)\nusing this:\n  reflect_poly q * reflect_poly q dvd f\n\ngoal (1 subgoal):\n 1. reflect_poly q * reflect_poly q dvd f", "."], ["proof (state)\nthis:\n  reflect_poly q * reflect_poly q dvd f\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>0 < degree q; q * q dvd reflect_poly f\\<rbrakk>\n       \\<Longrightarrow> False", "from sf[OF _ this] 0 nzq"], ["proof (chain)\npicking this:\n  0 < degree (reflect_poly q) \\<Longrightarrow> False\n  0 < degree q\n  coeff q 0 \\<noteq> (0::'a)", "show False"], ["proof (prove)\nusing this:\n  0 < degree (reflect_poly q) \\<Longrightarrow> False\n  0 < degree q\n  coeff q 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gcd_reflect_poly: fixes f :: \"'a :: {factorial_ring_gcd, semiring_gcd_mult_normalize} poly\"\n  assumes nz: \"coeff f 0 \\<noteq> 0\" \"coeff g 0 \\<noteq> 0\"\n  shows \"gcd (reflect_poly f) (reflect_poly g) = normalize (reflect_poly (gcd f g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (reflect_poly f) (reflect_poly g) =\n    normalize (reflect_poly (gcd f g))", "proof (rule sym, rule gcdI)"], ["proof (state)\ngoal (4 subgoals):\n 1. normalize (reflect_poly (gcd f g)) dvd reflect_poly f\n 2. normalize (reflect_poly (gcd f g)) dvd reflect_poly g\n 3. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))\n 4. normalize (normalize (reflect_poly (gcd f g))) =\n    normalize (reflect_poly (gcd f g))", "have \"gcd f g dvd f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd f g dvd f", "by auto"], ["proof (state)\nthis:\n  gcd f g dvd f\n\ngoal (4 subgoals):\n 1. normalize (reflect_poly (gcd f g)) dvd reflect_poly f\n 2. normalize (reflect_poly (gcd f g)) dvd reflect_poly g\n 3. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))\n 4. normalize (normalize (reflect_poly (gcd f g))) =\n    normalize (reflect_poly (gcd f g))", "from reflect_poly_dvd[OF this]"], ["proof (chain)\npicking this:\n  reflect_poly (gcd f g) dvd reflect_poly f", "show \"normalize (reflect_poly (gcd f g)) dvd reflect_poly f\""], ["proof (prove)\nusing this:\n  reflect_poly (gcd f g) dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. normalize (reflect_poly (gcd f g)) dvd reflect_poly f", "by simp"], ["proof (state)\nthis:\n  normalize (reflect_poly (gcd f g)) dvd reflect_poly f\n\ngoal (3 subgoals):\n 1. normalize (reflect_poly (gcd f g)) dvd reflect_poly g\n 2. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))\n 3. normalize (normalize (reflect_poly (gcd f g))) =\n    normalize (reflect_poly (gcd f g))", "have \"gcd f g dvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd f g dvd g", "by auto"], ["proof (state)\nthis:\n  gcd f g dvd g\n\ngoal (3 subgoals):\n 1. normalize (reflect_poly (gcd f g)) dvd reflect_poly g\n 2. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))\n 3. normalize (normalize (reflect_poly (gcd f g))) =\n    normalize (reflect_poly (gcd f g))", "from reflect_poly_dvd[OF this]"], ["proof (chain)\npicking this:\n  reflect_poly (gcd f g) dvd reflect_poly g", "show \"normalize (reflect_poly (gcd f g)) dvd reflect_poly g\""], ["proof (prove)\nusing this:\n  reflect_poly (gcd f g) dvd reflect_poly g\n\ngoal (1 subgoal):\n 1. normalize (reflect_poly (gcd f g)) dvd reflect_poly g", "by simp"], ["proof (state)\nthis:\n  normalize (reflect_poly (gcd f g)) dvd reflect_poly g\n\ngoal (2 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))\n 2. normalize (normalize (reflect_poly (gcd f g))) =\n    normalize (reflect_poly (gcd f g))", "show \"normalize (normalize (reflect_poly (gcd f g))) = normalize (reflect_poly (gcd f g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (normalize (reflect_poly (gcd f g))) =\n    normalize (reflect_poly (gcd f g))", "by auto"], ["proof (state)\nthis:\n  normalize (normalize (reflect_poly (gcd f g))) =\n  normalize (reflect_poly (gcd f g))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "assume hf: \"h dvd reflect_poly f\" and hg: \"h dvd reflect_poly g\""], ["proof (state)\nthis:\n  h dvd reflect_poly f\n  h dvd reflect_poly g\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "from hf"], ["proof (chain)\npicking this:\n  h dvd reflect_poly f", "obtain k where \"reflect_poly f = h * k\""], ["proof (prove)\nusing this:\n  h dvd reflect_poly f\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        reflect_poly f = h * k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. reflect_poly f = h * k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        reflect_poly f = h * k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  reflect_poly f = h * k\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "from arg_cong[OF this, of \"\\<lambda> f. coeff f 0\", unfolded coeff_mult_0] nz(1)"], ["proof (chain)\npicking this:\n  coeff (reflect_poly f) 0 = coeff h 0 * coeff k 0\n  coeff f 0 \\<noteq> (0::'a)", "have h: \"coeff h 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff (reflect_poly f) 0 = coeff h 0 * coeff k 0\n  coeff f 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coeff h 0 \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  coeff h 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "from reflect_poly_dvd[OF hf] reflect_poly_dvd[OF hg]"], ["proof (chain)\npicking this:\n  reflect_poly h dvd reflect_poly (reflect_poly f)\n  reflect_poly h dvd reflect_poly (reflect_poly g)", "have \"reflect_poly h dvd f\" \"reflect_poly h dvd g\""], ["proof (prove)\nusing this:\n  reflect_poly h dvd reflect_poly (reflect_poly f)\n  reflect_poly h dvd reflect_poly (reflect_poly g)\n\ngoal (1 subgoal):\n 1. reflect_poly h dvd f &&& reflect_poly h dvd g", "using nz"], ["proof (prove)\nusing this:\n  reflect_poly h dvd reflect_poly (reflect_poly f)\n  reflect_poly h dvd reflect_poly (reflect_poly g)\n  coeff f 0 \\<noteq> (0::'a)\n  coeff g 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. reflect_poly h dvd f &&& reflect_poly h dvd g", "by auto"], ["proof (state)\nthis:\n  reflect_poly h dvd f\n  reflect_poly h dvd g\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "hence \"reflect_poly h dvd gcd f g\""], ["proof (prove)\nusing this:\n  reflect_poly h dvd f\n  reflect_poly h dvd g\n\ngoal (1 subgoal):\n 1. reflect_poly h dvd gcd f g", "by auto"], ["proof (state)\nthis:\n  reflect_poly h dvd gcd f g\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "from reflect_poly_dvd[OF this] h"], ["proof (chain)\npicking this:\n  reflect_poly (reflect_poly h) dvd reflect_poly (gcd f g)\n  coeff h 0 \\<noteq> (0::'a)", "have \"h dvd reflect_poly (gcd f g)\""], ["proof (prove)\nusing this:\n  reflect_poly (reflect_poly h) dvd reflect_poly (gcd f g)\n  coeff h 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. h dvd reflect_poly (gcd f g)", "by auto"], ["proof (state)\nthis:\n  h dvd reflect_poly (gcd f g)\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd reflect_poly f; d dvd reflect_poly g\\<rbrakk>\n       \\<Longrightarrow> d dvd normalize (reflect_poly (gcd f g))", "thus \"h dvd normalize (reflect_poly (gcd f g))\""], ["proof (prove)\nusing this:\n  h dvd reflect_poly (gcd f g)\n\ngoal (1 subgoal):\n 1. h dvd normalize (reflect_poly (gcd f g))", "by auto"], ["proof (state)\nthis:\n  h dvd normalize (reflect_poly (gcd f g))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma linear_primitive_irreducible:\n  fixes f :: \"'a :: {comm_semiring_1,semiring_no_zero_divisors} poly\"\n  assumes deg: \"degree f = 1\" and cf: \"primitive f\"\n  shows \"irreducible f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible f", "proof (intro irreducibleI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<noteq> 0\n 2. \\<not> f dvd 1\n 3. \\<And>a b. f = a * b \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "fix a b"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<noteq> 0\n 2. \\<not> f dvd 1\n 3. \\<And>a b. f = a * b \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "assume fab: \"f = a * b\""], ["proof (state)\nthis:\n  f = a * b\n\ngoal (3 subgoals):\n 1. f \\<noteq> 0\n 2. \\<not> f dvd 1\n 3. \\<And>a b. f = a * b \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "with deg"], ["proof (chain)\npicking this:\n  degree f = 1\n  f = a * b", "have a0: \"a \\<noteq> 0\" and b0: \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree f = 1\n  f = a * b\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 &&& b \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> 0\n  b \\<noteq> 0\n\ngoal (3 subgoals):\n 1. f \\<noteq> 0\n 2. \\<not> f dvd 1\n 3. \\<And>a b. f = a * b \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "from deg[unfolded fab] degree_mult_eq[OF this]"], ["proof (chain)\npicking this:\n  degree (a * b) = 1\n  degree (a * b) = degree a + degree b", "have \"degree a = 0 \\<or> degree b = 0\""], ["proof (prove)\nusing this:\n  degree (a * b) = 1\n  degree (a * b) = degree a + degree b\n\ngoal (1 subgoal):\n 1. degree a = 0 \\<or> degree b = 0", "by auto"], ["proof (state)\nthis:\n  degree a = 0 \\<or> degree b = 0\n\ngoal (3 subgoals):\n 1. f \\<noteq> 0\n 2. \\<not> f dvd 1\n 3. \\<And>a b. f = a * b \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "then"], ["proof (chain)\npicking this:\n  degree a = 0 \\<or> degree b = 0", "show \"a dvd 1 \\<or> b dvd 1\""], ["proof (prove)\nusing this:\n  degree a = 0 \\<or> degree b = 0\n\ngoal (1 subgoal):\n 1. a dvd 1 \\<or> b dvd 1", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1\n 2. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "assume \"degree a = 0\""], ["proof (state)\nthis:\n  degree a = 0\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1\n 2. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "then"], ["proof (chain)\npicking this:\n  degree a = 0", "obtain a0 where a: \"a = [:a0:]\""], ["proof (prove)\nusing this:\n  degree a = 0\n\ngoal (1 subgoal):\n 1. (\\<And>a0. a = [:a0:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest:degree0_coeffs)"], ["proof (state)\nthis:\n  a = [:a0:]\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1\n 2. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "with fab"], ["proof (chain)\npicking this:\n  f = a * b\n  a = [:a0:]", "have \"c \\<in> set (coeffs f) \\<Longrightarrow> a0 dvd c\" for c"], ["proof (prove)\nusing this:\n  f = a * b\n  a = [:a0:]\n\ngoal (1 subgoal):\n 1. c \\<in> set (coeffs f) \\<Longrightarrow> a0 dvd c", "by (cases \"a0 = 0\", auto simp: coeffs_smult)"], ["proof (state)\nthis:\n  ?c \\<in> set (coeffs f) \\<Longrightarrow> a0 dvd ?c\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1\n 2. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "with cf"], ["proof (chain)\npicking this:\n  primitive f\n  ?c \\<in> set (coeffs f) \\<Longrightarrow> a0 dvd ?c", "show ?thesis"], ["proof (prove)\nusing this:\n  primitive f\n  ?c \\<in> set (coeffs f) \\<Longrightarrow> a0 dvd ?c\n\ngoal (1 subgoal):\n 1. a dvd 1 \\<or> b dvd 1", "by (auto dest: primitiveD simp: a)"], ["proof (state)\nthis:\n  a dvd 1 \\<or> b dvd 1\n\ngoal (1 subgoal):\n 1. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "assume \"degree b = 0\""], ["proof (state)\nthis:\n  degree b = 0\n\ngoal (1 subgoal):\n 1. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "then"], ["proof (chain)\npicking this:\n  degree b = 0", "obtain b0 where b: \"b = [:b0:]\""], ["proof (prove)\nusing this:\n  degree b = 0\n\ngoal (1 subgoal):\n 1. (\\<And>b0. b = [:b0:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest:degree0_coeffs)"], ["proof (state)\nthis:\n  b = [:b0:]\n\ngoal (1 subgoal):\n 1. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "with fab"], ["proof (chain)\npicking this:\n  f = a * b\n  b = [:b0:]", "have \"c \\<in> set (coeffs f) \\<Longrightarrow> b0 dvd c\" for c"], ["proof (prove)\nusing this:\n  f = a * b\n  b = [:b0:]\n\ngoal (1 subgoal):\n 1. c \\<in> set (coeffs f) \\<Longrightarrow> b0 dvd c", "by (cases \"b0 = 0\", auto simp: coeffs_smult)"], ["proof (state)\nthis:\n  ?c \\<in> set (coeffs f) \\<Longrightarrow> b0 dvd ?c\n\ngoal (1 subgoal):\n 1. degree b = 0 \\<Longrightarrow> a dvd 1 \\<or> b dvd 1", "with cf"], ["proof (chain)\npicking this:\n  primitive f\n  ?c \\<in> set (coeffs f) \\<Longrightarrow> b0 dvd ?c", "show ?thesis"], ["proof (prove)\nusing this:\n  primitive f\n  ?c \\<in> set (coeffs f) \\<Longrightarrow> b0 dvd ?c\n\ngoal (1 subgoal):\n 1. a dvd 1 \\<or> b dvd 1", "by (auto dest: primitiveD simp: b)"], ["proof (state)\nthis:\n  a dvd 1 \\<or> b dvd 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a dvd 1 \\<or> b dvd 1\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0\n 2. \\<not> f dvd 1", "qed (insert deg, auto simp: poly_dvd_1)"], ["", "lemma square_free_factorization_last_coeff_nz: \n  assumes sff: \"square_free_factorization f (a, fs)\" \n  and mem: \"(fi,i) \\<in> set fs\" \n  and nz: \"coeff f 0 \\<noteq> 0\" \nshows \"coeff fi 0 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff fi 0 \\<noteq> (0::'a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. coeff fi 0 = (0::'a) \\<Longrightarrow> False", "assume fi: \"coeff fi 0 = 0\""], ["proof (state)\nthis:\n  coeff fi 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. coeff fi 0 = (0::'a) \\<Longrightarrow> False", "note sff_list = square_free_factorization_prod_list[OF sff]"], ["proof (state)\nthis:\n  f = Polynomial.smult a (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. coeff fi 0 = (0::'a) \\<Longrightarrow> False", "note sff = square_free_factorizationD[OF sff]"], ["proof (state)\nthis:\n  f = Polynomial.smult a (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n  (?a, ?i) \\<in> set fs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set fs; (?b, ?j) \\<in> set fs;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  f = 0 \\<Longrightarrow> a = (0::'a) \\<and> fs = []\n  distinct fs\n\ngoal (1 subgoal):\n 1. coeff fi 0 = (0::'a) \\<Longrightarrow> False", "from sff_list"], ["proof (chain)\npicking this:\n  f = Polynomial.smult a (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)", "have \"coeff f 0 = a * coeff (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i) 0\""], ["proof (prove)\nusing this:\n  f = Polynomial.smult a (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. coeff f 0 = a * coeff (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i) 0", "by simp"], ["proof (state)\nthis:\n  coeff f 0 = a * coeff (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i) 0\n\ngoal (1 subgoal):\n 1. coeff fi 0 = (0::'a) \\<Longrightarrow> False", "with split_list[OF mem] fi"], ["proof (chain)\npicking this:\n  \\<exists>ys zs. fs = ys @ (fi, i) # zs\n  coeff fi 0 = (0::'a)\n  coeff f 0 = a * coeff (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i) 0", "have \"coeff f 0 = 0\""], ["proof (prove)\nusing this:\n  \\<exists>ys zs. fs = ys @ (fi, i) # zs\n  coeff fi 0 = (0::'a)\n  coeff f 0 = a * coeff (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i) 0\n\ngoal (1 subgoal):\n 1. coeff f 0 = (0::'a)", "by (auto simp: coeff_mult)"], ["proof (state)\nthis:\n  coeff f 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. coeff fi 0 = (0::'a) \\<Longrightarrow> False", "with nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> (0::'a)\n  coeff f 0 = (0::'a)", "show False"], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> (0::'a)\n  coeff f 0 = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes alg :: int_poly_factorization_algorithm\nbegin"], ["", "(* main factorization algorithm for square-free, content-free, non-constant polynomial\n   that do not have 0 as root, with special cases and reciprocal polynomials *)"], ["", "definition main_int_poly_factorization :: \"int poly \\<Rightarrow> int poly list\" where\n  \"main_int_poly_factorization f = (let df = degree f\n    in if df = 1 then [f] else\n    if abs (coeff f 0) < abs (coeff f df) \\<comment> \\<open>take reciprocal polynomial, if \\<open>f(0) < lc(f)\\<close>\\<close>\n     then map reflect_poly (int_poly_factorization_algorithm alg (reflect_poly f))\n     else int_poly_factorization_algorithm alg f)\""], ["", "(* preprocessing via square-free factorization *)"], ["", "definition internal_int_poly_factorization :: \"int poly \\<Rightarrow> int \\<times> (int poly \\<times> nat) list\" where\n  \"internal_int_poly_factorization f = (\n    case square_free_factorization_int f of \n     (a,gis) \\<Rightarrow> (a, [ (h,i) . (g,i) \\<leftarrow> gis, h \\<leftarrow> main_int_poly_factorization g ])\n  )\""], ["", "lemma internal_int_poly_factorization_code[code]: \"internal_int_poly_factorization f = (\n    case square_free_factorization_int f of (a,gis) \\<Rightarrow>\n   (a, concat (map (\\<lambda> (g,i). (map (\\<lambda> f. (f,i)) (main_int_poly_factorization g))) gis)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.internal_int_poly_factorization f =\n    (case square_free_factorization_int f of\n     (a, gis) \\<Rightarrow>\n       (a, concat\n            (map (\\<lambda>(g, i).\n                     map (\\<lambda>f. (f, i))\n                      (local.main_int_poly_factorization g))\n              gis)))", "unfolding internal_int_poly_factorization_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case square_free_factorization_int f of\n     (a, gis) \\<Rightarrow>\n       (a, concat\n            (map (\\<lambda>(g, i).\n                     map (\\<lambda>h. (h, i))\n                      (local.main_int_poly_factorization g))\n              gis))) =\n    (case square_free_factorization_int f of\n     (a, gis) \\<Rightarrow>\n       (a, concat\n            (map (\\<lambda>(g, i).\n                     map (\\<lambda>f. (f, i))\n                      (local.main_int_poly_factorization g))\n              gis)))", "by auto"], ["", "(* factorization for polynomials that do not have 0 as root,\n   with special treatment of polynomials of degree at most 1 *)"], ["", "definition factorize_int_last_nz_poly :: \"int poly \\<Rightarrow> int \\<times> (int poly \\<times> nat) list\" where\n  \"factorize_int_last_nz_poly f = (let df = degree f\n    in if df = 0 then (coeff f 0, []) else if df = 1 then (content f,[(primitive_part f,0)]) else\n    internal_int_poly_factorization f)\""], ["", "(* factorization for arbitrary polynomials *)"], ["", "definition factorize_int_poly_generic :: \"int poly \\<Rightarrow> int \\<times> (int poly \\<times> nat) list\" where\n  \"factorize_int_poly_generic f = (case x_split f of (n,g) \\<comment> \\<open>extract \\<open>x^n\\<close>\\<close>\n    \\<Rightarrow> if g = 0 then (0,[]) else case factorize_int_last_nz_poly g of (a,fs)\n    \\<Rightarrow> if n = 0 then (a,fs) else (a, (monom 1 1, n - 1) # fs))\""], ["", "lemma factorize_int_poly_0[simp]: \"factorize_int_poly_generic 0 = (0,[])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.factorize_int_poly_generic 0 = (0, [])", "unfolding factorize_int_poly_generic_def x_split_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case let fs = coeffs 0; zs = takeWhile ((=) 0) fs\n          in case zs of [] \\<Rightarrow> (0, 0)\n             | a # list \\<Rightarrow>\n                 (length zs, poly_of_list (dropWhile ((=) 0) fs)) of\n     (n, g) \\<Rightarrow>\n       if g = 0 then (0, [])\n       else case local.factorize_int_last_nz_poly g of\n            (a, fs) \\<Rightarrow>\n              if n = 0 then (a, fs) else (a, (monom 1 1, n - 1) # fs)) =\n    (0, [])", "by simp"], ["", "lemma main_int_poly_factorization: \n  assumes res: \"main_int_poly_factorization f = fs\" \n  and sf: \"square_free f\"\n  and df: \"degree f > 0\"\n  and nz: \"coeff f 0 \\<noteq> 0\" \nshows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible\\<^sub>d fi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "proof (cases \"degree f = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n 2. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "case True"], ["proof (state)\nthis:\n  degree f = 1\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n 2. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "with res[unfolded main_int_poly_factorization_def Let_def]"], ["proof (chain)\npicking this:\n  (if degree f = 1 then [f]\n   else if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n        then map reflect_poly\n              (int_poly_factorization_algorithm alg (reflect_poly f))\n        else int_poly_factorization_algorithm alg f) =\n  fs\n  degree f = 1", "have \"fs = [f]\""], ["proof (prove)\nusing this:\n  (if degree f = 1 then [f]\n   else if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n        then map reflect_poly\n              (int_poly_factorization_algorithm alg (reflect_poly f))\n        else int_poly_factorization_algorithm alg f) =\n  fs\n  degree f = 1\n\ngoal (1 subgoal):\n 1. fs = [f]", "by auto"], ["proof (state)\nthis:\n  fs = [f]\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n 2. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "with True"], ["proof (chain)\npicking this:\n  degree f = 1\n  fs = [f]", "show ?thesis"], ["proof (prove)\nusing this:\n  degree f = 1\n  fs = [f]\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "by auto"], ["proof (state)\nthis:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "case False"], ["proof (state)\nthis:\n  degree f \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "hence *: \"(if degree f = 1 then t :: int poly list else e) = e\" for t e"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (if degree f = 1 then t else e) = e", "by auto"], ["proof (state)\nthis:\n  (if degree f = 1 then ?t else ?e) = ?e\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "note res = res[unfolded main_int_poly_factorization_def Let_def *]"], ["proof (state)\nthis:\n  (if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n   then map reflect_poly\n         (int_poly_factorization_algorithm alg (reflect_poly f))\n   else int_poly_factorization_algorithm alg f) =\n  fs\n\ngoal (1 subgoal):\n 1. degree f \\<noteq> 1 \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "proof (cases \"abs (coeff f 0) < abs (coeff f (degree f))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n 2. \\<not> \\<bar>coeff f 0\\<bar>\n           < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "case False"], ["proof (state)\nthis:\n  \\<not> \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n\ngoal (2 subgoals):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n 2. \\<not> \\<bar>coeff f 0\\<bar>\n           < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "with res"], ["proof (chain)\npicking this:\n  (if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n   then map reflect_poly\n         (int_poly_factorization_algorithm alg (reflect_poly f))\n   else int_poly_factorization_algorithm alg f) =\n  fs\n  \\<not> \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>", "have \"int_poly_factorization_algorithm alg f = fs\""], ["proof (prove)\nusing this:\n  (if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n   then map reflect_poly\n         (int_poly_factorization_algorithm alg (reflect_poly f))\n   else int_poly_factorization_algorithm alg f) =\n  fs\n  \\<not> \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n\ngoal (1 subgoal):\n 1. int_poly_factorization_algorithm alg f = fs", "by auto"], ["proof (state)\nthis:\n  int_poly_factorization_algorithm alg f = fs\n\ngoal (2 subgoals):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n 2. \\<not> \\<bar>coeff f 0\\<bar>\n           < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from int_poly_factorization_algorithm_irreducible\\<^sub>d[OF this sf df]"], ["proof (chain)\npicking this:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "show ?thesis"], ["proof (prove)\nusing this:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "."], ["proof (state)\nthis:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "case True"], ["proof (state)\nthis:\n  \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "let ?f = \"reflect_poly f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from square_free_reflect_poly[OF sf nz]"], ["proof (chain)\npicking this:\n  square_free (reflect_poly f)", "have sf: \"square_free ?f\""], ["proof (prove)\nusing this:\n  square_free (reflect_poly f)\n\ngoal (1 subgoal):\n 1. square_free (reflect_poly f)", "."], ["proof (state)\nthis:\n  square_free (reflect_poly f)\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from nz df"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> 0\n  0 < degree f", "have df: \"degree ?f > 0\""], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> 0\n  0 < degree f\n\ngoal (1 subgoal):\n 1. 0 < degree (reflect_poly f)", "by simp"], ["proof (state)\nthis:\n  0 < degree (reflect_poly f)\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from True res"], ["proof (chain)\npicking this:\n  \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n  (if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n   then map reflect_poly\n         (int_poly_factorization_algorithm alg (reflect_poly f))\n   else int_poly_factorization_algorithm alg f) =\n  fs", "obtain gs where fs: \"fs = map reflect_poly gs\" \n      and gs: \"int_poly_factorization_algorithm alg (reflect_poly f) = gs\""], ["proof (prove)\nusing this:\n  \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n  (if \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar>\n   then map reflect_poly\n         (int_poly_factorization_algorithm alg (reflect_poly f))\n   else int_poly_factorization_algorithm alg f) =\n  fs\n\ngoal (1 subgoal):\n 1. (\\<And>gs.\n        \\<lbrakk>fs = map reflect_poly gs;\n         int_poly_factorization_algorithm alg (reflect_poly f) = gs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fs = map reflect_poly gs\n  int_poly_factorization_algorithm alg (reflect_poly f) = gs\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from int_poly_factorization_algorithm_irreducible\\<^sub>d[OF gs sf df]"], ["proof (chain)\npicking this:\n  reflect_poly f = prod_list gs \\<and>\n  (\\<forall>fi\\<in>set gs. irreducible\\<^sub>d fi)", "have id: \"reflect_poly ?f = reflect_poly (prod_list gs)\" \"?f = prod_list gs\" \n      and irr: \"\\<And> gi. gi \\<in> set gs \\<Longrightarrow> irreducible\\<^sub>d gi\""], ["proof (prove)\nusing this:\n  reflect_poly f = prod_list gs \\<and>\n  (\\<forall>fi\\<in>set gs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. (reflect_poly (reflect_poly f) = reflect_poly (prod_list gs) &&&\n     reflect_poly f = prod_list gs) &&&\n    (\\<And>gi. gi \\<in> set gs \\<Longrightarrow> irreducible\\<^sub>d gi)", "by auto"], ["proof (state)\nthis:\n  reflect_poly (reflect_poly f) = reflect_poly (prod_list gs)\n  reflect_poly f = prod_list gs\n  ?gi \\<in> set gs \\<Longrightarrow> irreducible\\<^sub>d ?gi\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from id(1)"], ["proof (chain)\npicking this:\n  reflect_poly (reflect_poly f) = reflect_poly (prod_list gs)", "have f_fs: \"f = prod_list fs\""], ["proof (prove)\nusing this:\n  reflect_poly (reflect_poly f) = reflect_poly (prod_list gs)\n\ngoal (1 subgoal):\n 1. f = prod_list fs", "unfolding fs"], ["proof (prove)\nusing this:\n  reflect_poly (reflect_poly f) = reflect_poly (prod_list gs)\n\ngoal (1 subgoal):\n 1. f = prod_list (map reflect_poly gs)", "using nz"], ["proof (prove)\nusing this:\n  reflect_poly (reflect_poly f) = reflect_poly (prod_list gs)\n  coeff f 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = prod_list (map reflect_poly gs)", "by (simp add: reflect_poly_prod_list)"], ["proof (state)\nthis:\n  f = prod_list fs\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "{"], ["proof (state)\nthis:\n  f = prod_list fs\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "fix fi"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "assume \"fi \\<in> set fs\""], ["proof (state)\nthis:\n  fi \\<in> set fs\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from this[unfolded fs]"], ["proof (chain)\npicking this:\n  fi \\<in> set (map reflect_poly gs)", "obtain gi where gi: \"gi \\<in> set gs\" and fi: \"fi = reflect_poly gi\""], ["proof (prove)\nusing this:\n  fi \\<in> set (map reflect_poly gs)\n\ngoal (1 subgoal):\n 1. (\\<And>gi.\n        \\<lbrakk>gi \\<in> set gs; fi = reflect_poly gi\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gi \\<in> set gs\n  fi = reflect_poly gi\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "{"], ["proof (state)\nthis:\n  gi \\<in> set gs\n  fi = reflect_poly gi\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "assume \"coeff gi 0 = 0\""], ["proof (state)\nthis:\n  coeff gi 0 = 0\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "with id(2) split_list[OF gi]"], ["proof (chain)\npicking this:\n  reflect_poly f = prod_list gs\n  \\<exists>ys zs. gs = ys @ gi # zs\n  coeff gi 0 = 0", "have \"coeff ?f 0 = 0\""], ["proof (prove)\nusing this:\n  reflect_poly f = prod_list gs\n  \\<exists>ys zs. gs = ys @ gi # zs\n  coeff gi 0 = 0\n\ngoal (1 subgoal):\n 1. coeff (reflect_poly f) 0 = 0", "by (auto simp: coeff_mult)"], ["proof (state)\nthis:\n  coeff (reflect_poly f) 0 = 0\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "with nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> 0\n  coeff (reflect_poly f) 0 = 0", "have False"], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> 0\n  coeff (reflect_poly f) 0 = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "}"], ["proof (state)\nthis:\n  coeff gi 0 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "hence nzg: \"coeff gi 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff gi 0 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. coeff gi 0 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  coeff gi 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from irreducible\\<^sub>d_reflect_poly[OF nzg] irr[OF gi]"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d (reflect_poly gi) = irreducible\\<^sub>d gi\n  irreducible\\<^sub>d gi", "have \"irreducible\\<^sub>d fi\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d (reflect_poly gi) = irreducible\\<^sub>d gi\n  irreducible\\<^sub>d gi\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d fi", "unfolding fi"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d (reflect_poly gi) = irreducible\\<^sub>d gi\n  irreducible\\<^sub>d gi\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d (reflect_poly gi)", "by simp"], ["proof (state)\nthis:\n  irreducible\\<^sub>d fi\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "}"], ["proof (state)\nthis:\n  ?fi2 \\<in> set fs \\<Longrightarrow> irreducible\\<^sub>d ?fi2\n\ngoal (1 subgoal):\n 1. \\<bar>coeff f 0\\<bar> < \\<bar>lead_coeff f\\<bar> \\<Longrightarrow>\n    f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "with f_fs"], ["proof (chain)\npicking this:\n  f = prod_list fs\n  ?fi2 \\<in> set fs \\<Longrightarrow> irreducible\\<^sub>d ?fi2", "show ?thesis"], ["proof (prove)\nusing this:\n  f = prod_list fs\n  ?fi2 \\<in> set fs \\<Longrightarrow> irreducible\\<^sub>d ?fi2\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "by auto"], ["proof (state)\nthis:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma internal_int_poly_factorization_mem:\n  assumes f: \"coeff f 0 \\<noteq> 0\" \n  and res: \"internal_int_poly_factorization f = (c,fs)\"\n  and mem: \"(fi,i) \\<in> set fs\"\n  shows \"irreducible fi\" \"irreducible\\<^sub>d fi\" and \"primitive fi\" and \"degree fi \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (irreducible fi &&& irreducible\\<^sub>d fi) &&&\n    primitive fi &&& degree fi \\<noteq> 0", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "obtain a psi where a_psi: \"square_free_factorization_int f = (a, psi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a psi.\n        square_free_factorization_int f = (a, psi) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  square_free_factorization_int f = (a, psi)\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from square_free_factorization_int[OF this]"], ["proof (chain)\npicking this:\n  square_free_factorization f (a, psi)\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow>\n  primitive ?fi \\<and> 0 < lead_coeff ?fi", "have sff: \"square_free_factorization f (a, psi)\"\n    and cnt: \"\\<And> fi i. (fi, i) \\<in> set psi \\<Longrightarrow> primitive fi\""], ["proof (prove)\nusing this:\n  square_free_factorization f (a, psi)\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow>\n  primitive ?fi \\<and> 0 < lead_coeff ?fi\n\ngoal (1 subgoal):\n 1. square_free_factorization f (a, psi) &&&\n    (\\<And>fi i. (fi, i) \\<in> set psi \\<Longrightarrow> primitive fi)", "by blast+"], ["proof (state)\nthis:\n  square_free_factorization f (a, psi)\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> primitive ?fi\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from square_free_factorization_last_coeff_nz[OF sff _ f]"], ["proof (chain)\npicking this:\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0", "have nz_fi: \"\\<And> fi i. (fi, i) \\<in> set psi \\<Longrightarrow> coeff fi 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>fi i.\n       (fi, i) \\<in> set psi \\<Longrightarrow> coeff fi 0 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "note res = res[unfolded internal_int_poly_factorization_def a_psi Let_def split]"], ["proof (state)\nthis:\n  (a, concat\n       (map (\\<lambda>(g, i).\n                map (\\<lambda>h. (h, i))\n                 (local.main_int_poly_factorization g))\n         psi)) =\n  (c, fs)\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "obtain fact where fact: \"fact = (\\<lambda> (q,i :: nat). (map (\\<lambda> f. (f,i)) (main_int_poly_factorization q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fact.\n        fact =\n        (\\<lambda>(q, i).\n            map (\\<lambda>f. (f, i))\n             (local.main_int_poly_factorization q)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fact =\n  (\\<lambda>(q, i).\n      map (\\<lambda>f. (f, i)) (local.main_int_poly_factorization q))\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from res[unfolded split Let_def]"], ["proof (chain)\npicking this:\n  (a, concat\n       (map (\\<lambda>(g, i).\n                map (\\<lambda>h. (h, i))\n                 (local.main_int_poly_factorization g))\n         psi)) =\n  (c, fs)", "have c: \"c = a\" and fs: \"fs = concat (map fact psi)\""], ["proof (prove)\nusing this:\n  (a, concat\n       (map (\\<lambda>(g, i).\n                map (\\<lambda>h. (h, i))\n                 (local.main_int_poly_factorization g))\n         psi)) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. c = a &&& fs = concat (map fact psi)", "unfolding fact"], ["proof (prove)\nusing this:\n  (a, concat\n       (map (\\<lambda>(g, i).\n                map (\\<lambda>h. (h, i))\n                 (local.main_int_poly_factorization g))\n         psi)) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. c = a &&&\n    fs =\n    concat\n     (map (\\<lambda>(q, i).\n              map (\\<lambda>f. (f, i))\n               (local.main_int_poly_factorization q))\n       psi)", "by auto"], ["proof (state)\nthis:\n  c = a\n  fs = concat (map fact psi)\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "note sff' = square_free_factorizationD[OF sff]"], ["proof (state)\nthis:\n  f = Polynomial.smult a (\\<Prod>(a, i)\\<in>set psi. a ^ Suc i)\n  (?a, ?i) \\<in> set psi \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set psi; (?b, ?j) \\<in> set psi;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  f = 0 \\<Longrightarrow> a = 0 \\<and> psi = []\n  distinct psi\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from mem[unfolded fs, simplified]"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>set psi. (fi, i) \\<in> set (fact x)", "obtain d j where psi: \"(d,j) \\<in> set psi\"\n     and fi: \"(fi, i) \\<in> set (fact (d,j))\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>set psi. (fi, i) \\<in> set (fact x)\n\ngoal (1 subgoal):\n 1. (\\<And>d j.\n        \\<lbrakk>(d, j) \\<in> set psi;\n         (fi, i) \\<in> set (fact (d, j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (d, j) \\<in> set psi\n  (fi, i) \\<in> set (fact (d, j))\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "obtain hs where d: \"main_int_poly_factorization d = hs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>hs.\n        local.main_int_poly_factorization d = hs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  local.main_int_poly_factorization d = hs\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from fi[unfolded d split fact]"], ["proof (chain)\npicking this:\n  (fi, i) \\<in> set (map (\\<lambda>f. (f, j)) hs)", "have fi: \"fi \\<in> set hs\""], ["proof (prove)\nusing this:\n  (fi, i) \\<in> set (map (\\<lambda>f. (f, j)) hs)\n\ngoal (1 subgoal):\n 1. fi \\<in> set hs", "by auto"], ["proof (state)\nthis:\n  fi \\<in> set hs\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from main_int_poly_factorization[OF d _ _ nz_fi[OF psi]] sff'(2)[OF psi] cnt[OF psi]"], ["proof (chain)\npicking this:\n  \\<lbrakk>square_free d; 0 < degree d\\<rbrakk>\n  \\<Longrightarrow> d = prod_list hs \\<and>\n                    (\\<forall>fi\\<in>set hs. irreducible\\<^sub>d fi)\n  square_free d \\<and> degree d \\<noteq> 0\n  primitive d", "have main: \"d = prod_list hs\" \"\\<And> fi. fi \\<in> set hs \\<Longrightarrow> irreducible\\<^sub>d fi\""], ["proof (prove)\nusing this:\n  \\<lbrakk>square_free d; 0 < degree d\\<rbrakk>\n  \\<Longrightarrow> d = prod_list hs \\<and>\n                    (\\<forall>fi\\<in>set hs. irreducible\\<^sub>d fi)\n  square_free d \\<and> degree d \\<noteq> 0\n  primitive d\n\ngoal (1 subgoal):\n 1. d = prod_list hs &&&\n    (\\<And>fi. fi \\<in> set hs \\<Longrightarrow> irreducible\\<^sub>d fi)", "by auto"], ["proof (state)\nthis:\n  d = prod_list hs\n  ?fi \\<in> set hs \\<Longrightarrow> irreducible\\<^sub>d ?fi\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "from main split_list[OF fi]"], ["proof (chain)\npicking this:\n  d = prod_list hs\n  ?fi \\<in> set hs \\<Longrightarrow> irreducible\\<^sub>d ?fi\n  \\<exists>ys zs. hs = ys @ fi # zs", "have \"content fi dvd content d\""], ["proof (prove)\nusing this:\n  d = prod_list hs\n  ?fi \\<in> set hs \\<Longrightarrow> irreducible\\<^sub>d ?fi\n  \\<exists>ys zs. hs = ys @ fi # zs\n\ngoal (1 subgoal):\n 1. content fi dvd content d", "by auto"], ["proof (state)\nthis:\n  content fi dvd content d\n\ngoal (4 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. primitive fi\n 4. degree fi \\<noteq> 0", "with cnt[OF psi]"], ["proof (chain)\npicking this:\n  primitive d\n  content fi dvd content d", "show cnt: \"primitive fi\""], ["proof (prove)\nusing this:\n  primitive d\n  content fi dvd content d\n\ngoal (1 subgoal):\n 1. primitive fi", "by simp"], ["proof (state)\nthis:\n  primitive fi\n\ngoal (3 subgoals):\n 1. irreducible fi\n 2. irreducible\\<^sub>d fi\n 3. degree fi \\<noteq> 0", "from main(2)[OF fi]"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d fi", "show irr: \"irreducible\\<^sub>d fi\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d fi\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d fi", "."], ["proof (state)\nthis:\n  irreducible\\<^sub>d fi\n\ngoal (2 subgoals):\n 1. irreducible fi\n 2. degree fi \\<noteq> 0", "show \"irreducible fi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible fi", "using irreducible_primitive_connect[OF cnt] irr"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d fi = irreducible fi\n  irreducible\\<^sub>d fi\n\ngoal (1 subgoal):\n 1. irreducible fi", "by blast"], ["proof (state)\nthis:\n  irreducible fi\n\ngoal (1 subgoal):\n 1. degree fi \\<noteq> 0", "from irr"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d fi", "show \"degree fi \\<noteq> 0\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d fi\n\ngoal (1 subgoal):\n 1. degree fi \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree fi \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma internal_int_poly_factorization:\n  assumes f: \"coeff f 0 \\<noteq> 0\"\n  and res: \"internal_int_poly_factorization f = (c,fs)\"\n  shows \"square_free_factorization f (c,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "obtain a psi where a_psi: \"square_free_factorization_int f = (a, psi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a psi.\n        square_free_factorization_int f = (a, psi) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  square_free_factorization_int f = (a, psi)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "from square_free_factorization_int[OF this]"], ["proof (chain)\npicking this:\n  square_free_factorization f (a, psi)\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow>\n  primitive ?fi \\<and> 0 < lead_coeff ?fi", "have sff: \"square_free_factorization f (a, psi)\"\n    and pr: \"\\<And> fi i. (fi, i) \\<in> set psi \\<Longrightarrow> primitive fi\""], ["proof (prove)\nusing this:\n  square_free_factorization f (a, psi)\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow>\n  primitive ?fi \\<and> 0 < lead_coeff ?fi\n\ngoal (1 subgoal):\n 1. square_free_factorization f (a, psi) &&&\n    (\\<And>fi i. (fi, i) \\<in> set psi \\<Longrightarrow> primitive fi)", "by blast+"], ["proof (state)\nthis:\n  square_free_factorization f (a, psi)\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> primitive ?fi\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "obtain fact where fact: \"fact = (\\<lambda> (q,i :: nat). (map (\\<lambda> f. (f,i)) (main_int_poly_factorization q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fact.\n        fact =\n        (\\<lambda>(q, i).\n            map (\\<lambda>f. (f, i))\n             (local.main_int_poly_factorization q)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fact =\n  (\\<lambda>(q, i).\n      map (\\<lambda>f. (f, i)) (local.main_int_poly_factorization q))\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "from res[unfolded split Let_def]"], ["proof (chain)\npicking this:\n  local.internal_int_poly_factorization f = (c, fs)", "have c: \"c = a\" and fs: \"fs = concat (map fact psi)\""], ["proof (prove)\nusing this:\n  local.internal_int_poly_factorization f = (c, fs)\n\ngoal (1 subgoal):\n 1. c = a &&& fs = concat (map fact psi)", "unfolding fact internal_int_poly_factorization_def a_psi"], ["proof (prove)\nusing this:\n  (case (a, psi) of\n   (a, gis) \\<Rightarrow>\n     (a, concat\n          (map (\\<lambda>(g, i).\n                   map (\\<lambda>h. (h, i))\n                    (local.main_int_poly_factorization g))\n            gis))) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. c = a &&&\n    fs =\n    concat\n     (map (\\<lambda>(q, i).\n              map (\\<lambda>f. (f, i))\n               (local.main_int_poly_factorization q))\n       psi)", "by auto"], ["proof (state)\nthis:\n  c = a\n  fs = concat (map fact psi)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "note sff' = square_free_factorizationD[OF sff]"], ["proof (state)\nthis:\n  f = Polynomial.smult a (\\<Prod>(a, i)\\<in>set psi. a ^ Suc i)\n  (?a, ?i) \\<in> set psi \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set psi; (?b, ?j) \\<in> set psi;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  f = 0 \\<Longrightarrow> a = 0 \\<and> psi = []\n  distinct psi\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs)", "unfolding square_free_factorization_def split"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) \\<and>\n    (f = 0 \\<longrightarrow> c = 0 \\<and> fs = []) \\<and>\n    (\\<forall>a i.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        square_free a \\<and> 0 < degree a) \\<and>\n    (\\<forall>a i b j.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        (b, j) \\<in> set fs \\<longrightarrow>\n        (a, i) \\<noteq> (b, j) \\<longrightarrow>\n        algebraic_semidom_class.coprime a b) \\<and>\n    distinct fs", "proof (intro conjI impI allI)"], ["proof (state)\ngoal (7 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. f = 0 \\<Longrightarrow> c = 0\n 3. f = 0 \\<Longrightarrow> fs = []\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 5. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 6. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 7. distinct fs", "show \"f = 0 \\<Longrightarrow> c = 0\" \"f = 0 \\<Longrightarrow> fs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = 0 \\<Longrightarrow> c = 0) &&& (f = 0 \\<Longrightarrow> fs = [])", "using sff'(4)"], ["proof (prove)\nusing this:\n  f = 0 \\<Longrightarrow> a = 0 \\<and> psi = []\n\ngoal (1 subgoal):\n 1. (f = 0 \\<Longrightarrow> c = 0) &&& (f = 0 \\<Longrightarrow> fs = [])", "unfolding c fs"], ["proof (prove)\nusing this:\n  f = 0 \\<Longrightarrow> a = 0 \\<and> psi = []\n\ngoal (1 subgoal):\n 1. (f = 0 \\<Longrightarrow> a = 0) &&&\n    (f = 0 \\<Longrightarrow> concat (map fact psi) = [])", "by auto"], ["proof (state)\nthis:\n  f = 0 \\<Longrightarrow> c = 0\n  f = 0 \\<Longrightarrow> fs = []\n\ngoal (5 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. distinct fs", "{"], ["proof (state)\nthis:\n  f = 0 \\<Longrightarrow> c = 0\n  f = 0 \\<Longrightarrow> fs = []\n\ngoal (5 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. distinct fs", "fix a i"], ["proof (state)\ngoal (5 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. distinct fs", "assume \"(a,i) \\<in> set fs\""], ["proof (state)\nthis:\n  (a, i) \\<in> set fs\n\ngoal (5 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 4. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 5. distinct fs", "from irreducible_imp_square_free internal_int_poly_factorization_mem[OF f res this]"], ["proof (chain)\npicking this:\n  irreducible ?p \\<Longrightarrow> square_free ?p\n  irreducible a\n  irreducible\\<^sub>d a\n  primitive a\n  degree a \\<noteq> 0", "show \"square_free a\" \"degree a > 0\""], ["proof (prove)\nusing this:\n  irreducible ?p \\<Longrightarrow> square_free ?p\n  irreducible a\n  irreducible\\<^sub>d a\n  primitive a\n  degree a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "by auto"], ["proof (state)\nthis:\n  square_free a\n  0 < degree a\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "}"], ["proof (state)\nthis:\n  (?aa2, ?i2) \\<in> set fs \\<Longrightarrow> square_free ?aa2\n  (?aa2, ?i2) \\<in> set fs \\<Longrightarrow> 0 < degree ?aa2\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from square_free_factorization_last_coeff_nz[OF sff _ f]"], ["proof (chain)\npicking this:\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0", "have nz: \"\\<And> fi i. (fi, i) \\<in> set psi \\<Longrightarrow> coeff fi 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>fi i.\n       (fi, i) \\<in> set psi \\<Longrightarrow> coeff fi 0 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  (?fi, ?i) \\<in> set psi \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "have eq: \"f = smult c (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)", "unfolding\n      prod.distinct_set_conv_list[OF sff'(5)]\n      sff'(1) c"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult a (\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) =\n    Polynomial.smult a (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)", "proof (rule arg_cong[where f = \"smult a\"], unfold fs, insert sff'(2) nz, induct psi)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "case (Cons pi psi)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>a i.\n              (a, i) \\<in> set psi \\<Longrightarrow>\n              square_free a \\<and> degree a \\<noteq> 0;\n   \\<And>fi i.\n      (fi, i) \\<in> set psi \\<Longrightarrow> coeff fi 0 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> (\\<Prod>a\\<leftarrow>psi. case a of\n        (a, i) \\<Rightarrow> a ^ Suc i) =\n                    (\\<Prod>a\\<leftarrow>concat\n    (map fact psi). case a of (a, i) \\<Rightarrow> a ^ Suc i)\n  (?a, ?i) \\<in> set (pi # psi) \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  (?fi, ?i) \\<in> set (pi # psi) \\<Longrightarrow> coeff ?fi 0 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "obtain p i where pi: \"pi = (p,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p i. pi = (p, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  pi = (p, i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "obtain gs where gs: \"main_int_poly_factorization p = gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>gs.\n        local.main_int_poly_factorization p = gs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.main_int_poly_factorization p = gs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "from Cons(2)[of p i]"], ["proof (chain)\npicking this:\n  (p, i) \\<in> set (pi # psi) \\<Longrightarrow>\n  square_free p \\<and> degree p \\<noteq> 0", "have p: \"square_free p\" \"degree p > 0\""], ["proof (prove)\nusing this:\n  (p, i) \\<in> set (pi # psi) \\<Longrightarrow>\n  square_free p \\<and> degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free p &&& 0 < degree p", "unfolding pi"], ["proof (prove)\nusing this:\n  (p, i) \\<in> set ((p, i) # psi) \\<Longrightarrow>\n  square_free p \\<and> degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free p &&& 0 < degree p", "by auto"], ["proof (state)\nthis:\n  square_free p\n  0 < degree p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "from Cons(3)[of p i]"], ["proof (chain)\npicking this:\n  (p, i) \\<in> set (pi # psi) \\<Longrightarrow> coeff p 0 \\<noteq> 0", "have nz: \"coeff p 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (p, i) \\<in> set (pi # psi) \\<Longrightarrow> coeff p 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff p 0 \\<noteq> 0", "unfolding pi"], ["proof (prove)\nusing this:\n  (p, i) \\<in> set ((p, i) # psi) \\<Longrightarrow> coeff p 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff p 0 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  coeff p 0 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "from main_int_poly_factorization[OF gs p nz]"], ["proof (chain)\npicking this:\n  p = prod_list gs \\<and> (\\<forall>fi\\<in>set gs. irreducible\\<^sub>d fi)", "have pgs: \"p = prod_list gs\""], ["proof (prove)\nusing this:\n  p = prod_list gs \\<and> (\\<forall>fi\\<in>set gs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. p = prod_list gs", "by auto"], ["proof (state)\nthis:\n  p = prod_list gs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "have fact: \"fact (p,i) = map (\\<lambda> g. (g,i)) gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact (p, i) = map (\\<lambda>g. (g, i)) gs", "unfolding fact split gs"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>f. (f, i)) gs = map (\\<lambda>g. (g, i)) gs", "by auto"], ["proof (state)\nthis:\n  fact (p, i) = map (\\<lambda>g. (g, i)) gs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "have cong: \"\\<And> x y X Y. x = X \\<Longrightarrow> y = Y \\<Longrightarrow> x * y = X * Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y X Y.\n       \\<lbrakk>x = X; y = Y\\<rbrakk> \\<Longrightarrow> x * y = X * Y", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?x = ?X; ?y = ?Y\\<rbrakk> \\<Longrightarrow> ?x * ?y = ?X * ?Y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)\n 2. \\<And>a psi.\n       \\<lbrakk>\\<lbrakk>\\<And>a i.\n                            (a, i) \\<in> set psi \\<Longrightarrow>\n                            square_free a \\<and> degree a \\<noteq> 0;\n                 \\<And>fi i.\n                    (fi, i) \\<in> set psi \\<Longrightarrow>\n                    coeff fi 0 \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> (\\<Prod>(a,\ni)\\<leftarrow>psi. a ^ Suc i) =\n                                  (\\<Prod>(a,\ni)\\<leftarrow>concat (map fact psi). a ^ Suc i);\n        \\<And>aa i.\n           (aa, i) \\<in> set (a # psi) \\<Longrightarrow>\n           square_free aa \\<and> degree aa \\<noteq> 0;\n        \\<And>fi i.\n           (fi, i) \\<in> set (a # psi) \\<Longrightarrow>\n           coeff fi 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>a # psi. a ^ Suc i) =\n                         (\\<Prod>(a,\n                             i)\\<leftarrow>concat\n      (map fact (a # psi)). a ^ Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>a\\<leftarrow>pi #\n                         psi. case a of (a, i) \\<Rightarrow> a ^ Suc i) =\n    (\\<Prod>a\\<leftarrow>concat\n                          (map fact\n                            (pi #\n                             psi)). case a of\n                                    (a, i) \\<Rightarrow> a ^ Suc i)", "unfolding pi list.simps prod_list.Cons split fact concat.simps prod_list.append\n        map_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ Suc i * (\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) =\n    (\\<Prod>(a, i)\\<leftarrow>map (\\<lambda>g. (g, i)) gs. a ^ Suc i) *\n    (\\<Prod>(a, i)\\<leftarrow>concat (map fact psi). a ^ Suc i)", "proof (rule cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. p ^ Suc i =\n    (\\<Prod>(a, i)\\<leftarrow>map (\\<lambda>g. (g, i)) gs. a ^ Suc i)\n 2. (\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) =\n    (\\<Prod>(a, i)\\<leftarrow>concat (map fact psi). a ^ Suc i)", "show \"p ^ Suc i = (\\<Prod>(a, i)\\<leftarrow>map (\\<lambda>g. (g, i)) gs. a ^ Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ Suc i =\n    (\\<Prod>(a, i)\\<leftarrow>map (\\<lambda>g. (g, i)) gs. a ^ Suc i)", "unfolding pgs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list gs ^ Suc i =\n    (\\<Prod>(a, i)\\<leftarrow>map (\\<lambda>g. (g, i)) gs. a ^ Suc i)", "by (induct gs, auto simp: ac_simps power_mult_distrib)"], ["proof (state)\nthis:\n  p ^ Suc i =\n  (\\<Prod>(a, i)\\<leftarrow>map (\\<lambda>g. (g, i)) gs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) =\n    (\\<Prod>(a, i)\\<leftarrow>concat (map fact psi). a ^ Suc i)", "show \"(\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) = (\\<Prod>(a, i)\\<leftarrow>concat (map fact psi). a ^ Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) =\n    (\\<Prod>(a, i)\\<leftarrow>concat (map fact psi). a ^ Suc i)", "by (rule Cons(1), insert Cons(2-3), auto)"], ["proof (state)\nthis:\n  (\\<Prod>(a, i)\\<leftarrow>psi. a ^ Suc i) =\n  (\\<Prod>(a, i)\\<leftarrow>concat (map fact psi). a ^ Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Prod>a\\<leftarrow>pi # psi. case a of (a, i) \\<Rightarrow> a ^ Suc i) =\n  (\\<Prod>a\\<leftarrow>concat\n                        (map fact\n                          (pi #\n                           psi)). case a of (a, i) \\<Rightarrow> a ^ Suc i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a i.\n                (a, i) \\<in> set [] \\<Longrightarrow>\n                square_free a \\<and> degree a \\<noteq> 0;\n     \\<And>fi i.\n        (fi, i) \\<in> set [] \\<Longrightarrow>\n        coeff fi 0 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (\\<Prod>(a, i)\\<leftarrow>[]. a ^ Suc i) =\n                      (\\<Prod>(a,\n                          i)\\<leftarrow>concat (map fact []). a ^ Suc i)", "qed simp"], ["proof (state)\nthis:\n  f = Polynomial.smult c (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "{"], ["proof (state)\nthis:\n  f = Polynomial.smult c (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "fix i j l fi"], ["proof (state)\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "assume *: \"j < length psi\" \"l < length (fact (psi ! j))\" \"fact (psi ! j) ! l = (fi, i)\""], ["proof (state)\nthis:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from *"], ["proof (chain)\npicking this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)", "have psi: \"psi ! j \\<in> set psi\""], ["proof (prove)\nusing this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n\ngoal (1 subgoal):\n 1. psi ! j \\<in> set psi", "by auto"], ["proof (state)\nthis:\n  psi ! j \\<in> set psi\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "obtain d k where dk: \"psi ! j = (d,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d k. psi ! j = (d, k) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  psi ! j = (d, k)\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "with *"], ["proof (chain)\npicking this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n  psi ! j = (d, k)", "have psij: \"psi ! j = (d,i)\""], ["proof (prove)\nusing this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n  psi ! j = (d, k)\n\ngoal (1 subgoal):\n 1. psi ! j = (d, i)", "unfolding fact split"], ["proof (prove)\nusing this:\n  j < length psi\n  l < length\n       (case psi ! j of\n        (q, i) \\<Rightarrow>\n          map (\\<lambda>f. (f, i)) (local.main_int_poly_factorization q))\n  (case psi ! j of\n   (q, i) \\<Rightarrow>\n     map (\\<lambda>f. (f, i)) (local.main_int_poly_factorization q)) !\n  l =\n  (fi, i)\n  psi ! j = (d, k)\n\ngoal (1 subgoal):\n 1. psi ! j = (d, i)", "by auto"], ["proof (state)\nthis:\n  psi ! j = (d, i)\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from sff'(2)[OF psi[unfolded psij]]"], ["proof (chain)\npicking this:\n  square_free d \\<and> degree d \\<noteq> 0", "have d: \"square_free d\" \"degree d > 0\""], ["proof (prove)\nusing this:\n  square_free d \\<and> degree d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free d &&& 0 < degree d", "by auto"], ["proof (state)\nthis:\n  square_free d\n  0 < degree d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from nz[OF psi[unfolded psij]]"], ["proof (chain)\npicking this:\n  coeff d 0 \\<noteq> 0", "have d0: \"coeff d 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff d 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff d 0 \\<noteq> 0", "."], ["proof (state)\nthis:\n  coeff d 0 \\<noteq> 0\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from * psij fact"], ["proof (chain)\npicking this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n  psi ! j = (d, i)\n  fact =\n  (\\<lambda>(q, i).\n      map (\\<lambda>f. (f, i)) (local.main_int_poly_factorization q))", "have bz: \"main_int_poly_factorization d = map fst (fact (psi ! j))\""], ["proof (prove)\nusing this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n  psi ! j = (d, i)\n  fact =\n  (\\<lambda>(q, i).\n      map (\\<lambda>f. (f, i)) (local.main_int_poly_factorization q))\n\ngoal (1 subgoal):\n 1. local.main_int_poly_factorization d = map fst (fact (psi ! j))", "by (auto simp: o_def)"], ["proof (state)\nthis:\n  local.main_int_poly_factorization d = map fst (fact (psi ! j))\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from main_int_poly_factorization[OF bz d d0] pr[OF psi[unfolded dk]]"], ["proof (chain)\npicking this:\n  d = prod_list (map fst (fact (psi ! j))) \\<and>\n  (\\<forall>fi\\<in>set (map fst (fact (psi ! j))). irreducible\\<^sub>d fi)\n  primitive d", "have dhs: \"d = prod_list (map fst (fact (psi ! j)))\""], ["proof (prove)\nusing this:\n  d = prod_list (map fst (fact (psi ! j))) \\<and>\n  (\\<forall>fi\\<in>set (map fst (fact (psi ! j))). irreducible\\<^sub>d fi)\n  primitive d\n\ngoal (1 subgoal):\n 1. d = prod_list (map fst (fact (psi ! j)))", "by auto"], ["proof (state)\nthis:\n  d = prod_list (map fst (fact (psi ! j)))\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from *"], ["proof (chain)\npicking this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)", "have mem: \"fi \\<in> set (map fst (fact (psi ! j)))\""], ["proof (prove)\nusing this:\n  j < length psi\n  l < length (fact (psi ! j))\n  fact (psi ! j) ! l = (fi, i)\n\ngoal (1 subgoal):\n 1. fi \\<in> set (map fst (fact (psi ! j)))", "by (metis fst_conv image_eqI nth_mem set_map)"], ["proof (state)\nthis:\n  fi \\<in> set (map fst (fact (psi ! j)))\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from mem dhs psij d"], ["proof (chain)\npicking this:\n  fi \\<in> set (map fst (fact (psi ! j)))\n  d = prod_list (map fst (fact (psi ! j)))\n  psi ! j = (d, i)\n  square_free d\n  0 < degree d", "have \"\\<exists> d. fi \\<in> set (map fst (fact (psi ! j))) \\<and>\n        d = prod_list (map fst (fact (psi ! j))) \\<and>\n        psi ! j = (d, i) \\<and>\n        square_free d\""], ["proof (prove)\nusing this:\n  fi \\<in> set (map fst (fact (psi ! j)))\n  d = prod_list (map fst (fact (psi ! j)))\n  psi ! j = (d, i)\n  square_free d\n  0 < degree d\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       fi \\<in> set (map fst (fact (psi ! j))) \\<and>\n       d = prod_list (map fst (fact (psi ! j))) \\<and>\n       psi ! j = (d, i) \\<and> square_free d", "by blast"], ["proof (state)\nthis:\n  \\<exists>d.\n     fi \\<in> set (map fst (fact (psi ! j))) \\<and>\n     d = prod_list (map fst (fact (psi ! j))) \\<and>\n     psi ! j = (d, i) \\<and> square_free d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?j2 < length psi; ?l2 < length (fact (psi ! ?j2));\n   fact (psi ! ?j2) ! ?l2 = (?fi2, ?i2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>d.\n                       ?fi2 \\<in> set (map fst (fact (psi ! ?j2))) \\<and>\n                       d = prod_list (map fst (fact (psi ! ?j2))) \\<and>\n                       psi ! ?j2 = (d, ?i2) \\<and> square_free d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "note deconstruct = this"], ["proof (state)\nthis:\n  \\<lbrakk>?j2 < length psi; ?l2 < length (fact (psi ! ?j2));\n   fact (psi ! ?j2) ! ?l2 = (?fi2, ?i2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>d.\n                       ?fi2 \\<in> set (map fst (fact (psi ! ?j2))) \\<and>\n                       d = prod_list (map fst (fact (psi ! ?j2))) \\<and>\n                       psi ! ?j2 = (d, ?i2) \\<and> square_free d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?j2 < length psi; ?l2 < length (fact (psi ! ?j2));\n   fact (psi ! ?j2) ! ?l2 = (?fi2, ?i2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>d.\n                       ?fi2 \\<in> set (map fst (fact (psi ! ?j2))) \\<and>\n                       d = prod_list (map fst (fact (psi ! ?j2))) \\<and>\n                       psi ! ?j2 = (d, ?i2) \\<and> square_free d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "fix k K fi i Fi I"], ["proof (state)\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "assume k: \"k < length fs\" \"K < length fs\" and f: \"fs ! k = (fi, i)\" \"fs ! K = (Fi, I)\"\n      and diff: \"k \\<noteq> K\""], ["proof (state)\nthis:\n  k < length fs\n  K < length fs\n  fs ! k = (fi, i)\n  fs ! K = (Fi, I)\n  k \\<noteq> K\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from nth_concat_diff[OF k[unfolded fs] diff, folded fs, unfolded length_map]"], ["proof (chain)\npicking this:\n  \\<exists>j1 k1 j2 k2.\n     (j1, k1) \\<noteq> (j2, k2) \\<and>\n     j1 < length psi \\<and>\n     j2 < length psi \\<and>\n     k1 < length (map fact psi ! j1) \\<and>\n     k2 < length (map fact psi ! j2) \\<and>\n     fs ! k = map fact psi ! j1 ! k1 \\<and> fs ! K = map fact psi ! j2 ! k2", "obtain j l J L where diff: \"(j, l) \\<noteq> (J, L)\"\n          and j: \"j < length psi\" \"J < length psi\"\n          and l: \"l < length (map fact psi ! j)\" \"L < length (map fact psi ! J)\"\n          and fs: \"fs ! k = map fact psi ! j ! l\" \"fs ! K = map fact psi ! J ! L\""], ["proof (prove)\nusing this:\n  \\<exists>j1 k1 j2 k2.\n     (j1, k1) \\<noteq> (j2, k2) \\<and>\n     j1 < length psi \\<and>\n     j2 < length psi \\<and>\n     k1 < length (map fact psi ! j1) \\<and>\n     k2 < length (map fact psi ! j2) \\<and>\n     fs ! k = map fact psi ! j1 ! k1 \\<and> fs ! K = map fact psi ! j2 ! k2\n\ngoal (1 subgoal):\n 1. (\\<And>j l J L.\n        \\<lbrakk>(j, l) \\<noteq> (J, L); j < length psi; J < length psi;\n         l < length (map fact psi ! j); L < length (map fact psi ! J);\n         fs ! k = map fact psi ! j ! l;\n         fs ! K = map fact psi ! J ! L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast+"], ["proof (state)\nthis:\n  (j, l) \\<noteq> (J, L)\n  j < length psi\n  J < length psi\n  l < length (map fact psi ! j)\n  L < length (map fact psi ! J)\n  fs ! k = map fact psi ! j ! l\n  fs ! K = map fact psi ! J ! L\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "hence psij: \"psi ! j \\<in> set psi\""], ["proof (prove)\nusing this:\n  (j, l) \\<noteq> (J, L)\n  j < length psi\n  J < length psi\n  l < length (map fact psi ! j)\n  L < length (map fact psi ! J)\n  fs ! k = map fact psi ! j ! l\n  fs ! K = map fact psi ! J ! L\n\ngoal (1 subgoal):\n 1. psi ! j \\<in> set psi", "by auto"], ["proof (state)\nthis:\n  psi ! j \\<in> set psi\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from j"], ["proof (chain)\npicking this:\n  j < length psi\n  J < length psi", "have id: \"map fact psi ! j = fact (psi ! j)\" \"map fact psi ! J = fact (psi ! J)\""], ["proof (prove)\nusing this:\n  j < length psi\n  J < length psi\n\ngoal (1 subgoal):\n 1. map fact psi ! j = fact (psi ! j) &&& map fact psi ! J = fact (psi ! J)", "by auto"], ["proof (state)\nthis:\n  map fact psi ! j = fact (psi ! j)\n  map fact psi ! J = fact (psi ! J)\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "note l = l[unfolded id]"], ["proof (state)\nthis:\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! J))\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "note fs = fs[unfolded id]"], ["proof (state)\nthis:\n  fs ! k = fact (psi ! j) ! l\n  fs ! K = fact (psi ! J) ! L\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from j"], ["proof (chain)\npicking this:\n  j < length psi\n  J < length psi", "have psi: \"psi ! j \\<in> set psi\" \"psi ! J \\<in> set psi\""], ["proof (prove)\nusing this:\n  j < length psi\n  J < length psi\n\ngoal (1 subgoal):\n 1. psi ! j \\<in> set psi &&& psi ! J \\<in> set psi", "by auto"], ["proof (state)\nthis:\n  psi ! j \\<in> set psi\n  psi ! J \\<in> set psi\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from deconstruct[OF j(1) l(1) fs(1)[unfolded f, symmetric]]"], ["proof (chain)\npicking this:\n  \\<exists>d.\n     fi \\<in> set (map fst (fact (psi ! j))) \\<and>\n     d = prod_list (map fst (fact (psi ! j))) \\<and>\n     psi ! j = (d, i) \\<and> square_free d", "obtain d where mem: \"fi \\<in> set (map fst (fact (psi ! j)))\"\n        and d: \"d = prod_list (map fst (fact (psi ! j)))\" \"psi ! j = (d, i)\" \"square_free d\""], ["proof (prove)\nusing this:\n  \\<exists>d.\n     fi \\<in> set (map fst (fact (psi ! j))) \\<and>\n     d = prod_list (map fst (fact (psi ! j))) \\<and>\n     psi ! j = (d, i) \\<and> square_free d\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>fi \\<in> set (map fst (fact (psi ! j)));\n         d = prod_list (map fst (fact (psi ! j))); psi ! j = (d, i);\n         square_free d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  fi \\<in> set (map fst (fact (psi ! j)))\n  d = prod_list (map fst (fact (psi ! j)))\n  psi ! j = (d, i)\n  square_free d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from deconstruct[OF j(2) l(2) fs(2)[unfolded f, symmetric]]"], ["proof (chain)\npicking this:\n  \\<exists>d.\n     Fi \\<in> set (map fst (fact (psi ! J))) \\<and>\n     d = prod_list (map fst (fact (psi ! J))) \\<and>\n     psi ! J = (d, I) \\<and> square_free d", "obtain D where Mem: \"Fi \\<in> set (map fst (fact (psi ! J)))\"\n        and D: \"D = prod_list (map fst (fact (psi ! J)))\" \"psi ! J = (D, I)\" \"square_free D\""], ["proof (prove)\nusing this:\n  \\<exists>d.\n     Fi \\<in> set (map fst (fact (psi ! J))) \\<and>\n     d = prod_list (map fst (fact (psi ! J))) \\<and>\n     psi ! J = (d, I) \\<and> square_free d\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>Fi \\<in> set (map fst (fact (psi ! J)));\n         D = prod_list (map fst (fact (psi ! J))); psi ! J = (D, I);\n         square_free D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fi \\<in> set (map fst (fact (psi ! J)))\n  D = prod_list (map fst (fact (psi ! J)))\n  psi ! J = (D, I)\n  square_free D\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "from pr[OF psij[unfolded d(2)]]"], ["proof (chain)\npicking this:\n  primitive d", "have cnt: \"primitive d\""], ["proof (prove)\nusing this:\n  primitive d\n\ngoal (1 subgoal):\n 1. primitive d", "."], ["proof (state)\nthis:\n  primitive d\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "have \"coprime fi Fi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime fi Fi", "proof (cases \"J = j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi\n 2. J \\<noteq> j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "case False"], ["proof (state)\nthis:\n  J \\<noteq> j\n\ngoal (2 subgoals):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi\n 2. J \\<noteq> j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from sff'(5) False j"], ["proof (chain)\npicking this:\n  distinct psi\n  J \\<noteq> j\n  j < length psi\n  J < length psi", "have \"(d,i) \\<noteq> (D,I)\""], ["proof (prove)\nusing this:\n  distinct psi\n  J \\<noteq> j\n  j < length psi\n  J < length psi\n\ngoal (1 subgoal):\n 1. (d, i) \\<noteq> (D, I)", "unfolding distinct_conv_nth d(2)[symmetric] D(2)[symmetric]"], ["proof (prove)\nusing this:\n  \\<forall>i<length psi.\n     \\<forall>j<length psi.\n        i \\<noteq> j \\<longrightarrow> psi ! i \\<noteq> psi ! j\n  J \\<noteq> j\n  j < length psi\n  J < length psi\n\ngoal (1 subgoal):\n 1. psi ! j \\<noteq> psi ! J", "by auto"], ["proof (state)\nthis:\n  (d, i) \\<noteq> (D, I)\n\ngoal (2 subgoals):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi\n 2. J \\<noteq> j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from sff'(3)[OF psi[unfolded d(2) D(2)] this]"], ["proof (chain)\npicking this:\n  algebraic_semidom_class.coprime d D", "have cop: \"coprime d D\""], ["proof (prove)\nusing this:\n  algebraic_semidom_class.coprime d D\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime d D", "by auto"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime d D\n\ngoal (2 subgoals):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi\n 2. J \\<noteq> j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from prod_list_dvd[OF mem, folded d(1)]"], ["proof (chain)\npicking this:\n  fi dvd d", "have fid: \"fi dvd d\""], ["proof (prove)\nusing this:\n  fi dvd d\n\ngoal (1 subgoal):\n 1. fi dvd d", "by auto"], ["proof (state)\nthis:\n  fi dvd d\n\ngoal (2 subgoals):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi\n 2. J \\<noteq> j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from prod_list_dvd[OF Mem, folded D(1)]"], ["proof (chain)\npicking this:\n  Fi dvd D", "have FiD: \"Fi dvd D\""], ["proof (prove)\nusing this:\n  Fi dvd D\n\ngoal (1 subgoal):\n 1. Fi dvd D", "by auto"], ["proof (state)\nthis:\n  Fi dvd D\n\ngoal (2 subgoals):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi\n 2. J \\<noteq> j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from coprime_divisors[OF fid FiD] cop"], ["proof (chain)\npicking this:\n  algebraic_semidom_class.coprime d D \\<Longrightarrow>\n  algebraic_semidom_class.coprime fi Fi\n  comm_monoid_mult_class.coprime d D", "show ?thesis"], ["proof (prove)\nusing this:\n  algebraic_semidom_class.coprime d D \\<Longrightarrow>\n  algebraic_semidom_class.coprime fi Fi\n  comm_monoid_mult_class.coprime d D\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime fi Fi", "by simp"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime fi Fi\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "case True"], ["proof (state)\nthis:\n  J = j\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "note id = this"], ["proof (state)\nthis:\n  J = j\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from id diff"], ["proof (chain)\npicking this:\n  J = j\n  (j, l) \\<noteq> (J, L)", "have diff: \"l \\<noteq> L\""], ["proof (prove)\nusing this:\n  J = j\n  (j, l) \\<noteq> (J, L)\n\ngoal (1 subgoal):\n 1. l \\<noteq> L", "by auto"], ["proof (state)\nthis:\n  l \\<noteq> L\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "obtain bz where bz: \"bz = map fst (fact (psi ! j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bz.\n        bz = map fst (fact (psi ! j)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bz = map fst (fact (psi ! j))\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from fs[unfolded f] l"], ["proof (chain)\npicking this:\n  (fi, i) = fact (psi ! j) ! l\n  (Fi, I) = fact (psi ! J) ! L\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! J))", "have fi: \"fi = bz ! l\" \"Fi = bz ! L\""], ["proof (prove)\nusing this:\n  (fi, i) = fact (psi ! j) ! l\n  (Fi, I) = fact (psi ! J) ! L\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! J))\n\ngoal (1 subgoal):\n 1. fi = bz ! l &&& Fi = bz ! L", "unfolding id bz"], ["proof (prove)\nusing this:\n  (fi, i) = fact (psi ! j) ! l\n  (Fi, I) = fact (psi ! j) ! L\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! j))\n\ngoal (1 subgoal):\n 1. fi = map fst (fact (psi ! j)) ! l &&& Fi = map fst (fact (psi ! j)) ! L", "by (metis fst_conv nth_map)+"], ["proof (state)\nthis:\n  fi = bz ! l\n  Fi = bz ! L\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from d[folded bz]"], ["proof (chain)\npicking this:\n  d = prod_list bz\n  psi ! j = (d, i)\n  square_free d", "have sf: \"square_free (prod_list bz)\""], ["proof (prove)\nusing this:\n  d = prod_list bz\n  psi ! j = (d, i)\n  square_free d\n\ngoal (1 subgoal):\n 1. square_free (prod_list bz)", "by auto"], ["proof (state)\nthis:\n  square_free (prod_list bz)\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from d[folded bz] cnt"], ["proof (chain)\npicking this:\n  d = prod_list bz\n  psi ! j = (d, i)\n  square_free d\n  primitive d", "have cnt: \"content (prod_list bz) = 1\""], ["proof (prove)\nusing this:\n  d = prod_list bz\n  psi ! j = (d, i)\n  square_free d\n  primitive d\n\ngoal (1 subgoal):\n 1. content (prod_list bz) = 1", "by auto"], ["proof (state)\nthis:\n  content (prod_list bz) = 1\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from l"], ["proof (chain)\npicking this:\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! J))", "have l: \"l < length bz\" \"L < length bz\""], ["proof (prove)\nusing this:\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! J))\n\ngoal (1 subgoal):\n 1. l < length bz &&& L < length bz", "unfolding bz id"], ["proof (prove)\nusing this:\n  l < length (fact (psi ! j))\n  L < length (fact (psi ! j))\n\ngoal (1 subgoal):\n 1. l < length (map fst (fact (psi ! j))) &&&\n    L < length (map fst (fact (psi ! j)))", "by auto"], ["proof (state)\nthis:\n  l < length bz\n  L < length bz\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from l fi"], ["proof (chain)\npicking this:\n  l < length bz\n  L < length bz\n  fi = bz ! l\n  Fi = bz ! L", "have \"fi \\<in> set bz\""], ["proof (prove)\nusing this:\n  l < length bz\n  L < length bz\n  fi = bz ! l\n  Fi = bz ! L\n\ngoal (1 subgoal):\n 1. fi \\<in> set bz", "by auto"], ["proof (state)\nthis:\n  fi \\<in> set bz\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from content_dvd_1[OF cnt prod_list_dvd[OF this]]"], ["proof (chain)\npicking this:\n  content fi = 1", "have cnt: \"content fi = 1\""], ["proof (prove)\nusing this:\n  content fi = 1\n\ngoal (1 subgoal):\n 1. content fi = 1", "."], ["proof (state)\nthis:\n  content fi = 1\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "obtain g where g: \"g = gcd fi Fi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g. g = gcd fi Fi \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g = gcd fi Fi\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "have g': \"g dvd fi\" \"g dvd Fi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g dvd fi &&& g dvd Fi", "unfolding g"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd fi Fi dvd fi &&& gcd fi Fi dvd Fi", "by auto"], ["proof (state)\nthis:\n  g dvd fi\n  g dvd Fi\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "define bef where \"bef = take l bz\""], ["proof (state)\nthis:\n  bef = take l bz\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "define aft where \"aft = drop (Suc l) bz\""], ["proof (state)\nthis:\n  aft = drop (Suc l) bz\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from id_take_nth_drop[OF l(1)] l"], ["proof (chain)\npicking this:\n  bz = take l bz @ bz ! l # drop (Suc l) bz\n  l < length bz\n  L < length bz", "have bz: \"bz = bef @ fi # aft\" and bef: \"length bef = l\""], ["proof (prove)\nusing this:\n  bz = take l bz @ bz ! l # drop (Suc l) bz\n  l < length bz\n  L < length bz\n\ngoal (1 subgoal):\n 1. bz = bef @ fi # aft &&& length bef = l", "unfolding bef_def aft_def fi"], ["proof (prove)\nusing this:\n  bz = take l bz @ bz ! l # drop (Suc l) bz\n  l < length bz\n  L < length bz\n\ngoal (1 subgoal):\n 1. bz = take l bz @ bz ! l # drop (Suc l) bz &&& length (take l bz) = l", "by auto"], ["proof (state)\nthis:\n  bz = bef @ fi # aft\n  length bef = l\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "with l diff"], ["proof (chain)\npicking this:\n  l < length bz\n  L < length bz\n  l \\<noteq> L\n  bz = bef @ fi # aft\n  length bef = l", "have mem: \"Fi \\<in> set (bef @ aft)\""], ["proof (prove)\nusing this:\n  l < length bz\n  L < length bz\n  l \\<noteq> L\n  bz = bef @ fi # aft\n  length bef = l\n\ngoal (1 subgoal):\n 1. Fi \\<in> set (bef @ aft)", "unfolding fi(2)"], ["proof (prove)\nusing this:\n  l < length bz\n  L < length bz\n  l \\<noteq> L\n  bz = bef @ fi # aft\n  length bef = l\n\ngoal (1 subgoal):\n 1. bz ! L \\<in> set (bef @ aft)", "by (auto simp: nth_append)"], ["proof (state)\nthis:\n  Fi \\<in> set (bef @ aft)\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from split_list[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>ys zs. bef @ aft = ys @ Fi # zs", "obtain Bef Aft where ba: \"bef @ aft = Bef @ Fi # Aft\""], ["proof (prove)\nusing this:\n  \\<exists>ys zs. bef @ aft = ys @ Fi # zs\n\ngoal (1 subgoal):\n 1. (\\<And>Bef Aft.\n        bef @ aft = Bef @ Fi # Aft \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bef @ aft = Bef @ Fi # Aft\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "have \"prod_list bz = fi * prod_list (bef @ aft)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list bz = fi * prod_list (bef @ aft)", "unfolding bz"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (bef @ fi # aft) = fi * prod_list (bef @ aft)", "by simp"], ["proof (state)\nthis:\n  prod_list bz = fi * prod_list (bef @ aft)\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "also"], ["proof (state)\nthis:\n  prod_list bz = fi * prod_list (bef @ aft)\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "have \"prod_list (bef @ aft) = Fi * prod_list (Bef @ Aft)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (bef @ aft) = Fi * prod_list (Bef @ Aft)", "unfolding ba"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (Bef @ Fi # Aft) = Fi * prod_list (Bef @ Aft)", "by auto"], ["proof (state)\nthis:\n  prod_list (bef @ aft) = Fi * prod_list (Bef @ Aft)\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "finally"], ["proof (chain)\npicking this:\n  prod_list bz = fi * (Fi * prod_list (Bef @ Aft))", "have \"fi * Fi dvd prod_list bz\""], ["proof (prove)\nusing this:\n  prod_list bz = fi * (Fi * prod_list (Bef @ Aft))\n\ngoal (1 subgoal):\n 1. fi * Fi dvd prod_list bz", "by auto"], ["proof (state)\nthis:\n  fi * Fi dvd prod_list bz\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "with g'"], ["proof (chain)\npicking this:\n  g dvd fi\n  g dvd Fi\n  fi * Fi dvd prod_list bz", "have \"g * g dvd prod_list bz\""], ["proof (prove)\nusing this:\n  g dvd fi\n  g dvd Fi\n  fi * Fi dvd prod_list bz\n\ngoal (1 subgoal):\n 1. g * g dvd prod_list bz", "by (meson dvd_trans mult_dvd_mono)"], ["proof (state)\nthis:\n  g * g dvd prod_list bz\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "with sf[unfolded square_free_def]"], ["proof (chain)\npicking this:\n  prod_list bz \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd prod_list bz)\n  g * g dvd prod_list bz", "have deg: \"degree g = 0\""], ["proof (prove)\nusing this:\n  prod_list bz \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd prod_list bz)\n  g * g dvd prod_list bz\n\ngoal (1 subgoal):\n 1. degree g = 0", "by auto"], ["proof (state)\nthis:\n  degree g = 0\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from content_dvd_1[OF cnt g'(1)]"], ["proof (chain)\npicking this:\n  content g = 1", "have cnt: \"content g = 1\""], ["proof (prove)\nusing this:\n  content g = 1\n\ngoal (1 subgoal):\n 1. content g = 1", "."], ["proof (state)\nthis:\n  content g = 1\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from degree0_coeffs[OF deg]"], ["proof (chain)\npicking this:\n  \\<exists>a. g = [:a:]", "obtain c where gc: \"g = [: c :]\""], ["proof (prove)\nusing this:\n  \\<exists>a. g = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. g = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  g = [:c:]\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "from cnt[unfolded gc content_def, simplified]"], ["proof (chain)\npicking this:\n  Gcd (set (cCons c [])) = 1", "have \"abs c = 1\""], ["proof (prove)\nusing this:\n  Gcd (set (cCons c [])) = 1\n\ngoal (1 subgoal):\n 1. \\<bar>c\\<bar> = 1", "by (cases \"c = 0\", auto)"], ["proof (state)\nthis:\n  \\<bar>c\\<bar> = 1\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "with g gc"], ["proof (chain)\npicking this:\n  g = gcd fi Fi\n  g = [:c:]\n  \\<bar>c\\<bar> = 1", "have \"gcd fi Fi \\<in> {1,-1}\""], ["proof (prove)\nusing this:\n  g = gcd fi Fi\n  g = [:c:]\n  \\<bar>c\\<bar> = 1\n\ngoal (1 subgoal):\n 1. gcd fi Fi \\<in> {1, - 1}", "by fastforce"], ["proof (state)\nthis:\n  gcd fi Fi \\<in> {1, - 1}\n\ngoal (1 subgoal):\n 1. J = j \\<Longrightarrow> comm_monoid_mult_class.coprime fi Fi", "thus \"coprime fi Fi\""], ["proof (prove)\nusing this:\n  gcd fi Fi \\<in> {1, - 1}\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime fi Fi", "by (auto intro!: gcd_eq_1_imp_coprime)\n            (metis dvd_minus_iff dvd_refl is_unit_gcd_iff one_neq_neg_one)"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime fi Fi\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime fi Fi\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?k2 < length fs; ?K2 < length fs; fs ! ?k2 = (?fi2, ?i2);\n   fs ! ?K2 = (?Fi2, ?I2); ?k2 \\<noteq> ?K2\\<rbrakk>\n  \\<Longrightarrow> comm_monoid_mult_class.coprime ?fi2 ?Fi2\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "note cop = this"], ["proof (state)\nthis:\n  \\<lbrakk>?k2 < length fs; ?K2 < length fs; fs ! ?k2 = (?fi2, ?i2);\n   fs ! ?K2 = (?Fi2, ?I2); ?k2 \\<noteq> ?K2\\<rbrakk>\n  \\<Longrightarrow> comm_monoid_mult_class.coprime ?fi2 ?Fi2\n\ngoal (3 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. distinct fs", "show dist: \"distinct fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct fs", "unfolding distinct_conv_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length fs.\n       \\<forall>j<length fs.\n          i \\<noteq> j \\<longrightarrow> fs ! i \\<noteq> fs ! j", "proof (intro impI allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "fix k K"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "assume k: \"k < length fs\" \"K < length fs\" and diff: \"k \\<noteq> K\""], ["proof (state)\nthis:\n  k < length fs\n  K < length fs\n  k \\<noteq> K\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "obtain fi i Fi I where f: \"fs ! k = (fi,i)\" \"fs ! K = (Fi,I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fi i Fi I.\n        \\<lbrakk>fs ! k = (fi, i); fs ! K = (Fi, I)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force+"], ["proof (state)\nthis:\n  fs ! k = (fi, i)\n  fs ! K = (Fi, I)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "from cop[OF k f diff]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime fi Fi", "have cop: \"coprime fi Fi\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime fi Fi\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime fi Fi", "."], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime fi Fi\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "from k(1) f(1)"], ["proof (chain)\npicking this:\n  k < length fs\n  fs ! k = (fi, i)", "have \"(fi,i) \\<in> set fs\""], ["proof (prove)\nusing this:\n  k < length fs\n  fs ! k = (fi, i)\n\ngoal (1 subgoal):\n 1. (fi, i) \\<in> set fs", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  k < length fs\n  fs ! k = (fi, i)\n\ngoal (1 subgoal):\n 1. (fi, i) \\<in> {fs ! i |i. i < length fs}", "by force"], ["proof (state)\nthis:\n  (fi, i) \\<in> set fs\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "from internal_int_poly_factorization_mem[OF assms(1) res this]"], ["proof (chain)\npicking this:\n  irreducible fi\n  irreducible\\<^sub>d fi\n  primitive fi\n  degree fi \\<noteq> 0", "have \"degree fi > 0\""], ["proof (prove)\nusing this:\n  irreducible fi\n  irreducible\\<^sub>d fi\n  primitive fi\n  degree fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < degree fi", "by auto"], ["proof (state)\nthis:\n  0 < degree fi\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "hence \"\\<not> is_unit fi\""], ["proof (prove)\nusing this:\n  0 < degree fi\n\ngoal (1 subgoal):\n 1. \\<not> is_unit fi", "by (simp add: poly_dvd_1)"], ["proof (state)\nthis:\n  \\<not> is_unit fi\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "with cop coprime_id_is_unit[of fi]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime fi Fi\n  comm_monoid_mult_class.coprime fi fi = is_unit fi\n  \\<not> is_unit fi", "have \"fi \\<noteq> Fi\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime fi Fi\n  comm_monoid_mult_class.coprime fi fi = is_unit fi\n  \\<not> is_unit fi\n\ngoal (1 subgoal):\n 1. fi \\<noteq> Fi", "by auto"], ["proof (state)\nthis:\n  fi \\<noteq> Fi\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length fs; j < length fs; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> fs ! i \\<noteq> fs ! j", "thus \"fs ! k \\<noteq> fs ! K\""], ["proof (prove)\nusing this:\n  fi \\<noteq> Fi\n\ngoal (1 subgoal):\n 1. fs ! k \\<noteq> fs ! K", "unfolding f"], ["proof (prove)\nusing this:\n  fi \\<noteq> Fi\n\ngoal (1 subgoal):\n 1. (fi, i) \\<noteq> (Fi, I)", "by auto"], ["proof (state)\nthis:\n  fs ! k \\<noteq> fs ! K\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct fs\n\ngoal (2 subgoals):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n 2. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "show \"f = smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "unfolding eq\n      prod.distinct_set_conv_list[OF dist]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult c (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i) =\n    Polynomial.smult c (\\<Prod>(a, i)\\<leftarrow>fs. a ^ Suc i)", "by simp"], ["proof (state)\nthis:\n  f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "fix fi i Fi I"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "assume mem: \"(fi, i) \\<in> set fs\" \"(Fi,I) \\<in> set fs\" and diff: \"(fi, i) \\<noteq> (Fi, I)\""], ["proof (state)\nthis:\n  (fi, i) \\<in> set fs\n  (Fi, I) \\<in> set fs\n  (fi, i) \\<noteq> (Fi, I)\n\ngoal (1 subgoal):\n 1. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "then"], ["proof (chain)\npicking this:\n  (fi, i) \\<in> set fs\n  (Fi, I) \\<in> set fs\n  (fi, i) \\<noteq> (Fi, I)", "obtain k K where k: \"k < length fs\" \"K < length fs\"\n      and f: \"fs ! k = (fi, i)\" \"fs ! K = (Fi, I)\""], ["proof (prove)\nusing this:\n  (fi, i) \\<in> set fs\n  (Fi, I) \\<in> set fs\n  (fi, i) \\<noteq> (Fi, I)\n\ngoal (1 subgoal):\n 1. (\\<And>k K.\n        \\<lbrakk>k < length fs; K < length fs; fs ! k = (fi, i);\n         fs ! K = (Fi, I)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  (fi, i) \\<in> {fs ! i |i. i < length fs}\n  (Fi, I) \\<in> {fs ! i |i. i < length fs}\n  (fi, i) \\<noteq> (Fi, I)\n\ngoal (1 subgoal):\n 1. (\\<And>k K.\n        \\<lbrakk>k < length fs; K < length fs; fs ! k = (fi, i);\n         fs ! K = (Fi, I)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  k < length fs\n  K < length fs\n  fs ! k = (fi, i)\n  fs ! K = (Fi, I)\n\ngoal (1 subgoal):\n 1. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "with diff"], ["proof (chain)\npicking this:\n  (fi, i) \\<noteq> (Fi, I)\n  k < length fs\n  K < length fs\n  fs ! k = (fi, i)\n  fs ! K = (Fi, I)", "have diff: \"k \\<noteq> K\""], ["proof (prove)\nusing this:\n  (fi, i) \\<noteq> (Fi, I)\n  k < length fs\n  K < length fs\n  fs ! k = (fi, i)\n  fs ! K = (Fi, I)\n\ngoal (1 subgoal):\n 1. k \\<noteq> K", "by auto"], ["proof (state)\nthis:\n  k \\<noteq> K\n\ngoal (1 subgoal):\n 1. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from cop[OF k f diff]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime fi Fi", "show \"Rings.coprime fi Fi\""], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime fi Fi\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime fi Fi", "by auto"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime fi Fi\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factorize_int_last_nz_poly: assumes res: \"factorize_int_last_nz_poly f = (c,fs)\"\n    and nz: \"coeff f 0 \\<noteq> 0\"\nshows \"square_free_factorization f (c,fs)\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> irreducible fi\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> degree fi \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow> irreducible fi) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow> degree fi \\<noteq> 0)", "proof (atomize(full))"], ["proof (state)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from nz"], ["proof (chain)\npicking this:\n  coeff f 0 \\<noteq> 0", "have lz: \"lead_coeff f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  coeff f 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lead_coeff f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  lead_coeff f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "note res = res[unfolded factorize_int_last_nz_poly_def Let_def]"], ["proof (state)\nthis:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "consider (0) \"degree f = 0\"\n    | (1) \"degree f = 1\"\n    | (2) \"degree f > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>degree f = 0 \\<Longrightarrow> thesis;\n     degree f = 1 \\<Longrightarrow> thesis;\n     1 < degree f \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>degree f = 0 \\<Longrightarrow> ?thesis;\n   degree f = 1 \\<Longrightarrow> ?thesis;\n   1 < degree f \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>degree f = 0 \\<Longrightarrow> ?thesis;\n   degree f = 1 \\<Longrightarrow> ?thesis;\n   1 < degree f \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"square_free_factorization f (c,fs) \\<and> ((fi,i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and> ((fi,i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>degree f = 0 \\<Longrightarrow> ?thesis;\n   degree f = 1 \\<Longrightarrow> ?thesis;\n   1 < degree f \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 3. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case 0"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (3 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 3. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from degree0_coeffs[OF 0]"], ["proof (chain)\npicking this:\n  \\<exists>a. f = [:a:]", "obtain a where f: \"f = [:a:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. f = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = [:a:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  f = [:a:]\n\ngoal (3 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 3. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from res"], ["proof (chain)\npicking this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "unfolding square_free_factorization_def f"], ["proof (prove)\nusing this:\n  (if degree [:a:] = 0 then (coeff [:a:] 0, [])\n   else if degree [:a:] = 1\n        then (content [:a:], [(primitive_part [:a:], 0)])\n        else local.internal_int_poly_factorization [:a:]) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. (case (c, fs) of\n     (c, bs) \\<Rightarrow>\n       [:a:] =\n       Polynomial.smult c (\\<Prod>(a, i)\\<in>set bs. a ^ Suc i) \\<and>\n       ([:a:] = 0 \\<longrightarrow> c = 0 \\<and> bs = []) \\<and>\n       (\\<forall>a i.\n           (a, i) \\<in> set bs \\<longrightarrow>\n           square_free a \\<and> 0 < degree a) \\<and>\n       (\\<forall>a i b j.\n           (a, i) \\<in> set bs \\<longrightarrow>\n           (b, j) \\<in> set bs \\<longrightarrow>\n           (a, i) \\<noteq> (b, j) \\<longrightarrow>\n           algebraic_semidom_class.coprime a b) \\<and>\n       distinct bs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case 1"], ["proof (state)\nthis:\n  degree f = 1\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "then"], ["proof (chain)\npicking this:\n  degree f = 1", "have irr: \"irreducible (primitive_part f)\""], ["proof (prove)\nusing this:\n  degree f = 1\n\ngoal (1 subgoal):\n 1. irreducible (primitive_part f)", "by (auto intro!: linear_primitive_irreducible content_primitive_part)"], ["proof (state)\nthis:\n  irreducible (primitive_part f)\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from irreducible_imp_square_free[OF irr]"], ["proof (chain)\npicking this:\n  square_free (primitive_part f)", "have sf: \"square_free (primitive_part f)\""], ["proof (prove)\nusing this:\n  square_free (primitive_part f)\n\ngoal (1 subgoal):\n 1. square_free (primitive_part f)", "."], ["proof (state)\nthis:\n  square_free (primitive_part f)\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from 1"], ["proof (chain)\npicking this:\n  degree f = 1", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree f = 1\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree f = 1 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from res irr sf f0"], ["proof (chain)\npicking this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n  irreducible (primitive_part f)\n  square_free (primitive_part f)\n  f \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n  irreducible (primitive_part f)\n  square_free (primitive_part f)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "unfolding square_free_factorization_def"], ["proof (prove)\nusing this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n  irreducible (primitive_part f)\n  square_free (primitive_part f)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (case (c, fs) of\n     (c, bs) \\<Rightarrow>\n       f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set bs. a ^ Suc i) \\<and>\n       (f = 0 \\<longrightarrow> c = 0 \\<and> bs = []) \\<and>\n       (\\<forall>a i.\n           (a, i) \\<in> set bs \\<longrightarrow>\n           square_free a \\<and> 0 < degree a) \\<and>\n       (\\<forall>a i b j.\n           (a, i) \\<in> set bs \\<longrightarrow>\n           (b, j) \\<in> set bs \\<longrightarrow>\n           (a, i) \\<noteq> (b, j) \\<longrightarrow>\n           algebraic_semidom_class.coprime a b) \\<and>\n       distinct bs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "by (auto simp: 1)"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case 2"], ["proof (state)\nthis:\n  1 < degree f\n\ngoal (1 subgoal):\n 1. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "with res"], ["proof (chain)\npicking this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n  1 < degree f", "have \"internal_int_poly_factorization f = (c,fs)\""], ["proof (prove)\nusing this:\n  (if degree f = 0 then (coeff f 0, [])\n   else if degree f = 1 then (content f, [(primitive_part f, 0)])\n        else local.internal_int_poly_factorization f) =\n  (c, fs)\n  1 < degree f\n\ngoal (1 subgoal):\n 1. local.internal_int_poly_factorization f = (c, fs)", "by auto"], ["proof (state)\nthis:\n  local.internal_int_poly_factorization f = (c, fs)\n\ngoal (1 subgoal):\n 1. 1 < degree f \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from internal_int_poly_factorization[OF nz this] internal_int_poly_factorization_mem[OF nz this]"], ["proof (chain)\npicking this:\n  square_free_factorization f (c, fs)\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> irreducible\\<^sub>d ?fi\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> primitive ?fi\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> degree ?fi \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  square_free_factorization f (c, fs)\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> irreducible\\<^sub>d ?fi\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> primitive ?fi\n  (?fi, ?i) \\<in> set fs \\<Longrightarrow> degree ?fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factorize_int_poly: assumes res: \"factorize_int_poly_generic f = (c,fs)\"\nshows \"square_free_factorization f (c,fs)\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> irreducible fi\"\n  \"(fi,i) \\<in> set fs \\<Longrightarrow> degree fi \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow> irreducible fi) &&&\n    ((fi, i) \\<in> set fs \\<Longrightarrow> degree fi \\<noteq> 0)", "proof (atomize(full))"], ["proof (state)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "obtain n g where xs: \"x_split f = (n,g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n g.\n        x_split f = (n, g) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x_split f = (n, g)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "obtain d hs where fact: \"factorize_int_last_nz_poly g = (d,hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d hs.\n        local.factorize_int_last_nz_poly g = (d, hs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  local.factorize_int_last_nz_poly g = (d, hs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from res[unfolded factorize_int_poly_generic_def xs split fact]"], ["proof (chain)\npicking this:\n  (if g = 0 then (0, [])\n   else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n  (c, fs)", "have res: \"(if g = 0 then (0, []) else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)\""], ["proof (prove)\nusing this:\n  (if g = 0 then (0, [])\n   else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. (if g = 0 then (0, [])\n     else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n    (c, fs)", "."], ["proof (state)\nthis:\n  (if g = 0 then (0, [])\n   else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n  (c, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "note xs = x_split[OF xs]"], ["proof (state)\nthis:\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "show \"square_free_factorization f (c,fs) \\<and> ((fi,i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and> ((fi,i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "proof (cases \"g = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case True"], ["proof (state)\nthis:\n  g = 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "hence \"f = 0\" \"c = 0\" \"fs = []\""], ["proof (prove)\nusing this:\n  g = 0\n\ngoal (1 subgoal):\n 1. f = 0 &&& c = 0 &&& fs = []", "using res xs"], ["proof (prove)\nusing this:\n  g = 0\n  (if g = 0 then (0, [])\n   else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n  (c, fs)\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. f = 0 &&& c = 0 &&& fs = []", "by auto"], ["proof (state)\nthis:\n  f = 0\n  c = 0\n  fs = []\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = 0\n  c = 0\n  fs = []\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "unfolding square_free_factorization_def"], ["proof (prove)\nusing this:\n  f = 0\n  c = 0\n  fs = []\n\ngoal (1 subgoal):\n 1. (case (c, fs) of\n     (c, bs) \\<Rightarrow>\n       f = Polynomial.smult c (\\<Prod>(a, i)\\<in>set bs. a ^ Suc i) \\<and>\n       (f = 0 \\<longrightarrow> c = 0 \\<and> bs = []) \\<and>\n       (\\<forall>a i.\n           (a, i) \\<in> set bs \\<longrightarrow>\n           square_free a \\<and> 0 < degree a) \\<and>\n       (\\<forall>a i b j.\n           (a, i) \\<in> set bs \\<longrightarrow>\n           (b, j) \\<in> set bs \\<longrightarrow>\n           (a, i) \\<noteq> (b, j) \\<longrightarrow>\n           algebraic_semidom_class.coprime a b) \\<and>\n       distinct bs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case False"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "with xs"], ["proof (chain)\npicking this:\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n  g \\<noteq> 0", "have \"\\<not> monom 1 1 dvd g\""], ["proof (prove)\nusing this:\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> monom 1 1 dvd g", "by auto"], ["proof (state)\nthis:\n  \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "hence \"coeff g 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. coeff g 0 \\<noteq> 0", "by (simp add: monom_1_dvd_iff')"], ["proof (state)\nthis:\n  coeff g 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "note fact = factorize_int_last_nz_poly[OF fact this]"], ["proof (state)\nthis:\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "let ?x = \"monom 1 1 :: int poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have x: \"content ?x = 1 \\<and> lead_coeff ?x = 1 \\<and> degree ?x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content (monom 1 1) = 1 \\<and>\n    monic (monom 1 1) \\<and> degree (monom 1 1) = 1", "by (auto simp add: degree_monom_eq monom_Suc content_def)"], ["proof (state)\nthis:\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from res False"], ["proof (chain)\npicking this:\n  (if g = 0 then (0, [])\n   else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n  (c, fs)\n  g \\<noteq> 0", "have res: \"(if n = 0 then (d, hs) else (d, (?x, n - 1) # hs)) = (c, fs)\""], ["proof (prove)\nusing this:\n  (if g = 0 then (0, [])\n   else if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) =\n  (c, fs)\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)", "by auto"], ["proof (state)\nthis:\n  (if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "with res xs"], ["proof (chain)\npicking this:\n  (if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n  n = 0", "have id: \"fs = hs\" \"c = d\" \"f = g\""], ["proof (prove)\nusing this:\n  (if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n  n = 0\n\ngoal (1 subgoal):\n 1. fs = hs &&& c = d &&& f = g", "by auto"], ["proof (state)\nthis:\n  fs = hs\n  c = d\n  f = g\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from fact"], ["proof (chain)\npicking this:\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "unfolding id"], ["proof (prove)\nusing this:\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization g (d, hs) \\<and>\n    ((fi, i) \\<in> set hs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set hs \\<longrightarrow> degree fi \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "with res"], ["proof (chain)\npicking this:\n  (if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)\n  n = Suc m", "have id: \"c = d\" \"fs = (?x,m) # hs\""], ["proof (prove)\nusing this:\n  (if n = 0 then (d, hs) else (d, (monom 1 1, n - 1) # hs)) = (c, fs)\n  n = Suc m\n\ngoal (1 subgoal):\n 1. c = d &&& fs = (monom 1 1, m) # hs", "by auto"], ["proof (state)\nthis:\n  c = d\n  fs = (monom 1 1, m) # hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from Suc xs"], ["proof (chain)\npicking this:\n  n = Suc m\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g", "have fg: \"f = monom 1 (Suc m) * g\" and dvd: \"\\<not> ?x dvd g\""], ["proof (prove)\nusing this:\n  n = Suc m\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. f = monom 1 (Suc m) * g &&& \\<not> monom 1 1 dvd g", "by auto"], ["proof (state)\nthis:\n  f = monom 1 (Suc m) * g\n  \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from x linear_primitive_irreducible[of ?x]"], ["proof (chain)\npicking this:\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1\n  \\<lbrakk>degree (monom 1 1) = 1; primitive (monom 1 1)\\<rbrakk>\n  \\<Longrightarrow> irreducible (monom 1 1)", "have irr: \"irreducible ?x\""], ["proof (prove)\nusing this:\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1\n  \\<lbrakk>degree (monom 1 1) = 1; primitive (monom 1 1)\\<rbrakk>\n  \\<Longrightarrow> irreducible (monom 1 1)\n\ngoal (1 subgoal):\n 1. irreducible (monom 1 1)", "by auto"], ["proof (state)\nthis:\n  irreducible (monom 1 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from irreducible_imp_square_free[OF this]"], ["proof (chain)\npicking this:\n  square_free (monom 1 1)", "have sfx: \"square_free ?x\""], ["proof (prove)\nusing this:\n  square_free (monom 1 1)\n\ngoal (1 subgoal):\n 1. square_free (monom 1 1)", "."], ["proof (state)\nthis:\n  square_free (monom 1 1)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from irr fact"], ["proof (chain)\npicking this:\n  irreducible (monom 1 1)\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0", "have one: \"(fi, i) \\<in> set fs \\<longrightarrow> irreducible fi \\<and> degree fi \\<noteq> 0\""], ["proof (prove)\nusing this:\n  irreducible (monom 1 1)\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (fi, i) \\<in> set fs \\<longrightarrow>\n    irreducible fi \\<and> degree fi \\<noteq> 0", "unfolding id"], ["proof (prove)\nusing this:\n  irreducible (monom 1 1)\n  square_free_factorization g (d, hs)\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> irreducible ?fi\n  (?fi, ?i) \\<in> set hs \\<Longrightarrow> degree ?fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (fi, i) \\<in> set ((monom 1 1, m) # hs) \\<longrightarrow>\n    irreducible fi \\<and> degree fi \\<noteq> 0", "by (auto simp: degree_monom_eq)"], ["proof (state)\nthis:\n  (fi, i) \\<in> set fs \\<longrightarrow>\n  irreducible fi \\<and> degree fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have fg: \"f = ?x ^ n * g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = monom 1 1 ^ n * g", "unfolding fg Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 (Suc m) * g = monom 1 1 ^ Suc m * g", "by (metis x_pow_n)"], ["proof (state)\nthis:\n  f = monom 1 1 ^ n * g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from x"], ["proof (chain)\npicking this:\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1", "have degx: \"degree ?x = 1\""], ["proof (prove)\nusing this:\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. degree (monom 1 1) = 1", "by simp"], ["proof (state)\nthis:\n  degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "note sf = square_free_factorizationD[OF fact(1)]"], ["proof (state)\nthis:\n  g = Polynomial.smult d (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i)\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set hs; (?b, ?j) \\<in> set hs;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  g = 0 \\<Longrightarrow> d = 0 \\<and> hs = []\n  distinct hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "{"], ["proof (state)\nthis:\n  g = Polynomial.smult d (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i)\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  \\<lbrakk>(?a, ?i) \\<in> set hs; (?b, ?j) \\<in> set hs;\n   (?a, ?i) \\<noteq> (?b, ?j)\\<rbrakk>\n  \\<Longrightarrow> algebraic_semidom_class.coprime ?a ?b\n  g = 0 \\<Longrightarrow> d = 0 \\<and> hs = []\n  distinct hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "fix a i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "assume ai: \"(a,i) \\<in> set hs\""], ["proof (state)\nthis:\n  (a, i) \\<in> set hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "with sf(4)"], ["proof (chain)\npicking this:\n  g = 0 \\<Longrightarrow> d = 0 \\<and> hs = []\n  (a, i) \\<in> set hs", "have g0: \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g = 0 \\<Longrightarrow> d = 0 \\<and> hs = []\n  (a, i) \\<in> set hs\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from split_list[OF ai]"], ["proof (chain)\npicking this:\n  \\<exists>ys zs. hs = ys @ (a, i) # zs", "obtain ys zs where hs: \"hs = ys @ (a,i) # zs\""], ["proof (prove)\nusing this:\n  \\<exists>ys zs. hs = ys @ (a, i) # zs\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        hs = ys @ (a, i) # zs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  hs = ys @ (a, i) # zs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have \"a dvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd g", "unfolding square_free_factorization_prod_list[OF fact(1)] hs"], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd\n    Polynomial.smult d\n     (\\<Prod>(a, i)\\<leftarrow>ys @ (a, i) # zs. a ^ Suc i)", "by (rule dvd_smult, simp add: ac_simps)"], ["proof (state)\nthis:\n  a dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "moreover"], ["proof (state)\nthis:\n  a dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have \"\\<not> ?x dvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> monom 1 1 dvd g", "using xs[unfolded Suc]"], ["proof (prove)\nusing this:\n  f = monom 1 (Suc m) * g\n  Suc m \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow>\n  \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<not> monom 1 1 dvd g", "by auto"], ["proof (state)\nthis:\n  \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "ultimately"], ["proof (chain)\npicking this:\n  a dvd g\n  \\<not> monom 1 1 dvd g", "have dvd: \"\\<not> ?x dvd a\""], ["proof (prove)\nusing this:\n  a dvd g\n  \\<not> monom 1 1 dvd g\n\ngoal (1 subgoal):\n 1. \\<not> monom 1 1 dvd a", "using dvd_trans"], ["proof (prove)\nusing this:\n  a dvd g\n  \\<not> monom 1 1 dvd g\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. \\<not> monom 1 1 dvd a", "by blast"], ["proof (state)\nthis:\n  \\<not> monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from sf(2)[OF ai]"], ["proof (chain)\npicking this:\n  square_free a \\<and> degree a \\<noteq> 0", "have \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  square_free a \\<and> degree a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have \"1 = gcd ?x a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = gcd (monom 1 1) a", "proof (rule gcdI)"], ["proof (state)\ngoal (4 subgoals):\n 1. 1 dvd monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "fix d"], ["proof (state)\ngoal (4 subgoals):\n 1. 1 dvd monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "assume d: \"d dvd ?x\" \"d dvd a\""], ["proof (state)\nthis:\n  d dvd monom 1 1\n  d dvd a\n\ngoal (4 subgoals):\n 1. 1 dvd monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "from content_dvd_contentI[OF d(1)] x"], ["proof (chain)\npicking this:\n  content d dvd content (monom 1 1)\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1", "have cnt: \"is_unit (content d)\""], ["proof (prove)\nusing this:\n  content d dvd content (monom 1 1)\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. is_unit (content d)", "by auto"], ["proof (state)\nthis:\n  is_unit (content d)\n\ngoal (4 subgoals):\n 1. 1 dvd monom 1 1\n 2. 1 dvd a\n 3. \\<And>d.\n       \\<lbrakk>d dvd monom 1 1; d dvd a\\<rbrakk>\n       \\<Longrightarrow> is_unit d\n 4. normalize 1 = 1", "show \"is_unit d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit d", "proof (cases \"degree d = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "case False"], ["proof (state)\nthis:\n  degree d \\<noteq> 1\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "with divides_degree[OF d(1), unfolded degx]"], ["proof (chain)\npicking this:\n  degree d \\<le> 1 \\<or> monom 1 1 = 0\n  degree d \\<noteq> 1", "have \"degree d = 0\""], ["proof (prove)\nusing this:\n  degree d \\<le> 1 \\<or> monom 1 1 = 0\n  degree d \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree d = 0", "by auto"], ["proof (state)\nthis:\n  degree d = 0\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. d = [:a:]", "obtain c where dc: \"d = [:c:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. d = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. d = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  d = [:c:]\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "from cnt[unfolded dc]"], ["proof (chain)\npicking this:\n  is_unit (content [:c:])", "have \"is_unit c\""], ["proof (prove)\nusing this:\n  is_unit (content [:c:])\n\ngoal (1 subgoal):\n 1. is_unit c", "by (auto simp: content_def, cases \"c = 0\", auto)"], ["proof (state)\nthis:\n  is_unit c\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "hence \"d * d = 1\""], ["proof (prove)\nusing this:\n  is_unit c\n\ngoal (1 subgoal):\n 1. d * d = 1", "unfolding dc"], ["proof (prove)\nusing this:\n  is_unit c\n\ngoal (1 subgoal):\n 1. [:c:] * [:c:] = 1", "by (auto, cases \"c = -1\"; cases \"c = 1\", auto)"], ["proof (state)\nthis:\n  d * d = 1\n\ngoal (2 subgoals):\n 1. degree d = 1 \\<Longrightarrow> is_unit d\n 2. degree d \\<noteq> 1 \\<Longrightarrow> is_unit d", "thus \"is_unit d\""], ["proof (prove)\nusing this:\n  d * d = 1\n\ngoal (1 subgoal):\n 1. is_unit d", "by (metis dvd_triv_right)"], ["proof (state)\nthis:\n  is_unit d\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "case True"], ["proof (state)\nthis:\n  degree d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from d(1)"], ["proof (chain)\npicking this:\n  d dvd monom 1 1", "obtain e where xde: \"?x = d * e\""], ["proof (prove)\nusing this:\n  d dvd monom 1 1\n\ngoal (1 subgoal):\n 1. (\\<And>e. monom 1 1 = d * e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. monom 1 1 = d * k\n\ngoal (1 subgoal):\n 1. (\\<And>e. monom 1 1 = d * e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  monom 1 1 = d * e\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from arg_cong[OF this, of degree] degx"], ["proof (chain)\npicking this:\n  degree (monom 1 1) = degree (d * e)\n  degree (monom 1 1) = 1", "have \"degree d + degree e = 1\""], ["proof (prove)\nusing this:\n  degree (monom 1 1) = degree (d * e)\n  degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. degree d + degree e = 1", "by (metis True add.right_neutral degree_0 degree_mult_eq one_neq_zero)"], ["proof (state)\nthis:\n  degree d + degree e = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with True"], ["proof (chain)\npicking this:\n  degree d = 1\n  degree d + degree e = 1", "have \"degree e = 0\""], ["proof (prove)\nusing this:\n  degree d = 1\n  degree d + degree e = 1\n\ngoal (1 subgoal):\n 1. degree e = 0", "by auto"], ["proof (state)\nthis:\n  degree e = 0\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from degree0_coeffs[OF this] xde"], ["proof (chain)\npicking this:\n  \\<exists>a. e = [:a:]\n  monom 1 1 = d * e", "obtain e where xde: \"?x = [:e:] * d\""], ["proof (prove)\nusing this:\n  \\<exists>a. e = [:a:]\n  monom 1 1 = d * e\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        monom 1 1 = [:e:] * d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  monom 1 1 = [:e:] * d\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from arg_cong[OF this, of content, unfolded content_mult] x"], ["proof (chain)\npicking this:\n  content (monom 1 1) = content [:e:] * content d\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1", "have \"content [:e:] * content d = 1\""], ["proof (prove)\nusing this:\n  content (monom 1 1) = content [:e:] * content d\n  content (monom 1 1) = 1 \\<and>\n  monic (monom 1 1) \\<and> degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. content [:e:] * content d = 1", "by auto"], ["proof (state)\nthis:\n  content [:e:] * content d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "also"], ["proof (state)\nthis:\n  content [:e:] * content d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "have \"content [:e :] = abs e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content [:e:] = \\<bar>e\\<bar>", "by (auto simp: content_def, cases \"e = 0\", auto)"], ["proof (state)\nthis:\n  content [:e:] = \\<bar>e\\<bar>\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "finally"], ["proof (chain)\npicking this:\n  \\<bar>e\\<bar> * content d = 1", "have \"\\<bar>e\\<bar> * content d = 1\""], ["proof (prove)\nusing this:\n  \\<bar>e\\<bar> * content d = 1\n\ngoal (1 subgoal):\n 1. \\<bar>e\\<bar> * content d = 1", "."], ["proof (state)\nthis:\n  \\<bar>e\\<bar> * content d = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "from pos_zmult_eq_1_iff_lemma[OF this]"], ["proof (chain)\npicking this:\n  \\<bar>e\\<bar> = 1 \\<or> \\<bar>e\\<bar> = - 1", "have \"e * e = 1\""], ["proof (prove)\nusing this:\n  \\<bar>e\\<bar> = 1 \\<or> \\<bar>e\\<bar> = - 1\n\ngoal (1 subgoal):\n 1. e * e = 1", "by (cases \"e = 1\"; cases \"e = -1\", auto)"], ["proof (state)\nthis:\n  e * e = 1\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with arg_cong[OF xde, of \"smult e\"]"], ["proof (chain)\npicking this:\n  Polynomial.smult e (monom 1 1) = Polynomial.smult e ([:e:] * d)\n  e * e = 1", "have \"d = ?x * [:e:]\""], ["proof (prove)\nusing this:\n  Polynomial.smult e (monom 1 1) = Polynomial.smult e ([:e:] * d)\n  e * e = 1\n\ngoal (1 subgoal):\n 1. d = monom 1 1 * [:e:]", "by auto"], ["proof (state)\nthis:\n  d = monom 1 1 * [:e:]\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "hence \"?x dvd d\""], ["proof (prove)\nusing this:\n  d = monom 1 1 * [:e:]\n\ngoal (1 subgoal):\n 1. monom 1 1 dvd d", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  d = monom 1 1 * [:e:]\n\ngoal (1 subgoal):\n 1. \\<exists>k. d = monom 1 1 * k", "by blast"], ["proof (state)\nthis:\n  monom 1 1 dvd d\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with d(2)"], ["proof (chain)\npicking this:\n  d dvd a\n  monom 1 1 dvd d", "have \"?x dvd a\""], ["proof (prove)\nusing this:\n  d dvd a\n  monom 1 1 dvd d\n\ngoal (1 subgoal):\n 1. monom 1 1 dvd a", "by (metis dvd_trans)"], ["proof (state)\nthis:\n  monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. degree d = 1 \\<Longrightarrow> is_unit d", "with dvd"], ["proof (chain)\npicking this:\n  \\<not> monom 1 1 dvd a\n  monom 1 1 dvd a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> monom 1 1 dvd a\n  monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. is_unit d", "by auto"], ["proof (state)\nthis:\n  is_unit d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_unit d\n\ngoal (3 subgoals):\n 1. 1 dvd monom 1 1\n 2. 1 dvd a\n 3. normalize 1 = 1", "qed auto"], ["proof (state)\nthis:\n  1 = gcd (monom 1 1) a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "hence \"coprime ?x a\""], ["proof (prove)\nusing this:\n  1 = gcd (monom 1 1) a\n\ngoal (1 subgoal):\n 1. comm_monoid_mult_class.coprime (monom 1 1) a", "by (simp add: gcd_eq_1_imp_coprime)"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (monom 1 1) a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "note this dvd"], ["proof (state)\nthis:\n  comm_monoid_mult_class.coprime (monom 1 1) a\n  \\<not> monom 1 1 dvd a\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "}"], ["proof (state)\nthis:\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (monom 1 1) ?a2\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow> \\<not> monom 1 1 dvd ?a2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "note hs_dvd_x = this"], ["proof (state)\nthis:\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (monom 1 1) ?a2\n  (?a2, ?ia2) \\<in> set hs \\<Longrightarrow> \\<not> monom 1 1 dvd ?a2\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "from hs_dvd_x[of ?x m]"], ["proof (chain)\npicking this:\n  (monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (monom 1 1) (monom 1 1)\n  (monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  \\<not> monom 1 1 dvd monom 1 1", "have nmem: \"(?x,m) \\<notin> set hs\""], ["proof (prove)\nusing this:\n  (monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  comm_monoid_mult_class.coprime (monom 1 1) (monom 1 1)\n  (monom 1 1, m) \\<in> set hs \\<Longrightarrow>\n  \\<not> monom 1 1 dvd monom 1 1\n\ngoal (1 subgoal):\n 1. (monom 1 1, m) \\<notin> set hs", "by auto"], ["proof (state)\nthis:\n  (monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "hence eq: \"?x ^ n * g = smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\""], ["proof (prove)\nusing this:\n  (monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ n * g =\n    Polynomial.smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "unfolding sf(1)"], ["proof (prove)\nusing this:\n  (monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ n *\n    Polynomial.smult d (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i) =\n    Polynomial.smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)", "unfolding id Suc"], ["proof (prove)\nusing this:\n  (monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. monom 1 1 ^ Suc m *\n    Polynomial.smult d (\\<Prod>(a, i)\\<in>set hs. a ^ Suc i) =\n    Polynomial.smult d\n     (\\<Prod>(a, i)\\<in>set ((monom 1 1, m) # hs). a ^ Suc i)", "by simp"], ["proof (state)\nthis:\n  monom 1 1 ^ n * g =\n  Polynomial.smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have eq0: \"?x ^ n * g = 0 \\<longleftrightarrow> g = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom 1 1 ^ n * g = 0) = (g = 0)", "by simp"], ["proof (state)\nthis:\n  (monom 1 1 ^ n * g = 0) = (g = 0)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "have \"square_free_factorization f (d,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_free_factorization f (d, fs)", "unfolding fg id(1) square_free_factorization_def split eq0"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 1 ^ n * g =\n    Polynomial.smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) \\<and>\n    (g = 0 \\<longrightarrow> d = 0 \\<and> fs = []) \\<and>\n    (\\<forall>a i.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        square_free a \\<and> 0 < degree a) \\<and>\n    (\\<forall>a i b j.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        (b, j) \\<in> set fs \\<longrightarrow>\n        (a, i) \\<noteq> (b, j) \\<longrightarrow>\n        algebraic_semidom_class.coprime a b) \\<and>\n    distinct fs", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. Polynomial.smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) =\n    Polynomial.smult d (\\<Prod>(a, i)\\<in>set fs. a ^ Suc i) \\<and>\n    (g = 0 \\<longrightarrow> d = 0 \\<and> fs = []) \\<and>\n    (\\<forall>a i.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        square_free a \\<and> 0 < degree a) \\<and>\n    (\\<forall>a i b j.\n        (a, i) \\<in> set fs \\<longrightarrow>\n        (b, j) \\<in> set fs \\<longrightarrow>\n        (a, i) \\<noteq> (b, j) \\<longrightarrow>\n        algebraic_semidom_class.coprime a b) \\<and>\n    distinct fs", "proof (intro conjI allI impI, rule refl)"], ["proof (state)\ngoal (6 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 5. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 6. distinct fs", "fix a i"], ["proof (state)\ngoal (6 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 5. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 6. distinct fs", "assume ai: \"(a,i) \\<in> set fs\""], ["proof (state)\nthis:\n  (a, i) \\<in> set fs\n\ngoal (6 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> square_free a\n 4. \\<And>a i. (a, i) \\<in> set fs \\<Longrightarrow> 0 < degree a\n 5. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 6. distinct fs", "thus \"square_free a\" \"degree a > 0\""], ["proof (prove)\nusing this:\n  (a, i) \\<in> set fs\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "using sf(2) sfx degx"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set fs\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  square_free (monom 1 1)\n  degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "unfolding id"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set ((monom 1 1, m) # hs)\n  (?a, ?i) \\<in> set hs \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  square_free (monom 1 1)\n  degree (monom 1 1) = 1\n\ngoal (1 subgoal):\n 1. square_free a &&& 0 < degree a", "by auto"], ["proof (state)\nthis:\n  square_free a\n  0 < degree a\n\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "fix b j"], ["proof (state)\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "assume bj: \"(b,j) \\<in> set fs\" and diff: \"(a,i) \\<noteq> (b,j)\""], ["proof (state)\nthis:\n  (b, j) \\<in> set fs\n  (a, i) \\<noteq> (b, j)\n\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "consider (hs_hs) \"(a,i) \\<in> set hs\" \"(b,j) \\<in> set hs\"\n          | (hs_x) \"(a,i) \\<in> set hs\" \"b = ?x\"\n          | (x_hs) \"(b,j) \\<in> set hs\" \"a = ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using ai bj diff"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set fs\n  (b, j) \\<in> set fs\n  (a, i) \\<noteq> (b, j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding id"], ["proof (prove)\nusing this:\n  (a, i) \\<in> set ((monom 1 1, m) # hs)\n  (b, j) \\<in> set ((monom 1 1, m) # hs)\n  (a, i) \\<noteq> (b, j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (4 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. \\<And>a i b j.\n       \\<lbrakk>(a, i) \\<in> set fs; (b, j) \\<in> set fs;\n        (a, i) \\<noteq> (b, j)\\<rbrakk>\n       \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 4. distinct fs", "thus \"Rings.coprime a b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n           \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "case hs_hs"], ["proof (state)\nthis:\n  (a, i) \\<in> set hs\n  (b, j) \\<in> set hs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; (b, j) \\<in> set hs\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 3. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from sf(3)[OF this diff]"], ["proof (chain)\npicking this:\n  algebraic_semidom_class.coprime a b", "show ?thesis"], ["proof (prove)\nusing this:\n  algebraic_semidom_class.coprime a b\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "."], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "case hs_x"], ["proof (state)\nthis:\n  (a, i) \\<in> set hs\n  b = monom 1 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(a, i) \\<in> set hs; b = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b\n 2. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from hs_dvd_x(1)[OF hs_x(1)]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (monom 1 1) a", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (monom 1 1) a\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "unfolding hs_x(2)"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (monom 1 1) a\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a (monom 1 1)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "case x_hs"], ["proof (state)\nthis:\n  (b, j) \\<in> set hs\n  a = monom 1 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(b, j) \\<in> set hs; a = monom 1 1\\<rbrakk>\n    \\<Longrightarrow> algebraic_semidom_class.coprime a b", "from hs_dvd_x(1)[OF x_hs(1)]"], ["proof (chain)\npicking this:\n  comm_monoid_mult_class.coprime (monom 1 1) b", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (monom 1 1) b\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime a b", "unfolding x_hs(2)"], ["proof (prove)\nusing this:\n  comm_monoid_mult_class.coprime (monom 1 1) b\n\ngoal (1 subgoal):\n 1. algebraic_semidom_class.coprime (monom 1 1) b", "by simp"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  algebraic_semidom_class.coprime a b\n\ngoal (3 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. distinct fs", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. g = 0 \\<Longrightarrow> d = 0\n 2. g = 0 \\<Longrightarrow> fs = []\n 3. distinct fs", "show \"g = 0 \\<Longrightarrow> d = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> d = 0", "using sf(4)"], ["proof (prove)\nusing this:\n  g = 0 \\<Longrightarrow> d = 0 \\<and> hs = []\n\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> d = 0", "by auto"], ["proof (state)\nthis:\n  g = 0 \\<Longrightarrow> d = 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow> fs = []\n 2. distinct fs", "show \"g = 0 \\<Longrightarrow> fs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> fs = []", "using sf(4) xs Suc"], ["proof (prove)\nusing this:\n  g = 0 \\<Longrightarrow> d = 0 \\<and> hs = []\n  f = monom 1 n * g\n  n \\<noteq> 0 \\<or> f \\<noteq> 0 \\<Longrightarrow> \\<not> monom 1 1 dvd g\n  n = Suc m\n\ngoal (1 subgoal):\n 1. g = 0 \\<Longrightarrow> fs = []", "by auto"], ["proof (state)\nthis:\n  g = 0 \\<Longrightarrow> fs = []\n\ngoal (1 subgoal):\n 1. distinct fs", "show \"distinct fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct fs", "using sf(5) nmem"], ["proof (prove)\nusing this:\n  distinct hs\n  (monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. distinct fs", "unfolding id"], ["proof (prove)\nusing this:\n  distinct hs\n  (monom 1 1, m) \\<notin> set hs\n\ngoal (1 subgoal):\n 1. distinct ((monom 1 1, m) # hs)", "by auto"], ["proof (state)\nthis:\n  distinct fs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (d, fs)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       square_free_factorization f (c, fs) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n       ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  square_free_factorization f (d, fs)\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "using one"], ["proof (prove)\nusing this:\n  square_free_factorization f (d, fs)\n  (fi, i) \\<in> set fs \\<longrightarrow>\n  irreducible fi \\<and> degree fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (c, fs) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n    ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)", "unfolding id"], ["proof (prove)\nusing this:\n  square_free_factorization f (d, (monom 1 1, m) # hs)\n  (fi, i) \\<in> set ((monom 1 1, m) # hs) \\<longrightarrow>\n  irreducible fi \\<and> degree fi \\<noteq> 0\n\ngoal (1 subgoal):\n 1. square_free_factorization f (d, (monom 1 1, m) # hs) \\<and>\n    ((fi, i) \\<in> set ((monom 1 1, m) # hs) \\<longrightarrow>\n     irreducible fi) \\<and>\n    ((fi, i) \\<in> set ((monom 1 1, m) # hs) \\<longrightarrow>\n     degree fi \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  square_free_factorization f (c, fs) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> irreducible fi) \\<and>\n  ((fi, i) \\<in> set fs \\<longrightarrow> degree fi \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lift_definition berlekamp_zassenhaus_factorization_algorithm :: int_poly_factorization_algorithm\n  is berlekamp_zassenhaus_factorization"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>poly list.\n       \\<lbrakk>square_free poly; 0 < degree poly;\n        berlekamp_zassenhaus_factorization poly = list\\<rbrakk>\n       \\<Longrightarrow> poly = prod_list list \\<and>\n                         Ball (set list) irreducible\\<^sub>d", "using berlekamp_zassenhaus_factorization_irreducible\\<^sub>d"], ["proof (prove)\nusing this:\n  \\<lbrakk>berlekamp_zassenhaus_factorization ?f = ?fs; square_free ?f;\n   0 < degree ?f\\<rbrakk>\n  \\<Longrightarrow> ?f = prod_list ?fs \\<and>\n                    (\\<forall>fi\\<in>set ?fs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. \\<And>poly list.\n       \\<lbrakk>square_free poly; 0 < degree poly;\n        berlekamp_zassenhaus_factorization poly = list\\<rbrakk>\n       \\<Longrightarrow> poly = prod_list list \\<and>\n                         Ball (set list) irreducible\\<^sub>d", "by blast"], ["", "abbreviation factorize_int_poly where \n  \"factorize_int_poly \\<equiv> factorize_int_poly_generic berlekamp_zassenhaus_factorization_algorithm\""], ["", "end"]]}