{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Berlekamp_Zassenhaus.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma find_exponent: assumes p: \"p > 1\" \n  shows \"p ^ find_exponent p bnd > bnd\" \"find_exponent p bnd \\<noteq> 0\"", "theorem berlekamp_zassenhaus_factorization_irreducible\\<^sub>d:  \n  assumes res: \"berlekamp_zassenhaus_factorization f = fs\" \n  and sf: \"square_free f\"\n  and deg: \"degree f > 0\" \n  shows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible\\<^sub>d fi)\""], "translations": [["", "lemma find_exponent: assumes p: \"p > 1\" \n  shows \"p ^ find_exponent p bnd > bnd\" \"find_exponent p bnd \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent p bnd &&& find_exponent p bnd \\<noteq> 0", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. bnd < p ^ find_exponent p bnd\n 2. find_exponent p bnd \\<noteq> 0", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. bnd < p ^ find_exponent p bnd\n 2. find_exponent p bnd \\<noteq> 0", "fix m and n"], ["proof (state)\ngoal (2 subgoals):\n 1. bnd < p ^ find_exponent p bnd\n 2. find_exponent p bnd \\<noteq> 0", "assume \"n = nat (1 + bnd - p^m)\" and \"m \\<ge> 1\""], ["proof (state)\nthis:\n  n = nat (1 + bnd - p ^ m)\n  1 \\<le> m\n\ngoal (2 subgoals):\n 1. bnd < p ^ find_exponent p bnd\n 2. find_exponent p bnd \\<noteq> 0", "hence \"bnd < p ^ find_exponent_main p (p^m) m bnd \\<and> find_exponent_main p (p^m) m bnd \\<ge> 1\""], ["proof (prove)\nusing this:\n  n = nat (1 + bnd - p ^ m)\n  1 \\<le> m\n\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "proof (induct n arbitrary: m rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>\\<And>y m.\n                   \\<lbrakk>y < x; y = nat (1 + bnd - p ^ m);\n                    1 \\<le> m\\<rbrakk>\n                   \\<Longrightarrow> bnd\n                                     < p ^\n find_exponent_main p (p ^ m) m bnd \\<and>\n                                     1 \\<le> find_exponent_main p (p ^ m) m\n        bnd;\n        x = nat (1 + bnd - p ^ m); 1 \\<le> m\\<rbrakk>\n       \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n                         1 \\<le> find_exponent_main p (p ^ m) m bnd", "case (less n m)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; ?y = nat (1 + bnd - p ^ ?m); 1 \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ ?m) ?m bnd \\<and>\n                    1 \\<le> find_exponent_main p (p ^ ?m) ?m bnd\n  n = nat (1 + bnd - p ^ m)\n  1 \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>\\<And>y m.\n                   \\<lbrakk>y < x; y = nat (1 + bnd - p ^ m);\n                    1 \\<le> m\\<rbrakk>\n                   \\<Longrightarrow> bnd\n                                     < p ^\n find_exponent_main p (p ^ m) m bnd \\<and>\n                                     1 \\<le> find_exponent_main p (p ^ m) m\n        bnd;\n        x = nat (1 + bnd - p ^ m); 1 \\<le> m\\<rbrakk>\n       \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n                         1 \\<le> find_exponent_main p (p ^ m) m bnd", "note simp = find_exponent_main.simps[of p \"p^m\"]"], ["proof (state)\nthis:\n  find_exponent_main p (p ^ m) ?m ?bnd =\n  (if ?bnd < p ^ m then ?m\n   else find_exponent_main p (p ^ m * p) (Suc ?m) ?bnd)\n\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>\\<And>y m.\n                   \\<lbrakk>y < x; y = nat (1 + bnd - p ^ m);\n                    1 \\<le> m\\<rbrakk>\n                   \\<Longrightarrow> bnd\n                                     < p ^\n find_exponent_main p (p ^ m) m bnd \\<and>\n                                     1 \\<le> find_exponent_main p (p ^ m) m\n        bnd;\n        x = nat (1 + bnd - p ^ m); 1 \\<le> m\\<rbrakk>\n       \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n                         1 \\<le> find_exponent_main p (p ^ m) m bnd", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "proof (cases \"bnd < p ^ m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd\n 2. \\<not> bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "case True"], ["proof (state)\nthis:\n  bnd < p ^ m\n\ngoal (2 subgoals):\n 1. bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd\n 2. \\<not> bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "thus ?thesis"], ["proof (prove)\nusing this:\n  bnd < p ^ m\n\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "using less"], ["proof (prove)\nusing this:\n  bnd < p ^ m\n  \\<lbrakk>?y < n; ?y = nat (1 + bnd - p ^ ?m); 1 \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ ?m) ?m bnd \\<and>\n                    1 \\<le> find_exponent_main p (p ^ ?m) ?m bnd\n  n = nat (1 + bnd - p ^ m)\n  1 \\<le> m\n\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "unfolding simp"], ["proof (prove)\nusing this:\n  bnd < p ^ m\n  \\<lbrakk>?y < n; ?y = nat (1 + bnd - p ^ ?m); 1 \\<le> ?m\\<rbrakk>\n  \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ ?m) ?m bnd \\<and>\n                    1 \\<le> find_exponent_main p (p ^ ?m) ?m bnd\n  n = nat (1 + bnd - p ^ m)\n  1 \\<le> m\n\ngoal (1 subgoal):\n 1. bnd\n    < p ^\n      (if bnd < p ^ m then m\n       else find_exponent_main p (p ^ m * p) (Suc m) bnd) \\<and>\n    1 \\<le> (if bnd < p ^ m then m\n             else find_exponent_main p (p ^ m * p) (Suc m) bnd)", "by simp"], ["proof (state)\nthis:\n  bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ m) m bnd\n\ngoal (1 subgoal):\n 1. \\<not> bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "case False"], ["proof (state)\nthis:\n  \\<not> bnd < p ^ m\n\ngoal (1 subgoal):\n 1. \\<not> bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "hence id: \"find_exponent_main p (p ^ m) m bnd = find_exponent_main p (p ^ Suc m) (Suc m) bnd\""], ["proof (prove)\nusing this:\n  \\<not> bnd < p ^ m\n\ngoal (1 subgoal):\n 1. find_exponent_main p (p ^ m) m bnd =\n    find_exponent_main p (p ^ Suc m) (Suc m) bnd", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<not> bnd < p ^ m\n\ngoal (1 subgoal):\n 1. (if bnd < p ^ m then m\n     else find_exponent_main p (p ^ m * p) (Suc m) bnd) =\n    find_exponent_main p (p ^ Suc m) (Suc m) bnd", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  find_exponent_main p (p ^ m) m bnd =\n  find_exponent_main p (p ^ Suc m) (Suc m) bnd\n\ngoal (1 subgoal):\n 1. \\<not> bnd < p ^ m \\<Longrightarrow>\n    bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ m) m bnd", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p (p ^ Suc m) (Suc m) bnd \\<and>\n    1 \\<le> find_exponent_main p (p ^ Suc m) (Suc m) bnd", "by (rule less(1)[OF _ refl], unfold less(2), insert False p, auto)"], ["proof (state)\nthis:\n  bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ m) m bnd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ m) m bnd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bnd < p ^ find_exponent_main p (p ^ m) m bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ m) m bnd\n\ngoal (2 subgoals):\n 1. bnd < p ^ find_exponent p bnd\n 2. find_exponent p bnd \\<noteq> 0", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?n2 = nat (1 + bnd - p ^ ?m2); 1 \\<le> ?m2\\<rbrakk>\n  \\<Longrightarrow> bnd < p ^ find_exponent_main p (p ^ ?m2) ?m2 bnd \\<and>\n                    1 \\<le> find_exponent_main p (p ^ ?m2) ?m2 bnd\n\ngoal (2 subgoals):\n 1. bnd < p ^ find_exponent p bnd\n 2. find_exponent p bnd \\<noteq> 0", "from this[OF refl, of 1]"], ["proof (chain)\npicking this:\n  1 \\<le> 1 \\<Longrightarrow>\n  bnd < p ^ find_exponent_main p (p ^ 1) 1 bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ 1) 1 bnd", "show \"p ^ find_exponent p bnd > bnd\" \"find_exponent p bnd \\<noteq> 0\""], ["proof (prove)\nusing this:\n  1 \\<le> 1 \\<Longrightarrow>\n  bnd < p ^ find_exponent_main p (p ^ 1) 1 bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ 1) 1 bnd\n\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent p bnd &&& find_exponent p bnd \\<noteq> 0", "unfolding find_exponent_def"], ["proof (prove)\nusing this:\n  1 \\<le> 1 \\<Longrightarrow>\n  bnd < p ^ find_exponent_main p (p ^ 1) 1 bnd \\<and>\n  1 \\<le> find_exponent_main p (p ^ 1) 1 bnd\n\ngoal (1 subgoal):\n 1. bnd < p ^ find_exponent_main p p 1 bnd &&&\n    find_exponent_main p p 1 bnd \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  bnd < p ^ find_exponent p bnd\n  find_exponent p bnd \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "definition berlekamp_zassenhaus_factorization :: \"int poly \\<Rightarrow> int poly list\" where\n  \"berlekamp_zassenhaus_factorization f = (let \n     \\<comment> \\<open>find suitable prime\\<close>\n     p = suitable_prime_bz f;\n     \\<comment> \\<open>compute finite field factorization\\<close>\n     (_, fs) = finite_field_factorization_int p f; \n     \\<comment> \\<open>determine maximal degree that we can build by multiplying at most half of the factors\\<close>\n     max_deg = degree_bound fs;\n     \\<comment> \\<open>determine a number large enough to represent all coefficients of every\\<close>\n     \\<comment> \\<open>factor of \\<open>lc * f\\<close> that has at most degree most \\<open>max_deg\\<close>\\<close>\n     bnd = 2 * \\<bar>lead_coeff f\\<bar> * factor_bound f max_deg;\n     \\<comment> \\<open>determine \\<open>k\\<close> such that \\<open>p^k > bnd\\<close>\\<close>\n     k = find_exponent p bnd;\n     \\<comment> \\<open>perform hensel lifting to lift factorization to mod \\<open>p^k\\<close>\\<close>\n     vs = hensel_lifting p k f fs\n     \\<comment> \\<open>reconstruct integer factors\\<close>\n   in zassenhaus_reconstruction vs p k f)\""], ["", "theorem berlekamp_zassenhaus_factorization_irreducible\\<^sub>d:  \n  assumes res: \"berlekamp_zassenhaus_factorization f = fs\" \n  and sf: \"square_free f\"\n  and deg: \"degree f > 0\" \n  shows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible\\<^sub>d fi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "let ?lc = \"lead_coeff f\""], ["proof (state)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "define p where \"p \\<equiv> suitable_prime_bz f\""], ["proof (state)\nthis:\n  p \\<equiv> suitable_prime_bz f\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "obtain c gs where berl: \"finite_field_factorization_int p f = (c,gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c gs.\n        finite_field_factorization_int p f = (c, gs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  finite_field_factorization_int p f = (c, gs)\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "let ?degs = \"map degree gs\""], ["proof (state)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "note res = res[unfolded berlekamp_zassenhaus_factorization_def Let_def, folded p_def,\n    unfolded berl split, folded]"], ["proof (state)\nthis:\n  zassenhaus_reconstruction\n   (hensel_lifting p\n     (find_exponent p\n       (2 * \\<bar>lead_coeff f\\<bar> * factor_bound f (degree_bound gs)))\n     f gs)\n   p (find_exponent p\n       (2 * \\<bar>lead_coeff f\\<bar> * factor_bound f (degree_bound gs)))\n   f =\n  fs\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from suitable_prime_bz[OF sf refl]"], ["proof (chain)\npicking this:\n  prime (suitable_prime_bz f)\n  comm_monoid_mult_class.coprime (lead_coeff f) (suitable_prime_bz f)\n  poly_mod.square_free_m (suitable_prime_bz f) f", "have prime: \"prime p\" and cop: \"coprime ?lc p\" and sf: \"poly_mod.square_free_m p f\""], ["proof (prove)\nusing this:\n  prime (suitable_prime_bz f)\n  comm_monoid_mult_class.coprime (lead_coeff f) (suitable_prime_bz f)\n  poly_mod.square_free_m (suitable_prime_bz f) f\n\ngoal (1 subgoal):\n 1. prime p &&&\n    comm_monoid_mult_class.coprime (lead_coeff f) p &&&\n    poly_mod.square_free_m p f", "unfolding p_def"], ["proof (prove)\nusing this:\n  prime (suitable_prime_bz f)\n  comm_monoid_mult_class.coprime (lead_coeff f) (suitable_prime_bz f)\n  poly_mod.square_free_m (suitable_prime_bz f) f\n\ngoal (1 subgoal):\n 1. prime (suitable_prime_bz f) &&&\n    comm_monoid_mult_class.coprime (lead_coeff f) (suitable_prime_bz f) &&&\n    poly_mod.square_free_m (suitable_prime_bz f) f", "by auto"], ["proof (state)\nthis:\n  prime p\n  comm_monoid_mult_class.coprime (lead_coeff f) p\n  poly_mod.square_free_m p f\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "from prime"], ["proof (chain)\npicking this:\n  prime p", "interpret poly_mod_prime p"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. poly_mod_prime p", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "define n where \"n = find_exponent p (2 * abs ?lc * factor_bound f (degree_bound gs))\""], ["proof (state)\nthis:\n  n =\n  find_exponent p\n   (2 * \\<bar>lead_coeff f\\<bar> * factor_bound f (degree_bound gs))\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "note n = find_exponent[OF m1, of \"2 * abs ?lc * factor_bound f (degree_bound gs)\",\n    folded n_def]"], ["proof (state)\nthis:\n  2 * \\<bar>lead_coeff f\\<bar> * factor_bound f (degree_bound gs) < p ^ n\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "note bh = berlekamp_and_hensel_separated[OF cop sf refl berl n(2)]"], ["proof (state)\nthis:\n  berlekamp_hensel p n f = hensel_lifting p n f gs\n  sort (map degree gs) = sort (map degree (hensel_lifting p n f gs))\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "have db: \"degree_bound (berlekamp_hensel p n f) = degree_bound gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_bound (berlekamp_hensel p n f) = degree_bound gs", "unfolding bh\n    degree_bound_def max_factor_degree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let ds = sort (map degree (hensel_lifting p n f gs))\n     in sum_list (drop (length ds div 2) ds)) =\n    (let ds = sort (map degree (hensel_lifting p n f gs))\n     in sum_list (drop (length ds div 2) ds))", "by simp"], ["proof (state)\nthis:\n  degree_bound (berlekamp_hensel p n f) = degree_bound gs\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "note res = res[folded n_def bh(1)]"], ["proof (state)\nthis:\n  zassenhaus_reconstruction (berlekamp_hensel p n f) p n f = fs\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)", "by (rule zassenhaus_reconstruction_irreducible\\<^sub>d[OF prime cop sf deg refl _ res], insert n db, auto)"], ["proof (state)\nthis:\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary berlekamp_zassenhaus_factorization_irreducible:\n  assumes res: \"berlekamp_zassenhaus_factorization f = fs\" \n    and sf: \"square_free f\"\n    and pr: \"primitive f\"\n    and deg: \"degree f > 0\"\n  shows \"f = prod_list fs \\<and> (\\<forall> fi \\<in> set fs. irreducible fi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible fi)", "using pr irreducible_primitive_connect[OF primitive_prod_list]\n    berlekamp_zassenhaus_factorization_irreducible\\<^sub>d[OF res sf deg]"], ["proof (prove)\nusing this:\n  primitive f\n  \\<lbrakk>primitive (prod_list ?fs1); ?f \\<in> set ?fs1\\<rbrakk>\n  \\<Longrightarrow> irreducible\\<^sub>d ?f = irreducible ?f\n  f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible\\<^sub>d fi)\n\ngoal (1 subgoal):\n 1. f = prod_list fs \\<and> (\\<forall>fi\\<in>set fs. irreducible fi)", "by auto"], ["", "end"]]}