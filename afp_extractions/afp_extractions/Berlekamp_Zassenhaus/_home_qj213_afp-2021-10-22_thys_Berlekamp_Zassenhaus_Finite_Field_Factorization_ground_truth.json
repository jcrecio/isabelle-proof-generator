{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Finite_Field_Factorization.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma finite_field_factorization_explicit:\n  fixes f::\"'a mod_ring poly\"\n  assumes sf_f: \"square_free f\"\n    and us: \"finite_field_factorization f = (c,us)\"\n  shows \"f = smult c (prod_list us) \\<and> (\\<forall> u \\<in> set us. monic u \\<and> irreducible u)\"", "lemma finite_field_factorization:\n  fixes f::\"'a mod_ring poly\"\n  assumes sf_f: \"square_free f\"\n    and us: \"finite_field_factorization f = (c,us)\"\n  shows \"unique_factorization Irr_Mon f (c, mset us)\""], "translations": [["", "lemma finite_field_factorization_explicit:\n  fixes f::\"'a mod_ring poly\"\n  assumes sf_f: \"square_free f\"\n    and us: \"finite_field_factorization f = (c,us)\"\n  shows \"f = smult c (prod_list us) \\<and> (\\<forall> u \\<in> set us. monic u \\<and> irreducible u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "proof (cases \"degree f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "case False"], ["proof (state)\nthis:\n  degree f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "note f = this"], ["proof (state)\nthis:\n  degree f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "define g where \"g = smult (inverse c) f\""], ["proof (state)\nthis:\n  g = Polynomial.smult (inverse c) f\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "obtain gs where dist: \"(if use_distinct_degree_factorization then distinct_degree_factorization g else [(1,g)]) = gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>gs.\n        (if use_distinct_degree_factorization\n         then distinct_degree_factorization g else [(1, g)]) =\n        gs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (if use_distinct_degree_factorization then distinct_degree_factorization g\n   else [(1, g)]) =\n  gs\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "note us = us[unfolded finite_field_factorization_def Let_def]"], ["proof (state)\nthis:\n  (if degree f = 0 then (lead_coeff f, [])\n   else case List.partition (\\<lambda>(i, f). degree f = i)\n              (if use_distinct_degree_factorization\n               then distinct_degree_factorization\n                     (Polynomial.smult (inverse (lead_coeff f)) f)\n               else [(1, Polynomial.smult (inverse (lead_coeff f)) f)]) of\n        (irr, hs) \\<Rightarrow>\n          (lead_coeff f,\n           map snd irr @\n           concat\n            (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n              hs))) =\n  (c, us)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from us f"], ["proof (chain)\npicking this:\n  (if degree f = 0 then (lead_coeff f, [])\n   else case List.partition (\\<lambda>(i, f). degree f = i)\n              (if use_distinct_degree_factorization\n               then distinct_degree_factorization\n                     (Polynomial.smult (inverse (lead_coeff f)) f)\n               else [(1, Polynomial.smult (inverse (lead_coeff f)) f)]) of\n        (irr, hs) \\<Rightarrow>\n          (lead_coeff f,\n           map snd irr @\n           concat\n            (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n              hs))) =\n  (c, us)\n  degree f \\<noteq> 0", "have c: \"c = lead_coeff f\""], ["proof (prove)\nusing this:\n  (if degree f = 0 then (lead_coeff f, [])\n   else case List.partition (\\<lambda>(i, f). degree f = i)\n              (if use_distinct_degree_factorization\n               then distinct_degree_factorization\n                     (Polynomial.smult (inverse (lead_coeff f)) f)\n               else [(1, Polynomial.smult (inverse (lead_coeff f)) f)]) of\n        (irr, hs) \\<Rightarrow>\n          (lead_coeff f,\n           map snd irr @\n           concat\n            (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n              hs))) =\n  (c, us)\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c = lead_coeff f", "by auto"], ["proof (state)\nthis:\n  c = lead_coeff f\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "obtain irr hs where part: \"List.partition (\\<lambda> (i, f). degree f = i) gs = (irr,hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>irr hs.\n        List.partition (\\<lambda>(i, f). degree f = i) gs =\n        (irr, hs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  List.partition (\\<lambda>(i, f). degree f = i) gs = (irr, hs)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from arg_cong[OF this, of fst]"], ["proof (chain)\npicking this:\n  fst (List.partition (\\<lambda>(i, f). degree f = i) gs) = fst (irr, hs)", "have irr: \"irr = filter (\\<lambda> (i, f). degree f = i) gs\""], ["proof (prove)\nusing this:\n  fst (List.partition (\\<lambda>(i, f). degree f = i) gs) = fst (irr, hs)\n\ngoal (1 subgoal):\n 1. irr = filter (\\<lambda>(i, f). degree f = i) gs", "by auto"], ["proof (state)\nthis:\n  irr = filter (\\<lambda>(i, f). degree f = i) gs\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from us[folded c, folded g_def, unfolded dist part split] f"], ["proof (chain)\npicking this:\n  (if degree f = 0 then (c, [])\n   else (c, map snd irr @\n            concat\n             (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n               hs))) =\n  (c, us)\n  degree f \\<noteq> 0", "have us: \"us = map snd irr @ concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)\""], ["proof (prove)\nusing this:\n  (if degree f = 0 then (c, [])\n   else (c, map snd irr @\n            concat\n             (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n               hs))) =\n  (c, us)\n  degree f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. us =\n    map snd irr @\n    concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)", "by auto"], ["proof (state)\nthis:\n  us =\n  map snd irr @\n  concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from f c"], ["proof (chain)\npicking this:\n  degree f \\<noteq> 0\n  c = lead_coeff f", "have c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  c = lead_coeff f\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from False c0"], ["proof (chain)\npicking this:\n  degree f \\<noteq> 0\n  c \\<noteq> 0", "have deg_g: \"degree g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree g \\<noteq> 0", "unfolding g_def"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (Polynomial.smult (inverse c) f) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  degree g \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "have mon_g: \"monic g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic g", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (Polynomial.smult (inverse c) f)", "by (metis c c0 field_class.field_inverse lead_coeff_smult)"], ["proof (state)\nthis:\n  monic g\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from sf_f"], ["proof (chain)\npicking this:\n  square_free f", "have sf_g: \"square_free g\""], ["proof (prove)\nusing this:\n  square_free f\n\ngoal (1 subgoal):\n 1. square_free g", "unfolding g_def"], ["proof (prove)\nusing this:\n  square_free f\n\ngoal (1 subgoal):\n 1. square_free (Polynomial.smult (inverse c) f)", "by (simp add: c0)"], ["proof (state)\nthis:\n  square_free g\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from c0"], ["proof (chain)\npicking this:\n  c \\<noteq> 0", "have f: \"f = smult c g\""], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult c g", "unfolding g_def"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (Polynomial.smult (inverse c) f)", "by auto"], ["proof (state)\nthis:\n  f = Polynomial.smult c g\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "have \"g = prod_list (map snd gs) \\<and> (\\<forall> (i,f) \\<in> set gs. degree f > 0 \\<and> monic f \\<and> (\\<forall> h. h dvd f \\<longrightarrow> degree h = i \\<longrightarrow> irreducible h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "proof (cases use_distinct_degree_factorization)"], ["proof (state)\ngoal (2 subgoals):\n 1. use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))\n 2. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "case True"], ["proof (state)\nthis:\n  use_distinct_degree_factorization\n\ngoal (2 subgoals):\n 1. use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))\n 2. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "with dist"], ["proof (chain)\npicking this:\n  (if use_distinct_degree_factorization then distinct_degree_factorization g\n   else [(1, g)]) =\n  gs\n  use_distinct_degree_factorization", "have \"distinct_degree_factorization g = gs\""], ["proof (prove)\nusing this:\n  (if use_distinct_degree_factorization then distinct_degree_factorization g\n   else [(1, g)]) =\n  gs\n  use_distinct_degree_factorization\n\ngoal (1 subgoal):\n 1. distinct_degree_factorization g = gs", "by auto"], ["proof (state)\nthis:\n  distinct_degree_factorization g = gs\n\ngoal (2 subgoals):\n 1. use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))\n 2. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "note dist = distinct_degree_factorization[OF this sf_g mon_g]"], ["proof (state)\nthis:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set gs \\<longrightarrow> factors_of_same_degree i f)\n\ngoal (2 subgoals):\n 1. use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))\n 2. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "from dist"], ["proof (chain)\npicking this:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set gs \\<longrightarrow> factors_of_same_degree i f)", "have g: \"g = prod_list (map snd gs)\""], ["proof (prove)\nusing this:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set gs \\<longrightarrow> factors_of_same_degree i f)\n\ngoal (1 subgoal):\n 1. g = prod_list (map snd gs)", "by auto"], ["proof (state)\nthis:\n  g = prod_list (map snd gs)\n\ngoal (2 subgoals):\n 1. use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))\n 2. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "proof (intro conjI[OF g] ballI, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set gs \\<Longrightarrow>\n       0 < degree b \\<and>\n       monic b \\<and>\n       (\\<forall>h.\n           h dvd b \\<longrightarrow>\n           degree h = a \\<longrightarrow> irreducible h)", "fix i f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set gs \\<Longrightarrow>\n       0 < degree b \\<and>\n       monic b \\<and>\n       (\\<forall>h.\n           h dvd b \\<longrightarrow>\n           degree h = a \\<longrightarrow> irreducible h)", "assume \"(i,f) \\<in> set gs\""], ["proof (state)\nthis:\n  (i, f) \\<in> set gs\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set gs \\<Longrightarrow>\n       0 < degree b \\<and>\n       monic b \\<and>\n       (\\<forall>h.\n           h dvd b \\<longrightarrow>\n           degree h = a \\<longrightarrow> irreducible h)", "with dist"], ["proof (chain)\npicking this:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set gs \\<longrightarrow> factors_of_same_degree i f)\n  (i, f) \\<in> set gs", "have \"factors_of_same_degree i f\""], ["proof (prove)\nusing this:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>i f.\n      (i, f) \\<in> set gs \\<longrightarrow> factors_of_same_degree i f)\n  (i, f) \\<in> set gs\n\ngoal (1 subgoal):\n 1. factors_of_same_degree i f", "by auto"], ["proof (state)\nthis:\n  factors_of_same_degree i f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set gs \\<Longrightarrow>\n       0 < degree b \\<and>\n       monic b \\<and>\n       (\\<forall>h.\n           h dvd b \\<longrightarrow>\n           degree h = a \\<longrightarrow> irreducible h)", "from factors_of_same_degreeD[OF this]"], ["proof (chain)\npicking this:\n  i \\<noteq> 0\n  degree f \\<noteq> 0\n  monic f\n  ?g dvd f \\<Longrightarrow> irreducible ?g = (degree ?g = i)", "show \"degree f > 0 \\<and> monic f \\<and> (\\<forall>h. h dvd f \\<longrightarrow> degree h = i \\<longrightarrow> irreducible h)\""], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n  degree f \\<noteq> 0\n  monic f\n  ?g dvd f \\<Longrightarrow> irreducible ?g = (degree ?g = i)\n\ngoal (1 subgoal):\n 1. 0 < degree f \\<and>\n    monic f \\<and>\n    (\\<forall>h.\n        h dvd f \\<longrightarrow>\n        degree h = i \\<longrightarrow> irreducible h)", "by auto"], ["proof (state)\nthis:\n  0 < degree f \\<and>\n  monic f \\<and>\n  (\\<forall>h.\n      h dvd f \\<longrightarrow>\n      degree h = i \\<longrightarrow> irreducible h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>(i, f)\\<in>set gs.\n      0 < degree f \\<and>\n      monic f \\<and>\n      (\\<forall>h.\n          h dvd f \\<longrightarrow>\n          degree h = i \\<longrightarrow> irreducible h))\n\ngoal (1 subgoal):\n 1. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "case False"], ["proof (state)\nthis:\n  \\<not> use_distinct_degree_factorization\n\ngoal (1 subgoal):\n 1. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "with dist"], ["proof (chain)\npicking this:\n  (if use_distinct_degree_factorization then distinct_degree_factorization g\n   else [(1, g)]) =\n  gs\n  \\<not> use_distinct_degree_factorization", "have gs: \"gs = [(1,g)]\""], ["proof (prove)\nusing this:\n  (if use_distinct_degree_factorization then distinct_degree_factorization g\n   else [(1, g)]) =\n  gs\n  \\<not> use_distinct_degree_factorization\n\ngoal (1 subgoal):\n 1. gs = [(1, g)]", "by auto"], ["proof (state)\nthis:\n  gs = [(1, g)]\n\ngoal (1 subgoal):\n 1. \\<not> use_distinct_degree_factorization \\<Longrightarrow>\n    g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. g = prod_list (map snd gs) \\<and>\n    (\\<forall>(i, f)\\<in>set gs.\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "unfolding gs"], ["proof (prove)\ngoal (1 subgoal):\n 1. g = prod_list (map snd [(1, g)]) \\<and>\n    (\\<forall>(i, f)\\<in>set [(1, g)].\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "using deg_g mon_g linear_irreducible\\<^sub>d[where 'a = \"'a mod_ring\"]"], ["proof (prove)\nusing this:\n  degree g \\<noteq> 0\n  monic g\n  degree ?p = 1 \\<Longrightarrow> irreducible\\<^sub>d ?p\n\ngoal (1 subgoal):\n 1. g = prod_list (map snd [(1, g)]) \\<and>\n    (\\<forall>(i, f)\\<in>set [(1, g)].\n        0 < degree f \\<and>\n        monic f \\<and>\n        (\\<forall>h.\n            h dvd f \\<longrightarrow>\n            degree h = i \\<longrightarrow> irreducible h))", "by auto"], ["proof (state)\nthis:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>(i, f)\\<in>set gs.\n      0 < degree f \\<and>\n      monic f \\<and>\n      (\\<forall>h.\n          h dvd f \\<longrightarrow>\n          degree h = i \\<longrightarrow> irreducible h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>(i, f)\\<in>set gs.\n      0 < degree f \\<and>\n      monic f \\<and>\n      (\\<forall>h.\n          h dvd f \\<longrightarrow>\n          degree h = i \\<longrightarrow> irreducible h))\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "hence g_gs: \"g = prod_list (map snd gs)\" \n    and mon_gs: \"\\<And> i f. (i, f) \\<in> set gs \\<Longrightarrow> monic f \\<and> degree f > 0\" \n    and irrI: \"\\<And> i f h . (i, f) \\<in> set gs \\<Longrightarrow> h dvd f \\<Longrightarrow> degree h = i \\<Longrightarrow> irreducible h\""], ["proof (prove)\nusing this:\n  g = prod_list (map snd gs) \\<and>\n  (\\<forall>(i, f)\\<in>set gs.\n      0 < degree f \\<and>\n      monic f \\<and>\n      (\\<forall>h.\n          h dvd f \\<longrightarrow>\n          degree h = i \\<longrightarrow> irreducible h))\n\ngoal (1 subgoal):\n 1. g = prod_list (map snd gs) &&&\n    (\\<And>i f.\n        (i, f) \\<in> set gs \\<Longrightarrow>\n        monic f \\<and> 0 < degree f) &&&\n    (\\<And>i f h.\n        \\<lbrakk>(i, f) \\<in> set gs; h dvd f; degree h = i\\<rbrakk>\n        \\<Longrightarrow> irreducible h)", "by auto"], ["proof (state)\nthis:\n  g = prod_list (map snd gs)\n  (?i, ?f) \\<in> set gs \\<Longrightarrow> monic ?f \\<and> 0 < degree ?f\n  \\<lbrakk>(?i, ?f) \\<in> set gs; ?h dvd ?f; degree ?h = ?i\\<rbrakk>\n  \\<Longrightarrow> irreducible ?h\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "have g: \"g = prod_list (map snd irr) * prod_list (map snd hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = prod_list (map snd irr) * prod_list (map snd hs)", "unfolding g_gs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map snd gs) =\n    prod_list (map snd irr) * prod_list (map snd hs)", "using prod_list_map_partition[OF part]"], ["proof (prove)\nusing this:\n  prod_list (map ?g gs) = prod_list (map ?g irr) * prod_list (map ?g hs)\n\ngoal (1 subgoal):\n 1. prod_list (map snd gs) =\n    prod_list (map snd irr) * prod_list (map snd hs)", "."], ["proof (state)\nthis:\n  g = prod_list (map snd irr) * prod_list (map snd hs)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "{"], ["proof (state)\nthis:\n  g = prod_list (map snd irr) * prod_list (map snd hs)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "fix f"], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "assume \"f \\<in> snd ` set irr\""], ["proof (state)\nthis:\n  f \\<in> snd ` set irr\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from this[unfolded irr]"], ["proof (chain)\npicking this:\n  f \\<in> snd ` set (filter (\\<lambda>(i, f). degree f = i) gs)", "obtain i where *:  \"(i,f) \\<in> set gs\" \"degree f = i\""], ["proof (prove)\nusing this:\n  f \\<in> snd ` set (filter (\\<lambda>(i, f). degree f = i) gs)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>(i, f) \\<in> set gs; degree f = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (i, f) \\<in> set gs\n  degree f = i\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "have \"f dvd f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd f", "by auto"], ["proof (state)\nthis:\n  f dvd f\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "from irrI[OF *(1) this *(2)] mon_gs[OF *(1)]"], ["proof (chain)\npicking this:\n  irreducible f\n  monic f \\<and> 0 < degree f", "have \"monic f\" \"irreducible f\""], ["proof (prove)\nusing this:\n  irreducible f\n  monic f \\<and> 0 < degree f\n\ngoal (1 subgoal):\n 1. monic f &&& irreducible f", "by auto"], ["proof (state)\nthis:\n  monic f\n  irreducible f\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "}"], ["proof (state)\nthis:\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> monic ?fa2\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> irreducible ?fa2\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "note irr = this"], ["proof (state)\nthis:\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> monic ?fa2\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> irreducible ?fa2\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "let ?berl = \"\\<lambda> hs. concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)\""], ["proof (state)\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "have \"set hs \\<subseteq> set gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set hs \\<subseteq> set gs", "using part"], ["proof (prove)\nusing this:\n  List.partition (\\<lambda>(i, f). degree f = i) gs = (irr, hs)\n\ngoal (1 subgoal):\n 1. set hs \\<subseteq> set gs", "by auto"], ["proof (state)\nthis:\n  set hs \\<subseteq> set gs\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "hence \"prod_list (map snd hs) = prod_list (?berl hs)\n    \\<and> (\\<forall> f \\<in> set (?berl hs). monic f \\<and> irreducible\\<^sub>d f)\""], ["proof (prove)\nusing this:\n  set hs \\<subseteq> set gs\n\ngoal (1 subgoal):\n 1. prod_list (map snd hs) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            hs)).\n        monic f \\<and> irreducible\\<^sub>d f)", "proof (induct hs)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "case (Cons ih hs)"], ["proof (state)\nthis:\n  set hs \\<subseteq> set gs \\<Longrightarrow>\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>a.\n              case a of\n              (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n       hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (a, b) \\<Rightarrow>\n                                   berlekamp_monic_factorization a b)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n  set (ih # hs) \\<subseteq> set gs\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "obtain i h where ih: \"ih = (i,h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i h. ih = (i, h) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ih = (i, h)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "have \"?berl (Cons ih hs) = berlekamp_monic_factorization i h @ ?berl hs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (ih # hs)) =\n    berlekamp_monic_factorization i h @\n    concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)", "unfolding ih"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n       ((i, h) # hs)) =\n    berlekamp_monic_factorization i h @\n    concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)", "by auto"], ["proof (state)\nthis:\n  concat\n   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (ih # hs)) =\n  berlekamp_monic_factorization i h @\n  concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "from Cons(2)[unfolded ih]"], ["proof (chain)\npicking this:\n  set ((i, h) # hs) \\<subseteq> set gs", "have mem: \"(i,h) \\<in> set gs\" and sub: \"set hs \\<subseteq> set gs\""], ["proof (prove)\nusing this:\n  set ((i, h) # hs) \\<subseteq> set gs\n\ngoal (1 subgoal):\n 1. (i, h) \\<in> set gs &&& set hs \\<subseteq> set gs", "by auto"], ["proof (state)\nthis:\n  (i, h) \\<in> set gs\n  set hs \\<subseteq> set gs\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "note IH = Cons(1)[OF sub]"], ["proof (state)\nthis:\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>a.\n              case a of\n              (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n       hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (a, b) \\<Rightarrow>\n                                   berlekamp_monic_factorization a b)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "from mem"], ["proof (chain)\npicking this:\n  (i, h) \\<in> set gs", "have \"h \\<in> set (map snd gs)\""], ["proof (prove)\nusing this:\n  (i, h) \\<in> set gs\n\ngoal (1 subgoal):\n 1. h \\<in> set (map snd gs)", "by force"], ["proof (state)\nthis:\n  h \\<in> set (map snd gs)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "from square_free_factor[OF prod_list_dvd[OF this], folded g_gs, OF sf_g]"], ["proof (chain)\npicking this:\n  square_free h", "have sf: \"square_free h\""], ["proof (prove)\nusing this:\n  square_free h\n\ngoal (1 subgoal):\n 1. square_free h", "."], ["proof (state)\nthis:\n  square_free h\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "from mon_gs[OF mem] irrI[OF mem]"], ["proof (chain)\npicking this:\n  monic h \\<and> 0 < degree h\n  \\<lbrakk>?h dvd h; degree ?h = i\\<rbrakk> \\<Longrightarrow> irreducible ?h", "have *: \"degree h > 0\" \"monic h\" \n      \"\\<And> g. g dvd h \\<Longrightarrow> degree g = i \\<Longrightarrow> irreducible g\""], ["proof (prove)\nusing this:\n  monic h \\<and> 0 < degree h\n  \\<lbrakk>?h dvd h; degree ?h = i\\<rbrakk> \\<Longrightarrow> irreducible ?h\n\ngoal (1 subgoal):\n 1. 0 < degree h &&&\n    monic h &&&\n    (\\<And>g.\n        \\<lbrakk>g dvd h; degree g = i\\<rbrakk>\n        \\<Longrightarrow> irreducible g)", "by auto"], ["proof (state)\nthis:\n  0 < degree h\n  monic h\n  \\<lbrakk>?g1 dvd h; degree ?g1 = i\\<rbrakk>\n  \\<Longrightarrow> irreducible ?g1\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "from berlekamp_monic_factorization[OF sf refl *(3) *(1-2), of i]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>g.\n              \\<lbrakk>g dvd h; degree g = i\\<rbrakk>\n              \\<Longrightarrow> g dvd h;\n   \\<And>g.\n      \\<lbrakk>g dvd h; degree g = i\\<rbrakk>\n      \\<Longrightarrow> degree g = i\\<rbrakk>\n  \\<Longrightarrow> h = prod_list (berlekamp_monic_factorization i h) \\<and>\n                    (\\<forall>u\\<in>set (berlekamp_monic_factorization i h).\n                        monic u \\<and> irreducible u)", "have berl: \"prod_list (berlekamp_monic_factorization i h) = h\" \n      and irr: \"\\<And> f. f \\<in> set (berlekamp_monic_factorization i h) \\<Longrightarrow> monic f \\<and> irreducible f\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>g.\n              \\<lbrakk>g dvd h; degree g = i\\<rbrakk>\n              \\<Longrightarrow> g dvd h;\n   \\<And>g.\n      \\<lbrakk>g dvd h; degree g = i\\<rbrakk>\n      \\<Longrightarrow> degree g = i\\<rbrakk>\n  \\<Longrightarrow> h = prod_list (berlekamp_monic_factorization i h) \\<and>\n                    (\\<forall>u\\<in>set (berlekamp_monic_factorization i h).\n                        monic u \\<and> irreducible u)\n\ngoal (1 subgoal):\n 1. prod_list (berlekamp_monic_factorization i h) = h &&&\n    (\\<And>f.\n        f \\<in> set (berlekamp_monic_factorization i h) \\<Longrightarrow>\n        monic f \\<and> irreducible f)", "by auto"], ["proof (state)\nthis:\n  prod_list (berlekamp_monic_factorization i h) = h\n  ?f1 \\<in> set (berlekamp_monic_factorization i h) \\<Longrightarrow>\n  monic ?f1 \\<and> irreducible ?f1\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "have \"prod_list (map snd (Cons ih hs)) = h * prod_list (map snd hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map snd (ih # hs)) = h * prod_list (map snd hs)", "unfolding ih"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map snd ((i, h) # hs)) = h * prod_list (map snd hs)", "by simp"], ["proof (state)\nthis:\n  prod_list (map snd (ih # hs)) = h * prod_list (map snd hs)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "also"], ["proof (state)\nthis:\n  prod_list (map snd (ih # hs)) = h * prod_list (map snd hs)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "have \"prod_list (map snd hs) = prod_list (?berl hs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map snd hs) =\n    prod_list\n     (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))", "using IH"], ["proof (prove)\nusing this:\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>a.\n              case a of\n              (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n       hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (a, b) \\<Rightarrow>\n                                   berlekamp_monic_factorization a b)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n\ngoal (1 subgoal):\n 1. prod_list (map snd hs) =\n    prod_list\n     (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))", "by auto"], ["proof (state)\nthis:\n  prod_list (map snd hs) =\n  prod_list\n   (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "finally"], ["proof (chain)\npicking this:\n  prod_list (map snd (ih # hs)) =\n  h *\n  prod_list\n   (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))", "have \"prod_list (map snd (Cons ih hs)) = prod_list (?berl (Cons ih hs))\""], ["proof (prove)\nusing this:\n  prod_list (map snd (ih # hs)) =\n  h *\n  prod_list\n   (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))\n\ngoal (1 subgoal):\n 1. prod_list (map snd (ih # hs)) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (ih # hs)))", "unfolding ih"], ["proof (prove)\nusing this:\n  prod_list (map snd ((i, h) # hs)) =\n  h *\n  prod_list\n   (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))\n\ngoal (1 subgoal):\n 1. prod_list (map snd ((i, h) # hs)) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n         ((i, h) # hs)))", "using berl"], ["proof (prove)\nusing this:\n  prod_list (map snd ((i, h) # hs)) =\n  h *\n  prod_list\n   (concat (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs))\n  prod_list (berlekamp_monic_factorization i h) = h\n\ngoal (1 subgoal):\n 1. prod_list (map snd ((i, h) # hs)) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n         ((i, h) # hs)))", "by auto"], ["proof (state)\nthis:\n  prod_list (map snd (ih # hs)) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (ih # hs)))\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)\n 2. \\<And>a hs.\n       \\<lbrakk>set hs \\<subseteq> set gs \\<Longrightarrow>\n                prod_list (map snd hs) =\n                prod_list\n                 (concat\n                   (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                     hs)) \\<and>\n                (\\<forall>f\\<in>set (concat\n(map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)).\n                    monic f \\<and> irreducible\\<^sub>d f);\n        set (a # hs) \\<subseteq> set gs\\<rbrakk>\n       \\<Longrightarrow> prod_list (map snd (a # hs)) =\n                         prod_list\n                          (concat\n                            (map (\\<lambda>(x, y).\n                                     berlekamp_monic_factorization x y)\n                              (a # hs))) \\<and>\n                         (\\<forall>f\\<in>set\n    (concat\n      (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (a # hs))).\n                             monic f \\<and> irreducible\\<^sub>d f)", "thus ?case"], ["proof (prove)\nusing this:\n  prod_list (map snd (ih # hs)) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (ih # hs)))\n\ngoal (1 subgoal):\n 1. prod_list (map snd (ih # hs)) =\n    prod_list\n     (concat\n       (map (\\<lambda>a.\n                case a of\n                (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n         (ih # hs))) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow>\n                                     berlekamp_monic_factorization a b)\n                            (ih # hs))).\n        monic f \\<and> irreducible\\<^sub>d f)", "using IH irr"], ["proof (prove)\nusing this:\n  prod_list (map snd (ih # hs)) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) (ih # hs)))\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>a.\n              case a of\n              (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n       hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (a, b) \\<Rightarrow>\n                                   berlekamp_monic_factorization a b)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n  ?f1 \\<in> set (berlekamp_monic_factorization i h) \\<Longrightarrow>\n  monic ?f1 \\<and> irreducible ?f1\n\ngoal (1 subgoal):\n 1. prod_list (map snd (ih # hs)) =\n    prod_list\n     (concat\n       (map (\\<lambda>a.\n                case a of\n                (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n         (ih # hs))) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow>\n                                     berlekamp_monic_factorization a b)\n                            (ih # hs))).\n        monic f \\<and> irreducible\\<^sub>d f)", "unfolding ih"], ["proof (prove)\nusing this:\n  prod_list (map snd ((i, h) # hs)) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n       ((i, h) # hs)))\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>a.\n              case a of\n              (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n       hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (a, b) \\<Rightarrow>\n                                   berlekamp_monic_factorization a b)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n  ?f1 \\<in> set (berlekamp_monic_factorization i h) \\<Longrightarrow>\n  monic ?f1 \\<and> irreducible ?f1\n\ngoal (1 subgoal):\n 1. prod_list (map snd ((i, h) # hs)) =\n    prod_list\n     (concat\n       (map (\\<lambda>a.\n                case a of\n                (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n         ((i, h) # hs))) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>a.\n                                   case a of\n                                   (a, b) \\<Rightarrow>\n                                     berlekamp_monic_factorization a b)\n                            ((i, h) # hs))).\n        monic f \\<and> irreducible\\<^sub>d f)", "by auto"], ["proof (state)\nthis:\n  prod_list (map snd (ih # hs)) =\n  prod_list\n   (concat\n     (map (\\<lambda>a.\n              case a of\n              (a, b) \\<Rightarrow> berlekamp_monic_factorization a b)\n       (ih # hs))) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>a.\n                                 case a of\n                                 (a, b) \\<Rightarrow>\n                                   berlekamp_monic_factorization a b)\n                          (ih # hs))).\n      monic f \\<and> irreducible\\<^sub>d f)\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> set gs \\<Longrightarrow>\n    prod_list (map snd []) =\n    prod_list\n     (concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) [])) \\<and>\n    (\\<forall>f\\<in>set (concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            [])).\n        monic f \\<and> irreducible\\<^sub>d f)", "qed auto"], ["proof (state)\nthis:\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>(x, y).\n                                 berlekamp_monic_factorization x y)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "with g irr"], ["proof (chain)\npicking this:\n  g = prod_list (map snd irr) * prod_list (map snd hs)\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> monic ?fa2\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> irreducible ?fa2\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>(x, y).\n                                 berlekamp_monic_factorization x y)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)", "have main: \"g = prod_list us \\<and> (\\<forall> u \\<in> set us. monic u \\<and> irreducible\\<^sub>d u)\""], ["proof (prove)\nusing this:\n  g = prod_list (map snd irr) * prod_list (map snd hs)\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> monic ?fa2\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> irreducible ?fa2\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>(x, y).\n                                 berlekamp_monic_factorization x y)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n\ngoal (1 subgoal):\n 1. g = prod_list us \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible\\<^sub>d u)", "unfolding us"], ["proof (prove)\nusing this:\n  g = prod_list (map snd irr) * prod_list (map snd hs)\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> monic ?fa2\n  ?fa2 \\<in> snd ` set irr \\<Longrightarrow> irreducible ?fa2\n  prod_list (map snd hs) =\n  prod_list\n   (concat\n     (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)) \\<and>\n  (\\<forall>f\\<in>set (concat\n                        (map (\\<lambda>(x, y).\n                                 berlekamp_monic_factorization x y)\n                          hs)).\n      monic f \\<and> irreducible\\<^sub>d f)\n\ngoal (1 subgoal):\n 1. g =\n    prod_list\n     (map snd irr @\n      concat\n       (map (\\<lambda>(x, y). berlekamp_monic_factorization x y) hs)) \\<and>\n    (\\<forall>u\\<in>set (map snd irr @\n                         concat\n                          (map (\\<lambda>(x, y).\n                                   berlekamp_monic_factorization x y)\n                            hs)).\n        monic u \\<and> irreducible\\<^sub>d u)", "by auto"], ["proof (state)\nthis:\n  g = prod_list us \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible\\<^sub>d u)\n\ngoal (2 subgoals):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n 2. degree f \\<noteq> 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  g = prod_list us \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible\\<^sub>d u)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "unfolding f"], ["proof (prove)\nusing this:\n  g = prod_list us \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible\\<^sub>d u)\n\ngoal (1 subgoal):\n 1. Polynomial.smult c g = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "using sf_g"], ["proof (prove)\nusing this:\n  g = prod_list us \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible\\<^sub>d u)\n  square_free g\n\ngoal (1 subgoal):\n 1. Polynomial.smult c g = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "by auto"], ["proof (state)\nthis:\n  f = Polynomial.smult c (prod_list us) \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n\ngoal (1 subgoal):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "case True"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (1 subgoal):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "with us[unfolded finite_field_factorization_def]"], ["proof (chain)\npicking this:\n  (if degree f = 0 then (lead_coeff f, [])\n   else let a = lead_coeff f; u = Polynomial.smult (inverse a) f;\n            gs = if use_distinct_degree_factorization\n                 then distinct_degree_factorization u else [(1, u)];\n            (irr, hs) = List.partition (\\<lambda>(i, f). degree f = i) gs\n        in (a, map snd irr @\n               concat\n                (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                  hs))) =\n  (c, us)\n  degree f = 0", "have \"c = lead_coeff f\" and us: \"us = []\""], ["proof (prove)\nusing this:\n  (if degree f = 0 then (lead_coeff f, [])\n   else let a = lead_coeff f; u = Polynomial.smult (inverse a) f;\n            gs = if use_distinct_degree_factorization\n                 then distinct_degree_factorization u else [(1, u)];\n            (irr, hs) = List.partition (\\<lambda>(i, f). degree f = i) gs\n        in (a, map snd irr @\n               concat\n                (map (\\<lambda>(x, y). berlekamp_monic_factorization x y)\n                  hs))) =\n  (c, us)\n  degree f = 0\n\ngoal (1 subgoal):\n 1. c = lead_coeff f &&& us = []", "by auto"], ["proof (state)\nthis:\n  c = lead_coeff f\n  us = []\n\ngoal (1 subgoal):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "with degree0_coeffs[OF True]"], ["proof (chain)\npicking this:\n  \\<exists>a. f = [:a:]\n  c = lead_coeff f\n  us = []", "have f: \"f = [:c:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. f = [:a:]\n  c = lead_coeff f\n  us = []\n\ngoal (1 subgoal):\n 1. f = [:c:]", "by auto"], ["proof (state)\nthis:\n  f = [:c:]\n\ngoal (1 subgoal):\n 1. degree f = 0 \\<Longrightarrow>\n    f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (prod_list us) \\<and>\n    (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "unfolding us f"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:c:] = Polynomial.smult c (prod_list []) \\<and>\n    (\\<forall>u\\<in>set []. monic u \\<and> irreducible u)", "by (auto simp: normalize_poly_def)"], ["proof (state)\nthis:\n  f = Polynomial.smult c (prod_list us) \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_field_factorization:\n  fixes f::\"'a mod_ring poly\"\n  assumes sf_f: \"square_free f\"\n    and us: \"finite_field_factorization f = (c,us)\"\n  shows \"unique_factorization Irr_Mon f (c, mset us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unique_factorization Irr_Mon f (c, mset us)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unique_factorization Irr_Mon f (c, mset us)", "from finite_field_factorization_explicit[OF sf_f us]"], ["proof (chain)\npicking this:\n  f = Polynomial.smult c (prod_list us) \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)", "have fact: \"factorization Irr_Mon f (c, mset us)\""], ["proof (prove)\nusing this:\n  f = Polynomial.smult c (prod_list us) \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n\ngoal (1 subgoal):\n 1. factorization Irr_Mon f (c, mset us)", "unfolding factorization_def split Irr_Mon_def"], ["proof (prove)\nusing this:\n  f = Polynomial.smult c (prod_list us) \\<and>\n  (\\<forall>u\\<in>set us. monic u \\<and> irreducible u)\n\ngoal (1 subgoal):\n 1. f = Polynomial.smult c (\\<Prod>\\<^sub># (mset us)) \\<and>\n    set_mset (mset us) \\<subseteq> {x. irreducible x \\<and> monic x}", "by (auto simp: prod_mset_prod_list)"], ["proof (state)\nthis:\n  factorization Irr_Mon f (c, mset us)\n\ngoal (1 subgoal):\n 1. unique_factorization Irr_Mon f (c, mset us)", "from sf_f[unfolded square_free_def]"], ["proof (chain)\npicking this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  (\\<forall>q. 0 < degree q \\<longrightarrow> \\<not> q * q dvd f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. unique_factorization Irr_Mon f (c, mset us)", "from exactly_one_factorization[OF this] fact"], ["proof (chain)\npicking this:\n  \\<exists>!cfs. factorization Irr_Mon f cfs\n  factorization Irr_Mon f (c, mset us)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>!cfs. factorization Irr_Mon f cfs\n  factorization Irr_Mon f (c, mset us)\n\ngoal (1 subgoal):\n 1. unique_factorization Irr_Mon f (c, mset us)", "unfolding unique_factorization_def"], ["proof (prove)\nusing this:\n  \\<exists>!cfs. factorization Irr_Mon f cfs\n  factorization Irr_Mon f (c, mset us)\n\ngoal (1 subgoal):\n 1. Collect (factorization Irr_Mon f) = {(c, mset us)}", "by auto"], ["proof (state)\nthis:\n  unique_factorization Irr_Mon f (c, mset us)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Experiments revealed that preprocessing via \n  distinct-degree-factorization slows down the factorization\n  algorithm (statement for implementation in AFP 2017)\\<close>"], ["", "overloading use_distinct_degree_factorization \\<equiv> use_distinct_degree_factorization\nbegin"], ["", "definition use_distinct_degree_factorization\n    where [code_unfold]: \"use_distinct_degree_factorization = False\""], ["", "end"], ["", "end"]]}