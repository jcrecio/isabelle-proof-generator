{"file_name": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus/Unique_Factorization.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Berlekamp_Zassenhaus", "problem_names": ["lemma irreducible_uminus [simp]:\n  fixes a::\"'a::idom\"\n  shows \"irreducible (-a) \\<longleftrightarrow> irreducible a\"", "lemma coprimeI:\n    assumes \"\\<And>r. r dvd p \\<Longrightarrow> r dvd q \\<Longrightarrow> r dvd 1\"\n    shows \"coprime p q\"", "lemma coprimeE:\n    assumes \"coprime p q\"\n        and \"(\\<And>r. r dvd p \\<Longrightarrow> r dvd q \\<Longrightarrow> r dvd 1) \\<Longrightarrow> thesis\"\n    shows thesis", "lemma coprime_commute [ac_simps]:\n    \"coprime p q \\<longleftrightarrow> coprime q p\"", "lemma not_coprime_iff_common_factor:\n    \"\\<not> coprime p q \\<longleftrightarrow> (\\<exists>r. r dvd p \\<and> r dvd q \\<and> \\<not> r dvd 1)\"", "lemma (in algebraic_semidom) coprime_iff_coprime [simp, code]:\n  \"coprime = Rings.coprime\"", "lemma (in comm_semiring_1) coprime_0 [simp]:\n  \"coprime p 0 \\<longleftrightarrow> p dvd 1\" \"coprime 0 p \\<longleftrightarrow> p dvd 1\"", "lemma dvd_rewrites: \"dvd.dvd ((*)) = (dvd)\"", "lemma coprime_hom[simp]: \"coprime (hom x) y' \\<longleftrightarrow> coprime x (Hilbert_Choice.inv hom y')\"", "lemma coprime_inv_hom[simp]: \"coprime (Hilbert_Choice.inv hom x') y \\<longleftrightarrow> coprime x' (hom y)\"", "lemma dvd_dvd_imp_smult:\n  fixes p q :: \"'a :: idom poly\"\n  assumes pq: \"p dvd q\" and qp: \"q dvd p\" shows \"\\<exists>c. p = smult c q\"", "lemma dvd_const:\n  assumes pq: \"(p::'a::semidom poly) dvd q\" and q0: \"q \\<noteq> 0\" and degq: \"degree q = 0\"\n  shows \"degree p = 0\"", "lemma ddvd_sym[sym]: \"x ddvd y \\<Longrightarrow> y ddvd x\"", "lemma ddvd_trans[trans]: \"x ddvd y \\<Longrightarrow> y ddvd z \\<Longrightarrow> x ddvd z\"", "lemma ddvd_transp: \"transp (ddvd)\"", "lemma mset_factorsI[intro!]:\n  assumes \"\\<And>f. f \\<in># F \\<Longrightarrow> irreducible f\" and \"F \\<noteq> {#}\" and \"prod_mset F = p\"\n  shows \"mset_factors F p\"", "lemma mset_factorsD:\n  assumes \"mset_factors F p\"\n  shows \"f \\<in># F \\<Longrightarrow> irreducible f\" and \"F \\<noteq> {#}\" and \"prod_mset F = p\"", "lemma mset_factorsE[elim]:\n  assumes \"mset_factors F p\"\n      and \"(\\<And>f. f \\<in># F \\<Longrightarrow> irreducible f) \\<Longrightarrow> F \\<noteq> {#} \\<Longrightarrow> prod_mset F = p \\<Longrightarrow> thesis\"\n  shows thesis", "lemma mset_factors_imp_not_is_unit:\n  assumes \"mset_factors F p\"\n  shows \"\\<not> p dvd 1\"", "lemma(in semidom) mset_factors_imp_nonzero:\n  assumes \"mset_factors F p\"\n  shows \"p \\<noteq> 0\"", "lemma carrier_0[simp]: \"x \\<in> carrier mk_monoid \\<longleftrightarrow> x \\<noteq> 0\"", "lemmas mk_monoid_simps = carrier_0 monoid.simps", "lemma factors: \"factors fs y \\<longleftrightarrow> prod_list fs = y \\<and> Ball (set fs) irred\"", "lemma factor: \"factor x y \\<longleftrightarrow> (\\<exists>z. z \\<noteq> 0 \\<and> x * z = y)\"", "lemma properfactor_nz:\n    shows \"(y :: 'a) \\<noteq> 0 \\<Longrightarrow> properfactor x y \\<longleftrightarrow> x dvd y \\<and> \\<not> y dvd x\"", "lemma mem_Units[simp]: \"y \\<in> Units mk_monoid \\<longleftrightarrow> y dvd 1\"", "lemma irred_0[simp]: \"irred (0::'a)\"", "lemma factor_idom[simp]: \"factor (x::'a) y \\<longleftrightarrow> (if y = 0 then x = 0 else x dvd y)\"", "lemma associated_connect[simp]: \"(\\<sim>\\<^bsub>mk_monoid\\<^esub>) = (ddvd)\"", "lemma essentially_equal_connect[simp]:\n    \"essentially_equal mk_monoid fs gs \\<longleftrightarrow> rel_mset (ddvd) (mset fs) (mset gs)\"", "lemma irred_idom_nz:\n    assumes x0: \"(x::'a) \\<noteq> 0\"\n    shows \"irred x \\<longleftrightarrow> irreducible x\"", "lemma dvd_dvd_imp_unit_mult:\n    assumes xy: \"x dvd y\" and yx: \"y dvd x\"\n    shows \"\\<exists>z. z dvd 1 \\<and> y = x * z\"", "lemma irred_inner_nz:\n    assumes x0: \"x \\<noteq> 0\"\n    shows \"(\\<forall>b. b dvd x \\<longrightarrow> \\<not> x dvd b \\<longrightarrow> b dvd 1) \\<longleftrightarrow> (\\<forall>a b. x = a * b \\<longrightarrow> a dvd 1 \\<or> b dvd 1)\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma irred_idom[simp]: \"irred x \\<longleftrightarrow> x = 0 \\<or> irreducible x\"", "lemma assumes \"x \\<noteq> 0\" and \"factors fs x\" and \"f \\<in> set fs\" shows \"f \\<noteq> 0\"", "lemma factors_as_mset_factors:\n    assumes x0: \"x \\<noteq> 0\" and x1: \"x \\<noteq> 1\"\n    shows \"factors fs x \\<longleftrightarrow> mset_factors (mset fs) x\"", "lemma factors_exist:\n    assumes \"a \\<noteq> 0\"\n    and \"\\<not> a dvd 1\"\n    shows \"\\<exists>fs. set fs \\<subseteq> UNIV - {0} \\<and> factors fs a\"", "lemma factors_unique:\n    assumes fs: \"factors fs a\"\n       and gs: \"factors gs a\"\n       and a0: \"a \\<noteq> 0\"\n       and a1: \"\\<not> a dvd 1\"\n    shows \"rel_mset (ddvd) (mset fs) (mset gs)\"", "lemma factorial_monoid: \"factorial_monoid (mk_monoid :: 'a monoid)\"", "lemma (in idom) factorial_monoid_imp_ufd:\n  assumes \"factorial_monoid (mk_monoid :: 'a monoid)\"\n  shows \"class.ufd ((*) :: 'a \\<Rightarrow> _) 1 (+) 0 (-) uminus\"", "lemma hom_mset_factors:\n    assumes F: \"mset_factors F p\"\n    shows \"mset_factors (image_mset hom F) (hom p)\"", "lemma is_unit_hom_iff[simp]: \"hom x dvd 1 \\<longleftrightarrow> x dvd 1\"", "lemma irreducible_hom_imp_irreducible:\n    assumes irr: \"irreducible (hom a)\" shows \"irreducible a\"", "lemma irreducible_hom[simp]: \"irreducible (hom a) \\<longleftrightarrow> irreducible a\"", "lemma factor_preserving_hom_comp:\n  assumes f: \"factor_preserving_hom f\" and g: \"factor_preserving_hom g\"\n  shows \"factor_preserving_hom (f o g)\"", "lemma(in comm_semiring_1) mset_factors_mult:\n  assumes F: \"mset_factors F a\"\n      and G: \"mset_factors G b\"\n  shows \"mset_factors (F+G) (a*b)\"", "lemma(in ufd) dvd_imp_subset_factors:\n  assumes ab: \"a dvd b\"\n      and F: \"mset_factors F a\"\n      and G: \"mset_factors G b\"\n  shows \"\\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\"", "lemma(in idom) irreducible_factor_singleton:\n  assumes a: \"irreducible a\"\n  shows \"mset_factors F a \\<longleftrightarrow> F = {#a#}\"", "lemma(in ufd) irreducible_dvd_imp_factor:\n  assumes ab: \"a dvd b\"\n      and a: \"irreducible a\"\n      and G: \"mset_factors G b\"\n  shows \"\\<exists>g \\<in># G. a ddvd g\"", "lemma(in idom) prod_mset_remove_units:\n  \"prod_mset F ddvd prod_mset {# f \\<in># F. \\<not>f dvd 1 #}\"", "lemma(in comm_semiring_1) mset_factors_imp_dvd:\n  assumes \"mset_factors F x\" and \"f \\<in># F\" shows \"f dvd x\"", "lemma(in ufd) prime_elem_iff_irreducible[iff]:\n  \"prime_elem x \\<longleftrightarrow> irreducible x\"", "lemma prod_list_remove1: \"(x :: 'b :: comm_monoid_mult) \\<in> set xs \\<Longrightarrow> prod_list (remove1 x xs) * x = prod_list xs\"", "lemma gcd_0_0[simp]: \"gcd 0 0 = 0\"", "lemma gcd_zero_iff[simp]: \"gcd a b = 0 \\<longleftrightarrow> a = 0 \\<and> b = 0\"", "lemma gcd_zero_iff'[simp]: \"0 = gcd a b \\<longleftrightarrow> a = 0 \\<and> b = 0\"", "lemma dvd_gcd_0_iff[simp]:\n    shows \"x dvd gcd 0 a \\<longleftrightarrow> x dvd a\" (is ?g1)\n      and \"x dvd gcd a 0 \\<longleftrightarrow> x dvd a\" (is ?g2)", "lemma gcd_dvd_1[simp]: \"gcd a b dvd 1 \\<longleftrightarrow> coprime a b\"", "lemma dvd_imp_gcd_dvd_gcd: \"b dvd c \\<Longrightarrow> gcd a b dvd gcd a c\"", "lemma listgcd_simps[simp]: \"listgcd [] = 0\" \"listgcd (x # xs) = gcd x (listgcd xs)\"", "lemma listgcd: \"x \\<in> set xs \\<Longrightarrow> listgcd xs dvd x\"", "lemma listgcd_greatest: \"(\\<And> x. x \\<in> set xs \\<Longrightarrow> y dvd x) \\<Longrightarrow> y dvd listgcd xs\"", "lemma is_gcdI[intro!]:\n    assumes \"x dvd a\" \"x dvd b\" \"\\<And>y. y dvd a \\<Longrightarrow> y dvd b \\<Longrightarrow> y dvd x\"\n    shows \"is_gcd x a b\"", "lemma is_gcdE[elim!]:\n    assumes \"is_gcd x a b\"\n        and \"x dvd a \\<Longrightarrow> x dvd b \\<Longrightarrow> (\\<And>y. y dvd a \\<Longrightarrow> y dvd b \\<Longrightarrow> y dvd x) \\<Longrightarrow> thesis\"\n    shows thesis", "lemma is_gcd_some_gcdI:\n    assumes \"\\<exists>x. is_gcd x a b\" shows \"is_gcd (some_gcd a b) a b\"", "lemma some_gcd_0[intro!]: \"is_gcd (some_gcd a 0) a 0\" \"is_gcd (some_gcd 0 b) 0 b\"", "lemma some_gcd_0_dvd[intro!]:\n    \"some_gcd a 0 dvd a\" \"some_gcd 0 b dvd b\"", "lemma dvd_some_gcd_0[intro!]:\n    \"a dvd some_gcd a 0\" \"b dvd some_gcd 0 b\"", "lemma is_gcd_connect:\n    assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\" shows \"isgcd mk_monoid x a b \\<longleftrightarrow> is_gcd x a b\"", "lemma some_gcd_connect:\n    assumes \"a \\<noteq> 0\" and \"b \\<noteq> 0\" shows \"somegcd mk_monoid a b = some_gcd a b\"", "lemma is_gcd_gcd: \"is_gcd (gcd a b) a b\"", "lemma is_gcd_some_gcd: \"is_gcd (some_gcd a b) a b\"", "lemma gcd_dvd_some_gcd: \"gcd a b dvd some_gcd a b\"", "lemma some_gcd_dvd_gcd: \"some_gcd a b dvd gcd a b\"", "lemma some_gcd_ddvd_gcd: \"some_gcd a b ddvd gcd a b\"", "lemma some_gcd_dvd: \"some_gcd a b dvd d \\<longleftrightarrow> gcd a b dvd d\" \"d dvd some_gcd a b \\<longleftrightarrow> d dvd gcd a b\"", "lemma gcd_mult_ddvd:\n    \"d * gcd a b ddvd gcd (d * a) (d * b)\"", "lemma gcd_greatest_mult: assumes cad: \"c dvd a * d\" and cbd: \"c dvd b * d\"\n    shows \"c dvd gcd a b * d\"", "lemma listgcd_greatest_mult: \"(\\<And> x :: 'a. x \\<in> set xs \\<Longrightarrow> y dvd x * z) \\<Longrightarrow> y dvd listgcd xs * z\"", "lemma dvd_factor_mult_gcd:\n    assumes dvd: \"k dvd p * q\" \"k dvd p * r\"\n      and q0: \"q \\<noteq> 0\" and r0: \"r \\<noteq> 0\"\n    shows \"k dvd p * gcd q r\"", "lemma coprime_mult_cross_dvd:\n    assumes coprime: \"coprime p q\" and eq: \"p' * p = q' * q\"\n    shows \"p dvd q'\" (is ?g1) and \"q dvd p'\" (is ?g2)", "lemma coprime_rewrites: \"comm_monoid_mult.coprime ((*)) 1 = coprime\"", "lemma listgcd_connect: \"listgcd = gcd_list\"", "lemma some_gcd_listgcd_dvd_listgcd: \"some_gcd.listgcd xs dvd listgcd xs\"", "lemma listgcd_dvd_some_gcd_listgcd: \"listgcd xs dvd some_gcd.listgcd xs\""], "translations": [["", "lemma irreducible_uminus [simp]:\n  fixes a::\"'a::idom\"\n  shows \"irreducible (-a) \\<longleftrightarrow> irreducible a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible (- a) = irreducible a", "using irreducible_mult_unit_left[of \"-1::'a\"]"], ["proof (prove)\nusing this:\n  - (1::'a) dvd (1::'a) \\<Longrightarrow>\n  irreducible (- (1::'a) * ?p) = irreducible ?p\n\ngoal (1 subgoal):\n 1. irreducible (- a) = irreducible a", "by auto"], ["", "context comm_monoid_mult begin"], ["", "definition coprime :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n    where coprime_def': \"coprime p q \\<equiv> \\<forall>r. r dvd p \\<longrightarrow> r dvd q \\<longrightarrow> r dvd 1\""], ["", "lemma coprimeI:\n    assumes \"\\<And>r. r dvd p \\<Longrightarrow> r dvd q \\<Longrightarrow> r dvd 1\"\n    shows \"coprime p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime p q", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?r1 dvd p; ?r1 dvd q\\<rbrakk> \\<Longrightarrow> ?r1 dvd (1::'a)\n\ngoal (1 subgoal):\n 1. coprime p q", "by (auto simp: coprime_def')"], ["", "lemma coprimeE:\n    assumes \"coprime p q\"\n        and \"(\\<And>r. r dvd p \\<Longrightarrow> r dvd q \\<Longrightarrow> r dvd 1) \\<Longrightarrow> thesis\"\n    shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  coprime p q\n  (\\<And>r.\n      \\<lbrakk>r dvd p; r dvd q\\<rbrakk>\n      \\<Longrightarrow> r dvd (1::'a)) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: coprime_def')"], ["", "lemma coprime_commute [ac_simps]:\n    \"coprime p q \\<longleftrightarrow> coprime q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime p q = coprime q p", "by (auto simp add: coprime_def')"], ["", "lemma not_coprime_iff_common_factor:\n    \"\\<not> coprime p q \\<longleftrightarrow> (\\<exists>r. r dvd p \\<and> r dvd q \\<and> \\<not> r dvd 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> coprime p q) =\n    (\\<exists>r. r dvd p \\<and> r dvd q \\<and> \\<not> r dvd (1::'a))", "by (auto simp add: coprime_def')"], ["", "end"], ["", "lemma (in algebraic_semidom) coprime_iff_coprime [simp, code]:\n  \"coprime = Rings.coprime\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime = algebraic_semidom_class.coprime", "by (simp add: fun_eq_iff coprime_def coprime_def')"], ["", "lemma (in comm_semiring_1) coprime_0 [simp]:\n  \"coprime p 0 \\<longleftrightarrow> p dvd 1\" \"coprime 0 p \\<longleftrightarrow> p dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime p (0::'a) = (p dvd (1::'a)) &&&\n    coprime (0::'a) p = (p dvd (1::'a))", "by (auto intro: coprimeI elim: coprimeE dest: dvd_trans)"], ["", "(**** until here ****)\n\n\n(* TODO: move or...? *)"], ["", "lemma dvd_rewrites: \"dvd.dvd ((*)) = (dvd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dvd.dvd (*) = (dvd)", "by (unfold dvd.dvd_def dvd_def, rule)"], ["", "subsection \\<open>Interfacing UFD properties\\<close>"], ["", "hide_const (open) Divisibility.irreducible"], ["", "context comm_monoid_mult_isom begin"], ["", "lemma coprime_hom[simp]: \"coprime (hom x) y' \\<longleftrightarrow> coprime x (Hilbert_Choice.inv hom y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (hom x) y' = coprime x (inv hom y')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. coprime (hom x) y' = coprime x (inv hom y')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (hom x) y' = coprime x (inv hom y')", "by (unfold coprime_def', fold ball_UNIV, subst surj[symmetric], simp)"], ["proof (state)\nthis:\n  coprime (hom x) y' = coprime x (inv hom y')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coprime_inv_hom[simp]: \"coprime (Hilbert_Choice.inv hom x') y \\<longleftrightarrow> coprime x' (hom y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (inv hom x') y = coprime x' (hom y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. coprime (inv hom x') y = coprime x' (hom y)", "interpret inv: comm_monoid_mult_isom \"Hilbert_Choice.inv hom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_mult_isom (inv hom)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. coprime (inv hom x') y = coprime x' (hom y)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (inv hom x') y = coprime x' (hom y)", "by simp"], ["proof (state)\nthis:\n  coprime (inv hom x') y = coprime x' (hom y)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \\<open>Original part\\<close>"], ["", "lemma dvd_dvd_imp_smult:\n  fixes p q :: \"'a :: idom poly\"\n  assumes pq: \"p dvd q\" and qp: \"q dvd p\" shows \"\\<exists>c. p = smult c q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. p = smult c q", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> \\<exists>c. p = smult c q\n 2. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> \\<exists>c. p = smult c q\n 2. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "then"], ["proof (chain)\npicking this:\n  p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. \\<exists>c. p = smult c q", "by auto"], ["proof (state)\nthis:\n  \\<exists>c. p = smult c q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "from qp"], ["proof (chain)\npicking this:\n  q dvd p", "obtain r where r: \"p = q * r\""], ["proof (prove)\nusing this:\n  q dvd p\n\ngoal (1 subgoal):\n 1. (\\<And>r. p = q * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  p = q * r\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "with False qp"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  q dvd p\n  p = q * r", "have r0: \"r \\<noteq> 0\" and q0: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  q dvd p\n  p = q * r\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 &&& q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> 0\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "with divides_degree[OF pq] divides_degree[OF qp] False"], ["proof (chain)\npicking this:\n  degree p \\<le> degree q \\<or> q = 0\n  degree q \\<le> degree p \\<or> p = 0\n  p \\<noteq> 0\n  r \\<noteq> 0\n  q \\<noteq> 0", "have \"degree p = degree q\""], ["proof (prove)\nusing this:\n  degree p \\<le> degree q \\<or> q = 0\n  degree q \\<le> degree p \\<or> p = 0\n  p \\<noteq> 0\n  r \\<noteq> 0\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p = degree q", "by auto"], ["proof (state)\nthis:\n  degree p = degree q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "with r degree_mult_eq[OF q0 r0]"], ["proof (chain)\npicking this:\n  p = q * r\n  degree (q * r) = degree q + degree r\n  degree p = degree q", "have \"degree r = 0\""], ["proof (prove)\nusing this:\n  p = q * r\n  degree (q * r) = degree q + degree r\n  degree p = degree q\n\ngoal (1 subgoal):\n 1. degree r = 0", "by auto"], ["proof (state)\nthis:\n  degree r = 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "from degree_0_id[OF this]"], ["proof (chain)\npicking this:\n  [:coeff r 0:] = r", "obtain c where \"r = [:c:]\""], ["proof (prove)\nusing this:\n  [:coeff r 0:] = r\n\ngoal (1 subgoal):\n 1. (\\<And>c. r = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  r = [:c:]\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> \\<exists>c. p = smult c q", "from r[unfolded this]"], ["proof (chain)\npicking this:\n  p = q * [:c:]", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q * [:c:]\n\ngoal (1 subgoal):\n 1. \\<exists>c. p = smult c q", "by auto"], ["proof (state)\nthis:\n  \\<exists>c. p = smult c q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dvd_const:\n  assumes pq: \"(p::'a::semidom poly) dvd q\" and q0: \"q \\<noteq> 0\" and degq: \"degree q = 0\"\n  shows \"degree p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p = 0", "from dvdE[OF pq]"], ["proof (chain)\npicking this:\n  (\\<And>k. q = p * k \\<Longrightarrow> ?P) \\<Longrightarrow> ?P", "obtain r where *: \"q = p * r\""], ["proof (prove)\nusing this:\n  (\\<And>k. q = p * k \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>r. q = p * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "."], ["proof (state)\nthis:\n  q = p * r\n\ngoal (1 subgoal):\n 1. degree p = 0", "with q0"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  q = p * r", "have \"p \\<noteq> 0\" \"r \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = p * r\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 &&& r \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p = 0", "from degree_mult_eq[OF this] degq *"], ["proof (chain)\npicking this:\n  degree (p * r) = degree p + degree r\n  degree q = 0\n  q = p * r", "show \"degree p = 0\""], ["proof (prove)\nusing this:\n  degree (p * r) = degree p + degree r\n  degree q = 0\n  q = p * r\n\ngoal (1 subgoal):\n 1. degree p = 0", "by auto"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "context Rings.dvd begin"], ["", "abbreviation ddvd (infix \"ddvd\" 40) where \"x ddvd y \\<equiv> x dvd y \\<and> y dvd x\""], ["", "lemma ddvd_sym[sym]: \"x ddvd y \\<Longrightarrow> y ddvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ddvd y \\<Longrightarrow> y ddvd x", "by auto"], ["", "end"], ["", "context comm_monoid_mult begin"], ["", "lemma ddvd_trans[trans]: \"x ddvd y \\<Longrightarrow> y ddvd z \\<Longrightarrow> x ddvd z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x ddvd y; y ddvd z\\<rbrakk> \\<Longrightarrow> x ddvd z", "using dvd_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x ddvd y; y ddvd z\\<rbrakk> \\<Longrightarrow> x ddvd z", "by auto"], ["", "lemma ddvd_transp: \"transp (ddvd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (ddvd)", "by (intro transpI, fact ddvd_trans)"], ["", "end"], ["", "context comm_semiring_1 begin"], ["", "definition mset_factors where \"mset_factors F p \\<equiv>\n  F \\<noteq> {#} \\<and> (\\<forall>f. f \\<in># F \\<longrightarrow> irreducible f) \\<and> p = prod_mset F\""], ["", "lemma mset_factorsI[intro!]:\n  assumes \"\\<And>f. f \\<in># F \\<Longrightarrow> irreducible f\" and \"F \\<noteq> {#}\" and \"prod_mset F = p\"\n  shows \"mset_factors F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_factors F p", "unfolding mset_factors_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<noteq> {#} \\<and>\n    (\\<forall>f. f \\<in># F \\<longrightarrow> irreducible f) \\<and>\n    p = \\<Prod>\\<^sub># F", "using assms"], ["proof (prove)\nusing this:\n  ?f1 \\<in># F \\<Longrightarrow> irreducible ?f1\n  F \\<noteq> {#}\n  \\<Prod>\\<^sub># F = p\n\ngoal (1 subgoal):\n 1. F \\<noteq> {#} \\<and>\n    (\\<forall>f. f \\<in># F \\<longrightarrow> irreducible f) \\<and>\n    p = \\<Prod>\\<^sub># F", "by auto"], ["", "lemma mset_factorsD:\n  assumes \"mset_factors F p\"\n  shows \"f \\<in># F \\<Longrightarrow> irreducible f\" and \"F \\<noteq> {#}\" and \"prod_mset F = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in># F \\<Longrightarrow> irreducible f) &&&\n    F \\<noteq> {#} &&& \\<Prod>\\<^sub># F = p", "using assms[unfolded mset_factors_def]"], ["proof (prove)\nusing this:\n  F \\<noteq> {#} \\<and>\n  (\\<forall>f. f \\<in># F \\<longrightarrow> irreducible f) \\<and>\n  p = \\<Prod>\\<^sub># F\n\ngoal (1 subgoal):\n 1. (f \\<in># F \\<Longrightarrow> irreducible f) &&&\n    F \\<noteq> {#} &&& \\<Prod>\\<^sub># F = p", "by auto"], ["", "lemma mset_factorsE[elim]:\n  assumes \"mset_factors F p\"\n      and \"(\\<And>f. f \\<in># F \\<Longrightarrow> irreducible f) \\<Longrightarrow> F \\<noteq> {#} \\<Longrightarrow> prod_mset F = p \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms[unfolded mset_factors_def]"], ["proof (prove)\nusing this:\n  F \\<noteq> {#} \\<and>\n  (\\<forall>f. f \\<in># F \\<longrightarrow> irreducible f) \\<and>\n  p = \\<Prod>\\<^sub># F\n  \\<lbrakk>\\<And>f. f \\<in># F \\<Longrightarrow> irreducible f;\n   F \\<noteq> {#}; \\<Prod>\\<^sub># F = p\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["", "lemma mset_factors_imp_not_is_unit:\n  assumes \"mset_factors F p\"\n  shows \"\\<not> p dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p dvd (1::'a)", "proof(cases F)"], ["proof (state)\ngoal (2 subgoals):\n 1. F = {#} \\<Longrightarrow> \\<not> p dvd (1::'a)\n 2. \\<And>x N. F = add_mset x N \\<Longrightarrow> \\<not> p dvd (1::'a)", "case empty"], ["proof (state)\nthis:\n  F = {#}\n\ngoal (2 subgoals):\n 1. F = {#} \\<Longrightarrow> \\<not> p dvd (1::'a)\n 2. \\<And>x N. F = add_mset x N \\<Longrightarrow> \\<not> p dvd (1::'a)", "with assms"], ["proof (chain)\npicking this:\n  mset_factors F p\n  F = {#}", "show ?thesis"], ["proof (prove)\nusing this:\n  mset_factors F p\n  F = {#}\n\ngoal (1 subgoal):\n 1. \\<not> p dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> p dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x N. F = add_mset x N \\<Longrightarrow> \\<not> p dvd (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N. F = add_mset x N \\<Longrightarrow> \\<not> p dvd (1::'a)", "case (add f F)"], ["proof (state)\nthis:\n  F = add_mset f F\n\ngoal (1 subgoal):\n 1. \\<And>x N. F = add_mset x N \\<Longrightarrow> \\<not> p dvd (1::'a)", "with assms"], ["proof (chain)\npicking this:\n  mset_factors F p\n  F = add_mset f F", "have \"\\<not> f dvd 1\" \"p = f * prod_mset F\""], ["proof (prove)\nusing this:\n  mset_factors F p\n  F = add_mset f F\n\ngoal (1 subgoal):\n 1. \\<not> f dvd (1::'a) &&& p = f * \\<Prod>\\<^sub># F", "by (auto intro!: irreducible_not_unit)"], ["proof (state)\nthis:\n  \\<not> f dvd (1::'a)\n  p = f * \\<Prod>\\<^sub># F\n\ngoal (1 subgoal):\n 1. \\<And>x N. F = add_mset x N \\<Longrightarrow> \\<not> p dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  \\<not> f dvd (1::'a)\n  p = f * \\<Prod>\\<^sub># F", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> f dvd (1::'a)\n  p = f * \\<Prod>\\<^sub># F\n\ngoal (1 subgoal):\n 1. \\<not> p dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> p dvd (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition primitive_poly where \"primitive_poly f \\<equiv> \\<forall>d. (\\<forall>i. d dvd coeff f i) \\<longrightarrow> d dvd 1\""], ["", "end"], ["", "lemma(in semidom) mset_factors_imp_nonzero:\n  assumes \"mset_factors F p\"\n  shows \"p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> (0::'a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p = (0::'a) \\<Longrightarrow> False", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = (0::'a)\n\ngoal (1 subgoal):\n 1. p = (0::'a) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  p = (0::'a)\n\ngoal (1 subgoal):\n 1. p = (0::'a) \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  mset_factors F p", "have \"prod_mset F = p\""], ["proof (prove)\nusing this:\n  mset_factors F p\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># F = p", "by auto"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># F = p\n\ngoal (1 subgoal):\n 1. p = (0::'a) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  p = (0::'a)\n  \\<Prod>\\<^sub># F = p", "obtain f where \"f \\<in># F\" \"f = 0\""], ["proof (prove)\nusing this:\n  p = (0::'a)\n  \\<Prod>\\<^sub># F = p\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in># F; f = (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in># F\n  f = (0::'a)\n\ngoal (1 subgoal):\n 1. p = (0::'a) \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  mset_factors F p\n  f \\<in># F\n  f = (0::'a)", "show False"], ["proof (prove)\nusing this:\n  mset_factors F p\n  f \\<in># F\n  f = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "class ufd = idom +\n  assumes mset_factors_exist: \"\\<And>x. x \\<noteq> 0 \\<Longrightarrow> \\<not> x dvd 1 \\<Longrightarrow> \\<exists>F. mset_factors F x\"\n    and mset_factors_unique: \"\\<And>x F G. mset_factors F x \\<Longrightarrow> mset_factors G x \\<Longrightarrow> rel_mset (ddvd) F G\""], ["", "subsubsection \\<open>Connecting to HOL/Divisibility\\<close>"], ["", "context comm_semiring_1 begin"], ["", "abbreviation \"mk_monoid \\<equiv> \\<lparr>carrier = UNIV - {0}, mult = (*), one = 1\\<rparr>\""], ["", "lemma carrier_0[simp]: \"x \\<in> carrier mk_monoid \\<longleftrightarrow> x \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> carrier mk_monoid) = (x \\<noteq> (0::'a))", "by auto"], ["", "lemmas mk_monoid_simps = carrier_0 monoid.simps"], ["", "abbreviation irred where \"irred \\<equiv> Divisibility.irreducible mk_monoid\""], ["", "abbreviation factor where \"factor \\<equiv> Divisibility.factor mk_monoid\""], ["", "abbreviation factors where \"factors \\<equiv> Divisibility.factors mk_monoid\""], ["", "abbreviation properfactor where \"properfactor \\<equiv> Divisibility.properfactor mk_monoid\""], ["", "lemma factors: \"factors fs y \\<longleftrightarrow> prod_list fs = y \\<and> Ball (set fs) irred\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs y =\n    (prod_list fs = y \\<and> Ball (set fs) irred)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs y =\n    (prod_list fs = y \\<and> Ball (set fs) irred)", "have \"prod_list fs = foldr (*) fs 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list fs = foldr (*) fs (1::'a)", "by (induct fs, auto)"], ["proof (state)\nthis:\n  prod_list fs = foldr (*) fs (1::'a)\n\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs y =\n    (prod_list fs = y \\<and> Ball (set fs) irred)", "thus ?thesis"], ["proof (prove)\nusing this:\n  prod_list fs = foldr (*) fs (1::'a)\n\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs y =\n    (prod_list fs = y \\<and> Ball (set fs) irred)", "unfolding factors_def"], ["proof (prove)\nusing this:\n  prod_list fs = foldr (*) fs (1::'a)\n\ngoal (1 subgoal):\n 1. (Ball (set fs) irred \\<and>\n     foldr (\\<otimes>\\<^bsub>mk_monoid\\<^esub>) fs\n      \\<one>\\<^bsub>mk_monoid\\<^esub> =\n     y) =\n    (prod_list fs = y \\<and> Ball (set fs) irred)", "by auto"], ["proof (state)\nthis:\n  comm_semiring_1_class.factors fs y =\n  (prod_list fs = y \\<and> Ball (set fs) irred)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factor: \"factor x y \\<longleftrightarrow> (\\<exists>z. z \\<noteq> 0 \\<and> x * z = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factor x y =\n    (\\<exists>z. z \\<noteq> (0::'a) \\<and> x * z = y)", "unfolding factor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>c\\<in>carrier mk_monoid.\n        y = x \\<otimes>\\<^bsub>mk_monoid\\<^esub> c) =\n    (\\<exists>z. z \\<noteq> (0::'a) \\<and> x * z = y)", "by auto"], ["", "lemma properfactor_nz:\n    shows \"(y :: 'a) \\<noteq> 0 \\<Longrightarrow> properfactor x y \\<longleftrightarrow> x dvd y \\<and> \\<not> y dvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> (0::'a) \\<Longrightarrow>\n    comm_semiring_1_class.properfactor x y = (x dvd y \\<and> \\<not> y dvd x)", "by (auto simp: properfactor_def factor_def dvd_def)"], ["", "lemma mem_Units[simp]: \"y \\<in> Units mk_monoid \\<longleftrightarrow> y dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> Units mk_monoid) = (y dvd (1::'a))", "unfolding dvd_def Units_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> {y \\<in> carrier mk_monoid.\n              \\<exists>x\\<in>carrier mk_monoid.\n                 x \\<otimes>\\<^bsub>mk_monoid\\<^esub> y =\n                 \\<one>\\<^bsub>mk_monoid\\<^esub> \\<and>\n                 y \\<otimes>\\<^bsub>mk_monoid\\<^esub> x =\n                 \\<one>\\<^bsub>mk_monoid\\<^esub>}) =\n    (\\<exists>k. (1::'a) = y * k)", "by (auto simp: ac_simps)"], ["", "end"], ["", "context idom begin"], ["", "lemma irred_0[simp]: \"irred (0::'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irred (0::'a)", "by (unfold Divisibility.irreducible_def, auto simp: factor properfactor_def)"], ["", "lemma factor_idom[simp]: \"factor (x::'a) y \\<longleftrightarrow> (if y = 0 then x = 0 else x dvd y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factor x y =\n    (if y = (0::'a) then x = (0::'a) else x dvd y)", "by (cases \"y = 0\"; auto intro: exI[of _ 1] elim: dvdE simp: factor)"], ["", "lemma associated_connect[simp]: \"(\\<sim>\\<^bsub>mk_monoid\\<^esub>) = (ddvd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sim>\\<^bsub>mk_monoid\\<^esub>) = (ddvd)", "by (intro ext, unfold associated_def, auto)"], ["", "lemma essentially_equal_connect[simp]:\n    \"essentially_equal mk_monoid fs gs \\<longleftrightarrow> rel_mset (ddvd) (mset fs) (mset gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. essentially_equal mk_monoid fs gs = rel_mset (ddvd) (mset fs) (mset gs)", "by (auto simp: essentially_equal_def rel_mset_via_perm)"], ["", "lemma irred_idom_nz:\n    assumes x0: \"(x::'a) \\<noteq> 0\"\n    shows \"irred x \\<longleftrightarrow> irreducible x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irred x = irreducible x", "using x0"], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. irred x = irreducible x", "by (auto simp: irreducible_altdef Divisibility.irreducible_def properfactor_nz)"], ["", "lemma dvd_dvd_imp_unit_mult:\n    assumes xy: \"x dvd y\" and yx: \"y dvd x\"\n    shows \"\\<exists>z. z dvd 1 \\<and> y = x * z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "proof(cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> \\<exists>z. z dvd (1::'a) \\<and> y = x * z\n 2. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "case True"], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (2 subgoals):\n 1. x = (0::'a) \\<Longrightarrow> \\<exists>z. z dvd (1::'a) \\<and> y = x * z\n 2. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "with xy"], ["proof (chain)\npicking this:\n  x dvd y\n  x = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  x dvd y\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "by (auto intro: exI[of _ 1])"], ["proof (state)\nthis:\n  \\<exists>z. z dvd (1::'a) \\<and> y = x * z\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "case x0: False"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "from xy"], ["proof (chain)\npicking this:\n  x dvd y", "obtain z where z: \"y = x * z\""], ["proof (prove)\nusing this:\n  x dvd y\n\ngoal (1 subgoal):\n 1. (\\<And>z. y = x * z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  y = x * z\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "from yx"], ["proof (chain)\npicking this:\n  y dvd x", "obtain w where w: \"x = y * w\""], ["proof (prove)\nusing this:\n  y dvd x\n\ngoal (1 subgoal):\n 1. (\\<And>w. x = y * w \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  x = y * w\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "from z w"], ["proof (chain)\npicking this:\n  y = x * z\n  x = y * w", "have \"x * (z * w) = x\""], ["proof (prove)\nusing this:\n  y = x * z\n  x = y * w\n\ngoal (1 subgoal):\n 1. x * (z * w) = x", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  x * (z * w) = x\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "then"], ["proof (chain)\npicking this:\n  x * (z * w) = x", "have \"z * w = 1\""], ["proof (prove)\nusing this:\n  x * (z * w) = x\n\ngoal (1 subgoal):\n 1. z * w = (1::'a)", "using x0"], ["proof (prove)\nusing this:\n  x * (z * w) = x\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z * w = (1::'a)", "by auto"], ["proof (state)\nthis:\n  z * w = (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) \\<Longrightarrow>\n    \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "with z"], ["proof (chain)\npicking this:\n  y = x * z\n  z * w = (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  y = x * z\n  z * w = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>z. z dvd (1::'a) \\<and> y = x * z", "by (auto intro: exI[of _ z])"], ["proof (state)\nthis:\n  \\<exists>z. z dvd (1::'a) \\<and> y = x * z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irred_inner_nz:\n    assumes x0: \"x \\<noteq> 0\"\n    shows \"(\\<forall>b. b dvd x \\<longrightarrow> \\<not> x dvd b \\<longrightarrow> b dvd 1) \\<longleftrightarrow> (\\<forall>a b. x = a * b \\<longrightarrow> a dvd 1 \\<or> b dvd 1)\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>b.\n        b dvd x \\<longrightarrow>\n        \\<not> x dvd b \\<longrightarrow> b dvd (1::'a)) =\n    (\\<forall>a b.\n        x = a * b \\<longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a))", "proof (intro iffI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "assume l: ?l"], ["proof (state)\nthis:\n  \\<forall>b.\n     b dvd x \\<longrightarrow>\n     \\<not> x dvd b \\<longrightarrow> b dvd (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "assume xab: \"x = a * b\""], ["proof (state)\nthis:\n  x = a * b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  x = a * b", "have ax: \"a dvd x\" and bx: \"b dvd x\""], ["proof (prove)\nusing this:\n  x = a * b\n\ngoal (1 subgoal):\n 1. a dvd x &&& b dvd x", "by auto"], ["proof (state)\nthis:\n  a dvd x\n  b dvd x\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "{"], ["proof (state)\nthis:\n  a dvd x\n  b dvd x\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "assume a1: \"\\<not> a dvd 1\""], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "with l ax"], ["proof (chain)\npicking this:\n  \\<forall>b.\n     b dvd x \\<longrightarrow>\n     \\<not> x dvd b \\<longrightarrow> b dvd (1::'a)\n  a dvd x\n  \\<not> a dvd (1::'a)", "have xa: \"x dvd a\""], ["proof (prove)\nusing this:\n  \\<forall>b.\n     b dvd x \\<longrightarrow>\n     \\<not> x dvd b \\<longrightarrow> b dvd (1::'a)\n  a dvd x\n  \\<not> a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. x dvd a", "by auto"], ["proof (state)\nthis:\n  x dvd a\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "from dvd_dvd_imp_unit_mult[OF ax xa]"], ["proof (chain)\npicking this:\n  \\<exists>z. z dvd (1::'a) \\<and> x = a * z", "obtain z where z1: \"z dvd 1\" and xaz: \"x = a * z\""], ["proof (prove)\nusing this:\n  \\<exists>z. z dvd (1::'a) \\<and> x = a * z\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z dvd (1::'a); x = a * z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z dvd (1::'a)\n  x = a * z\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "from xab x0"], ["proof (chain)\npicking this:\n  x = a * b\n  x \\<noteq> (0::'a)", "have \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x = a * b\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "with xab xaz"], ["proof (chain)\npicking this:\n  x = a * b\n  x = a * z\n  a \\<noteq> (0::'a)", "have \"b = z\""], ["proof (prove)\nusing this:\n  x = a * b\n  x = a * z\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. b = z", "by auto"], ["proof (state)\nthis:\n  b = z\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "with z1"], ["proof (chain)\npicking this:\n  z dvd (1::'a)\n  b = z", "have \"b dvd 1\""], ["proof (prove)\nusing this:\n  z dvd (1::'a)\n  b = z\n\ngoal (1 subgoal):\n 1. b dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "}"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b.\n                   b dvd x \\<longrightarrow>\n                   \\<not> x dvd b \\<longrightarrow> b dvd (1::'a);\n        x = a * b\\<rbrakk>\n       \\<Longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  \\<not> a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "show \"a dvd 1 \\<or> b dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  a dvd (1::'a) \\<or> b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "assume r: ?r"], ["proof (state)\nthis:\n  \\<forall>a b.\n     x = a * b \\<longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "assume bx: \"b dvd x\" and xb: \"\\<not> x dvd b\""], ["proof (state)\nthis:\n  b dvd x\n  \\<not> x dvd b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  b dvd x\n  \\<not> x dvd b", "obtain a where xab: \"x = a * b\""], ["proof (prove)\nusing this:\n  b dvd x\n  \\<not> x dvd b\n\ngoal (1 subgoal):\n 1. (\\<And>a. x = a * b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto simp: ac_simps)"], ["proof (state)\nthis:\n  x = a * b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "with r"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     x = a * b \\<longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n  x = a * b", "consider \"a dvd 1\" | \"b dvd 1\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     x = a * b \\<longrightarrow> a dvd (1::'a) \\<or> b dvd (1::'a)\n  x = a * b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> thesis;\n     b dvd (1::'a) \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> ?thesis1;\n   b dvd (1::'a) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b.\n                   x = a * b \\<longrightarrow>\n                   a dvd (1::'a) \\<or> b dvd (1::'a);\n        b dvd x; \\<not> x dvd b\\<rbrakk>\n       \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> ?thesis1;\n   b dvd (1::'a) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1", "show \"b dvd 1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> ?thesis1;\n   b dvd (1::'a) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. b dvd (1::'a)", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)\n 2. b dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "case 2"], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)\n 2. b dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  b dvd (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. b dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "case 1"], ["proof (state)\nthis:\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  a dvd (1::'a)", "obtain c where ac1: \"a * c = 1\""], ["proof (prove)\nusing this:\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>c. a * c = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  a * c = (1::'a)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "from xab"], ["proof (chain)\npicking this:\n  x = a * b", "have \"x * c = b * (a * c)\""], ["proof (prove)\nusing this:\n  x = a * b\n\ngoal (1 subgoal):\n 1. x * c = b * (a * c)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  x * c = b * (a * c)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "with ac1"], ["proof (chain)\npicking this:\n  a * c = (1::'a)\n  x * c = b * (a * c)", "have \"x * c = b\""], ["proof (prove)\nusing this:\n  a * c = (1::'a)\n  x * c = b * (a * c)\n\ngoal (1 subgoal):\n 1. x * c = b", "by auto"], ["proof (state)\nthis:\n  x * c = b\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  x * c = b", "have \"x dvd b\""], ["proof (prove)\nusing this:\n  x * c = b\n\ngoal (1 subgoal):\n 1. x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd b\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<Longrightarrow> b dvd (1::'a)", "with xb"], ["proof (chain)\npicking this:\n  \\<not> x dvd b\n  x dvd b", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x dvd b\n  x dvd b\n\ngoal (1 subgoal):\n 1. b dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irred_idom[simp]: \"irred x \\<longleftrightarrow> x = 0 \\<or> irreducible x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irred x = (x = (0::'a) \\<or> irreducible x)", "by (cases \"x = 0\"; simp add: irred_idom_nz irred_inner_nz irreducible_def)"], ["", "lemma assumes \"x \\<noteq> 0\" and \"factors fs x\" and \"f \\<in> set fs\" shows \"f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n  comm_semiring_1_class.factors fs x\n  f \\<in> set fs\n\ngoal (1 subgoal):\n 1. f \\<noteq> (0::'a)", "by (auto simp: factors)"], ["", "lemma factors_as_mset_factors:\n    assumes x0: \"x \\<noteq> 0\" and x1: \"x \\<noteq> 1\"\n    shows \"factors fs x \\<longleftrightarrow> mset_factors (mset fs) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs x = mset_factors (mset fs) x", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n  x \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs x = mset_factors (mset fs) x", "by (auto simp: factors prod_mset_prod_list)"], ["", "end"], ["", "context ufd begin"], ["", "interpretation comm_monoid_cancel: comm_monoid_cancel \"mk_monoid::'a monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_cancel mk_monoid", "apply (unfold_locales)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier mk_monoid;\n        y \\<in> carrier mk_monoid\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>mk_monoid\\<^esub> y\n                         \\<in> carrier mk_monoid\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier mk_monoid; y \\<in> carrier mk_monoid;\n        z \\<in> carrier mk_monoid\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n                         y \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n                         (y \\<otimes>\\<^bsub>mk_monoid\\<^esub> z)\n 3. \\<one>\\<^bsub>mk_monoid\\<^esub> \\<in> carrier mk_monoid\n 4. \\<And>x.\n       x \\<in> carrier mk_monoid \\<Longrightarrow>\n       \\<one>\\<^bsub>mk_monoid\\<^esub> \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier mk_monoid \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n       \\<one>\\<^bsub>mk_monoid\\<^esub> =\n       x\n 6. \\<And>c a b.\n       \\<lbrakk>c \\<otimes>\\<^bsub>mk_monoid\\<^esub> a =\n                c \\<otimes>\\<^bsub>mk_monoid\\<^esub> b;\n        a \\<in> carrier mk_monoid; b \\<in> carrier mk_monoid;\n        c \\<in> carrier mk_monoid\\<rbrakk>\n       \\<Longrightarrow> a = b\n 7. \\<And>a c b.\n       \\<lbrakk>a \\<otimes>\\<^bsub>mk_monoid\\<^esub> c =\n                b \\<otimes>\\<^bsub>mk_monoid\\<^esub> c;\n        a \\<in> carrier mk_monoid; b \\<in> carrier mk_monoid;\n        c \\<in> carrier mk_monoid\\<rbrakk>\n       \\<Longrightarrow> a = b\n 8. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier mk_monoid;\n        y \\<in> carrier mk_monoid\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>mk_monoid\\<^esub> y =\n                         y \\<otimes>\\<^bsub>mk_monoid\\<^esub> x", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> (0::'a); y \\<noteq> (0::'a);\n        z \\<noteq> (0::'a)\\<rbrakk>\n       \\<Longrightarrow> x * y * z = x * (y * z)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> (0::'a); y \\<noteq> (0::'a)\\<rbrakk>\n       \\<Longrightarrow> x * y = y * x", "using mult_left_cancel"], ["proof (prove)\nusing this:\n  ?c \\<noteq> (0::'a) \\<Longrightarrow> (?c * ?a = ?c * ?b) = (?a = ?b)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> (0::'a); y \\<noteq> (0::'a);\n        z \\<noteq> (0::'a)\\<rbrakk>\n       \\<Longrightarrow> x * y * z = x * (y * z)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> (0::'a); y \\<noteq> (0::'a)\\<rbrakk>\n       \\<Longrightarrow> x * y = y * x", "apply (auto simp: ac_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma factors_exist:\n    assumes \"a \\<noteq> 0\"\n    and \"\\<not> a dvd 1\"\n    shows \"\\<exists>fs. set fs \\<subseteq> UNIV - {0} \\<and> factors fs a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "from mset_factors_exist[OF assms]"], ["proof (chain)\npicking this:\n  \\<exists>F. mset_factors F a", "obtain F where \"mset_factors F a\""], ["proof (prove)\nusing this:\n  \\<exists>F. mset_factors F a\n\ngoal (1 subgoal):\n 1. (\\<And>F. mset_factors F a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset_factors F a\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "also"], ["proof (state)\nthis:\n  mset_factors F a\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "from ex_mset"], ["proof (chain)\npicking this:\n  \\<exists>xs. mset xs = ?X", "obtain fs where \"F = mset fs\""], ["proof (prove)\nusing this:\n  \\<exists>xs. mset xs = ?X\n\ngoal (1 subgoal):\n 1. (\\<And>fs. F = mset fs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  F = mset fs\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "finally"], ["proof (chain)\npicking this:\n  mset_factors (mset fs) a", "have fs: \"mset_factors (mset fs) a\""], ["proof (prove)\nusing this:\n  mset_factors (mset fs) a\n\ngoal (1 subgoal):\n 1. mset_factors (mset fs) a", "."], ["proof (state)\nthis:\n  mset_factors (mset fs) a\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "then"], ["proof (chain)\npicking this:\n  mset_factors (mset fs) a", "have \"factors fs a\""], ["proof (prove)\nusing this:\n  mset_factors (mset fs) a\n\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs a", "using assms"], ["proof (prove)\nusing this:\n  mset_factors (mset fs) a\n  a \\<noteq> (0::'a)\n  \\<not> a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. comm_semiring_1_class.factors fs a", "by (subst factors_as_mset_factors, auto)"], ["proof (state)\nthis:\n  comm_semiring_1_class.factors fs a\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "moreover"], ["proof (state)\nthis:\n  comm_semiring_1_class.factors fs a\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "have \"set fs \\<subseteq> UNIV - {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> UNIV - {0::'a}", "using fs"], ["proof (prove)\nusing this:\n  mset_factors (mset fs) a\n\ngoal (1 subgoal):\n 1. set fs \\<subseteq> UNIV - {0::'a}", "by (auto elim!: mset_factorsE)"], ["proof (state)\nthis:\n  set fs \\<subseteq> UNIV - {0::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "ultimately"], ["proof (chain)\npicking this:\n  comm_semiring_1_class.factors fs a\n  set fs \\<subseteq> UNIV - {0::'a}", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_semiring_1_class.factors fs a\n  set fs \\<subseteq> UNIV - {0::'a}\n\ngoal (1 subgoal):\n 1. \\<exists>fs.\n       set fs \\<subseteq> UNIV - {0::'a} \\<and>\n       comm_semiring_1_class.factors fs a", "by auto"], ["proof (state)\nthis:\n  \\<exists>fs.\n     set fs \\<subseteq> UNIV - {0::'a} \\<and>\n     comm_semiring_1_class.factors fs a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factors_unique:\n    assumes fs: \"factors fs a\"\n       and gs: \"factors gs a\"\n       and a0: \"a \\<noteq> 0\"\n       and a1: \"\\<not> a dvd 1\"\n    shows \"rel_mset (ddvd) (mset fs) (mset gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (mset fs) (mset gs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (mset fs) (mset gs)", "from a1"], ["proof (chain)\npicking this:\n  \\<not> a dvd (1::'a)", "have \"a \\<noteq> 1\""], ["proof (prove)\nusing this:\n  \\<not> a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (1::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (mset fs) (mset gs)", "with a0 fs gs"], ["proof (chain)\npicking this:\n  a \\<noteq> (0::'a)\n  comm_semiring_1_class.factors fs a\n  comm_semiring_1_class.factors gs a\n  a \\<noteq> (1::'a)", "have \"mset_factors (mset fs) a\" \"mset_factors (mset gs) a\""], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  comm_semiring_1_class.factors fs a\n  comm_semiring_1_class.factors gs a\n  a \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. mset_factors (mset fs) a &&& mset_factors (mset gs) a", "by (unfold factors_as_mset_factors)"], ["proof (state)\nthis:\n  mset_factors (mset fs) a\n  mset_factors (mset gs) a\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (mset fs) (mset gs)", "from mset_factors_unique[OF this]"], ["proof (chain)\npicking this:\n  rel_mset (ddvd) (mset fs) (mset gs)", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_mset (ddvd) (mset fs) (mset gs)\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (mset fs) (mset gs)", "."], ["proof (state)\nthis:\n  rel_mset (ddvd) (mset fs) (mset gs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma factorial_monoid: \"factorial_monoid (mk_monoid :: 'a monoid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorial_monoid mk_monoid", "by (unfold_locales; auto simp add: factors_exist factors_unique)"], ["", "end"], ["", "lemma (in idom) factorial_monoid_imp_ufd:\n  assumes \"factorial_monoid (mk_monoid :: 'a monoid)\"\n  shows \"class.ufd ((*) :: 'a \\<Rightarrow> _) 1 (+) 0 (-) uminus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.ufd (*) (1::'a) (+) (0::'a) (-) uminus", "proof (unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> x dvd (1::'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "interpret factorial_monoid \"mk_monoid :: 'a monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorial_monoid mk_monoid", "by (fact assms)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> x dvd (1::'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> x dvd (1::'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> x dvd (1::'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "assume x: \"x \\<noteq> 0\" \"\\<not> x dvd 1\""], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n  \\<not> x dvd (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> x dvd (1::'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "note * = factors_exist[simplified, OF this]"], ["proof (state)\nthis:\n  \\<exists>fs.\n     set fs \\<subseteq> UNIV - {0::'a} \\<and>\n     comm_semiring_1_class.factors fs x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> x dvd (1::'a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "with x"], ["proof (chain)\npicking this:\n  x \\<noteq> (0::'a)\n  \\<not> x dvd (1::'a)\n  \\<exists>fs.\n     set fs \\<subseteq> UNIV - {0::'a} \\<and>\n     comm_semiring_1_class.factors fs x", "show \"\\<exists>F. mset_factors F x\""], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n  \\<not> x dvd (1::'a)\n  \\<exists>fs.\n     set fs \\<subseteq> UNIV - {0::'a} \\<and>\n     comm_semiring_1_class.factors fs x\n\ngoal (1 subgoal):\n 1. \\<exists>F. mset_factors F x", "by (subst(asm) factors_as_mset_factors, auto)"], ["proof (state)\nthis:\n  \\<exists>F. mset_factors F x\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x3 \\<noteq> (0::'a); \\<not> ?x3 dvd (1::'a)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>F. mset_factors F ?x3\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "fix x F G"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "assume FG: \"mset_factors F x\" \"mset_factors G x\""], ["proof (state)\nthis:\n  mset_factors F x\n  mset_factors G x\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "with mset_factors_imp_not_is_unit"], ["proof (chain)\npicking this:\n  mset_factors ?F ?p \\<Longrightarrow> \\<not> ?p dvd (1::'a)\n  mset_factors F x\n  mset_factors G x", "have x1: \"\\<not> x dvd 1\""], ["proof (prove)\nusing this:\n  mset_factors ?F ?p \\<Longrightarrow> \\<not> ?p dvd (1::'a)\n  mset_factors F x\n  mset_factors G x\n\ngoal (1 subgoal):\n 1. \\<not> x dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> x dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "from FG(1)"], ["proof (chain)\npicking this:\n  mset_factors F x", "have x0: \"x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  mset_factors F x\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a)", "by (rule mset_factors_imp_nonzero)"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "obtain fs gs where fsgs: \"F = mset fs\" \"G = mset gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fs gs.\n        \\<lbrakk>F = mset fs; G = mset gs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_mset"], ["proof (prove)\nusing this:\n  \\<exists>xs. mset xs = ?X\n\ngoal (1 subgoal):\n 1. (\\<And>fs gs.\n        \\<lbrakk>F = mset fs; G = mset gs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  F = mset fs\n  G = mset gs\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "note FG = FG[unfolded this]"], ["proof (state)\nthis:\n  mset_factors (mset fs) x\n  mset_factors (mset gs) x\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "then"], ["proof (chain)\npicking this:\n  mset_factors (mset fs) x\n  mset_factors (mset gs) x", "have 0: \"0 \\<notin> set fs\" \"0 \\<notin> set gs\""], ["proof (prove)\nusing this:\n  mset_factors (mset fs) x\n  mset_factors (mset gs) x\n\ngoal (1 subgoal):\n 1. (0::'a) \\<notin> set fs &&& (0::'a) \\<notin> set gs", "by (auto elim!: mset_factorsE)"], ["proof (state)\nthis:\n  (0::'a) \\<notin> set fs\n  (0::'a) \\<notin> set gs\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "from x1"], ["proof (chain)\npicking this:\n  \\<not> x dvd (1::'a)", "have \"x \\<noteq> 1\""], ["proof (prove)\nusing this:\n  \\<not> x dvd (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> (1::'a)", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "note FG[folded factors_as_mset_factors[OF x0 this]]"], ["proof (state)\nthis:\n  comm_semiring_1_class.factors fs x\n  comm_semiring_1_class.factors gs x\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "from factors_unique[OF this, simplified, OF x0 x1, folded fsgs] 0"], ["proof (chain)\npicking this:\n  \\<lbrakk>set fs \\<subseteq> UNIV - {0::'a};\n   set gs \\<subseteq> UNIV - {0::'a}\\<rbrakk>\n  \\<Longrightarrow> rel_mset (ddvd) F G\n  (0::'a) \\<notin> set fs\n  (0::'a) \\<notin> set gs", "show \"rel_mset (ddvd) F G\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set fs \\<subseteq> UNIV - {0::'a};\n   set gs \\<subseteq> UNIV - {0::'a}\\<rbrakk>\n  \\<Longrightarrow> rel_mset (ddvd) F G\n  (0::'a) \\<notin> set fs\n  (0::'a) \\<notin> set gs\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) F G", "by auto"], ["proof (state)\nthis:\n  rel_mset (ddvd) F G\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Preservation of Irreducibility\\<close>"], ["", "locale comm_semiring_1_hom = comm_monoid_mult_hom hom + zero_hom hom\n  for hom :: \"'a :: comm_semiring_1 \\<Rightarrow> 'b :: comm_semiring_1\""], ["", "locale irreducibility_hom = comm_semiring_1_hom +\n  assumes irreducible_imp_irreducible_hom: \"irreducible a \\<Longrightarrow> irreducible (hom a)\"\nbegin"], ["", "lemma hom_mset_factors:\n    assumes F: \"mset_factors F p\"\n    shows \"mset_factors (image_mset hom F) (hom p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_factors (image_mset hom F) (hom p)", "proof (unfold mset_factors_def, intro conjI allI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. image_mset hom F \\<noteq> {#}\n 2. \\<And>f. f \\<in># image_mset hom F \\<Longrightarrow> irreducible f\n 3. hom p = \\<Prod>\\<^sub># (image_mset hom F)", "from F"], ["proof (chain)\npicking this:\n  mset_factors F p", "show \"hom p = prod_mset (image_mset hom F)\" \"image_mset hom F \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  mset_factors F p\n\ngoal (1 subgoal):\n 1. hom p = \\<Prod>\\<^sub># (image_mset hom F) &&&\n    image_mset hom F \\<noteq> {#}", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  hom p = \\<Prod>\\<^sub># (image_mset hom F)\n  image_mset hom F \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># image_mset hom F \\<Longrightarrow> irreducible f", "fix f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># image_mset hom F \\<Longrightarrow> irreducible f", "assume \"f' \\<in># image_mset hom F\""], ["proof (state)\nthis:\n  f' \\<in># image_mset hom F\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># image_mset hom F \\<Longrightarrow> irreducible f", "then"], ["proof (chain)\npicking this:\n  f' \\<in># image_mset hom F", "obtain f where f: \"f \\<in># F\" and f'f: \"f' = hom f\""], ["proof (prove)\nusing this:\n  f' \\<in># image_mset hom F\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in># F; f' = hom f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in># F\n  f' = hom f\n\ngoal (1 subgoal):\n 1. \\<And>f. f \\<in># image_mset hom F \\<Longrightarrow> irreducible f", "with F irreducible_imp_irreducible_hom"], ["proof (chain)\npicking this:\n  mset_factors F p\n  irreducible ?a \\<Longrightarrow> irreducible (hom ?a)\n  f \\<in># F\n  f' = hom f", "show \"irreducible f'\""], ["proof (prove)\nusing this:\n  mset_factors F p\n  irreducible ?a \\<Longrightarrow> irreducible (hom ?a)\n  f \\<in># F\n  f' = hom f\n\ngoal (1 subgoal):\n 1. irreducible f'", "unfolding f'f"], ["proof (prove)\nusing this:\n  mset_factors F p\n  irreducible ?a \\<Longrightarrow> irreducible (hom ?a)\n  f \\<in># F\n  hom f = hom f\n\ngoal (1 subgoal):\n 1. irreducible (hom f)", "by auto"], ["proof (state)\nthis:\n  irreducible f'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale unit_preserving_hom = comm_semiring_1_hom +\n  assumes is_unit_hom_if: \"\\<And>x. hom x dvd 1 \\<Longrightarrow> x dvd 1\"\nbegin"], ["", "lemma is_unit_hom_iff[simp]: \"hom x dvd 1 \\<longleftrightarrow> x dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (hom x dvd (1::'b)) = (x dvd (1::'a))", "using is_unit_hom_if hom_dvd"], ["proof (prove)\nusing this:\n  hom ?x dvd (1::'b) \\<Longrightarrow> ?x dvd (1::'a)\n  ?p dvd ?q \\<Longrightarrow> hom ?p dvd hom ?q\n\ngoal (1 subgoal):\n 1. (hom x dvd (1::'b)) = (x dvd (1::'a))", "by force"], ["", "lemma irreducible_hom_imp_irreducible:\n    assumes irr: \"irreducible (hom a)\" shows \"irreducible a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible a", "proof (intro irreducibleI)"], ["proof (state)\ngoal (3 subgoals):\n 1. a \\<noteq> (0::'a)\n 2. \\<not> a dvd (1::'a)\n 3. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "from irr"], ["proof (chain)\npicking this:\n  irreducible (hom a)", "show \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  irreducible (hom a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<not> a dvd (1::'a)\n 2. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "from irr"], ["proof (chain)\npicking this:\n  irreducible (hom a)", "show \"\\<not> a dvd 1\""], ["proof (prove)\nusing this:\n  irreducible (hom a)\n\ngoal (1 subgoal):\n 1. \\<not> a dvd (1::'a)", "by (auto dest: irreducible_not_unit)"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "fix b c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "assume \"a = b * c\""], ["proof (state)\nthis:\n  a = b * c\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  a = b * c", "have \"hom a = hom b * hom c\""], ["proof (prove)\nusing this:\n  a = b * c\n\ngoal (1 subgoal):\n 1. hom a = hom b * hom c", "by (simp add: hom_distribs)"], ["proof (state)\nthis:\n  hom a = hom b * hom c\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "with irr"], ["proof (chain)\npicking this:\n  irreducible (hom a)\n  hom a = hom b * hom c", "have \"hom b dvd 1 \\<or> hom c dvd 1\""], ["proof (prove)\nusing this:\n  irreducible (hom a)\n  hom a = hom b * hom c\n\ngoal (1 subgoal):\n 1. hom b dvd (1::'b) \\<or> hom c dvd (1::'b)", "by (auto dest: irreducibleD)"], ["proof (state)\nthis:\n  hom b dvd (1::'b) \\<or> hom c dvd (1::'b)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = aa * b \\<Longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a)", "then"], ["proof (chain)\npicking this:\n  hom b dvd (1::'b) \\<or> hom c dvd (1::'b)", "show \"b dvd 1 \\<or> c dvd 1\""], ["proof (prove)\nusing this:\n  hom b dvd (1::'b) \\<or> hom c dvd (1::'b)\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<or> c dvd (1::'a)", "by simp"], ["proof (state)\nthis:\n  b dvd (1::'a) \\<or> c dvd (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale factor_preserving_hom = unit_preserving_hom + irreducibility_hom\nbegin"], ["", "lemma irreducible_hom[simp]: \"irreducible (hom a) \\<longleftrightarrow> irreducible a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible (hom a) = irreducible a", "using irreducible_hom_imp_irreducible irreducible_imp_irreducible_hom"], ["proof (prove)\nusing this:\n  irreducible (hom ?a) \\<Longrightarrow> irreducible ?a\n  irreducible ?a \\<Longrightarrow> irreducible (hom ?a)\n\ngoal (1 subgoal):\n 1. irreducible (hom a) = irreducible a", "by metis"], ["", "end"], ["", "lemma factor_preserving_hom_comp:\n  assumes f: \"factor_preserving_hom f\" and g: \"factor_preserving_hom g\"\n  shows \"factor_preserving_hom (f o g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_preserving_hom (f \\<circ> g)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. factor_preserving_hom (f \\<circ> g)", "interpret f: factor_preserving_hom f"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_preserving_hom f", "by (rule f)"], ["proof (state)\ngoal (1 subgoal):\n 1. factor_preserving_hom (f \\<circ> g)", "interpret g: factor_preserving_hom g"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_preserving_hom g", "by (rule g)"], ["proof (state)\ngoal (1 subgoal):\n 1. factor_preserving_hom (f \\<circ> g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_preserving_hom (f \\<circ> g)", "by (unfold_locales, auto simp: hom_distribs)"], ["proof (state)\nthis:\n  factor_preserving_hom (f \\<circ> g)\n\ngoal:\nNo subgoals!", "qed"], ["", "context comm_semiring_isom begin"], ["", "sublocale unit_preserving_hom"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_preserving_hom hom", "by (unfold_locales, auto)"], ["", "sublocale factor_preserving_hom"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_preserving_hom hom", "proof (standard)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. irreducible a \\<Longrightarrow> irreducible (hom a)", "fix a :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. irreducible a \\<Longrightarrow> irreducible (hom a)", "assume \"irreducible a\""], ["proof (state)\nthis:\n  irreducible a\n\ngoal (1 subgoal):\n 1. \\<And>a. irreducible a \\<Longrightarrow> irreducible (hom a)", "note a = this[unfolded irreducible_def]"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>aa b.\n      a = aa * b \\<longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>a. irreducible a \\<Longrightarrow> irreducible (hom a)", "show \"irreducible (hom a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible (hom a)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "assume \"\\<not> irreducible (hom a)\""], ["proof (state)\nthis:\n  \\<not> irreducible (hom a)\n\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "from this[unfolded Factorial_Ring.irreducible_def,simplified] a"], ["proof (chain)\npicking this:\n  a = (0::'a) \\<or>\n  a dvd (1::'a) \\<or>\n  (\\<exists>aa b.\n      a = inv hom (aa * b) \\<and>\n      \\<not> aa dvd (1::'b) \\<and> \\<not> b dvd (1::'b))\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>aa b.\n      a = aa * b \\<longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a))", "obtain hb hc where eq: \"hom a = hb * hc\" and nu: \"\\<not> hb dvd 1\" \"\\<not> hc dvd 1\""], ["proof (prove)\nusing this:\n  a = (0::'a) \\<or>\n  a dvd (1::'a) \\<or>\n  (\\<exists>aa b.\n      a = inv hom (aa * b) \\<and>\n      \\<not> aa dvd (1::'b) \\<and> \\<not> b dvd (1::'b))\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>aa b.\n      a = aa * b \\<longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>hb hc.\n        \\<lbrakk>hom a = hb * hc; \\<not> hb dvd (1::'b);\n         \\<not> hc dvd (1::'b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  hom a = hb * hc\n  \\<not> hb dvd (1::'b)\n  \\<not> hc dvd (1::'b)\n\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "from bij"], ["proof (chain)\npicking this:\n  bij hom", "obtain b where hb: \"hb = hom b\""], ["proof (prove)\nusing this:\n  bij hom\n\ngoal (1 subgoal):\n 1. (\\<And>b. hb = hom b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim bij_pointE)"], ["proof (state)\nthis:\n  hb = hom b\n\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "from bij"], ["proof (chain)\npicking this:\n  bij hom", "obtain c where hc: \"hc = hom c\""], ["proof (prove)\nusing this:\n  bij hom\n\ngoal (1 subgoal):\n 1. (\\<And>c. hc = hom c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim bij_pointE)"], ["proof (state)\nthis:\n  hc = hom c\n\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "from eq[unfolded hb hc, folded hom_mult]"], ["proof (chain)\npicking this:\n  hom a = hom (b * c)", "have \"a = b * c\""], ["proof (prove)\nusing this:\n  hom a = hom (b * c)\n\ngoal (1 subgoal):\n 1. a = b * c", "by auto"], ["proof (state)\nthis:\n  a = b * c\n\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "with nu hb hc"], ["proof (chain)\npicking this:\n  \\<not> hb dvd (1::'b)\n  \\<not> hc dvd (1::'b)\n  hb = hom b\n  hc = hom c\n  a = b * c", "have \"a = b * c\" \"\\<not> b dvd 1\" \"\\<not> c dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> hb dvd (1::'b)\n  \\<not> hc dvd (1::'b)\n  hb = hom b\n  hc = hom c\n  a = b * c\n\ngoal (1 subgoal):\n 1. a = b * c &&& \\<not> b dvd (1::'a) &&& \\<not> c dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  a = b * c\n  \\<not> b dvd (1::'a)\n  \\<not> c dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> irreducible (hom a) \\<Longrightarrow> False", "with a"], ["proof (chain)\npicking this:\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>aa b.\n      a = aa * b \\<longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a))\n  a = b * c\n  \\<not> b dvd (1::'a)\n  \\<not> c dvd (1::'a)", "show False"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a) \\<and>\n  \\<not> a dvd (1::'a) \\<and>\n  (\\<forall>aa b.\n      a = aa * b \\<longrightarrow> aa dvd (1::'a) \\<or> b dvd (1::'a))\n  a = b * c\n  \\<not> b dvd (1::'a)\n  \\<not> c dvd (1::'a)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  irreducible (hom a)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection\\<open>Back to divisibility\\<close>"], ["", "lemma(in comm_semiring_1) mset_factors_mult:\n  assumes F: \"mset_factors F a\"\n      and G: \"mset_factors G b\"\n  shows \"mset_factors (F+G) (a*b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_factors (F + G) (a * b)", "proof(intro mset_factorsI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f. f \\<in># F + G \\<Longrightarrow> irreducible f\n 2. F + G \\<noteq> {#}\n 3. \\<Prod>\\<^sub># (F + G) = a * b", "fix f"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f. f \\<in># F + G \\<Longrightarrow> irreducible f\n 2. F + G \\<noteq> {#}\n 3. \\<Prod>\\<^sub># (F + G) = a * b", "assume \"f \\<in># F + G\""], ["proof (state)\nthis:\n  f \\<in># F + G\n\ngoal (3 subgoals):\n 1. \\<And>f. f \\<in># F + G \\<Longrightarrow> irreducible f\n 2. F + G \\<noteq> {#}\n 3. \\<Prod>\\<^sub># (F + G) = a * b", "then"], ["proof (chain)\npicking this:\n  f \\<in># F + G", "consider \"f \\<in># F\" | \"f \\<in># G\""], ["proof (prove)\nusing this:\n  f \\<in># F + G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in># F \\<Longrightarrow> thesis;\n     f \\<in># G \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>f \\<in># F \\<Longrightarrow> ?thesis1;\n   f \\<in># G \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (3 subgoals):\n 1. \\<And>f. f \\<in># F + G \\<Longrightarrow> irreducible f\n 2. F + G \\<noteq> {#}\n 3. \\<Prod>\\<^sub># (F + G) = a * b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>f \\<in># F \\<Longrightarrow> ?thesis1;\n   f \\<in># G \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1", "show \"irreducible f\""], ["proof (prove)\nusing this:\n  \\<lbrakk>f \\<in># F \\<Longrightarrow> ?thesis1;\n   f \\<in># G \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. irreducible f", "by(cases, insert F G, auto)"], ["proof (state)\nthis:\n  irreducible f\n\ngoal (2 subgoals):\n 1. F + G \\<noteq> {#}\n 2. \\<Prod>\\<^sub># (F + G) = a * b", "qed (insert F G, auto)"], ["", "lemma(in ufd) dvd_imp_subset_factors:\n  assumes ab: \"a dvd b\"\n      and F: \"mset_factors F a\"\n      and G: \"mset_factors G b\"\n  shows \"\\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from F G"], ["proof (chain)\npicking this:\n  mset_factors F a\n  mset_factors G b", "have a0: \"a \\<noteq> 0\" and b0: \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  mset_factors F a\n  mset_factors G b\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) &&& b \\<noteq> (0::'a)", "by (simp_all add: mset_factors_imp_nonzero)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from ab"], ["proof (chain)\npicking this:\n  a dvd b", "obtain c where c: \"b = a * c\""], ["proof (prove)\nusing this:\n  a dvd b\n\ngoal (1 subgoal):\n 1. (\\<And>c. b = a * c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  b = a * c\n\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "with b0"], ["proof (chain)\npicking this:\n  b \\<noteq> (0::'a)\n  b = a * c", "have c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b \\<noteq> (0::'a)\n  b = a * c\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "proof(cases \"c dvd 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "case True"], ["proof (state)\nthis:\n  c dvd (1::'a)\n\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "proof(cases F)"], ["proof (state)\ngoal (2 subgoals):\n 1. F = {#} \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n 2. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "case empty"], ["proof (state)\nthis:\n  F = {#}\n\ngoal (2 subgoals):\n 1. F = {#} \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n 2. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "with F"], ["proof (chain)\npicking this:\n  mset_factors F a\n  F = {#}", "show ?thesis"], ["proof (prove)\nusing this:\n  mset_factors F a\n  F = {#}\n\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "by auto"], ["proof (state)\nthis:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "case (add f F')"], ["proof (state)\nthis:\n  F = add_mset f F'\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "with F"], ["proof (chain)\npicking this:\n  mset_factors F a\n  F = add_mset f F'", "have a: \"f * prod_mset F' = a\"\n           and F': \"\\<And>f. f \\<in># F' \\<Longrightarrow> irreducible f\"\n           and irrf: \"irreducible f\""], ["proof (prove)\nusing this:\n  mset_factors F a\n  F = add_mset f F'\n\ngoal (1 subgoal):\n 1. f * \\<Prod>\\<^sub># F' = a &&&\n    (\\<And>f. f \\<in># F' \\<Longrightarrow> irreducible f) &&& irreducible f", "by auto"], ["proof (state)\nthis:\n  f * \\<Prod>\\<^sub># F' = a\n  ?f1 \\<in># F' \\<Longrightarrow> irreducible ?f1\n  irreducible f\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from irrf"], ["proof (chain)\npicking this:\n  irreducible f", "have f0: \"f \\<noteq> 0\" and f1: \"\\<not>f dvd 1\""], ["proof (prove)\nusing this:\n  irreducible f\n\ngoal (1 subgoal):\n 1. f \\<noteq> (0::'a) &&& \\<not> f dvd (1::'a)", "by (auto dest: irreducible_not_unit)"], ["proof (state)\nthis:\n  f \\<noteq> (0::'a)\n  \\<not> f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from a c"], ["proof (chain)\npicking this:\n  f * \\<Prod>\\<^sub># F' = a\n  b = a * c", "have \"(f * c) * prod_mset F' = b\""], ["proof (prove)\nusing this:\n  f * \\<Prod>\\<^sub># F' = a\n  b = a * c\n\ngoal (1 subgoal):\n 1. f * c * \\<Prod>\\<^sub># F' = b", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  f * c * \\<Prod>\\<^sub># F' = b\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "moreover"], ["proof (state)\nthis:\n  f * c * \\<Prod>\\<^sub># F' = b\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "{"], ["proof (state)\nthis:\n  f * c * \\<Prod>\\<^sub># F' = b\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "have \"irreducible (f * c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible (f * c)", "using True irrf"], ["proof (prove)\nusing this:\n  c dvd (1::'a)\n  irreducible f\n\ngoal (1 subgoal):\n 1. irreducible (f * c)", "by (subst irreducible_mult_unit_right)"], ["proof (state)\nthis:\n  irreducible (f * c)\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "with F' irrf"], ["proof (chain)\npicking this:\n  ?f1 \\<in># F' \\<Longrightarrow> irreducible ?f1\n  irreducible f\n  irreducible (f * c)", "have \"\\<And>f'. f' \\<in># F' + {#f * c#} \\<Longrightarrow> irreducible f'\""], ["proof (prove)\nusing this:\n  ?f1 \\<in># F' \\<Longrightarrow> irreducible ?f1\n  irreducible f\n  irreducible (f * c)\n\ngoal (1 subgoal):\n 1. \\<And>f'. f' \\<in># F' + {#f * c#} \\<Longrightarrow> irreducible f'", "by auto"], ["proof (state)\nthis:\n  ?f'1 \\<in># F' + {#f * c#} \\<Longrightarrow> irreducible ?f'1\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "}"], ["proof (state)\nthis:\n  ?f'1 \\<in># F' + {#f * c#} \\<Longrightarrow> irreducible ?f'1\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "ultimately"], ["proof (chain)\npicking this:\n  f * c * \\<Prod>\\<^sub># F' = b\n  ?f'1 \\<in># F' + {#f * c#} \\<Longrightarrow> irreducible ?f'1", "have \"mset_factors (F' + {#f * c#}) b\""], ["proof (prove)\nusing this:\n  f * c * \\<Prod>\\<^sub># F' = b\n  ?f'1 \\<in># F' + {#f * c#} \\<Longrightarrow> irreducible ?f'1\n\ngoal (1 subgoal):\n 1. mset_factors (F' + {#f * c#}) b", "by (intro mset_factorsI, auto)"], ["proof (state)\nthis:\n  mset_factors (F' + {#f * c#}) b\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from mset_factors_unique[OF this G]"], ["proof (chain)\npicking this:\n  rel_mset (ddvd) (F' + {#f * c#}) G", "have F'G: \"rel_mset (ddvd) (F' + {#f * c#}) G\""], ["proof (prove)\nusing this:\n  rel_mset (ddvd) (F' + {#f * c#}) G\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (F' + {#f * c#}) G", "."], ["proof (state)\nthis:\n  rel_mset (ddvd) (F' + {#f * c#}) G\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from True add"], ["proof (chain)\npicking this:\n  c dvd (1::'a)\n  F = add_mset f F'", "have FF': \"rel_mset (ddvd) F (F' + {#f * c#})\""], ["proof (prove)\nusing this:\n  c dvd (1::'a)\n  F = add_mset f F'\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) F (F' + {#f * c#})", "by (auto simp add: multiset.rel_refl intro!: rel_mset_Plus)"], ["proof (state)\nthis:\n  rel_mset (ddvd) F (F' + {#f * c#})\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "have \"rel_mset (ddvd) F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_mset (ddvd) F G", "apply(rule transpD[OF multiset.rel_transp[OF transpI] FF' F'G])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x ddvd y; y ddvd z\\<rbrakk> \\<Longrightarrow> x ddvd z", "using ddvd_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x ddvd ?y; ?y ddvd ?z\\<rbrakk> \\<Longrightarrow> ?x ddvd ?z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x ddvd y; y ddvd z\\<rbrakk> \\<Longrightarrow> x ddvd z", "."], ["proof (state)\nthis:\n  rel_mset (ddvd) F G\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow>\n       \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "then"], ["proof (chain)\npicking this:\n  rel_mset (ddvd) F G", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_mset (ddvd) F G\n\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "by auto"], ["proof (state)\nthis:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "case False"], ["proof (state)\nthis:\n  \\<not> c dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from mset_factors_exist[OF c0 this]"], ["proof (chain)\npicking this:\n  \\<exists>F. mset_factors F c", "obtain H where H: \"mset_factors H c\""], ["proof (prove)\nusing this:\n  \\<exists>F. mset_factors F c\n\ngoal (1 subgoal):\n 1. (\\<And>H. mset_factors H c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset_factors H c\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from c mset_factors_mult[OF F H]"], ["proof (chain)\npicking this:\n  b = a * c\n  mset_factors (F + H) (a * c)", "have \"mset_factors (F + H) b\""], ["proof (prove)\nusing this:\n  b = a * c\n  mset_factors (F + H) (a * c)\n\ngoal (1 subgoal):\n 1. mset_factors (F + H) b", "by auto"], ["proof (state)\nthis:\n  mset_factors (F + H) b\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "note mset_factors_unique[OF this G]"], ["proof (state)\nthis:\n  rel_mset (ddvd) (F + H) G\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "from rel_mset_split[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>Y1 Y2.\n     G = Y1 + Y2 \\<and> rel_mset (ddvd) F Y1 \\<and> rel_mset (ddvd) H Y2", "obtain G1 G2\n        where \"G = G1 + G2\" \"rel_mset (ddvd) F G1\" \"rel_mset (ddvd) H G2\""], ["proof (prove)\nusing this:\n  \\<exists>Y1 Y2.\n     G = Y1 + Y2 \\<and> rel_mset (ddvd) F Y1 \\<and> rel_mset (ddvd) H Y2\n\ngoal (1 subgoal):\n 1. (\\<And>G1 G2.\n        \\<lbrakk>G = G1 + G2; rel_mset (ddvd) F G1;\n         rel_mset (ddvd) H G2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  G = G1 + G2\n  rel_mset (ddvd) F G1\n  rel_mset (ddvd) H G2\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow>\n    \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "then"], ["proof (chain)\npicking this:\n  G = G1 + G2\n  rel_mset (ddvd) F G1\n  rel_mset (ddvd) H G2", "show ?thesis"], ["proof (prove)\nusing this:\n  G = G1 + G2\n  rel_mset (ddvd) F G1\n  rel_mset (ddvd) H G2\n\ngoal (1 subgoal):\n 1. \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'", "by (intro exI[of _ \"G1\"], auto)"], ["proof (state)\nthis:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) F G'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma(in idom) irreducible_factor_singleton:\n  assumes a: \"irreducible a\"\n  shows \"mset_factors F a \\<longleftrightarrow> F = {#a#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_factors F a = (F = {#a#})", "proof(cases F)"], ["proof (state)\ngoal (2 subgoals):\n 1. F = {#} \\<Longrightarrow> mset_factors F a = (F = {#a#})\n 2. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow> mset_factors F a = (F = {#a#})", "case empty"], ["proof (state)\nthis:\n  F = {#}\n\ngoal (2 subgoals):\n 1. F = {#} \\<Longrightarrow> mset_factors F a = (F = {#a#})\n 2. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow> mset_factors F a = (F = {#a#})", "with mset_factorsD"], ["proof (chain)\npicking this:\n  \\<lbrakk>mset_factors ?F ?p; ?f \\<in># ?F\\<rbrakk>\n  \\<Longrightarrow> irreducible ?f\n  mset_factors ?F ?p \\<Longrightarrow> ?F \\<noteq> {#}\n  mset_factors ?F ?p \\<Longrightarrow> \\<Prod>\\<^sub># ?F = ?p\n  F = {#}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>mset_factors ?F ?p; ?f \\<in># ?F\\<rbrakk>\n  \\<Longrightarrow> irreducible ?f\n  mset_factors ?F ?p \\<Longrightarrow> ?F \\<noteq> {#}\n  mset_factors ?F ?p \\<Longrightarrow> \\<Prod>\\<^sub># ?F = ?p\n  F = {#}\n\ngoal (1 subgoal):\n 1. mset_factors F a = (F = {#a#})", "by auto"], ["proof (state)\nthis:\n  mset_factors F a = (F = {#a#})\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow> mset_factors F a = (F = {#a#})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow> mset_factors F a = (F = {#a#})", "case (add f F')"], ["proof (state)\nthis:\n  F = add_mset f F'\n\ngoal (1 subgoal):\n 1. \\<And>x N.\n       F = add_mset x N \\<Longrightarrow> mset_factors F a = (F = {#a#})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_factors F a = (F = {#a#})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "assume F: \"mset_factors F a\""], ["proof (state)\nthis:\n  mset_factors F a\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "from add mset_factorsD[OF F]"], ["proof (chain)\npicking this:\n  F = add_mset f F'\n  ?f \\<in># F \\<Longrightarrow> irreducible ?f\n  F \\<noteq> {#}\n  \\<Prod>\\<^sub># F = a", "have *: \"a = f * prod_mset F'\""], ["proof (prove)\nusing this:\n  F = add_mset f F'\n  ?f \\<in># F \\<Longrightarrow> irreducible ?f\n  F \\<noteq> {#}\n  \\<Prod>\\<^sub># F = a\n\ngoal (1 subgoal):\n 1. a = f * \\<Prod>\\<^sub># F'", "by auto"], ["proof (state)\nthis:\n  a = f * \\<Prod>\\<^sub># F'\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "then"], ["proof (chain)\npicking this:\n  a = f * \\<Prod>\\<^sub># F'", "have fa: \"f dvd a\""], ["proof (prove)\nusing this:\n  a = f * \\<Prod>\\<^sub># F'\n\ngoal (1 subgoal):\n 1. f dvd a", "by auto"], ["proof (state)\nthis:\n  f dvd a\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "from * a"], ["proof (chain)\npicking this:\n  a = f * \\<Prod>\\<^sub># F'\n  irreducible a", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a = f * \\<Prod>\\<^sub># F'\n  irreducible a\n\ngoal (1 subgoal):\n 1. f \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "from add"], ["proof (chain)\npicking this:\n  F = add_mset f F'", "have \"f \\<in># F\""], ["proof (prove)\nusing this:\n  F = add_mset f F'\n\ngoal (1 subgoal):\n 1. f \\<in># F", "by auto"], ["proof (state)\nthis:\n  f \\<in># F\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "with F"], ["proof (chain)\npicking this:\n  mset_factors F a\n  f \\<in># F", "have f: \"irreducible f\""], ["proof (prove)\nusing this:\n  mset_factors F a\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. irreducible f", "by auto"], ["proof (state)\nthis:\n  irreducible f\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "from add"], ["proof (chain)\npicking this:\n  F = add_mset f F'", "have \"F' \\<subseteq># F\""], ["proof (prove)\nusing this:\n  F = add_mset f F'\n\ngoal (1 subgoal):\n 1. F' \\<subseteq># F", "by auto"], ["proof (state)\nthis:\n  F' \\<subseteq># F\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "then"], ["proof (chain)\npicking this:\n  F' \\<subseteq># F", "have unitemp: \"prod_mset F' dvd 1 \\<Longrightarrow> F' = {#}\""], ["proof (prove)\nusing this:\n  F' \\<subseteq># F\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># F' dvd (1::'a) \\<Longrightarrow> F' = {#}", "proof(induct F')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Prod>\\<^sub># {#} dvd (1::'a); {#} \\<subseteq># F\\<rbrakk>\n    \\<Longrightarrow> {#} = {#}\n 2. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "case empty"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># {#} dvd (1::'a)\n  {#} \\<subseteq># F\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Prod>\\<^sub># {#} dvd (1::'a); {#} \\<subseteq># F\\<rbrakk>\n    \\<Longrightarrow> {#} = {#}\n 2. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "then"], ["proof (chain)\npicking this:\n  \\<Prod>\\<^sub># {#} dvd (1::'a)\n  {#} \\<subseteq># F", "show ?case"], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># {#} dvd (1::'a)\n  {#} \\<subseteq># F\n\ngoal (1 subgoal):\n 1. {#} = {#}", "by auto"], ["proof (state)\nthis:\n  {#} = {#}\n\ngoal (1 subgoal):\n 1. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "case (add f F')"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a); F' \\<subseteq># F\\<rbrakk>\n  \\<Longrightarrow> F' = {#}\n  \\<Prod>\\<^sub># (add_mset f F') dvd (1::'a)\n  add_mset f F' \\<subseteq># F\n\ngoal (1 subgoal):\n 1. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "from add"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a); F' \\<subseteq># F\\<rbrakk>\n  \\<Longrightarrow> F' = {#}\n  \\<Prod>\\<^sub># (add_mset f F') dvd (1::'a)\n  add_mset f F' \\<subseteq># F", "have \"f \\<in># F\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a); F' \\<subseteq># F\\<rbrakk>\n  \\<Longrightarrow> F' = {#}\n  \\<Prod>\\<^sub># (add_mset f F') dvd (1::'a)\n  add_mset f F' \\<subseteq># F\n\ngoal (1 subgoal):\n 1. f \\<in># F", "by (simp add: mset_subset_eq_insertD)"], ["proof (state)\nthis:\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "with F irreducible_not_unit"], ["proof (chain)\npicking this:\n  mset_factors F a\n  irreducible ?p \\<Longrightarrow> \\<not> ?p dvd (1::'a)\n  f \\<in># F", "have \"\\<not> f dvd 1\""], ["proof (prove)\nusing this:\n  mset_factors F a\n  irreducible ?p \\<Longrightarrow> \\<not> ?p dvd (1::'a)\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. \\<not> f dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "then"], ["proof (chain)\npicking this:\n  \\<not> f dvd (1::'a)", "have \"\\<not> (prod_mset F' * f) dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> \\<Prod>\\<^sub># F' * f dvd (1::'a)", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<Prod>\\<^sub># F' * f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F'.\n       \\<lbrakk>\\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a);\n                 F' \\<subseteq># F\\<rbrakk>\n                \\<Longrightarrow> F' = {#};\n        \\<Prod>\\<^sub># (add_mset x F') dvd (1::'a);\n        add_mset x F' \\<subseteq># F\\<rbrakk>\n       \\<Longrightarrow> add_mset x F' = {#}", "with add"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a); F' \\<subseteq># F\\<rbrakk>\n  \\<Longrightarrow> F' = {#}\n  \\<Prod>\\<^sub># (add_mset f F') dvd (1::'a)\n  add_mset f F' \\<subseteq># F\n  \\<not> \\<Prod>\\<^sub># F' * f dvd (1::'a)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Prod>\\<^sub># F' dvd (1::'a); F' \\<subseteq># F\\<rbrakk>\n  \\<Longrightarrow> F' = {#}\n  \\<Prod>\\<^sub># (add_mset f F') dvd (1::'a)\n  add_mset f F' \\<subseteq># F\n  \\<not> \\<Prod>\\<^sub># F' * f dvd (1::'a)\n\ngoal (1 subgoal):\n 1. add_mset f F' = {#}", "by auto"], ["proof (state)\nthis:\n  add_mset f F' = {#}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># F' dvd (1::'a) \\<Longrightarrow> F' = {#}\n\ngoal (2 subgoals):\n 1. mset_factors F a \\<Longrightarrow> F = {#a#}\n 2. F = {#a#} \\<Longrightarrow> mset_factors F a", "show \"F = {#a#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F = {#a#}", "proof(cases \"a dvd f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a dvd f \\<Longrightarrow> F = {#a#}\n 2. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "case True"], ["proof (state)\nthis:\n  a dvd f\n\ngoal (2 subgoals):\n 1. a dvd f \\<Longrightarrow> F = {#a#}\n 2. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "then"], ["proof (chain)\npicking this:\n  a dvd f", "obtain r where \"f = a * r\""], ["proof (prove)\nusing this:\n  a dvd f\n\ngoal (1 subgoal):\n 1. (\\<And>r. f = a * r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  f = a * r\n\ngoal (2 subgoals):\n 1. a dvd f \\<Longrightarrow> F = {#a#}\n 2. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "with *"], ["proof (chain)\npicking this:\n  a = f * \\<Prod>\\<^sub># F'\n  f = a * r", "have \"f = (r * prod_mset F') * f\""], ["proof (prove)\nusing this:\n  a = f * \\<Prod>\\<^sub># F'\n  f = a * r\n\ngoal (1 subgoal):\n 1. f = r * \\<Prod>\\<^sub># F' * f", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  f = r * \\<Prod>\\<^sub># F' * f\n\ngoal (2 subgoals):\n 1. a dvd f \\<Longrightarrow> F = {#a#}\n 2. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "with f0"], ["proof (chain)\npicking this:\n  f \\<noteq> (0::'a)\n  f = r * \\<Prod>\\<^sub># F' * f", "have \"r * prod_mset F' = 1\""], ["proof (prove)\nusing this:\n  f \\<noteq> (0::'a)\n  f = r * \\<Prod>\\<^sub># F' * f\n\ngoal (1 subgoal):\n 1. r * \\<Prod>\\<^sub># F' = (1::'a)", "by auto"], ["proof (state)\nthis:\n  r * \\<Prod>\\<^sub># F' = (1::'a)\n\ngoal (2 subgoals):\n 1. a dvd f \\<Longrightarrow> F = {#a#}\n 2. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "then"], ["proof (chain)\npicking this:\n  r * \\<Prod>\\<^sub># F' = (1::'a)", "have \"prod_mset F' dvd 1\""], ["proof (prove)\nusing this:\n  r * \\<Prod>\\<^sub># F' = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># F' dvd (1::'a)", "by (metis dvd_triv_right)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># F' dvd (1::'a)\n\ngoal (2 subgoals):\n 1. a dvd f \\<Longrightarrow> F = {#a#}\n 2. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "with unitemp * add"], ["proof (chain)\npicking this:\n  \\<Prod>\\<^sub># F' dvd (1::'a) \\<Longrightarrow> F' = {#}\n  a = f * \\<Prod>\\<^sub># F'\n  F = add_mset f F'\n  \\<Prod>\\<^sub># F' dvd (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># F' dvd (1::'a) \\<Longrightarrow> F' = {#}\n  a = f * \\<Prod>\\<^sub># F'\n  F = add_mset f F'\n  \\<Prod>\\<^sub># F' dvd (1::'a)\n\ngoal (1 subgoal):\n 1. F = {#a#}", "by auto"], ["proof (state)\nthis:\n  F = {#a#}\n\ngoal (1 subgoal):\n 1. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "case False"], ["proof (state)\nthis:\n  \\<not> a dvd f\n\ngoal (1 subgoal):\n 1. \\<not> a dvd f \\<Longrightarrow> F = {#a#}", "with fa a f"], ["proof (chain)\npicking this:\n  f dvd a\n  irreducible a\n  irreducible f\n  \\<not> a dvd f", "show ?thesis"], ["proof (prove)\nusing this:\n  f dvd a\n  irreducible a\n  irreducible f\n  \\<not> a dvd f\n\ngoal (1 subgoal):\n 1. F = {#a#}", "by (auto simp: irreducible_altdef)"], ["proof (state)\nthis:\n  F = {#a#}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F = {#a#}\n\ngoal (1 subgoal):\n 1. F = {#a#} \\<Longrightarrow> mset_factors F a", "qed (insert a, auto)"], ["proof (state)\nthis:\n  mset_factors F a = (F = {#a#})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma(in ufd) irreducible_dvd_imp_factor:\n  assumes ab: \"a dvd b\"\n      and a: \"irreducible a\"\n      and G: \"mset_factors G b\"\n  shows \"\\<exists>g \\<in># G. a ddvd g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "from a"], ["proof (chain)\npicking this:\n  irreducible a", "have \"mset_factors {#a#} a\""], ["proof (prove)\nusing this:\n  irreducible a\n\ngoal (1 subgoal):\n 1. mset_factors {#a#} a", "by auto"], ["proof (state)\nthis:\n  mset_factors {#a#} a\n\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "from dvd_imp_subset_factors[OF ab this G]"], ["proof (chain)\npicking this:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) {#a#} G'", "obtain G' where G'G: \"G' \\<subseteq># G\" and rel: \"rel_mset (ddvd) {#a#} G'\""], ["proof (prove)\nusing this:\n  \\<exists>G'. G' \\<subseteq># G \\<and> rel_mset (ddvd) {#a#} G'\n\ngoal (1 subgoal):\n 1. (\\<And>G'.\n        \\<lbrakk>G' \\<subseteq># G; rel_mset (ddvd) {#a#} G'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  G' \\<subseteq># G\n  rel_mset (ddvd) {#a#} G'\n\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "with rel_mset_size size_1_singleton_mset size_single"], ["proof (chain)\npicking this:\n  rel_mset ?R ?M ?N \\<Longrightarrow> size ?M = size ?N\n  size ?M = 1 \\<Longrightarrow> \\<exists>a. ?M = {#a#}\n  size {#?b#} = 1\n  G' \\<subseteq># G\n  rel_mset (ddvd) {#a#} G'", "obtain g where gG': \"G' = {#g#}\""], ["proof (prove)\nusing this:\n  rel_mset ?R ?M ?N \\<Longrightarrow> size ?M = size ?N\n  size ?M = 1 \\<Longrightarrow> \\<exists>a. ?M = {#a#}\n  size {#?b#} = 1\n  G' \\<subseteq># G\n  rel_mset (ddvd) {#a#} G'\n\ngoal (1 subgoal):\n 1. (\\<And>g. G' = {#g#} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  G' = {#g#}\n\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "from rel[unfolded this rel_mset_def]"], ["proof (chain)\npicking this:\n  \\<exists>xs ys.\n     mset xs = {#a#} \\<and> mset ys = {#g#} \\<and> list_all2 (ddvd) xs ys", "have \"a ddvd g\""], ["proof (prove)\nusing this:\n  \\<exists>xs ys.\n     mset xs = {#a#} \\<and> mset ys = {#g#} \\<and> list_all2 (ddvd) xs ys\n\ngoal (1 subgoal):\n 1. a ddvd g", "by auto"], ["proof (state)\nthis:\n  a ddvd g\n\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "with gG' G'G"], ["proof (chain)\npicking this:\n  G' = {#g#}\n  G' \\<subseteq># G\n  a ddvd g", "show ?thesis"], ["proof (prove)\nusing this:\n  G' = {#g#}\n  G' \\<subseteq># G\n  a ddvd g\n\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>#G. a ddvd g", "by auto"], ["proof (state)\nthis:\n  \\<exists>g\\<in>#G. a ddvd g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma(in idom) prod_mset_remove_units:\n  \"prod_mset F ddvd prod_mset {# f \\<in># F. \\<not>f dvd 1 #}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># F ddvd\n    \\<Prod>\\<^sub># {#f \\<in># F. \\<not> f dvd (1::'a)#}", "proof(induct F)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Prod>\\<^sub># {#} ddvd\n    \\<Prod>\\<^sub># {#f \\<in># {#}. \\<not> f dvd (1::'a)#}\n 2. \\<And>x F.\n       \\<Prod>\\<^sub># F ddvd\n       \\<Prod>\\<^sub>#\n        {#f \\<in># F. \\<not> f dvd (1::'a)#} \\<Longrightarrow>\n       \\<Prod>\\<^sub># (add_mset x F) ddvd\n       \\<Prod>\\<^sub># {#f \\<in># add_mset x F. \\<not> f dvd (1::'a)#}", "case (add f F)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># F ddvd\n  \\<Prod>\\<^sub># {#f \\<in># F. \\<not> f dvd (1::'a)#}\n\ngoal (2 subgoals):\n 1. \\<Prod>\\<^sub># {#} ddvd\n    \\<Prod>\\<^sub># {#f \\<in># {#}. \\<not> f dvd (1::'a)#}\n 2. \\<And>x F.\n       \\<Prod>\\<^sub># F ddvd\n       \\<Prod>\\<^sub>#\n        {#f \\<in># F. \\<not> f dvd (1::'a)#} \\<Longrightarrow>\n       \\<Prod>\\<^sub># (add_mset x F) ddvd\n       \\<Prod>\\<^sub># {#f \\<in># add_mset x F. \\<not> f dvd (1::'a)#}", "then"], ["proof (chain)\npicking this:\n  \\<Prod>\\<^sub># F ddvd\n  \\<Prod>\\<^sub># {#f \\<in># F. \\<not> f dvd (1::'a)#}", "show ?case"], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># F ddvd\n  \\<Prod>\\<^sub># {#f \\<in># F. \\<not> f dvd (1::'a)#}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (add_mset f F) ddvd\n    \\<Prod>\\<^sub># {#f \\<in># add_mset f F. \\<not> f dvd (1::'a)#}", "by (cases \"f = 0\", auto)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (add_mset f F) ddvd\n  \\<Prod>\\<^sub># {#f \\<in># add_mset f F. \\<not> f dvd (1::'a)#}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># {#} ddvd\n    \\<Prod>\\<^sub># {#f \\<in># {#}. \\<not> f dvd (1::'a)#}", "qed auto"], ["", "lemma(in comm_semiring_1) mset_factors_imp_dvd:\n  assumes \"mset_factors F x\" and \"f \\<in># F\" shows \"f dvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd x", "using assms"], ["proof (prove)\nusing this:\n  mset_factors F x\n  f \\<in># F\n\ngoal (1 subgoal):\n 1. f dvd x", "by (simp add: dvd_prod_mset mset_factors_def)"], ["", "lemma(in ufd) prime_elem_iff_irreducible[iff]:\n  \"prime_elem x \\<longleftrightarrow> irreducible x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_elem x = irreducible x", "proof (intro iffI, fact prime_elem_imp_irreducible, rule prime_elemI)"], ["proof (state)\ngoal (3 subgoals):\n 1. irreducible x \\<Longrightarrow> x \\<noteq> (0::'a)\n 2. irreducible x \\<Longrightarrow> \\<not> x dvd (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "assume r: \"irreducible x\""], ["proof (state)\nthis:\n  irreducible x\n\ngoal (3 subgoals):\n 1. irreducible x \\<Longrightarrow> x \\<noteq> (0::'a)\n 2. irreducible x \\<Longrightarrow> \\<not> x dvd (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  irreducible x", "show x0: \"x \\<noteq> 0\" and x1: \"\\<not> x dvd 1\""], ["proof (prove)\nusing this:\n  irreducible x\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a) &&& \\<not> x dvd (1::'a)", "by (auto dest: irreducible_not_unit)"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n  \\<not> x dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "from irreducible_factor_singleton[OF r]"], ["proof (chain)\npicking this:\n  mset_factors ?F x = (?F = {#x#})", "have *: \"mset_factors {#x#} x\""], ["proof (prove)\nusing this:\n  mset_factors ?F x = (?F = {#x#})\n\ngoal (1 subgoal):\n 1. mset_factors {#x#} x", "by auto"], ["proof (state)\nthis:\n  mset_factors {#x#} x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "assume \"x dvd a * b\""], ["proof (state)\nthis:\n  x dvd a * b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  x dvd a * b", "obtain c where abxc: \"a * b = x * c\""], ["proof (prove)\nusing this:\n  x dvd a * b\n\ngoal (1 subgoal):\n 1. (\\<And>c. a * b = x * c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  a * b = x * c\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>irreducible x; x dvd a * b\\<rbrakk>\n       \\<Longrightarrow> x dvd a \\<or> x dvd b", "show \"x dvd a \\<or> x dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "proof(cases \"c = 0 \\<or> a = 0 \\<or> b = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "case True"], ["proof (state)\nthis:\n  c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a)\n\ngoal (2 subgoals):\n 1. c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "with abxc"], ["proof (chain)\npicking this:\n  a * b = x * c\n  c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  a * b = x * c\n  c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a)\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal (1 subgoal):\n 1. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "case False"], ["proof (state)\nthis:\n  \\<not> (c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  \\<not> (c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a))", "have a0: \"a \\<noteq> 0\" and b0: \"b \\<noteq> 0\" and c0: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> (c = (0::'a) \\<or> a = (0::'a) \\<or> b = (0::'a))\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) &&& b \\<noteq> (0::'a) &&& c \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n  b \\<noteq> (0::'a)\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "from x0 c0"], ["proof (chain)\npicking this:\n  x \\<noteq> (0::'a)\n  c \\<noteq> (0::'a)", "have xc0: \"x * c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x * c \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  x * c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "from x1"], ["proof (chain)\npicking this:\n  \\<not> x dvd (1::'a)", "have xc1: \"\\<not> x * c dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> x dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> x * c dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> x * c dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (c = (0::'a) \\<or>\n            a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "proof (cases \"a dvd 1 \\<or> b dvd 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "case False"], ["proof (state)\nthis:\n  \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a))\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a))", "have a1: \"\\<not> a dvd 1\" and b1: \"\\<not> b dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a))\n\ngoal (1 subgoal):\n 1. \\<not> a dvd (1::'a) &&& \\<not> b dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<not> a dvd (1::'a)\n  \\<not> b dvd (1::'a)\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "from mset_factors_exist[OF a0 a1]"], ["proof (chain)\npicking this:\n  \\<exists>F. mset_factors F a", "obtain F where Fa: \"mset_factors F a\""], ["proof (prove)\nusing this:\n  \\<exists>F. mset_factors F a\n\ngoal (1 subgoal):\n 1. (\\<And>F. mset_factors F a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset_factors F a\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  mset_factors F a", "have F0: \"F \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  mset_factors F a\n\ngoal (1 subgoal):\n 1. F \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  F \\<noteq> {#}\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "from mset_factors_exist[OF b0 b1]"], ["proof (chain)\npicking this:\n  \\<exists>F. mset_factors F b", "obtain G where Gb: \"mset_factors G b\""], ["proof (prove)\nusing this:\n  \\<exists>F. mset_factors F b\n\ngoal (1 subgoal):\n 1. (\\<And>G. mset_factors G b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset_factors G b\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  mset_factors G b", "have G0: \"G \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  mset_factors G b\n\ngoal (1 subgoal):\n 1. G \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  G \\<noteq> {#}\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "from mset_factors_mult[OF Fa Gb]"], ["proof (chain)\npicking this:\n  mset_factors (F + G) (a * b)", "have FGxc: \"mset_factors (F + G) (x * c)\""], ["proof (prove)\nusing this:\n  mset_factors (F + G) (a * b)\n\ngoal (1 subgoal):\n 1. mset_factors (F + G) (x * c)", "by (simp add: abxc)"], ["proof (state)\nthis:\n  mset_factors (F + G) (x * c)\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b\n 2. \\<not> (a dvd (1::'a) \\<or> b dvd (1::'a)) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "proof (cases \"c dvd 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "case True"], ["proof (state)\nthis:\n  c dvd (1::'a)\n\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from r irreducible_mult_unit_right[OF this]"], ["proof (chain)\npicking this:\n  irreducible x\n  irreducible (?p * c) = irreducible ?p", "have \"irreducible (x*c)\""], ["proof (prove)\nusing this:\n  irreducible x\n  irreducible (?p * c) = irreducible ?p\n\ngoal (1 subgoal):\n 1. irreducible (x * c)", "by simp"], ["proof (state)\nthis:\n  irreducible (x * c)\n\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "note irreducible_factor_singleton[OF this] FGxc"], ["proof (state)\nthis:\n  mset_factors ?F (x * c) = (?F = {#x * c#})\n  mset_factors (F + G) (x * c)\n\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "with F0 G0"], ["proof (chain)\npicking this:\n  F \\<noteq> {#}\n  G \\<noteq> {#}\n  mset_factors ?F (x * c) = (?F = {#x * c#})\n  mset_factors (F + G) (x * c)", "have False"], ["proof (prove)\nusing this:\n  F \\<noteq> {#}\n  G \\<noteq> {#}\n  mset_factors ?F (x * c) = (?F = {#x * c#})\n  mset_factors (F + G) (x * c)\n\ngoal (1 subgoal):\n 1. False", "by (cases F; cases G; auto)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "case False"], ["proof (state)\nthis:\n  \\<not> c dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from mset_factors_exist[OF c0 this]"], ["proof (chain)\npicking this:\n  \\<exists>F. mset_factors F c", "obtain H where \"mset_factors H c\""], ["proof (prove)\nusing this:\n  \\<exists>F. mset_factors F c\n\ngoal (1 subgoal):\n 1. (\\<And>H. mset_factors H c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset_factors H c\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "with *"], ["proof (chain)\npicking this:\n  mset_factors {#x#} x\n  mset_factors H c", "have xHxc: \"mset_factors (add_mset x H) (x * c)\""], ["proof (prove)\nusing this:\n  mset_factors {#x#} x\n  mset_factors H c\n\ngoal (1 subgoal):\n 1. mset_factors (add_mset x H) (x * c)", "by force"], ["proof (state)\nthis:\n  mset_factors (add_mset x H) (x * c)\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "note rel = mset_factors_unique[OF this FGxc]"], ["proof (state)\nthis:\n  rel_mset (ddvd) (add_mset x H) (F + G)\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "obtain hs where \"mset hs = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>hs. mset hs = H \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_mset"], ["proof (prove)\nusing this:\n  \\<exists>xs. mset xs = ?X\n\ngoal (1 subgoal):\n 1. (\\<And>hs. mset hs = H \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset hs = H\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  mset hs = H", "have \"mset (x#hs) = add_mset x H\""], ["proof (prove)\nusing this:\n  mset hs = H\n\ngoal (1 subgoal):\n 1. mset (x # hs) = add_mset x H", "by auto"], ["proof (state)\nthis:\n  mset (x # hs) = add_mset x H\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from rel_mset_free[OF rel this]"], ["proof (chain)\npicking this:\n  \\<exists>ys. mset ys = F + G \\<and> list_all2 (ddvd) (x # hs) ys", "obtain jjs where jjsGH: \"mset jjs = F + G\" and rel: \"list_all2 (ddvd) (x # hs) jjs\""], ["proof (prove)\nusing this:\n  \\<exists>ys. mset ys = F + G \\<and> list_all2 (ddvd) (x # hs) ys\n\ngoal (1 subgoal):\n 1. (\\<And>jjs.\n        \\<lbrakk>mset jjs = F + G; list_all2 (ddvd) (x # hs) jjs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mset jjs = F + G\n  list_all2 (ddvd) (x # hs) jjs\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  mset jjs = F + G\n  list_all2 (ddvd) (x # hs) jjs", "obtain j js where jjs: \"jjs = j # js\""], ["proof (prove)\nusing this:\n  mset jjs = F + G\n  list_all2 (ddvd) (x # hs) jjs\n\ngoal (1 subgoal):\n 1. (\\<And>j js. jjs = j # js \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases jjs, auto)"], ["proof (state)\nthis:\n  jjs = j # js\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "with rel"], ["proof (chain)\npicking this:\n  list_all2 (ddvd) (x # hs) jjs\n  jjs = j # js", "have xj: \"x ddvd j\""], ["proof (prove)\nusing this:\n  list_all2 (ddvd) (x # hs) jjs\n  jjs = j # js\n\ngoal (1 subgoal):\n 1. x ddvd j", "by auto"], ["proof (state)\nthis:\n  x ddvd j\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from jjs jjsGH"], ["proof (chain)\npicking this:\n  jjs = j # js\n  mset jjs = F + G", "have j: \"j \\<in> set_mset (F + G)\""], ["proof (prove)\nusing this:\n  jjs = j # js\n  mset jjs = F + G\n\ngoal (1 subgoal):\n 1. j \\<in># F + G", "by (intro union_single_eq_member, auto)"], ["proof (state)\nthis:\n  j \\<in># F + G\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from j"], ["proof (chain)\npicking this:\n  j \\<in># F + G", "consider \"j \\<in># F\" | \"j \\<in># G\""], ["proof (prove)\nusing this:\n  j \\<in># F + G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<in># F \\<Longrightarrow> thesis;\n     j \\<in># G \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>j \\<in># F \\<Longrightarrow> ?thesis1;\n   j \\<in># G \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. \\<not> c dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>j \\<in># F \\<Longrightarrow> ?thesis1;\n   j \\<in># G \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>j \\<in># F \\<Longrightarrow> ?thesis1;\n   j \\<in># G \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. j \\<in># F \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "case 1"], ["proof (state)\nthis:\n  j \\<in># F\n\ngoal (2 subgoals):\n 1. j \\<in># F \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "with Fa"], ["proof (chain)\npicking this:\n  mset_factors F a\n  j \\<in># F", "have \"j dvd a\""], ["proof (prove)\nusing this:\n  mset_factors F a\n  j \\<in># F\n\ngoal (1 subgoal):\n 1. j dvd a", "by (auto intro: mset_factors_imp_dvd)"], ["proof (state)\nthis:\n  j dvd a\n\ngoal (2 subgoals):\n 1. j \\<in># F \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "with xj dvd_trans"], ["proof (chain)\npicking this:\n  x ddvd j\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n  j dvd a", "have \"x dvd a\""], ["proof (prove)\nusing this:\n  x ddvd j\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n  j dvd a\n\ngoal (1 subgoal):\n 1. x dvd a", "by auto"], ["proof (state)\nthis:\n  x dvd a\n\ngoal (2 subgoals):\n 1. j \\<in># F \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  x dvd a", "show ?thesis"], ["proof (prove)\nusing this:\n  x dvd a\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal (1 subgoal):\n 1. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "case 2"], ["proof (state)\nthis:\n  j \\<in># G\n\ngoal (1 subgoal):\n 1. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "with Gb"], ["proof (chain)\npicking this:\n  mset_factors G b\n  j \\<in># G", "have \"j dvd b\""], ["proof (prove)\nusing this:\n  mset_factors G b\n  j \\<in># G\n\ngoal (1 subgoal):\n 1. j dvd b", "by (auto intro: mset_factors_imp_dvd)"], ["proof (state)\nthis:\n  j dvd b\n\ngoal (1 subgoal):\n 1. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "with xj dvd_trans"], ["proof (chain)\npicking this:\n  x ddvd j\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n  j dvd b", "have \"x dvd b\""], ["proof (prove)\nusing this:\n  x ddvd j\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n  j dvd b\n\ngoal (1 subgoal):\n 1. x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd b\n\ngoal (1 subgoal):\n 1. j \\<in># G \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  x dvd b", "show ?thesis"], ["proof (prove)\nusing this:\n  x dvd b\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "case True"], ["proof (state)\nthis:\n  a dvd (1::'a) \\<or> b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  a dvd (1::'a) \\<or> b dvd (1::'a)", "consider \"a dvd 1\" | \"b dvd 1\""], ["proof (prove)\nusing this:\n  a dvd (1::'a) \\<or> b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> thesis;\n     b dvd (1::'a) \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> ?thesis1;\n   b dvd (1::'a) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. a dvd (1::'a) \\<or> b dvd (1::'a) \\<Longrightarrow>\n    x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> ?thesis1;\n   b dvd (1::'a) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>a dvd (1::'a) \\<Longrightarrow> ?thesis1;\n   b dvd (1::'a) \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "case 1"], ["proof (state)\nthis:\n  a dvd (1::'a)\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  a dvd (1::'a)", "obtain d where ad: \"a * d = 1\""], ["proof (prove)\nusing this:\n  a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>d. a * d = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  a * d = (1::'a)\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from abxc"], ["proof (chain)\npicking this:\n  a * b = x * c", "have \"x * (c * d) = a * b * d\""], ["proof (prove)\nusing this:\n  a * b = x * c\n\ngoal (1 subgoal):\n 1. x * (c * d) = a * b * d", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  x * (c * d) = a * b * d\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "also"], ["proof (state)\nthis:\n  x * (c * d) = a * b * d\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "have \"... = a * d * b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b * d = a * d * b", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  a * b * d = a * d * b\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "finally"], ["proof (chain)\npicking this:\n  x * (c * d) = a * d * b", "have \"x dvd b\""], ["proof (prove)\nusing this:\n  x * (c * d) = a * d * b\n\ngoal (1 subgoal):\n 1. x dvd b", "by (intro dvdI, auto simp: ad)"], ["proof (state)\nthis:\n  x dvd b\n\ngoal (2 subgoals):\n 1. a dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b\n 2. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  x dvd b", "show ?thesis"], ["proof (prove)\nusing this:\n  x dvd b\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "case 2"], ["proof (state)\nthis:\n  b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  b dvd (1::'a)", "obtain d where bd: \"b * d = 1\""], ["proof (prove)\nusing this:\n  b dvd (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>d. b * d = (1::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  b * d = (1::'a)\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "from abxc"], ["proof (chain)\npicking this:\n  a * b = x * c", "have \"x * (c * d) = a * b * d\""], ["proof (prove)\nusing this:\n  a * b = x * c\n\ngoal (1 subgoal):\n 1. x * (c * d) = a * b * d", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  x * (c * d) = a * b * d\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "also"], ["proof (state)\nthis:\n  x * (c * d) = a * b * d\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "have \"... = (b * d) * a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b * d = b * d * a", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  a * b * d = b * d * a\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "finally"], ["proof (chain)\npicking this:\n  x * (c * d) = b * d * a", "have \"x dvd a\""], ["proof (prove)\nusing this:\n  x * (c * d) = b * d * a\n\ngoal (1 subgoal):\n 1. x dvd a", "by (intro dvdI, auto simp:bd)"], ["proof (state)\nthis:\n  x dvd a\n\ngoal (1 subgoal):\n 1. b dvd (1::'a) \\<Longrightarrow> x dvd a \\<or> x dvd b", "then"], ["proof (chain)\npicking this:\n  x dvd a", "show ?thesis"], ["proof (prove)\nusing this:\n  x dvd a\n\ngoal (1 subgoal):\n 1. x dvd a \\<or> x dvd b", "by auto"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x dvd a \\<or> x dvd b\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Results for GCDs etc.\\<close>"], ["", "lemma prod_list_remove1: \"(x :: 'b :: comm_monoid_mult) \\<in> set xs \\<Longrightarrow> prod_list (remove1 x xs) * x = prod_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow>\n    prod_list (remove1 x xs) * x = prod_list xs", "by (induct xs, auto simp: ac_simps)"], ["", "(* Isabelle 2015-style and generalized gcd-class without normalization and factors *)"], ["", "class comm_monoid_gcd = gcd + comm_semiring_1 +\n  assumes gcd_dvd1[iff]: \"gcd a b dvd a\"\n      and gcd_dvd2[iff]: \"gcd a b dvd b\"\n      and gcd_greatest: \"c dvd a \\<Longrightarrow> c dvd b \\<Longrightarrow> c dvd gcd a b\"\nbegin"], ["", "lemma gcd_0_0[simp]: \"gcd 0 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (0::'a) (0::'a) = (0::'a)", "using gcd_greatest[OF dvd_0_right dvd_0_right, of 0]"], ["proof (prove)\nusing this:\n  (0::'a) dvd gcd (0::'a) (0::'a)\n\ngoal (1 subgoal):\n 1. gcd (0::'a) (0::'a) = (0::'a)", "by auto"], ["", "lemma gcd_zero_iff[simp]: \"gcd a b = 0 \\<longleftrightarrow> a = 0 \\<and> b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gcd a b = (0::'a)) = (a = (0::'a) \\<and> b = (0::'a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. gcd a b = (0::'a) \\<Longrightarrow> a = (0::'a) \\<and> b = (0::'a)\n 2. a = (0::'a) \\<and> b = (0::'a) \\<Longrightarrow> gcd a b = (0::'a)", "assume \"gcd a b = 0\""], ["proof (state)\nthis:\n  gcd a b = (0::'a)\n\ngoal (2 subgoals):\n 1. gcd a b = (0::'a) \\<Longrightarrow> a = (0::'a) \\<and> b = (0::'a)\n 2. a = (0::'a) \\<and> b = (0::'a) \\<Longrightarrow> gcd a b = (0::'a)", "from gcd_dvd1[of a b, unfolded this] gcd_dvd2[of a b, unfolded this]"], ["proof (chain)\npicking this:\n  (0::'a) dvd a\n  (0::'a) dvd b", "show \"a = 0 \\<and> b = 0\""], ["proof (prove)\nusing this:\n  (0::'a) dvd a\n  (0::'a) dvd b\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<and> b = (0::'a)", "by auto"], ["proof (state)\nthis:\n  a = (0::'a) \\<and> b = (0::'a)\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<and> b = (0::'a) \\<Longrightarrow> gcd a b = (0::'a)", "qed auto"], ["", "lemma gcd_zero_iff'[simp]: \"0 = gcd a b \\<longleftrightarrow> a = 0 \\<and> b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0::'a) = gcd a b) = (a = (0::'a) \\<and> b = (0::'a))", "using gcd_zero_iff"], ["proof (prove)\nusing this:\n  (gcd ?a ?b = (0::'a)) = (?a = (0::'a) \\<and> ?b = (0::'a))\n\ngoal (1 subgoal):\n 1. ((0::'a) = gcd a b) = (a = (0::'a) \\<and> b = (0::'a))", "by metis"], ["", "lemma dvd_gcd_0_iff[simp]:\n    shows \"x dvd gcd 0 a \\<longleftrightarrow> x dvd a\" (is ?g1)\n      and \"x dvd gcd a 0 \\<longleftrightarrow> x dvd a\" (is ?g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x dvd gcd (0::'a) a) = (x dvd a) &&& (x dvd gcd a (0::'a)) = (x dvd a)", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. (x dvd gcd (0::'a) a) = (x dvd a)\n 2. (x dvd gcd a (0::'a)) = (x dvd a)", "have \"a dvd gcd a 0\" \"a dvd gcd 0 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd gcd a (0::'a) &&& a dvd gcd (0::'a) a", "by (auto intro: gcd_greatest)"], ["proof (state)\nthis:\n  a dvd gcd a (0::'a)\n  a dvd gcd (0::'a) a\n\ngoal (2 subgoals):\n 1. (x dvd gcd (0::'a) a) = (x dvd a)\n 2. (x dvd gcd a (0::'a)) = (x dvd a)", "with dvd_refl"], ["proof (chain)\npicking this:\n  ?a dvd ?a\n  a dvd gcd a (0::'a)\n  a dvd gcd (0::'a) a", "show ?g1 ?g2"], ["proof (prove)\nusing this:\n  ?a dvd ?a\n  a dvd gcd a (0::'a)\n  a dvd gcd (0::'a) a\n\ngoal (1 subgoal):\n 1. (x dvd gcd (0::'a) a) = (x dvd a) &&& (x dvd gcd a (0::'a)) = (x dvd a)", "by (auto dest: dvd_trans)"], ["proof (state)\nthis:\n  (x dvd gcd (0::'a) a) = (x dvd a)\n  (x dvd gcd a (0::'a)) = (x dvd a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gcd_dvd_1[simp]: \"gcd a b dvd 1 \\<longleftrightarrow> coprime a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gcd a b dvd (1::'a)) = coprime a b", "using dvd_trans[OF gcd_greatest[of _ a b], of _ 1]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a dvd a; ?a dvd b; gcd a b dvd (1::'a)\\<rbrakk>\n  \\<Longrightarrow> ?a dvd (1::'a)\n\ngoal (1 subgoal):\n 1. (gcd a b dvd (1::'a)) = coprime a b", "by (cases \"a = 0 \\<and> b = 0\") (auto intro!: coprimeI elim: coprimeE)"], ["", "lemma dvd_imp_gcd_dvd_gcd: \"b dvd c \\<Longrightarrow> gcd a b dvd gcd a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b dvd c \\<Longrightarrow> gcd a b dvd gcd a c", "by (meson gcd_dvd1 gcd_dvd2 gcd_greatest dvd_trans)"], ["", "definition listgcd :: \"'a list \\<Rightarrow> 'a\" where\n    \"listgcd xs = foldr gcd xs 0\""], ["", "lemma listgcd_simps[simp]: \"listgcd [] = 0\" \"listgcd (x # xs) = gcd x (listgcd xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listgcd [] = (0::'a) &&& listgcd (x # xs) = gcd x (listgcd xs)", "by (auto simp: listgcd_def)"], ["", "lemma listgcd: \"x \\<in> set xs \\<Longrightarrow> listgcd xs dvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> listgcd xs dvd x", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set [] \\<Longrightarrow> listgcd [] dvd x\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow> listgcd xs dvd x;\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> listgcd (a # xs) dvd x", "case (Cons y ys)"], ["proof (state)\nthis:\n  x \\<in> set ys \\<Longrightarrow> listgcd ys dvd x\n  x \\<in> set (y # ys)\n\ngoal (2 subgoals):\n 1. x \\<in> set [] \\<Longrightarrow> listgcd [] dvd x\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow> listgcd xs dvd x;\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> listgcd (a # xs) dvd x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. listgcd (y # ys) dvd x", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> listgcd (y # ys) dvd x\n 2. x \\<noteq> y \\<Longrightarrow> listgcd (y # ys) dvd x", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> listgcd (y # ys) dvd x\n 2. x \\<noteq> y \\<Longrightarrow> listgcd (y # ys) dvd x", "with Cons"], ["proof (chain)\npicking this:\n  x \\<in> set ys \\<Longrightarrow> listgcd ys dvd x\n  x \\<in> set (y # ys)\n  x \\<noteq> y", "have dvd: \"listgcd ys dvd x\""], ["proof (prove)\nusing this:\n  x \\<in> set ys \\<Longrightarrow> listgcd ys dvd x\n  x \\<in> set (y # ys)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. listgcd ys dvd x", "by auto"], ["proof (state)\nthis:\n  listgcd ys dvd x\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> listgcd (y # ys) dvd x\n 2. x \\<noteq> y \\<Longrightarrow> listgcd (y # ys) dvd x", "thus ?thesis"], ["proof (prove)\nusing this:\n  listgcd ys dvd x\n\ngoal (1 subgoal):\n 1. listgcd (y # ys) dvd x", "unfolding listgcd_simps"], ["proof (prove)\nusing this:\n  listgcd ys dvd x\n\ngoal (1 subgoal):\n 1. gcd y (listgcd ys) dvd x", "using dvd_trans"], ["proof (prove)\nusing this:\n  listgcd ys dvd x\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. gcd y (listgcd ys) dvd x", "by blast"], ["proof (state)\nthis:\n  listgcd (y # ys) dvd x\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> listgcd (y # ys) dvd x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> listgcd (y # ys) dvd x", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> listgcd (y # ys) dvd x", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. listgcd (y # ys) dvd x", "unfolding listgcd_simps"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. gcd y (listgcd ys) dvd x", "using dvd_trans"], ["proof (prove)\nusing this:\n  x = y\n  \\<lbrakk>?a dvd ?b; ?b dvd ?c\\<rbrakk> \\<Longrightarrow> ?a dvd ?c\n\ngoal (1 subgoal):\n 1. gcd y (listgcd ys) dvd x", "by blast"], ["proof (state)\nthis:\n  listgcd (y # ys) dvd x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  listgcd (y # ys) dvd x\n\ngoal (1 subgoal):\n 1. x \\<in> set [] \\<Longrightarrow> listgcd [] dvd x", "qed simp"], ["", "lemma listgcd_greatest: \"(\\<And> x. x \\<in> set xs \\<Longrightarrow> y dvd x) \\<Longrightarrow> y dvd listgcd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> set xs \\<Longrightarrow> y dvd x) \\<Longrightarrow>\n    y dvd listgcd xs", "by (induct xs arbitrary:y, auto intro: gcd_greatest)"], ["", "end"], ["", "context Rings.dvd begin"], ["", "definition \"is_gcd x a b \\<equiv> x dvd a \\<and> x dvd b \\<and> (\\<forall>y. y dvd a \\<longrightarrow> y dvd b \\<longrightarrow> y dvd x)\""], ["", "definition \"some_gcd a b \\<equiv> SOME x. is_gcd x a b\""], ["", "lemma is_gcdI[intro!]:\n    assumes \"x dvd a\" \"x dvd b\" \"\\<And>y. y dvd a \\<Longrightarrow> y dvd b \\<Longrightarrow> y dvd x\"\n    shows \"is_gcd x a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd x a b", "by (insert assms, auto simp: is_gcd_def)"], ["", "lemma is_gcdE[elim!]:\n    assumes \"is_gcd x a b\"\n        and \"x dvd a \\<Longrightarrow> x dvd b \\<Longrightarrow> (\\<And>y. y dvd a \\<Longrightarrow> y dvd b \\<Longrightarrow> y dvd x) \\<Longrightarrow> thesis\"\n    shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (insert assms, auto simp: is_gcd_def)"], ["", "lemma is_gcd_some_gcdI:\n    assumes \"\\<exists>x. is_gcd x a b\" shows \"is_gcd (some_gcd a b) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "by (unfold some_gcd_def, rule someI_ex[OF assms])"], ["", "end"], ["", "context comm_semiring_1 begin"], ["", "lemma some_gcd_0[intro!]: \"is_gcd (some_gcd a 0) a 0\" \"is_gcd (some_gcd 0 b) 0 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a (0::'a)) a (0::'a) &&&\n    is_gcd (some_gcd (0::'a) b) (0::'a) b", "by (auto intro!: is_gcd_some_gcdI intro: exI[of _ a] exI[of _ b])"], ["", "lemma some_gcd_0_dvd[intro!]:\n    \"some_gcd a 0 dvd a\" \"some_gcd 0 b dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_gcd a (0::'a) dvd a &&& some_gcd (0::'a) b dvd b", "using some_gcd_0"], ["proof (prove)\nusing this:\n  is_gcd (some_gcd ?a (0::'a)) ?a (0::'a)\n  is_gcd (some_gcd (0::'a) ?b) (0::'a) ?b\n\ngoal (1 subgoal):\n 1. some_gcd a (0::'a) dvd a &&& some_gcd (0::'a) b dvd b", "by auto"], ["", "lemma dvd_some_gcd_0[intro!]:\n    \"a dvd some_gcd a 0\" \"b dvd some_gcd 0 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a dvd some_gcd a (0::'a) &&& b dvd some_gcd (0::'a) b", "using some_gcd_0[of a] some_gcd_0[of b]"], ["proof (prove)\nusing this:\n  is_gcd (some_gcd a (0::'a)) a (0::'a)\n  is_gcd (some_gcd (0::'a) a) (0::'a) a\n  is_gcd (some_gcd b (0::'a)) b (0::'a)\n  is_gcd (some_gcd (0::'a) b) (0::'a) b\n\ngoal (1 subgoal):\n 1. a dvd some_gcd a (0::'a) &&& b dvd some_gcd (0::'a) b", "by auto"], ["", "end"], ["", "context idom begin"], ["", "lemma is_gcd_connect:\n    assumes \"a \\<noteq> 0\" \"b \\<noteq> 0\" shows \"isgcd mk_monoid x a b \\<longleftrightarrow> is_gcd x a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x gcdof\\<^bsub>mk_monoid\\<^esub> a b = is_gcd x a b", "using assms"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x gcdof\\<^bsub>mk_monoid\\<^esub> a b = is_gcd x a b", "by (force simp: isgcd_def)"], ["", "lemma some_gcd_connect:\n    assumes \"a \\<noteq> 0\" and \"b \\<noteq> 0\" shows \"somegcd mk_monoid a b = some_gcd a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. somegcd mk_monoid a b = some_gcd a b", "using assms"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. somegcd mk_monoid a b = some_gcd a b", "by (auto intro!: arg_cong[of _ _ Eps] simp: is_gcd_connect some_gcd_def somegcd_def)"], ["", "end"], ["", "context comm_monoid_gcd\nbegin"], ["", "lemma is_gcd_gcd: \"is_gcd (gcd a b) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd (gcd a b) a b", "using gcd_greatest"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c dvd ?a; ?c dvd ?b\\<rbrakk> \\<Longrightarrow> ?c dvd gcd ?a ?b\n\ngoal (1 subgoal):\n 1. is_gcd (gcd a b) a b", "by auto"], ["", "lemma is_gcd_some_gcd: \"is_gcd (some_gcd a b) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "by (insert is_gcd_gcd, auto intro!: is_gcd_some_gcdI)"], ["", "lemma gcd_dvd_some_gcd: \"gcd a b dvd some_gcd a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd a b dvd some_gcd a b", "using is_gcd_some_gcd"], ["proof (prove)\nusing this:\n  is_gcd (some_gcd ?a ?b) ?a ?b\n\ngoal (1 subgoal):\n 1. gcd a b dvd some_gcd a b", "by auto"], ["", "lemma some_gcd_dvd_gcd: \"some_gcd a b dvd gcd a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_gcd a b dvd gcd a b", "using is_gcd_some_gcd"], ["proof (prove)\nusing this:\n  is_gcd (some_gcd ?a ?b) ?a ?b\n\ngoal (1 subgoal):\n 1. some_gcd a b dvd gcd a b", "by (auto intro: gcd_greatest)"], ["", "lemma some_gcd_ddvd_gcd: \"some_gcd a b ddvd gcd a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_gcd a b ddvd gcd a b", "by (auto intro: gcd_dvd_some_gcd some_gcd_dvd_gcd)"], ["", "lemma some_gcd_dvd: \"some_gcd a b dvd d \\<longleftrightarrow> gcd a b dvd d\" \"d dvd some_gcd a b \\<longleftrightarrow> d dvd gcd a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (some_gcd a b dvd d) = (gcd a b dvd d) &&&\n    (d dvd some_gcd a b) = (d dvd gcd a b)", "using some_gcd_ddvd_gcd[of a b]"], ["proof (prove)\nusing this:\n  some_gcd a b ddvd gcd a b\n\ngoal (1 subgoal):\n 1. (some_gcd a b dvd d) = (gcd a b dvd d) &&&\n    (d dvd some_gcd a b) = (d dvd gcd a b)", "by (auto dest:dvd_trans)"], ["", "end"], ["", "class idom_gcd = comm_monoid_gcd + idom\nbegin"], ["", "interpretation raw: comm_monoid_cancel \"mk_monoid :: 'a monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_cancel mk_monoid", "by (unfold_locales, auto intro: mult_commute mult_assoc)"], ["", "interpretation raw: gcd_condition_monoid \"mk_monoid :: 'a monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_condition_monoid mk_monoid", "by (unfold_locales, auto simp: is_gcd_connect intro!: exI[of _ \"gcd _ _\"] dest: gcd_greatest)"], ["", "lemma gcd_mult_ddvd:\n    \"d * gcd a b ddvd gcd (d * a) (d * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d * gcd a b ddvd gcd (d * a) (d * b)", "proof (cases \"d = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = (0::'a) \\<Longrightarrow> d * gcd a b ddvd gcd (d * a) (d * b)\n 2. d \\<noteq> (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "case True"], ["proof (state)\nthis:\n  d = (0::'a)\n\ngoal (2 subgoals):\n 1. d = (0::'a) \\<Longrightarrow> d * gcd a b ddvd gcd (d * a) (d * b)\n 2. d \\<noteq> (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "then"], ["proof (chain)\npicking this:\n  d = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  d = (0::'a)\n\ngoal (1 subgoal):\n 1. d * gcd a b ddvd gcd (d * a) (d * b)", "by auto"], ["proof (state)\nthis:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal (1 subgoal):\n 1. d \\<noteq> (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "case d0: False"], ["proof (state)\nthis:\n  d \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. d \\<noteq> (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. d * gcd a b ddvd gcd (d * a) (d * b)", "proof (cases \"a = 0 \\<or> b = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "case False"], ["proof (state)\nthis:\n  \\<not> (a = (0::'a) \\<or> b = (0::'a))\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "note some_gcd_ddvd_gcd[of a b]"], ["proof (state)\nthis:\n  some_gcd a b ddvd gcd a b\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "with d0"], ["proof (chain)\npicking this:\n  d \\<noteq> (0::'a)\n  some_gcd a b ddvd gcd a b", "have \"d * gcd a b ddvd d * some_gcd a b\""], ["proof (prove)\nusing this:\n  d \\<noteq> (0::'a)\n  some_gcd a b ddvd gcd a b\n\ngoal (1 subgoal):\n 1. d * gcd a b ddvd d * some_gcd a b", "by auto"], ["proof (state)\nthis:\n  d * gcd a b ddvd d * some_gcd a b\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "also"], ["proof (state)\nthis:\n  d * gcd a b ddvd d * some_gcd a b\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "have \"d * some_gcd a b ddvd some_gcd (d * a) (d * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d * some_gcd a b ddvd some_gcd (d * a) (d * b)", "using False d0 raw.gcd_mult"], ["proof (prove)\nusing this:\n  \\<not> (a = (0::'a) \\<or> b = (0::'a))\n  d \\<noteq> (0::'a)\n  \\<lbrakk>?a \\<in> carrier mk_monoid; ?b \\<in> carrier mk_monoid;\n   ?c \\<in> carrier mk_monoid\\<rbrakk>\n  \\<Longrightarrow> ?c \\<otimes>\\<^bsub>mk_monoid\\<^esub>\n                    somegcd mk_monoid ?a ?b \\<sim>\\<^bsub>mk_monoid\\<^esub>\n                    somegcd mk_monoid\n                     (?c \\<otimes>\\<^bsub>mk_monoid\\<^esub> ?a)\n                     (?c \\<otimes>\\<^bsub>mk_monoid\\<^esub> ?b)\n\ngoal (1 subgoal):\n 1. d * some_gcd a b ddvd some_gcd (d * a) (d * b)", "by (simp add: some_gcd_connect)"], ["proof (state)\nthis:\n  d * some_gcd a b ddvd some_gcd (d * a) (d * b)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "also"], ["proof (state)\nthis:\n  d * some_gcd a b ddvd some_gcd (d * a) (d * b)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "note some_gcd_ddvd_gcd"], ["proof (state)\nthis:\n  some_gcd ?a ?b ddvd gcd ?a ?b\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "finally"], ["proof (chain)\npicking this:\n  d * gcd a b ddvd gcd (d * a) (d * b)", "show ?thesis"], ["proof (prove)\nusing this:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal (1 subgoal):\n 1. d * gcd a b ddvd gcd (d * a) (d * b)", "."], ["proof (state)\nthis:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "case True"], ["proof (state)\nthis:\n  a = (0::'a) \\<or> b = (0::'a)\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    d * gcd a b ddvd gcd (d * a) (d * b)", "with d0"], ["proof (chain)\npicking this:\n  d \\<noteq> (0::'a)\n  a = (0::'a) \\<or> b = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  d \\<noteq> (0::'a)\n  a = (0::'a) \\<or> b = (0::'a)\n\ngoal (1 subgoal):\n 1. d * gcd a b ddvd gcd (d * a) (d * b)", "apply (elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>d \\<noteq> (0::'a); a = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> d * gcd a b ddvd gcd (d * a) (d * b)\n 2. \\<lbrakk>d \\<noteq> (0::'a); b = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> d * gcd a b ddvd gcd (d * a) (d * b)", "apply (rule ddvd_trans[of _ \"d * b\"]; force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<noteq> (0::'a); b = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> d * gcd a b ddvd gcd (d * a) (d * b)", "apply (rule ddvd_trans[of _ \"d * a\"]; force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gcd_greatest_mult: assumes cad: \"c dvd a * d\" and cbd: \"c dvd b * d\"\n    shows \"c dvd gcd a b * d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c dvd gcd a b * d", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. c dvd gcd a b * d", "from gcd_greatest[OF assms]"], ["proof (chain)\npicking this:\n  c dvd gcd (a * d) (b * d)", "have c: \"c dvd gcd (d * a) (d * b)\""], ["proof (prove)\nusing this:\n  c dvd gcd (a * d) (b * d)\n\ngoal (1 subgoal):\n 1. c dvd gcd (d * a) (d * b)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  c dvd gcd (d * a) (d * b)\n\ngoal (1 subgoal):\n 1. c dvd gcd a b * d", "note gcd_mult_ddvd[of d a b]"], ["proof (state)\nthis:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal (1 subgoal):\n 1. c dvd gcd a b * d", "then"], ["proof (chain)\npicking this:\n  d * gcd a b ddvd gcd (d * a) (d * b)", "have \"gcd (d * a) (d * b) dvd gcd a b * d\""], ["proof (prove)\nusing this:\n  d * gcd a b ddvd gcd (d * a) (d * b)\n\ngoal (1 subgoal):\n 1. gcd (d * a) (d * b) dvd gcd a b * d", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  gcd (d * a) (d * b) dvd gcd a b * d\n\ngoal (1 subgoal):\n 1. c dvd gcd a b * d", "from dvd_trans[OF c this]"], ["proof (chain)\npicking this:\n  c dvd gcd a b * d", "show ?thesis"], ["proof (prove)\nusing this:\n  c dvd gcd a b * d\n\ngoal (1 subgoal):\n 1. c dvd gcd a b * d", "."], ["proof (state)\nthis:\n  c dvd gcd a b * d\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma listgcd_greatest_mult: \"(\\<And> x :: 'a. x \\<in> set xs \\<Longrightarrow> y dvd x * z) \\<Longrightarrow> y dvd listgcd xs * z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set xs \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n    y dvd listgcd xs * z", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>x.\n        x \\<in> set [] \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n    y dvd listgcd [] * z\n 2. \\<And>a xs.\n       \\<lbrakk>(\\<And>x.\n                    x \\<in> set xs \\<Longrightarrow>\n                    y dvd x * z) \\<Longrightarrow>\n                y dvd listgcd xs * z;\n        \\<And>x. x \\<in> set (a # xs) \\<Longrightarrow> y dvd x * z\\<rbrakk>\n       \\<Longrightarrow> y dvd listgcd (a # xs) * z", "case (Cons x xs)"], ["proof (state)\nthis:\n  (\\<And>x. x \\<in> set xs \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n  y dvd listgcd xs * z\n  ?x1 \\<in> set (x # xs) \\<Longrightarrow> y dvd ?x1 * z\n\ngoal (2 subgoals):\n 1. (\\<And>x.\n        x \\<in> set [] \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n    y dvd listgcd [] * z\n 2. \\<And>a xs.\n       \\<lbrakk>(\\<And>x.\n                    x \\<in> set xs \\<Longrightarrow>\n                    y dvd x * z) \\<Longrightarrow>\n                y dvd listgcd xs * z;\n        \\<And>x. x \\<in> set (a # xs) \\<Longrightarrow> y dvd x * z\\<rbrakk>\n       \\<Longrightarrow> y dvd listgcd (a # xs) * z", "from Cons"], ["proof (chain)\npicking this:\n  (\\<And>x. x \\<in> set xs \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n  y dvd listgcd xs * z\n  ?x1 \\<in> set (x # xs) \\<Longrightarrow> y dvd ?x1 * z", "have \"y dvd x * z\" \"y dvd listgcd xs * z\""], ["proof (prove)\nusing this:\n  (\\<And>x. x \\<in> set xs \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n  y dvd listgcd xs * z\n  ?x1 \\<in> set (x # xs) \\<Longrightarrow> y dvd ?x1 * z\n\ngoal (1 subgoal):\n 1. y dvd x * z &&& y dvd listgcd xs * z", "by auto"], ["proof (state)\nthis:\n  y dvd x * z\n  y dvd listgcd xs * z\n\ngoal (2 subgoals):\n 1. (\\<And>x.\n        x \\<in> set [] \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n    y dvd listgcd [] * z\n 2. \\<And>a xs.\n       \\<lbrakk>(\\<And>x.\n                    x \\<in> set xs \\<Longrightarrow>\n                    y dvd x * z) \\<Longrightarrow>\n                y dvd listgcd xs * z;\n        \\<And>x. x \\<in> set (a # xs) \\<Longrightarrow> y dvd x * z\\<rbrakk>\n       \\<Longrightarrow> y dvd listgcd (a # xs) * z", "thus ?case"], ["proof (prove)\nusing this:\n  y dvd x * z\n  y dvd listgcd xs * z\n\ngoal (1 subgoal):\n 1. y dvd listgcd (x # xs) * z", "unfolding listgcd_simps"], ["proof (prove)\nusing this:\n  y dvd x * z\n  y dvd listgcd xs * z\n\ngoal (1 subgoal):\n 1. y dvd gcd x (listgcd xs) * z", "by (rule gcd_greatest_mult)"], ["proof (state)\nthis:\n  y dvd listgcd (x # xs) * z\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set [] \\<Longrightarrow> y dvd x * z) \\<Longrightarrow>\n    y dvd listgcd [] * z", "qed (simp)"], ["", "lemma dvd_factor_mult_gcd:\n    assumes dvd: \"k dvd p * q\" \"k dvd p * r\"\n      and q0: \"q \\<noteq> 0\" and r0: \"r \\<noteq> 0\"\n    shows \"k dvd p * gcd q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k dvd p * gcd q r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. k dvd p * gcd q r", "from dvd gcd_greatest[of k \"p * q\" \"p * r\"]"], ["proof (chain)\npicking this:\n  k dvd p * q\n  k dvd p * r\n  \\<lbrakk>k dvd p * q; k dvd p * r\\<rbrakk>\n  \\<Longrightarrow> k dvd gcd (p * q) (p * r)", "have \"k dvd gcd (p * q) (p * r)\""], ["proof (prove)\nusing this:\n  k dvd p * q\n  k dvd p * r\n  \\<lbrakk>k dvd p * q; k dvd p * r\\<rbrakk>\n  \\<Longrightarrow> k dvd gcd (p * q) (p * r)\n\ngoal (1 subgoal):\n 1. k dvd gcd (p * q) (p * r)", "by simp"], ["proof (state)\nthis:\n  k dvd gcd (p * q) (p * r)\n\ngoal (1 subgoal):\n 1. k dvd p * gcd q r", "also"], ["proof (state)\nthis:\n  k dvd gcd (p * q) (p * r)\n\ngoal (1 subgoal):\n 1. k dvd p * gcd q r", "from gcd_mult_ddvd[of p q r]"], ["proof (chain)\npicking this:\n  p * gcd q r ddvd gcd (p * q) (p * r)", "have \"... dvd (p * gcd q r)\""], ["proof (prove)\nusing this:\n  p * gcd q r ddvd gcd (p * q) (p * r)\n\ngoal (1 subgoal):\n 1. gcd (p * q) (p * r) dvd p * gcd q r", "by auto"], ["proof (state)\nthis:\n  gcd (p * q) (p * r) dvd p * gcd q r\n\ngoal (1 subgoal):\n 1. k dvd p * gcd q r", "finally"], ["proof (chain)\npicking this:\n  k dvd p * gcd q r", "show ?thesis"], ["proof (prove)\nusing this:\n  k dvd p * gcd q r\n\ngoal (1 subgoal):\n 1. k dvd p * gcd q r", "."], ["proof (state)\nthis:\n  k dvd p * gcd q r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coprime_mult_cross_dvd:\n    assumes coprime: \"coprime p q\" and eq: \"p' * p = q' * q\"\n    shows \"p dvd q'\" (is ?g1) and \"q dvd p'\" (is ?g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd q' &&& q dvd p'", "proof (atomize(full), cases \"p = 0 \\<or> q = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = (0::'a) \\<or> q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'\n 2. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "case True"], ["proof (state)\nthis:\n  p = (0::'a) \\<or> q = (0::'a)\n\ngoal (2 subgoals):\n 1. p = (0::'a) \\<or> q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'\n 2. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "then"], ["proof (chain)\npicking this:\n  p = (0::'a) \\<or> q = (0::'a)", "show \"?g1 \\<and> ?g2\""], ["proof (prove)\nusing this:\n  p = (0::'a) \\<or> q = (0::'a)\n\ngoal (1 subgoal):\n 1. p dvd q' \\<and> q dvd p'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'\n 2. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "assume p0: \"p = 0\""], ["proof (state)\nthis:\n  p = (0::'a)\n\ngoal (2 subgoals):\n 1. p = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'\n 2. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "with coprime"], ["proof (chain)\npicking this:\n  coprime p q\n  p = (0::'a)", "have \"q dvd 1\""], ["proof (prove)\nusing this:\n  coprime p q\n  p = (0::'a)\n\ngoal (1 subgoal):\n 1. q dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  q dvd (1::'a)\n\ngoal (2 subgoals):\n 1. p = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'\n 2. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "with eq p0"], ["proof (chain)\npicking this:\n  p' * p = q' * q\n  p = (0::'a)\n  q dvd (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  p' * p = q' * q\n  p = (0::'a)\n  q dvd (1::'a)\n\ngoal (1 subgoal):\n 1. p dvd q' \\<and> q dvd p'", "by auto"], ["proof (state)\nthis:\n  p dvd q' \\<and> q dvd p'\n\ngoal (1 subgoal):\n 1. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "assume q0: \"q = 0\""], ["proof (state)\nthis:\n  q = (0::'a)\n\ngoal (1 subgoal):\n 1. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "with coprime"], ["proof (chain)\npicking this:\n  coprime p q\n  q = (0::'a)", "have \"p dvd 1\""], ["proof (prove)\nusing this:\n  coprime p q\n  q = (0::'a)\n\ngoal (1 subgoal):\n 1. p dvd (1::'a)", "by auto"], ["proof (state)\nthis:\n  p dvd (1::'a)\n\ngoal (1 subgoal):\n 1. q = (0::'a) \\<Longrightarrow> p dvd q' \\<and> q dvd p'", "with eq q0"], ["proof (chain)\npicking this:\n  p' * p = q' * q\n  q = (0::'a)\n  p dvd (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  p' * p = q' * q\n  q = (0::'a)\n  p dvd (1::'a)\n\ngoal (1 subgoal):\n 1. p dvd q' \\<and> q dvd p'", "by auto"], ["proof (state)\nthis:\n  p dvd q' \\<and> q dvd p'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p dvd q' \\<and> q dvd p'\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "case False"], ["proof (state)\nthis:\n  \\<not> (p = (0::'a) \\<or> q = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "{"], ["proof (state)\nthis:\n  \\<not> (p = (0::'a) \\<or> q = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "fix p q r p' q' :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "assume cop: \"coprime p q\" and eq: \"p' * p = q' * q\" and p: \"p \\<noteq> 0\" and q: \"q \\<noteq> 0\"\n         and r: \"r dvd p\" \"r dvd q\""], ["proof (state)\nthis:\n  coprime p q\n  p' * p = q' * q\n  p \\<noteq> (0::'a)\n  q \\<noteq> (0::'a)\n  r dvd p\n  r dvd q\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "let ?gcd = \"gcd q p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from eq"], ["proof (chain)\npicking this:\n  p' * p = q' * q", "have \"p' * p dvd q' * q\""], ["proof (prove)\nusing this:\n  p' * p = q' * q\n\ngoal (1 subgoal):\n 1. p' * p dvd q' * q", "by auto"], ["proof (state)\nthis:\n  p' * p dvd q' * q\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "hence d1: \"p dvd q' * q\""], ["proof (prove)\nusing this:\n  p' * p dvd q' * q\n\ngoal (1 subgoal):\n 1. p dvd q' * q", "by (rule dvd_mult_right)"], ["proof (state)\nthis:\n  p dvd q' * q\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "have d2: \"p dvd q' * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd q' * p", "by auto"], ["proof (state)\nthis:\n  p dvd q' * p\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from dvd_factor_mult_gcd[OF d1 d2 q p]"], ["proof (chain)\npicking this:\n  p dvd q' * gcd q p", "have 1: \"p dvd q' * ?gcd\""], ["proof (prove)\nusing this:\n  p dvd q' * gcd q p\n\ngoal (1 subgoal):\n 1. p dvd q' * gcd q p", "."], ["proof (state)\nthis:\n  p dvd q' * gcd q p\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from q p"], ["proof (chain)\npicking this:\n  q \\<noteq> (0::'a)\n  p \\<noteq> (0::'a)", "have 2: \"?gcd dvd q\""], ["proof (prove)\nusing this:\n  q \\<noteq> (0::'a)\n  p \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. gcd q p dvd q", "by auto"], ["proof (state)\nthis:\n  gcd q p dvd q\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from q p"], ["proof (chain)\npicking this:\n  q \\<noteq> (0::'a)\n  p \\<noteq> (0::'a)", "have 3: \"?gcd dvd p\""], ["proof (prove)\nusing this:\n  q \\<noteq> (0::'a)\n  p \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. gcd q p dvd p", "by auto"], ["proof (state)\nthis:\n  gcd q p dvd p\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from cop[unfolded coprime_def', rule_format, OF 3 2]"], ["proof (chain)\npicking this:\n  gcd q p dvd (1::'a)", "have \"?gcd dvd 1\""], ["proof (prove)\nusing this:\n  gcd q p dvd (1::'a)\n\ngoal (1 subgoal):\n 1. gcd q p dvd (1::'a)", "."], ["proof (state)\nthis:\n  gcd q p dvd (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from 1 dvd_mult_unit_iff[OF this]"], ["proof (chain)\npicking this:\n  p dvd q' * gcd q p\n  (?a dvd ?c * gcd q p) = (?a dvd ?c)", "have \"p dvd q'\""], ["proof (prove)\nusing this:\n  p dvd q' * gcd q p\n  (?a dvd ?c * gcd q p) = (?a dvd ?c)\n\ngoal (1 subgoal):\n 1. p dvd q'", "by auto"], ["proof (state)\nthis:\n  p dvd q'\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>coprime ?pa3 ?qa3; ?p'a3 * ?pa3 = ?q'a3 * ?qa3;\n   ?pa3 \\<noteq> (0::'a); ?qa3 \\<noteq> (0::'a); ?r3 dvd ?pa3;\n   ?r3 dvd ?qa3\\<rbrakk>\n  \\<Longrightarrow> ?pa3 dvd ?q'a3\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "note main = this"], ["proof (state)\nthis:\n  \\<lbrakk>coprime ?pa3 ?qa3; ?p'a3 * ?pa3 = ?q'a3 * ?qa3;\n   ?pa3 \\<noteq> (0::'a); ?qa3 \\<noteq> (0::'a); ?r3 dvd ?pa3;\n   ?r3 dvd ?qa3\\<rbrakk>\n  \\<Longrightarrow> ?pa3 dvd ?q'a3\n\ngoal (1 subgoal):\n 1. \\<not> (p = (0::'a) \\<or> q = (0::'a)) \\<Longrightarrow>\n    p dvd q' \\<and> q dvd p'", "from main[OF coprime eq,of 1] False coprime coprime_commute main[OF _ eq[symmetric], of 1]"], ["proof (chain)\npicking this:\n  \\<lbrakk>p \\<noteq> (0::'a); q \\<noteq> (0::'a); (1::'a) dvd p;\n   (1::'a) dvd q\\<rbrakk>\n  \\<Longrightarrow> p dvd q'\n  \\<not> (p = (0::'a) \\<or> q = (0::'a))\n  coprime p q\n  coprime ?p ?q = coprime ?q ?p\n  \\<lbrakk>coprime q p; q \\<noteq> (0::'a); p \\<noteq> (0::'a);\n   (1::'a) dvd q; (1::'a) dvd p\\<rbrakk>\n  \\<Longrightarrow> q dvd p'", "show \"?g1 \\<and> ?g2\""], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> (0::'a); q \\<noteq> (0::'a); (1::'a) dvd p;\n   (1::'a) dvd q\\<rbrakk>\n  \\<Longrightarrow> p dvd q'\n  \\<not> (p = (0::'a) \\<or> q = (0::'a))\n  coprime p q\n  coprime ?p ?q = coprime ?q ?p\n  \\<lbrakk>coprime q p; q \\<noteq> (0::'a); p \\<noteq> (0::'a);\n   (1::'a) dvd q; (1::'a) dvd p\\<rbrakk>\n  \\<Longrightarrow> q dvd p'\n\ngoal (1 subgoal):\n 1. p dvd q' \\<and> q dvd p'", "by auto"], ["proof (state)\nthis:\n  p dvd q' \\<and> q dvd p'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subclass (in ring_gcd) idom_gcd"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus gcd", "by (unfold_locales, auto)"], ["", "lemma coprime_rewrites: \"comm_monoid_mult.coprime ((*)) 1 = coprime\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_mult.coprime (*) (1::'a) = coprime", "apply (intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. comm_monoid_mult.coprime (*) (1::'a) x xa = coprime x xa", "apply (subst comm_monoid_mult.coprime_def')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa. class.comm_monoid_mult (*) (1::'a)\n 2. \\<And>x xa.\n       (\\<forall>r.\n           dvd.dvd (*) r x \\<longrightarrow>\n           dvd.dvd (*) r xa \\<longrightarrow> dvd.dvd (*) r (1::'a)) =\n       coprime x xa", "apply (unfold_locales)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (\\<forall>r.\n           dvd.dvd (*) r x \\<longrightarrow>\n           dvd.dvd (*) r xa \\<longrightarrow> dvd.dvd (*) r (1::'a)) =\n       coprime x xa", "apply (unfold dvd_rewrites)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (\\<forall>r.\n           r dvd x \\<longrightarrow>\n           r dvd xa \\<longrightarrow> r dvd (1::'a)) =\n       coprime x xa", "apply (fold coprime_def')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. coprime x xa = coprime x xa", ".."], ["", "(* TODO: incorporate into the default class hierarchy *)"], ["", "locale gcd_condition =\n  fixes ty :: \"'a :: idom itself\"\n  assumes gcd_exists: \"\\<And>a b :: 'a. \\<exists>x. is_gcd x a b\"\nbegin"], ["", "sublocale idom_gcd \"(*)\" \"1 :: 'a\" \"(+)\" 0 \"(-)\" uminus some_gcd \n    rewrites \"dvd.dvd ((*)) = (dvd)\"\n        and \"comm_monoid_mult.coprime ((*) ) 1 = Unique_Factorization.coprime\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus some_gcd &&&\n    dvd.dvd (*) = (dvd) &&& comm_monoid_mult.coprime (*) (1::?'c) = coprime", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus some_gcd\n 2. dvd.dvd (*) = (dvd)\n 3. comm_monoid_mult.coprime (*) (1::?'c) = coprime", "have \"is_gcd (some_gcd a b) a b\" for a b :: 'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "by (intro is_gcd_some_gcdI gcd_exists)"], ["proof (state)\nthis:\n  is_gcd (some_gcd ?a1 ?b1) ?a1 ?b1\n\ngoal (3 subgoals):\n 1. class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus some_gcd\n 2. dvd.dvd (*) = (dvd)\n 3. comm_monoid_mult.coprime (*) (1::?'c) = coprime", "from this[unfolded is_gcd_def]"], ["proof (chain)\npicking this:\n  some_gcd ?a1 ?b1 dvd ?a1 \\<and>\n  some_gcd ?a1 ?b1 dvd ?b1 \\<and>\n  (\\<forall>y.\n      y dvd ?a1 \\<longrightarrow>\n      y dvd ?b1 \\<longrightarrow> y dvd some_gcd ?a1 ?b1)", "show \"class.idom_gcd (*) (1 :: 'a) (+) 0 (-) uminus some_gcd\""], ["proof (prove)\nusing this:\n  some_gcd ?a1 ?b1 dvd ?a1 \\<and>\n  some_gcd ?a1 ?b1 dvd ?b1 \\<and>\n  (\\<forall>y.\n      y dvd ?a1 \\<longrightarrow>\n      y dvd ?b1 \\<longrightarrow> y dvd some_gcd ?a1 ?b1)\n\ngoal (1 subgoal):\n 1. class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus some_gcd", "by (unfold_locales, auto simp: dvd_rewrites)"], ["proof (state)\nthis:\n  class.idom_gcd (*) (1::'a) (+) (0::'a) (-) uminus some_gcd\n\ngoal (2 subgoals):\n 1. dvd.dvd (*) = (dvd)\n 2. comm_monoid_mult.coprime (*) (1::?'c) = coprime", "qed (simp_all add: dvd_rewrites coprime_rewrites)"], ["", "end"], ["", "instance semiring_gcd \\<subseteq> comm_monoid_gcd"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, comm_monoid_gcd_class)", "by (intro_classes, auto)"], ["", "lemma listgcd_connect: \"listgcd = gcd_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listgcd = gcd_list", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs. listgcd xs = gcd_list xs", "fix xs :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs. listgcd xs = gcd_list xs", "show \"listgcd xs = gcd_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listgcd xs = gcd_list xs", "by(induct xs, auto)"], ["proof (state)\nthis:\n  listgcd xs = gcd_list xs\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation some_gcd: gcd_condition \"TYPE('a::ufd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_condition TYPE('a)", "proof(unfold_locales, intro exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. is_gcd (?x2 a b) a b", "interpret factorial_monoid \"mk_monoid :: 'a monoid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorial_monoid mk_monoid", "by (fact factorial_monoid)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. is_gcd (?x2 a b) a b", "note d = dvd.dvd_def some_gcd_def carrier_0"], ["proof (state)\nthis:\n  dvd.dvd ?times ?b ?a = (\\<exists>k. ?a = ?times ?b k)\n  some_gcd ?a ?b \\<equiv> SOME x. is_gcd x ?a ?b\n  (?x \\<in> carrier mk_monoid) = (?x \\<noteq> (0::?'a))\n\ngoal (1 subgoal):\n 1. \\<And>a b. is_gcd (?x2 a b) a b", "fix a b :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. is_gcd (?x2 a b) a b", "show \"is_gcd (some_gcd a b) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "proof (cases \"a = 0 \\<or> b = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b", "case True"], ["proof (state)\nthis:\n  a = (0::'a) \\<or> b = (0::'a)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> b = (0::'a) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b\n 2. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = (0::'a) \\<or> b = (0::'a)\n\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "using some_gcd_0"], ["proof (prove)\nusing this:\n  a = (0::'a) \\<or> b = (0::'a)\n  is_gcd (some_gcd ?a (0::?'a)) ?a (0::?'a)\n  is_gcd (some_gcd (0::?'a) ?b) (0::?'a) ?b\n\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "by auto"], ["proof (state)\nthis:\n  is_gcd (some_gcd a b) a b\n\ngoal (1 subgoal):\n 1. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b", "case False"], ["proof (state)\nthis:\n  \\<not> (a = (0::'a) \\<or> b = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> (a = (0::'a) \\<or> b = (0::'a)) \\<Longrightarrow>\n    is_gcd (some_gcd a b) a b", "with gcdof_exists[of a b]"], ["proof (chain)\npicking this:\n  \\<lbrakk>a \\<in> carrier mk_monoid; b \\<in> carrier mk_monoid\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       c \\<in> carrier mk_monoid \\<and>\n                       c gcdof\\<^bsub>mk_monoid\\<^esub> a b\n  \\<not> (a = (0::'a) \\<or> b = (0::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<in> carrier mk_monoid; b \\<in> carrier mk_monoid\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       c \\<in> carrier mk_monoid \\<and>\n                       c gcdof\\<^bsub>mk_monoid\\<^esub> a b\n  \\<not> (a = (0::'a) \\<or> b = (0::'a))\n\ngoal (1 subgoal):\n 1. is_gcd (some_gcd a b) a b", "by (auto intro!: is_gcd_some_gcdI simp add: is_gcd_connect some_gcd_connect)"], ["proof (state)\nthis:\n  is_gcd (some_gcd a b) a b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_gcd (some_gcd a b) a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma some_gcd_listgcd_dvd_listgcd: \"some_gcd.listgcd xs dvd listgcd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some_gcd.listgcd xs dvd listgcd xs", "by (induct xs, auto simp:some_gcd_dvd intro:dvd_imp_gcd_dvd_gcd)"], ["", "lemma listgcd_dvd_some_gcd_listgcd: \"listgcd xs dvd some_gcd.listgcd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listgcd xs dvd some_gcd.listgcd xs", "by (induct xs, auto simp:some_gcd_dvd intro:dvd_imp_gcd_dvd_gcd)"], ["", "context factorial_ring_gcd begin"], ["", "text \\<open>Do not declare the following as subclass, to avoid conflict in\n  \\<open>field \\<subseteq> gcd_condition\\<close> vs. \\<open>factorial_ring_gcd \\<subseteq> gcd_condition\\<close>.\n\\<close>"], ["", "sublocale as_ufd: ufd"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.ufd (*) (1::'a) (+) (0::'a) (-) uminus", "proof(unfold_locales, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "case (1 x)"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n  \\<not> is_unit x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "from prime_factorization_exists[OF \\<open>x \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     (\\<forall>x. x \\<in># A \\<longrightarrow> prime_elem x) \\<and>\n     normalize (\\<Prod>\\<^sub># A) = normalize x", "obtain F where f: \"\\<And>f. f \\<in># F \\<Longrightarrow> prime_elem f\" \n             and Fx: \"normalize (prod_mset F) = normalize x\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     (\\<forall>x. x \\<in># A \\<longrightarrow> prime_elem x) \\<and>\n     normalize (\\<Prod>\\<^sub># A) = normalize x\n\ngoal (1 subgoal):\n 1. (\\<And>F.\n        \\<lbrakk>\\<And>f. f \\<in># F \\<Longrightarrow> prime_elem f;\n         normalize (\\<Prod>\\<^sub># F) = normalize x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ?f1 \\<in># F \\<Longrightarrow> prime_elem ?f1\n  normalize (\\<Prod>\\<^sub># F) = normalize x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "from associatedE2[OF Fx]"], ["proof (chain)\npicking this:\n  (\\<And>u.\n      \\<lbrakk>is_unit u; x = u * \\<Prod>\\<^sub># F\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain u where u: \"is_unit u\" \"x = u * prod_mset F\""], ["proof (prove)\nusing this:\n  (\\<And>u.\n      \\<lbrakk>is_unit u; x = u * \\<Prod>\\<^sub># F\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>is_unit u; x = u * \\<Prod>\\<^sub># F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_unit u\n  x = u * \\<Prod>\\<^sub># F\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "from \\<open>\\<not> is_unit x\\<close> Fx"], ["proof (chain)\npicking this:\n  \\<not> is_unit x\n  normalize (\\<Prod>\\<^sub># F) = normalize x", "have \"F \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  \\<not> is_unit x\n  normalize (\\<Prod>\\<^sub># F) = normalize x\n\ngoal (1 subgoal):\n 1. F \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  F \\<noteq> {#}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "then"], ["proof (chain)\npicking this:\n  F \\<noteq> {#}", "obtain g G where F: \"F = add_mset g G\""], ["proof (prove)\nusing this:\n  F \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>g G. F = add_mset g G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases F, auto)"], ["proof (state)\nthis:\n  F = add_mset g G\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "then"], ["proof (chain)\npicking this:\n  F = add_mset g G", "have \"g \\<in># F\""], ["proof (prove)\nusing this:\n  F = add_mset g G\n\ngoal (1 subgoal):\n 1. g \\<in># F", "by auto"], ["proof (state)\nthis:\n  g \\<in># F\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "with f[OF this]prime_elem_iff_irreducible\n    irreducible_mult_unit_left[OF unit_factor_is_unit[OF \\<open>x \\<noteq> 0\\<close>]]"], ["proof (chain)\npicking this:\n  prime_elem g\n  prime_elem ?x = irreducible ?x\n  irreducible (unit_factor x * ?p) = irreducible ?p\n  g \\<in># F", "have g: \"irreducible (u * g)\""], ["proof (prove)\nusing this:\n  prime_elem g\n  prime_elem ?x = irreducible ?x\n  irreducible (unit_factor x * ?p) = irreducible ?p\n  g \\<in># F\n\ngoal (1 subgoal):\n 1. irreducible (u * g)", "using u(1)"], ["proof (prove)\nusing this:\n  prime_elem g\n  prime_elem ?x = irreducible ?x\n  irreducible (unit_factor x * ?p) = irreducible ?p\n  g \\<in># F\n  is_unit u\n\ngoal (1 subgoal):\n 1. irreducible (u * g)", "by (subst irreducible_mult_unit_left) simp_all"], ["proof (state)\nthis:\n  irreducible (u * g)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> (0::'a); \\<not> is_unit x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F. mset_factors F x\n 2. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F. mset_factors F x", "proof (intro exI conjI mset_factorsI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f. f \\<in># ?F \\<Longrightarrow> irreducible f\n 2. ?F \\<noteq> {#}\n 3. \\<Prod>\\<^sub># ?F = x", "show \"prod_mset (add_mset (u * g) G) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (add_mset (u * g) G) = x", "using \\<open>x \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (add_mset (u * g) G) = x", "by (simp add: F ac_simps u)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (add_mset (u * g) G) = x\n\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># add_mset (u * g) G \\<Longrightarrow> irreducible f\n 2. add_mset (u * g) G \\<noteq> {#}", "fix f"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># add_mset (u * g) G \\<Longrightarrow> irreducible f\n 2. add_mset (u * g) G \\<noteq> {#}", "assume \"f \\<in># add_mset (u * g) G\""], ["proof (state)\nthis:\n  f \\<in># add_mset (u * g) G\n\ngoal (2 subgoals):\n 1. \\<And>f. f \\<in># add_mset (u * g) G \\<Longrightarrow> irreducible f\n 2. add_mset (u * g) G \\<noteq> {#}", "with f[unfolded F] g prime_elem_iff_irreducible"], ["proof (chain)\npicking this:\n  ?f1 \\<in># add_mset g G \\<Longrightarrow> prime_elem ?f1\n  irreducible (u * g)\n  prime_elem ?x = irreducible ?x\n  f \\<in># add_mset (u * g) G", "show \"irreducible f\""], ["proof (prove)\nusing this:\n  ?f1 \\<in># add_mset g G \\<Longrightarrow> prime_elem ?f1\n  irreducible (u * g)\n  prime_elem ?x = irreducible ?x\n  f \\<in># add_mset (u * g) G\n\ngoal (1 subgoal):\n 1. irreducible f", "by auto"], ["proof (state)\nthis:\n  irreducible f\n\ngoal (1 subgoal):\n 1. add_mset (u * g) G \\<noteq> {#}", "qed auto"], ["proof (state)\nthis:\n  \\<exists>F. mset_factors F x\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "case (2 x F G)"], ["proof (state)\nthis:\n  mset_factors F x\n  mset_factors G x\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "note transpD[OF multiset.rel_transp[OF ddvd_transp],trans]"], ["proof (state)\nthis:\n  \\<lbrakk>rel_mset (ddvd) ?x ?y; rel_mset (ddvd) ?y ?z\\<rbrakk>\n  \\<Longrightarrow> rel_mset (ddvd) ?x ?z\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "obtain fs where F: \"F = mset fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fs. F = mset fs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_mset)"], ["proof (state)\nthis:\n  F = mset fs\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "have \"list_all2 (ddvd) fs (map normalize fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (ddvd) fs (map normalize fs)", "by (intro list_all2_all_nthI, auto)"], ["proof (state)\nthis:\n  list_all2 (ddvd) fs (map normalize fs)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "then"], ["proof (chain)\npicking this:\n  list_all2 (ddvd) fs (map normalize fs)", "have FH: \"rel_mset (ddvd) F (image_mset normalize F)\""], ["proof (prove)\nusing this:\n  list_all2 (ddvd) fs (map normalize fs)\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) F (image_mset normalize F)", "by (unfold rel_mset_def F, force)"], ["proof (state)\nthis:\n  rel_mset (ddvd) F (image_mset normalize F)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "also"], ["proof (state)\nthis:\n  rel_mset (ddvd) F (image_mset normalize F)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "have FG: \"image_mset normalize F = image_mset normalize G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset normalize F = image_mset normalize G", "proof (intro prime_factorization_unique'')"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p\n 3. normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n    normalize (\\<Prod>i\\<in>#image_mset normalize G. i)", "from 2"], ["proof (chain)\npicking this:\n  mset_factors F x\n  mset_factors G x", "have xF: \"x = prod_mset F\" and xG: \"x = prod_mset G\""], ["proof (prove)\nusing this:\n  mset_factors F x\n  mset_factors G x\n\ngoal (1 subgoal):\n 1. x = \\<Prod>\\<^sub># F &&& x = \\<Prod>\\<^sub># G", "by auto"], ["proof (state)\nthis:\n  x = \\<Prod>\\<^sub># F\n  x = \\<Prod>\\<^sub># G\n\ngoal (3 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p\n 3. normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n    normalize (\\<Prod>i\\<in>#image_mset normalize G. i)", "from xF"], ["proof (chain)\npicking this:\n  x = \\<Prod>\\<^sub># F", "have \"normalize x = normalize (prod_mset (image_mset normalize F))\""], ["proof (prove)\nusing this:\n  x = \\<Prod>\\<^sub># F\n\ngoal (1 subgoal):\n 1. normalize x = normalize (\\<Prod>\\<^sub># (image_mset normalize F))", "by (simp add: normalize_prod_mset_normalize)"], ["proof (state)\nthis:\n  normalize x = normalize (\\<Prod>\\<^sub># (image_mset normalize F))\n\ngoal (3 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p\n 3. normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n    normalize (\\<Prod>i\\<in>#image_mset normalize G. i)", "with xG"], ["proof (chain)\npicking this:\n  x = \\<Prod>\\<^sub># G\n  normalize x = normalize (\\<Prod>\\<^sub># (image_mset normalize F))", "have nFG: \"\\<dots> = normalize (prod_mset (image_mset normalize G))\""], ["proof (prove)\nusing this:\n  x = \\<Prod>\\<^sub># G\n  normalize x = normalize (\\<Prod>\\<^sub># (image_mset normalize F))\n\ngoal (1 subgoal):\n 1. normalize (\\<Prod>\\<^sub># (image_mset normalize F)) =\n    normalize (\\<Prod>\\<^sub># (image_mset normalize G))", "by (simp_all add: normalize_prod_mset_normalize)"], ["proof (state)\nthis:\n  normalize (\\<Prod>\\<^sub># (image_mset normalize F)) =\n  normalize (\\<Prod>\\<^sub># (image_mset normalize G))\n\ngoal (3 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p\n 3. normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n    normalize (\\<Prod>i\\<in>#image_mset normalize G. i)", "then"], ["proof (chain)\npicking this:\n  normalize (\\<Prod>\\<^sub># (image_mset normalize F)) =\n  normalize (\\<Prod>\\<^sub># (image_mset normalize G))", "show \"normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n               normalize (\\<Prod>i\\<in>#image_mset normalize G. i)\""], ["proof (prove)\nusing this:\n  normalize (\\<Prod>\\<^sub># (image_mset normalize F)) =\n  normalize (\\<Prod>\\<^sub># (image_mset normalize G))\n\ngoal (1 subgoal):\n 1. normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n    normalize (\\<Prod>i\\<in>#image_mset normalize G. i)", "by auto"], ["proof (state)\nthis:\n  normalize (\\<Prod>i\\<in>#image_mset normalize F. i) =\n  normalize (\\<Prod>i\\<in>#image_mset normalize G. i)\n\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p", "from 2 prime_elem_iff_irreducible"], ["proof (chain)\npicking this:\n  mset_factors F x\n  mset_factors G x\n  prime_elem ?x = irreducible ?x", "have \"f \\<in># F \\<Longrightarrow> prime_elem f\" \"g \\<in># G \\<Longrightarrow> prime_elem g\" for f g"], ["proof (prove)\nusing this:\n  mset_factors F x\n  mset_factors G x\n  prime_elem ?x = irreducible ?x\n\ngoal (1 subgoal):\n 1. (f \\<in># F \\<Longrightarrow> prime_elem f) &&&\n    (g \\<in># G \\<Longrightarrow> prime_elem g)", "by (auto intro: prime_elemI)"], ["proof (state)\nthis:\n  ?f1 \\<in># F \\<Longrightarrow> prime_elem ?f1\n  ?g1 \\<in># G \\<Longrightarrow> prime_elem ?g1\n\ngoal (2 subgoals):\n 1. \\<forall>p\\<in>#image_mset normalize F. prime p\n 2. \\<forall>p\\<in>#image_mset normalize G. prime p", "then"], ["proof (chain)\npicking this:\n  ?f1 \\<in># F \\<Longrightarrow> prime_elem ?f1\n  ?g1 \\<in># G \\<Longrightarrow> prime_elem ?g1", "show \" Multiset.Ball (image_mset normalize F) prime\"\n      \"Multiset.Ball (image_mset normalize G) prime\""], ["proof (prove)\nusing this:\n  ?f1 \\<in># F \\<Longrightarrow> prime_elem ?f1\n  ?g1 \\<in># G \\<Longrightarrow> prime_elem ?g1\n\ngoal (1 subgoal):\n 1. Multiset.Ball (image_mset normalize F) prime &&&\n    Multiset.Ball (image_mset normalize G) prime", "by auto"], ["proof (state)\nthis:\n  Multiset.Ball (image_mset normalize F) prime\n  Multiset.Ball (image_mset normalize G) prime\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  image_mset normalize F = image_mset normalize G\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "also"], ["proof (state)\nthis:\n  image_mset normalize F = image_mset normalize G\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "obtain gs where G: \"G = mset gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>gs. G = mset gs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_mset)"], ["proof (state)\nthis:\n  G = mset gs\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "have \"list_all2 ((ddvd)\\<inverse>\\<inverse>) gs (map normalize gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (ddvd)\\<inverse>\\<inverse> gs (map normalize gs)", "by (intro list_all2_all_nthI, auto)"], ["proof (state)\nthis:\n  list_all2 (ddvd)\\<inverse>\\<inverse> gs (map normalize gs)\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "then"], ["proof (chain)\npicking this:\n  list_all2 (ddvd)\\<inverse>\\<inverse> gs (map normalize gs)", "have \"rel_mset (ddvd) (image_mset normalize G) G\""], ["proof (prove)\nusing this:\n  list_all2 (ddvd)\\<inverse>\\<inverse> gs (map normalize gs)\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) (image_mset normalize G) G", "by (subst multiset.rel_flip[symmetric], unfold rel_mset_def G, force)"], ["proof (state)\nthis:\n  rel_mset (ddvd) (image_mset normalize G) G\n\ngoal (1 subgoal):\n 1. \\<And>x F G.\n       \\<lbrakk>mset_factors F x; mset_factors G x\\<rbrakk>\n       \\<Longrightarrow> rel_mset (ddvd) F G", "finally"], ["proof (chain)\npicking this:\n  rel_mset (ddvd) F G", "show ?case"], ["proof (prove)\nusing this:\n  rel_mset (ddvd) F G\n\ngoal (1 subgoal):\n 1. rel_mset (ddvd) F G", "."], ["proof (state)\nthis:\n  rel_mset (ddvd) F G\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instance int :: ufd"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, ufd_class)", "by (intro class.ufd.of_class.intro as_ufd.ufd_axioms)"], ["", "instance int :: idom_gcd"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, idom_gcd_class)", "by (intro_classes, auto)"], ["", "instance field \\<subseteq> ufd"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a, ufd_class)", "by (intro_classes, auto simp: dvd_field_iff)"], ["", "end"]]}