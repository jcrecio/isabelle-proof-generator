{"file_name": "/home/qj213/afp-2021-10-22/thys/Clean/src/Hoare_MonadSE.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Clean", "problem_names": ["lemma skip: \" \\<lbrace>P\\<rbrace> skip\\<^sub>S\\<^sub>E \\<lbrace>\\<lambda>_. P\\<rbrace>\"", "lemma fail: \"\\<lbrace>P\\<rbrace> fail\\<^sub>S\\<^sub>E \\<dagger>\"", "lemma assert: \"\\<lbrace>P\\<rbrace> assert\\<^sub>S\\<^sub>E P \\<lbrace>\\<lambda> _ _. True\\<rbrace>\"", "lemma assert_conseq: \"Collect P \\<subseteq> Collect Q \\<Longrightarrow> \\<lbrace>P\\<rbrace> assert\\<^sub>S\\<^sub>E Q \\<lbrace>\\<lambda> _ _. True\\<rbrace>\"", "lemma assume_conseq: \n  assumes \"\\<exists> \\<sigma>. Q \\<sigma>\"\n  shows   \"\\<lbrace>P\\<rbrace> assume\\<^sub>S\\<^sub>E Q \\<lbrace>\\<lambda> _ . Q\\<rbrace>\"", "lemma sequence : \n  \"    \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q x \\<sigma>\\<rbrace>\n   \\<Longrightarrow> \\<forall>x\\<in>A. \\<lbrace>Q x\\<rbrace> M' x \\<lbrace>R\\<rbrace> \n   \\<Longrightarrow> \\<lbrace>P\\<rbrace> x \\<leftarrow> M; M' x \\<lbrace>R\\<rbrace>\"", "lemma sequence_irpt_l : \"\\<lbrace>P\\<rbrace> M \\<dagger>  \\<Longrightarrow> \\<lbrace>P\\<rbrace> x \\<leftarrow> M; M' x \\<dagger>\"", "lemma sequence_irpt_r : \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q x \\<sigma>\\<rbrace> \\<Longrightarrow> \\<forall>x\\<in>A. \\<lbrace>Q x\\<rbrace> M' x \\<dagger>  \\<Longrightarrow> \\<lbrace>P\\<rbrace> x \\<leftarrow> M; M' x \\<dagger>\"", "lemma sequence' : \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>_. Q \\<rbrace> \\<Longrightarrow> \\<lbrace>Q\\<rbrace> M' \\<lbrace>R\\<rbrace> \\<Longrightarrow> \\<lbrace>P\\<rbrace> M;- M' \\<lbrace>R\\<rbrace>\"", "lemma sequence_irpt_l' : \"\\<lbrace>P\\<rbrace> M \\<dagger> \\<Longrightarrow> \\<lbrace>P\\<rbrace> M;- M' \\<dagger>\"", "lemma sequence_irpt_r' : \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>_. Q \\<rbrace> \\<Longrightarrow> \\<lbrace>Q\\<rbrace> M' \\<dagger> \\<Longrightarrow> \\<lbrace>P\\<rbrace> M;- M' \\<dagger>\"", "lemma consequence : \n  \"    Collect P \\<subseteq> Collect P'\n   \\<Longrightarrow> \\<lbrace>P'\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q' x \\<sigma>\\<rbrace> \n   \\<Longrightarrow> \\<forall> x\\<in>A. Collect(Q' x) \\<subseteq> Collect (Q x)\n   \\<Longrightarrow> \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q x \\<sigma>\\<rbrace>\"", "lemma consequence_unit : \n  assumes \"(\\<And> \\<sigma>. P \\<sigma> \\<longrightarrow> P' \\<sigma>)\" \n   and  \"\\<lbrace>P'\\<rbrace> M \\<lbrace>\\<lambda>x::unit. \\<lambda> \\<sigma>.  Q' \\<sigma>\\<rbrace>\" \n   and  \" (\\<And> \\<sigma>. Q'  \\<sigma> \\<longrightarrow> Q  \\<sigma>)\" \n   shows \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. Q \\<sigma>\\<rbrace>\"", "lemma consequence_irpt : \n  \"    Collect P \\<subseteq> Collect P'\n   \\<Longrightarrow> \\<lbrace>P'\\<rbrace> M \\<dagger>\n   \\<Longrightarrow> \\<lbrace>P\\<rbrace>  M \\<dagger>\"", "lemma consequence_mt_swap : \n  \"(\\<lbrace>\\<lambda>_. False\\<rbrace> M \\<dagger>) = (\\<lbrace>\\<lambda>_. False\\<rbrace> M \\<lbrace>P\\<rbrace>)\"", "lemma cond : \n  \"    \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> cond \\<sigma>\\<rbrace> M \\<lbrace>Q\\<rbrace>\n   \\<Longrightarrow> \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> \\<not> cond \\<sigma>\\<rbrace> M' \\<lbrace>Q\\<rbrace>  \n   \\<Longrightarrow> \\<lbrace>P\\<rbrace>if\\<^sub>S\\<^sub>E cond then M else M' fi\\<lbrace>Q\\<rbrace>\"", "lemma cond_irpt : \n  \"    \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> cond \\<sigma>\\<rbrace> M \\<dagger>\n   \\<Longrightarrow> \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> \\<not> cond \\<sigma>\\<rbrace> M' \\<dagger>  \n   \\<Longrightarrow> \\<lbrace>P\\<rbrace>if\\<^sub>S\\<^sub>E cond then M else M' fi \\<dagger>\"", "lemma while :\n  assumes  * : \"\\<lbrace>\\<lambda>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>  M \\<lbrace>\\<lambda>_. P\\<rbrace>\"\n  and measure: \"\\<forall>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow> M \\<sigma> \\<noteq> None \\<and> f(snd(the(M \\<sigma>))) < ((f \\<sigma>)::nat) \"\n  shows        \"\\<lbrace>P\\<rbrace>while\\<^sub>S\\<^sub>E cond do M od \\<lbrace>\\<lambda>_ \\<sigma>. \\<not>cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>\"", "lemma while_irpt :\n  assumes  * : \"\\<lbrace>\\<lambda>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>  M \\<lbrace>\\<lambda>_. P\\<rbrace> \\<or> \\<lbrace>\\<lambda>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>  M  \\<dagger>\"\n  and measure: \"\\<forall>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow> M \\<sigma> = None \\<or> f(snd(the(M \\<sigma>))) < ((f \\<sigma>)::nat)\"\n  and enabled: \"\\<forall>\\<sigma>. P \\<sigma> \\<longrightarrow> cond \\<sigma>\"\n  shows        \"\\<lbrace>P\\<rbrace>while\\<^sub>S\\<^sub>E cond do M od \\<dagger>\""], "translations": [["", "lemma skip: \" \\<lbrace>P\\<rbrace> skip\\<^sub>S\\<^sub>E \\<lbrace>\\<lambda>_. P\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> skip\\<^sub>S\\<^sub>E \\<lbrace>\\<lambda>_. P\\<rbrace>", "unfolding hoare\\<^sub>3_def skip\\<^sub>S\\<^sub>E_def unit_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case Some ((), \\<sigma>) of None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')", "by auto"], ["", "lemma fail: \"\\<lbrace>P\\<rbrace> fail\\<^sub>S\\<^sub>E \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> fail\\<^sub>S\\<^sub>E\\<dagger>", "unfolding hoare\\<^sub>3'_def fail_SE_def unit_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case None of None \\<Rightarrow> True | Some a \\<Rightarrow> False)", "by auto"], ["", "lemma assert: \"\\<lbrace>P\\<rbrace> assert\\<^sub>S\\<^sub>E P \\<lbrace>\\<lambda> _ _. True\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> assert\\<^sub>S\\<^sub>E P\n    \\<lbrace>\\<lambda>_ _. True\\<rbrace>", "unfolding hoare\\<^sub>3_def assert_SE_def unit_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case if P \\<sigma> then Some (True, \\<sigma>) else None of\n        None \\<Rightarrow> False | Some (x, \\<sigma>') \\<Rightarrow> True)", "by auto"], ["", "lemma assert_conseq: \"Collect P \\<subseteq> Collect Q \\<Longrightarrow> \\<lbrace>P\\<rbrace> assert\\<^sub>S\\<^sub>E Q \\<lbrace>\\<lambda> _ _. True\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Collect P \\<subseteq> Collect Q \\<Longrightarrow>\n    \\<lbrace>P\\<rbrace> assert\\<^sub>S\\<^sub>E Q\n    \\<lbrace>\\<lambda>_ _. True\\<rbrace>", "unfolding hoare\\<^sub>3_def assert_SE_def unit_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Collect P \\<subseteq> Collect Q \\<Longrightarrow>\n    \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case if Q \\<sigma> then Some (True, \\<sigma>) else None of\n        None \\<Rightarrow> False | Some (x, \\<sigma>') \\<Rightarrow> True)", "by auto"], ["", "lemma assume_conseq: \n  assumes \"\\<exists> \\<sigma>. Q \\<sigma>\"\n  shows   \"\\<lbrace>P\\<rbrace> assume\\<^sub>S\\<^sub>E Q \\<lbrace>\\<lambda> _ . Q\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> assume\\<^sub>S\\<^sub>E Q\n    \\<lbrace>\\<lambda>_. Q\\<rbrace>", "unfolding hoare\\<^sub>3_def assume_SE_def unit_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case if Ex Q then Some ((), Eps Q) else None of\n        None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow> Q \\<sigma>')", "apply (auto simp : someI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. \\<not> Q x; P x\\<rbrakk> \\<Longrightarrow> False", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. Q \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. \\<not> Q x; P x\\<rbrakk> \\<Longrightarrow> False", "by auto"], ["", "text \\<open>assignment missing in the calculus because this is viewed as a state specific  \n       operation, definable for concrete instances of @{typ \"'\\<sigma>\"}.\\<close>"], ["", "subsection \\<open>Generalized and special sequence rules\\<close>"], ["", "text\\<open>The decisive idea is to factor out the post-condition on the results of @{term M} :\\<close>"], ["", "lemma sequence : \n  \"    \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q x \\<sigma>\\<rbrace>\n   \\<Longrightarrow> \\<forall>x\\<in>A. \\<lbrace>Q x\\<rbrace> M' x \\<lbrace>R\\<rbrace> \n   \\<Longrightarrow> \\<lbrace>P\\<rbrace> x \\<leftarrow> M; M' x \\<lbrace>R\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>P\\<rbrace> M\n             \\<lbrace>\\<lambda>x \\<sigma>.\n                         x \\<in> A \\<and> Q x \\<sigma>\\<rbrace>;\n     \\<forall>x\\<in>A.\n        \\<lbrace>Q x\\<rbrace> M' x \\<lbrace>R\\<rbrace>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> bind\\<^sub>S\\<^sub>E M M'\n                      \\<lbrace>R\\<rbrace>", "unfolding hoare\\<^sub>3_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                P \\<sigma> \\<longrightarrow>\n                (case M \\<sigma> of None \\<Rightarrow> False\n                 | Some (x, \\<sigma>') \\<Rightarrow>\n                     x \\<in> A \\<and> Q x \\<sigma>');\n     \\<forall>x\\<in>A.\n        \\<forall>\\<sigma>.\n           Q x \\<sigma> \\<longrightarrow>\n           (case M' x \\<sigma> of None \\<Rightarrow> False\n            | Some (x, \\<sigma>') \\<Rightarrow> R x \\<sigma>')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case case M \\<sigma> of None \\<Rightarrow> None\n                               | Some (xa, xb) \\<Rightarrow> M' xa xb of\n                          None \\<Rightarrow> False\n                          | Some (x, \\<sigma>') \\<Rightarrow> R x \\<sigma>')", "by(auto,erule_tac x=\"\\<sigma>\" in allE, auto split: Option.option.split_asm Option.option.split)"], ["", "lemma sequence_irpt_l : \"\\<lbrace>P\\<rbrace> M \\<dagger>  \\<Longrightarrow> \\<lbrace>P\\<rbrace> x \\<leftarrow> M; M' x \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M\\<dagger> \\<Longrightarrow>\n    \\<lbrace>P\\<rbrace> bind\\<^sub>S\\<^sub>E M M'\\<dagger>", "unfolding hoare\\<^sub>3'_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case M \\<sigma> of None \\<Rightarrow> True\n        | Some a \\<Rightarrow> False) \\<Longrightarrow>\n    \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case case M \\<sigma> of None \\<Rightarrow> None\n             | Some (xa, xb) \\<Rightarrow> M' xa xb of\n        None \\<Rightarrow> True | Some a \\<Rightarrow> False)", "by(auto,erule_tac x=\"\\<sigma>\" in allE, auto split: Option.option.split_asm Option.option.split)"], ["", "lemma sequence_irpt_r : \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q x \\<sigma>\\<rbrace> \\<Longrightarrow> \\<forall>x\\<in>A. \\<lbrace>Q x\\<rbrace> M' x \\<dagger>  \\<Longrightarrow> \\<lbrace>P\\<rbrace> x \\<leftarrow> M; M' x \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>P\\<rbrace> M\n             \\<lbrace>\\<lambda>x \\<sigma>.\n                         x \\<in> A \\<and> Q x \\<sigma>\\<rbrace>;\n     \\<forall>x\\<in>A. \\<lbrace>Q x\\<rbrace> M' x\\<dagger>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> bind\\<^sub>S\\<^sub>E M M'\\<dagger>", "unfolding hoare\\<^sub>3'_def hoare\\<^sub>3_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                P \\<sigma> \\<longrightarrow>\n                (case M \\<sigma> of None \\<Rightarrow> False\n                 | Some (x, \\<sigma>') \\<Rightarrow>\n                     x \\<in> A \\<and> Q x \\<sigma>');\n     \\<forall>x\\<in>A.\n        \\<forall>\\<sigma>.\n           Q x \\<sigma> \\<longrightarrow>\n           (case M' x \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case case M \\<sigma> of None \\<Rightarrow> None\n                               | Some (xa, xb) \\<Rightarrow> M' xa xb of\n                          None \\<Rightarrow> True\n                          | Some a \\<Rightarrow> False)", "by(auto,erule_tac x=\"\\<sigma>\" in allE, auto split: Option.option.split_asm Option.option.split)"], ["", "lemma sequence' : \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>_. Q \\<rbrace> \\<Longrightarrow> \\<lbrace>Q\\<rbrace> M' \\<lbrace>R\\<rbrace> \\<Longrightarrow> \\<lbrace>P\\<rbrace> M;- M' \\<lbrace>R\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>_. Q\\<rbrace>;\n     \\<lbrace>Q\\<rbrace> M' \\<lbrace>R\\<rbrace>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> M ;- M' \\<lbrace>R\\<rbrace>", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3_def bind_SE_def bind_SE'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                P \\<sigma> \\<longrightarrow>\n                (case M \\<sigma> of None \\<Rightarrow> False\n                 | Some (x, \\<sigma>') \\<Rightarrow> Q \\<sigma>');\n     \\<forall>\\<sigma>.\n        Q \\<sigma> \\<longrightarrow>\n        (case M' \\<sigma> of None \\<Rightarrow> False\n         | Some (x, \\<sigma>') \\<Rightarrow> R x \\<sigma>')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case case M \\<sigma> of None \\<Rightarrow> None\n                               | Some (uu_, xa) \\<Rightarrow> M' xa of\n                          None \\<Rightarrow> False\n                          | Some (x, \\<sigma>') \\<Rightarrow> R x \\<sigma>')", "by(auto,erule_tac x=\"\\<sigma>\" in allE, auto split: Option.option.split_asm Option.option.split)"], ["", "lemma sequence_irpt_l' : \"\\<lbrace>P\\<rbrace> M \\<dagger> \\<Longrightarrow> \\<lbrace>P\\<rbrace> M;- M' \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M\\<dagger> \\<Longrightarrow>\n    \\<lbrace>P\\<rbrace> M ;- M'\\<dagger>", "unfolding hoare\\<^sub>3'_def bind_SE_def bind_SE'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case M \\<sigma> of None \\<Rightarrow> True\n        | Some a \\<Rightarrow> False) \\<Longrightarrow>\n    \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case case M \\<sigma> of None \\<Rightarrow> None\n             | Some (uu_, xa) \\<Rightarrow> M' xa of\n        None \\<Rightarrow> True | Some a \\<Rightarrow> False)", "by(auto,erule_tac x=\"\\<sigma>\" in allE, auto split: Option.option.split_asm Option.option.split)"], ["", "lemma sequence_irpt_r' : \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>_. Q \\<rbrace> \\<Longrightarrow> \\<lbrace>Q\\<rbrace> M' \\<dagger> \\<Longrightarrow> \\<lbrace>P\\<rbrace> M;- M' \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>_. Q\\<rbrace>;\n     \\<lbrace>Q\\<rbrace> M'\\<dagger>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> M ;- M'\\<dagger>", "unfolding hoare\\<^sub>3'_def hoare\\<^sub>3_def bind_SE_def bind_SE'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                P \\<sigma> \\<longrightarrow>\n                (case M \\<sigma> of None \\<Rightarrow> False\n                 | Some (x, \\<sigma>') \\<Rightarrow> Q \\<sigma>');\n     \\<forall>\\<sigma>.\n        Q \\<sigma> \\<longrightarrow>\n        (case M' \\<sigma> of None \\<Rightarrow> True\n         | Some a \\<Rightarrow> False)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case case M \\<sigma> of None \\<Rightarrow> None\n                               | Some (uu_, xa) \\<Rightarrow> M' xa of\n                          None \\<Rightarrow> True\n                          | Some a \\<Rightarrow> False)", "by(auto,erule_tac x=\"\\<sigma>\" in allE, auto split: Option.option.split_asm Option.option.split)"], ["", "subsection\\<open>Generalized and special consequence rules\\<close>"], ["", "lemma consequence : \n  \"    Collect P \\<subseteq> Collect P'\n   \\<Longrightarrow> \\<lbrace>P'\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q' x \\<sigma>\\<rbrace> \n   \\<Longrightarrow> \\<forall> x\\<in>A. Collect(Q' x) \\<subseteq> Collect (Q x)\n   \\<Longrightarrow> \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. x\\<in>A \\<and> Q x \\<sigma>\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Collect P \\<subseteq> Collect P';\n     \\<lbrace>P'\\<rbrace> M\n     \\<lbrace>\\<lambda>x \\<sigma>. x \\<in> A \\<and> Q' x \\<sigma>\\<rbrace>;\n     \\<forall>x\\<in>A. Collect (Q' x) \\<subseteq> Collect (Q x)\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> M\n                      \\<lbrace>\\<lambda>x \\<sigma>.\n                                  x \\<in> A \\<and> Q x \\<sigma>\\<rbrace>", "unfolding hoare\\<^sub>3_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Collect P \\<subseteq> Collect P';\n     \\<forall>\\<sigma>.\n        P' \\<sigma> \\<longrightarrow>\n        (case M \\<sigma> of None \\<Rightarrow> False\n         | Some (x, \\<sigma>') \\<Rightarrow>\n             x \\<in> A \\<and> Q' x \\<sigma>');\n     \\<forall>x\\<in>A. Collect (Q' x) \\<subseteq> Collect (Q x)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case M \\<sigma> of None \\<Rightarrow> False\n                          | Some (x, \\<sigma>') \\<Rightarrow>\n                              x \\<in> A \\<and> Q x \\<sigma>')", "by(auto,erule_tac x=\"\\<sigma>\" in allE,auto split: Option.option.split_asm Option.option.split)"], ["", "lemma consequence_unit : \n  assumes \"(\\<And> \\<sigma>. P \\<sigma> \\<longrightarrow> P' \\<sigma>)\" \n   and  \"\\<lbrace>P'\\<rbrace> M \\<lbrace>\\<lambda>x::unit. \\<lambda> \\<sigma>.  Q' \\<sigma>\\<rbrace>\" \n   and  \" (\\<And> \\<sigma>. Q'  \\<sigma> \\<longrightarrow> Q  \\<sigma>)\" \n   shows \"\\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x \\<sigma>. Q \\<sigma>\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x. Q\\<rbrace>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x. Q\\<rbrace>", "have * : \"(\\<lambda>x \\<sigma>. Q  \\<sigma>) = (\\<lambda>x::unit. \\<lambda> \\<sigma>. x\\<in>UNIV \\<and> Q  \\<sigma>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. Q) = (\\<lambda>x \\<sigma>. x \\<in> UNIV \\<and> Q \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. Q) = (\\<lambda>x \\<sigma>. x \\<in> UNIV \\<and> Q \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x. Q\\<rbrace>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x. Q\\<rbrace>", "apply(subst *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> M\n    \\<lbrace>\\<lambda>x \\<sigma>. x \\<in> UNIV \\<and> Q \\<sigma>\\<rbrace>", "apply(rule_tac  P' = \"P'\" and Q' = \"%_. Q'\" in consequence)"], ["proof (prove)\ngoal (3 subgoals):\n 1. Collect P \\<subseteq> Collect P'\n 2. \\<lbrace>P'\\<rbrace> M\n    \\<lbrace>\\<lambda>x \\<sigma>. x \\<in> UNIV \\<and> Q' \\<sigma>\\<rbrace>\n 3. \\<forall>x\\<in>UNIV. Collect Q' \\<subseteq> {\\<sigma>. Q \\<sigma>}", "apply (simp add: Collect_mono assms(1))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrace>P'\\<rbrace> M\n    \\<lbrace>\\<lambda>x \\<sigma>. x \\<in> UNIV \\<and> Q' \\<sigma>\\<rbrace>\n 2. \\<forall>x\\<in>UNIV. Collect Q' \\<subseteq> {\\<sigma>. Q \\<sigma>}", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrace>P'\\<rbrace> M \\<lbrace>\\<lambda>x. Q'\\<rbrace>\n\ngoal (2 subgoals):\n 1. \\<lbrace>P'\\<rbrace> M\n    \\<lbrace>\\<lambda>x \\<sigma>. x \\<in> UNIV \\<and> Q' \\<sigma>\\<rbrace>\n 2. \\<forall>x\\<in>UNIV. Collect Q' \\<subseteq> {\\<sigma>. Q \\<sigma>}", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>UNIV. Collect Q' \\<subseteq> {\\<sigma>. Q \\<sigma>}", "by (simp add: Collect_mono assms(3))"], ["proof (state)\nthis:\n  \\<lbrace>P\\<rbrace> M \\<lbrace>\\<lambda>x. Q\\<rbrace>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consequence_irpt : \n  \"    Collect P \\<subseteq> Collect P'\n   \\<Longrightarrow> \\<lbrace>P'\\<rbrace> M \\<dagger>\n   \\<Longrightarrow> \\<lbrace>P\\<rbrace>  M \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Collect P \\<subseteq> Collect P';\n     \\<lbrace>P'\\<rbrace> M\\<dagger>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> M\\<dagger>", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3'_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Collect P \\<subseteq> Collect P';\n     \\<forall>\\<sigma>.\n        P' \\<sigma> \\<longrightarrow>\n        (case M \\<sigma> of None \\<Rightarrow> True\n         | Some a \\<Rightarrow> False)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case M \\<sigma> of None \\<Rightarrow> True\n                          | Some a \\<Rightarrow> False)", "by(auto)"], ["", "lemma consequence_mt_swap : \n  \"(\\<lbrace>\\<lambda>_. False\\<rbrace> M \\<dagger>) = (\\<lbrace>\\<lambda>_. False\\<rbrace> M \\<lbrace>P\\<rbrace>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrace>\\<lambda>_. False\\<rbrace> M\\<dagger>) =\n    (\\<lbrace>\\<lambda>_. False\\<rbrace> M \\<lbrace>P\\<rbrace>)", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3'_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<sigma>.\n        False \\<longrightarrow>\n        (case M \\<sigma> of None \\<Rightarrow> True\n         | Some a \\<Rightarrow> False)) =\n    (\\<forall>\\<sigma>.\n        False \\<longrightarrow>\n        (case M \\<sigma> of None \\<Rightarrow> False\n         | Some (x, \\<sigma>') \\<Rightarrow> P x \\<sigma>'))", "by auto"], ["", "subsection\\<open>Condition rules\\<close>"], ["", "lemma cond : \n  \"    \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> cond \\<sigma>\\<rbrace> M \\<lbrace>Q\\<rbrace>\n   \\<Longrightarrow> \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> \\<not> cond \\<sigma>\\<rbrace> M' \\<lbrace>Q\\<rbrace>  \n   \\<Longrightarrow> \\<lbrace>P\\<rbrace>if\\<^sub>S\\<^sub>E cond then M else M' fi\\<lbrace>Q\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>\\<lambda>\\<sigma>.\n                         P \\<sigma> \\<and> cond \\<sigma>\\<rbrace>\n             M \\<lbrace>Q\\<rbrace>;\n     \\<lbrace>\\<lambda>\\<sigma>.\n                 P \\<sigma> \\<and> \\<not> cond \\<sigma>\\<rbrace>\n     M' \\<lbrace>Q\\<rbrace>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> _if_SE cond M M'\n                      \\<lbrace>Q\\<rbrace>", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3'_def bind_SE_def if_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                P \\<sigma> \\<and> cond \\<sigma> \\<longrightarrow>\n                (case M \\<sigma> of None \\<Rightarrow> False\n                 | Some (x, \\<sigma>') \\<Rightarrow> Q x \\<sigma>');\n     \\<forall>\\<sigma>.\n        P \\<sigma> \\<and> \\<not> cond \\<sigma> \\<longrightarrow>\n        (case M' \\<sigma> of None \\<Rightarrow> False\n         | Some (x, \\<sigma>') \\<Rightarrow> Q x \\<sigma>')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case if cond \\<sigma> then M \\<sigma>\n                               else M' \\<sigma> of\n                          None \\<Rightarrow> False\n                          | Some (x, \\<sigma>') \\<Rightarrow> Q x \\<sigma>')", "by auto"], ["", "lemma cond_irpt : \n  \"    \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> cond \\<sigma>\\<rbrace> M \\<dagger>\n   \\<Longrightarrow> \\<lbrace>\\<lambda>\\<sigma>. P \\<sigma> \\<and> \\<not> cond \\<sigma>\\<rbrace> M' \\<dagger>  \n   \\<Longrightarrow> \\<lbrace>P\\<rbrace>if\\<^sub>S\\<^sub>E cond then M else M' fi \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrace>\\<lambda>\\<sigma>.\n                         P \\<sigma> \\<and> cond \\<sigma>\\<rbrace>\n             M\\<dagger>;\n     \\<lbrace>\\<lambda>\\<sigma>.\n                 P \\<sigma> \\<and> \\<not> cond \\<sigma>\\<rbrace>\n     M'\\<dagger>\\<rbrakk>\n    \\<Longrightarrow> \\<lbrace>P\\<rbrace> _if_SE cond M M'\\<dagger>", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3'_def bind_SE_def if_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>\\<sigma>.\n                P \\<sigma> \\<and> cond \\<sigma> \\<longrightarrow>\n                (case M \\<sigma> of None \\<Rightarrow> True\n                 | Some a \\<Rightarrow> False);\n     \\<forall>\\<sigma>.\n        P \\<sigma> \\<and> \\<not> cond \\<sigma> \\<longrightarrow>\n        (case M' \\<sigma> of None \\<Rightarrow> True\n         | Some a \\<Rightarrow> False)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>\\<sigma>.\n                         P \\<sigma> \\<longrightarrow>\n                         (case if cond \\<sigma> then M \\<sigma>\n                               else M' \\<sigma> of\n                          None \\<Rightarrow> True\n                          | Some a \\<Rightarrow> False)", "by auto"], ["", "text\\<open> Note that the other four combinations can be directly derived via\n       the @{thm consequence_mt_swap} rule.\\<close>"], ["", "subsection\\<open>While rules\\<close>"], ["", "text\\<open>The only non-trivial proof is, of course, the while loop rule. Note\nthat non-terminating loops were mapped to @{term None} following the principle\nthat our monadic state-transformers represent partial functions in the mathematical \nsense.\\<close>"], ["", "lemma while :\n  assumes  * : \"\\<lbrace>\\<lambda>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>  M \\<lbrace>\\<lambda>_. P\\<rbrace>\"\n  and measure: \"\\<forall>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow> M \\<sigma> \\<noteq> None \\<and> f(snd(the(M \\<sigma>))) < ((f \\<sigma>)::nat) \"\n  shows        \"\\<lbrace>P\\<rbrace>while\\<^sub>S\\<^sub>E cond do M od \\<lbrace>\\<lambda>_ \\<sigma>. \\<not>cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> _while_SE cond M\n    \\<lbrace>\\<lambda>_ \\<sigma>.\n                \\<not> cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3'_def bind_SE_def if_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow>\n            \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n       | Some (x, \\<sigma>') \\<Rightarrow>\n           \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "have * : \"\\<forall>n. \\<forall> \\<sigma>. P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>  \n                     (case (while\\<^sub>S\\<^sub>E cond do M od) \\<sigma> of \n                          None \\<Rightarrow> False\n                        | Some (x, \\<sigma>') \\<Rightarrow> \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\" (is \"\\<forall>n. ?P n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n \\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow>\n            \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "proof (rule allI, rename_tac n, induct_tac n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n 2. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n 2. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "show \"?P 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow>\n            \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> = 0\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (x, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "apply(subst while_SE_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> = 0\\<rbrakk>\n       \\<Longrightarrow> case (_if_SE cond (M ;- _while_SE cond M)\n                                (unit\\<^sub>S\\<^sub>E ()))\n                               \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "by (metis (no_types, lifting) gr_implies_not0 if_SE_def  measure option.case_eq_if \n                     option.sel option.simps(3) prod.sel(2) split_def unit_SE_def)"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n           | Some (x, \\<sigma>') \\<Rightarrow>\n               \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "show \" ?P n \\<Longrightarrow> ?P (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow>\n            \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n    \\<forall>\\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> Suc n \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n        | Some (x, \\<sigma>') \\<Rightarrow>\n            \\<not> cond \\<sigma>' \\<and> P \\<sigma>')", "apply(auto,subst while_SE_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> case (_if_SE cond (M ;- _while_SE cond M)\n                                (unit\\<^sub>S\\<^sub>E ()))\n                               \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "apply(case_tac \"\\<not>cond \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; \\<not> cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (_if_SE cond (M ;- _while_SE cond M)\n                                (unit\\<^sub>S\\<^sub>E ()))\n                               \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n;\n        \\<not> \\<not> cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (_if_SE cond (M ;- _while_SE cond M)\n                                (unit\\<^sub>S\\<^sub>E ()))\n                               \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "apply (simp add: if_SE_def unit_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n;\n        \\<not> \\<not> cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (_if_SE cond (M ;- _while_SE cond M)\n                                (unit\\<^sub>S\\<^sub>E ()))\n                               \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "apply(simp add: if_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "apply(case_tac \"M \\<sigma> = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "using measure"], ["proof (prove)\nusing this:\n  \\<forall>\\<sigma>.\n     cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n     M \\<sigma> \\<noteq> None \\<and> f (snd (the (M \\<sigma>))) < f \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "proof (auto simp: bind_SE'_def bind_SE_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> b.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = Some ((), b)\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) b of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "fix \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> b.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = Some ((), b)\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) b of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "assume 1 : \"cond \\<sigma>\"\n            and  2 : \"M \\<sigma> = Some ((), \\<sigma>')\"\n            and  3 : \" P \\<sigma>\"\n            and  4 : \" f \\<sigma> \\<le> Suc n\"\n            and  hyp : \"?P n\""], ["proof (state)\nthis:\n  cond \\<sigma>\n  M \\<sigma> = Some ((), \\<sigma>')\n  P \\<sigma>\n  f \\<sigma> \\<le> Suc n\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> b.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = Some ((), b)\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) b of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "have 5 : \"P \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma>'", "by (metis (no_types, lifting) * 1 2 3 case_prodD hoare\\<^sub>3_def option.simps(5))"], ["proof (state)\nthis:\n  P \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> b.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = Some ((), b)\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) b of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "have 6 : \"snd(the(M \\<sigma>)) = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (the (M \\<sigma>)) = \\<sigma>'", "by (simp add: 2)"], ["proof (state)\nthis:\n  snd (the (M \\<sigma>)) = \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> b.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = Some ((), b)\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) b of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "have 7 : \"cond \\<sigma>' \\<Longrightarrow> f \\<sigma>' \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond \\<sigma>' \\<Longrightarrow> f \\<sigma>' \\<le> n", "using 1 3 4 6 leD measure"], ["proof (prove)\nusing this:\n  cond \\<sigma>\n  P \\<sigma>\n  f \\<sigma> \\<le> Suc n\n  snd (the (M \\<sigma>)) = \\<sigma>'\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n  \\<forall>\\<sigma>.\n     cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n     M \\<sigma> \\<noteq> None \\<and> f (snd (the (M \\<sigma>))) < f \\<sigma>\n\ngoal (1 subgoal):\n 1. cond \\<sigma>' \\<Longrightarrow> f \\<sigma>' \\<le> n", "by auto"], ["proof (state)\nthis:\n  cond \\<sigma>' \\<Longrightarrow> f \\<sigma>' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> b.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n                   (case (_while_SE cond M) \\<sigma> of\n                    None \\<Rightarrow> False\n                    | Some (x, \\<sigma>') \\<Rightarrow>\n                        \\<not> cond \\<sigma>' \\<and> P \\<sigma>');\n        P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        M \\<sigma> = Some ((), b)\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) b of\n                         None \\<Rightarrow> False\n                         | Some (xa, \\<sigma>') \\<Rightarrow>\n                             \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "show   \"case (while\\<^sub>S\\<^sub>E cond do M od) \\<sigma>' of None \\<Rightarrow> False\n                                                  | Some (xa, \\<sigma>') \\<Rightarrow> \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case (_while_SE cond M) \\<sigma>' of None \\<Rightarrow> False\n    | Some (xa, \\<sigma>') \\<Rightarrow>\n        \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "using 1 3 4 5 6 hyp measure"], ["proof (prove)\nusing this:\n  cond \\<sigma>\n  P \\<sigma>\n  f \\<sigma> \\<le> Suc n\n  P \\<sigma>'\n  snd (the (M \\<sigma>)) = \\<sigma>'\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n  \\<forall>\\<sigma>.\n     cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n     M \\<sigma> \\<noteq> None \\<and> f (snd (the (M \\<sigma>))) < f \\<sigma>\n\ngoal (1 subgoal):\n 1. case (_while_SE cond M) \\<sigma>' of None \\<Rightarrow> False\n    | Some (xa, \\<sigma>') \\<Rightarrow>\n        \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  case (_while_SE cond M) \\<sigma>' of None \\<Rightarrow> False\n  | Some (xa, \\<sigma>') \\<Rightarrow>\n      \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>') \\<Longrightarrow>\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> Suc n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n \\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n       | Some (x, \\<sigma>') \\<Rightarrow>\n           \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "show \"\\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow>\n         case (while\\<^sub>S\\<^sub>E cond do M od) \\<sigma> of None \\<Rightarrow> False\n         | Some (x, \\<sigma>') \\<Rightarrow> \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n       | Some (x, \\<sigma>') \\<Rightarrow>\n           \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "using \"*\""], ["proof (prove)\nusing this:\n  \\<forall>n \\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow>\n          \\<not> cond \\<sigma>' \\<and> P \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> False\n       | Some (x, \\<sigma>') \\<Rightarrow>\n           \\<not> cond \\<sigma>' \\<and> P \\<sigma>'", "by blast"], ["proof (state)\nthis:\n  P ?\\<sigma> \\<Longrightarrow>\n  case (_while_SE cond M) ?\\<sigma> of None \\<Rightarrow> False\n  | Some (x, \\<sigma>') \\<Rightarrow>\n      \\<not> cond \\<sigma>' \\<and> P \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_irpt :\n  assumes  * : \"\\<lbrace>\\<lambda>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>  M \\<lbrace>\\<lambda>_. P\\<rbrace> \\<or> \\<lbrace>\\<lambda>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma>\\<rbrace>  M  \\<dagger>\"\n  and measure: \"\\<forall>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow> M \\<sigma> = None \\<or> f(snd(the(M \\<sigma>))) < ((f \\<sigma>)::nat)\"\n  and enabled: \"\\<forall>\\<sigma>. P \\<sigma> \\<longrightarrow> cond \\<sigma>\"\n  shows        \"\\<lbrace>P\\<rbrace>while\\<^sub>S\\<^sub>E cond do M od \\<dagger>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>P\\<rbrace> _while_SE cond M\\<dagger>", "unfolding hoare\\<^sub>3_def hoare\\<^sub>3'_def bind_SE_def if_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n        | Some a \\<Rightarrow> False)", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n       | Some a \\<Rightarrow> False", "have * : \"\\<forall>n. \\<forall> \\<sigma>. P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>  \n                     (case (while\\<^sub>S\\<^sub>E cond do M od) \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False)\" \n            (is \"\\<forall>n. ?P n \")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n \\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n        | Some a \\<Rightarrow> False)", "proof (rule allI, rename_tac n, induct_tac n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)\n 2. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)\n 2. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "have 1 : \"\\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> cond \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> cond \\<sigma>", "by (simp add: enabled * )"], ["proof (state)\nthis:\n  P ?\\<sigma> \\<Longrightarrow> cond ?\\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)\n 2. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "show \"?P 0 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n        | Some a \\<Rightarrow> False)", "apply(auto,frule 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> = 0; cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "by (metis assms(2) bind_SE'_def bind_SE_def gr_implies_not0 if_SE_def option.case(1) \n                           option.case_eq_if  while_SE_unfold)"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> 0 \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "fix k n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "assume hyp : \"?P n\""], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "have 1 : \"\\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> cond \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> cond \\<sigma>", "by (simp add: enabled * )"], ["proof (state)\nthis:\n  P ?\\<sigma> \\<Longrightarrow> cond ?\\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False) \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          P \\<sigma> \\<and> f \\<sigma> \\<le> Suc na \\<longrightarrow>\n          (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n           | Some a \\<Rightarrow> False)", "show \"?P (Suc n) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P \\<sigma> \\<and> f \\<sigma> \\<le> Suc n \\<longrightarrow>\n       (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n        | Some a \\<Rightarrow> False)", "apply(auto, frule 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "apply(subst while_SE_unfold, auto simp: if_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "proof(insert *,simp_all add: hoare\\<^sub>3_def hoare\\<^sub>3'_def, erule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> False\n            | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "fix \\<sigma>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> False\n            | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "assume \"P \\<sigma>\"\n         and   \"f \\<sigma> \\<le> Suc n\"\n         and   \"cond \\<sigma>\"\n         and   ** : \"\\<forall>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow> (case M \\<sigma> of None \\<Rightarrow> False | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\""], ["proof (state)\nthis:\n  P \\<sigma>\n  f \\<sigma> \\<le> Suc n\n  cond \\<sigma>\n  \\<forall>\\<sigma>.\n     cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n     (case M \\<sigma> of None \\<Rightarrow> False\n      | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> False\n            | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "obtain \"(case M \\<sigma> of None \\<Rightarrow> False | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case M \\<sigma> of None \\<Rightarrow> False\n     | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>' \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by (simp add: \"**\" \\<open>P \\<sigma>\\<close> \\<open>cond \\<sigma>\\<close>)"], ["proof (state)\nthis:\n  case M \\<sigma> of None \\<Rightarrow> False\n  | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> False\n            | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False\n 2. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "then"], ["proof (chain)\npicking this:\n  case M \\<sigma> of None \\<Rightarrow> False\n  | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>'", "show \"case (M ;- (while\\<^sub>S\\<^sub>E cond do M od)) \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False\""], ["proof (prove)\nusing this:\n  case M \\<sigma> of None \\<Rightarrow> False\n  | Some (x, \\<sigma>') \\<Rightarrow> P \\<sigma>'\n\ngoal (1 subgoal):\n 1. case (M ;- _while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n    | Some a \\<Rightarrow> False", "apply(case_tac \"M \\<sigma>\", auto, rename_tac \\<sigma>', simp add: bind_SE'_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       \\<lbrakk>P \\<sigma>'; M \\<sigma> = Some ((), \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma>' of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       \\<lbrakk>P \\<sigma>'; M \\<sigma> = Some ((), \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma>' of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "fix \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       \\<lbrakk>P \\<sigma>'; M \\<sigma> = Some ((), \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma>' of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "assume \"P \\<sigma>'\"\n                and \"M \\<sigma> = Some ((), \\<sigma>')\""], ["proof (state)\nthis:\n  P \\<sigma>'\n  M \\<sigma> = Some ((), \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       \\<lbrakk>P \\<sigma>'; M \\<sigma> = Some ((), \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma>' of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "have \"cond \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond \\<sigma>'", "by (simp add: \\<open>P \\<sigma>'\\<close> enabled)"], ["proof (state)\nthis:\n  cond \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       \\<lbrakk>P \\<sigma>'; M \\<sigma> = Some ((), \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma>' of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "have \"f \\<sigma>' \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sigma>' \\<le> n", "using \\<open>M \\<sigma> = Some ((), \\<sigma>')\\<close> \\<open>P \\<sigma>\\<close> \\<open>cond \\<sigma>\\<close> \\<open>f \\<sigma> \\<le> Suc n\\<close> measure"], ["proof (prove)\nusing this:\n  M \\<sigma> = Some ((), \\<sigma>')\n  P \\<sigma>\n  cond \\<sigma>\n  f \\<sigma> \\<le> Suc n\n  \\<forall>\\<sigma>.\n     cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n     M \\<sigma> = None \\<or> f (snd (the (M \\<sigma>))) < f \\<sigma>\n\ngoal (1 subgoal):\n 1. f \\<sigma>' \\<le> n", "by fastforce"], ["proof (state)\nthis:\n  f \\<sigma>' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       \\<lbrakk>P \\<sigma>'; M \\<sigma> = Some ((), \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> case (_while_SE cond M) \\<sigma>' of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "show \"case (while\\<^sub>S\\<^sub>E cond do M od) \\<sigma>' of None \\<Rightarrow> True | Some a \\<Rightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case (_while_SE cond M) \\<sigma>' of None \\<Rightarrow> True\n    | Some a \\<Rightarrow> False", "using hyp"], ["proof (prove)\nusing this:\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. case (_while_SE cond M) \\<sigma>' of None \\<Rightarrow> True\n    | Some a \\<Rightarrow> False", "by (simp add: \\<open>P \\<sigma>'\\<close> \\<open>f \\<sigma>' \\<le> n\\<close>)"], ["proof (state)\nthis:\n  case (_while_SE cond M) \\<sigma>' of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case (M ;- _while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "fix \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "assume \"P \\<sigma>\"\n         and   \"f \\<sigma> \\<le> Suc n\"\n         and   \"cond \\<sigma>\"  \n         and * : \"\\<forall>\\<sigma>. cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow> (case M \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False)\""], ["proof (state)\nthis:\n  P \\<sigma>\n  f \\<sigma> \\<le> Suc n\n  cond \\<sigma>\n  \\<forall>\\<sigma>.\n     cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n     (case M \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "obtain ** : \"(case M \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case M \\<sigma> of None \\<Rightarrow> True\n     | Some a \\<Rightarrow> False \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by (simp add: \"*\" \\<open>P \\<sigma>\\<close> \\<open>cond \\<sigma>\\<close>)"], ["proof (state)\nthis:\n  case M \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "have \"M \\<sigma> = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<sigma> = None", "by (simp add: \"**\" option.disc_eq_case(1))"], ["proof (state)\nthis:\n  M \\<sigma> = None\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>P \\<sigma>; f \\<sigma> \\<le> Suc n; cond \\<sigma>;\n        \\<forall>\\<sigma>.\n           cond \\<sigma> \\<and> P \\<sigma> \\<longrightarrow>\n           (case M \\<sigma> of None \\<Rightarrow> True\n            | Some a \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> case (M ;- _while_SE cond M) \\<sigma> of\n                         None \\<Rightarrow> True\n                         | Some a \\<Rightarrow> False", "show \"case (M ;- (while\\<^sub>S\\<^sub>E cond do M od)) \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case (M ;- _while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n    | Some a \\<Rightarrow> False", "by (simp add: \\<open>M \\<sigma> = None\\<close> bind_SE'_def bind_SE_def)"], ["proof (state)\nthis:\n  case (M ;- _while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> Suc n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n \\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n       | Some a \\<Rightarrow> False", "show \"\\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> case (while\\<^sub>S\\<^sub>E cond do M od) \\<sigma> of None \\<Rightarrow> True | Some a \\<Rightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n       | Some a \\<Rightarrow> False", "using *"], ["proof (prove)\nusing this:\n  \\<forall>n \\<sigma>.\n     P \\<sigma> \\<and> f \\<sigma> \\<le> n \\<longrightarrow>\n     (case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n      | Some a \\<Rightarrow> False)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       P \\<sigma> \\<Longrightarrow>\n       case (_while_SE cond M) \\<sigma> of None \\<Rightarrow> True\n       | Some a \\<Rightarrow> False", "by blast"], ["proof (state)\nthis:\n  P ?\\<sigma> \\<Longrightarrow>\n  case (_while_SE cond M) ?\\<sigma> of None \\<Rightarrow> True\n  | Some a \\<Rightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Experimental Alternative Definitions (Transformer-Style Rely-Guarantee)\\<close>"], ["", "definition  hoare\\<^sub>1 :: \"('\\<sigma> \\<Rightarrow> bool) \\<Rightarrow> ('\\<alpha>, '\\<sigma>)MON\\<^sub>S\\<^sub>E \\<Rightarrow> ('\\<alpha> \\<Rightarrow> '\\<sigma> \\<Rightarrow> bool) \\<Rightarrow> bool\" (\"\\<turnstile>\\<^sub>1 ({(1_)}/ (_)/ {(1_)})\" 50)\nwhere  \"(\\<turnstile>\\<^sub>1{P} M {Q} ) = (\\<forall>\\<sigma>. \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (Q x)))\""], ["", "(* Problem: Severe Deviation for the case of an unsatisfyabke precondition *)"], ["", "definition  hoare\\<^sub>2 :: \"('\\<sigma> \\<Rightarrow> bool) \\<Rightarrow> ('\\<alpha>, '\\<sigma>)MON\\<^sub>S\\<^sub>E \\<Rightarrow> ('\\<alpha> \\<Rightarrow> '\\<sigma> \\<Rightarrow> bool) \\<Rightarrow> bool\" (\"\\<turnstile>\\<^sub>2 ({(1_)}/ (_)/ {(1_)})\" 50)\nwhere  \"(\\<turnstile>\\<^sub>2{P} M {Q} ) = (\\<forall>\\<sigma>. P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile>  (x \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (Q x))))\""], ["", "end"]]}