{"file_name": "/home/qj213/afp-2021-10-22/thys/Clean/src/Symbex_MonadSE.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Clean", "problem_names": ["lemma exec_unit_SE [simp]: \"(\\<sigma> \\<Turnstile> (result P)) = (P)\"", "lemma exec_unit_SE' [simp]: \"(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. Some (f \\<sigma>, \\<sigma>))) = (f \\<sigma>\\<^sub>0)\"", "lemma exec_fail_SE [simp]: \"(\\<sigma> \\<Turnstile> fail\\<^sub>S\\<^sub>E) = False\"", "lemma exec_fail_SE'[simp]: \"\\<not>(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. None))\"", "lemma  exec_bind_SE_failure:\n\"A \\<sigma> = None \\<Longrightarrow> \\<not>(\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)))\"", "lemma  exec_bind_SE_failure2:\n\"A \\<sigma> = None \\<Longrightarrow> \\<not>(\\<sigma> \\<Turnstile> ((A ;- M)))\"", "lemma exec_bind_SE_success: \n\"A \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s))) = (\\<sigma>' \\<Turnstile> (M b))\"", "lemma exec_bind_SE_success2: \n\"A \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma> \\<Turnstile> ((A ;- M))) = (\\<sigma>' \\<Turnstile> M)\"", "lemma exec_bind_SE_success': (* atomic boolean Monad \"Query Functions\" *) \n\"M \\<sigma> = Some(f \\<sigma>,\\<sigma>) \\<Longrightarrow>  (\\<sigma> \\<Turnstile> M) = f \\<sigma>\"", "lemma exec_bind_SE_success'':\n\"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> v \\<sigma>'. the(A \\<sigma>) = (v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\"", "lemma exec_bind_SE_success''':\n\"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> a. (A \\<sigma>) = Some a \\<and> (snd a) \\<Turnstile> (M (fst a))\"", "lemma  exec_bind_SE_success'''' :\n\"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> v \\<sigma>'. A \\<sigma> = Some(v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\"", "lemma valid_bind_cong : \" f \\<sigma> = g \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (x \\<leftarrow> f ; M x)) = (\\<sigma> \\<Turnstile> (x \\<leftarrow> g ; M x))\"", "lemma valid_bind'_cong : \" f \\<sigma> = g \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> f ;- M) = (\\<sigma> \\<Turnstile> g ;- M)\"", "lemma valid_mbind_mt : \"(\\<sigma> \\<Turnstile> ( s \\<leftarrow>  mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s))) = P [] \"", "lemma valid_mbind_mtE: \"\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s)) \\<Longrightarrow> (P [] \\<Longrightarrow> Q) \\<Longrightarrow> Q\"", "lemma valid_mbind'_mt : \"(\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p [] f; unit\\<^sub>S\\<^sub>E (P s))) = P [] \"", "lemma valid_mbind'_mtE: \"\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p [] f; unit\\<^sub>S\\<^sub>E (P s)) \\<Longrightarrow> (P [] \\<Longrightarrow> Q) \\<Longrightarrow> Q\"", "lemma valid_mbind''_mt : \"(\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s))) = P [] \"", "lemma valid_mbind''_mtE: \"\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s)) \\<Longrightarrow> (P [] \\<Longrightarrow> Q) \\<Longrightarrow> Q\"", "lemma exec_mbindFSave_failure: \n\"ioprog a \\<sigma> = None \\<Longrightarrow> \n   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e (a#S) ioprog ; M s)) =  (\\<sigma> \\<Turnstile> (M []))\"", "lemma exec_mbindFStop_failure: \n\"ioprog a \\<sigma> = None \\<Longrightarrow> \n   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (a#S) ioprog ; M s)) =  (False)\"", "lemma exec_mbindFPurge_failure: \n\"ioprog a \\<sigma> = None \\<Longrightarrow> \n   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (a#S) ioprog ; M s)) = (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (S) ioprog ; M s))\"", "lemma exec_mbindFSave_success : \n\"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n   (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e (a#S) ioprog ; M s)) = \n   (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S ioprog ; M (b#s)))\"", "lemma exec_mbindFStop_success : \n\"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n   (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (a#S) ioprog ; M s)) = \n   (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S ioprog ; M (b#s)))\"", "lemma exec_mbindFPurge_success : \n\"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n   (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (a#S) ioprog ; M s)) = \n   (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog ; M (b#s)))\"", "lemma exec_mbindFSave:\n\"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e  (a#S) ioprog ; return (P s))) =\n    (case ioprog a \\<sigma> of\n       None \\<Rightarrow> (\\<sigma>  \\<Turnstile> (return (P [])))\n     | Some(b,\\<sigma>') \\<Rightarrow> (\\<sigma>'  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e  S ioprog ; return (P (b#s)))))\"", "lemma mbind_eq_sexec: \nassumes * : \"\\<And>b \\<sigma>'. f a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n             (os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P (b#os)) = (os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P' (b#os))\"\nshows       \"( a \\<leftarrow> f a;  x \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P (a # x)) \\<sigma> = \n             ( a \\<leftarrow> f a;  x \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P'(a # x)) \\<sigma>\"", "lemma mbind_eq_sexec': \nassumes * : \"\\<And>b \\<sigma>'. f a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n             (P (b))\\<sigma>' = (P' (b))\\<sigma>'\"\nshows       \"( a \\<leftarrow> f a;  P (a)) \\<sigma> = \n             ( a \\<leftarrow> f a;  P'(a)) \\<sigma>\"", "lemma mbind'_concat:\n\"(os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (S@T) f; P os) = (os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; os' \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p T f; P (os @ os'))\"", "lemma assert_suffix_inv : \n              \"\\<sigma> \\<Turnstile> ( _ \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p xs istep; assert\\<^sub>S\\<^sub>E (P)) \n               \\<Longrightarrow> \\<forall>\\<sigma>. P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> (_ \\<leftarrow> istep x; assert\\<^sub>S\\<^sub>E (P)))\n               \\<Longrightarrow> \\<sigma> \\<Turnstile> ( _ \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (xs @ [x]) istep; assert\\<^sub>S\\<^sub>E (P))\"", "lemma exec_mbindFSave_E:\nassumes seq : \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e (a#S) ioprog ;  (P s)))\"\n  and   none: \"ioprog a \\<sigma> = None \\<Longrightarrow> (\\<sigma> \\<Turnstile> (P [])) \\<Longrightarrow> Q\"\n  and   some: \"\\<And> b \\<sigma>'. ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S ioprog;(P (b#s)))) \\<Longrightarrow> Q \"\nshows   \"Q\"", "lemma exec_mbindFStop_E:\nassumes seq : \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (a#S) ioprog ; (P s)))\"\n  and   some: \"\\<And>b \\<sigma>'. ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma>'\\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S ioprog;(P(b#s)))) \\<Longrightarrow> Q\"\nshows   \"Q\"", "lemma exec_mbindFPurge_E:\nassumes seq : \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (a#S) ioprog ;  (P s)))\"\n  and   none: \"ioprog a \\<sigma> = None \\<Longrightarrow> (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog;(P (s)))) \\<Longrightarrow> Q\"\n  and   some: \"\\<And> b \\<sigma>'. ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog;(P (b#s)))) \\<Longrightarrow> Q \"\nshows   \"Q\"", "lemma assert_disch1 :\" P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) = (\\<sigma> \\<Turnstile> (M True))\"", "lemma assert_disch2 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P ; M s))\"", "lemma assert_disch3 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (assert\\<^sub>S\\<^sub>E P))\"", "lemma assert_disch4 :\" P \\<sigma> \\<Longrightarrow>  (\\<sigma> \\<Turnstile> (assert\\<^sub>S\\<^sub>E P))\"", "lemma assert_simp : \"(\\<sigma> \\<Turnstile> assert\\<^sub>S\\<^sub>E P) = P \\<sigma>\"", "lemmas assert_D = assert_simp[THEN iffD1]", "lemma assert_bind_simp : \"(\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) = (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> (M True)))\"", "lemmas assert_bindD = assert_bind_simp[THEN iffD1]", "lemma assume_D : \"(\\<sigma> \\<Turnstile> (_ \\<leftarrow> assume\\<^sub>S\\<^sub>E P; M)) \\<Longrightarrow> \\<exists> \\<sigma>. (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> M) )\"", "lemma assume_E :\nassumes *  : \"\\<sigma> \\<Turnstile> ( _ \\<leftarrow> assume\\<^sub>S\\<^sub>E P; M) \"\nand     ** : \"\\<And> \\<sigma>. P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> M  \\<Longrightarrow> Q\"\nshows  \"Q\"", "lemma assume_E' :\nassumes *  : \"\\<sigma> \\<Turnstile> assume\\<^sub>S\\<^sub>E P ;- M\"\nand     ** : \"\\<And> \\<sigma>. P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> M  \\<Longrightarrow> Q\"\nshows  \"Q\"", "lemma if_SE_D1 : \"P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = (\\<sigma> \\<Turnstile> B\\<^sub>1)\"", "lemma if_SE_D1' : \"P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = (\\<sigma> \\<Turnstile> (B\\<^sub>1;-M))\"", "lemma if_SE_D2 : \"\\<not> P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = (\\<sigma> \\<Turnstile> B\\<^sub>2)\"", "lemma if_SE_D2' : \"\\<not> P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = (\\<sigma> \\<Turnstile> B\\<^sub>2;-M)\"", "lemma if_SE_split_asm : \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = ((P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<or> (\\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\"", "lemma if_SE_split_asm': \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = ((P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1;-M)) \\<or> (\\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2;-M)))\"", "lemma if_SE_split: \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<and> (\\<not> P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\"", "lemma if_SE_split': \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1;-M)) \\<and> (\\<not> P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>2;-M)))\"", "lemma if_SE_execE:\n  assumes A: \"\\<sigma> \\<Turnstile> ((if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi))\"\n   and   B: \"P \\<sigma>  \\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>1) \\<Longrightarrow> Q\"\n   and   C: \"\\<not> P \\<sigma>\\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>2) \\<Longrightarrow> Q\"\n  shows  \"Q\"", "lemma if_SE_execE':\n  assumes A: \"\\<sigma> \\<Turnstile> ((if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M)\"\n   and   B: \"P \\<sigma>  \\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>1;-M) \\<Longrightarrow> Q\"\n   and   C: \"\\<not> P \\<sigma>\\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>2;-M) \\<Longrightarrow> Q\"\n  shows  \"Q\"", "lemma exec_while : \n\"(\\<sigma> \\<Turnstile> ((while\\<^sub>S\\<^sub>E b do c od) ;- M)) = \n (\\<sigma> \\<Turnstile> ((if\\<^sub>S\\<^sub>E b then c ;- (while\\<^sub>S\\<^sub>E b do c od) else unit\\<^sub>S\\<^sub>E ()fi) ;- M))\"", "lemmas exec_whileD = exec_while[THEN iffD1]", "lemma if_SE_execE'':\n\"\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi) ;- M \n\\<Longrightarrow> (P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M \\<Longrightarrow> Q) \n\\<Longrightarrow> (\\<not> P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> B\\<^sub>2 ;- M \\<Longrightarrow> Q) \n\\<Longrightarrow> Q\"", "lemma if_SE_execE''_pos:\n\"\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi) ;- M \n\\<Longrightarrow> (P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M \\<Longrightarrow> Q) \n\\<Longrightarrow> (opaque (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi) ;- M) \\<Longrightarrow> Q) \n\\<Longrightarrow> Q\"", "lemma [code]:\n  \"(\\<sigma> \\<Turnstile> m) = (case (m \\<sigma>) of None  \\<Rightarrow> False | (Some (x,y))  \\<Rightarrow> x)\"", "lemma \"P  \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  (x=X) \\<and> Q x \\<sigma>))\"", "lemma \"\\<forall>\\<sigma>. \\<exists> X. \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  x=X \\<and> Q x \\<sigma>))\"", "lemma monadic_sequence_rule:\n      \"\\<And> X \\<sigma>\\<^sub>1. (\\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>'. (\\<sigma>=\\<sigma>') \\<and>  P \\<sigma>) ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  (x=X) \\<and> (\\<sigma>=\\<sigma>\\<^sub>1) \\<and> Q x \\<sigma>)))\n               \\<and> \n               (\\<sigma>\\<^sub>1 \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  (\\<sigma>=\\<sigma>\\<^sub>1) \\<and> Q x \\<sigma>) ; y  \\<leftarrow> M'; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  R x y \\<sigma>)))\n       \\<Longrightarrow>\n               \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>'. (\\<sigma>=\\<sigma>') \\<and>  P \\<sigma>) ; x  \\<leftarrow> M; y  \\<leftarrow> M'; assert\\<^sub>S\\<^sub>E (R x y))\"", "lemma \"\\<exists> X. \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  x=X \\<and> Q x \\<sigma>))\n       \\<Longrightarrow> \n            \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>. Q x \\<sigma>))\"", "lemma exec_skip:\n\"(\\<sigma> \\<Turnstile> skip\\<^sub>S\\<^sub>E ;- M) = (\\<sigma> \\<Turnstile> M)\"", "lemmas exec_skipD = exec_skip[THEN iffD1]", "lemma mbindFSave_vs_mbindFStop : \n  \"(\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e \\<iota>s ioprog); result(length \\<iota>s = length os \\<and> P \\<iota>s os))) = \n   (\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p \\<iota>s ioprog); result(P \\<iota>s os)))\"", "lemma mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e_vs_mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p:\nassumes A: \"\\<forall> \\<iota> \\<sigma>. ioprog \\<iota> \\<sigma> \\<noteq> None\"\nshows      \"(\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e \\<iota>s ioprog); P os)) = \n            (\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p \\<iota>s ioprog); P os))\""], "translations": [["", "lemma exec_unit_SE [simp]: \"(\\<sigma> \\<Turnstile> (result P)) = (P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> unit\\<^sub>S\\<^sub>E P) = P", "by(auto simp: valid_SE_def unit_SE_def)"], ["", "lemma exec_unit_SE' [simp]: \"(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. Some (f \\<sigma>, \\<sigma>))) = (f \\<sigma>\\<^sub>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^sub>0 \\<Turnstile>\n     (\\<lambda>\\<sigma>. Some (f \\<sigma>, \\<sigma>))) =\n    f \\<sigma>\\<^sub>0", "by(simp add: valid_SE_def )"], ["", "lemma exec_fail_SE [simp]: \"(\\<sigma> \\<Turnstile> fail\\<^sub>S\\<^sub>E) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> fail\\<^sub>S\\<^sub>E) = False", "by(auto simp: valid_SE_def fail_SE_def)"], ["", "lemma exec_fail_SE'[simp]: \"\\<not>(\\<sigma>\\<^sub>0 \\<Turnstile> (\\<lambda>\\<sigma>. None))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<sigma>\\<^sub>0 \\<Turnstile> Map.empty)", "by(simp add: valid_SE_def )"], ["", "text\\<open>The following the rules are in a sense the heart of the entire symbolic execution approach\\<close>"], ["", "lemma  exec_bind_SE_failure:\n\"A \\<sigma> = None \\<Longrightarrow> \\<not>(\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sigma> = None \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def)"], ["", "lemma  exec_bind_SE_failure2:\n\"A \\<sigma> = None \\<Longrightarrow> \\<not>(\\<sigma> \\<Turnstile> ((A ;- M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sigma> = None \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile> A ;- M)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def bind_SE'_def)"], ["", "lemma exec_bind_SE_success: \n\"A \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s))) = (\\<sigma>' \\<Turnstile> (M b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M) =\n    (\\<sigma>' \\<Turnstile> M b)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def )"], ["", "lemma exec_bind_SE_success2: \n\"A \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma> \\<Turnstile> ((A ;- M))) = (\\<sigma>' \\<Turnstile> M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> A ;- M) = (\\<sigma>' \\<Turnstile> M)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def bind_SE'_def )"], ["", "lemma exec_bind_SE_success': (* atomic boolean Monad \"Query Functions\" *) \n\"M \\<sigma> = Some(f \\<sigma>,\\<sigma>) \\<Longrightarrow>  (\\<sigma> \\<Turnstile> M) = f \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<sigma> = Some (f \\<sigma>, \\<sigma>) \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> M) = f \\<sigma>", "by(simp add: valid_SE_def unit_SE_def bind_SE_def )"], ["", "lemma exec_bind_SE_success'':\n\"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> v \\<sigma>'. the(A \\<sigma>) = (v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M \\<Longrightarrow>\n    \\<exists>v \\<sigma>'.\n       the (A \\<sigma>) = (v, \\<sigma>') \\<and> \\<sigma>' \\<Turnstile> M v", "apply(auto simp: valid_SE_def unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (the (A \\<sigma>) =\n                                     (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (the (A \\<sigma>) = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply(cases \"A \\<sigma>\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply(drule_tac x=\"A \\<sigma>\" and f=the in arg_cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply(rule_tac x=\"fst aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>'.\n                            (\\<exists>a b.\n                                M (fst aa)\n                                 (aa = (fst aa, \\<sigma>') \\<and>\n                                  \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M (fst aa)\n (aa = (fst aa, \\<sigma>') \\<and> \\<sigma>')))", "apply(rule_tac x=\"snd aa\" in exI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec_bind_SE_success''':\n\"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> a. (A \\<sigma>) = Some a \\<and> (snd a) \\<Turnstile> (M (fst a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M \\<Longrightarrow>\n    \\<exists>a. A \\<sigma> = Some a \\<and> snd a \\<Turnstile> M (fst a)", "apply(auto simp: valid_SE_def unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aa ba.\n                                M a (A \\<sigma> = Some (a, b) \\<and> b) =\n                                Some (aa, ba)) \\<and>\n                            fst (the (M a\n (A \\<sigma> = Some (a, b) \\<and> b)))", "apply(cases \"A \\<sigma>\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aaa ba.\n                                M a (aa = (a, b) \\<and> b) =\n                                Some (aaa, ba)) \\<and>\n                            fst (the (M a (aa = (a, b) \\<and> b)))", "apply(drule_tac x=\"A \\<sigma>\" and f=the in arg_cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (\\<exists>aaa ba.\n                                M a (aa = (a, b) \\<and> b) =\n                                Some (aaa, ba)) \\<and>\n                            fst (the (M a (aa = (a, b) \\<and> b)))", "apply(rule_tac x=\"fst aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            (\\<exists>a ba.\n                                M (fst aa) (aa = (fst aa, b) \\<and> b) =\n                                Some (a, ba)) \\<and>\n                            fst (the (M (fst aa)\n (aa = (fst aa, b) \\<and> b)))", "apply(rule_tac x=\"snd aa\" in exI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  exec_bind_SE_success'''' :\n\"\\<sigma> \\<Turnstile> ((s \\<leftarrow> A ; M s)) \\<Longrightarrow>  \\<exists> v \\<sigma>'. A \\<sigma> = Some(v,\\<sigma>') \\<and> \\<sigma>' \\<Turnstile> (M v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E A M \\<Longrightarrow>\n    \\<exists>v \\<sigma>'.\n       A \\<sigma> = Some (v, \\<sigma>') \\<and> \\<sigma>' \\<Turnstile> M v", "apply(auto simp: valid_SE_def unit_SE_def bind_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a;\n        (case A \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, xb) \\<Rightarrow> M xa xb) =\n        Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (A \\<sigma> = Some (v, \\<sigma>') \\<and>\n                                     \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (A \\<sigma> = Some (v, \\<sigma>') \\<and> \\<sigma>')))", "apply(cases \"A \\<sigma>\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        A \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply(drule_tac x=\"A \\<sigma>\" and f=the in arg_cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v \\<sigma>'.\n                            (\\<exists>a b.\n                                M v (aa = (v, \\<sigma>') \\<and> \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M v\n (aa = (v, \\<sigma>') \\<and> \\<sigma>')))", "apply(rule_tac x=\"fst aa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa.\n       \\<lbrakk>a;\n        (case aa of (x, xa) \\<Rightarrow> M x xa) = Some (True, b);\n        the (A \\<sigma>) = aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>'.\n                            (\\<exists>a b.\n                                M (fst aa)\n                                 (aa = (fst aa, \\<sigma>') \\<and>\n                                  \\<sigma>') =\n                                Some (a, b)) \\<and>\n                            fst (the (M (fst aa)\n (aa = (fst aa, \\<sigma>') \\<and> \\<sigma>')))", "apply(rule_tac x=\"snd aa\" in exI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma valid_bind_cong : \" f \\<sigma> = g \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (x \\<leftarrow> f ; M x)) = (\\<sigma> \\<Turnstile> (x \\<leftarrow> g ; M x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sigma> = g \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E f M) =\n    (\\<sigma> \\<Turnstile> bind\\<^sub>S\\<^sub>E g M)", "unfolding bind_SE'_def bind_SE_def valid_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sigma> = g \\<sigma> \\<Longrightarrow>\n    ((case f \\<sigma> of None \\<Rightarrow> None\n      | Some (xa, xb) \\<Rightarrow> M xa xb) \\<noteq>\n     None \\<and>\n     fst (the (case f \\<sigma> of None \\<Rightarrow> None\n               | Some (xa, xb) \\<Rightarrow> M xa xb))) =\n    ((case g \\<sigma> of None \\<Rightarrow> None\n      | Some (xa, xb) \\<Rightarrow> M xa xb) \\<noteq>\n     None \\<and>\n     fst (the (case g \\<sigma> of None \\<Rightarrow> None\n               | Some (xa, xb) \\<Rightarrow> M xa xb)))", "by simp"], ["", "lemma valid_bind'_cong : \" f \\<sigma> = g \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> f ;- M) = (\\<sigma> \\<Turnstile> g ;- M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sigma> = g \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> f ;- M) = (\\<sigma> \\<Turnstile> g ;- M)", "unfolding bind_SE'_def bind_SE_def valid_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sigma> = g \\<sigma> \\<Longrightarrow>\n    ((case f \\<sigma> of None \\<Rightarrow> None\n      | Some (uu_, xa) \\<Rightarrow> M xa) \\<noteq>\n     None \\<and>\n     fst (the (case f \\<sigma> of None \\<Rightarrow> None\n               | Some (uu_, xa) \\<Rightarrow> M xa))) =\n    ((case g \\<sigma> of None \\<Rightarrow> None\n      | Some (uu_, xa) \\<Rightarrow> M xa) \\<noteq>\n     None \\<and>\n     fst (the (case g \\<sigma> of None \\<Rightarrow> None\n               | Some (uu_, xa) \\<Rightarrow> M xa)))", "by simp"], ["", "text\\<open>Recall \\verb+mbind_unit+ for the base case.\\<close>"], ["", "lemma valid_mbind_mt : \"(\\<sigma> \\<Turnstile> ( s \\<leftarrow>  mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s))) = P [] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        [] f)\n      (unit\\<^sub>S\\<^sub>E (P s))) =\n    P []", "by simp"], ["", "lemma valid_mbind_mtE: \"\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s)) \\<Longrightarrow> (P [] \\<Longrightarrow> Q) \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             _bind_SE s\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                [] f)\n              (unit\\<^sub>S\\<^sub>E (P s));\n     P [] \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by(auto simp: valid_mbind_mt)"], ["", "lemma valid_mbind'_mt : \"(\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p [] f; unit\\<^sub>S\\<^sub>E (P s))) = P [] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        [] f)\n      (unit\\<^sub>S\\<^sub>E (P s))) =\n    P []", "by simp"], ["", "lemma valid_mbind'_mtE: \"\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p [] f; unit\\<^sub>S\\<^sub>E (P s)) \\<Longrightarrow> (P [] \\<Longrightarrow> Q) \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             _bind_SE s\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                [] f)\n              (unit\\<^sub>S\\<^sub>E (P s));\n     P [] \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by(auto simp: valid_mbind'_mt)"], ["", "lemma valid_mbind''_mt : \"(\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s))) = P [] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n        [] f)\n      (unit\\<^sub>S\\<^sub>E (P s))) =\n    P []", "by(simp add: mbind''.simps valid_SE_def bind_SE_def unit_SE_def)"], ["", "lemma valid_mbind''_mtE: \"\\<sigma> \\<Turnstile> ( s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e [] f; unit\\<^sub>S\\<^sub>E (P s)) \\<Longrightarrow> (P [] \\<Longrightarrow> Q) \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             _bind_SE s\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                [] f)\n              (unit\\<^sub>S\\<^sub>E (P s));\n     P [] \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by(auto simp: valid_mbind''_mt)"], ["", "lemma exec_mbindFSave_failure: \n\"ioprog a \\<sigma> = None \\<Longrightarrow> \n   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e (a#S) ioprog ; M s)) =  (\\<sigma> \\<Turnstile> (M []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # S) ioprog)\n      M) =\n    (\\<sigma> \\<Turnstile> M [])", "by(simp add: valid_SE_def unit_SE_def bind_SE_def)"], ["", "lemma exec_mbindFStop_failure: \n\"ioprog a \\<sigma> = None \\<Longrightarrow> \n   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (a#S) ioprog ; M s)) =  (False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # S) ioprog)\n      M) =\n    False", "by(simp add: exec_bind_SE_failure)"], ["", "lemma exec_mbindFPurge_failure: \n\"ioprog a \\<sigma> = None \\<Longrightarrow> \n   (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (a#S) ioprog ; M s)) = (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (S) ioprog ; M s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n        (a # S) ioprog)\n      M) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n        S ioprog)\n      M)", "by(simp add: valid_SE_def unit_SE_def bind_SE_def mbind''.simps)"], ["", "lemma exec_mbindFSave_success : \n\"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n   (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e (a#S) ioprog ; M s)) = \n   (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S ioprog ; M (b#s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # S) ioprog)\n      M) =\n    (\\<sigma>' \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        S ioprog)\n      (M (b # s)))", "unfolding valid_SE_def unit_SE_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    ((case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n            (a # S) ioprog \\<sigma> of\n      None \\<Rightarrow> None\n      | Some (xa, xb) \\<Rightarrow> M xa xb) \\<noteq>\n     None \\<and>\n     fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                     (a # S) ioprog \\<sigma> of\n               None \\<Rightarrow> None\n               | Some (xa, xb) \\<Rightarrow> M xa xb))) =\n    ((case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n            S ioprog \\<sigma>' of\n      None \\<Rightarrow> None\n      | Some (s, xa) \\<Rightarrow> M (b # s) xa) \\<noteq>\n     None \\<and>\n     fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                     S ioprog \\<sigma>' of\n               None \\<Rightarrow> None\n               | Some (s, xa) \\<Rightarrow> M (b # s) xa)))", "by(cases \"mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S ioprog \\<sigma>'\", auto)"], ["", "lemma exec_mbindFStop_success : \n\"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n   (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (a#S) ioprog ; M s)) = \n   (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S ioprog ; M (b#s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # S) ioprog)\n      M) =\n    (\\<sigma>' \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        S ioprog)\n      (M (b # s)))", "unfolding valid_SE_def unit_SE_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    ((case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n            (a # S) ioprog \\<sigma> of\n      None \\<Rightarrow> None\n      | Some (xa, xb) \\<Rightarrow> M xa xb) \\<noteq>\n     None \\<and>\n     fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                     (a # S) ioprog \\<sigma> of\n               None \\<Rightarrow> None\n               | Some (xa, xb) \\<Rightarrow> M xa xb))) =\n    ((case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n            S ioprog \\<sigma>' of\n      None \\<Rightarrow> None\n      | Some (s, xa) \\<Rightarrow> M (b # s) xa) \\<noteq>\n     None \\<and>\n     fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                     S ioprog \\<sigma>' of\n               None \\<Rightarrow> None\n               | Some (s, xa) \\<Rightarrow> M (b # s) xa)))", "by(cases \"mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S ioprog \\<sigma>'\", auto simp:  mbind'.simps)"], ["", "lemma exec_mbindFPurge_success : \n\"ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n   (\\<sigma>  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (a#S) ioprog ; M s)) = \n   (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog ; M (b#s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n        (a # S) ioprog)\n      M) =\n    (\\<sigma>' \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n        S ioprog)\n      (M (b # s)))", "unfolding valid_SE_def unit_SE_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> = Some (b, \\<sigma>') \\<Longrightarrow>\n    ((case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n            (a # S) ioprog \\<sigma> of\n      None \\<Rightarrow> None\n      | Some (xa, xb) \\<Rightarrow> M xa xb) \\<noteq>\n     None \\<and>\n     fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                     (a # S) ioprog \\<sigma> of\n               None \\<Rightarrow> None\n               | Some (xa, xb) \\<Rightarrow> M xa xb))) =\n    ((case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n            S ioprog \\<sigma>' of\n      None \\<Rightarrow> None\n      | Some (s, xa) \\<Rightarrow> M (b # s) xa) \\<noteq>\n     None \\<and>\n     fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                     S ioprog \\<sigma>' of\n               None \\<Rightarrow> None\n               | Some (s, xa) \\<Rightarrow> M (b # s) xa)))", "by(cases \"mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog \\<sigma>'\", auto simp:  mbind''.simps)"], ["", "lemma exec_mbindFSave:\n\"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e  (a#S) ioprog ; return (P s))) =\n    (case ioprog a \\<sigma> of\n       None \\<Rightarrow> (\\<sigma>  \\<Turnstile> (return (P [])))\n     | Some(b,\\<sigma>') \\<Rightarrow> (\\<sigma>'  \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e  S ioprog ; return (P (b#s)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # S) ioprog)\n      (return (P s))) =\n    (case ioprog a \\<sigma> of\n     None \\<Rightarrow> \\<sigma> \\<Turnstile> return (P [])\n     | Some (b, \\<sigma>') \\<Rightarrow>\n         \\<sigma>' \\<Turnstile>\n         _bind_SE s\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n            S ioprog)\n          (return (P (b # s))))", "apply(case_tac \"ioprog a \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. ioprog a \\<sigma> = None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     _bind_SE s\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # S) ioprog)\n      (return (P s))) =\n    (case ioprog a \\<sigma> of\n     None \\<Rightarrow> \\<sigma> \\<Turnstile> return (P [])\n     | Some (b, \\<sigma>') \\<Rightarrow>\n         \\<sigma>' \\<Turnstile>\n         _bind_SE s\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n            S ioprog)\n          (return (P (b # s))))\n 2. \\<And>aa.\n       ioprog a \\<sigma> = Some aa \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        _bind_SE s\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # S) ioprog)\n         (return (P s))) =\n       (case ioprog a \\<sigma> of\n        None \\<Rightarrow> \\<sigma> \\<Turnstile> return (P [])\n        | Some (b, \\<sigma>') \\<Rightarrow>\n            \\<sigma>' \\<Turnstile>\n            _bind_SE s\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n               S ioprog)\n             (return (P (b # s))))", "apply(auto simp: exec_mbindFSave_failure  exec_mbindFSave_success split: prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mbind_eq_sexec: \nassumes * : \"\\<And>b \\<sigma>'. f a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n             (os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P (b#os)) = (os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P' (b#os))\"\nshows       \"( a \\<leftarrow> f a;  x \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P (a # x)) \\<sigma> = \n             ( a \\<leftarrow> f a;  x \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; P'(a # x)) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P (a # x))))\n     \\<sigma> =\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P' (a # x))))\n     \\<sigma>", "apply(cases \"f a \\<sigma> = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. f a \\<sigma> = None \\<Longrightarrow>\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P (a # x))))\n     \\<sigma> =\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P' (a # x))))\n     \\<sigma>\n 2. f a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P (a # x))))\n     \\<sigma> =\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P' (a # x))))\n     \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f a \\<sigma> = None \\<Longrightarrow>\n    None =\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P' (a # x))))\n     \\<sigma>\n 2. f a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P (a # x))))\n     \\<sigma> =\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P' (a # x))))\n     \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P (a # x))))\n     \\<sigma> =\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (P' (a # x))))\n     \\<sigma>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       f a \\<sigma> = Some (aa, b) \\<Longrightarrow>\n       (_bind_SE a (f a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             S f)\n           (P (a # x))))\n        \\<sigma> =\n       (_bind_SE a (f a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             S f)\n           (P' (a # x))))\n        \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       f a \\<sigma> = Some (aa, b) \\<Longrightarrow>\n       (_bind_SE x\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           S f)\n         (P (aa # x)))\n        b =\n       (_bind_SE a (f a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             S f)\n           (P' (a # x))))\n        \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       f a \\<sigma> = Some (aa, b) \\<Longrightarrow>\n       (_bind_SE x\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           S f)\n         (P (aa # x)))\n        b =\n       (_bind_SE x\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           S f)\n         (P' (aa # x)))\n        b", "apply(simp add: *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mbind_eq_sexec': \nassumes * : \"\\<And>b \\<sigma>'. f a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> \n             (P (b))\\<sigma>' = (P' (b))\\<sigma>'\"\nshows       \"( a \\<leftarrow> f a;  P (a)) \\<sigma> = \n             ( a \\<leftarrow> f a;  P'(a)) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>E (f a) P \\<sigma> =\n    bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>", "apply(cases \"f a \\<sigma> = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. f a \\<sigma> = None \\<Longrightarrow>\n    bind\\<^sub>S\\<^sub>E (f a) P \\<sigma> =\n    bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>\n 2. f a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    bind\\<^sub>S\\<^sub>E (f a) P \\<sigma> =\n    bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f a \\<sigma> = None \\<Longrightarrow>\n    None = bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>\n 2. f a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    bind\\<^sub>S\\<^sub>E (f a) P \\<sigma> =\n    bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    bind\\<^sub>S\\<^sub>E (f a) P \\<sigma> =\n    bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       f a \\<sigma> = Some (aa, b) \\<Longrightarrow>\n       bind\\<^sub>S\\<^sub>E (f a) P \\<sigma> =\n       bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       f a \\<sigma> = Some (aa, b) \\<Longrightarrow>\n       P aa b = bind\\<^sub>S\\<^sub>E (f a) P' \\<sigma>", "apply(subst bind_SE_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       f a \\<sigma> = Some (aa, b) \\<Longrightarrow> P aa b = P' aa b", "apply(simp add: *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mbind'_concat:\n\"(os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (S@T) f; P os) = (os \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S f; os' \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p T f; P (os @ os'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>E\n     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n       (S @ T) f)\n     P =\n    _bind_SE os\n     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n       S f)\n     (_bind_SE os'\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         T f)\n       (P (os @ os')))", "proof (rule ext, rename_tac \"\\<sigma>\", induct S arbitrary: \\<sigma> P)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> P.\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ([] @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           [] f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>\n 2. \\<And>a S \\<sigma> P.\n       (\\<And>\\<sigma> P.\n           bind\\<^sub>S\\<^sub>E\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (S @ T) f)\n            P \\<sigma> =\n           (_bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n               S f)\n             (_bind_SE os'\n               (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                 T f)\n               (P (os @ os'))))\n            \\<sigma>) \\<Longrightarrow>\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ((a # S) @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # S) f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> P.\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ([] @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           [] f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>\n 2. \\<And>a S \\<sigma> P.\n       (\\<And>\\<sigma> P.\n           bind\\<^sub>S\\<^sub>E\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (S @ T) f)\n            P \\<sigma> =\n           (_bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n               S f)\n             (_bind_SE os'\n               (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                 T f)\n               (P (os @ os'))))\n            \\<sigma>) \\<Longrightarrow>\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ((a # S) @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # S) f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>E\n     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n       ([] @ T) f)\n     P \\<sigma> =\n    (_bind_SE os\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        [] f)\n      (_bind_SE os'\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          T f)\n        (P (os @ os'))))\n     \\<sigma>", "by simp"], ["proof (state)\nthis:\n  bind\\<^sub>S\\<^sub>E\n   (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n     ([] @ T) f)\n   P \\<sigma> =\n  (_bind_SE os\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      [] f)\n    (_bind_SE os'\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        T f)\n      (P (os @ os'))))\n   \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a S \\<sigma> P.\n       (\\<And>\\<sigma> P.\n           bind\\<^sub>S\\<^sub>E\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (S @ T) f)\n            P \\<sigma> =\n           (_bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n               S f)\n             (_bind_SE os'\n               (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                 T f)\n               (P (os @ os'))))\n            \\<sigma>) \\<Longrightarrow>\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ((a # S) @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # S) f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a S \\<sigma> P.\n       (\\<And>\\<sigma> P.\n           bind\\<^sub>S\\<^sub>E\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (S @ T) f)\n            P \\<sigma> =\n           (_bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n               S f)\n             (_bind_SE os'\n               (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                 T f)\n               (P (os @ os'))))\n            \\<sigma>) \\<Longrightarrow>\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ((a # S) @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # S) f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>", "case (Cons a S)"], ["proof (state)\nthis:\n  bind\\<^sub>S\\<^sub>E\n   (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n     (S @ T) f)\n   ?P ?\\<sigma> =\n  (_bind_SE os\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S\n      f)\n    (_bind_SE os'\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        T f)\n      (?P (os @ os'))))\n   ?\\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a S \\<sigma> P.\n       (\\<And>\\<sigma> P.\n           bind\\<^sub>S\\<^sub>E\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (S @ T) f)\n            P \\<sigma> =\n           (_bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n               S f)\n             (_bind_SE os'\n               (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                 T f)\n               (P (os @ os'))))\n            \\<sigma>) \\<Longrightarrow>\n       bind\\<^sub>S\\<^sub>E\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          ((a # S) @ T) f)\n        P \\<sigma> =\n       (_bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # S) f)\n         (_bind_SE os'\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             T f)\n           (P (os @ os'))))\n        \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bind\\<^sub>S\\<^sub>E\n     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n       ((a # S) @ T) f)\n     P \\<sigma> =\n    (_bind_SE os\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # S) f)\n      (_bind_SE os'\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          T f)\n        (P (os @ os'))))\n     \\<sigma>", "apply(insert Cons.hyps, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P \\<sigma>.\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (S @ T) f)\n         P \\<sigma> =\n        (_bind_SE os\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n            S f)\n          (_bind_SE os'\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              T f)\n            (P (os @ os'))))\n         \\<sigma>) \\<Longrightarrow>\n    (_bind_SE a (f a)\n      (_bind_SE x\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          (S @ T) f)\n        (P (a # x))))\n     \\<sigma> =\n    (_bind_SE a (f a)\n      (_bind_SE os\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S f)\n        (_bind_SE os'\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n            T f)\n          (P (a # os @ os')))))\n     \\<sigma>", "by(rule mbind_eq_sexec',simp)"], ["proof (state)\nthis:\n  bind\\<^sub>S\\<^sub>E\n   (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n     ((a # S) @ T) f)\n   P \\<sigma> =\n  (_bind_SE os\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      (a # S) f)\n    (_bind_SE os'\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        T f)\n      (P (os @ os'))))\n   \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assert_suffix_inv : \n              \"\\<sigma> \\<Turnstile> ( _ \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p xs istep; assert\\<^sub>S\\<^sub>E (P)) \n               \\<Longrightarrow> \\<forall>\\<sigma>. P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> (_ \\<leftarrow> istep x; assert\\<^sub>S\\<^sub>E (P)))\n               \\<Longrightarrow> \\<sigma> \\<Turnstile> ( _ \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (xs @ [x]) istep; assert\\<^sub>S\\<^sub>E (P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             _bind_SE _\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                xs istep)\n              (assert\\<^sub>S\\<^sub>E P);\n     \\<forall>\\<sigma>.\n        P \\<sigma> \\<longrightarrow>\n        (\\<sigma> \\<Turnstile>\n         _bind_SE _ (istep x) (assert\\<^sub>S\\<^sub>E P))\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                      _bind_SE _\n                       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                         (xs @ [x]) istep)\n                       (assert\\<^sub>S\\<^sub>E P)", "apply(subst mbind'_concat, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             _bind_SE _\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                xs istep)\n              (assert\\<^sub>S\\<^sub>E P);\n     \\<forall>\\<sigma>.\n        P \\<sigma> \\<longrightarrow>\n        (\\<sigma> \\<Turnstile>\n         _bind_SE _ (istep x) (assert\\<^sub>S\\<^sub>E P))\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                      _bind_SE os\n                       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                         xs istep)\n                       (_bind_SE a (istep x) (assert\\<^sub>S\\<^sub>E P))", "unfolding bind_SE_def assert_SE_def valid_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                    xs istep \\<sigma> of\n              None \\<Rightarrow> None\n              | Some (uu_, \\<sigma>) \\<Rightarrow>\n                  if P \\<sigma> then Some (True, \\<sigma>)\n                  else None) \\<noteq>\n             None \\<and>\n             fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             xs istep \\<sigma> of\n                       None \\<Rightarrow> None\n                       | Some (uu_, \\<sigma>) \\<Rightarrow>\n                           if P \\<sigma> then Some (True, \\<sigma>)\n                           else None));\n     \\<forall>\\<sigma>.\n        P \\<sigma> \\<longrightarrow>\n        (case istep x \\<sigma> of None \\<Rightarrow> None\n         | Some (uu_, \\<sigma>) \\<Rightarrow>\n             if P \\<sigma> then Some (True, \\<sigma>) else None) \\<noteq>\n        None \\<and>\n        fst (the (case istep x \\<sigma> of None \\<Rightarrow> None\n                  | Some (uu_, \\<sigma>) \\<Rightarrow>\n                      if P \\<sigma> then Some (True, \\<sigma>)\n                      else None))\\<rbrakk>\n    \\<Longrightarrow> (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             xs istep \\<sigma> of\n                       None \\<Rightarrow> None\n                       | Some (os, \\<sigma>) \\<Rightarrow>\n                           case istep x \\<sigma> of None \\<Rightarrow> None\n                           | Some (a, b) \\<Rightarrow>\n                               if P b then Some (True, b)\n                               else None) \\<noteq>\n                      None \\<and>\n                      fst (the (case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\nxs istep \\<sigma> of\n                                None \\<Rightarrow> None\n                                | Some (os, \\<sigma>) \\<Rightarrow>\n                                    case istep x \\<sigma> of\n                                    None \\<Rightarrow> None\n                                    | Some (a, b) \\<Rightarrow>\n  if P b then Some (True, b) else None))", "apply(auto split: option.split option.split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ab bb.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        aa; (if P bb then Some (True, bb) else None) = Some (True, ba);\n        istep x bb = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa ba ab bb ac bc.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        aa; (if P bb then Some (True, bb) else None) = Some (True, ba);\n        \\<not> P bc; istep x bb = Some (ac, bc)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac \"aa\",simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ab bb.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        (if P bb then Some (True, bb) else None) = Some (True, ba);\n        istep x bb = None; aa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa ba ab bb ac bc.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        aa; (if P bb then Some (True, bb) else None) = Some (True, ba);\n        \\<not> P bc; istep x bb = Some (ac, bc)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac \"P bb\",simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ab bb.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, ba);\n        bb = ba; istep x ba = None; aa; P ba\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa ba ab bb ac bc.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        aa; (if P bb then Some (True, bb) else None) = Some (True, ba);\n        \\<not> P bc; istep x bb = Some (ac, bc)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis option.distinct(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ab bb ac bc.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        aa; (if P bb then Some (True, bb) else None) = Some (True, ba);\n        \\<not> P bc; istep x bb = Some (ac, bc)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac \"aa\",simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ab bb ac bc.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, bb);\n        (if P bb then Some (True, bb) else None) = Some (True, ba);\n        \\<not> P bc; istep x bb = Some (ac, bc); aa\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac \"P bb\",simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ab bb ac bc.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   ((\\<exists>a b. istep x \\<sigma> = Some (a, b)) \\<or>\n                    \\<not> P \\<sigma>) \\<and>\n                   (P \\<sigma> \\<longrightarrow>\n                    (\\<forall>a b.\n                        istep x \\<sigma> = Some (a, b) \\<longrightarrow>\n                        (\\<exists>a ba.\n                            (if P b then Some (True, b) else None) =\n                            Some (a, ba)) \\<and>\n                        fst (the (if P b then Some (True, b) else None))));\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         xs istep \\<sigma> =\n        Some (ab, ba);\n        bb = ba; \\<not> P bc; istep x ba = Some (ac, bc); aa; P ba\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis option.distinct(1))"], ["", "text\\<open>Universal splitting and symbolic execution rule\\<close>"], ["", "lemma exec_mbindFSave_E:\nassumes seq : \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e (a#S) ioprog ;  (P s)))\"\n  and   none: \"ioprog a \\<sigma> = None \\<Longrightarrow> (\\<sigma> \\<Turnstile> (P [])) \\<Longrightarrow> Q\"\n  and   some: \"\\<And> b \\<sigma>'. ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S ioprog;(P (b#s)))) \\<Longrightarrow> Q \"\nshows   \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using seq"], ["proof (prove)\nusing this:\n  \\<sigma> \\<Turnstile>\n  bind\\<^sub>S\\<^sub>E\n   (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n     (a # S) ioprog)\n   P\n\ngoal (1 subgoal):\n 1. Q", "proof(cases \"ioprog a \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "case None"], ["proof (state)\nthis:\n  ioprog a \\<sigma> = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "assume ass:\"ioprog a \\<sigma> = None\""], ["proof (state)\nthis:\n  ioprog a \\<sigma> = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "show \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(rule none[OF ass])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile> P []", "apply(insert ass, erule_tac ioprog1=ioprog in exec_mbindFSave_failure[THEN iffD1],rule seq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "case (Some aa)"], ["proof (state)\nthis:\n  ioprog a \\<sigma> = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "assume ass:\"ioprog a \\<sigma> = Some aa\""], ["proof (state)\nthis:\n  ioprog a \\<sigma> = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "show \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(insert ass,cases \"aa\",simp, rename_tac \"out\" \"\\<sigma>'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        aa = (out, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> Q", "apply(erule some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       aa = (out, \\<sigma>') \\<Longrightarrow>\n       \\<sigma>' \\<Turnstile>\n       _bind_SE s\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n          S ioprog)\n        (P (out # s))", "apply(insert ass,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>aa = (out, \\<sigma>');\n        ioprog a \\<sigma> = Some (out, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' \\<Turnstile>\n                         _bind_SE s\n                          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                            S ioprog)\n                          (P (out # s))", "apply(erule_tac ioprog1=ioprog in exec_mbindFSave_success[THEN iffD1],rule seq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The next rule reveals the particular interest in deduction;\n       as an elimination rule, it allows for a linear conversion of a validity judgement\n       @{term \"mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\"} over an input list @{term \"S\"} into a constraint system; without any \n       branching ... Symbolic execution can even be stopped tactically whenever \n       @{term \"ioprog a \\<sigma> = Some(b,\\<sigma>')\"} comes to a contradiction.\\<close>"], ["", "lemma exec_mbindFStop_E:\nassumes seq : \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p (a#S) ioprog ; (P s)))\"\n  and   some: \"\\<And>b \\<sigma>'. ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma>'\\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p S ioprog;(P(b#s)))) \\<Longrightarrow> Q\"\nshows   \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using seq"], ["proof (prove)\nusing this:\n  \\<sigma> \\<Turnstile>\n  bind\\<^sub>S\\<^sub>E\n   (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n     (a # S) ioprog)\n   P\n\ngoal (1 subgoal):\n 1. Q", "proof(cases \"ioprog a \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "case None"], ["proof (state)\nthis:\n  ioprog a \\<sigma> = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "assume ass:\"ioprog a \\<sigma> = None\""], ["proof (state)\nthis:\n  ioprog a \\<sigma> = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "show \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(insert ass seq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ioprog a \\<sigma> = None;\n     \\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # S) ioprog)\n      P\\<rbrakk>\n    \\<Longrightarrow> Q", "apply(drule_tac \\<sigma>=\\<sigma> and S=S and M=P in exec_mbindFStop_failure, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "case (Some aa)"], ["proof (state)\nthis:\n  ioprog a \\<sigma> = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "assume ass:\"ioprog a \\<sigma> = Some aa\""], ["proof (state)\nthis:\n  ioprog a \\<sigma> = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "show \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(insert ass,cases \"aa\",simp, rename_tac \"out\" \"\\<sigma>'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        aa = (out, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> Q", "apply(erule some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       aa = (out, \\<sigma>') \\<Longrightarrow>\n       \\<sigma>' \\<Turnstile>\n       _bind_SE s\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n          S ioprog)\n        (P (out # s))", "apply(insert ass,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>aa = (out, \\<sigma>');\n        ioprog a \\<sigma> = Some (out, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' \\<Turnstile>\n                         _bind_SE s\n                          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                            S ioprog)\n                          (P (out # s))", "apply(erule_tac ioprog1=ioprog in exec_mbindFStop_success[THEN iffD1],rule seq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_mbindFPurge_E:\nassumes seq : \"(\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e (a#S) ioprog ;  (P s)))\"\n  and   none: \"ioprog a \\<sigma> = None \\<Longrightarrow> (\\<sigma> \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog;(P (s)))) \\<Longrightarrow> Q\"\n  and   some: \"\\<And> b \\<sigma>'. ioprog a \\<sigma> = Some(b,\\<sigma>') \\<Longrightarrow> (\\<sigma>' \\<Turnstile> (s \\<leftarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e S ioprog;(P (b#s)))) \\<Longrightarrow> Q \"\nshows   \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using seq"], ["proof (prove)\nusing this:\n  \\<sigma> \\<Turnstile>\n  bind\\<^sub>S\\<^sub>E\n   (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n     (a # S) ioprog)\n   P\n\ngoal (1 subgoal):\n 1. Q", "proof(cases \"ioprog a \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "case None"], ["proof (state)\nthis:\n  ioprog a \\<sigma> = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "assume ass:\"ioprog a \\<sigma> = None\""], ["proof (state)\nthis:\n  ioprog a \\<sigma> = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile>\n             bind\\<^sub>S\\<^sub>E\n              (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                (a # S) ioprog)\n              P;\n     ioprog a \\<sigma> = None\\<rbrakk>\n    \\<Longrightarrow> Q\n 2. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "show \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(rule none[OF ass])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile>\n    bind\\<^sub>S\\<^sub>E\n     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n       S ioprog)\n     P", "apply(insert ass, erule_tac ioprog1=ioprog in exec_mbindFPurge_failure[THEN iffD1],rule seq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "case (Some aa)"], ["proof (state)\nthis:\n  ioprog a \\<sigma> = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "assume ass:\"ioprog a \\<sigma> = Some aa\""], ["proof (state)\nthis:\n  ioprog a \\<sigma> = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                bind\\<^sub>S\\<^sub>E\n                 (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                   (a # S) ioprog)\n                 P;\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> Q", "show \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(insert ass,cases \"aa\",simp, rename_tac \"out\" \"\\<sigma>'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        aa = (out, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> Q", "apply(erule some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       aa = (out, \\<sigma>') \\<Longrightarrow>\n       \\<sigma>' \\<Turnstile>\n       _bind_SE s\n        (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n          S ioprog)\n        (P (out # s))", "apply(insert ass,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>aa = (out, \\<sigma>');\n        ioprog a \\<sigma> = Some (out, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' \\<Turnstile>\n                         _bind_SE s\n                          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>P\\<^sub>u\\<^sub>r\\<^sub>g\\<^sub>e\n                            S ioprog)\n                          (P (out # s))", "apply(erule_tac ioprog1=ioprog in exec_mbindFPurge_success[THEN iffD1],rule seq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assert_disch1 :\" P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) = (\\<sigma> \\<Turnstile> (M True))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E (assert\\<^sub>S\\<^sub>E P) M) =\n    (\\<sigma> \\<Turnstile> M True)", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_disch2 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P ; M s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile>\n            _bind_SE x (assert\\<^sub>S\\<^sub>E P) (M s))", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_disch3 :\" \\<not> P \\<sigma> \\<Longrightarrow> \\<not> (\\<sigma> \\<Turnstile> (assert\\<^sub>S\\<^sub>E P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    \\<not> (\\<sigma> \\<Turnstile> assert\\<^sub>S\\<^sub>E P)", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_disch4 :\" P \\<sigma> \\<Longrightarrow>  (\\<sigma> \\<Turnstile> (assert\\<^sub>S\\<^sub>E P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Longrightarrow>\n    \\<sigma> \\<Turnstile> assert\\<^sub>S\\<^sub>E P", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def)"], ["", "lemma assert_simp : \"(\\<sigma> \\<Turnstile> assert\\<^sub>S\\<^sub>E P) = P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> assert\\<^sub>S\\<^sub>E P) = P \\<sigma>", "by (meson assert_disch3 assert_disch4)"], ["", "lemmas assert_D = assert_simp[THEN iffD1]"], ["", "(* legacy *)"], ["", "lemma assert_bind_simp : \"(\\<sigma> \\<Turnstile> (x \\<leftarrow> assert\\<^sub>S\\<^sub>E P; M x)) = (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> (M True)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E (assert\\<^sub>S\\<^sub>E P) M) =\n    (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> M True))", "by(auto simp: bind_SE_def assert_SE_def valid_SE_def split: HOL.if_split_asm)"], ["", "lemmas assert_bindD = assert_bind_simp[THEN iffD1]"], ["", "(* legacy *)"], ["", "lemma assume_D : \"(\\<sigma> \\<Turnstile> (_ \\<leftarrow> assume\\<^sub>S\\<^sub>E P; M)) \\<Longrightarrow> \\<exists> \\<sigma>. (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> M) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile>\n    _bind_SE _ (assume\\<^sub>S\\<^sub>E P) M \\<Longrightarrow>\n    \\<exists>\\<sigma>. P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> M)", "apply(auto simp: bind_SE_def assume_SE_def valid_SE_def split: HOL.if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>.\n                            P \\<sigma> \\<and>\n                            (\\<exists>a b. M \\<sigma> = Some (a, b)) \\<and>\n                            fst (the (M \\<sigma>))", "apply(rule_tac x=\"Eps P\" in exI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>P x; a; M (Eps P) = Some (True, b)\\<rbrakk>\n       \\<Longrightarrow> P (Eps P)", "apply(subst Hilbert_Choice.someI,assumption,simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma assume_E :\nassumes *  : \"\\<sigma> \\<Turnstile> ( _ \\<leftarrow> assume\\<^sub>S\\<^sub>E P; M) \"\nand     ** : \"\\<And> \\<sigma>. P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> M  \\<Longrightarrow> Q\"\nshows  \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "apply(insert *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Turnstile>\n    _bind_SE _ (assume\\<^sub>S\\<^sub>E P) M \\<Longrightarrow>\n    Q", "by(insert *[THEN assume_D], auto intro: **)"], ["", "lemma assume_E' :\nassumes *  : \"\\<sigma> \\<Turnstile> assume\\<^sub>S\\<^sub>E P ;- M\"\nand     ** : \"\\<And> \\<sigma>. P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> M  \\<Longrightarrow> Q\"\nshows  \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "by(insert *[simplified \"bind_SE'_def\", THEN assume_D], auto intro: **)"], ["", "text\\<open>These two rule prove that the SE Monad in connection with the notion of valid sequence\nis actually sufficient for a representation of a Boogie-like language. The SBE monad with explicit\nsets of states --- to be shown below --- is strictly speaking not necessary (and will therefore\nbe discontinued in the development).\\<close>"], ["", "term \"if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi\""], ["", "lemma if_SE_D1 : \"P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = (\\<sigma> \\<Turnstile> B\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2) =\n    (\\<sigma> \\<Turnstile> B\\<^sub>1)", "by(auto simp: if_SE_def valid_SE_def)"], ["", "lemma if_SE_D1' : \"P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = (\\<sigma> \\<Turnstile> (B\\<^sub>1;-M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M) =\n    (\\<sigma> \\<Turnstile> B\\<^sub>1 ;- M)", "by(auto simp: if_SE_def valid_SE_def bind_SE'_def bind_SE_def)"], ["", "lemma if_SE_D2 : \"\\<not> P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = (\\<sigma> \\<Turnstile> B\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2) =\n    (\\<sigma> \\<Turnstile> B\\<^sub>2)", "by(auto simp: if_SE_def valid_SE_def)"], ["", "lemma if_SE_D2' : \"\\<not> P \\<sigma> \\<Longrightarrow> (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = (\\<sigma> \\<Turnstile> B\\<^sub>2;-M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P \\<sigma> \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M) =\n    (\\<sigma> \\<Turnstile> B\\<^sub>2 ;- M)", "by(auto simp: if_SE_def valid_SE_def bind_SE'_def bind_SE_def)"], ["", "lemma if_SE_split_asm : \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = ((P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<or> (\\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2) =\n    (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1) \\<or>\n     \\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2))", "by(cases \"P \\<sigma>\",auto simp: if_SE_D1 if_SE_D2)"], ["", "lemma if_SE_split_asm': \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = ((P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1;-M)) \\<or> (\\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2;-M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M) =\n    (P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>1 ;- M) \\<or>\n     \\<not> P \\<sigma> \\<and> (\\<sigma> \\<Turnstile> B\\<^sub>2 ;- M))", "by(cases \"P \\<sigma>\",auto simp: if_SE_D1' if_SE_D2')"], ["", "lemma if_SE_split: \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi)) = ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<and> (\\<not> P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2) =\n    ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1)) \\<and>\n     (\\<not> P \\<sigma> \\<longrightarrow>\n      (\\<sigma> \\<Turnstile> B\\<^sub>2)))", "by(cases \"P \\<sigma>\", auto simp: if_SE_D1 if_SE_D2)"], ["", "lemma if_SE_split': \n\"(\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M) = ((P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>1;-M)) \\<and> (\\<not> P \\<sigma> \\<longrightarrow> (\\<sigma> \\<Turnstile> B\\<^sub>2;-M)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M) =\n    ((P \\<sigma> \\<longrightarrow>\n      (\\<sigma> \\<Turnstile> B\\<^sub>1 ;- M)) \\<and>\n     (\\<not> P \\<sigma> \\<longrightarrow>\n      (\\<sigma> \\<Turnstile> B\\<^sub>2 ;- M)))", "by(cases \"P \\<sigma>\", auto simp: if_SE_D1' if_SE_D2')"], ["", "lemma if_SE_execE:\n  assumes A: \"\\<sigma> \\<Turnstile> ((if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi))\"\n   and   B: \"P \\<sigma>  \\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>1) \\<Longrightarrow> Q\"\n   and   C: \"\\<not> P \\<sigma>\\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>2) \\<Longrightarrow> Q\"\n  shows  \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "by(insert A [simplified if_SE_split],cases  \"P \\<sigma>\", simp_all, auto elim: B C)"], ["", "lemma if_SE_execE':\n  assumes A: \"\\<sigma> \\<Turnstile> ((if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi);-M)\"\n   and   B: \"P \\<sigma>  \\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>1;-M) \\<Longrightarrow> Q\"\n   and   C: \"\\<not> P \\<sigma>\\<Longrightarrow> \\<sigma> \\<Turnstile> (B\\<^sub>2;-M) \\<Longrightarrow> Q\"\n  shows  \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "by(insert A [simplified if_SE_split'],cases  \"P \\<sigma>\", simp_all, auto elim: B C)"], ["", "lemma exec_while : \n\"(\\<sigma> \\<Turnstile> ((while\\<^sub>S\\<^sub>E b do c od) ;- M)) = \n (\\<sigma> \\<Turnstile> ((if\\<^sub>S\\<^sub>E b then c ;- (while\\<^sub>S\\<^sub>E b do c od) else unit\\<^sub>S\\<^sub>E ()fi) ;- M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> _while_SE b c ;- M) =\n    (\\<sigma> \\<Turnstile>\n     _if_SE b (c ;- _while_SE b c) (unit\\<^sub>S\\<^sub>E ()) ;- M)", "apply(subst while_SE_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     _if_SE b (c ;- _while_SE b c) (unit\\<^sub>S\\<^sub>E ()) ;- M) =\n    (\\<sigma> \\<Turnstile>\n     _if_SE b (c ;- _while_SE b c) (unit\\<^sub>S\\<^sub>E ()) ;- M)", "by(simp add: bind_SE'_def )"], ["", "lemmas exec_whileD = exec_while[THEN iffD1]"], ["", "lemma if_SE_execE'':\n\"\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi) ;- M \n\\<Longrightarrow> (P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M \\<Longrightarrow> Q) \n\\<Longrightarrow> (\\<not> P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> B\\<^sub>2 ;- M \\<Longrightarrow> Q) \n\\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M;\n     \\<lbrakk>P \\<sigma>; \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M\\<rbrakk>\n     \\<Longrightarrow> Q;\n     \\<lbrakk>\\<not> P \\<sigma>;\n      \\<sigma> \\<Turnstile> B\\<^sub>2 ;- M\\<rbrakk>\n     \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by(auto elim: if_SE_execE')"], ["", "definition \"opaque (x::bool) = x\""], ["", "lemma if_SE_execE''_pos:\n\"\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi) ;- M \n\\<Longrightarrow> (P \\<sigma> \\<Longrightarrow> \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M \\<Longrightarrow> Q) \n\\<Longrightarrow> (opaque (\\<sigma> \\<Turnstile> (if\\<^sub>S\\<^sub>E P then B\\<^sub>1 else B\\<^sub>2 fi) ;- M) \\<Longrightarrow> Q) \n\\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M;\n     \\<lbrakk>P \\<sigma>; \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M\\<rbrakk>\n     \\<Longrightarrow> Q;\n     opaque\n      (\\<sigma> \\<Turnstile>\n       _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M) \\<Longrightarrow>\n     Q\\<rbrakk>\n    \\<Longrightarrow> Q", "using opaque_def"], ["proof (prove)\nusing this:\n  opaque ?x = ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<Turnstile> _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M;\n     \\<lbrakk>P \\<sigma>; \\<sigma> \\<Turnstile> B\\<^sub>1 ;- M\\<rbrakk>\n     \\<Longrightarrow> Q;\n     opaque\n      (\\<sigma> \\<Turnstile>\n       _if_SE P B\\<^sub>1 B\\<^sub>2 ;- M) \\<Longrightarrow>\n     Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by auto"], ["", "lemma [code]:\n  \"(\\<sigma> \\<Turnstile> m) = (case (m \\<sigma>) of None  \\<Rightarrow> False | (Some (x,y))  \\<Rightarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> m) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply(simp add: valid_SE_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>a b. m \\<sigma> = Some (a, b)) \\<and>\n     fst (the (m \\<sigma>))) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply(cases \"m \\<sigma> = None\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b. m \\<sigma> = Some (a, b) \\<Longrightarrow>\n    fst (the (m \\<sigma>)) =\n    (case m \\<sigma> of None \\<Rightarrow> False\n     | Some (x, y) \\<Rightarrow> x)", "apply(insert not_None_eq, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* for the moment no good idea to state the case where the body eventually crashes. *)"], ["", "lemma \"P  \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  (x=X) \\<and> Q x \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> \\<Turnstile>\n    _bind_SE _ (assume\\<^sub>S\\<^sub>E P)\n     (_bind_SE x M\n       (assert\\<^sub>S\\<^sub>E\n         (\\<lambda>\\<sigma>. x = X \\<and> Q x \\<sigma>)))", "oops"], ["", "lemma \"\\<forall>\\<sigma>. \\<exists> X. \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  x=X \\<and> Q x \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<exists>X.\n          \\<sigma> \\<Turnstile>\n          _bind_SE _ (assume\\<^sub>S\\<^sub>E P)\n           (_bind_SE x M\n             (assert\\<^sub>S\\<^sub>E\n               (\\<lambda>\\<sigma>. x = X \\<and> Q x \\<sigma>)))", "oops"], ["", "lemma monadic_sequence_rule:\n      \"\\<And> X \\<sigma>\\<^sub>1. (\\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>'. (\\<sigma>=\\<sigma>') \\<and>  P \\<sigma>) ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  (x=X) \\<and> (\\<sigma>=\\<sigma>\\<^sub>1) \\<and> Q x \\<sigma>)))\n               \\<and> \n               (\\<sigma>\\<^sub>1 \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  (\\<sigma>=\\<sigma>\\<^sub>1) \\<and> Q x \\<sigma>) ; y  \\<leftarrow> M'; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  R x y \\<sigma>)))\n       \\<Longrightarrow>\n               \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>'. (\\<sigma>=\\<sigma>') \\<and>  P \\<sigma>) ; x  \\<leftarrow> M; y  \\<leftarrow> M'; assert\\<^sub>S\\<^sub>E (R x y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<sigma>\\<^sub>1.\n       (\\<sigma> \\<Turnstile>\n        _bind_SE _\n         (assume\\<^sub>S\\<^sub>E\n           (\\<lambda>\\<sigma>'. \\<sigma> = \\<sigma>' \\<and> P \\<sigma>))\n         (_bind_SE x M\n           (assert\\<^sub>S\\<^sub>E\n             (\\<lambda>\\<sigma>.\n                 x = X \\<and>\n                 \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>)))) \\<and>\n       (\\<sigma>\\<^sub>1 \\<Turnstile>\n        _bind_SE _\n         (assume\\<^sub>S\\<^sub>E\n           (\\<lambda>\\<sigma>.\n               \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>))\n         (_bind_SE y M' (assert\\<^sub>S\\<^sub>E (R x y)))) \\<Longrightarrow>\n       \\<sigma> \\<Turnstile>\n       _bind_SE _\n        (assume\\<^sub>S\\<^sub>E\n          (\\<lambda>\\<sigma>'. \\<sigma> = \\<sigma>' \\<and> P \\<sigma>))\n        (_bind_SE x M (_bind_SE y M' (assert\\<^sub>S\\<^sub>E (R x y))))", "apply(elim exE impE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<sigma>\\<^sub>1.\n       \\<lbrakk>\\<sigma> \\<Turnstile>\n                _bind_SE _\n                 (assume\\<^sub>S\\<^sub>E\n                   (\\<lambda>\\<sigma>'.\n                       \\<sigma> = \\<sigma>' \\<and> P \\<sigma>))\n                 (_bind_SE x M\n                   (assert\\<^sub>S\\<^sub>E\n                     (\\<lambda>\\<sigma>.\n                         x = X \\<and>\n                         \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>)));\n        \\<sigma>\\<^sub>1 \\<Turnstile>\n        _bind_SE _\n         (assume\\<^sub>S\\<^sub>E\n           (\\<lambda>\\<sigma>.\n               \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>))\n         (_bind_SE y M' (assert\\<^sub>S\\<^sub>E (R x y)))\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE _\n                          (assume\\<^sub>S\\<^sub>E\n                            (\\<lambda>\\<sigma>'.\n                                \\<sigma> = \\<sigma>' \\<and> P \\<sigma>))\n                          (_bind_SE x M\n                            (_bind_SE y M'\n                              (assert\\<^sub>S\\<^sub>E (R x y))))", "apply(drule assume_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<sigma>\\<^sub>1.\n       \\<lbrakk>\\<sigma>\\<^sub>1 \\<Turnstile>\n                _bind_SE _\n                 (assume\\<^sub>S\\<^sub>E\n                   (\\<lambda>\\<sigma>.\n                       \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>))\n                 (_bind_SE y M' (assert\\<^sub>S\\<^sub>E (R x y)));\n        \\<exists>\\<sigma>'.\n           (\\<sigma> = \\<sigma>' \\<and> P \\<sigma>) \\<and>\n           (\\<sigma>' \\<Turnstile>\n            _bind_SE x M\n             (assert\\<^sub>S\\<^sub>E\n               (\\<lambda>\\<sigma>.\n                   x = X \\<and>\n                   \\<sigma> = \\<sigma>\\<^sub>1 \\<and>\n                   Q x \\<sigma>)))\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE _\n                          (assume\\<^sub>S\\<^sub>E\n                            (\\<lambda>\\<sigma>'.\n                                \\<sigma> = \\<sigma>' \\<and> P \\<sigma>))\n                          (_bind_SE x M\n                            (_bind_SE y M'\n                              (assert\\<^sub>S\\<^sub>E (R x y))))", "apply(elim exE impE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<sigma>\\<^sub>1 \\<sigma>'.\n       \\<lbrakk>\\<sigma>\\<^sub>1 \\<Turnstile>\n                _bind_SE _\n                 (assume\\<^sub>S\\<^sub>E\n                   (\\<lambda>\\<sigma>.\n                       \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>))\n                 (_bind_SE y M' (assert\\<^sub>S\\<^sub>E (R x y)));\n        \\<sigma>' \\<Turnstile>\n        _bind_SE x M\n         (assert\\<^sub>S\\<^sub>E\n           (\\<lambda>\\<sigma>.\n               x = X \\<and>\n               \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>));\n        \\<sigma> = \\<sigma>'; P \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE _\n                          (assume\\<^sub>S\\<^sub>E\n                            (\\<lambda>\\<sigma>'.\n                                \\<sigma> = \\<sigma>' \\<and> P \\<sigma>))\n                          (_bind_SE x M\n                            (_bind_SE y M'\n                              (assert\\<^sub>S\\<^sub>E (R x y))))", "unfolding valid_SE_def assume_SE_def assert_SE_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<sigma>\\<^sub>1 \\<sigma>'.\n       \\<lbrakk>(case if \\<exists>\\<sigma>.\n                            \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>\n                      then Some\n                            ((),\n                             SOME \\<sigma>.\n                                \\<sigma> = \\<sigma>\\<^sub>1 \\<and>\n                                Q x \\<sigma>)\n                      else None of\n                 None \\<Rightarrow> None\n                 | Some (uu_, \\<sigma>) \\<Rightarrow>\n                     case M' \\<sigma> of None \\<Rightarrow> None\n                     | Some (y, \\<sigma>) \\<Rightarrow>\n                         if R x y \\<sigma> then Some (True, \\<sigma>)\n                         else None) \\<noteq>\n                None \\<and>\n                fst (the (case if \\<exists>\\<sigma>.\n                                     \\<sigma> = \\<sigma>\\<^sub>1 \\<and>\n                                     Q x \\<sigma>\n                               then Some\n                                     ((),\nSOME \\<sigma>. \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q x \\<sigma>)\n                               else None of\n                          None \\<Rightarrow> None\n                          | Some (uu_, \\<sigma>) \\<Rightarrow>\n                              case M' \\<sigma> of None \\<Rightarrow> None\n                              | Some (y, \\<sigma>) \\<Rightarrow>\n                                  if R x y \\<sigma>\n                                  then Some (True, \\<sigma>) else None));\n        (case M \\<sigma>' of None \\<Rightarrow> None\n         | Some (xa, \\<sigma>) \\<Rightarrow>\n             if xa = X \\<and>\n                \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q xa \\<sigma>\n             then Some (True, \\<sigma>) else None) \\<noteq>\n        None \\<and>\n        fst (the (case M \\<sigma>' of None \\<Rightarrow> None\n                  | Some (xa, \\<sigma>) \\<Rightarrow>\n                      if xa = X \\<and>\n                         \\<sigma> = \\<sigma>\\<^sub>1 \\<and> Q xa \\<sigma>\n                      then Some (True, \\<sigma>) else None));\n        \\<sigma> = \\<sigma>'; P \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (case if \\<exists>\\<sigma>'.\n                                     \\<sigma> = \\<sigma>' \\<and> P \\<sigma>\n                               then Some\n                                     ((),\nSOME \\<sigma>'. \\<sigma> = \\<sigma>' \\<and> P \\<sigma>)\n                               else None of\n                          None \\<Rightarrow> None\n                          | Some (uu_, \\<sigma>) \\<Rightarrow>\n                              case M \\<sigma> of None \\<Rightarrow> None\n                              | Some (xa, \\<sigma>) \\<Rightarrow>\n                                  case M' \\<sigma> of\n                                  None \\<Rightarrow> None\n                                  | Some (y, \\<sigma>) \\<Rightarrow>\nif R xa y \\<sigma> then Some (True, \\<sigma>) else None) \\<noteq>\n                         None \\<and>\n                         fst (the (case if \\<exists>\\<sigma>'.\n        \\<sigma> = \\<sigma>' \\<and> P \\<sigma>\n  then Some ((), SOME \\<sigma>'. \\<sigma> = \\<sigma>' \\<and> P \\<sigma>)\n  else None of\n                                   None \\<Rightarrow> None\n                                   | Some (uu_, \\<sigma>) \\<Rightarrow>\n case M \\<sigma> of None \\<Rightarrow> None\n | Some (xa, \\<sigma>) \\<Rightarrow>\n     case M' \\<sigma> of None \\<Rightarrow> None\n     | Some (y, \\<sigma>) \\<Rightarrow>\n         if R xa y \\<sigma> then Some (True, \\<sigma>) else None))", "apply(auto split: if_split HOL.if_split_asm Option.option.split Option.option.split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X a b aaa baa ab.\n       \\<lbrakk>M' b = None; Q X b; P \\<sigma>; Q x b; a; aaa;\n        M \\<sigma> = Some (X, b);\n        M' (SOME \\<sigma>. \\<sigma> = b \\<and> Q x \\<sigma>) =\n        Some (ab, baa);\n        R x ab baa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>X a b aaa baa ab ad bd.\n       \\<lbrakk>\\<not> R X ad bd; M' b = Some (ad, bd); Q X b; P \\<sigma>;\n        Q x b; a; aaa; M \\<sigma> = Some (X, b);\n        M' (SOME \\<sigma>. \\<sigma> = b \\<and> Q x \\<sigma>) =\n        Some (ab, baa);\n        R x ab baa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis (mono_tags, lifting) option.simps(3) someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X a b aaa baa ab ad bd.\n       \\<lbrakk>\\<not> R X ad bd; M' b = Some (ad, bd); Q X b; P \\<sigma>;\n        Q x b; a; aaa; M \\<sigma> = Some (X, b);\n        M' (SOME \\<sigma>. \\<sigma> = b \\<and> Q x \\<sigma>) =\n        Some (ab, baa);\n        R x ab baa\\<rbrakk>\n       \\<Longrightarrow> False", "oops"], ["", "lemma \"\\<exists> X. \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>.  x=X \\<and> Q x \\<sigma>))\n       \\<Longrightarrow> \n            \\<sigma> \\<Turnstile> (_  \\<leftarrow> assume\\<^sub>S\\<^sub>E P ; x  \\<leftarrow> M; assert\\<^sub>S\\<^sub>E (\\<lambda>\\<sigma>. Q x \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X.\n       \\<sigma> \\<Turnstile>\n       _bind_SE _ (assume\\<^sub>S\\<^sub>E P)\n        (_bind_SE x M\n          (assert\\<^sub>S\\<^sub>E\n            (\\<lambda>\\<sigma>.\n                x = X \\<and> Q x \\<sigma>))) \\<Longrightarrow>\n    \\<sigma> \\<Turnstile>\n    _bind_SE _ (assume\\<^sub>S\\<^sub>E P)\n     (_bind_SE x M (assert\\<^sub>S\\<^sub>E (Q x)))", "unfolding valid_SE_def assume_SE_def assert_SE_def bind_SE_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X.\n       (case if Ex P then Some ((), Eps P) else None of\n        None \\<Rightarrow> None\n        | Some (uu_, \\<sigma>) \\<Rightarrow>\n            case M \\<sigma> of None \\<Rightarrow> None\n            | Some (xa, \\<sigma>) \\<Rightarrow>\n                if xa = X \\<and> Q xa \\<sigma> then Some (True, \\<sigma>)\n                else None) \\<noteq>\n       None \\<and>\n       fst (the (case if Ex P then Some ((), Eps P) else None of\n                 None \\<Rightarrow> None\n                 | Some (uu_, \\<sigma>) \\<Rightarrow>\n                     case M \\<sigma> of None \\<Rightarrow> None\n                     | Some (xa, \\<sigma>) \\<Rightarrow>\n                         if xa = X \\<and> Q xa \\<sigma>\n                         then Some (True, \\<sigma>)\n                         else None)) \\<Longrightarrow>\n    (case if Ex P then Some ((), Eps P) else None of None \\<Rightarrow> None\n     | Some (uu_, \\<sigma>) \\<Rightarrow>\n         case M \\<sigma> of None \\<Rightarrow> None\n         | Some (xa, \\<sigma>) \\<Rightarrow>\n             if Q xa \\<sigma> then Some (True, \\<sigma>) else None) \\<noteq>\n    None \\<and>\n    fst (the (case if Ex P then Some ((), Eps P) else None of\n              None \\<Rightarrow> None\n              | Some (uu_, \\<sigma>) \\<Rightarrow>\n                  case M \\<sigma> of None \\<Rightarrow> None\n                  | Some (xa, \\<sigma>) \\<Rightarrow>\n                      if Q xa \\<sigma> then Some (True, \\<sigma>)\n                      else None))", "by(auto split: if_split HOL.if_split_asm Option.option.split Option.option.split_asm)"], ["", "lemma exec_skip:\n\"(\\<sigma> \\<Turnstile> skip\\<^sub>S\\<^sub>E ;- M) = (\\<sigma> \\<Turnstile> M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile> skip\\<^sub>S\\<^sub>E ;- M) =\n    (\\<sigma> \\<Turnstile> M)", "by (simp add: skip\\<^sub>S\\<^sub>E_def)"], ["", "lemmas exec_skipD = exec_skip[THEN iffD1]"], ["", "text\\<open>Test-Refinements will be stated in terms of the failsave @{term mbind}, opting \n       more generality. The following lemma allows for an  optimization both in \n       test execution as well as in symbolic execution for an important special case of\n       the post-codition: Whenever the latter has the constraint that the length of input and \n       output sequence equal each other (that is to say: no failure occured), failsave mbind\n       can be reduced to failstop mbind ...\\<close>"], ["", "lemma mbindFSave_vs_mbindFStop : \n  \"(\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e \\<iota>s ioprog); result(length \\<iota>s = length os \\<and> P \\<iota>s os))) = \n   (\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p \\<iota>s ioprog); result(P \\<iota>s os)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     _bind_SE os\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        \\<iota>s ioprog)\n      (unit\\<^sub>S\\<^sub>E\n        (length \\<iota>s = length os \\<and> P \\<iota>s os))) =\n    (\\<sigma> \\<Turnstile>\n     _bind_SE os\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        \\<iota>s ioprog)\n      (unit\\<^sub>S\\<^sub>E (P \\<iota>s os)))", "apply(rule_tac x=P in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<sigma> \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         (unit\\<^sub>S\\<^sub>E\n           (length \\<iota>s = length os \\<and> x \\<iota>s os))) =\n       (\\<sigma> \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         (unit\\<^sub>S\\<^sub>E (x \\<iota>s os)))", "apply(rule_tac x=\\<sigma> in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         (unit\\<^sub>S\\<^sub>E\n           (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)))", "proof(induct \"\\<iota>s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x xa.\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           [] ioprog)\n         (unit\\<^sub>S\\<^sub>E (length [] = length os \\<and> xa [] os))) =\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           [] ioprog)\n         (unit\\<^sub>S\\<^sub>E (xa [] os)))\n 2. \\<And>a \\<iota>s.\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os))) \\<Longrightarrow>\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length (a # \\<iota>s) = length os \\<and>\n               xa (a # \\<iota>s) os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa (a # \\<iota>s) os)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>x xa.\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           [] ioprog)\n         (unit\\<^sub>S\\<^sub>E (length [] = length os \\<and> xa [] os))) =\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           [] ioprog)\n         (unit\\<^sub>S\\<^sub>E (xa [] os)))\n 2. \\<And>a \\<iota>s.\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os))) \\<Longrightarrow>\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length (a # \\<iota>s) = length os \\<and>\n               xa (a # \\<iota>s) os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa (a # \\<iota>s) os)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           [] ioprog)\n         (unit\\<^sub>S\\<^sub>E (length [] = length os \\<and> xa [] os))) =\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           [] ioprog)\n         (unit\\<^sub>S\\<^sub>E (xa [] os)))", "by(simp_all add: mbind_try try_SE_def del: Seq_MonadSE.mbind.simps)"], ["proof (state)\nthis:\n  \\<forall>x xa.\n     (x \\<Turnstile>\n      _bind_SE os\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         [] ioprog)\n       (unit\\<^sub>S\\<^sub>E (length [] = length os \\<and> xa [] os))) =\n     (x \\<Turnstile>\n      _bind_SE os\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         [] ioprog)\n       (unit\\<^sub>S\\<^sub>E (xa [] os)))\n\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os))) \\<Longrightarrow>\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length (a # \\<iota>s) = length os \\<and>\n               xa (a # \\<iota>s) os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa (a # \\<iota>s) os)))", "case (Cons a \\<iota>s)"], ["proof (state)\nthis:\n  \\<forall>x xa.\n     (x \\<Turnstile>\n      _bind_SE os\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog)\n       (unit\\<^sub>S\\<^sub>E\n         (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n     (x \\<Turnstile>\n      _bind_SE os\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         \\<iota>s ioprog)\n       (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)))\n\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os))) \\<Longrightarrow>\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length (a # \\<iota>s) = length os \\<and>\n               xa (a # \\<iota>s) os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              (a # \\<iota>s) ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa (a # \\<iota>s) os)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         (unit\\<^sub>S\\<^sub>E\n           (length (a # \\<iota>s) = length os \\<and>\n            xa (a # \\<iota>s) os))) =\n       (x \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         (unit\\<^sub>S\\<^sub>E (xa (a # \\<iota>s) os)))", "apply(rule allI, rename_tac \"\\<sigma>\",rule allI, rename_tac \"P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P.\n       (\\<sigma> \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         (unit\\<^sub>S\\<^sub>E\n           (length (a # \\<iota>s) = length os \\<and>\n            P (a # \\<iota>s) os))) =\n       (\\<sigma> \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) os)))", "apply(insert Cons.hyps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P.\n       \\<forall>x xa.\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E\n              (length \\<iota>s = length os \\<and> xa \\<iota>s os))) =\n          (x \\<Turnstile>\n           _bind_SE os\n            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n              \\<iota>s ioprog)\n            (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os))) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         (unit\\<^sub>S\\<^sub>E\n           (length (a # \\<iota>s) = length os \\<and>\n            P (a # \\<iota>s) os))) =\n       (\\<sigma> \\<Turnstile>\n        _bind_SE os\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) os)))", "apply(case_tac \"ioprog a \\<sigma>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> P.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (length (a # \\<iota>s) = length os \\<and>\n                              P (a # \\<iota>s) os))) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) os)))\n 2. \\<And>\\<sigma> P aa.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (length (a # \\<iota>s) = length os \\<and>\n                              P (a # \\<iota>s) os))) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) os)))", "apply(simp only: exec_mbindFSave_failure exec_mbindFStop_failure, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = Some aa\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (length (a # \\<iota>s) = length os \\<and>\n                              P (a # \\<iota>s) os))) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) os)))", "apply(simp add:  split_paired_all del: Seq_MonadSE.mbind.simps )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa b.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = Some (aa, b)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length os \\<and>\n                              P (a # \\<iota>s) os))) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE aa (ioprog a)\n                           (_bind_SE os\n                             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                               \\<iota>s ioprog)\n                             (unit\\<^sub>S\\<^sub>E\n                               (P (a # \\<iota>s) (aa # os)))))", "apply(rename_tac \"\\<sigma>'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa \\<sigma>'.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = Some (aa, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             (a # \\<iota>s) ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length os \\<and>\n                              P (a # \\<iota>s) os))) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE aa (ioprog a)\n                           (_bind_SE os\n                             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                               \\<iota>s ioprog)\n                             (unit\\<^sub>S\\<^sub>E\n                               (P (a # \\<iota>s) (aa # os)))))", "apply(subst exec_mbindFSave_success, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa \\<sigma>'.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = Some (aa, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>' \\<Turnstile>\n                          _bind_SE s\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length (aa # s) \\<and>\n                              P (a # \\<iota>s) (aa # s)))) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE aa (ioprog a)\n                           (_bind_SE os\n                             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                               \\<iota>s ioprog)\n                             (unit\\<^sub>S\\<^sub>E\n                               (P (a # \\<iota>s) (aa # os)))))", "apply(subst (2) exec_bind_SE_success, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa \\<sigma>'.\n       \\<lbrakk>\\<forall>x xa.\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E\n                       (length \\<iota>s = length os \\<and>\n                        xa \\<iota>s os))) =\n                   (x \\<Turnstile>\n                    _bind_SE os\n                     (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                       \\<iota>s ioprog)\n                     (unit\\<^sub>S\\<^sub>E (xa \\<iota>s os)));\n        ioprog a \\<sigma> = Some (aa, \\<sigma>')\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>' \\<Turnstile>\n                          _bind_SE s\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length (aa # s) \\<and>\n                              P (a # \\<iota>s) (aa # s)))) =\n                         (\\<sigma>' \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (P (a # \\<iota>s) (aa # os))))", "apply(erule_tac x=\"\\<sigma>'\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (aa, \\<sigma>');\n        \\<forall>x.\n           (\\<sigma>' \\<Turnstile>\n            _bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n               \\<iota>s ioprog)\n             (unit\\<^sub>S\\<^sub>E\n               (length \\<iota>s = length os \\<and> x \\<iota>s os))) =\n           (\\<sigma>' \\<Turnstile>\n            _bind_SE os\n             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n               \\<iota>s ioprog)\n             (unit\\<^sub>S\\<^sub>E (x \\<iota>s os)))\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>' \\<Turnstile>\n                          _bind_SE s\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length (aa # s) \\<and>\n                              P (a # \\<iota>s) (aa # s)))) =\n                         (\\<sigma>' \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (P (a # \\<iota>s) (aa # os))))", "apply(erule_tac x=\"\\<lambda>\\<iota>s s. P (a # \\<iota>s) (aa # s)\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (aa, \\<sigma>');\n        (\\<sigma>' \\<Turnstile>\n         _bind_SE os\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n            \\<iota>s ioprog)\n          (unit\\<^sub>S\\<^sub>E\n            (length \\<iota>s = length os \\<and>\n             P (a # \\<iota>s) (aa # os)))) =\n        (\\<sigma>' \\<Turnstile>\n         _bind_SE os\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n            \\<iota>s ioprog)\n          (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) (aa # os))))\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>' \\<Turnstile>\n                          _bind_SE s\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length (aa # s) \\<and>\n                              P (a # \\<iota>s) (aa # s)))) =\n                         (\\<sigma>' \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (P (a # \\<iota>s) (aa # os))))", "(* heureka ! *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> P aa \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (aa, \\<sigma>');\n        (\\<sigma>' \\<Turnstile>\n         _bind_SE os\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n            \\<iota>s ioprog)\n          (unit\\<^sub>S\\<^sub>E\n            (length \\<iota>s = length os \\<and>\n             P (a # \\<iota>s) (aa # os)))) =\n        (\\<sigma>' \\<Turnstile>\n         _bind_SE os\n          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n            \\<iota>s ioprog)\n          (unit\\<^sub>S\\<^sub>E (P (a # \\<iota>s) (aa # os))))\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>' \\<Turnstile>\n                          _bind_SE s\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (Suc (length \\<iota>s) = length (aa # s) \\<and>\n                              P (a # \\<iota>s) (aa # s)))) =\n                         (\\<sigma>' \\<Turnstile>\n                          _bind_SE os\n                           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                             \\<iota>s ioprog)\n                           (unit\\<^sub>S\\<^sub>E\n                             (P (a # \\<iota>s) (aa # os))))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x xa.\n     (x \\<Turnstile>\n      _bind_SE os\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         (a # \\<iota>s) ioprog)\n       (unit\\<^sub>S\\<^sub>E\n         (length (a # \\<iota>s) = length os \\<and> xa (a # \\<iota>s) os))) =\n     (x \\<Turnstile>\n      _bind_SE os\n       (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n         (a # \\<iota>s) ioprog)\n       (unit\\<^sub>S\\<^sub>E (xa (a # \\<iota>s) os)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e_vs_mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p:\nassumes A: \"\\<forall> \\<iota> \\<sigma>. ioprog \\<iota> \\<sigma> \\<noteq> None\"\nshows      \"(\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e \\<iota>s ioprog); P os)) = \n            (\\<sigma> \\<Turnstile> (os \\<leftarrow> (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p \\<iota>s ioprog); P os))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        \\<iota>s ioprog)\n      P) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        \\<iota>s ioprog)\n      P)", "proof(induct \"\\<iota>s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        [] ioprog)\n      P) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        [] ioprog)\n      P)\n 2. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        [] ioprog)\n      P) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        [] ioprog)\n      P)\n 2. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        [] ioprog)\n      P) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        [] ioprog)\n      P)", "by simp"], ["proof (state)\nthis:\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n      [] ioprog)\n    P) =\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      [] ioprog)\n    P)\n\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "case (Cons a \\<iota>s)"], ["proof (state)\nthis:\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n      \\<iota>s ioprog)\n    P) =\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      \\<iota>s ioprog)\n    P)\n\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "from Cons.hyps"], ["proof (chain)\npicking this:\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n      \\<iota>s ioprog)\n    P) =\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      \\<iota>s ioprog)\n    P)", "have B:\"\\<forall> S f \\<sigma>. mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S f \\<sigma> \\<noteq> None \""], ["proof (prove)\nusing this:\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n      \\<iota>s ioprog)\n    P) =\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      \\<iota>s ioprog)\n    P)\n\ngoal (1 subgoal):\n 1. \\<forall>S f \\<sigma>.\n       mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        S f \\<sigma> \\<noteq>\n       None", "by simp"], ["proof (state)\nthis:\n  \\<forall>S f \\<sigma>.\n     mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e S\n      f \\<sigma> \\<noteq>\n     None\n\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "have C:\"\\<forall>\\<sigma>. mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p \\<iota>s ioprog \\<sigma> = mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e \\<iota>s ioprog \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        \\<iota>s ioprog \\<sigma> =\n       mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        \\<iota>s ioprog \\<sigma>", "apply(induct \\<iota>s, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       \\<forall>\\<sigma>.\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog \\<sigma> =\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog \\<sigma> \\<Longrightarrow>\n       \\<forall>\\<sigma>.\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog \\<sigma> =\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog \\<sigma>", "apply(rule allI,rename_tac \"\\<sigma>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s \\<sigma>.\n       \\<forall>\\<sigma>.\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog \\<sigma> =\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog \\<sigma> \\<Longrightarrow>\n       mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # \\<iota>s) ioprog \\<sigma> =\n       mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # \\<iota>s) ioprog \\<sigma>", "apply(simp add: Seq_MonadSE.mbind'.simps(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s \\<sigma>.\n       \\<forall>\\<sigma>.\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog \\<sigma> =\n          mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog \\<sigma> \\<Longrightarrow>\n       (case ioprog a \\<sigma> of None \\<Rightarrow> None\n        | Some (out, \\<sigma>') \\<Rightarrow>\n            case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                  \\<iota>s ioprog \\<sigma>' of\n            None \\<Rightarrow> None\n            | Some (outs, \\<sigma>'') \\<Rightarrow>\n                Some (out # outs, \\<sigma>'')) =\n       (case ioprog a \\<sigma> of None \\<Rightarrow> Some ([], \\<sigma>)\n        | Some (out, \\<sigma>') \\<Rightarrow>\n            case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                  \\<iota>s ioprog \\<sigma>' of\n            None \\<Rightarrow> Some ([out], \\<sigma>')\n            | Some (outs, \\<sigma>'') \\<Rightarrow>\n                Some (out # outs, \\<sigma>''))", "apply(insert A, erule_tac x=\"a\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s \\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                    \\<iota>s ioprog \\<sigma> =\n                   mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                    \\<iota>s ioprog \\<sigma>;\n        \\<forall>\\<sigma>. ioprog a \\<sigma> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> (case ioprog a \\<sigma> of None \\<Rightarrow> None\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                                    \\<iota>s ioprog \\<sigma>' of\n                              None \\<Rightarrow> None\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>'')) =\n                         (case ioprog a \\<sigma> of\n                          None \\<Rightarrow> Some ([], \\<sigma>)\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                                    \\<iota>s ioprog \\<sigma>' of\n                              None \\<Rightarrow> Some ([out], \\<sigma>')\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>''))", "apply(erule_tac x=\"\\<sigma>\" and P=\"\\<lambda>\\<sigma> . ioprog a \\<sigma> \\<noteq> None\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s \\<sigma>.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                    \\<iota>s ioprog \\<sigma> =\n                   mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                    \\<iota>s ioprog \\<sigma>;\n        ioprog a \\<sigma> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> (case ioprog a \\<sigma> of None \\<Rightarrow> None\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                                    \\<iota>s ioprog \\<sigma>' of\n                              None \\<Rightarrow> None\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>'')) =\n                         (case ioprog a \\<sigma> of\n                          None \\<Rightarrow> Some ([], \\<sigma>)\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                                    \\<iota>s ioprog \\<sigma>' of\n                              None \\<Rightarrow> Some ([out], \\<sigma>')\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>''))", "apply(auto split:option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>\\<sigma>.\n     mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      \\<iota>s ioprog \\<sigma> =\n     mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n      \\<iota>s ioprog \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<iota>s.\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           \\<iota>s ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         P) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n           (a # \\<iota>s) ioprog)\n         P) =\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           (a # \\<iota>s) ioprog)\n         P)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # \\<iota>s) ioprog)\n      P) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # \\<iota>s) ioprog)\n      P)", "apply(insert A,erule_tac x=\"a\" in allE,erule_tac x=\"\\<sigma>\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ioprog a \\<sigma> \\<noteq> None \\<Longrightarrow>\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n        (a # \\<iota>s) ioprog)\n      P) =\n    (\\<sigma> \\<Turnstile>\n     bind\\<^sub>S\\<^sub>E\n      (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n        (a # \\<iota>s) ioprog)\n      P)", "apply(simp, elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       ioprog a \\<sigma> = Some (aa, b) \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (\\<lambda>b.\n             case ioprog a b of None \\<Rightarrow> Some ([], b)\n             | Some (out, \\<sigma>') \\<Rightarrow>\n                 case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog \\<sigma>' of\n                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                     Some (out # outs, \\<sigma>''))\n         P) =\n       (\\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x))))", "apply(rename_tac  \"out\" \"\\<sigma>'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       ioprog a \\<sigma> = Some (out, \\<sigma>') \\<Longrightarrow>\n       (\\<sigma> \\<Turnstile>\n        bind\\<^sub>S\\<^sub>E\n         (\\<lambda>b.\n             case ioprog a b of None \\<Rightarrow> Some ([], b)\n             | Some (out, \\<sigma>') \\<Rightarrow>\n                 case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                       \\<iota>s ioprog \\<sigma>' of\n                 None \\<Rightarrow> Some ([out], \\<sigma>')\n                 | Some (outs, \\<sigma>'') \\<Rightarrow>\n                     Some (out # outs, \\<sigma>''))\n         P) =\n       (\\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x))))", "apply(insert B, erule_tac x=\\<iota>s in allE, erule_tac x=ioprog in allE, erule_tac x=\\<sigma>' in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>'.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' \\<noteq>\n        None\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          bind\\<^sub>S\\<^sub>E\n                           (\\<lambda>b.\n                               case ioprog a b of\n                               None \\<Rightarrow> Some ([], b)\n                               | Some (out, \\<sigma>') \\<Rightarrow>\n                                   case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n   \\<iota>s ioprog \\<sigma>' of\n                                   None \\<Rightarrow>\n                                     Some ([out], \\<sigma>')\n                                   | Some (outs, \\<sigma>'') \\<Rightarrow>\n Some (out # outs, \\<sigma>''))\n                           P) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE a (ioprog a)\n                           (_bind_SE x\n                             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                               \\<iota>s ioprog)\n                             (P (a # x))))", "apply(subst(asm) not_None_eq, elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>' y.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma> \\<Turnstile>\n                          bind\\<^sub>S\\<^sub>E\n                           (\\<lambda>b.\n                               case ioprog a b of\n                               None \\<Rightarrow> Some ([], b)\n                               | Some (out, \\<sigma>') \\<Rightarrow>\n                                   case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n   \\<iota>s ioprog \\<sigma>' of\n                                   None \\<Rightarrow>\n                                     Some ([out], \\<sigma>')\n                                   | Some (outs, \\<sigma>'') \\<Rightarrow>\n Some (out # outs, \\<sigma>''))\n                           P) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE a (ioprog a)\n                           (_bind_SE x\n                             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                               \\<iota>s ioprog)\n                             (P (a # x))))", "apply(subst  exec_bind_SE_success)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>out \\<sigma>' y.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> (case ioprog a \\<sigma> of\n                          None \\<Rightarrow> Some ([], \\<sigma>)\n                          | Some (out, \\<sigma>') \\<Rightarrow>\n                              case mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n                                    \\<iota>s ioprog \\<sigma>' of\n                              None \\<Rightarrow> Some ([out], \\<sigma>')\n                              | Some (outs, \\<sigma>'') \\<Rightarrow>\n                                  Some (out # outs, \\<sigma>'')) =\n                         Some\n                          (?b13 out \\<sigma>' y,\n                           ?\\<sigma>'13 out \\<sigma>' y)\n 2. \\<And>out \\<sigma>' y.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> (?\\<sigma>'13 out \\<sigma>' y \\<Turnstile>\n                          P (?b13 out \\<sigma>' y)) =\n                         (\\<sigma> \\<Turnstile>\n                          _bind_SE a (ioprog a)\n                           (_bind_SE x\n                             (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                               \\<iota>s ioprog)\n                             (P (a # x))))", "apply(simp   split: option.split, auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b)\\<rbrakk>\n       \\<Longrightarrow> out # aa = ?b13 out \\<sigma>' (aa, b)\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b)\\<rbrakk>\n       \\<Longrightarrow> b = ?\\<sigma>'13 out \\<sigma>' (aa, b)\n 3. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        ?\\<sigma>'13 out \\<sigma>' (aa, b) \\<Turnstile>\n        P (?b13 out \\<sigma>' (aa, b))\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE a (ioprog a)\n                          (_bind_SE x\n                            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                              \\<iota>s ioprog)\n                            (P (a # x)))\n 4. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> ?\\<sigma>'13 out \\<sigma>' (aa, b) \\<Turnstile>\n                         P (?b13 out \\<sigma>' (aa, b))", "apply(rule_tac s=\"(\\<lambda> a b c. a # (fst c)) out \\<sigma>' (aa, b)\" in trans, simp,rule refl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b)\\<rbrakk>\n       \\<Longrightarrow> b = ?\\<sigma>'13 out \\<sigma>' (aa, b)\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        ?\\<sigma>'13 out \\<sigma>' (aa, b) \\<Turnstile>\n        P (out # fst (aa, b))\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE a (ioprog a)\n                          (_bind_SE x\n                            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                              \\<iota>s ioprog)\n                            (P (a # x)))\n 3. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> ?\\<sigma>'13 out \\<sigma>' (aa, b) \\<Turnstile>\n                         P (out # fst (aa, b))", "apply(rule_tac s=\"(\\<lambda> a b c. (snd c)) out \\<sigma>' (aa, b)\" in trans, simp,rule refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        snd (aa, b) \\<Turnstile> P (out # fst (aa, b))\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE a (ioprog a)\n                          (_bind_SE x\n                            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                              \\<iota>s ioprog)\n                            (P (a # x)))\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> snd (aa, b) \\<Turnstile> P (out # fst (aa, b))", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        b \\<Turnstile> P (out # aa)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<Turnstile>\n                         _bind_SE a (ioprog a)\n                          (_bind_SE x\n                            (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                              \\<iota>s ioprog)\n                            (P (a # x)))\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> b \\<Turnstile> P (out # aa)", "apply(subst  exec_bind_SE_success, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        b \\<Turnstile> P (out # aa)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' \\<Turnstile>\n                         _bind_SE x\n                          (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                            \\<iota>s ioprog)\n                          (P (out # x))\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> b \\<Turnstile> P (out # aa)", "apply(subst  exec_bind_SE_success)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        b \\<Turnstile> P (out # aa)\\<rbrakk>\n       \\<Longrightarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                          \\<iota>s ioprog \\<sigma>' =\n                         Some\n                          (?b29 out \\<sigma>' aa b,\n                           ?\\<sigma>'29 out \\<sigma>' aa b)\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        b \\<Turnstile> P (out # aa)\\<rbrakk>\n       \\<Longrightarrow> ?\\<sigma>'29 out \\<sigma>' aa b \\<Turnstile>\n                         P (out # ?b29 out \\<sigma>' aa b)\n 3. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> b \\<Turnstile> P (out # aa)", "apply(rule_tac s=\"Some (aa, b)\" in  trans,simp_all add:C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma> \\<Turnstile>\n        _bind_SE a (ioprog a)\n         (_bind_SE x\n           (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n             \\<iota>s ioprog)\n           (P (a # x)))\\<rbrakk>\n       \\<Longrightarrow> b \\<Turnstile> P (out # aa)", "apply(subst(asm)  exec_bind_SE_success, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        \\<sigma>' \\<Turnstile>\n        _bind_SE x\n         (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n           \\<iota>s ioprog)\n         (P (out # x))\\<rbrakk>\n       \\<Longrightarrow> b \\<Turnstile> P (out # aa)", "apply(subst(asm)  exec_bind_SE_success)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b)\\<rbrakk>\n       \\<Longrightarrow> mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n                          \\<iota>s ioprog \\<sigma>' =\n                         Some\n                          (?b33 out \\<sigma>' aa b,\n                           ?\\<sigma>'33 out \\<sigma>' aa b)\n 2. \\<And>out \\<sigma>' aa b.\n       \\<lbrakk>ioprog a \\<sigma> = Some (out, \\<sigma>');\n        mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n         \\<iota>s ioprog \\<sigma>' =\n        Some (aa, b);\n        ?\\<sigma>'33 out \\<sigma>' aa b \\<Turnstile>\n        P (out # ?b33 out \\<sigma>' aa b)\\<rbrakk>\n       \\<Longrightarrow> b \\<Turnstile> P (out # aa)", "apply(rule_tac s=\"Some (aa, b)\" in  trans,simp_all add:C)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>a\\<^sub>v\\<^sub>e\n      (a # \\<iota>s) ioprog)\n    P) =\n  (\\<sigma> \\<Turnstile>\n   bind\\<^sub>S\\<^sub>E\n    (mbind\\<^sub>F\\<^sub>a\\<^sub>i\\<^sub>l\\<^sub>S\\<^sub>t\\<^sub>o\\<^sub>p\n      (a # \\<iota>s) ioprog)\n    P)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Miscellaneous\\<close>"], ["", "no_notation unit_SE (\"(result _)\" 8)"], ["", "end"]]}