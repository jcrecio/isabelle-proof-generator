{"file_name": "/home/qj213/afp-2021-10-22/thys/Hermite_Lindemann/Misc_HLW.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hermite_Lindemann", "problem_names": ["lemma set_mset_subset_singletonD:\n  assumes \"set_mset A \\<subseteq> {x}\"\n  shows   \"A = replicate_mset (size A) x\"", "lemma image_mset_eq_replicate_msetD:\n  assumes \"image_mset f A = replicate_mset n y\"\n  shows   \"\\<forall>x\\<in>#A. f x = y\"", "lemma bij_betw_permutes_compose_left:\n  assumes \"\\<pi> permutes A\"\n  shows   \"bij_betw (\\<lambda>\\<sigma>. \\<pi> \\<circ> \\<sigma>) {\\<sigma>. \\<sigma> permutes A} {\\<sigma>. \\<sigma> permutes A}\"", "lemma bij_betw_compose_left_perm_Pi:\n  assumes \"\\<pi> permutes B\"\n  shows   \"bij_betw (\\<lambda>f. (\\<pi> \\<circ> f)) (A \\<rightarrow> B) (A \\<rightarrow> B)\"", "lemma bij_betw_compose_left_perm_PiE:\n  assumes \"\\<pi> permutes B\"\n  shows   \"bij_betw (\\<lambda>f. restrict (\\<pi> \\<circ> f) A) (A \\<rightarrow>\\<^sub>E B) (A \\<rightarrow>\\<^sub>E B)\"", "lemma bij_betw_image_mset_set:\n  assumes \"bij_betw f A B\"\n  shows   \"image_mset f (mset_set A) = mset_set B\"", "lemma finite_multisets_of_size:\n  assumes \"finite A\"\n  shows   \"finite {X. set_mset X \\<subseteq> A \\<and> size X = n}\"", "lemma sum_mset_image_mset_sum_mset_image_mset:\n   \"sum_mset (image_mset g (sum_mset (image_mset f A))) =\n    sum_mset (image_mset (\\<lambda>x. sum_mset (image_mset g (f x))) A)\"", "lemma sum_mset_image_mset_singleton: \"sum_mset (image_mset (\\<lambda>x. {#f x#}) A) = image_mset f A\"", "lemma sum_mset_conv_sum:\n  \"sum_mset (image_mset f A) = (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\"", "lemma sum_mset_conv_Sum_any:\n  \"sum_mset (image_mset f A) = Sum_any (\\<lambda>x. of_nat (count A x) * f x)\"", "lemma Sum_any_sum_swap:\n  assumes \"finite A\" \"\\<And>y. finite {x. f x y \\<noteq> 0}\"\n  shows   \"Sum_any (\\<lambda>x. sum (f x) A) = (\\<Sum>y\\<in>A. Sum_any (\\<lambda>x. f x y))\"", "lemma (in landau_pair) big_power:\n  assumes \"f \\<in> L F g\"\n  shows   \"(\\<lambda>x. f x ^ n) \\<in> L F (\\<lambda>x. g x ^ n)\"", "lemma (in landau_pair) small_power:\n  assumes \"f \\<in> l F g\" \"n > 0\"\n  shows   \"(\\<lambda>x. f x ^ n) \\<in> l F (\\<lambda>x. g x ^ n)\"", "lemma pairwise_imp_disjoint_family_on:\n  assumes \"pairwise R A\"\n  assumes \"\\<And>m n. m \\<in> A \\<Longrightarrow> n \\<in> A \\<Longrightarrow> R m n \\<Longrightarrow> f m \\<inter> f n = {}\"\n  shows   \"disjoint_family_on f A\"", "lemma (in comm_monoid_set) If_eq:\n  assumes \"y \\<in> A\" \"finite A\"\n  shows   \"F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A = f (g y (h1 y)) (F (\\<lambda>x. g x (h2 x)) (A-{y}))\"", "lemma prod_nonzeroI:\n  fixes f :: \"'a \\<Rightarrow> 'b :: {semiring_no_zero_divisors, comm_semiring_1}\"\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<noteq> 0\"\n  shows \"prod f A \\<noteq> 0\"", "lemma frequently_prime_cofinite: \"frequently (prime :: nat \\<Rightarrow> bool) cofinite\"", "lemma frequently_eventually_mono:\n  assumes \"frequently Q F\" \"eventually P F\" \"\\<And>x. P x \\<Longrightarrow> Q x \\<Longrightarrow> R x\"\n  shows   \"frequently R F\"", "lemma bij_betw_Diff:\n  assumes \"bij_betw f A B\" \"bij_betw f A' B'\" \"A' \\<subseteq> A\" \"B' \\<subseteq> B\"\n  shows   \"bij_betw f (A - A') (B - B')\"", "lemma bij_betw_singleton: \"bij_betw f {x} {y} \\<longleftrightarrow> f x = y\""], "translations": [["", "lemma set_mset_subset_singletonD:\n  assumes \"set_mset A \\<subseteq> {x}\"\n  shows   \"A = replicate_mset (size A) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = replicate_mset (size A) x", "using assms"], ["proof (prove)\nusing this:\n  set_mset A \\<subseteq> {x}\n\ngoal (1 subgoal):\n 1. A = replicate_mset (size A) x", "by (induction A) auto"], ["", "lemma image_mset_eq_replicate_msetD:\n  assumes \"image_mset f A = replicate_mset n y\"\n  shows   \"\\<forall>x\\<in>#A. f x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#A. f x = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#A. f x = y", "have \"f ` set_mset A = set_mset (image_mset f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` set_mset A = set_mset (image_mset f A)", "by simp"], ["proof (state)\nthis:\n  f ` set_mset A = set_mset (image_mset f A)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#A. f x = y", "also"], ["proof (state)\nthis:\n  f ` set_mset A = set_mset (image_mset f A)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#A. f x = y", "note assms"], ["proof (state)\nthis:\n  image_mset f A = replicate_mset n y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#A. f x = y", "finally"], ["proof (chain)\npicking this:\n  f ` set_mset A = set_mset (replicate_mset n y)", "show ?thesis"], ["proof (prove)\nusing this:\n  f ` set_mset A = set_mset (replicate_mset n y)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#A. f x = y", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>#A. f x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_permutes_compose_left:\n  assumes \"\\<pi> permutes A\"\n  shows   \"bij_betw (\\<lambda>\\<sigma>. \\<pi> \\<circ> \\<sigma>) {\\<sigma>. \\<sigma> permutes A} {\\<sigma>. \\<sigma> permutes A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((\\<circ>) \\<pi>) {\\<sigma>. \\<sigma> permutes A}\n     {\\<sigma>. \\<sigma> permutes A}", "proof (rule bij_betwI)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<circ>) \\<pi>\n    \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n          {\\<sigma>. \\<sigma> permutes A}\n 2. ?g \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n             {\\<sigma>. \\<sigma> permutes A}\n 3. \\<And>x.\n       x \\<in> {\\<sigma>. \\<sigma> permutes A} \\<Longrightarrow>\n       ?g (\\<pi> \\<circ> x) = x\n 4. \\<And>y.\n       y \\<in> {\\<sigma>. \\<sigma> permutes A} \\<Longrightarrow>\n       \\<pi> \\<circ> ?g y = y", "show \"(\\<circ>) \\<pi> \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow> {\\<sigma>. \\<sigma> permutes A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<circ>) \\<pi>\n    \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n          {\\<sigma>. \\<sigma> permutes A}", "by (auto intro: permutes_compose assms)"], ["proof (state)\nthis:\n  (\\<circ>) \\<pi>\n  \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n        {\\<sigma>. \\<sigma> permutes A}\n\ngoal (3 subgoals):\n 1. ?g \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n             {\\<sigma>. \\<sigma> permutes A}\n 2. \\<And>x.\n       x \\<in> {\\<sigma>. \\<sigma> permutes A} \\<Longrightarrow>\n       ?g (\\<pi> \\<circ> x) = x\n 3. \\<And>y.\n       y \\<in> {\\<sigma>. \\<sigma> permutes A} \\<Longrightarrow>\n       \\<pi> \\<circ> ?g y = y", "show \"(\\<circ>) (inv_into UNIV \\<pi>) \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow> {\\<sigma>. \\<sigma> permutes A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<circ>) (inv \\<pi>)\n    \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n          {\\<sigma>. \\<sigma> permutes A}", "by (auto intro: permutes_compose assms permutes_inv)"], ["proof (state)\nthis:\n  (\\<circ>) (inv \\<pi>)\n  \\<in> {\\<sigma>. \\<sigma> permutes A} \\<rightarrow>\n        {\\<sigma>. \\<sigma> permutes A}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {\\<sigma>. \\<sigma> permutes A} \\<Longrightarrow>\n       inv \\<pi> \\<circ> (\\<pi> \\<circ> x) = x\n 2. \\<And>y.\n       y \\<in> {\\<sigma>. \\<sigma> permutes A} \\<Longrightarrow>\n       \\<pi> \\<circ> (inv \\<pi> \\<circ> y) = y", "qed (use permutes_inverses[OF assms] in auto)"], ["", "lemma bij_betw_compose_left_perm_Pi:\n  assumes \"\\<pi> permutes B\"\n  shows   \"bij_betw (\\<lambda>f. (\\<pi> \\<circ> f)) (A \\<rightarrow> B) (A \\<rightarrow> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((\\<circ>) \\<pi>) (A \\<rightarrow> B) (A \\<rightarrow> B)", "proof (rule bij_betwI)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<circ>) \\<pi>\n    \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n 2. ?g \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n 3. \\<And>x.\n       x \\<in> A \\<rightarrow> B \\<Longrightarrow> ?g (\\<pi> \\<circ> x) = x\n 4. \\<And>y.\n       y \\<in> A \\<rightarrow> B \\<Longrightarrow> \\<pi> \\<circ> ?g y = y", "have *: \"(\\<lambda>f. (\\<pi> \\<circ> f)) \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\" if \\<pi>: \"\\<pi> permutes B\" for \\<pi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<circ>) \\<pi>\n    \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B", "by (auto simp: permutes_in_image[OF \\<pi>])"], ["proof (state)\nthis:\n  ?\\<pi> permutes B \\<Longrightarrow>\n  (\\<circ>) ?\\<pi> \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n\ngoal (4 subgoals):\n 1. (\\<circ>) \\<pi>\n    \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n 2. ?g \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n 3. \\<And>x.\n       x \\<in> A \\<rightarrow> B \\<Longrightarrow> ?g (\\<pi> \\<circ> x) = x\n 4. \\<And>y.\n       y \\<in> A \\<rightarrow> B \\<Longrightarrow> \\<pi> \\<circ> ?g y = y", "show \"(\\<lambda>f. (\\<pi> \\<circ> f)) \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<circ>) \\<pi>\n    \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B", "by (rule *) fact"], ["proof (state)\nthis:\n  (\\<circ>) \\<pi> \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n\ngoal (3 subgoals):\n 1. ?g \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n 2. \\<And>x.\n       x \\<in> A \\<rightarrow> B \\<Longrightarrow> ?g (\\<pi> \\<circ> x) = x\n 3. \\<And>y.\n       y \\<in> A \\<rightarrow> B \\<Longrightarrow> \\<pi> \\<circ> ?g y = y", "show \"(\\<lambda>f. (inv_into UNIV \\<pi> \\<circ> f)) \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<circ>) (inv \\<pi>)\n    \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B", "by (intro * permutes_inv) fact"], ["proof (state)\nthis:\n  (\\<circ>) (inv \\<pi>)\n  \\<in> (A \\<rightarrow> B) \\<rightarrow> A \\<rightarrow> B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<rightarrow> B \\<Longrightarrow>\n       inv \\<pi> \\<circ> (\\<pi> \\<circ> x) = x\n 2. \\<And>y.\n       y \\<in> A \\<rightarrow> B \\<Longrightarrow>\n       \\<pi> \\<circ> (inv \\<pi> \\<circ> y) = y", "qed (auto simp: permutes_inverses[OF assms] fun_eq_iff)"], ["", "lemma bij_betw_compose_left_perm_PiE:\n  assumes \"\\<pi> permutes B\"\n  shows   \"bij_betw (\\<lambda>f. restrict (\\<pi> \\<circ> f) A) (A \\<rightarrow>\\<^sub>E B) (A \\<rightarrow>\\<^sub>E B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>f. restrict (\\<pi> \\<circ> f) A)\n     (A \\<rightarrow>\\<^sub>E B) (A \\<rightarrow>\\<^sub>E B)", "proof (rule bij_betwI)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lambda>f. restrict (\\<pi> \\<circ> f) A)\n    \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n          A \\<rightarrow>\\<^sub>E B\n 2. ?g \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n             A \\<rightarrow>\\<^sub>E B\n 3. \\<And>x.\n       x \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       ?g (restrict (\\<pi> \\<circ> x) A) = x\n 4. \\<And>y.\n       y \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       restrict (\\<pi> \\<circ> ?g y) A = y", "have *: \"(\\<lambda>f. restrict (\\<pi> \\<circ> f) A) \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow> A \\<rightarrow>\\<^sub>E B\" if \\<pi>: \"\\<pi> permutes B\" for \\<pi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. restrict (\\<pi> \\<circ> f) A)\n    \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n          A \\<rightarrow>\\<^sub>E B", "by (auto simp: permutes_in_image[OF \\<pi>])"], ["proof (state)\nthis:\n  ?\\<pi> permutes B \\<Longrightarrow>\n  (\\<lambda>f. restrict (?\\<pi> \\<circ> f) A)\n  \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow> A \\<rightarrow>\\<^sub>E B\n\ngoal (4 subgoals):\n 1. (\\<lambda>f. restrict (\\<pi> \\<circ> f) A)\n    \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n          A \\<rightarrow>\\<^sub>E B\n 2. ?g \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n             A \\<rightarrow>\\<^sub>E B\n 3. \\<And>x.\n       x \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       ?g (restrict (\\<pi> \\<circ> x) A) = x\n 4. \\<And>y.\n       y \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       restrict (\\<pi> \\<circ> ?g y) A = y", "show \"(\\<lambda>f. restrict (\\<pi> \\<circ> f) A) \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow> A \\<rightarrow>\\<^sub>E B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. restrict (\\<pi> \\<circ> f) A)\n    \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n          A \\<rightarrow>\\<^sub>E B", "by (rule *) fact"], ["proof (state)\nthis:\n  (\\<lambda>f. restrict (\\<pi> \\<circ> f) A)\n  \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow> A \\<rightarrow>\\<^sub>E B\n\ngoal (3 subgoals):\n 1. ?g \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n             A \\<rightarrow>\\<^sub>E B\n 2. \\<And>x.\n       x \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       ?g (restrict (\\<pi> \\<circ> x) A) = x\n 3. \\<And>y.\n       y \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       restrict (\\<pi> \\<circ> ?g y) A = y", "show \"(\\<lambda>f. restrict (inv_into UNIV \\<pi> \\<circ> f) A) \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow> A \\<rightarrow>\\<^sub>E B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. restrict (inv \\<pi> \\<circ> f) A)\n    \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow>\n          A \\<rightarrow>\\<^sub>E B", "by (intro * permutes_inv) fact"], ["proof (state)\nthis:\n  (\\<lambda>f. restrict (inv \\<pi> \\<circ> f) A)\n  \\<in> (A \\<rightarrow>\\<^sub>E B) \\<rightarrow> A \\<rightarrow>\\<^sub>E B\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       restrict (inv \\<pi> \\<circ> restrict (\\<pi> \\<circ> x) A) A = x\n 2. \\<And>y.\n       y \\<in> A \\<rightarrow>\\<^sub>E B \\<Longrightarrow>\n       restrict (\\<pi> \\<circ> restrict (inv \\<pi> \\<circ> y) A) A = y", "qed (auto simp: permutes_inverses[OF assms] fun_eq_iff)"], ["", "lemma bij_betw_image_mset_set:\n  assumes \"bij_betw f A B\"\n  shows   \"image_mset f (mset_set A) = mset_set B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset f (mset_set A) = mset_set B", "using assms"], ["proof (prove)\nusing this:\n  bij_betw f A B\n\ngoal (1 subgoal):\n 1. image_mset f (mset_set A) = mset_set B", "by (simp add: bij_betw_def image_mset_mset_set)"], ["", "lemma finite_multisets_of_size:\n  assumes \"finite A\"\n  shows   \"finite {X. set_mset X \\<subseteq> A \\<and> size X = n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {X. set_mset X \\<subseteq> A \\<and> size X = n}", "proof (rule finite_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. {X. set_mset X \\<subseteq> A \\<and> size X = n} \\<subseteq> ?B\n 2. finite ?B", "show \"{X. set_mset X \\<subseteq> A \\<and> size X = n} \\<subseteq> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {X. set_mset X \\<subseteq> A \\<and> size X = n}\n    \\<subseteq> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X. set_mset X \\<subseteq> A \\<and>\n                   size X = n} \\<Longrightarrow>\n       x \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X. set_mset X \\<subseteq> A \\<and>\n                   size X = n} \\<Longrightarrow>\n       x \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "assume X: \"X \\<in> {X. set_mset X \\<subseteq> A \\<and> size X = n}\""], ["proof (state)\nthis:\n  X \\<in> {X. set_mset X \\<subseteq> A \\<and> size X = n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X. set_mset X \\<subseteq> A \\<and>\n                   size X = n} \\<Longrightarrow>\n       x \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "obtain xs where [simp]: \"X = mset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs. X = mset xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_mset)"], ["proof (state)\nthis:\n  X = mset xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {X. set_mset X \\<subseteq> A \\<and>\n                   size X = n} \\<Longrightarrow>\n       x \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "thus \"X \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}\""], ["proof (prove)\nusing this:\n  X = mset xs\n\ngoal (1 subgoal):\n 1. X \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "using X"], ["proof (prove)\nusing this:\n  X = mset xs\n  X \\<in> {X. set_mset X \\<subseteq> A \\<and> size X = n}\n\ngoal (1 subgoal):\n 1. X \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}", "by auto"], ["proof (state)\nthis:\n  X \\<in> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {X. set_mset X \\<subseteq> A \\<and> size X = n}\n  \\<subseteq> mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n}\n\ngoal (1 subgoal):\n 1. finite (mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n})", "show \"finite (mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n})", "by (intro finite_imageI finite_lists_length_eq assms)"], ["proof (state)\nthis:\n  finite (mset ` {xs. set xs \\<subseteq> A \\<and> length xs = n})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_mset_image_mset_sum_mset_image_mset:\n   \"sum_mset (image_mset g (sum_mset (image_mset f A))) =\n    sum_mset (image_mset (\\<lambda>x. sum_mset (image_mset g (f x))) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset g (\\<Sum>\\<^sub># (image_mset f A))) =\n    (\\<Sum>x\\<in>#A. \\<Sum>\\<^sub># (image_mset g (f x)))", "by (induction A) auto"], ["", "lemma sum_mset_image_mset_singleton: \"sum_mset (image_mset (\\<lambda>x. {#f x#}) A) = image_mset f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>#A. {#f x#}) = image_mset f A", "by (induction A) auto"], ["", "lemma sum_mset_conv_sum:\n  \"sum_mset (image_mset f A) = (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "proof (induction A rule: full_multiset_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<forall>A.\n          A \\<subset># B \\<longrightarrow>\n          \\<Sum>\\<^sub># (image_mset f A) =\n          (\\<Sum>x\\<in>set_mset A.\n             of_nat (count A x) * f x) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (image_mset f B) =\n       (\\<Sum>x\\<in>set_mset B. of_nat (count B x) * f x)", "case (less A)"], ["proof (state)\nthis:\n  \\<forall>A.\n     A \\<subset># A \\<longrightarrow>\n     \\<Sum>\\<^sub># (image_mset f A) =\n     (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. \\<And>B.\n       \\<forall>A.\n          A \\<subset># B \\<longrightarrow>\n          \\<Sum>\\<^sub># (image_mset f A) =\n          (\\<Sum>x\\<in>set_mset A.\n             of_nat (count A x) * f x) \\<Longrightarrow>\n       \\<Sum>\\<^sub># (image_mset f B) =\n       (\\<Sum>x\\<in>set_mset B. of_nat (count B x) * f x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "proof (cases \"A = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "case False"], ["proof (state)\nthis:\n  A \\<noteq> {#}\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "then"], ["proof (chain)\npicking this:\n  A \\<noteq> {#}", "obtain x where x: \"x \\<in># A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in># A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in># A\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "define n where \"n = count A x\""], ["proof (state)\nthis:\n  n = count A x\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "define A' where \"A' = filter_mset (\\<lambda>y. y \\<noteq> x) A\""], ["proof (state)\nthis:\n  A' = {#y \\<in># A. y \\<noteq> x#}\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have A_eq: \"A = replicate_mset n x + A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = replicate_mset n x + A'", "by (intro multiset_eqI) (auto simp: A'_def n_def)"], ["proof (state)\nthis:\n  A = replicate_mset n x + A'\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have [simp]: \"x \\<notin># A'\" \"count A' x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin># A' &&& count A' x = 0", "by (auto simp: A'_def)"], ["proof (state)\nthis:\n  x \\<notin># A'\n  count A' x = 0\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "using x"], ["proof (prove)\nusing this:\n  x \\<in># A\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by (auto simp: n_def)"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have \"sum_mset (image_mset f A) = of_nat n * f x + sum_mset (image_mset f A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) =\n    of_nat n * f x + \\<Sum>\\<^sub># (image_mset f A')", "by (simp add: A_eq)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  of_nat n * f x + \\<Sum>\\<^sub># (image_mset f A')\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "also"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  of_nat n * f x + \\<Sum>\\<^sub># (image_mset f A')\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have \"A' \\<subset># A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<subset># A", "unfolding A'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#y \\<in># A. y \\<noteq> x#} \\<subset># A", "using x"], ["proof (prove)\nusing this:\n  x \\<in># A\n\ngoal (1 subgoal):\n 1. {#y \\<in># A. y \\<noteq> x#} \\<subset># A", "by (simp add: filter_mset_eq_conv subset_mset_def)"], ["proof (state)\nthis:\n  A' \\<subset># A\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "with less.IH"], ["proof (chain)\npicking this:\n  \\<forall>A.\n     A \\<subset># A \\<longrightarrow>\n     \\<Sum>\\<^sub># (image_mset f A) =\n     (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n  A' \\<subset># A", "have \"sum_mset (image_mset f A') = (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x)\""], ["proof (prove)\nusing this:\n  \\<forall>A.\n     A \\<subset># A \\<longrightarrow>\n     \\<Sum>\\<^sub># (image_mset f A) =\n     (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n  A' \\<subset># A\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A') =\n    (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x)", "by simp"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A') =\n  (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x)\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "also"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A') =\n  (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x)\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have \"\\<dots> = (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x) =\n    (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x)", "by (intro sum.cong) (auto simp: A_eq)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x) =\n  (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x)\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set_mset A'. of_nat (count A' x) * f x) =\n  (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x)\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "have \"of_nat n * f x + \\<dots> = (\\<Sum>x\\<in>insert x (set_mset A'). of_nat (count A x) * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat n * f x + (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x) =\n    (\\<Sum>x\\<in>insert x (set_mset A'). of_nat (count A x) * f x)", "by (subst sum.insert) (auto simp: A_eq)"], ["proof (state)\nthis:\n  of_nat n * f x + (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x) =\n  (\\<Sum>x\\<in>insert x (set_mset A'). of_nat (count A x) * f x)\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "also"], ["proof (state)\nthis:\n  of_nat n * f x + (\\<Sum>x\\<in>set_mset A'. of_nat (count A x) * f x) =\n  (\\<Sum>x\\<in>insert x (set_mset A'). of_nat (count A x) * f x)\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "from \\<open>n \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"insert x (set_mset A') = set_mset A\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. insert x (set_mset A') = set_mset A", "by (auto simp: A_eq)"], ["proof (state)\nthis:\n  insert x (set_mset A') = set_mset A\n\ngoal (2 subgoals):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n 2. A \\<noteq> {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "finally"], ["proof (chain)\npicking this:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "."], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. A = {#} \\<Longrightarrow>\n    \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "qed auto"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_mset_conv_Sum_any:\n  \"sum_mset (image_mset f A) = Sum_any (\\<lambda>x. of_nat (count A x) * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "have \"sum_mset (image_mset f A) = (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) =\n    (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)", "by (rule sum_mset_conv_sum)"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "also"], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) =\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "have \"\\<dots> = Sum_any (\\<lambda>x. of_nat (count A x) * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x) =\n    (\\<Sum>x. of_nat (count A x) * f x)", "proof (rule Sum_any.expand_superset [symmetric])"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (set_mset A)\n 2. {a. of_nat (count A a) * f a \\<noteq> (0::'a)} \\<subseteq> set_mset A", "show \"{x. of_nat (count A x) * f x \\<noteq> 0} \\<subseteq> set_mset A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. of_nat (count A x) * f x \\<noteq> (0::'a)} \\<subseteq> set_mset A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. of_nat (count A x) * f x \\<noteq>\n                   (0::'a)} \\<Longrightarrow>\n       x \\<in># A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. of_nat (count A x) * f x \\<noteq>\n                   (0::'a)} \\<Longrightarrow>\n       x \\<in># A", "assume \"x \\<in> {x. of_nat (count A x) * f x \\<noteq> 0}\""], ["proof (state)\nthis:\n  x \\<in> {x. of_nat (count A x) * f x \\<noteq> (0::'a)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. of_nat (count A x) * f x \\<noteq>\n                   (0::'a)} \\<Longrightarrow>\n       x \\<in># A", "hence \"count A x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<in> {x. of_nat (count A x) * f x \\<noteq> (0::'a)}\n\ngoal (1 subgoal):\n 1. count A x \\<noteq> 0", "by (intro notI) auto"], ["proof (state)\nthis:\n  count A x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. of_nat (count A x) * f x \\<noteq>\n                   (0::'a)} \\<Longrightarrow>\n       x \\<in># A", "thus \"x \\<in># A\""], ["proof (prove)\nusing this:\n  count A x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<in># A", "by auto"], ["proof (state)\nthis:\n  x \\<in># A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. of_nat (count A x) * f x \\<noteq> (0::'a)} \\<subseteq> set_mset A\n\ngoal (1 subgoal):\n 1. finite (set_mset A)", "qed auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set_mset A. of_nat (count A x) * f x) =\n  (\\<Sum>x. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "finally"], ["proof (chain)\npicking this:\n  \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)\n\ngoal (1 subgoal):\n 1. \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)", "."], ["proof (state)\nthis:\n  \\<Sum>\\<^sub># (image_mset f A) = (\\<Sum>x. of_nat (count A x) * f x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sum_any_sum_swap:\n  assumes \"finite A\" \"\\<And>y. finite {x. f x y \\<noteq> 0}\"\n  shows   \"Sum_any (\\<lambda>x. sum (f x) A) = (\\<Sum>y\\<in>A. Sum_any (\\<lambda>x. f x y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "have \"Sum_any (\\<lambda>x. sum (f x) A) = Sum_any (\\<lambda>x. Sum_any (\\<lambda>y. f x y when y \\<in> A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>x. \\<Sum>y. f x y when y \\<in> A)", "unfolding when_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) =\n    (\\<Sum>x. \\<Sum>y. if y \\<in> A then f x y else (0::'c))", "by (subst Sum_any.conditionalize) (use assms in simp_all)"], ["proof (state)\nthis:\n  (\\<Sum>x. sum (f x) A) = (\\<Sum>x. \\<Sum>y. f x y when y \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x. sum (f x) A) = (\\<Sum>x. \\<Sum>y. f x y when y \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "have \"\\<dots> = Sum_any (\\<lambda>y. Sum_any (\\<lambda>x. f x y when y \\<in> A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x. \\<Sum>y. f x y when y \\<in> A) =\n    (\\<Sum>y. \\<Sum>x. f x y when y \\<in> A)", "by (intro Sum_any.swap[of \"(\\<Union>y\\<in>A. {x. f x y \\<noteq> 0}) \\<times> A\"] finite_SigmaI finite_UN_I assms) auto"], ["proof (state)\nthis:\n  (\\<Sum>x. \\<Sum>y. f x y when y \\<in> A) =\n  (\\<Sum>y. \\<Sum>x. f x y when y \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x. \\<Sum>y. f x y when y \\<in> A) =\n  (\\<Sum>y. \\<Sum>x. f x y when y \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "have \"(\\<lambda>y. Sum_any (\\<lambda>x. f x y when y \\<in> A)) = (\\<lambda>y. Sum_any (\\<lambda>x. f x y) when y \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. \\<Sum>x. f x y when y \\<in> A) =\n    (\\<lambda>y. (\\<Sum>x. f x y) when y \\<in> A)", "by (auto simp: when_def)"], ["proof (state)\nthis:\n  (\\<lambda>y. \\<Sum>x. f x y when y \\<in> A) =\n  (\\<lambda>y. (\\<Sum>x. f x y) when y \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "also"], ["proof (state)\nthis:\n  (\\<lambda>y. \\<Sum>x. f x y when y \\<in> A) =\n  (\\<lambda>y. (\\<Sum>x. f x y) when y \\<in> A)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "have \"Sum_any \\<dots> = (\\<Sum>y\\<in>A. Sum_any (\\<lambda>x. f x y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y. (\\<Sum>x. f x y) when y \\<in> A) =\n    (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "unfolding when_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y. if y \\<in> A then \\<Sum>x. f x y else (0::'c)) =\n    (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "by (subst Sum_any.conditionalize) (use assms in simp_all)"], ["proof (state)\nthis:\n  (\\<Sum>y. (\\<Sum>x. f x y) when y \\<in> A) =\n  (\\<Sum>y\\<in>A. \\<Sum>x. f x y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)", "."], ["proof (state)\nthis:\n  (\\<Sum>x. sum (f x) A) = (\\<Sum>y\\<in>A. \\<Sum>x. f x y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in landau_pair) big_power:\n  assumes \"f \\<in> L F g\"\n  shows   \"(\\<lambda>x. f x ^ n) \\<in> L F (\\<lambda>x. g x ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x ^ n) \\<in> L F (\\<lambda>x. g x ^ n)", "using big_prod[of \"{..<n}\" \"\\<lambda>_. f\" F \"\\<lambda>_. g\"] assms"], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> {..<n} \\<Longrightarrow> f \\<in> L F g) \\<Longrightarrow>\n  (\\<lambda>y. \\<Prod>x<n. f y) \\<in> L F (\\<lambda>y. \\<Prod>x<n. g y)\n  f \\<in> L F g\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x ^ n) \\<in> L F (\\<lambda>x. g x ^ n)", "by simp"], ["", "lemma (in landau_pair) small_power:\n  assumes \"f \\<in> l F g\" \"n > 0\"\n  shows   \"(\\<lambda>x. f x ^ n) \\<in> l F (\\<lambda>x. g x ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x ^ n) \\<in> l F (\\<lambda>x. g x ^ n)", "using assms(2,1)"], ["proof (prove)\nusing this:\n  0 < n\n  f \\<in> l F g\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x ^ n) \\<in> l F (\\<lambda>x. g x ^ n)", "by (induction rule: nat_induct_non_zero) (auto intro!: small.mult)"], ["", "lemma pairwise_imp_disjoint_family_on:\n  assumes \"pairwise R A\"\n  assumes \"\\<And>m n. m \\<in> A \\<Longrightarrow> n \\<in> A \\<Longrightarrow> R m n \\<Longrightarrow> f m \\<inter> f n = {}\"\n  shows   \"disjoint_family_on f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on f A", "using assms"], ["proof (prove)\nusing this:\n  pairwise R A\n  \\<lbrakk>?m \\<in> A; ?n \\<in> A; R ?m ?n\\<rbrakk>\n  \\<Longrightarrow> f ?m \\<inter> f ?n = {}\n\ngoal (1 subgoal):\n 1. disjoint_family_on f A", "unfolding disjoint_family_on_def pairwise_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. x \\<noteq> y \\<longrightarrow> R x y\n  \\<lbrakk>?m \\<in> A; ?n \\<in> A; R ?m ?n\\<rbrakk>\n  \\<Longrightarrow> f ?m \\<inter> f ?n = {}\n\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>A.\n       \\<forall>n\\<in>A.\n          m \\<noteq> n \\<longrightarrow> f m \\<inter> f n = {}", "by blast"], ["", "lemma (in comm_monoid_set) If_eq:\n  assumes \"y \\<in> A\" \"finite A\"\n  shows   \"F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A = f (g y (h1 y)) (F (\\<lambda>x. g x (h2 x)) (A-{y}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "have \"F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n          f (g y (h1 y)) (F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A-{y}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>*\n    F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A - {y})", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> A\n  finite A\n\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>*\n    F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A - {y})", "by (subst remove[of _ y]) auto"], ["proof (state)\nthis:\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n  g y (h1 y) \\<^bold>*\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A - {y})\n\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "also"], ["proof (state)\nthis:\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n  g y (h1 y) \\<^bold>*\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A - {y})\n\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "have \"F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A-{y}) = F (\\<lambda>x. g x (h2 x)) (A-{y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A - {y}) =\n    F (\\<lambda>x. g x (h2 x)) (A - {y})", "by (intro cong) auto"], ["proof (state)\nthis:\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) (A - {y}) =\n  F (\\<lambda>x. g x (h2 x)) (A - {y})\n\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "finally"], ["proof (chain)\npicking this:\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n  g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "show ?thesis"], ["proof (prove)\nusing this:\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n  g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})\n\ngoal (1 subgoal):\n 1. F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n    g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})", "by simp"], ["proof (state)\nthis:\n  F (\\<lambda>x. g x (if x = y then h1 x else h2 x)) A =\n  g y (h1 y) \\<^bold>* F (\\<lambda>x. g x (h2 x)) (A - {y})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_nonzeroI:\n  fixes f :: \"'a \\<Rightarrow> 'b :: {semiring_no_zero_divisors, comm_semiring_1}\"\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<noteq> 0\"\n  shows \"prod f A \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f A \\<noteq> (0::'b)", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> f ?x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. prod f A \\<noteq> (0::'b)", "by (induction rule: infinite_finite_induct) auto"], ["", "lemma frequently_prime_cofinite: \"frequently (prime :: nat \\<Rightarrow> bool) cofinite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf_many prime", "unfolding INFM_nat_le"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. \\<exists>n\\<ge>m. prime n", "by (meson bigger_prime less_imp_le)"], ["", "lemma frequently_eventually_mono:\n  assumes \"frequently Q F\" \"eventually P F\" \"\\<And>x. P x \\<Longrightarrow> Q x \\<Longrightarrow> R x\"\n  shows   \"frequently R F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frequently R F", "proof (rule frequently_mp[OF _ assms(1)])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. Q x \\<longrightarrow> R x", "show \"eventually (\\<lambda>x. Q x \\<longrightarrow> R x) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. Q x \\<longrightarrow> R x", "using assms(2)"], ["proof (prove)\nusing this:\n  eventually P F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. Q x \\<longrightarrow> R x", "by eventually_elim (use assms(3) in blast)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. Q x \\<longrightarrow> R x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_Diff:\n  assumes \"bij_betw f A B\" \"bij_betw f A' B'\" \"A' \\<subseteq> A\" \"B' \\<subseteq> B\"\n  shows   \"bij_betw f (A - A') (B - B')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f (A - A') (B - B')", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f (A - A') \\<and> f ` (A - A') = B - B'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f (A - A')\n 2. f ` (A - A') = B - B'", "have \"inj_on f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f A", "using assms(1)"], ["proof (prove)\nusing this:\n  bij_betw f A B\n\ngoal (1 subgoal):\n 1. inj_on f A", "by (auto simp: bij_betw_def)"], ["proof (state)\nthis:\n  inj_on f A\n\ngoal (2 subgoals):\n 1. inj_on f (A - A')\n 2. f ` (A - A') = B - B'", "thus \"inj_on f (A - A')\""], ["proof (prove)\nusing this:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. inj_on f (A - A')", "by (rule inj_on_subset) auto"], ["proof (state)\nthis:\n  inj_on f (A - A')\n\ngoal (1 subgoal):\n 1. f ` (A - A') = B - B'", "have \"f ` (A - A') = f ` A - f ` A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` (A - A') = f ` A - f ` A'", "by (intro inj_on_image_set_diff[OF \\<open>inj_on f A\\<close>]) (use \\<open>A' \\<subseteq> A\\<close> in auto)"], ["proof (state)\nthis:\n  f ` (A - A') = f ` A - f ` A'\n\ngoal (1 subgoal):\n 1. f ` (A - A') = B - B'", "also"], ["proof (state)\nthis:\n  f ` (A - A') = f ` A - f ` A'\n\ngoal (1 subgoal):\n 1. f ` (A - A') = B - B'", "have \"\\<dots> = B - B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` A - f ` A' = B - B'", "using assms(1,2)"], ["proof (prove)\nusing this:\n  bij_betw f A B\n  bij_betw f A' B'\n\ngoal (1 subgoal):\n 1. f ` A - f ` A' = B - B'", "by (auto simp: bij_betw_def)"], ["proof (state)\nthis:\n  f ` A - f ` A' = B - B'\n\ngoal (1 subgoal):\n 1. f ` (A - A') = B - B'", "finally"], ["proof (chain)\npicking this:\n  f ` (A - A') = B - B'", "show \"f` (A - A') = B - B'\""], ["proof (prove)\nusing this:\n  f ` (A - A') = B - B'\n\ngoal (1 subgoal):\n 1. f ` (A - A') = B - B'", "."], ["proof (state)\nthis:\n  f ` (A - A') = B - B'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_singleton: \"bij_betw f {x} {y} \\<longleftrightarrow> f x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f {x} {y} = (f x = y)", "by (auto simp: bij_betw_def)"], ["", "end"]]}