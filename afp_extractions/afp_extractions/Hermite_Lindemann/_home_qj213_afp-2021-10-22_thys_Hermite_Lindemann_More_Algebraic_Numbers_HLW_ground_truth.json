{"file_name": "/home/qj213/afp-2021-10-22/thys/Hermite_Lindemann/More_Algebraic_Numbers_HLW.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hermite_Lindemann", "problem_names": ["lemma in_Ints_imp_algebraic [simp, intro]: \"x \\<in> \\<int> \\<Longrightarrow> algebraic x\"", "lemma in_Rats_imp_algebraic [simp, intro]: \"x \\<in> \\<rat> \\<Longrightarrow> algebraic x\"", "lemma algebraic_uminus_iff [simp]: \"algebraic (-x) \\<longleftrightarrow> algebraic x\"", "lemma algebraic_0 [simp]: \"algebraic (0 :: 'a :: field_char_0)\"\n  and algebraic_1 [simp]: \"algebraic (1 :: 'a :: field_char_0)\"", "lemma algebraic_sum [intro]:\n  \"(\\<And>x. x \\<in> A \\<Longrightarrow> algebraic (f x)) \\<Longrightarrow> algebraic (sum f A)\"", "lemma algebraic_prod [intro]:\n  \"(\\<And>x. x \\<in> A \\<Longrightarrow> algebraic (f x)) \\<Longrightarrow> algebraic (prod f A)\"", "lemma algebraic_sum_list [intro]:\n  \"(\\<And>x. x \\<in> set xs \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (sum_list xs)\"", "lemma algebraic_prod_list [intro]:\n  \"(\\<And>x. x \\<in> set xs \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (prod_list xs)\"", "lemma algebraic_sum_mset [intro]:\n  \"(\\<And>x. x \\<in># A \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (sum_mset A)\"", "lemma algebraic_prod_mset [intro]:\n  \"(\\<And>x. x \\<in># A \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (prod_mset A)\"", "lemma algebraic_power [intro]: \"algebraic x \\<Longrightarrow> algebraic (x ^ n)\"", "lemma algebraic_csqrt [intro]: \"algebraic x \\<Longrightarrow> algebraic (csqrt x)\"", "lemma algebraic_csqrt_iff [simp]: \"algebraic (csqrt x) \\<longleftrightarrow> algebraic x\"", "lemmas [intro] = algebraic_plus algebraic_times algebraic_uminus algebraic_div", "lemma algebraic_power_iff [simp]:\n  assumes \"n > 0\"\n  shows   \"algebraic (x ^ n) \\<longleftrightarrow> algebraic x\"", "lemma algebraic_ii [simp]: \"algebraic \\<i>\"", "lemma algebraic_int_fact [simp, intro]: \"algebraic_int (fact n)\"", "lemma algebraic_minus [intro]: \"algebraic x \\<Longrightarrow> algebraic y \\<Longrightarrow> algebraic (x - y)\"", "lemma algebraic_add_cancel_left [simp]:\n  assumes \"algebraic x\"\n  shows   \"algebraic (x + y) \\<longleftrightarrow> algebraic y\"", "lemma algebraic_add_cancel_right [simp]:\n  assumes \"algebraic y\"\n  shows   \"algebraic (x + y) \\<longleftrightarrow> algebraic x\"", "lemma algebraic_diff_cancel_left [simp]:\n  assumes \"algebraic x\"\n  shows   \"algebraic (x - y) \\<longleftrightarrow> algebraic y\"", "lemma algebraic_diff_cancel_right [simp]:\n  assumes \"algebraic y\"\n  shows   \"algebraic (x - y) \\<longleftrightarrow> algebraic x\"", "lemma algebraic_mult_cancel_left [simp]:\n  assumes \"algebraic x\" \"x \\<noteq> 0\"\n  shows   \"algebraic (x * y) \\<longleftrightarrow> algebraic y\"", "lemma algebraic_mult_cancel_right [simp]:\n  assumes \"algebraic y\" \"y \\<noteq> 0\"\n  shows   \"algebraic (x * y) \\<longleftrightarrow> algebraic x\"", "lemma algebraic_inverse_iff [simp]: \"algebraic (inverse y) \\<longleftrightarrow> algebraic y\"", "lemma algebraic_divide_cancel_left [simp]:\n  assumes \"algebraic x\" \"x \\<noteq> 0\"\n  shows   \"algebraic (x / y) \\<longleftrightarrow> algebraic y\"", "lemma algebraic_divide_cancel_right [simp]:\n  assumes \"algebraic y\" \"y \\<noteq> 0\"\n  shows   \"algebraic (x / y) \\<longleftrightarrow> algebraic x\"", "lemma algebraic_imp_algebraic_int:\n  fixes x :: \"'a :: field_char_0\"\n  assumes \"ipoly p x = 0\" \"p \\<noteq> 0\"\n  defines \"c \\<equiv> Polynomial.lead_coeff p\"\n  shows   \"algebraic_int (of_int c * x)\"", "lemma algebraic_imp_algebraic_int':\n  fixes x :: \"'a :: field_char_0\"\n  assumes \"ipoly p x = 0\" \"p \\<noteq> 0\" \"Polynomial.lead_coeff p dvd c\"\n  shows   \"algebraic_int (of_int c * x)\""], "translations": [["", "lemma in_Ints_imp_algebraic [simp, intro]: \"x \\<in> \\<int> \\<Longrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<int> \\<Longrightarrow> algebraic x", "by (intro algebraic_int_imp_algebraic int_imp_algebraic_int)"], ["", "lemma in_Rats_imp_algebraic [simp, intro]: \"x \\<in> \\<rat> \\<Longrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<rat> \\<Longrightarrow> algebraic x", "by (auto elim!: Rats_cases' intro: algebraic_div)"], ["", "lemma algebraic_uminus_iff [simp]: \"algebraic (-x) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (- x) = algebraic x", "using algebraic_uminus[of x] algebraic_uminus[of \"-x\"]"], ["proof (prove)\nusing this:\n  algebraic x \\<Longrightarrow> algebraic (- x)\n  algebraic (- x) \\<Longrightarrow> algebraic (- (- x))\n\ngoal (1 subgoal):\n 1. algebraic (- x) = algebraic x", "by auto"], ["", "lemma algebraic_0 [simp]: \"algebraic (0 :: 'a :: field_char_0)\"\n  and algebraic_1 [simp]: \"algebraic (1 :: 'a :: field_char_0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (0::'a) &&& algebraic (1::'a)", "by auto"], ["", "lemma algebraic_sum [intro]:\n  \"(\\<And>x. x \\<in> A \\<Longrightarrow> algebraic (f x)) \\<Longrightarrow> algebraic (sum f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> algebraic (f x)) \\<Longrightarrow>\n    algebraic (sum f A)", "by (induction A rule: infinite_finite_induct) (auto intro!: algebraic_plus)"], ["", "lemma algebraic_prod [intro]:\n  \"(\\<And>x. x \\<in> A \\<Longrightarrow> algebraic (f x)) \\<Longrightarrow> algebraic (prod f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> algebraic (f x)) \\<Longrightarrow>\n    algebraic (prod f A)", "by (induction A rule: infinite_finite_induct) (auto intro!: algebraic_times)"], ["", "lemma algebraic_sum_list [intro]:\n  \"(\\<And>x. x \\<in> set xs \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (sum_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set xs \\<Longrightarrow> algebraic x) \\<Longrightarrow>\n    algebraic (sum_list xs)", "by (induction xs) (auto intro!: algebraic_plus)"], ["", "lemma algebraic_prod_list [intro]:\n  \"(\\<And>x. x \\<in> set xs \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (prod_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set xs \\<Longrightarrow> algebraic x) \\<Longrightarrow>\n    algebraic (prod_list xs)", "by (induction xs) (auto intro!: algebraic_times)"], ["", "lemma algebraic_sum_mset [intro]:\n  \"(\\<And>x. x \\<in># A \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (sum_mset A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in># A \\<Longrightarrow> algebraic x) \\<Longrightarrow>\n    algebraic (\\<Sum>\\<^sub># A)", "by (induction A) (auto intro!: algebraic_plus)"], ["", "lemma algebraic_prod_mset [intro]:\n  \"(\\<And>x. x \\<in># A \\<Longrightarrow> algebraic x) \\<Longrightarrow> algebraic (prod_mset A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in># A \\<Longrightarrow> algebraic x) \\<Longrightarrow>\n    algebraic (\\<Prod>\\<^sub># A)", "by (induction A) (auto intro!: algebraic_times)"], ["", "lemma algebraic_power [intro]: \"algebraic x \\<Longrightarrow> algebraic (x ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic x \\<Longrightarrow> algebraic (x ^ n)", "by (induction n) (auto intro: algebraic_times)"], ["", "lemma algebraic_csqrt [intro]: \"algebraic x \\<Longrightarrow> algebraic (csqrt x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "by (rule algebraic_nth_root[of 2 x]) auto"], ["", "lemma algebraic_csqrt_iff [simp]: \"algebraic (csqrt x) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (csqrt x) = algebraic x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. algebraic (csqrt x) \\<Longrightarrow> algebraic x\n 2. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "assume \"algebraic (csqrt x)\""], ["proof (state)\nthis:\n  algebraic (csqrt x)\n\ngoal (2 subgoals):\n 1. algebraic (csqrt x) \\<Longrightarrow> algebraic x\n 2. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "hence \"algebraic (csqrt x ^ 2)\""], ["proof (prove)\nusing this:\n  algebraic (csqrt x)\n\ngoal (1 subgoal):\n 1. algebraic ((csqrt x)\\<^sup>2)", "by (rule algebraic_power)"], ["proof (state)\nthis:\n  algebraic ((csqrt x)\\<^sup>2)\n\ngoal (2 subgoals):\n 1. algebraic (csqrt x) \\<Longrightarrow> algebraic x\n 2. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "also"], ["proof (state)\nthis:\n  algebraic ((csqrt x)\\<^sup>2)\n\ngoal (2 subgoals):\n 1. algebraic (csqrt x) \\<Longrightarrow> algebraic x\n 2. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "have \"csqrt x ^ 2 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (csqrt x)\\<^sup>2 = x", "by simp"], ["proof (state)\nthis:\n  (csqrt x)\\<^sup>2 = x\n\ngoal (2 subgoals):\n 1. algebraic (csqrt x) \\<Longrightarrow> algebraic x\n 2. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "finally"], ["proof (chain)\npicking this:\n  algebraic x", "show \"algebraic x\""], ["proof (prove)\nusing this:\n  algebraic x\n\ngoal (1 subgoal):\n 1. algebraic x", "."], ["proof (state)\nthis:\n  algebraic x\n\ngoal (1 subgoal):\n 1. algebraic x \\<Longrightarrow> algebraic (csqrt x)", "qed auto"], ["", "lemmas [intro] = algebraic_plus algebraic_times algebraic_uminus algebraic_div"], ["", "lemma algebraic_power_iff [simp]:\n  assumes \"n > 0\"\n  shows   \"algebraic (x ^ n) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x ^ n) = algebraic x", "using algebraic_nth_root[of n \"x ^ n\" x] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>n \\<noteq> 0; algebraic (x ^ n); x ^ n = x ^ n\\<rbrakk>\n  \\<Longrightarrow> algebraic x\n  0 < n\n\ngoal (1 subgoal):\n 1. algebraic (x ^ n) = algebraic x", "by auto"], ["", "lemma algebraic_ii [simp]: \"algebraic \\<i>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic \\<i>", "by (intro algebraic_int_imp_algebraic) auto"], ["", "lemma algebraic_int_fact [simp, intro]: \"algebraic_int (fact n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic_int (fact n)", "by (intro int_imp_algebraic_int fact_in_Ints)"], ["", "lemma algebraic_minus [intro]: \"algebraic x \\<Longrightarrow> algebraic y \\<Longrightarrow> algebraic (x - y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>algebraic x; algebraic y\\<rbrakk>\n    \\<Longrightarrow> algebraic (x - y)", "using algebraic_plus[of x \"-y\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>algebraic x; algebraic (- y)\\<rbrakk>\n  \\<Longrightarrow> algebraic (x + - y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>algebraic x; algebraic y\\<rbrakk>\n    \\<Longrightarrow> algebraic (x - y)", "by simp"], ["", "lemma algebraic_add_cancel_left [simp]:\n  assumes \"algebraic x\"\n  shows   \"algebraic (x + y) \\<longleftrightarrow> algebraic y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x + y) = algebraic y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. algebraic (x + y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x + y)", "assume \"algebraic (x + y)\""], ["proof (state)\nthis:\n  algebraic (x + y)\n\ngoal (2 subgoals):\n 1. algebraic (x + y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x + y)", "hence \"algebraic (x + y - x)\""], ["proof (prove)\nusing this:\n  algebraic (x + y)\n\ngoal (1 subgoal):\n 1. algebraic (x + y - x)", "using assms"], ["proof (prove)\nusing this:\n  algebraic (x + y)\n  algebraic x\n\ngoal (1 subgoal):\n 1. algebraic (x + y - x)", "by (intro algebraic_minus) auto"], ["proof (state)\nthis:\n  algebraic (x + y - x)\n\ngoal (2 subgoals):\n 1. algebraic (x + y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x + y)", "thus \"algebraic y\""], ["proof (prove)\nusing this:\n  algebraic (x + y - x)\n\ngoal (1 subgoal):\n 1. algebraic y", "by simp"], ["proof (state)\nthis:\n  algebraic y\n\ngoal (1 subgoal):\n 1. algebraic y \\<Longrightarrow> algebraic (x + y)", "qed (auto intro: algebraic_plus assms)"], ["", "lemma algebraic_add_cancel_right [simp]:\n  assumes \"algebraic y\"\n  shows   \"algebraic (x + y) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x + y) = algebraic x", "using algebraic_add_cancel_left[of y x] assms"], ["proof (prove)\nusing this:\n  algebraic y \\<Longrightarrow> algebraic (y + x) = algebraic x\n  algebraic y\n\ngoal (1 subgoal):\n 1. algebraic (x + y) = algebraic x", "by (simp add: add.commute del: algebraic_add_cancel_left)"], ["", "lemma algebraic_diff_cancel_left [simp]:\n  assumes \"algebraic x\"\n  shows   \"algebraic (x - y) \\<longleftrightarrow> algebraic y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x - y) = algebraic y", "using algebraic_add_cancel_left[of x \"-y\"] assms"], ["proof (prove)\nusing this:\n  algebraic x \\<Longrightarrow> algebraic (x + - y) = algebraic (- y)\n  algebraic x\n\ngoal (1 subgoal):\n 1. algebraic (x - y) = algebraic y", "by (simp del: algebraic_add_cancel_left)"], ["", "lemma algebraic_diff_cancel_right [simp]:\n  assumes \"algebraic y\"\n  shows   \"algebraic (x - y) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x - y) = algebraic x", "using algebraic_add_cancel_right[of \"-y\" x] assms"], ["proof (prove)\nusing this:\n  algebraic (- y) \\<Longrightarrow> algebraic (x + - y) = algebraic x\n  algebraic y\n\ngoal (1 subgoal):\n 1. algebraic (x - y) = algebraic x", "by (simp del: algebraic_add_cancel_right)"], ["", "lemma algebraic_mult_cancel_left [simp]:\n  assumes \"algebraic x\" \"x \\<noteq> 0\"\n  shows   \"algebraic (x * y) \\<longleftrightarrow> algebraic y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x * y) = algebraic y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. algebraic (x * y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x * y)", "assume \"algebraic (x * y)\""], ["proof (state)\nthis:\n  algebraic (x * y)\n\ngoal (2 subgoals):\n 1. algebraic (x * y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x * y)", "hence \"algebraic (x * y / x)\""], ["proof (prove)\nusing this:\n  algebraic (x * y)\n\ngoal (1 subgoal):\n 1. algebraic (x * y / x)", "using assms"], ["proof (prove)\nusing this:\n  algebraic (x * y)\n  algebraic x\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. algebraic (x * y / x)", "by (intro algebraic_div) auto"], ["proof (state)\nthis:\n  algebraic (x * y / x)\n\ngoal (2 subgoals):\n 1. algebraic (x * y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x * y)", "also"], ["proof (state)\nthis:\n  algebraic (x * y / x)\n\ngoal (2 subgoals):\n 1. algebraic (x * y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x * y)", "have \"x * y / x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y / x = y", "using assms"], ["proof (prove)\nusing this:\n  algebraic x\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x * y / x = y", "by auto"], ["proof (state)\nthis:\n  x * y / x = y\n\ngoal (2 subgoals):\n 1. algebraic (x * y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (x * y)", "finally"], ["proof (chain)\npicking this:\n  algebraic y", "show \"algebraic y\""], ["proof (prove)\nusing this:\n  algebraic y\n\ngoal (1 subgoal):\n 1. algebraic y", "."], ["proof (state)\nthis:\n  algebraic y\n\ngoal (1 subgoal):\n 1. algebraic y \\<Longrightarrow> algebraic (x * y)", "qed (auto intro: algebraic_times assms)"], ["", "lemma algebraic_mult_cancel_right [simp]:\n  assumes \"algebraic y\" \"y \\<noteq> 0\"\n  shows   \"algebraic (x * y) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x * y) = algebraic x", "using algebraic_mult_cancel_left[of y x] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>algebraic y; y \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> algebraic (y * x) = algebraic x\n  algebraic y\n  y \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. algebraic (x * y) = algebraic x", "by (simp add: mult.commute del: algebraic_mult_cancel_left)"], ["", "lemma algebraic_inverse_iff [simp]: \"algebraic (inverse y) \\<longleftrightarrow> algebraic y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (inverse y) = algebraic y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. algebraic (inverse y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (inverse y)", "assume \"algebraic (inverse y)\""], ["proof (state)\nthis:\n  algebraic (inverse y)\n\ngoal (2 subgoals):\n 1. algebraic (inverse y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (inverse y)", "hence \"algebraic (inverse (inverse y))\""], ["proof (prove)\nusing this:\n  algebraic (inverse y)\n\ngoal (1 subgoal):\n 1. algebraic (inverse (inverse y))", "by (rule algebraic_inverse)"], ["proof (state)\nthis:\n  algebraic (inverse (inverse y))\n\ngoal (2 subgoals):\n 1. algebraic (inverse y) \\<Longrightarrow> algebraic y\n 2. algebraic y \\<Longrightarrow> algebraic (inverse y)", "thus \"algebraic y\""], ["proof (prove)\nusing this:\n  algebraic (inverse (inverse y))\n\ngoal (1 subgoal):\n 1. algebraic y", "by simp"], ["proof (state)\nthis:\n  algebraic y\n\ngoal (1 subgoal):\n 1. algebraic y \\<Longrightarrow> algebraic (inverse y)", "qed (auto intro: algebraic_inverse)"], ["", "lemma algebraic_divide_cancel_left [simp]:\n  assumes \"algebraic x\" \"x \\<noteq> 0\"\n  shows   \"algebraic (x / y) \\<longleftrightarrow> algebraic y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic y", "have \"algebraic (x * inverse y) \\<longleftrightarrow> algebraic (inverse y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x * inverse y) = algebraic (inverse y)", "by (intro algebraic_mult_cancel_left assms)"], ["proof (state)\nthis:\n  algebraic (x * inverse y) = algebraic (inverse y)\n\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic y", "also"], ["proof (state)\nthis:\n  algebraic (x * inverse y) = algebraic (inverse y)\n\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic y", "have \"\\<dots> \\<longleftrightarrow> algebraic y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (inverse y) = algebraic y", "by (intro algebraic_inverse_iff)"], ["proof (state)\nthis:\n  algebraic (inverse y) = algebraic y\n\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic y", "finally"], ["proof (chain)\npicking this:\n  algebraic (x * inverse y) = algebraic y", "show ?thesis"], ["proof (prove)\nusing this:\n  algebraic (x * inverse y) = algebraic y\n\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic y", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  algebraic (x / y) = algebraic y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma algebraic_divide_cancel_right [simp]:\n  assumes \"algebraic y\" \"y \\<noteq> 0\"\n  shows   \"algebraic (x / y) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic x", "have \"algebraic (x * inverse y) \\<longleftrightarrow> algebraic x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic (x * inverse y) = algebraic x", "using assms"], ["proof (prove)\nusing this:\n  algebraic y\n  y \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. algebraic (x * inverse y) = algebraic x", "by (intro algebraic_mult_cancel_right) auto"], ["proof (state)\nthis:\n  algebraic (x * inverse y) = algebraic x\n\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic x", "thus ?thesis"], ["proof (prove)\nusing this:\n  algebraic (x * inverse y) = algebraic x\n\ngoal (1 subgoal):\n 1. algebraic (x / y) = algebraic x", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  algebraic (x / y) = algebraic x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Turning an algebraic number into an algebraic integer\\<close>"], ["", "subsection \\<open>\n  Multiplying an algebraic number with a suitable integer turns it into an algebraic integer.\n\\<close>"], ["", "lemma algebraic_imp_algebraic_int:\n  fixes x :: \"'a :: field_char_0\"\n  assumes \"ipoly p x = 0\" \"p \\<noteq> 0\"\n  defines \"c \\<equiv> Polynomial.lead_coeff p\"\n  shows   \"algebraic_int (of_int c * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "define n where \"n = Polynomial.degree p\""], ["proof (state)\nthis:\n  n = degree p\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "define p' where \"p' = Abs_poly (\\<lambda>i. if i = n then 1 else c ^ (n - i - 1) * poly.coeff p i)\""], ["proof (state)\nthis:\n  p' =\n  Abs_poly (\\<lambda>i. if i = n then 1 else c ^ (n - i - 1) * coeff p i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using assms"], ["proof (prove)\nusing this:\n  ipoly p x = (0::'a)\n  p \\<noteq> 0\n  c \\<equiv> lead_coeff p\n\ngoal (1 subgoal):\n 1. 0 < n", "unfolding n_def"], ["proof (prove)\nusing this:\n  ipoly p x = (0::'a)\n  p \\<noteq> 0\n  c \\<equiv> lead_coeff p\n\ngoal (1 subgoal):\n 1. 0 < degree p", "by (intro Nat.gr0I) (auto elim!: degree_eq_zeroE)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have coeff_p': \"poly.coeff p' i =\n                    (if i = n then 1 else c ^ (n - i - 1) * poly.coeff p i)\"\n    (is \"_ = ?f i\") for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p' i = (if i = n then 1 else c ^ (n - i - 1) * coeff p i)", "unfolding p'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff\n     (Abs_poly\n       (\\<lambda>i. if i = n then 1 else c ^ (n - i - 1) * coeff p i))\n     i =\n    (if i = n then 1 else c ^ (n - i - 1) * coeff p i)", "proof (subst poly.Abs_poly_inverse)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>i. if i = n then 1 else c ^ (n - i - 1) * coeff p i)\n    \\<in> {f. \\<forall>\\<^sub>\\<infinity>n. f n = 0}\n 2. (if i = n then 1 else c ^ (n - i - 1) * coeff p i) =\n    (if i = n then 1 else c ^ (n - i - 1) * coeff p i)", "have \"eventually (\\<lambda>i. poly.coeff p i = 0) cofinite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i. coeff p i = 0", "using MOST_coeff_eq_0"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>\\<infinity>n. coeff ?p n = (0::?'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i. coeff p i = 0", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>i. coeff p i = 0\n\ngoal (2 subgoals):\n 1. (\\<lambda>i. if i = n then 1 else c ^ (n - i - 1) * coeff p i)\n    \\<in> {f. \\<forall>\\<^sub>\\<infinity>n. f n = 0}\n 2. (if i = n then 1 else c ^ (n - i - 1) * coeff p i) =\n    (if i = n then 1 else c ^ (n - i - 1) * coeff p i)", "hence \"eventually (\\<lambda>i. ?f i = 0) cofinite\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>\\<infinity>i. coeff p i = 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>i.\n       (if i = n then 1 else c ^ (n - i - 1) * coeff p i) = 0", "by eventually_elim (use assms in \\<open>auto simp: n_def\\<close>)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>i.\n     (if i = n then 1 else c ^ (n - i - 1) * coeff p i) = 0\n\ngoal (2 subgoals):\n 1. (\\<lambda>i. if i = n then 1 else c ^ (n - i - 1) * coeff p i)\n    \\<in> {f. \\<forall>\\<^sub>\\<infinity>n. f n = 0}\n 2. (if i = n then 1 else c ^ (n - i - 1) * coeff p i) =\n    (if i = n then 1 else c ^ (n - i - 1) * coeff p i)", "thus \"?f \\<in> {f. eventually (\\<lambda>i. f i = 0) cofinite}\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>\\<infinity>i.\n     (if i = n then 1 else c ^ (n - i - 1) * coeff p i) = 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. if a = n then 1 else c ^ (n - a - 1) * coeff p a)\n    \\<in> {f. \\<forall>\\<^sub>\\<infinity>i. f i = 0}", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>a. if a = n then 1 else c ^ (n - a - 1) * coeff p a)\n  \\<in> {f. \\<forall>\\<^sub>\\<infinity>i. f i = 0}\n\ngoal (1 subgoal):\n 1. (if i = n then 1 else c ^ (n - i - 1) * coeff p i) =\n    (if i = n then 1 else c ^ (n - i - 1) * coeff p i)", "qed auto"], ["proof (state)\nthis:\n  coeff p' ?i = (if ?i = n then 1 else c ^ (n - ?i - 1) * coeff p ?i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have deg_p': \"Polynomial.degree p' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p' = n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p' = n", "from assms"], ["proof (chain)\npicking this:\n  ipoly p x = (0::'a)\n  p \\<noteq> 0\n  c \\<equiv> lead_coeff p", "have \"(\\<lambda>n. \\<forall>i>n. poly.coeff p' i = 0) = (\\<lambda>n. \\<forall>i>n. poly.coeff p i = 0)\""], ["proof (prove)\nusing this:\n  ipoly p x = (0::'a)\n  p \\<noteq> 0\n  c \\<equiv> lead_coeff p\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. \\<forall>i>n. coeff p' i = 0) =\n    (\\<lambda>n. \\<forall>i>n. coeff p i = 0)", "by (auto simp: coeff_p' fun_eq_iff n_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<forall>i>n. coeff p' i = 0) =\n  (\\<lambda>n. \\<forall>i>n. coeff p i = 0)\n\ngoal (1 subgoal):\n 1. degree p' = n", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. \\<forall>i>n. coeff p' i = 0) =\n  (\\<lambda>n. \\<forall>i>n. coeff p i = 0)\n\ngoal (1 subgoal):\n 1. degree p' = n", "by (simp add: Polynomial.degree_def n_def)"], ["proof (state)\nthis:\n  degree p' = n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree p' = n\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have lead_coeff_p': \"Polynomial.lead_coeff p' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic p'", "by (simp add: coeff_p' deg_p')"], ["proof (state)\nthis:\n  monic p'\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"0 = of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (poly.coeff p i) * x ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) =\n    of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i)", "using assms"], ["proof (prove)\nusing this:\n  ipoly p x = (0::'a)\n  p \\<noteq> 0\n  c \\<equiv> lead_coeff p\n\ngoal (1 subgoal):\n 1. (0::'a) =\n    of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i)", "unfolding n_def poly_altdef"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<le>degree (of_int_poly p). coeff (of_int_poly p) i * x ^ i) =\n  (0::'a)\n  p \\<noteq> 0\n  c \\<equiv> lead_coeff p\n\ngoal (1 subgoal):\n 1. (0::'a) =\n    of_int (c ^ (degree p - 1)) *\n    (\\<Sum>i\\<le>degree p. of_int (coeff p i) * x ^ i)", "by simp"], ["proof (state)\nthis:\n  (0::'a) =\n  of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "also"], ["proof (state)\nthis:\n  (0::'a) =\n  of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"\\<dots> = (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * poly.coeff p i) * x ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i) =\n    (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * coeff p i) * x ^ i)", "by (simp add: sum_distrib_left sum_distrib_right mult_ac)"], ["proof (state)\nthis:\n  of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i) =\n  (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * coeff p i) * x ^ i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "also"], ["proof (state)\nthis:\n  of_int (c ^ (n - 1)) * (\\<Sum>i\\<le>n. of_int (coeff p i) * x ^ i) =\n  (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * coeff p i) * x ^ i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"\\<dots> = (\\<Sum>i\\<le>n. of_int (poly.coeff p' i) * (of_int c * x) ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * coeff p i) * x ^ i) =\n    (\\<Sum>i\\<le>n. of_int (coeff p' i) * (of_int c * x) ^ i)", "proof (intro sum.cong, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. {..n} = {..n}\n 2. \\<And>xa.\n       xa \\<in> {..n} \\<Longrightarrow>\n       of_int (c ^ (n - 1) * coeff p xa) * x ^ xa =\n       of_int (coeff p' xa) * (of_int c * x) ^ xa", "case (2 i)"], ["proof (state)\nthis:\n  i \\<in> {..n}\n\ngoal (2 subgoals):\n 1. {..n} = {..n}\n 2. \\<And>xa.\n       xa \\<in> {..n} \\<Longrightarrow>\n       of_int (c ^ (n - 1) * coeff p xa) * x ^ xa =\n       of_int (coeff p' xa) * (of_int c * x) ^ xa", "have \"of_int (poly.coeff p' i) * (of_int c * x) ^ i =\n          of_int (c ^ i * poly.coeff p' i) * x ^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (coeff p' i) * (of_int c * x) ^ i =\n    of_int (c ^ i * coeff p' i) * x ^ i", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  of_int (coeff p' i) * (of_int c * x) ^ i =\n  of_int (c ^ i * coeff p' i) * x ^ i\n\ngoal (2 subgoals):\n 1. {..n} = {..n}\n 2. \\<And>xa.\n       xa \\<in> {..n} \\<Longrightarrow>\n       of_int (c ^ (n - 1) * coeff p xa) * x ^ xa =\n       of_int (coeff p' xa) * (of_int c * x) ^ xa", "also"], ["proof (state)\nthis:\n  of_int (coeff p' i) * (of_int c * x) ^ i =\n  of_int (c ^ i * coeff p' i) * x ^ i\n\ngoal (2 subgoals):\n 1. {..n} = {..n}\n 2. \\<And>xa.\n       xa \\<in> {..n} \\<Longrightarrow>\n       of_int (c ^ (n - 1) * coeff p xa) * x ^ xa =\n       of_int (coeff p' xa) * (of_int c * x) ^ xa", "have \"c ^ i * poly.coeff p' i = c ^ (n - 1) * poly.coeff p i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "proof (cases \"i = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "case True"], ["proof (state)\nthis:\n  i = n\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "hence \"c ^ i * poly.coeff p' i = c ^ n\""], ["proof (prove)\nusing this:\n  i = n\n\ngoal (1 subgoal):\n 1. c ^ i * coeff p' i = c ^ n", "by (auto simp: coeff_p' simp flip: power_Suc)"], ["proof (state)\nthis:\n  c ^ i * coeff p' i = c ^ n\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "also"], ["proof (state)\nthis:\n  c ^ i * coeff p' i = c ^ n\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "have \"n = Suc (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = Suc (n - 1)", "using \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. n = Suc (n - 1)", "by simp"], ["proof (state)\nthis:\n  n = Suc (n - 1)\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "also"], ["proof (state)\nthis:\n  n = Suc (n - 1)\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "have \"c ^ \\<dots> = c * c ^ (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c ^ Suc (n - 1) = c * c ^ (n - 1)", "by simp"], ["proof (state)\nthis:\n  c ^ Suc (n - 1) = c * c ^ (n - 1)\n\ngoal (2 subgoals):\n 1. i = n \\<Longrightarrow> c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n 2. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "finally"], ["proof (chain)\npicking this:\n  c ^ i * coeff p' i = c * c ^ (n - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  c ^ i * coeff p' i = c * c ^ (n - 1)\n\ngoal (1 subgoal):\n 1. c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "using True"], ["proof (prove)\nusing this:\n  c ^ i * coeff p' i = c * c ^ (n - 1)\n  i = n\n\ngoal (1 subgoal):\n 1. c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "by (simp add: c_def n_def)"], ["proof (state)\nthis:\n  c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> n\n\ngoal (1 subgoal):\n 1. i \\<noteq> n \\<Longrightarrow>\n    c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> n\n\ngoal (1 subgoal):\n 1. c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "using 2"], ["proof (prove)\nusing this:\n  i \\<noteq> n\n  i \\<in> {..n}\n\ngoal (1 subgoal):\n 1. c ^ i * coeff p' i = c ^ (n - 1) * coeff p i", "by (auto simp: coeff_p' simp flip: power_add)"], ["proof (state)\nthis:\n  c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c ^ i * coeff p' i = c ^ (n - 1) * coeff p i\n\ngoal (2 subgoals):\n 1. {..n} = {..n}\n 2. \\<And>xa.\n       xa \\<in> {..n} \\<Longrightarrow>\n       of_int (c ^ (n - 1) * coeff p xa) * x ^ xa =\n       of_int (coeff p' xa) * (of_int c * x) ^ xa", "finally"], ["proof (chain)\npicking this:\n  of_int (coeff p' i) * (of_int c * x) ^ i =\n  of_int (c ^ (n - 1) * coeff p i) * x ^ i", "show ?case"], ["proof (prove)\nusing this:\n  of_int (coeff p' i) * (of_int c * x) ^ i =\n  of_int (c ^ (n - 1) * coeff p i) * x ^ i\n\ngoal (1 subgoal):\n 1. of_int (c ^ (n - 1) * coeff p i) * x ^ i =\n    of_int (coeff p' i) * (of_int c * x) ^ i", ".."], ["proof (state)\nthis:\n  of_int (c ^ (n - 1) * coeff p i) * x ^ i =\n  of_int (coeff p' i) * (of_int c * x) ^ i\n\ngoal (1 subgoal):\n 1. {..n} = {..n}", "qed auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * coeff p i) * x ^ i) =\n  (\\<Sum>i\\<le>n. of_int (coeff p' i) * (of_int c * x) ^ i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. of_int (c ^ (n - 1) * coeff p i) * x ^ i) =\n  (\\<Sum>i\\<le>n. of_int (coeff p' i) * (of_int c * x) ^ i)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"\\<dots> = ipoly p' (of_int c * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>n. of_int (coeff p' i) * (of_int c * x) ^ i) =\n    ipoly p' (of_int c * x)", "by (simp add: poly_altdef n_def deg_p')"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>n. of_int (coeff p' i) * (of_int c * x) ^ i) =\n  ipoly p' (of_int c * x)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "finally"], ["proof (chain)\npicking this:\n  (0::'a) = ipoly p' (of_int c * x)", "have \"ipoly p' (of_int c * x) = 0\""], ["proof (prove)\nusing this:\n  (0::'a) = ipoly p' (of_int c * x)\n\ngoal (1 subgoal):\n 1. ipoly p' (of_int c * x) = (0::'a)", ".."], ["proof (state)\nthis:\n  ipoly p' (of_int c * x) = (0::'a)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "with lead_coeff_p'"], ["proof (chain)\npicking this:\n  monic p'\n  ipoly p' (of_int c * x) = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  monic p'\n  ipoly p' (of_int c * x) = (0::'a)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "unfolding algebraic_int_altdef_ipoly"], ["proof (prove)\nusing this:\n  monic p'\n  ipoly p' (of_int c * x) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>p. ipoly p (of_int c * x) = (0::'a) \\<and> monic p", "by blast"], ["proof (state)\nthis:\n  algebraic_int (of_int c * x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma algebraic_imp_algebraic_int':\n  fixes x :: \"'a :: field_char_0\"\n  assumes \"ipoly p x = 0\" \"p \\<noteq> 0\" \"Polynomial.lead_coeff p dvd c\"\n  shows   \"algebraic_int (of_int c * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "from assms(3)"], ["proof (chain)\npicking this:\n  lead_coeff p dvd c", "obtain c' where c_eq: \"c = Polynomial.lead_coeff p * c'\""], ["proof (prove)\nusing this:\n  lead_coeff p dvd c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        c = lead_coeff p * c' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = lead_coeff p * c'\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"algebraic_int (of_int c' * (of_int (Polynomial.lead_coeff p) * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. algebraic_int (of_int c' * (of_int (lead_coeff p) * x))", "by (rule algebraic_int_times[OF _ algebraic_imp_algebraic_int]) (use assms in auto)"], ["proof (state)\nthis:\n  algebraic_int (of_int c' * (of_int (lead_coeff p) * x))\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "also"], ["proof (state)\nthis:\n  algebraic_int (of_int c' * (of_int (lead_coeff p) * x))\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "have \"of_int c' * (of_int (Polynomial.lead_coeff p) * x) = of_int c * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int c' * (of_int (lead_coeff p) * x) = of_int c * x", "by (simp add: c_eq mult_ac)"], ["proof (state)\nthis:\n  of_int c' * (of_int (lead_coeff p) * x) = of_int c * x\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "finally"], ["proof (chain)\npicking this:\n  algebraic_int (of_int c * x)", "show ?thesis"], ["proof (prove)\nusing this:\n  algebraic_int (of_int c * x)\n\ngoal (1 subgoal):\n 1. algebraic_int (of_int c * x)", "."], ["proof (state)\nthis:\n  algebraic_int (of_int c * x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}