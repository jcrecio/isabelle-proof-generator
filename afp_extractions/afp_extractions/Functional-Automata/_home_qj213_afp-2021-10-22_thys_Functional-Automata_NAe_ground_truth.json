{"file_name": "/home/qj213/afp-2021-10-22/thys/Functional-Automata/NAe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Functional-Automata", "problem_names": ["lemma steps_epsclosure[simp]: \"(eps A)\\<^sup>* O steps A w = steps A w\"", "lemma in_steps_epsclosure:\n  \"[| (p,q) : (eps A)\\<^sup>*; (q,r) : steps A w |] ==> (p,r) : steps A w\"", "lemma epsclosure_steps: \"steps A w O (eps A)\\<^sup>* = steps A w\"", "lemma in_epsclosure_steps:\n  \"[| (p,q) : steps A w; (q,r) : (eps A)\\<^sup>* |] ==> (p,r) : steps A w\"", "lemma steps_append[simp]:  \"steps A (v@w) = steps A v  O  steps A w\"", "lemma in_steps_append[iff]:\n  \"(p,r) : steps A (v@w) = ((p,r) : (steps A v O steps A w))\""], "translations": [["", "lemma steps_epsclosure[simp]: \"(eps A)\\<^sup>* O steps A w = steps A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eps A)\\<^sup>* O NAe.steps A w = NAe.steps A w", "by (cases w) (simp_all add: O_assoc[symmetric])"], ["", "lemma in_steps_epsclosure:\n  \"[| (p,q) : (eps A)\\<^sup>*; (q,r) : steps A w |] ==> (p,r) : steps A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) \\<in> (eps A)\\<^sup>*;\n     (q, r) \\<in> NAe.steps A w\\<rbrakk>\n    \\<Longrightarrow> (p, r) \\<in> NAe.steps A w", "apply(rule steps_epsclosure[THEN equalityE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) \\<in> (eps A)\\<^sup>*; (q, r) \\<in> NAe.steps A w;\n     (eps ?A1)\\<^sup>* O NAe.steps ?A1 ?w1 \\<subseteq> NAe.steps ?A1 ?w1;\n     NAe.steps ?A1 ?w1\n     \\<subseteq> (eps ?A1)\\<^sup>* O NAe.steps ?A1 ?w1\\<rbrakk>\n    \\<Longrightarrow> (p, r) \\<in> NAe.steps A w", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma epsclosure_steps: \"steps A w O (eps A)\\<^sup>* = steps A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.steps A w O (eps A)\\<^sup>* = NAe.steps A w", "apply(induct w)"], ["proof (prove)\ngoal (2 subgoals):\n 1. NAe.steps A [] O (eps A)\\<^sup>* = NAe.steps A []\n 2. \\<And>a w.\n       NAe.steps A w O (eps A)\\<^sup>* = NAe.steps A w \\<Longrightarrow>\n       NAe.steps A (a # w) O (eps A)\\<^sup>* = NAe.steps A (a # w)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w.\n       NAe.steps A w O (eps A)\\<^sup>* = NAe.steps A w \\<Longrightarrow>\n       NAe.steps A (a # w) O (eps A)\\<^sup>* = NAe.steps A (a # w)", "apply(simp add:O_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_epsclosure_steps:\n  \"[| (p,q) : steps A w; (q,r) : (eps A)\\<^sup>* |] ==> (p,r) : steps A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) \\<in> NAe.steps A w;\n     (q, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (p, r) \\<in> NAe.steps A w", "apply(rule epsclosure_steps[THEN equalityE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) \\<in> NAe.steps A w; (q, r) \\<in> (eps A)\\<^sup>*;\n     NAe.steps ?A1 ?w1 O (eps ?A1)\\<^sup>* \\<subseteq> NAe.steps ?A1 ?w1;\n     NAe.steps ?A1 ?w1\n     \\<subseteq> NAe.steps ?A1 ?w1 O (eps ?A1)\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (p, r) \\<in> NAe.steps A w", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma steps_append[simp]:  \"steps A (v@w) = steps A v  O  steps A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.steps A (v @ w) = NAe.steps A v O NAe.steps A w", "by(induct v)(simp_all add:O_assoc[symmetric])"], ["", "lemma in_steps_append[iff]:\n  \"(p,r) : steps A (v@w) = ((p,r) : (steps A v O steps A w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p, r) \\<in> NAe.steps A (v @ w)) =\n    ((p, r) \\<in> NAe.steps A v O NAe.steps A w)", "apply(rule steps_append[THEN equalityE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>NAe.steps ?A1 (?v1 @ ?w1)\n             \\<subseteq> NAe.steps ?A1 ?v1 O NAe.steps ?A1 ?w1;\n     NAe.steps ?A1 ?v1 O NAe.steps ?A1 ?w1\n     \\<subseteq> NAe.steps ?A1 (?v1 @ ?w1)\\<rbrakk>\n    \\<Longrightarrow> ((p, r) \\<in> NAe.steps A (v @ w)) =\n                      ((p, r) \\<in> NAe.steps A v O NAe.steps A w)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* Equivalence of steps and delta\n* Use \"(\\<exists>x \\<in> f ` A. P x) = (\\<exists>a\\<in>A. P(f x))\" ?? *\nGoal \"\\<forall>p. (p,q) : steps A w = (q : delta A w p)\";\nby (induct_tac \"w\" 1);\n by (Simp_tac 1);\nby (asm_simp_tac (simpset() addsimps [comp_def,step_def]) 1);\nby (Blast_tac 1);\nqed_spec_mp \"steps_equiv_delta\";\n*)"], ["", "end"]]}