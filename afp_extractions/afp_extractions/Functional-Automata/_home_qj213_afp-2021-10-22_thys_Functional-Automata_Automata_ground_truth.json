{"file_name": "/home/qj213/afp-2021-10-22/thys/Functional-Automata/Automata.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Functional-Automata", "problem_names": ["lemma DA_delta_is_lift_NA_delta:\n \"\\<And>Q. DA.delta (na2da A) w Q = Union(NA.delta A w ` Q)\"", "lemma NA_DA_equiv:\n  \"NA.accepts A w = DA.accepts (na2da A) w\"", "lemma espclosure_DA_delta_is_steps:\n \"\\<And>Q. (eps A)\\<^sup>* `` (DA.delta (nae2da A) w Q) = steps A w `` Q\"", "lemma NAe_DA_equiv:\n  \"DA.accepts (nae2da A) w = NAe.accepts A w\""], "translations": [["", "lemma DA_delta_is_lift_NA_delta:\n \"\\<And>Q. DA.delta (na2da A) w Q = Union(NA.delta A w ` Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q. DA.delta (na2da A) w Q = \\<Union> (NA.delta A w ` Q)", "by (induct w)(auto simp:na2da_def)"], ["", "lemma NA_DA_equiv:\n  \"NA.accepts A w = DA.accepts (na2da A) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NA.accepts A w = DA.accepts (na2da A) w", "apply (simp add: DA.accepts_def NA.accepts_def DA_delta_is_lift_NA_delta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>q\\<in>NA.delta A w (start A). fin A q) =\n    fin (na2da A) (\\<Union> (NA.delta A w ` start (na2da A)))", "apply (simp add: na2da_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*** Direct equivalence of NAe and DA ***)"], ["", "lemma espclosure_DA_delta_is_steps:\n \"\\<And>Q. (eps A)\\<^sup>* `` (DA.delta (nae2da A) w Q) = steps A w `` Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q. (eps A)\\<^sup>* `` DA.delta (nae2da A) w Q = NAe.steps A w `` Q", "apply (induct w)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Q.\n       (eps A)\\<^sup>* `` DA.delta (nae2da A) [] Q = NAe.steps A [] `` Q\n 2. \\<And>a w Q.\n       (\\<And>Q.\n           (eps A)\\<^sup>* `` DA.delta (nae2da A) w Q =\n           NAe.steps A w `` Q) \\<Longrightarrow>\n       (eps A)\\<^sup>* `` DA.delta (nae2da A) (a # w) Q =\n       NAe.steps A (a # w) `` Q", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w Q.\n       (\\<And>Q.\n           (eps A)\\<^sup>* `` DA.delta (nae2da A) w Q =\n           NAe.steps A w `` Q) \\<Longrightarrow>\n       (eps A)\\<^sup>* `` DA.delta (nae2da A) (a # w) Q =\n       NAe.steps A (a # w) `` Q", "apply (simp add: step_def nae2da_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w Q.\n       (\\<And>Q.\n           {(p, q). q \\<in> next A None p}\\<^sup>* ``\n           DA.delta\n            ({start A},\n             \\<lambda>a Q.\n                \\<Union>\n                 (next A (Some a) `\n                  {(p, q). q \\<in> next A None p}\\<^sup>* `` Q),\n             \\<lambda>Q.\n                \\<exists>p\\<in>{(p, q). q \\<in> next A None p}\\<^sup>* `` Q.\n                   fin A p)\n            w Q =\n           NAe.steps A w `` Q) \\<Longrightarrow>\n       NAe.steps A w ``\n       \\<Union>\n        (next A (Some a) ` {(p, q). q \\<in> next A None p}\\<^sup>* `` Q) =\n       ({(p, q). q \\<in> next A None p}\\<^sup>* O\n        {(p, q). q \\<in> next A (Some a) p} O NAe.steps A w) ``\n       Q", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NAe_DA_equiv:\n  \"DA.accepts (nae2da A) w = NAe.accepts A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DA.accepts (nae2da A) w = NAe.accepts A w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. DA.accepts (nae2da A) w = NAe.accepts A w", "have \"\\<And>Q. fin (nae2da A) Q = (\\<exists>q \\<in> (eps A)\\<^sup>* `` Q. fin A q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q.\n       fin (nae2da A) Q = (\\<exists>q\\<in>(eps A)\\<^sup>* `` Q. fin A q)", "by(simp add:nae2da_def)"], ["proof (state)\nthis:\n  fin (nae2da A) ?Q = (\\<exists>q\\<in>(eps A)\\<^sup>* `` ?Q. fin A q)\n\ngoal (1 subgoal):\n 1. DA.accepts (nae2da A) w = NAe.accepts A w", "thus ?thesis"], ["proof (prove)\nusing this:\n  fin (nae2da A) ?Q = (\\<exists>q\\<in>(eps A)\\<^sup>* `` ?Q. fin A q)\n\ngoal (1 subgoal):\n 1. DA.accepts (nae2da A) w = NAe.accepts A w", "apply(simp add:espclosure_DA_delta_is_steps NAe.accepts_def DA.accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        fin (nae2da A) Q =\n        (\\<exists>q\\<in>(eps A)\\<^sup>* `` Q. fin A q)) \\<Longrightarrow>\n    (\\<exists>x\\<in>NAe.steps A w `` start (nae2da A). fin A x) =\n    (\\<exists>q. (start A, q) \\<in> NAe.steps A w \\<and> fin A q)", "apply(simp add:nae2da_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>NAe.steps A w `` {start A}. fin A x) =\n    (\\<exists>q. (start A, q) \\<in> NAe.steps A w \\<and> fin A q)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  DA.accepts (nae2da A) w = NAe.accepts A w\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}