{"file_name": "/home/qj213/afp-2021-10-22/thys/Functional-Automata/MaxPrefix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Functional-Automata", "problem_names": ["lemma maxsplit_lemma: \"(maxsplit P res ps qs = (xs,ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P(ps@us) then xs@ys=ps@qs \\<and> is_maxpref P xs (ps@qs)\n   else (xs,ys)=res)\"", "lemma is_maxpref_Nil[simp]:\n \"\\<not>(\\<exists>us. prefix us xs \\<and> P us) \\<Longrightarrow> is_maxpref P ps xs = (ps = [])\"", "lemma is_maxsplitter_maxsplit:\n \"is_maxsplitter P (\\<lambda>xs. maxsplit P ([],xs) [] xs)\"", "lemmas maxsplit_eq = is_maxsplitter_maxsplit[simplified is_maxsplitter_def]"], "translations": [["", "lemma maxsplit_lemma: \"(maxsplit P res ps qs = (xs,ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P(ps@us) then xs@ys=ps@qs \\<and> is_maxpref P xs (ps@qs)\n   else (xs,ys)=res)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxsplit P res ps qs = (xs, ys)) =\n    (if \\<exists>us. prefix us qs \\<and> P (ps @ us)\n     then xs @ ys = ps @ qs \\<and> is_maxpref P xs (ps @ qs)\n     else (xs, ys) = res)", "proof (induction P res ps qs rule: maxsplit.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P res ps.\n       (maxsplit P res ps [] = (xs, ys)) =\n       (if \\<exists>us. prefix us [] \\<and> P (ps @ us)\n        then xs @ ys = ps @ [] \\<and> is_maxpref P xs (ps @ [])\n        else (xs, ys) = res)\n 2. \\<And>P res ps q qs.\n       (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n        (xs, ys)) =\n       (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n        then xs @ ys = (ps @ [q]) @ qs \\<and>\n             is_maxpref P xs ((ps @ [q]) @ qs)\n        else (xs, ys) =\n             (if P ps then (ps, q # qs) else res)) \\<Longrightarrow>\n       (maxsplit P res ps (q # qs) = (xs, ys)) =\n       (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n        then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n        else (xs, ys) = res)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>P res ps.\n       (maxsplit P res ps [] = (xs, ys)) =\n       (if \\<exists>us. prefix us [] \\<and> P (ps @ us)\n        then xs @ ys = ps @ [] \\<and> is_maxpref P xs (ps @ [])\n        else (xs, ys) = res)\n 2. \\<And>P res ps q qs.\n       (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n        (xs, ys)) =\n       (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n        then xs @ ys = (ps @ [q]) @ qs \\<and>\n             is_maxpref P xs ((ps @ [q]) @ qs)\n        else (xs, ys) =\n             (if P ps then (ps, q # qs) else res)) \\<Longrightarrow>\n       (maxsplit P res ps (q # qs) = (xs, ys)) =\n       (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n        then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n        else (xs, ys) = res)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxsplit P_ res_ ps_ [] = (xs, ys)) =\n    (if \\<exists>us. prefix us [] \\<and> P_ (ps_ @ us)\n     then xs @ ys = ps_ @ [] \\<and> is_maxpref P_ xs (ps_ @ [])\n     else (xs, ys) = res_)", "by (auto simp: is_maxpref_def split: if_splits)"], ["proof (state)\nthis:\n  (maxsplit P_ res_ ps_ [] = (xs, ys)) =\n  (if \\<exists>us. prefix us [] \\<and> P_ (ps_ @ us)\n   then xs @ ys = ps_ @ [] \\<and> is_maxpref P_ xs (ps_ @ [])\n   else (xs, ys) = res_)\n\ngoal (1 subgoal):\n 1. \\<And>P res ps q qs.\n       (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n        (xs, ys)) =\n       (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n        then xs @ ys = (ps @ [q]) @ qs \\<and>\n             is_maxpref P xs ((ps @ [q]) @ qs)\n        else (xs, ys) =\n             (if P ps then (ps, q # qs) else res)) \\<Longrightarrow>\n       (maxsplit P res ps (q # qs) = (xs, ys)) =\n       (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n        then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n        else (xs, ys) = res)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P res ps q qs.\n       (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n        (xs, ys)) =\n       (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n        then xs @ ys = (ps @ [q]) @ qs \\<and>\n             is_maxpref P xs ((ps @ [q]) @ qs)\n        else (xs, ys) =\n             (if P ps then (ps, q # qs) else res)) \\<Longrightarrow>\n       (maxsplit P res ps (q # qs) = (xs, ys)) =\n       (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n        then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n        else (xs, ys) = res)", "case (2 P res ps q qs)"], ["proof (state)\nthis:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n\ngoal (1 subgoal):\n 1. \\<And>P res ps q qs.\n       (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n        (xs, ys)) =\n       (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n        then xs @ ys = (ps @ [q]) @ qs \\<and>\n             is_maxpref P xs ((ps @ [q]) @ qs)\n        else (xs, ys) =\n             (if P ps then (ps, q # qs) else res)) \\<Longrightarrow>\n       (maxsplit P res ps (q # qs) = (xs, ys)) =\n       (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n        then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n        else (xs, ys) = res)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "proof (cases \"\\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "case True"], ["proof (state)\nthis:\n  \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "note ex1 = this"], ["proof (state)\nthis:\n  \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "then"], ["proof (chain)\npicking this:\n  \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)", "guess us"], ["proof (prove)\nusing this:\n  \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n\ngoal (1 subgoal):\n 1. thesis", "by (elim exE conjE)"], ["proof (state)\nthis:\n  prefix us qs\n  P ((ps @ [q]) @ us)\n\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "note us = this"], ["proof (state)\nthis:\n  prefix us qs\n  P ((ps @ [q]) @ us)\n\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "hence ex2: \"\\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\""], ["proof (prove)\nusing this:\n  prefix us qs\n  P ((ps @ [q]) @ us)\n\ngoal (1 subgoal):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)", "by (intro exI[of _ \"q#us\"]) auto"], ["proof (state)\nthis:\n  \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "with ex1 and 2"], ["proof (chain)\npicking this:\n  \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n  \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n  \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "by simp"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal (1 subgoal):\n 1. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "case False"], ["proof (state)\nthis:\n  \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n\ngoal (1 subgoal):\n 1. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "note ex1 = this"], ["proof (state)\nthis:\n  \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n\ngoal (1 subgoal):\n 1. \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "proof (cases \"\\<exists>us. prefix us (q#qs) \\<and> P (ps @ us)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "case False"], ["proof (state)\nthis:\n  \\<nexists>us. prefix us (q # qs) \\<and> P (ps @ us)\n\ngoal (2 subgoals):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<nexists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "from 2"], ["proof (chain)\npicking this:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))", "show ?thesis"], ["proof (prove)\nusing this:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "by (simp only: ex1 False) (insert ex1 False, auto simp: prefix_Cons)"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal (1 subgoal):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "case True"], ["proof (state)\nthis:\n  \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n\ngoal (1 subgoal):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "note ex2 = this"], ["proof (state)\nthis:\n  \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n\ngoal (1 subgoal):\n 1. \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us) \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "proof (cases \"P ps\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "case True"], ["proof (state)\nthis:\n  P ps\n\ngoal (2 subgoals):\n 1. P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "with 2"], ["proof (chain)\npicking this:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n  P ps", "have \"(maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) \\<longleftrightarrow> (xs = ps \\<and> ys = q # qs)\""], ["proof (prove)\nusing this:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n  P ps\n\ngoal (1 subgoal):\n 1. (maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) =\n    (xs = ps \\<and> ys = q # qs)", "by (simp only: ex1 ex2) simp_all"], ["proof (state)\nthis:\n  (maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) =\n  (xs = ps \\<and> ys = q # qs)\n\ngoal (2 subgoals):\n 1. P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "also"], ["proof (state)\nthis:\n  (maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) =\n  (xs = ps \\<and> ys = q # qs)\n\ngoal (2 subgoals):\n 1. P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "have \"\\<dots> \\<longleftrightarrow> (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = ps \\<and> ys = q # qs) =\n    (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))", "using ex1 True"], ["proof (prove)\nusing this:\n  \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n  P ps\n\ngoal (1 subgoal):\n 1. (xs = ps \\<and> ys = q # qs) =\n    (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))", "by (auto simp: is_maxpref_def prefix_append prefix_Cons append_eq_append_conv2)"], ["proof (state)\nthis:\n  (xs = ps \\<and> ys = q # qs) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\n\ngoal (2 subgoals):\n 1. P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)\n 2. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "finally"], ["proof (chain)\npicking this:\n  (maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))", "show ?thesis"], ["proof (prove)\nusing this:\n  (maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\n\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "using True"], ["proof (prove)\nusing this:\n  (maxsplit P (ps, q # qs) (ps @ [q]) qs = (xs, ys)) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\n  P ps\n\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "by (simp only: ex1 ex2) simp_all"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal (1 subgoal):\n 1. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "case False"], ["proof (state)\nthis:\n  \\<not> P ps\n\ngoal (1 subgoal):\n 1. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "with 2"], ["proof (chain)\npicking this:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n  \\<not> P ps", "have \"(maxsplit P res (ps @ [q]) qs = (xs, ys)) \\<longleftrightarrow> ((xs, ys) = res)\""], ["proof (prove)\nusing this:\n  (maxsplit P (if P ps then (ps, q # qs) else res) (ps @ [q]) qs =\n   (xs, ys)) =\n  (if \\<exists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n   then xs @ ys = (ps @ [q]) @ qs \\<and> is_maxpref P xs ((ps @ [q]) @ qs)\n   else (xs, ys) = (if P ps then (ps, q # qs) else res))\n  \\<not> P ps\n\ngoal (1 subgoal):\n 1. (maxsplit P res (ps @ [q]) qs = (xs, ys)) = ((xs, ys) = res)", "by (simp only: ex1 ex2) simp"], ["proof (state)\nthis:\n  (maxsplit P res (ps @ [q]) qs = (xs, ys)) = ((xs, ys) = res)\n\ngoal (1 subgoal):\n 1. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "also"], ["proof (state)\nthis:\n  (maxsplit P res (ps @ [q]) qs = (xs, ys)) = ((xs, ys) = res)\n\ngoal (1 subgoal):\n 1. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "have \"\\<dots> \\<longleftrightarrow> (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((xs, ys) = res) =\n    (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))", "using ex1 ex2 False"], ["proof (prove)\nusing this:\n  \\<nexists>us. prefix us qs \\<and> P ((ps @ [q]) @ us)\n  \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n  \\<not> P ps\n\ngoal (1 subgoal):\n 1. ((xs, ys) = res) =\n    (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))", "by (auto simp: append_eq_append_conv2 is_maxpref_def prefix_Cons)"], ["proof (state)\nthis:\n  ((xs, ys) = res) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\n\ngoal (1 subgoal):\n 1. \\<not> P ps \\<Longrightarrow>\n    (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "finally"], ["proof (chain)\npicking this:\n  (maxsplit P res (ps @ [q]) qs = (xs, ys)) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))", "show ?thesis"], ["proof (prove)\nusing this:\n  (maxsplit P res (ps @ [q]) qs = (xs, ys)) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\n\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "using False"], ["proof (prove)\nusing this:\n  (maxsplit P res (ps @ [q]) qs = (xs, ys)) =\n  (xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs))\n  \\<not> P ps\n\ngoal (1 subgoal):\n 1. (maxsplit P res ps (q # qs) = (xs, ys)) =\n    (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n     then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n     else (xs, ys) = res)", "by (simp only: ex1 ex2) simp"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (maxsplit P res ps (q # qs) = (xs, ys)) =\n  (if \\<exists>us. prefix us (q # qs) \\<and> P (ps @ us)\n   then xs @ ys = ps @ q # qs \\<and> is_maxpref P xs (ps @ q # qs)\n   else (xs, ys) = res)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare if_split[split]"], ["", "lemma is_maxpref_Nil[simp]:\n \"\\<not>(\\<exists>us. prefix us xs \\<and> P us) \\<Longrightarrow> is_maxpref P ps xs = (ps = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>us. prefix us xs \\<and> P us \\<Longrightarrow>\n    is_maxpref P ps xs = (ps = [])", "by (auto simp: is_maxpref_def)"], ["", "lemma is_maxsplitter_maxsplit:\n \"is_maxsplitter P (\\<lambda>xs. maxsplit P ([],xs) [] xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_maxsplitter P (\\<lambda>xs. maxsplit P ([], xs) [] xs)", "by (auto simp: maxsplit_lemma is_maxsplitter_def)"], ["", "lemmas maxsplit_eq = is_maxsplitter_maxsplit[simplified is_maxsplitter_def]"], ["", "end"]]}