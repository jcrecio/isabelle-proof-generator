{"file_name": "/home/qj213/afp-2021-10-22/thys/Functional-Automata/NA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Functional-Automata", "problem_names": ["lemma steps_append[simp]:\n \"steps A (v@w) = steps A v  O  steps A w\"", "lemma in_steps_append[iff]:\n  \"(p,r) : steps A (v@w) = ((p,r) : (steps A v O steps A w))\"", "lemma delta_conv_steps: \"\\<And>p. delta A w p = {q. (p,q) : steps A w}\"", "lemma accepts_conv_steps:\n \"accepts A w = (\\<exists>q. (start A,q) \\<in> steps A w \\<and> fin A q)\""], "translations": [["", "lemma steps_append[simp]:\n \"steps A (v@w) = steps A v  O  steps A w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. steps A (v @ w) = steps A v O steps A w", "by(induct v, simp_all add:O_assoc)"], ["", "lemma in_steps_append[iff]:\n  \"(p,r) : steps A (v@w) = ((p,r) : (steps A v O steps A w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p, r) \\<in> steps A (v @ w)) = ((p, r) \\<in> steps A v O steps A w)", "apply(rule steps_append[THEN equalityE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>steps ?A1 (?v1 @ ?w1)\n             \\<subseteq> steps ?A1 ?v1 O steps ?A1 ?w1;\n     steps ?A1 ?v1 O steps ?A1 ?w1\n     \\<subseteq> steps ?A1 (?v1 @ ?w1)\\<rbrakk>\n    \\<Longrightarrow> ((p, r) \\<in> steps A (v @ w)) =\n                      ((p, r) \\<in> steps A v O steps A w)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma delta_conv_steps: \"\\<And>p. delta A w p = {q. (p,q) : steps A w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. delta A w p = {q. (p, q) \\<in> steps A w}", "by(induct w)(auto simp:step_def)"], ["", "lemma accepts_conv_steps:\n \"accepts A w = (\\<exists>q. (start A,q) \\<in> steps A w \\<and> fin A q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. accepts A w = (\\<exists>q. (start A, q) \\<in> steps A w \\<and> fin A q)", "by(simp add: delta_conv_steps accepts_def)"], ["", "abbreviation\n  Cons_syn :: \"'a \\<Rightarrow> 'a list set \\<Rightarrow> 'a list set\" (infixr \"##\" 65) where\n  \"x ## S \\<equiv> Cons x ` S\""], ["", "end"]]}