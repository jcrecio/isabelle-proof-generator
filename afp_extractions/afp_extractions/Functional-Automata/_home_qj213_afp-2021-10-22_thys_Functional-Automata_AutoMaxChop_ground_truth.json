{"file_name": "/home/qj213/afp-2021-10-22/thys/Functional-Automata/AutoMaxChop.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Functional-Automata", "problem_names": ["lemma delta_snoc: \"delta A (xs@[y]) q = next A y (delta A xs q)\"", "lemma auto_split_lemma:\n \"\\<And>q ps res. auto_split A (delta A ps q) res ps xs =\n              maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps xs\"", "lemma auto_split_is_maxsplit:\n \"auto_split A (start A) res [] xs = maxsplit (accepts A) res [] xs\"", "lemma is_maxsplitter_auto_split:\n \"is_maxsplitter (accepts A) (\\<lambda>xs. auto_split A (start A) ([],xs) [] xs)\"", "lemma is_maxchopper_auto_chop:\n \"is_maxchopper (accepts A) (auto_chop A)\""], "translations": [["", "lemma delta_snoc: \"delta A (xs@[y]) q = next A y (delta A xs q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delta A (xs @ [y]) q = next A y (delta A xs q)", "by simp"], ["", "lemma auto_split_lemma:\n \"\\<And>q ps res. auto_split A (delta A ps q) res ps xs =\n              maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q ps res.\n       auto_split A (delta A ps q) res ps xs =\n       maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps xs", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q ps res.\n       auto_split A (delta A ps q) res ps [] =\n       maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps []\n 2. \\<And>a xs q ps res.\n       (\\<And>q ps res.\n           auto_split A (delta A ps q) res ps xs =\n           maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps\n            xs) \\<Longrightarrow>\n       auto_split A (delta A ps q) res ps (a # xs) =\n       maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps (a # xs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs q ps res.\n       (\\<And>q ps res.\n           auto_split A (delta A ps q) res ps xs =\n           maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps\n            xs) \\<Longrightarrow>\n       auto_split A (delta A ps q) res ps (a # xs) =\n       maxsplit (\\<lambda>ys. fin A (delta A ys q)) res ps (a # xs)", "apply (simp add: delta_snoc[symmetric] del: delta_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma auto_split_is_maxsplit:\n \"auto_split A (start A) res [] xs = maxsplit (accepts A) res [] xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. auto_split A (start A) res [] xs = maxsplit (accepts A) res [] xs", "apply (unfold accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. auto_split A (start A) res [] xs =\n    maxsplit (\\<lambda>w. fin A (delta A w (start A))) res [] xs", "apply (subst delta_Nil[where ?s = \"start A\", symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. auto_split A (delta ?A [] (start A)) res [] xs =\n    maxsplit (\\<lambda>w. fin A (delta A w (start A))) res [] xs", "apply (subst auto_split_lemma)"], ["proof (prove)\ngoal (1 subgoal):\n 1. maxsplit (\\<lambda>ys. fin A (delta A ys (start A))) res [] xs =\n    maxsplit (\\<lambda>w. fin A (delta A w (start A))) res [] xs", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_maxsplitter_auto_split:\n \"is_maxsplitter (accepts A) (\\<lambda>xs. auto_split A (start A) ([],xs) [] xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_maxsplitter (accepts A)\n     (\\<lambda>xs. auto_split A (start A) ([], xs) [] xs)", "by (simp add: auto_split_is_maxsplit is_maxsplitter_maxsplit)"], ["", "lemma is_maxchopper_auto_chop:\n \"is_maxchopper (accepts A) (auto_chop A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_maxchopper (accepts A) (auto_chop A)", "apply (unfold auto_chop_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_maxchopper (accepts A)\n     (chop (\\<lambda>xs. auto_split A (start A) ([], xs) [] xs))", "apply (rule is_maxchopper_chop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_maxsplitter (accepts A)\n     (\\<lambda>xs. auto_split A (start A) ([], xs) [] xs)", "apply (rule is_maxsplitter_auto_split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}