{"file_name": "/home/qj213/afp-2021-10-22/thys/Functional-Automata/RegExp2NAe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Functional-Automata", "problem_names": ["lemma step_epsilon[simp]: \"step epsilon a = {}\"", "lemma steps_epsilon: \"((p,q) : steps epsilon w) = (w=[] \\<and> p=q)\"", "lemma accepts_epsilon[simp]: \"accepts epsilon w = (w = [])\"", "lemma fin_atom: \"(fin (atom a) q) = (q = [False])\"", "lemma start_atom: \"start (atom a) = [True]\"", "lemma eps_atom[simp]:\n \"eps(atom a) = {}\"", "lemma in_step_atom_Some[simp]:\n \"(p,q) : step (atom a) (Some b) = (p=[True] \\<and> q=[False] \\<and> b=a)\"", "lemma False_False_in_steps_atom:\n  \"([False],[False]) : steps (atom a) w = (w = [])\"", "lemma start_fin_in_steps_atom:\n  \"(start (atom a), [False]) : steps (atom a) w = (w = [a])\"", "lemma accepts_atom: \"accepts (atom a) w = (w = [a])\"", "lemma fin_or_True[iff]:\n \"\\<And>L R. fin (or L R) (True#p) = fin L p\"", "lemma fin_or_False[iff]:\n \"\\<And>L R. fin (or L R) (False#p) = fin R p\"", "lemma True_in_step_or[iff]:\n\"\\<And>L R. (True#p,q) : step (or L R) a = (\\<exists>r. q = True#r \\<and> (p,r) : step L a)\"", "lemma False_in_step_or[iff]:\n\"\\<And>L R. (False#p,q) : step (or L R) a = (\\<exists>r. q = False#r \\<and> (p,r) : step R a)\"", "lemma lemma1a:\n \"(tp,tq) : (eps(or L R))\\<^sup>* \\<Longrightarrow> \n (\\<And>p. tp = True#p \\<Longrightarrow> \\<exists>q. (p,q) : (eps L)\\<^sup>* \\<and> tq = True#q)\"", "lemma lemma1b:\n \"(tp,tq) : (eps(or L R))\\<^sup>* \\<Longrightarrow> \n (\\<And>p. tp = False#p \\<Longrightarrow> \\<exists>q. (p,q) : (eps R)\\<^sup>* \\<and> tq = False#q)\"", "lemma lemma2a:\n \"(p,q) : (eps L)\\<^sup>*  \\<Longrightarrow> (True#p, True#q) : (eps(or L R))\\<^sup>*\"", "lemma lemma2b:\n \"(p,q) : (eps R)\\<^sup>*  \\<Longrightarrow> (False#p, False#q) : (eps(or L R))\\<^sup>*\"", "lemma True_epsclosure_or[iff]:\n \"(True#p,q) : (eps(or L R))\\<^sup>* = (\\<exists>r. q = True#r \\<and> (p,r) : (eps L)\\<^sup>*)\"", "lemma False_epsclosure_or[iff]:\n \"(False#p,q) : (eps(or L R))\\<^sup>* = (\\<exists>r. q = False#r \\<and> (p,r) : (eps R)\\<^sup>*)\"", "lemma lift_True_over_steps_or[iff]:\n \"\\<And>p. (True#p,q):steps (or L R) w = (\\<exists>r. q = True # r \\<and> (p,r):steps L w)\"", "lemma lift_False_over_steps_or[iff]:\n \"\\<And>p. (False#p,q):steps (or L R) w = (\\<exists>r. q = False#r \\<and> (p,r):steps R w)\"", "lemma unfold_rtrancl2:\n \"R\\<^sup>* = Id \\<union> (R O R\\<^sup>*)\"", "lemma in_unfold_rtrancl2:\n \"(p,q) : R\\<^sup>* = (q = p | (\\<exists>r. (p,r) : R \\<and> (r,q) : R\\<^sup>*))\"", "lemmas [iff] = in_unfold_rtrancl2[where ?p = \"start(or L R)\"] for L R", "lemma start_eps_or[iff]:\n \"\\<And>L R. (start(or L R),q) : eps(or L R) = \n       (q = True#start L | q = False#start R)\"", "lemma not_start_step_or_Some[iff]:\n \"\\<And>L R. (start(or L R),q) \\<notin> step (or L R) (Some a)\"", "lemma steps_or:\n \"(start(or L R), q) : steps (or L R) w = \n ( (w = [] \\<and> q = start(or L R)) | \n   (\\<exists>p.  q = True  # p \\<and> (start L,p) : steps L w | \n         q = False # p \\<and> (start R,p) : steps R w) )\"", "lemma start_or_not_final[iff]:\n \"\\<And>L R. \\<not> fin (or L R) (start(or L R))\"", "lemma accepts_or:\n \"accepts (or L R) w = (accepts L w | accepts R w)\"", "lemma in_conc_True[iff]:\n \"\\<And>L R. fin (conc L R) (True#p) = False\"", "lemma fin_conc_False[iff]:\n \"\\<And>L R. fin (conc L R) (False#p) = fin R p\"", "lemma True_step_conc[iff]:\n \"\\<And>L R. (True#p,q) : step (conc L R) a = \n       ((\\<exists>r. q=True#r \\<and> (p,r): step L a) | \n        (fin L p \\<and> a=None \\<and> q=False#start R))\"", "lemma False_step_conc[iff]:\n \"\\<And>L R. (False#p,q) : step (conc L R) a = \n       (\\<exists>r. q = False#r \\<and> (p,r) : step R a)\"", "lemma lemma1b':\n \"(tp,tq) : (eps(conc L R))\\<^sup>* \\<Longrightarrow> \n  (\\<And>p. tp = False#p \\<Longrightarrow> \\<exists>q. (p,q) : (eps R)\\<^sup>* \\<and> tq = False#q)\"", "lemma lemma2b':\n \"(p,q) : (eps R)\\<^sup>* \\<Longrightarrow> (False#p, False#q) : (eps(conc L R))\\<^sup>*\"", "lemma False_epsclosure_conc[iff]:\n \"((False # p, q) : (eps (conc L R))\\<^sup>*) = \n (\\<exists>r. q = False # r \\<and> (p, r) : (eps R)\\<^sup>*)\"", "lemma False_steps_conc[iff]:\n \"\\<And>p. (False#p,q): steps (conc L R) w = (\\<exists>r. q=False#r \\<and> (p,r): steps R w)\"", "lemma True_True_eps_concI:\n \"(p,q): (eps L)\\<^sup>* \\<Longrightarrow> (True#p,True#q) : (eps(conc L R))\\<^sup>*\"", "lemma True_True_steps_concI:\n \"\\<And>p. (p,q) : steps L w \\<Longrightarrow> (True#p,True#q) : steps (conc L R) w\"", "lemma lemma1a':\n \"(tp,tq) : (eps(conc L R))\\<^sup>* \\<Longrightarrow> \n (\\<And>p. tp = True#p \\<Longrightarrow> \n  (\\<exists>q. tq = True#q \\<and> (p,q) : (eps L)\\<^sup>*) | \n  (\\<exists>q r. tq = False#q \\<and> (p,r):(eps L)\\<^sup>* \\<and> fin L r \\<and> (start R,q) : (eps R)\\<^sup>*))\"", "lemma lemma2a':\n \"(p, q) : (eps L)\\<^sup>* \\<Longrightarrow> (True#p, True#q) : (eps(conc L R))\\<^sup>*\"", "lemma lem:\n \"\\<And>L R. (p,q) : step R None \\<Longrightarrow> (False#p, False#q) : step (conc L R) None\"", "lemma lemma2b'':\n \"(p,q) : (eps R)\\<^sup>* \\<Longrightarrow> (False#p, False#q) : (eps(conc L R))\\<^sup>*\"", "lemma True_False_eps_concI:\n \"\\<And>L R. fin L p \\<Longrightarrow> (True#p, False#start R) : eps(conc L R)\"", "lemma True_epsclosure_conc[iff]:\n \"((True#p,q) \\<in> (eps(conc L R))\\<^sup>*) = \n ((\\<exists>r. (p,r) \\<in> (eps L)\\<^sup>* \\<and> q = True#r) \\<or>\n  (\\<exists>r. (p,r) \\<in> (eps L)\\<^sup>* \\<and> fin L r \\<and>\n        (\\<exists>s. (start R, s) \\<in> (eps R)\\<^sup>* \\<and> q = False#s)))\"", "lemma True_steps_concD[rule_format]:\n \"\\<forall>p. (True#p,q) : steps (conc L R) w \\<longrightarrow> \n     ((\\<exists>r. (p,r) : steps L w \\<and> q = True#r)  \\<or>\n      (\\<exists>u v. w = u@v \\<and> (\\<exists>r. (p,r) \\<in> steps L u \\<and> fin L r \\<and>\n              (\\<exists>s. (start R,s) \\<in> steps R v \\<and> q = False#s))))\"", "lemma True_steps_conc:\n \"(True#p,q) \\<in> steps (conc L R) w = \n ((\\<exists>r. (p,r) \\<in> steps L w \\<and> q = True#r)  | \n  (\\<exists>u v. w = u@v \\<and> (\\<exists>r. (p,r) : steps L u \\<and> fin L r \\<and> \n          (\\<exists>s. (start R,s) : steps R v \\<and> q = False#s))))\"", "lemma start_conc:\n  \"\\<And>L R. start(conc L R) = True#start L\"", "lemma final_conc:\n \"\\<And>L R. fin(conc L R) p = (\\<exists>s. p = False#s \\<and> fin R s)\"", "lemma accepts_conc:\n \"accepts (conc L R) w = (\\<exists>u v. w = u@v \\<and> accepts L u \\<and> accepts R v)\"", "lemma True_in_eps_star[iff]:\n \"\\<And>A. (True#p,q) \\<in> eps(star A) = \n     ( (\\<exists>r. q = True#r \\<and> (p,r) \\<in> eps A) \\<or> (fin A p \\<and> q = True#start A) )\"", "lemma True_True_step_starI:\n  \"\\<And>A. (p,q) : step A a \\<Longrightarrow> (True#p, True#q) : step (star A) a\"", "lemma True_True_eps_starI:\n  \"(p,r) : (eps A)\\<^sup>* \\<Longrightarrow> (True#p, True#r) : (eps(star A))\\<^sup>*\"", "lemma True_start_eps_starI:\n \"\\<And>A. fin A p \\<Longrightarrow> (True#p,True#start A) : eps(star A)\"", "lemma lem':\n \"(tp,s) : (eps(star A))\\<^sup>* \\<Longrightarrow> (\\<forall>p. tp = True#p \\<longrightarrow>\n (\\<exists>r. ((p,r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q. (p,q) \\<in> (eps A)\\<^sup>* \\<and> fin A q \\<and> (start A,r) : (eps A)\\<^sup>*)) \\<and> \n       s = True#r))\"", "lemma True_eps_star[iff]:\n \"((True#p,s) \\<in> (eps(star A))\\<^sup>*) = \n (\\<exists>r. ((p,r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q. (p,q) : (eps A)\\<^sup>* \\<and> fin A q \\<and> (start A,r) : (eps A)\\<^sup>*)) \\<and>\n       s = True#r)\"", "lemma True_step_star[iff]:\n \"\\<And>A. (True#p,r) \\<in> step (star A) (Some a) =\n     (\\<exists>q. (p,q) \\<in> step A (Some a) \\<and> r=True#q)\"", "lemma True_start_steps_starD[rule_format]:\n \"\\<forall>rr. (True#start A,rr) \\<in> steps (star A) w \\<longrightarrow>\n (\\<exists>us v. w = concat us @ v \\<and>\n             (\\<forall>u\\<in>set us. accepts A u) \\<and>\n             (\\<exists>r. (start A,r) \\<in> steps A v \\<and> rr = True#r))\"", "lemma True_True_steps_starI:\n  \"\\<And>p. (p,q) : steps A w \\<Longrightarrow> (True#p,True#q) : steps (star A) w\"", "lemma steps_star_cycle:\n \"(\\<forall>u \\<in> set us. accepts A u) \\<Longrightarrow>\n (True#start A,True#start A) \\<in> steps (star A) (concat us)\"", "lemma True_start_steps_star:\n \"(True#start A,rr) : steps (star A) w = \n (\\<exists>us v. w = concat us @ v \\<and>\n             (\\<forall>u\\<in>set us. accepts A u) \\<and>\n             (\\<exists>r. (start A,r) \\<in> steps A v \\<and> rr = True#r))\"", "lemma start_step_star[iff]:\n  \"\\<And>A. (start(star A),r) : step (star A) a = (a=None \\<and> r = True#start A)\"", "lemmas epsclosure_start_step_star =\n  in_unfold_rtrancl2[where ?p = \"start (star A)\"] for A", "lemma start_steps_star:\n \"(start(star A),r) : steps (star A) w = \n ((w=[] \\<and> r= start(star A)) | (True#start A,r) : steps (star A) w)\"", "lemma fin_star_True[iff]: \"\\<And>A. fin (star A) (True#p) = fin A p\"", "lemma fin_star_start[iff]: \"\\<And>A. fin (star A) (start(star A))\"", "lemma accepts_star:\n \"accepts (star A) w = \n (\\<exists>us. (\\<forall>u \\<in> set(us). accepts A u) \\<and> (w = concat us))\"", "lemma accepts_rexp2nae:\n \"\\<And>w. accepts (rexp2nae r) w = (w : lang r)\""], "translations": [["", "lemma step_epsilon[simp]: \"step epsilon a = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step epsilon a = {}", "by(simp add:epsilon_def step_def)"], ["", "lemma steps_epsilon: \"((p,q) : steps epsilon w) = (w=[] \\<and> p=q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p, q) \\<in> NAe.steps epsilon w) = (w = [] \\<and> p = q)", "by (induct \"w\") auto"], ["", "lemma accepts_epsilon[simp]: \"accepts epsilon w = (w = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.accepts epsilon w = (w = [])", "apply (simp add: steps_epsilon accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w = [] \\<and> fin epsilon (start epsilon)) = (w = [])", "apply (simp add: epsilon_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(******************************************************)\n(*                       atom                         *)\n(******************************************************)"], ["", "lemma fin_atom: \"(fin (atom a) q) = (q = [False])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin (atom a) q = (q = [False])", "by(simp add:atom_def)"], ["", "lemma start_atom: \"start (atom a) = [True]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start (atom a) = [True]", "by(simp add:atom_def)"], ["", "(* Use {x. False} = {}? *)"], ["", "lemma eps_atom[simp]:\n \"eps(atom a) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eps (atom a) = {}", "by (simp add:atom_def step_def)"], ["", "lemma in_step_atom_Some[simp]:\n \"(p,q) : step (atom a) (Some b) = (p=[True] \\<and> q=[False] \\<and> b=a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p, q) \\<in> step (atom a) (Some b)) =\n    (p = [True] \\<and> q = [False] \\<and> b = a)", "by (simp add:atom_def step_def)"], ["", "lemma False_False_in_steps_atom:\n  \"([False],[False]) : steps (atom a) w = (w = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (([False], [False]) \\<in> NAe.steps (atom a) w) = (w = [])", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. (([False], [False]) \\<in> NAe.steps (atom a) []) = ([] = [])\n 2. \\<And>aa w.\n       (([False], [False]) \\<in> NAe.steps (atom a) w) =\n       (w = []) \\<Longrightarrow>\n       (([False], [False]) \\<in> NAe.steps (atom a) (aa # w)) =\n       (aa # w = [])", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa w.\n       (([False], [False]) \\<in> NAe.steps (atom a) w) =\n       (w = []) \\<Longrightarrow>\n       (([False], [False]) \\<in> NAe.steps (atom a) (aa # w)) =\n       (aa # w = [])", "apply (simp add: relcomp_unfold)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma start_fin_in_steps_atom:\n  \"(start (atom a), [False]) : steps (atom a) w = (w = [a])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((start (atom a), [False]) \\<in> NAe.steps (atom a) w) = (w = [a])", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((start (atom a), [False]) \\<in> NAe.steps (atom a) []) = ([] = [a])\n 2. \\<And>aa w.\n       ((start (atom a), [False]) \\<in> NAe.steps (atom a) w) =\n       (w = [a]) \\<Longrightarrow>\n       ((start (atom a), [False]) \\<in> NAe.steps (atom a) (aa # w)) =\n       (aa # w = [a])", "apply (simp add: start_atom rtrancl_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa w.\n       ((start (atom a), [False]) \\<in> NAe.steps (atom a) w) =\n       (w = [a]) \\<Longrightarrow>\n       ((start (atom a), [False]) \\<in> NAe.steps (atom a) (aa # w)) =\n       (aa # w = [a])", "apply (simp add: False_False_in_steps_atom relcomp_unfold start_atom)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma accepts_atom: \"accepts (atom a) w = (w = [a])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.accepts (atom a) w = (w = [a])", "by (simp add: accepts_def start_fin_in_steps_atom fin_atom)"], ["", "(******************************************************)\n(*                      or                            *)\n(******************************************************)\n\n(***** lift True/False over fin *****)"], ["", "lemma fin_or_True[iff]:\n \"\\<And>L R. fin (or L R) (True#p) = fin L p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. fin (or L R) (True # p) = fin L p", "by(simp add:or_def)"], ["", "lemma fin_or_False[iff]:\n \"\\<And>L R. fin (or L R) (False#p) = fin R p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. fin (or L R) (False # p) = fin R p", "by(simp add:or_def)"], ["", "(***** lift True/False over step *****)"], ["", "lemma True_in_step_or[iff]:\n\"\\<And>L R. (True#p,q) : step (or L R) a = (\\<exists>r. q = True#r \\<and> (p,r) : step L a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       ((True # p, q) \\<in> step (or L R) a) =\n       (\\<exists>r. q = True # r \\<and> (p, r) \\<in> step L a)", "apply (simp add:or_def step_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       (q \\<in> True ## aa a p) =\n       (\\<exists>r. q = True # r \\<and> r \\<in> aa a p)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma False_in_step_or[iff]:\n\"\\<And>L R. (False#p,q) : step (or L R) a = (\\<exists>r. q = False#r \\<and> (p,r) : step R a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       ((False # p, q) \\<in> step (or L R) a) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> step R a)", "apply (simp add:or_def step_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       (q \\<in> False ## aa a p) =\n       (\\<exists>r. q = False # r \\<and> r \\<in> aa a p)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(***** lift True/False over epsclosure *****)"], ["", "lemma lemma1a:\n \"(tp,tq) : (eps(or L R))\\<^sup>* \\<Longrightarrow> \n (\\<And>p. tp = True#p \\<Longrightarrow> \\<exists>q. (p,q) : (eps L)\\<^sup>* \\<and> tq = True#q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp, tq) \\<in> (eps (or L R))\\<^sup>* \\<Longrightarrow>\n    (\\<And>p.\n        tp = True # p \\<Longrightarrow>\n        \\<exists>q. (p, q) \\<in> (eps L)\\<^sup>* \\<and> tq = True # q)", "apply (induct rule:rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       tp = True # p \\<Longrightarrow>\n       \\<exists>q. (p, q) \\<in> (eps L)\\<^sup>* \\<and> tp = True # q\n 2. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<And>p.\n           tp = True # p \\<Longrightarrow>\n           \\<exists>q. (p, q) \\<in> (eps L)\\<^sup>* \\<and> y = True # q;\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps L)\\<^sup>* \\<and> z = True # q", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<And>p.\n           tp = True # p \\<Longrightarrow>\n           \\<exists>q. (p, q) \\<in> (eps L)\\<^sup>* \\<and> y = True # q;\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps L)\\<^sup>* \\<and> z = True # q", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(True # p, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<And>pa.\n           True # p = True # pa \\<Longrightarrow>\n           \\<exists>q. (pa, q) \\<in> (eps L)\\<^sup>* \\<and> y = True # q;\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps L)\\<^sup>* \\<and> z = True # q", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(True # p, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<exists>q. (p, q) \\<in> (eps L)\\<^sup>* \\<and> y = True # q;\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps L)\\<^sup>* \\<and> z = True # q", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lemma1b:\n \"(tp,tq) : (eps(or L R))\\<^sup>* \\<Longrightarrow> \n (\\<And>p. tp = False#p \\<Longrightarrow> \\<exists>q. (p,q) : (eps R)\\<^sup>* \\<and> tq = False#q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp, tq) \\<in> (eps (or L R))\\<^sup>* \\<Longrightarrow>\n    (\\<And>p.\n        tp = False # p \\<Longrightarrow>\n        \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> tq = False # q)", "apply (induct rule:rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       tp = False # p \\<Longrightarrow>\n       \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> tp = False # q\n 2. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<And>p.\n           tp = False # p \\<Longrightarrow>\n           \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> y = False # q;\n        tp = False # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps R)\\<^sup>* \\<and>\n                            z = False # q", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<And>p.\n           tp = False # p \\<Longrightarrow>\n           \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> y = False # q;\n        tp = False # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps R)\\<^sup>* \\<and>\n                            z = False # q", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(False # p, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<And>pa.\n           False # p = False # pa \\<Longrightarrow>\n           \\<exists>q. (pa, q) \\<in> (eps R)\\<^sup>* \\<and> y = False # q;\n        tp = False # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps R)\\<^sup>* \\<and>\n                            z = False # q", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(False # p, y) \\<in> (eps (or L R))\\<^sup>*;\n        (y, z) \\<in> eps (or L R);\n        \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> y = False # q;\n        tp = False # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps R)\\<^sup>* \\<and>\n                            z = False # q", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lemma2a:\n \"(p,q) : (eps L)\\<^sup>*  \\<Longrightarrow> (True#p, True#q) : (eps(or L R))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q) \\<in> (eps L)\\<^sup>* \\<Longrightarrow>\n    (True # p, True # q) \\<in> (eps (or L R))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # p, True # p) \\<in> (eps (or L R))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps L)\\<^sup>*; (y, z) \\<in> eps L;\n        (True # p, True # y) \\<in> (eps (or L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z) \\<in> (eps (or L R))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps L)\\<^sup>*; (y, z) \\<in> eps L;\n        (True # p, True # y) \\<in> (eps (or L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z) \\<in> (eps (or L R))\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lemma2b:\n \"(p,q) : (eps R)\\<^sup>*  \\<Longrightarrow> (False#p, False#q) : (eps(or L R))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q) \\<in> (eps R)\\<^sup>* \\<Longrightarrow>\n    (False # p, False # q) \\<in> (eps (or L R))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (False # p, False # p) \\<in> (eps (or L R))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*; (y, z) \\<in> eps R;\n        (False # p, False # y) \\<in> (eps (or L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z) \\<in> (eps (or L R))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*; (y, z) \\<in> eps R;\n        (False # p, False # y) \\<in> (eps (or L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z) \\<in> (eps (or L R))\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_epsclosure_or[iff]:\n \"(True#p,q) : (eps(or L R))\\<^sup>* = (\\<exists>r. q = True#r \\<and> (p,r) : (eps L)\\<^sup>*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True # p, q) \\<in> (eps (or L R))\\<^sup>*) =\n    (\\<exists>r. q = True # r \\<and> (p, r) \\<in> (eps L)\\<^sup>*)", "by (blast dest: lemma1a lemma2a)"], ["", "lemma False_epsclosure_or[iff]:\n \"(False#p,q) : (eps(or L R))\\<^sup>* = (\\<exists>r. q = False#r \\<and> (p,r) : (eps R)\\<^sup>*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((False # p, q) \\<in> (eps (or L R))\\<^sup>*) =\n    (\\<exists>r. q = False # r \\<and> (p, r) \\<in> (eps R)\\<^sup>*)", "by (blast dest: lemma1b lemma2b)"], ["", "(***** lift True/False over steps *****)"], ["", "lemma lift_True_over_steps_or[iff]:\n \"\\<And>p. (True#p,q):steps (or L R) w = (\\<exists>r. q = True # r \\<and> (p,r):steps L w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       ((True # p, q) \\<in> NAe.steps (or L R) w) =\n       (\\<exists>r. q = True # r \\<and> (p, r) \\<in> NAe.steps L w)", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       ((True # p, q) \\<in> NAe.steps (or L R) []) =\n       (\\<exists>r. q = True # r \\<and> (p, r) \\<in> NAe.steps L [])\n 2. \\<And>a w p.\n       (\\<And>p.\n           ((True # p, q) \\<in> NAe.steps (or L R) w) =\n           (\\<exists>r.\n               q = True # r \\<and>\n               (p, r) \\<in> NAe.steps L w)) \\<Longrightarrow>\n       ((True # p, q) \\<in> NAe.steps (or L R) (a # w)) =\n       (\\<exists>r. q = True # r \\<and> (p, r) \\<in> NAe.steps L (a # w))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p r ra rb.\n       \\<lbrakk>\\<And>p.\n                   ((True # p, True # rb) \\<in> NAe.steps (or L R) w) =\n                   ((p, rb) \\<in> NAe.steps L w);\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        (ra, rb) \\<in> NAe.steps L w; q = True # rb\\<rbrakk>\n       \\<Longrightarrow> (p, rb)\n                         \\<in> (eps L)\\<^sup>* O\n                               step L (Some a) O NAe.steps L w", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lift_False_over_steps_or[iff]:\n \"\\<And>p. (False#p,q):steps (or L R) w = (\\<exists>r. q = False#r \\<and> (p,r):steps R w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       ((False # p, q) \\<in> NAe.steps (or L R) w) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R w)", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       ((False # p, q) \\<in> NAe.steps (or L R) []) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R [])\n 2. \\<And>a w p.\n       (\\<And>p.\n           ((False # p, q) \\<in> NAe.steps (or L R) w) =\n           (\\<exists>r.\n               q = False # r \\<and>\n               (p, r) \\<in> NAe.steps R w)) \\<Longrightarrow>\n       ((False # p, q) \\<in> NAe.steps (or L R) (a # w)) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R (a # w))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p r ra rb.\n       \\<lbrakk>\\<And>p.\n                   ((False # p, False # rb) \\<in> NAe.steps (or L R) w) =\n                   ((p, rb) \\<in> NAe.steps R w);\n        (p, r) \\<in> (eps R)\\<^sup>*; (r, ra) \\<in> step R (Some a);\n        (ra, rb) \\<in> NAe.steps R w; q = False # rb\\<rbrakk>\n       \\<Longrightarrow> (p, rb)\n                         \\<in> (eps R)\\<^sup>* O\n                               step R (Some a) O NAe.steps R w", "apply (force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(***** Epsilon closure of start state *****)"], ["", "lemma unfold_rtrancl2:\n \"R\\<^sup>* = Id \\<union> (R O R\\<^sup>*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>* = Id \\<union> R O R\\<^sup>*", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> R\\<^sup>*) = (x \\<in> Id \\<union> R O R\\<^sup>*)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       ((a, b) \\<in> R\\<^sup>*) = (a = b \\<or> (a, b) \\<in> R O R\\<^sup>*)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> R\\<^sup>* \\<Longrightarrow>\n       a = b \\<or> (a, b) \\<in> R O R\\<^sup>*\n 2. \\<And>a b.\n       a = b \\<or> (a, b) \\<in> R O R\\<^sup>* \\<Longrightarrow>\n       (a, b) \\<in> R\\<^sup>*", "apply (erule rtrancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b. a = a \\<or> (a, a) \\<in> R O R\\<^sup>*\n 2. \\<And>a b y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        a = y \\<or> (a, y) \\<in> R O R\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a = z \\<or> (a, z) \\<in> R O R\\<^sup>*\n 3. \\<And>a b.\n       a = b \\<or> (a, b) \\<in> R O R\\<^sup>* \\<Longrightarrow>\n       (a, b) \\<in> R\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        a = y \\<or> (a, y) \\<in> R O R\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a = z \\<or> (a, z) \\<in> R O R\\<^sup>*\n 2. \\<And>a b.\n       a = b \\<or> (a, b) \\<in> R O R\\<^sup>* \\<Longrightarrow>\n       (a, b) \\<in> R\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a = b \\<or> (a, b) \\<in> R O R\\<^sup>* \\<Longrightarrow>\n       (a, b) \\<in> R\\<^sup>*", "apply (blast intro: converse_rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_unfold_rtrancl2:\n \"(p,q) : R\\<^sup>* = (q = p | (\\<exists>r. (p,r) : R \\<and> (r,q) : R\\<^sup>*))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p, q) \\<in> R\\<^sup>*) =\n    (q = p \\<or> (\\<exists>r. (p, r) \\<in> R \\<and> (r, q) \\<in> R\\<^sup>*))", "apply (rule unfold_rtrancl2[THEN equalityE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>?R1\\<^sup>* \\<subseteq> Id \\<union> ?R1 O ?R1\\<^sup>*;\n     Id \\<union> ?R1 O ?R1\\<^sup>* \\<subseteq> ?R1\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> ((p, q) \\<in> R\\<^sup>*) =\n                      (q = p \\<or>\n                       (\\<exists>r.\n                           (p, r) \\<in> R \\<and> (r, q) \\<in> R\\<^sup>*))", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas [iff] = in_unfold_rtrancl2[where ?p = \"start(or L R)\"] for L R"], ["", "lemma start_eps_or[iff]:\n \"\\<And>L R. (start(or L R),q) : eps(or L R) = \n       (q = True#start L | q = False#start R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       ((start (or L R), q) \\<in> eps (or L R)) =\n       (q = True # start L \\<or> q = False # start R)", "by (simp add:or_def step_def)"], ["", "lemma not_start_step_or_Some[iff]:\n \"\\<And>L R. (start(or L R),q) \\<notin> step (or L R) (Some a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. (start (or L R), q) \\<notin> step (or L R) (Some a)", "by (simp add:or_def step_def)"], ["", "lemma steps_or:\n \"(start(or L R), q) : steps (or L R) w = \n ( (w = [] \\<and> q = start(or L R)) | \n   (\\<exists>p.  q = True  # p \\<and> (start L,p) : steps L w | \n         q = False # p \\<and> (start R,p) : steps R w) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((start (or L R), q) \\<in> NAe.steps (or L R) w) =\n    (w = [] \\<and> q = start (or L R) \\<or>\n     (\\<exists>p.\n         q = True # p \\<and> (start L, p) \\<in> NAe.steps L w \\<or>\n         q = False # p \\<and> (start R, p) \\<in> NAe.steps R w))", "apply (case_tac \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. w = [] \\<Longrightarrow>\n    ((start (or L R), q) \\<in> NAe.steps (or L R) w) =\n    (w = [] \\<and> q = start (or L R) \\<or>\n     (\\<exists>p.\n         q = True # p \\<and> (start L, p) \\<in> NAe.steps L w \\<or>\n         q = False # p \\<and> (start R, p) \\<in> NAe.steps R w))\n 2. \\<And>a list.\n       w = a # list \\<Longrightarrow>\n       ((start (or L R), q) \\<in> NAe.steps (or L R) w) =\n       (w = [] \\<and> q = start (or L R) \\<or>\n        (\\<exists>p.\n            q = True # p \\<and> (start L, p) \\<in> NAe.steps L w \\<or>\n            q = False # p \\<and> (start R, p) \\<in> NAe.steps R w))", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. w = [] \\<Longrightarrow>\n    (q = start (or L R) \\<or>\n     (\\<exists>r.\n         (r = True # start L \\<or> r = False # start R) \\<and>\n         (r, q) \\<in> (eps (or L R))\\<^sup>*)) =\n    (q = start (or L R) \\<or>\n     (\\<exists>p.\n         q = True # p \\<and> (start L, p) \\<in> (eps L)\\<^sup>* \\<or>\n         q = False # p \\<and> (start R, p) \\<in> (eps R)\\<^sup>*))\n 2. \\<And>a list.\n       w = a # list \\<Longrightarrow>\n       ((start (or L R), q) \\<in> NAe.steps (or L R) w) =\n       (w = [] \\<and> q = start (or L R) \\<or>\n        (\\<exists>p.\n            q = True # p \\<and> (start L, p) \\<in> NAe.steps L w \\<or>\n            q = False # p \\<and> (start R, p) \\<in> NAe.steps R w))", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       w = a # list \\<Longrightarrow>\n       ((start (or L R), q) \\<in> NAe.steps (or L R) w) =\n       (w = [] \\<and> q = start (or L R) \\<or>\n        (\\<exists>p.\n            q = True # p \\<and> (start L, p) \\<in> NAe.steps L w \\<or>\n            q = False # p \\<and> (start R, p) \\<in> NAe.steps R w))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       w = a # list \\<Longrightarrow>\n       ((start (or L R), q)\n        \\<in> (eps (or L R))\\<^sup>* O\n              step (or L R) (Some a) O NAe.steps (or L R) list) =\n       (\\<exists>p.\n           q = True # p \\<and>\n           (start L, p)\n           \\<in> (eps L)\\<^sup>* O step L (Some a) O NAe.steps L list \\<or>\n           q = False # p \\<and>\n           (start R, p)\n           \\<in> (eps R)\\<^sup>* O step R (Some a) O NAe.steps R list)", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma start_or_not_final[iff]:\n \"\\<And>L R. \\<not> fin (or L R) (start(or L R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. \\<not> fin (or L R) (start (or L R))", "by (simp add:or_def)"], ["", "lemma accepts_or:\n \"accepts (or L R) w = (accepts L w | accepts R w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.accepts (or L R) w = (NAe.accepts L w \\<or> NAe.accepts R w)", "apply (simp add:accepts_def steps_or)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>q.\n        (w = [] \\<and> q = start (or L R) \\<or>\n         (\\<exists>p.\n             q = True # p \\<and> (start L, p) \\<in> NAe.steps L w \\<or>\n             q = False # p \\<and> (start R, p) \\<in> NAe.steps R w)) \\<and>\n        fin (or L R) q) =\n    ((\\<exists>q. (start L, q) \\<in> NAe.steps L w \\<and> fin L q) \\<or>\n     (\\<exists>q. (start R, q) \\<in> NAe.steps R w \\<and> fin R q))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(******************************************************)\n(*                      conc                          *)\n(******************************************************)\n\n(** True/False in fin **)"], ["", "lemma in_conc_True[iff]:\n \"\\<And>L R. fin (conc L R) (True#p) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. fin (RegExp2NAe.conc L R) (True # p) = False", "by (simp add:conc_def)"], ["", "lemma fin_conc_False[iff]:\n \"\\<And>L R. fin (conc L R) (False#p) = fin R p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. fin (RegExp2NAe.conc L R) (False # p) = fin R p", "by (simp add:conc_def)"], ["", "(** True/False in step **)"], ["", "lemma True_step_conc[iff]:\n \"\\<And>L R. (True#p,q) : step (conc L R) a = \n       ((\\<exists>r. q=True#r \\<and> (p,r): step L a) | \n        (fin L p \\<and> a=None \\<and> q=False#start R))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       ((True # p, q) \\<in> step (RegExp2NAe.conc L R) a) =\n       ((\\<exists>r. q = True # r \\<and> (p, r) \\<in> step L a) \\<or>\n        fin L p \\<and> a = None \\<and> q = False # start R)", "by (simp add:conc_def step_def) (blast)"], ["", "lemma False_step_conc[iff]:\n \"\\<And>L R. (False#p,q) : step (conc L R) a = \n       (\\<exists>r. q = False#r \\<and> (p,r) : step R a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       ((False # p, q) \\<in> step (RegExp2NAe.conc L R) a) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> step R a)", "by (simp add:conc_def step_def) (blast)"], ["", "(** False in epsclosure **)"], ["", "lemma lemma1b':\n \"(tp,tq) : (eps(conc L R))\\<^sup>* \\<Longrightarrow> \n  (\\<And>p. tp = False#p \\<Longrightarrow> \\<exists>q. (p,q) : (eps R)\\<^sup>* \\<and> tq = False#q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp, tq) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* \\<Longrightarrow>\n    (\\<And>p.\n        tp = False # p \\<Longrightarrow>\n        \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> tq = False # q)", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       tp = False # p \\<Longrightarrow>\n       \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> tp = False # q\n 2. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.conc L R);\n        \\<And>p.\n           tp = False # p \\<Longrightarrow>\n           \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> y = False # q;\n        tp = False # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps R)\\<^sup>* \\<and>\n                            z = False # q", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.conc L R);\n        \\<And>p.\n           tp = False # p \\<Longrightarrow>\n           \\<exists>q. (p, q) \\<in> (eps R)\\<^sup>* \\<and> y = False # q;\n        tp = False # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (p, q) \\<in> (eps R)\\<^sup>* \\<and>\n                            z = False # q", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lemma2b':\n \"(p,q) : (eps R)\\<^sup>* \\<Longrightarrow> (False#p, False#q) : (eps(conc L R))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q) \\<in> (eps R)\\<^sup>* \\<Longrightarrow>\n    (False # p, False # q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (False # p, False # p) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*; (y, z) \\<in> eps R;\n        (False # p, False # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*; (y, z) \\<in> eps R;\n        (False # p, False # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma False_epsclosure_conc[iff]:\n \"((False # p, q) : (eps (conc L R))\\<^sup>*) = \n (\\<exists>r. q = False # r \\<and> (p, r) : (eps R)\\<^sup>*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((False # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*) =\n    (\\<exists>r. q = False # r \\<and> (p, r) \\<in> (eps R)\\<^sup>*)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (False # p, q)\n    \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* \\<Longrightarrow>\n    \\<exists>r. q = False # r \\<and> (p, r) \\<in> (eps R)\\<^sup>*\n 2. \\<exists>r.\n       q = False # r \\<and> (p, r) \\<in> (eps R)\\<^sup>* \\<Longrightarrow>\n    (False # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast dest: lemma1b')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r.\n       q = False # r \\<and> (p, r) \\<in> (eps R)\\<^sup>* \\<Longrightarrow>\n    (False # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast dest: lemma2b')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** False in steps **)"], ["", "lemma False_steps_conc[iff]:\n \"\\<And>p. (False#p,q): steps (conc L R) w = (\\<exists>r. q=False#r \\<and> (p,r): steps R w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R w)", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) []) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R [])\n 2. \\<And>a w p.\n       (\\<And>p.\n           ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w) =\n           (\\<exists>r.\n               q = False # r \\<and>\n               (p, r) \\<in> NAe.steps R w)) \\<Longrightarrow>\n       ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) (a # w)) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R (a # w))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p.\n       (\\<And>p.\n           ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w) =\n           (\\<exists>r.\n               q = False # r \\<and>\n               (p, r) \\<in> NAe.steps R w)) \\<Longrightarrow>\n       ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) (a # w)) =\n       (\\<exists>r. q = False # r \\<and> (p, r) \\<in> NAe.steps R (a # w))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p.\n       (\\<And>p.\n           ((False # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w) =\n           (\\<exists>r.\n               q = False # r \\<and>\n               (p, r) \\<in> NAe.steps R w)) \\<Longrightarrow>\n       ((False # p, q)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* O\n              step (RegExp2NAe.conc L R) (Some a) O\n              NAe.steps (RegExp2NAe.conc L R) w) =\n       (\\<exists>r.\n           q = False # r \\<and>\n           (p, r) \\<in> (eps R)\\<^sup>* O step R (Some a) O NAe.steps R w)", "apply (fast)"], ["proof (prove)\ngoal:\nNo subgoals!", "(*MUCH faster than blast*)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** True in epsclosure **)"], ["", "lemma True_True_eps_concI:\n \"(p,q): (eps L)\\<^sup>* \\<Longrightarrow> (True#p,True#q) : (eps(conc L R))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q) \\<in> (eps L)\\<^sup>* \\<Longrightarrow>\n    (True # p, True # q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # p, True # p) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps L)\\<^sup>*; (y, z) \\<in> eps L;\n        (True # p, True # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps L)\\<^sup>*; (y, z) \\<in> eps L;\n        (True # p, True # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_True_steps_concI:\n \"\\<And>p. (p,q) : steps L w \\<Longrightarrow> (True#p,True#q) : steps (conc L R) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (p, q) \\<in> NAe.steps L w \\<Longrightarrow>\n       (True # p, True # q) \\<in> NAe.steps (RegExp2NAe.conc L R) w", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       (p, q) \\<in> NAe.steps L [] \\<Longrightarrow>\n       (True # p, True # q) \\<in> NAe.steps (RegExp2NAe.conc L R) []\n 2. \\<And>a w p.\n       \\<lbrakk>\\<And>p.\n                   (p, q) \\<in> NAe.steps L w \\<Longrightarrow>\n                   (True # p, True # q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, q) \\<in> NAe.steps L (a # w)\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # q)\n                         \\<in> NAe.steps (RegExp2NAe.conc L R) (a # w)", "apply (simp add: True_True_eps_concI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p.\n       \\<lbrakk>\\<And>p.\n                   (p, q) \\<in> NAe.steps L w \\<Longrightarrow>\n                   (True # p, True # q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, q) \\<in> NAe.steps L (a # w)\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # q)\n                         \\<in> NAe.steps (RegExp2NAe.conc L R) (a # w)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p.\n       \\<lbrakk>\\<And>p.\n                   (p, q) \\<in> NAe.steps L w \\<Longrightarrow>\n                   (True # p, True # q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, q)\n        \\<in> (eps L)\\<^sup>* O step L (Some a) O NAe.steps L w\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # q)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* O\n                               step (RegExp2NAe.conc L R) (Some a) O\n                               NAe.steps (RegExp2NAe.conc L R) w", "apply (blast intro: True_True_eps_concI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lemma1a':\n \"(tp,tq) : (eps(conc L R))\\<^sup>* \\<Longrightarrow> \n (\\<And>p. tp = True#p \\<Longrightarrow> \n  (\\<exists>q. tq = True#q \\<and> (p,q) : (eps L)\\<^sup>*) | \n  (\\<exists>q r. tq = False#q \\<and> (p,r):(eps L)\\<^sup>* \\<and> fin L r \\<and> (start R,q) : (eps R)\\<^sup>*))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp, tq) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* \\<Longrightarrow>\n    (\\<And>p.\n        tp = True # p \\<Longrightarrow>\n        (\\<exists>q.\n            tq = True # q \\<and> (p, q) \\<in> (eps L)\\<^sup>*) \\<or>\n        (\\<exists>q r.\n            tq = False # q \\<and>\n            (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n            fin L r \\<and> (start R, q) \\<in> (eps R)\\<^sup>*))", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       tp = True # p \\<Longrightarrow>\n       (\\<exists>q. tp = True # q \\<and> (p, q) \\<in> (eps L)\\<^sup>*) \\<or>\n       (\\<exists>q r.\n           tp = False # q \\<and>\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and> (start R, q) \\<in> (eps R)\\<^sup>*)\n 2. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.conc L R);\n        \\<And>p.\n           tp = True # p \\<Longrightarrow>\n           (\\<exists>q.\n               y = True # q \\<and> (p, q) \\<in> (eps L)\\<^sup>*) \\<or>\n           (\\<exists>q r.\n               y = False # q \\<and>\n               (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n               fin L r \\<and> (start R, q) \\<in> (eps R)\\<^sup>*);\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>q.\n                             z = True # q \\<and>\n                             (p, q) \\<in> (eps L)\\<^sup>*) \\<or>\n                         (\\<exists>q r.\n                             z = False # q \\<and>\n                             (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n                             fin L r \\<and>\n                             (start R, q) \\<in> (eps R)\\<^sup>*)", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(tp, y) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.conc L R);\n        \\<And>p.\n           tp = True # p \\<Longrightarrow>\n           (\\<exists>q.\n               y = True # q \\<and> (p, q) \\<in> (eps L)\\<^sup>*) \\<or>\n           (\\<exists>q r.\n               y = False # q \\<and>\n               (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n               fin L r \\<and> (start R, q) \\<in> (eps R)\\<^sup>*);\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>q.\n                             z = True # q \\<and>\n                             (p, q) \\<in> (eps L)\\<^sup>*) \\<or>\n                         (\\<exists>q r.\n                             z = False # q \\<and>\n                             (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n                             fin L r \\<and>\n                             (start R, q) \\<in> (eps R)\\<^sup>*)", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lemma2a':\n \"(p, q) : (eps L)\\<^sup>* \\<Longrightarrow> (True#p, True#q) : (eps(conc L R))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q) \\<in> (eps L)\\<^sup>* \\<Longrightarrow>\n    (True # p, True # q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # p, True # p) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps L)\\<^sup>*; (y, z) \\<in> eps L;\n        (True # p, True # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps L)\\<^sup>*; (y, z) \\<in> eps L;\n        (True # p, True # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lem:\n \"\\<And>L R. (p,q) : step R None \\<Longrightarrow> (False#p, False#q) : step (conc L R) None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       (p, q) \\<in> eps R \\<Longrightarrow>\n       (False # p, False # q) \\<in> eps (RegExp2NAe.conc L R)", "by(simp add: conc_def step_def)"], ["", "lemma lemma2b'':\n \"(p,q) : (eps R)\\<^sup>* \\<Longrightarrow> (False#p, False#q) : (eps(conc L R))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, q) \\<in> (eps R)\\<^sup>* \\<Longrightarrow>\n    (False # p, False # q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (False # p, False # p) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*; (y, z) \\<in> eps R;\n        (False # p, False # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*; (y, z) \\<in> eps R;\n        (False # p, False # y)\n        \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (drule lem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps R)\\<^sup>*;\n        (False # p, False # y) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*;\n        (False # y, False # z)\n        \\<in> eps (RegExp2NAe.conc (?L5 y z) R)\\<rbrakk>\n       \\<Longrightarrow> (False # p, False # z)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_False_eps_concI:\n \"\\<And>L R. fin L p \\<Longrightarrow> (True#p, False#start R) : eps(conc L R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       fin L p \\<Longrightarrow>\n       (True # p, False # start R) \\<in> eps (RegExp2NAe.conc L R)", "by(simp add: conc_def step_def)"], ["", "lemma True_epsclosure_conc[iff]:\n \"((True#p,q) \\<in> (eps(conc L R))\\<^sup>*) = \n ((\\<exists>r. (p,r) \\<in> (eps L)\\<^sup>* \\<and> q = True#r) \\<or>\n  (\\<exists>r. (p,r) \\<in> (eps L)\\<^sup>* \\<and> fin L r \\<and>\n        (\\<exists>s. (start R, s) \\<in> (eps R)\\<^sup>* \\<and> q = False#s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*) =\n    ((\\<exists>r. (p, r) \\<in> (eps L)\\<^sup>* \\<and> q = True # r) \\<or>\n     (\\<exists>r.\n         (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n         fin L r \\<and>\n         (\\<exists>s.\n             (start R, s) \\<in> (eps R)\\<^sup>* \\<and> q = False # s)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # p, q)\n    \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* \\<Longrightarrow>\n    (\\<exists>r. (p, r) \\<in> (eps L)\\<^sup>* \\<and> q = True # r) \\<or>\n    (\\<exists>r.\n        (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n        fin L r \\<and>\n        (\\<exists>s.\n            (start R, s) \\<in> (eps R)\\<^sup>* \\<and> q = False # s))\n 2. (\\<exists>r. (p, r) \\<in> (eps L)\\<^sup>* \\<and> q = True # r) \\<or>\n    (\\<exists>r.\n        (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n        fin L r \\<and>\n        (\\<exists>s.\n            (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n            q = False # s)) \\<Longrightarrow>\n    (True # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast dest: lemma1a')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. (p, r) \\<in> (eps L)\\<^sup>* \\<and> q = True # r) \\<or>\n    (\\<exists>r.\n        (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n        fin L r \\<and>\n        (\\<exists>s.\n            (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n            q = False # s)) \\<Longrightarrow>\n    (True # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>r.\n       (p, r) \\<in> (eps L)\\<^sup>* \\<and> q = True # r \\<Longrightarrow>\n    (True # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\n 2. \\<exists>r.\n       (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n       fin L r \\<and>\n       (\\<exists>s.\n           (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n           q = False # s) \\<Longrightarrow>\n    (True # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (blast intro: lemma2a')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r.\n       (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n       fin L r \\<and>\n       (\\<exists>s.\n           (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n           q = False # s) \\<Longrightarrow>\n    (True # p, q) \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (True # p, False # s)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (rule rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (True # p, ?y335 r s)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*\n 2. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (?y335 r s, False # s)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (erule lemma2a')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (True # r, False # s)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (rule converse_rtrancl_into_rtrancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (True # r, ?b339 r s)\n                         \\<in> eps (RegExp2NAe.conc L R)\n 2. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (?b339 r s, False # s)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (erule True_False_eps_concI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; q = False # s\\<rbrakk>\n       \\<Longrightarrow> (False # start R, False # s)\n                         \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>*", "apply (erule lemma2b'')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** True in steps **)"], ["", "lemma True_steps_concD[rule_format]:\n \"\\<forall>p. (True#p,q) : steps (conc L R) w \\<longrightarrow> \n     ((\\<exists>r. (p,r) : steps L w \\<and> q = True#r)  \\<or>\n      (\\<exists>u v. w = u@v \\<and> (\\<exists>r. (p,r) \\<in> steps L u \\<and> fin L r \\<and>\n              (\\<exists>s. (start R,s) \\<in> steps R v \\<and> q = False#s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       (True # p, q)\n       \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n       (\\<exists>r. (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n       (\\<exists>u v.\n           w = u @ v \\<and>\n           (\\<exists>r.\n               (p, r) \\<in> NAe.steps L u \\<and>\n               fin L r \\<and>\n               (\\<exists>s.\n                   (start R, s) \\<in> NAe.steps R v \\<and> q = False # s)))", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>p.\n       (True # p, q)\n       \\<in> NAe.steps (RegExp2NAe.conc L R) [] \\<longrightarrow>\n       (\\<exists>r. (p, r) \\<in> NAe.steps L [] \\<and> q = True # r) \\<or>\n       (\\<exists>u v.\n           [] = u @ v \\<and>\n           (\\<exists>r.\n               (p, r) \\<in> NAe.steps L u \\<and>\n               fin L r \\<and>\n               (\\<exists>s.\n                   (start R, s) \\<in> NAe.steps R v \\<and> q = False # s)))\n 2. \\<And>a w.\n       \\<forall>p.\n          (True # p, q)\n          \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n          (\\<exists>r. (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n          (\\<exists>u v.\n              w = u @ v \\<and>\n              (\\<exists>r.\n                  (p, r) \\<in> NAe.steps L u \\<and>\n                  fin L r \\<and>\n                  (\\<exists>s.\n                      (start R, s) \\<in> NAe.steps R v \\<and>\n                      q = False # s))) \\<Longrightarrow>\n       \\<forall>p.\n          (True # p, q)\n          \\<in> NAe.steps (RegExp2NAe.conc L R) (a # w) \\<longrightarrow>\n          (\\<exists>r.\n              (p, r) \\<in> NAe.steps L (a # w) \\<and> q = True # r) \\<or>\n          (\\<exists>u v.\n              a # w = u @ v \\<and>\n              (\\<exists>r.\n                  (p, r) \\<in> NAe.steps L u \\<and>\n                  fin L r \\<and>\n                  (\\<exists>s.\n                      (start R, s) \\<in> NAe.steps R v \\<and>\n                      q = False # s)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<forall>p.\n          (True # p, q)\n          \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n          (\\<exists>r. (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n          (\\<exists>u v.\n              w = u @ v \\<and>\n              (\\<exists>r.\n                  (p, r) \\<in> NAe.steps L u \\<and>\n                  fin L r \\<and>\n                  (\\<exists>s.\n                      (start R, s) \\<in> NAe.steps R v \\<and>\n                      q = False # s))) \\<Longrightarrow>\n       \\<forall>p.\n          (True # p, q)\n          \\<in> NAe.steps (RegExp2NAe.conc L R) (a # w) \\<longrightarrow>\n          (\\<exists>r.\n              (p, r) \\<in> NAe.steps L (a # w) \\<and> q = True # r) \\<or>\n          (\\<exists>u v.\n              a # w = u @ v \\<and>\n              (\\<exists>r.\n                  (p, r) \\<in> NAe.steps L u \\<and>\n                  fin L r \\<and>\n                  (\\<exists>s.\n                      (start R, s) \\<in> NAe.steps R v \\<and>\n                      q = False # s)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w.\n       \\<forall>p.\n          (True # p, q)\n          \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n          (\\<exists>r. (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n          (\\<exists>u v.\n              w = u @ v \\<and>\n              (\\<exists>r.\n                  (p, r) \\<in> NAe.steps L u \\<and>\n                  fin L r \\<and>\n                  (\\<exists>s.\n                      (start R, s) \\<in> NAe.steps R v \\<and>\n                      q = False # s))) \\<Longrightarrow>\n       \\<forall>p.\n          (True # p, q)\n          \\<in> (eps (RegExp2NAe.conc L R))\\<^sup>* O\n                step (RegExp2NAe.conc L R) (Some a) O\n                NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n          (\\<exists>r.\n              (p, r)\n              \\<in> (eps L)\\<^sup>* O step L (Some a) O NAe.steps L w \\<and>\n              q = True # r) \\<or>\n          (\\<exists>u v.\n              a # w = u @ v \\<and>\n              (\\<exists>r.\n                  (p, r) \\<in> NAe.steps L u \\<and>\n                  fin L r \\<and>\n                  (\\<exists>s.\n                      (start R, s) \\<in> NAe.steps R v \\<and>\n                      q = False # s)))", "apply (clarify del: disjCI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (\\<exists>r.\n            (p, r) \\<in> (eps L)\\<^sup>* \\<and> xa = True # r) \\<or>\n        (\\<exists>r.\n            (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n            fin L r \\<and>\n            (\\<exists>s.\n                (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n                xa = False # s))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and> xa = True # r\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (clarify del: disjCI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        (\\<exists>ra.\n            ya = True # ra \\<and> (r, ra) \\<in> step L (Some a)) \\<or>\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        \\<exists>ra.\n           ya = True # ra \\<and> (r, ra) \\<in> step L (Some a)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (clarify del: disjCI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a w p x y z xa ya za r ra.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (True # ra, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (erule allE, erule impE, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a w p x y z xa ya za r ra.\n       \\<lbrakk>(True # ra, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        (\\<exists>r. (ra, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n        (\\<exists>u v.\n            w = u @ v \\<and>\n            (\\<exists>r.\n                (ra, r) \\<in> NAe.steps L u \\<and>\n                fin L r \\<and>\n                (\\<exists>s.\n                    (start R, s) \\<in> NAe.steps R v \\<and>\n                    q = False # s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a w p x y z xa ya za r ra.\n       \\<lbrakk>(True # ra, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        \\<exists>r. (ra, r) \\<in> NAe.steps L w \\<and> q = True # r\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za r ra.\n       \\<lbrakk>(True # ra, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        \\<exists>u v.\n           w = u @ v \\<and>\n           (\\<exists>r.\n               (ra, r) \\<in> NAe.steps L u \\<and>\n               fin L r \\<and>\n               (\\<exists>s.\n                   (start R, s) \\<in> NAe.steps R v \\<and>\n                   q = False # s))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 4. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a w p x y z xa ya za r ra.\n       \\<lbrakk>(True # ra, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        \\<exists>u v.\n           w = u @ v \\<and>\n           (\\<exists>r.\n               (ra, r) \\<in> NAe.steps L u \\<and>\n               fin L r \\<and>\n               (\\<exists>s.\n                   (start R, s) \\<in> NAe.steps R v \\<and>\n                   q = False # s))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a w p x y z xa ya za r ra.\n       \\<lbrakk>(True # ra, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        \\<exists>u v.\n           w = u @ v \\<and>\n           (\\<exists>r.\n               (ra, r) \\<in> NAe.steps L u \\<and>\n               fin L r \\<and>\n               (\\<exists>s.\n                   (start R, s) \\<in> NAe.steps R v \\<and>\n                   q = False # s))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u v.\n                            a # w = u @ v \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L u \\<and>\n                                fin L r \\<and>\n                                (\\<exists>s.\n                                    (start R, s) \\<in> NAe.steps R v \\<and>\n                                    q = False # s))\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a w p x y z xa ya za r ra u v xb yb zb rb s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        (True # ra, yb) \\<in> NAe.steps (RegExp2NAe.conc L R) u;\n        (yb, False # s) \\<in> NAe.steps (RegExp2NAe.conc L R) v;\n        (ra, rb) \\<in> NAe.steps L u; fin L rb;\n        (start R, s) \\<in> NAe.steps R v; q = False # s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ua va.\n                            a # u @ v = ua @ va \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L ua \\<and>\n                                fin L r \\<and>\n                                (\\<exists>sa.\n                                    (start R, sa)\n                                    \\<in> NAe.steps R va \\<and>\n                                    False # s = False # sa))\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a p r ra u v yb rb s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        (True # ra, yb) \\<in> NAe.steps (RegExp2NAe.conc L R) u;\n        (yb, False # s) \\<in> NAe.steps (RegExp2NAe.conc L R) v;\n        (ra, rb) \\<in> NAe.steps L u; fin L rb;\n        (start R, s) \\<in> NAe.steps R v; q = False # s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ua va.\n                            a # u @ v = ua @ va \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L ua \\<and>\n                                fin L r \\<and>\n                                (start R, s) \\<in> NAe.steps R va)\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (rule_tac x = \"a#u\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a p r ra u v yb rb s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        (True # ra, yb) \\<in> NAe.steps (RegExp2NAe.conc L R) u;\n        (yb, False # s) \\<in> NAe.steps (RegExp2NAe.conc L R) v;\n        (ra, rb) \\<in> NAe.steps L u; fin L rb;\n        (start R, s) \\<in> NAe.steps R v; q = False # s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            a # u @ v = (a # u) @ va \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L (a # u) \\<and>\n                                fin L r \\<and>\n                                (start R, s) \\<in> NAe.steps R va)\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a p r ra u v yb rb s.\n       \\<lbrakk>(p, r) \\<in> (eps L)\\<^sup>*; (r, ra) \\<in> step L (Some a);\n        (True # ra, yb) \\<in> NAe.steps (RegExp2NAe.conc L R) u;\n        (yb, False # s) \\<in> NAe.steps (RegExp2NAe.conc L R) v;\n        (ra, rb) \\<in> NAe.steps L u; fin L rb;\n        (start R, s) \\<in> NAe.steps R v; q = False # s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            (p, r)\n                            \\<in> (eps L)\\<^sup>* O\n                                  step L (Some a) O NAe.steps L u \\<and>\n                            fin L r\n 2. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 3. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w p x y z xa ya za r.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        (p, r) \\<in> (eps L)\\<^sup>*;\n        fin L r \\<and> Some a = None \\<and> ya = False # start R\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))\n 2. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             (p, r)\n                             \\<in> (eps L)\\<^sup>* O\n                                   step L (Some a) O NAe.steps L w \\<and>\n                             q = True # r) \\<or>\n                         (\\<exists>u v.\n                             a # w = u @ v \\<and>\n                             (\\<exists>r.\n                                 (p, r) \\<in> NAe.steps L u \\<and>\n                                 fin L r \\<and>\n                                 (\\<exists>s.\n                                     (start R, s) \\<in> NAe.steps R v \\<and>\n                                     q = False # s)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p x y z xa ya za.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, q)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               q = False # s)));\n        (xa, ya) \\<in> step (RegExp2NAe.conc L R) (Some a);\n        (ya, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w;\n        \\<exists>r.\n           (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n           fin L r \\<and>\n           (\\<exists>s.\n               (start R, s) \\<in> (eps R)\\<^sup>* \\<and>\n               xa = False # s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u v.\n                            a # w = u @ v \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L u \\<and>\n                                fin L r \\<and>\n                                (\\<exists>s.\n                                    (start R, s) \\<in> NAe.steps R v \\<and>\n                                    q = False # s))", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p x y z xa ya za r s ra rb.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, False # rb)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>r.\n                       (p, r) \\<in> NAe.steps L w \\<and>\n                       False # rb = True # r) \\<or>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (\\<exists>s.\n                               (start R, s) \\<in> NAe.steps R v \\<and>\n                               False # rb = False # s)));\n        (p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; (s, ra) \\<in> step R (Some a);\n        (ra, rb) \\<in> NAe.steps R w; q = False # rb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u v.\n                            a # w = u @ v \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L u \\<and>\n                                fin L r \\<and>\n                                (\\<exists>s.\n                                    (start R, s) \\<in> NAe.steps R v \\<and>\n                                    False # rb = False # s))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p r s ra rb.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, False # rb)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (start R, rb) \\<in> NAe.steps R v));\n        (p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; (s, ra) \\<in> step R (Some a);\n        (ra, rb) \\<in> NAe.steps R w; q = False # rb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u v.\n                            a # w = u @ v \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L u \\<and>\n                                fin L r \\<and>\n                                (start R, rb) \\<in> NAe.steps R v)", "apply (rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p r s ra rb.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, False # rb)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (start R, rb) \\<in> NAe.steps R v));\n        (p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; (s, ra) \\<in> step R (Some a);\n        (ra, rb) \\<in> NAe.steps R w; q = False # rb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            a # w = [] @ v \\<and>\n                            (\\<exists>r.\n                                (p, r) \\<in> NAe.steps L [] \\<and>\n                                fin L r \\<and>\n                                (start R, rb) \\<in> NAe.steps R v)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p r s ra rb.\n       \\<lbrakk>\\<forall>p.\n                   (True # p, False # rb)\n                   \\<in> NAe.steps (RegExp2NAe.conc L R) w \\<longrightarrow>\n                   (\\<exists>u v.\n                       w = u @ v \\<and>\n                       (\\<exists>r.\n                           (p, r) \\<in> NAe.steps L u \\<and>\n                           fin L r \\<and>\n                           (start R, rb) \\<in> NAe.steps R v));\n        (p, r) \\<in> (eps L)\\<^sup>*; fin L r;\n        (start R, s) \\<in> (eps R)\\<^sup>*; (s, ra) \\<in> step R (Some a);\n        (ra, rb) \\<in> NAe.steps R w; q = False # rb\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            (p, r) \\<in> (eps L)\\<^sup>* \\<and>\n                            fin L r \\<and>\n                            (start R, rb)\n                            \\<in> (eps R)\\<^sup>* O\n                                  step R (Some a) O NAe.steps R w", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_steps_conc:\n \"(True#p,q) \\<in> steps (conc L R) w = \n ((\\<exists>r. (p,r) \\<in> steps L w \\<and> q = True#r)  | \n  (\\<exists>u v. w = u@v \\<and> (\\<exists>r. (p,r) : steps L u \\<and> fin L r \\<and> \n          (\\<exists>s. (start R,s) : steps R v \\<and> q = False#s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True # p, q) \\<in> NAe.steps (RegExp2NAe.conc L R) w) =\n    ((\\<exists>r. (p, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n     (\\<exists>u v.\n         w = u @ v \\<and>\n         (\\<exists>r.\n             (p, r) \\<in> NAe.steps L u \\<and>\n             fin L r \\<and>\n             (\\<exists>s.\n                 (start R, s) \\<in> NAe.steps R v \\<and> q = False # s))))", "by (blast dest: True_steps_concD\n    intro: True_True_steps_concI in_steps_epsclosure)"], ["", "(** starting from the start **)"], ["", "lemma start_conc:\n  \"\\<And>L R. start(conc L R) = True#start L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R. start (RegExp2NAe.conc L R) = True # start L", "by (simp add: conc_def)"], ["", "lemma final_conc:\n \"\\<And>L R. fin(conc L R) p = (\\<exists>s. p = False#s \\<and> fin R s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>L R.\n       fin (RegExp2NAe.conc L R) p =\n       (\\<exists>s. p = False # s \\<and> fin R s)", "by (simp add:conc_def split: list.split)"], ["", "lemma accepts_conc:\n \"accepts (conc L R) w = (\\<exists>u v. w = u@v \\<and> accepts L u \\<and> accepts R v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.accepts (RegExp2NAe.conc L R) w =\n    (\\<exists>u v. w = u @ v \\<and> NAe.accepts L u \\<and> NAe.accepts R v)", "apply (simp add: accepts_def True_steps_conc final_conc start_conc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>q.\n        ((\\<exists>r.\n             (start L, r) \\<in> NAe.steps L w \\<and> q = True # r) \\<or>\n         (\\<exists>u v.\n             w = u @ v \\<and>\n             (\\<exists>r.\n                 (start L, r) \\<in> NAe.steps L u \\<and>\n                 fin L r \\<and>\n                 (\\<exists>s.\n                     (start R, s) \\<in> NAe.steps R v \\<and>\n                     q = False # s)))) \\<and>\n        (\\<exists>s. q = False # s \\<and> fin R s)) =\n    (\\<exists>u v.\n        w = u @ v \\<and>\n        (\\<exists>q. (start L, q) \\<in> NAe.steps L u \\<and> fin L q) \\<and>\n        (\\<exists>q. (start R, q) \\<in> NAe.steps R v \\<and> fin R q))", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(******************************************************)\n(*                       star                         *)\n(******************************************************)"], ["", "lemma True_in_eps_star[iff]:\n \"\\<And>A. (True#p,q) \\<in> eps(star A) = \n     ( (\\<exists>r. q = True#r \\<and> (p,r) \\<in> eps A) \\<or> (fin A p \\<and> q = True#start A) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       ((True # p, q) \\<in> eps (RegExp2NAe.star A)) =\n       ((\\<exists>r. q = True # r \\<and> (p, r) \\<in> eps A) \\<or>\n        fin A p \\<and> q = True # start A)", "by (simp add:star_def step_def) (blast)"], ["", "lemma True_True_step_starI:\n  \"\\<And>A. (p,q) : step A a \\<Longrightarrow> (True#p, True#q) : step (star A) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       (p, q) \\<in> step A a \\<Longrightarrow>\n       (True # p, True # q) \\<in> step (RegExp2NAe.star A) a", "by (simp add:star_def step_def)"], ["", "lemma True_True_eps_starI:\n  \"(p,r) : (eps A)\\<^sup>* \\<Longrightarrow> (True#p, True#r) : (eps(star A))\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p, r) \\<in> (eps A)\\<^sup>* \\<Longrightarrow>\n    (True # p, True # r) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # p, True # p) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps A)\\<^sup>*; (y, z) \\<in> eps A;\n        (True # p, True # y)\n        \\<in> (eps (RegExp2NAe.star A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(p, y) \\<in> (eps A)\\<^sup>*; (y, z) \\<in> eps A;\n        (True # p, True # y)\n        \\<in> (eps (RegExp2NAe.star A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # z)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (blast intro: True_True_step_starI rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_start_eps_starI:\n \"\\<And>A. fin A p \\<Longrightarrow> (True#p,True#start A) : eps(star A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       fin A p \\<Longrightarrow>\n       (True # p, True # start A) \\<in> eps (RegExp2NAe.star A)", "by (simp add:star_def step_def)"], ["", "lemma lem':\n \"(tp,s) : (eps(star A))\\<^sup>* \\<Longrightarrow> (\\<forall>p. tp = True#p \\<longrightarrow>\n (\\<exists>r. ((p,r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q. (p,q) \\<in> (eps A)\\<^sup>* \\<and> fin A q \\<and> (start A,r) : (eps A)\\<^sup>*)) \\<and> \n       s = True#r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>* \\<Longrightarrow>\n    \\<forall>p.\n       tp = True # p \\<longrightarrow>\n       (\\<exists>r.\n           ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n            (\\<exists>q.\n                (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n           s = True # r)", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>p.\n       tp = True # p \\<longrightarrow>\n       (\\<exists>r.\n           ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n            (\\<exists>q.\n                (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n           tp = True # r)\n 2. \\<And>y z.\n       \\<lbrakk>(tp, y) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.star A);\n        \\<forall>p.\n           tp = True # p \\<longrightarrow>\n           (\\<exists>r.\n               ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                (\\<exists>q.\n                    (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                    fin A q \\<and>\n                    (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n               y = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p.\n                            tp = True # p \\<longrightarrow>\n                            (\\<exists>r.\n                                ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                                 (\\<exists>q.\n                                     (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                                     fin A q \\<and>\n                                     (start A, r)\n                                     \\<in> (eps A)\\<^sup>*)) \\<and>\n                                z = True # r)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(tp, y) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.star A);\n        \\<forall>p.\n           tp = True # p \\<longrightarrow>\n           (\\<exists>r.\n               ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                (\\<exists>q.\n                    (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                    fin A q \\<and>\n                    (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n               y = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>p.\n                            tp = True # p \\<longrightarrow>\n                            (\\<exists>r.\n                                ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                                 (\\<exists>q.\n                                     (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                                     fin A q \\<and>\n                                     (start A, r)\n                                     \\<in> (eps A)\\<^sup>*)) \\<and>\n                                z = True # r)", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(True # p, y) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.star A);\n        \\<forall>pa.\n           True # p = True # pa \\<longrightarrow>\n           (\\<exists>r.\n               ((pa, r) \\<in> (eps A)\\<^sup>* \\<or>\n                (\\<exists>q.\n                    (pa, q) \\<in> (eps A)\\<^sup>* \\<and>\n                    fin A q \\<and>\n                    (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n               y = True # r);\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                             (\\<exists>q.\n                                 (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                                 fin A q \\<and>\n                                 (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n                            z = True # r", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z p.\n       \\<lbrakk>(True # p, y) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (y, z) \\<in> eps (RegExp2NAe.star A);\n        \\<exists>r.\n           ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n            (\\<exists>q.\n                (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n           y = True # r;\n        tp = True # p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                             (\\<exists>q.\n                                 (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                                 fin A q \\<and>\n                                 (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n                            z = True # r", "apply (blast intro: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_eps_star[iff]:\n \"((True#p,s) \\<in> (eps(star A))\\<^sup>*) = \n (\\<exists>r. ((p,r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q. (p,q) : (eps A)\\<^sup>* \\<and> fin A q \\<and> (start A,r) : (eps A)\\<^sup>*)) \\<and>\n       s = True#r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True # p, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*) =\n    (\\<exists>r.\n        ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n         (\\<exists>q.\n             (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n             fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n        s = True # r)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # p, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>* \\<Longrightarrow>\n    \\<exists>r.\n       ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q.\n            (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n       s = True # r\n 2. \\<exists>r.\n       ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q.\n            (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n       s = True # r \\<Longrightarrow>\n    (True # p, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (drule lem')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>pa.\n       True # p = True # pa \\<longrightarrow>\n       (\\<exists>r.\n           ((pa, r) \\<in> (eps A)\\<^sup>* \\<or>\n            (\\<exists>q.\n                (pa, q) \\<in> (eps A)\\<^sup>* \\<and>\n                fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n           s = True # r) \\<Longrightarrow>\n    \\<exists>r.\n       ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q.\n            (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n       s = True # r\n 2. \\<exists>r.\n       ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q.\n            (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n       s = True # r \\<Longrightarrow>\n    (True # p, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r.\n       ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q.\n            (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n       s = True # r \\<Longrightarrow>\n    (True # p, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "(* Why can't blast do the rest? *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r.\n       ((p, r) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>q.\n            (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n       s = True # r \\<Longrightarrow>\n    (True # p, s) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>(p, r) \\<in> (eps A)\\<^sup>* \\<or>\n                (\\<exists>q.\n                    (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n                    fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*);\n        s = True # r\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>s = True # r; (p, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*\n 2. \\<And>r.\n       \\<lbrakk>s = True # r;\n        \\<exists>q.\n           (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (erule True_True_eps_starI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>s = True # r;\n        \\<exists>q.\n           (p, q) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (rule rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # p, ?y32 r q)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*\n 2. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (?y32 r q, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (erule True_True_eps_starI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # q, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (rule rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # q, ?y36 r q)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*\n 2. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (?y36 r q, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (rule r_into_rtrancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # q, ?y36 r q) \\<in> eps (RegExp2NAe.star A)\n 2. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (?y36 r q, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (erule True_start_eps_starI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r q.\n       \\<lbrakk>s = True # r; (p, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (True # start A, True # r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>*", "apply (erule True_True_eps_starI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** True in step Some **)"], ["", "lemma True_step_star[iff]:\n \"\\<And>A. (True#p,r) \\<in> step (star A) (Some a) =\n     (\\<exists>q. (p,q) \\<in> step A (Some a) \\<and> r=True#q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       ((True # p, r) \\<in> step (RegExp2NAe.star A) (Some a)) =\n       (\\<exists>q. (p, q) \\<in> step A (Some a) \\<and> r = True # q)", "by (simp add:star_def step_def) (blast)"], ["", "(** True in steps **)\n\n(* reverse list induction! Complicates matters for conc? *)"], ["", "lemma True_start_steps_starD[rule_format]:\n \"\\<forall>rr. (True#start A,rr) \\<in> steps (star A) w \\<longrightarrow>\n (\\<exists>us v. w = concat us @ v \\<and>\n             (\\<forall>u\\<in>set us. accepts A u) \\<and>\n             (\\<exists>r. (start A,r) \\<in> steps A v \\<and> rr = True#r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rr.\n       (True # start A, rr)\n       \\<in> NAe.steps (RegExp2NAe.star A) w \\<longrightarrow>\n       (\\<exists>us v.\n           w = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (induct w rule: rev_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>rr.\n       (True # start A, rr)\n       \\<in> NAe.steps (RegExp2NAe.star A) [] \\<longrightarrow>\n       (\\<exists>us v.\n           [] = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))\n 2. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>rr.\n       (\\<exists>r.\n           ((start A, r) \\<in> (eps A)\\<^sup>* \\<or>\n            (\\<exists>q.\n                (start A, q) \\<in> (eps A)\\<^sup>* \\<and>\n                fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n           rr = True # r) \\<longrightarrow>\n       (\\<exists>us.\n           (\\<forall>xs\\<in>set us. xs = []) \\<and>\n           (\\<forall>x\\<in>set us. NAe.accepts A x) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> (eps A)\\<^sup>* \\<and> rr = True # r))\n 2. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rr r.\n       (start A, r) \\<in> (eps A)\\<^sup>* \\<or>\n       (\\<exists>q.\n           (start A, q) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A q \\<and>\n           (start A, r) \\<in> (eps A)\\<^sup>*) \\<Longrightarrow>\n       \\<exists>us.\n          (\\<forall>xs\\<in>set us. xs = []) \\<and>\n          (\\<forall>x\\<in>set us. NAe.accepts A x) \\<and>\n          (\\<exists>ra.\n              (start A, ra) \\<in> (eps A)\\<^sup>* \\<and>\n              True # r = True # ra)\n 2. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rr r.\n       (start A, r) \\<in> (eps A)\\<^sup>* \\<or>\n       (\\<exists>q.\n           (start A, q) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A q \\<and>\n           (start A, r) \\<in> (eps A)\\<^sup>*) \\<Longrightarrow>\n       (\\<forall>xs\\<in>set []. xs = []) \\<and>\n       (\\<forall>x\\<in>set []. NAe.accepts A x) \\<and>\n       (\\<exists>ra.\n           (start A, ra) \\<in> (eps A)\\<^sup>* \\<and> True # r = True # ra)\n 2. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rr r.\n       (start A, r) \\<in> (eps A)\\<^sup>* \\<Longrightarrow>\n       (\\<forall>xs\\<in>set []. xs = []) \\<and>\n       (\\<forall>x\\<in>set []. NAe.accepts A x) \\<and>\n       (\\<exists>ra.\n           (start A, ra) \\<in> (eps A)\\<^sup>* \\<and> True # r = True # ra)\n 2. \\<And>rr r.\n       \\<exists>q.\n          (start A, q) \\<in> (eps A)\\<^sup>* \\<and>\n          fin A q \\<and>\n          (start A, r) \\<in> (eps A)\\<^sup>* \\<Longrightarrow>\n       (\\<forall>xs\\<in>set []. xs = []) \\<and>\n       (\\<forall>x\\<in>set []. NAe.accepts A x) \\<and>\n       (\\<exists>ra.\n           (start A, ra) \\<in> (eps A)\\<^sup>* \\<and> True # r = True # ra)\n 3. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rr r.\n       \\<exists>q.\n          (start A, q) \\<in> (eps A)\\<^sup>* \\<and>\n          fin A q \\<and>\n          (start A, r) \\<in> (eps A)\\<^sup>* \\<Longrightarrow>\n       (\\<forall>xs\\<in>set []. xs = []) \\<and>\n       (\\<forall>x\\<in>set []. NAe.accepts A x) \\<and>\n       (\\<exists>ra.\n           (start A, ra) \\<in> (eps A)\\<^sup>* \\<and> True # r = True # ra)\n 2. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rr r q.\n       \\<lbrakk>(start A, q) \\<in> (eps A)\\<^sup>*; fin A q;\n        (start A, r) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xs\\<in>set []. xs = []) \\<and>\n                         (\\<forall>x\\<in>set []. NAe.accepts A x) \\<and>\n                         (\\<exists>ra.\n                             (start A, ra) \\<in> (eps A)\\<^sup>* \\<and>\n                             True # r = True # ra)\n 2. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) (xs @ [x]) \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (simp add: O_assoc[symmetric] epsclosure_steps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n          (\\<exists>us v.\n              xs = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and>\n                  rr = True # r)) \\<Longrightarrow>\n       \\<forall>rr.\n          (True # start A, rr)\n          \\<in> (NAe.steps (RegExp2NAe.star A) xs O\n                 step (RegExp2NAe.star A) (Some x)) O\n                (eps (RegExp2NAe.star A))\\<^sup>* \\<longrightarrow>\n          (\\<exists>us v.\n              xs @ [x] = concat us @ v \\<and>\n              (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n              (\\<exists>r.\n                  (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za.\n       \\<lbrakk>\\<forall>rr.\n                   (True # start A, rr)\n                   \\<in> NAe.steps (RegExp2NAe.star A) xs \\<longrightarrow>\n                   (\\<exists>us v.\n                       xs = concat us @ v \\<and>\n                       (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n                       (\\<exists>r.\n                           (start A, r) \\<in> NAe.steps A v \\<and>\n                           rr = True # r));\n        (za, z) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (True # start A, ya) \\<in> NAe.steps (RegExp2NAe.star A) xs;\n        (ya, za) \\<in> step (RegExp2NAe.star A) (Some x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us v.\n                            xs @ [x] = concat us @ v \\<and>\n                            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A v \\<and>\n                                z = True # r)", "apply (erule allE, erule impE, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za.\n       \\<lbrakk>(za, z) \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (True # start A, ya) \\<in> NAe.steps (RegExp2NAe.star A) xs;\n        (ya, za) \\<in> step (RegExp2NAe.star A) (Some x);\n        \\<exists>us v.\n           xs = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and>\n               ya = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us v.\n                            xs @ [x] = concat us @ v \\<and>\n                            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A v \\<and>\n                                z = True # r)", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, ra) \\<in> (eps A)\\<^sup>* \\<or>\n        (\\<exists>qa.\n            (q, qa) \\<in> (eps A)\\<^sup>* \\<and>\n            fin A qa \\<and> (start A, ra) \\<in> (eps A)\\<^sup>*)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)\n 2. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        \\<exists>qa.\n           (q, qa) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A qa \\<and> (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (rule_tac x = \"us\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            (concat us @ v) @ [x] = concat us @ va \\<and>\n                            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)\n 2. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        \\<exists>qa.\n           (q, qa) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A qa \\<and> (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (rule_tac x = \"v@[x]\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (concat us @ v) @ [x] = concat us @ v @ [x] \\<and>\n                         (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n                         (\\<exists>r.\n                             (start A, r) \\<in> NAe.steps A (v @ [x]) \\<and>\n                             True # ra = True # r)\n 2. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        \\<exists>qa.\n           (q, qa) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A qa \\<and> (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (simp add: O_assoc[symmetric] epsclosure_steps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x us v yb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        Ball (set us) (NAe.accepts A); (start A, r) \\<in> NAe.steps A v;\n        (r, q) \\<in> step A (Some x); (q, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (start A, ra)\n                         \\<in> (NAe.steps A v O step A (Some x)) O\n                               (eps A)\\<^sup>*\n 2. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        \\<exists>qa.\n           (q, qa) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A qa \\<and> (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        \\<exists>qa.\n           (q, qa) \\<in> (eps A)\\<^sup>* \\<and>\n           fin A qa \\<and> (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra qa.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, qa) \\<in> (eps A)\\<^sup>*; fin A qa;\n        (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa va.\n                            (concat us @ v) @ [x] = concat usa @ va \\<and>\n                            (\\<forall>u\\<in>set usa. NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (rule_tac x = \"us@[v@[x]]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra qa.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, qa) \\<in> (eps A)\\<^sup>*; fin A qa;\n        (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>va.\n                            (concat us @ v) @ [x] =\n                            concat (us @ [v @ [x]]) @ va \\<and>\n                            (\\<forall>u\\<in>set (us @ [v @ [x]]).\n                                NAe.accepts A u) \\<and>\n                            (\\<exists>r.\n                                (start A, r) \\<in> NAe.steps A va \\<and>\n                                True # ra = True # r)", "apply (rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs rr xa y z xb ya za us v xc yb zb r q ra qa.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, qa) \\<in> (eps A)\\<^sup>*; fin A qa;\n        (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (concat us @ v) @ [x] =\n                         concat (us @ [v @ [x]]) @ [] \\<and>\n                         (\\<forall>u\\<in>set (us @ [v @ [x]]).\n                             NAe.accepts A u) \\<and>\n                         (\\<exists>r.\n                             (start A, r) \\<in> NAe.steps A [] \\<and>\n                             True # ra = True # r)", "apply (simp add: accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x us v yb r q ra qa.\n       \\<lbrakk>(True # start A, yb)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (yb, True # r) \\<in> NAe.steps (RegExp2NAe.star A) v;\n        \\<forall>u\\<in>set us.\n           \\<exists>q. (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        (start A, r) \\<in> NAe.steps A v; (r, q) \\<in> step A (Some x);\n        (q, qa) \\<in> (eps A)\\<^sup>*; fin A qa;\n        (start A, ra) \\<in> (eps A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (start A, q)\n                            \\<in> NAe.steps A v O\n                                  (eps A)\\<^sup>* O\n                                  step A (Some x) O (eps A)\\<^sup>* \\<and>\n                            fin A q", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma True_True_steps_starI:\n  \"\\<And>p. (p,q) : steps A w \\<Longrightarrow> (True#p,True#q) : steps (star A) w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (p, q) \\<in> NAe.steps A w \\<Longrightarrow>\n       (True # p, True # q) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (induct \"w\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       (p, q) \\<in> NAe.steps A [] \\<Longrightarrow>\n       (True # p, True # q) \\<in> NAe.steps (RegExp2NAe.star A) []\n 2. \\<And>a w p.\n       \\<lbrakk>\\<And>p.\n                   (p, q) \\<in> NAe.steps A w \\<Longrightarrow>\n                   (True # p, True # q)\n                   \\<in> NAe.steps (RegExp2NAe.star A) w;\n        (p, q) \\<in> NAe.steps A (a # w)\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # q)\n                         \\<in> NAe.steps (RegExp2NAe.star A) (a # w)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p.\n       \\<lbrakk>\\<And>p.\n                   (p, q) \\<in> NAe.steps A w \\<Longrightarrow>\n                   (True # p, True # q)\n                   \\<in> NAe.steps (RegExp2NAe.star A) w;\n        (p, q) \\<in> NAe.steps A (a # w)\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # q)\n                         \\<in> NAe.steps (RegExp2NAe.star A) (a # w)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a w p.\n       \\<lbrakk>\\<And>p.\n                   (p, q) \\<in> NAe.steps A w \\<Longrightarrow>\n                   (True # p, True # q)\n                   \\<in> NAe.steps (RegExp2NAe.star A) w;\n        (p, q)\n        \\<in> (eps A)\\<^sup>* O step A (Some a) O NAe.steps A w\\<rbrakk>\n       \\<Longrightarrow> (True # p, True # q)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>* O\n                               step (RegExp2NAe.star A) (Some a) O\n                               NAe.steps (RegExp2NAe.star A) w", "apply (blast intro: True_True_eps_starI True_True_step_starI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma steps_star_cycle:\n \"(\\<forall>u \\<in> set us. accepts A u) \\<Longrightarrow>\n (True#start A,True#start A) \\<in> steps (star A) (concat us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>set us. NAe.accepts A u \\<Longrightarrow>\n    (True # start A, True # start A)\n    \\<in> NAe.steps (RegExp2NAe.star A) (concat us)", "apply (induct \"us\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. Ball (set []) (NAe.accepts A) \\<Longrightarrow>\n    (True # start A, True # start A)\n    \\<in> NAe.steps (RegExp2NAe.star A) (concat [])\n 2. \\<And>a us.\n       \\<lbrakk>Ball (set us) (NAe.accepts A) \\<Longrightarrow>\n                (True # start A, True # start A)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        Ball (set (a # us)) (NAe.accepts A)\\<rbrakk>\n       \\<Longrightarrow> (True # start A, True # start A)\n                         \\<in> NAe.steps (RegExp2NAe.star A)\n                                (concat (a # us))", "apply (simp add:accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a us.\n       \\<lbrakk>Ball (set us) (NAe.accepts A) \\<Longrightarrow>\n                (True # start A, True # start A)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        Ball (set (a # us)) (NAe.accepts A)\\<rbrakk>\n       \\<Longrightarrow> (True # start A, True # start A)\n                         \\<in> NAe.steps (RegExp2NAe.star A)\n                                (concat (a # us))", "apply (simp add:accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a us.\n       \\<lbrakk>(True # start A, True # start A)\n                \\<in> NAe.steps (RegExp2NAe.star A) (concat us);\n        (\\<exists>q. (start A, q) \\<in> NAe.steps A a \\<and> fin A q) \\<and>\n        (\\<forall>x\\<in>set us.\n            \\<exists>q.\n               (start A, q) \\<in> NAe.steps A x \\<and> fin A q)\\<rbrakk>\n       \\<Longrightarrow> (True # start A, True # start A)\n                         \\<in> NAe.steps (RegExp2NAe.star A) a O\n                               NAe.steps (RegExp2NAe.star A) (concat us)", "by(blast intro: True_True_steps_starI True_start_eps_starI in_epsclosure_steps)"], ["", "(* Better stated directly with start(star A)? Loop in star A back to start(star A)?*)"], ["", "lemma True_start_steps_star:\n \"(True#start A,rr) : steps (star A) w = \n (\\<exists>us v. w = concat us @ v \\<and>\n             (\\<forall>u\\<in>set us. accepts A u) \\<and>\n             (\\<exists>r. (start A,r) \\<in> steps A v \\<and> rr = True#r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((True # start A, rr) \\<in> NAe.steps (RegExp2NAe.star A) w) =\n    (\\<exists>us v.\n        w = concat us @ v \\<and>\n        (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n        (\\<exists>r. (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (True # start A, rr)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    \\<exists>us v.\n       w = concat us @ v \\<and>\n       (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n       (\\<exists>r. (start A, r) \\<in> NAe.steps A v \\<and> rr = True # r)\n 2. \\<exists>us v.\n       w = concat us @ v \\<and>\n       (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n       (\\<exists>r.\n           (start A, r) \\<in> NAe.steps A v \\<and>\n           rr = True # r) \\<Longrightarrow>\n    (True # start A, rr) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (erule True_start_steps_starD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us v.\n       w = concat us @ v \\<and>\n       (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n       (\\<exists>r.\n           (start A, r) \\<in> NAe.steps A v \\<and>\n           rr = True # r) \\<Longrightarrow>\n    (True # start A, rr) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us v r.\n       \\<lbrakk>w = concat us @ v; \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; rr = True # r\\<rbrakk>\n       \\<Longrightarrow> (True # start A, True # r)\n                         \\<in> NAe.steps (RegExp2NAe.star A) (concat us) O\n                               NAe.steps (RegExp2NAe.star A) v", "apply (blast intro: steps_star_cycle True_True_steps_starI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** the start state **)"], ["", "lemma start_step_star[iff]:\n  \"\\<And>A. (start(star A),r) : step (star A) a = (a=None \\<and> r = True#start A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       ((start (RegExp2NAe.star A), r) \\<in> step (RegExp2NAe.star A) a) =\n       (a = None \\<and> r = True # start A)", "by (simp add:star_def step_def)"], ["", "lemmas epsclosure_start_step_star =\n  in_unfold_rtrancl2[where ?p = \"start (star A)\"] for A"], ["", "lemma start_steps_star:\n \"(start(star A),r) : steps (star A) w = \n ((w=[] \\<and> r= start(star A)) | (True#start A,r) : steps (star A) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w) =\n    (w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n     (True # start A, r) \\<in> NAe.steps (RegExp2NAe.star A) w)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (start (RegExp2NAe.star A), r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r) \\<in> NAe.steps (RegExp2NAe.star A) w\n 2. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (case_tac \"w\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(start (RegExp2NAe.star A), r)\n             \\<in> NAe.steps (RegExp2NAe.star A) w;\n     w = []\\<rbrakk>\n    \\<Longrightarrow> w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n                      (True # start A, r)\n                      \\<in> NAe.steps (RegExp2NAe.star A) w\n 2. \\<And>a list.\n       \\<lbrakk>(start (RegExp2NAe.star A), r)\n                \\<in> NAe.steps (RegExp2NAe.star A) w;\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n                         (True # start A, r)\n                         \\<in> NAe.steps (RegExp2NAe.star A) w\n 3. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (simp add: epsclosure_start_step_star)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>(start (RegExp2NAe.star A), r)\n                \\<in> NAe.steps (RegExp2NAe.star A) w;\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n                         (True # start A, r)\n                         \\<in> NAe.steps (RegExp2NAe.star A) w\n 2. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>(start (RegExp2NAe.star A), r)\n                \\<in> (eps (RegExp2NAe.star A))\\<^sup>* O\n                      step (RegExp2NAe.star A) (Some a) O\n                      NAe.steps (RegExp2NAe.star A) list;\n        w = a # list\\<rbrakk>\n       \\<Longrightarrow> (True # start A, r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>* O\n                               step (RegExp2NAe.star A) (Some a) O\n                               NAe.steps (RegExp2NAe.star A) list\n 2. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x y z xa ya za.\n       \\<lbrakk>w = a # list;\n        (start (RegExp2NAe.star A), xa)\n        \\<in> (eps (RegExp2NAe.star A))\\<^sup>*;\n        (xa, ya) \\<in> step (RegExp2NAe.star A) (Some a);\n        (ya, r) \\<in> NAe.steps (RegExp2NAe.star A) list\\<rbrakk>\n       \\<Longrightarrow> (True # start A, r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>* O\n                               step (RegExp2NAe.star A) (Some a) O\n                               NAe.steps (RegExp2NAe.star A) list\n 2. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (simp add: epsclosure_start_step_star)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list xa ya.\n       \\<lbrakk>w = a # list;\n        xa = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>r.\n            ((start A, r) \\<in> (eps A)\\<^sup>* \\<or>\n             (\\<exists>q.\n                 (start A, q) \\<in> (eps A)\\<^sup>* \\<and>\n                 fin A q \\<and> (start A, r) \\<in> (eps A)\\<^sup>*)) \\<and>\n            xa = True # r);\n        (xa, ya) \\<in> step (RegExp2NAe.star A) (Some a);\n        (ya, r) \\<in> NAe.steps (RegExp2NAe.star A) list\\<rbrakk>\n       \\<Longrightarrow> (True # start A, r)\n                         \\<in> (eps (RegExp2NAe.star A))\\<^sup>* O\n                               step (RegExp2NAe.star A) (Some a) O\n                               NAe.steps (RegExp2NAe.star A) list\n 2. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. w = [] \\<and> r = start (RegExp2NAe.star A) \\<or>\n    (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. w = [] \\<and> r = start (RegExp2NAe.star A) \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w\n 2. (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (True # start A, r)\n    \\<in> NAe.steps (RegExp2NAe.star A) w \\<Longrightarrow>\n    (start (RegExp2NAe.star A), r) \\<in> NAe.steps (RegExp2NAe.star A) w", "apply (blast intro: in_steps_epsclosure)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fin_star_True[iff]: \"\\<And>A. fin (star A) (True#p) = fin A p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. fin (RegExp2NAe.star A) (True # p) = fin A p", "by (simp add:star_def)"], ["", "lemma fin_star_start[iff]: \"\\<And>A. fin (star A) (start(star A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. fin (RegExp2NAe.star A) (start (RegExp2NAe.star A))", "by (simp add:star_def)"], ["", "(* too complex! Simpler if loop back to start(star A)? *)"], ["", "lemma accepts_star:\n \"accepts (star A) w = \n (\\<exists>us. (\\<forall>u \\<in> set(us). accepts A u) \\<and> (w = concat us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NAe.accepts (RegExp2NAe.star A) w =\n    (\\<exists>us.\n        (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and> w = concat us)", "apply(unfold accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>q.\n        (start (RegExp2NAe.star A), q)\n        \\<in> NAe.steps (RegExp2NAe.star A) w \\<and>\n        fin (RegExp2NAe.star A) q) =\n    (\\<exists>us.\n        (\\<forall>u\\<in>set us.\n            \\<exists>q.\n               (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n        w = concat us)", "apply (simp add: start_steps_star True_start_steps_star)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>q.\n        (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n         (\\<exists>us v.\n             w = concat us @ v \\<and>\n             (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n             (\\<exists>r.\n                 (start A, r) \\<in> NAe.steps A v \\<and>\n                 q = True # r))) \\<and>\n        fin (RegExp2NAe.star A) q) =\n    (\\<exists>us.\n        (\\<forall>u\\<in>set us.\n            \\<exists>q.\n               (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n        w = concat us)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q \\<Longrightarrow>\n    \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us\n 2. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n                (\\<exists>us v.\n                    w = concat us @ v \\<and>\n                    (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n                    (\\<exists>r.\n                        (start A, r) \\<in> NAe.steps A v \\<and>\n                        q = True # r));\n        fin (RegExp2NAe.star A) q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 2. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) q;\n        w = [] \\<and> q = start (RegExp2NAe.star A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 2. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) q;\n        \\<exists>us v.\n           w = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and>\n               q = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 3. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) (start (RegExp2NAe.star A));\n        w = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            [] = concat us\n 2. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) q;\n        \\<exists>us v.\n           w = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and>\n               q = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 3. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. w = [] \\<Longrightarrow>\n    \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       (\\<forall>xs\\<in>set us. xs = [])\n 2. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) q;\n        \\<exists>us v.\n           w = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and>\n               q = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 3. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. w = [] \\<Longrightarrow>\n    (\\<forall>u\\<in>set [].\n        \\<exists>q. (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n    (\\<forall>xs\\<in>set []. xs = [])\n 2. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) q;\n        \\<exists>us v.\n           w = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and>\n               q = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 3. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>fin (RegExp2NAe.star A) q;\n        \\<exists>us v.\n           w = concat us @ v \\<and>\n           (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n           (\\<exists>r.\n               (start A, r) \\<in> NAe.steps A v \\<and>\n               q = True # r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>us.\n                            (\\<forall>u\\<in>set us.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            w = concat us\n 2. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q us v r.\n       \\<lbrakk>w = concat us @ v; \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; fin A r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>usa.\n                            (\\<forall>u\\<in>set usa.\n                                \\<exists>q.\n                                   (start A, q) \\<in> NAe.steps A u \\<and>\n                                   fin A q) \\<and>\n                            concat us @ v = concat usa\n 2. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (rule_tac x = \"us@[v]\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q us v r.\n       \\<lbrakk>w = concat us @ v; \\<forall>u\\<in>set us. NAe.accepts A u;\n        (start A, r) \\<in> NAe.steps A v; fin A r\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>u\\<in>set (us @ [v]).\n                             \\<exists>q.\n                                (start A, q) \\<in> NAe.steps A u \\<and>\n                                fin A q) \\<and>\n                         concat us @ v = concat (us @ [v])\n 2. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (simp add: accepts_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us v r.\n       \\<lbrakk>w = concat us @ v;\n        \\<forall>u\\<in>set us.\n           \\<exists>q. (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        (start A, r) \\<in> NAe.steps A v; fin A r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (start A, q) \\<in> NAe.steps A v \\<and> fin A q\n 2. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>us.\n       (\\<forall>u\\<in>set us.\n           \\<exists>q.\n              (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n       w = concat us \\<Longrightarrow>\n    \\<exists>q.\n       (w = [] \\<and> q = start (RegExp2NAe.star A) \\<or>\n        (\\<exists>us v.\n            w = concat us @ v \\<and>\n            (\\<forall>u\\<in>set us. NAe.accepts A u) \\<and>\n            (\\<exists>r.\n                (start A, r) \\<in> NAe.steps A v \\<and>\n                q = True # r))) \\<and>\n       fin (RegExp2NAe.star A) q", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>u\\<in>set us.\n                   \\<exists>q.\n                      (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        w = concat us\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (concat us = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>usa v.\n                                 concat us = concat usa @ v \\<and>\n                                 (\\<forall>u\\<in>set usa.\n                                     NAe.accepts A u) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q", "apply (rule_tac xs = \"us\" in rev_exhaust)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>\\<forall>u\\<in>set us.\n                   \\<exists>q.\n                      (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        w = concat us; us = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (concat us = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>usa v.\n                                 concat us = concat usa @ v \\<and>\n                                 (\\<forall>u\\<in>set usa.\n                                     NAe.accepts A u) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q\n 2. \\<And>us ys y.\n       \\<lbrakk>\\<forall>u\\<in>set us.\n                   \\<exists>q.\n                      (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        w = concat us; us = ys @ [y]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (concat us = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>usa v.\n                                 concat us = concat usa @ v \\<and>\n                                 (\\<forall>u\\<in>set usa.\n                                     NAe.accepts A u) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us.\n       \\<lbrakk>w = []; us = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>us.\n                                 (\\<forall>xs\\<in>set us. xs = []) \\<and>\n                                 (\\<forall>x\\<in>set us.\n                                     NAe.accepts A x) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r)\n                                     \\<in> (eps A)\\<^sup>* \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q\n 2. \\<And>us ys y.\n       \\<lbrakk>\\<forall>u\\<in>set us.\n                   \\<exists>q.\n                      (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        w = concat us; us = ys @ [y]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (concat us = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>usa v.\n                                 concat us = concat usa @ v \\<and>\n                                 (\\<forall>u\\<in>set usa.\n                                     NAe.accepts A u) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q", "apply (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us ys y.\n       \\<lbrakk>\\<forall>u\\<in>set us.\n                   \\<exists>q.\n                      (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        w = concat us; us = ys @ [y]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (concat us = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>usa v.\n                                 concat us = concat usa @ v \\<and>\n                                 (\\<forall>u\\<in>set usa.\n                                     NAe.accepts A u) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us ys y.\n       \\<lbrakk>\\<forall>u\\<in>set (ys @ [y]).\n                   \\<exists>q.\n                      (start A, q) \\<in> NAe.steps A u \\<and> fin A q;\n        w = concat (ys @ [y])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            (concat (ys @ [y]) = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>us v.\n                                 concat (ys @ [y]) = concat us @ v \\<and>\n                                 (\\<forall>u\\<in>set us.\n                                     NAe.accepts A u) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q", "apply (simp add: accepts_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys y.\n       \\<lbrakk>(\\<exists>q.\n                    (start A, q) \\<in> NAe.steps A y \\<and> fin A q) \\<and>\n                (\\<forall>u\\<in>set ys.\n                    \\<exists>q.\n                       (start A, q) \\<in> NAe.steps A u \\<and> fin A q);\n        w = concat ys @ y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q.\n                            ((\\<forall>xs\\<in>set ys. xs = []) \\<and>\n                             y = [] \\<and>\n                             q = start (RegExp2NAe.star A) \\<or>\n                             (\\<exists>us v.\n                                 concat ys @ y = concat us @ v \\<and>\n                                 (\\<forall>u\\<in>set us.\n                                     \\<exists>q.\n  (start A, q) \\<in> NAe.steps A u \\<and> fin A q) \\<and>\n                                 (\\<exists>r.\n                                     (start A, r) \\<in> NAe.steps A v \\<and>\n                                     q = True # r))) \\<and>\n                            fin (RegExp2NAe.star A) q", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(***** Correctness of r2n *****)"], ["", "lemma accepts_rexp2nae:\n \"\\<And>w. accepts (rexp2nae r) w = (w : lang r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w. NAe.accepts (rexp2nae r) w = (w \\<in> lang r)", "apply (induct \"r\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>w. NAe.accepts (rexp2nae Zero) w = (w \\<in> lang Zero)\n 2. \\<And>w. NAe.accepts (rexp2nae One) w = (w \\<in> lang One)\n 3. \\<And>x w. NAe.accepts (rexp2nae (Atom x)) w = (w \\<in> lang (Atom x))\n 4. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Plus r1 r2)) w =\n                         (w \\<in> lang (Plus r1 r2))\n 5. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Times r1 r2)) w =\n                         (w \\<in> lang (Times r1 r2))\n 6. \\<And>r w.\n       (\\<And>w.\n           NAe.accepts (rexp2nae r) w = (w \\<in> lang r)) \\<Longrightarrow>\n       NAe.accepts (rexp2nae (Star r)) w = (w \\<in> lang (Star r))", "apply (simp add: accepts_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>w. NAe.accepts (rexp2nae One) w = (w \\<in> lang One)\n 2. \\<And>x w. NAe.accepts (rexp2nae (Atom x)) w = (w \\<in> lang (Atom x))\n 3. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Plus r1 r2)) w =\n                         (w \\<in> lang (Plus r1 r2))\n 4. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Times r1 r2)) w =\n                         (w \\<in> lang (Times r1 r2))\n 5. \\<And>r w.\n       (\\<And>w.\n           NAe.accepts (rexp2nae r) w = (w \\<in> lang r)) \\<Longrightarrow>\n       NAe.accepts (rexp2nae (Star r)) w = (w \\<in> lang (Star r))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x w. NAe.accepts (rexp2nae (Atom x)) w = (w \\<in> lang (Atom x))\n 2. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Plus r1 r2)) w =\n                         (w \\<in> lang (Plus r1 r2))\n 3. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Times r1 r2)) w =\n                         (w \\<in> lang (Times r1 r2))\n 4. \\<And>r w.\n       (\\<And>w.\n           NAe.accepts (rexp2nae r) w = (w \\<in> lang r)) \\<Longrightarrow>\n       NAe.accepts (rexp2nae (Star r)) w = (w \\<in> lang (Star r))", "apply (simp add: accepts_atom)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Plus r1 r2)) w =\n                         (w \\<in> lang (Plus r1 r2))\n 2. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Times r1 r2)) w =\n                         (w \\<in> lang (Times r1 r2))\n 3. \\<And>r w.\n       (\\<And>w.\n           NAe.accepts (rexp2nae r) w = (w \\<in> lang r)) \\<Longrightarrow>\n       NAe.accepts (rexp2nae (Star r)) w = (w \\<in> lang (Star r))", "apply (simp add: accepts_or)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r1 r2 w.\n       \\<lbrakk>\\<And>w. NAe.accepts (rexp2nae r1) w = (w \\<in> lang r1);\n        \\<And>w. NAe.accepts (rexp2nae r2) w = (w \\<in> lang r2)\\<rbrakk>\n       \\<Longrightarrow> NAe.accepts (rexp2nae (Times r1 r2)) w =\n                         (w \\<in> lang (Times r1 r2))\n 2. \\<And>r w.\n       (\\<And>w.\n           NAe.accepts (rexp2nae r) w = (w \\<in> lang r)) \\<Longrightarrow>\n       NAe.accepts (rexp2nae (Star r)) w = (w \\<in> lang (Star r))", "apply (simp add: accepts_conc Regular_Set.conc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r w.\n       (\\<And>w.\n           NAe.accepts (rexp2nae r) w = (w \\<in> lang r)) \\<Longrightarrow>\n       NAe.accepts (rexp2nae (Star r)) w = (w \\<in> lang (Star r))", "apply (simp add: accepts_star in_star_iff_concat subset_iff Ball_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}