{"file_name": "/home/qj213/afp-2021-10-22/thys/Pratt_Certificate/Pratt_Certificate.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Pratt_Certificate", "problem_names": ["lemma prime_factors_one [simp]: shows \"prime_factors (Suc 0) = {}\"", "lemma prime_factors_of_prime: fixes p :: nat assumes \"prime p\" shows \"prime_factors p = {p}\"", "lemma pratt_triple_1: \"p > 1 \\<Longrightarrow> x = 1 \\<Longrightarrow> pratt_triple p a x\"", "lemma pratt_triple_extend:\n  assumes \"prime q\" \"pratt_triple p a y\"\n          \"p > 1\" \"x > 0\" \"x = q * y\" \"[a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\"\n  shows   \"pratt_triple p a x\"", "lemma pratt_triple_imp_prime:\n  assumes \"pratt_triple p a x\" \"p > 1\" \"x = p - 1\" \"[a ^ (p - 1) = 1] (mod p)\"\n  shows   \"prime p\"", "theorem pratt_sound:\n  assumes 1: \"valid_cert c\"\n  assumes 2: \"t \\<in> set c\"\n  shows \"(t = Prime p \\<longrightarrow> prime p) \\<and>\n         (t = Triple p a x \\<longrightarrow> ((\\<forall>q \\<in> prime_factors x . [a^((p - 1) div q) \\<noteq> 1] (mod p)) \\<and> 0<x))\"", "lemma valid_cert_appendI:\n  assumes \"valid_cert r\"\n  assumes \"valid_cert s\"\n  shows \"valid_cert (r @ s)\"", "lemma valid_cert_concatI: \"(\\<forall>x \\<in> set xs . valid_cert x) \\<Longrightarrow> valid_cert (concat xs)\"", "lemma size_pratt_le:\n fixes d::real\n assumes \"\\<forall> x \\<in> set c. size_pratt x \\<le> d\"\n shows \"size_cert c \\<le> length c * (1 + d)\"", "lemma correct_fpc:\n  assumes \"valid_cert xs\" \"p > 1\"\n  assumes \"prod_list qs = r\" \"r \\<noteq> 0\"\n  assumes \"\\<forall> q \\<in> set qs . Prime q \\<in> set xs\"\n  assumes \"\\<forall> q \\<in> set qs . [a^((p - 1) div q) \\<noteq> 1] (mod p)\"\n  shows \"valid_cert (build_fpc p a r qs @ xs)\"", "lemma length_fpc:\n  \"length (build_fpc p a r qs) = length qs + 1\"", "lemma div_gt_0:\n  fixes m n :: nat assumes \"m \\<le> n\" \"0 < m\" shows \"0 < n div m\"", "lemma size_pratt_fpc:\n  assumes \"a \\<le> p\" \"r \\<le> p\" \"0 < a\" \"0 < r\" \"0 < p\" \"prod_list qs = r\"\n  shows \"\\<forall>x \\<in> set (build_fpc p a r qs) . size_pratt x \\<le> 3 * log 2 p\"", "lemma concat_set:\n  assumes \"\\<forall> q \\<in> qs . \\<exists> c \\<in> set cs . Prime q \\<in> set c\"\n  shows \"\\<forall> q \\<in> qs . Prime q \\<in> set (concat cs)\"", "lemma p_in_prime_factorsE:\n  fixes n :: nat\n  assumes \"p \\<in> prime_factors n\" \"0 < n\"\n  obtains \"2 \\<le> p\" \"p \\<le> n\" \"p dvd n\" \"prime p\"", "lemma prime_factors_list_prime:\n  fixes n :: nat\n  assumes \"prime n\"\n  shows \"\\<exists> qs. prime_factors n = set qs \\<and> prod_list qs = n \\<and> length qs = 1\"", "lemma prime_factors_list:\n  fixes n :: nat assumes \"3 < n\" \"\\<not> prime n\"\n  shows \"\\<exists> qs. prime_factors n = set qs \\<and> prod_list qs = n \\<and> length qs \\<ge> 2\"", "lemma prod_list_ge:\n  fixes xs::\"nat list\"\n  assumes \"\\<forall> x \\<in> set xs . x \\<ge> 1\"\n  shows \"prod_list xs \\<ge> 1\"", "lemma sum_list_log:\n  fixes b::real\n  fixes xs::\"nat list\"\n  assumes b: \"b > 0\" \"b \\<noteq> 1\"\n  assumes xs:\"\\<forall> x \\<in> set xs . x \\<ge> b\"\n  shows \"(\\<Sum>x\\<leftarrow>xs. log b x) = log b (prod_list xs)\"", "lemma concat_length_le:\n  fixes g :: \"nat \\<Rightarrow> real\"\n  assumes \"\\<forall> x \\<in> set xs . real (length (f x)) \\<le> g x\"\n  shows \"length (concat (map f xs)) \\<le> (\\<Sum>x\\<leftarrow>xs. g x)\"", "lemma prime_gt_3_impl_p_minus_one_not_prime:\n  fixes p::nat\n  assumes \"prime p\" \"p>3\"\n  shows \"\\<not> prime (p - 1)\"", "theorem pratt_complete':\n  assumes \"prime p\"\n  shows \"\\<exists>c. Prime p \\<in> set c \\<and> valid_cert c \\<and> length c \\<le> 6*log 2 p - 4 \\<and> (\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 p)\"", "lemma efficient_power_code:\n  \"efficient_power y x n =\n     (if n = 0 then y\n      else if n = 1 then f x y\n      else if even n then efficient_power y (f x x) (n div 2)\n      else efficient_power (f x y) (f x x) (n div 2))\"", "lemma efficient_power_correct: \"efficient_power y x n = (f x ^^ n) y\"", "lemma mod_exp_nat_aux_code [code]:\n  \"mod_exp_nat_aux m y x n =\n     (if n = 0 then y\n      else if n = 1 then (x * y) mod m\n      else if even n then mod_exp_nat_aux m y ((x * x) mod m) (n div 2)\n      else mod_exp_nat_aux m ((x * y) mod m) ((x * x) mod m) (n div 2))\"", "lemma mod_exp_nat_aux_correct:\n  \"mod_exp_nat_aux m y x n mod m = (x ^ n * y) mod m\"", "lemma mod_exp_nat_code [code]: \"mod_exp_nat b e m = mod_exp_nat_aux m 1 b e mod m\"", "lemmas [code_unfold] = cong_def", "lemma eval_mod_exp_nat_aux [simp]:\n  \"mod_exp_nat_aux m y x 0 = y\"\n  \"mod_exp_nat_aux m y x (Suc 0) = (x * y) mod m\"\n  \"mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n     mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\"\n  \"mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n     mod_exp_nat_aux m ((x * y) mod m) (x\\<^sup>2 mod m) (numeral n)\"", "lemma eval_mod_exp [simp]:\n  \"mod_exp_nat b' 0 m' = 1 mod m'\"\n  \"mod_exp_nat b' 1 m' = b' mod m'\"\n  \"mod_exp_nat b' (Suc 0) m' = b' mod m'\"\n  \"mod_exp_nat b' e' 0 = b' ^ e'\"  \n  \"mod_exp_nat b' e' 1 = 0\"\n  \"mod_exp_nat b' e' (Suc 0) = 0\"\n  \"mod_exp_nat 0 1 m' = 0\"\n  \"mod_exp_nat 0 (Suc 0) m' = 0\"\n  \"mod_exp_nat 0 (numeral e) m' = 0\"\n  \"mod_exp_nat 1 e' m' = 1 mod m'\"\n  \"mod_exp_nat (Suc 0) e' m' = 1 mod m'\"\n  \"mod_exp_nat (numeral b) (numeral e) (numeral m) =\n     mod_exp_nat_aux (numeral m) 1 (numeral b) (numeral e) mod numeral m\"", "lemmas [code] = valid_cert.simps(1)", "lemma valid_cert_Cons1 [code]:\n  \"valid_cert (Prime p # xs) \\<longleftrightarrow>\n     p > 1 \\<and> (\\<exists>t\\<in>set xs. case t of Prime _ \\<Rightarrow> False | \n     Triple p' a x \\<Rightarrow> p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p-1) p = 1 ) \\<and> valid_cert xs\"\n  (is \"?lhs = ?rhs\")", "lemma Suc_0_mod_eq_Suc_0_iff:\n  \"Suc 0 mod n = Suc 0 \\<longleftrightarrow> n \\<noteq> Suc 0\"", "lemma Suc_0_eq_Suc_0_mod_iff:\n  \"Suc 0 = Suc 0 mod n \\<longleftrightarrow> n \\<noteq> Suc 0\"", "lemma valid_cert_Cons2 [code]:\n  \"valid_cert (Triple p a x # xs) \\<longleftrightarrow> x > 0 \\<and> p > 1 \\<and> (x = 1 \\<or> (\n     (\\<exists>t\\<in>set xs. case t of Prime _ \\<Rightarrow> False |\n        Triple p' a' y \\<Rightarrow> p' = p \\<and> a' = a \\<and> y dvd x \\<and> \n        (let q = x div y in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p-1) div q) p \\<noteq> 1)))) \\<and> valid_cert xs\"\n  (is \"?lhs = ?rhs\")", "lemmas eval_valid_cert = valid_cert.simps(1) valid_cert_Cons1 valid_cert_Cons2", "lemma check_prime_factors_subset_0 [simp]: \"\\<not>check_prime_factors_subset 0 ps\"", "lemmas [simp del] = check_prime_factors_subset.simps(2)", "lemma check_prime_factors_subset_Cons [simp]:\n  \"check_prime_factors_subset (Suc 0) (p # ps) \\<longleftrightarrow> check_prime_factors_subset (Suc 0) ps\"\n  \"check_prime_factors_subset 1 (p # ps) \\<longleftrightarrow> check_prime_factors_subset 1 ps\"\n  \"p > 1 \\<Longrightarrow> p dvd numeral n \\<Longrightarrow> check_prime_factors_subset (numeral n) (p # ps) \\<longleftrightarrow>\n                           check_prime_factors_subset (numeral n div p) (p # ps)\"\n  \"p \\<le> 1 \\<or> \\<not>p dvd numeral n \\<Longrightarrow> check_prime_factors_subset (numeral n) (p # ps) \\<longleftrightarrow>\n                           check_prime_factors_subset (numeral n) ps\"", "lemma check_prime_factors_subset_correct:\n  assumes \"check_prime_factors_subset n ps\" \"list_all prime ps\"\n  shows   \"prime_factors n \\<subseteq> set ps\"", "lemma valid_pratt_tree_code [code]:\n  \"valid_pratt_tree (Pratt_Node (n, a, ts)) \\<longleftrightarrow>\n     n \\<ge> 2 \\<and>\n     check_prime_factors_subset (n - 1) (map pratt_tree_number ts) \\<and>\n     mod_exp_nat a (n - 1) n = 1 \\<and>\n     (\\<forall>t\\<in>set ts. mod_exp_nat a ((n - 1) div pratt_tree_number t) n \\<noteq> 1) \\<and>\n     (\\<forall>t\\<in>set ts. valid_pratt_tree t)\"", "lemma valid_pratt_tree_imp_prime:\n  assumes \"valid_pratt_tree t\"\n  shows   \"prime (pratt_tree_number t)\"", "lemma valid_pratt_tree_imp_prime':\n  assumes \"PROP (Trueprop (valid_pratt_tree (Pratt_Node (n, a, ts)))) \\<equiv> PROP (Trueprop True)\"\n  shows   \"prime n\"", "theorem lehmers_theorem':\n  fixes p :: nat\n  assumes \"list_all prime ps\" \"a \\<equiv> a\" \"n \\<equiv> n\"\n  assumes \"list_all (\\<lambda>p. mod_exp_nat a ((n - 1) div p) n \\<noteq> 1) ps\" \"mod_exp_nat a (n - 1) n = 1\"\n  assumes \"check_prime_factors_subset (n - 1) ps\" \"2 \\<le> n\"\n  shows \"prime n\"", "lemma list_all_ConsI: \"P x \\<Longrightarrow> list_all P xs \\<Longrightarrow> list_all P (x # xs)\"", "lemma \"prime (47 :: nat)\"", "lemma \"prime (2503 :: nat)\"", "lemma \"prime (7919 :: nat)\"", "lemma \"prime (131059 :: nat)\""], "translations": [["", "lemma prime_factors_one [simp]: shows \"prime_factors (Suc 0) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (Suc 0) = {}", "using prime_factorization_1 [where ?'a = nat]"], ["proof (prove)\nusing this:\n  prime_factorization 1 = {#}\n\ngoal (1 subgoal):\n 1. prime_factors (Suc 0) = {}", "by simp"], ["", "lemma prime_factors_of_prime: fixes p :: nat assumes \"prime p\" shows \"prime_factors p = {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors p = {p}", "using assms"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. prime_factors p = {p}", "by (fact prime_prime_factors)"], ["", "definition pratt_triple :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"pratt_triple p a x \\<longleftrightarrow> x > 0 \\<and> (\\<forall>q\\<in>prime_factors x. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p))\""], ["", "lemma pratt_triple_1: \"p > 1 \\<Longrightarrow> x = 1 \\<Longrightarrow> pratt_triple p a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < p; x = 1\\<rbrakk> \\<Longrightarrow> pratt_triple p a x", "by (auto simp: pratt_triple_def)"], ["", "lemma pratt_triple_extend:\n  assumes \"prime q\" \"pratt_triple p a y\"\n          \"p > 1\" \"x > 0\" \"x = q * y\" \"[a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\"\n  shows   \"pratt_triple p a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pratt_triple p a x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pratt_triple p a x", "have \"prime_factors x = insert q (prime_factors y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors x = insert q (prime_factors y)", "using assms"], ["proof (prove)\nusing this:\n  prime q\n  pratt_triple p a y\n  1 < p\n  0 < x\n  x = q * y\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. prime_factors x = insert q (prime_factors y)", "by (simp add: prime_factors_product prime_prime_factors)"], ["proof (state)\nthis:\n  prime_factors x = insert q (prime_factors y)\n\ngoal (1 subgoal):\n 1. pratt_triple p a x", "also"], ["proof (state)\nthis:\n  prime_factors x = insert q (prime_factors y)\n\ngoal (1 subgoal):\n 1. pratt_triple p a x", "have \"\\<forall>r\\<in>\\<dots>. [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>insert q (prime_factors y).\n       [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)", "using assms"], ["proof (prove)\nusing this:\n  prime q\n  pratt_triple p a y\n  1 < p\n  0 < x\n  x = q * y\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>insert q (prime_factors y).\n       [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)", "by (auto simp: pratt_triple_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>insert q (prime_factors y).\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. pratt_triple p a x", "finally"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>#prime_factorization x.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>#prime_factorization x.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. pratt_triple p a x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>#prime_factorization x.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  pratt_triple p a y\n  1 < p\n  0 < x\n  x = q * y\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. pratt_triple p a x", "unfolding pratt_triple_def"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>#prime_factorization x.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  0 < y \\<and>\n  (\\<forall>q\\<in>#prime_factorization y.\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p))\n  1 < p\n  0 < x\n  x = q * y\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    (\\<forall>q\\<in>#prime_factorization x.\n        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p))", "by blast"], ["proof (state)\nthis:\n  pratt_triple p a x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pratt_triple_imp_prime:\n  assumes \"pratt_triple p a x\" \"p > 1\" \"x = p - 1\" \"[a ^ (p - 1) = 1] (mod p)\"\n  shows   \"prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p", "using lehmers_theorem[of p a] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> p;\n   \\<And>x.\n      x \\<in># prime_factorization (p - 1) \\<Longrightarrow>\n      [a ^ ((p - 1) div x) \\<noteq> 1] (mod p);\n   [a ^ (p - 1) = 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> prime p\n  pratt_triple p a x\n  1 < p\n  x = p - 1\n  [a ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. prime p", "by (auto simp: pratt_triple_def)"], ["", "theorem pratt_sound:\n  assumes 1: \"valid_cert c\"\n  assumes 2: \"t \\<in> set c\"\n  shows \"(t = Prime p \\<longrightarrow> prime p) \\<and>\n         (t = Triple p a x \\<longrightarrow> ((\\<forall>q \\<in> prime_factors x . [a^((p - 1) div q) \\<noteq> 1] (mod p)) \\<and> 0<x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "using assms"], ["proof (prove)\nusing this:\n  valid_cert c\n  t \\<in> set c\n\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "proof (induction c arbitrary: p a x t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p a x t.\n       \\<lbrakk>valid_cert []; t \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p a x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [a ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)\n 2. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "case Nil"], ["proof (state)\nthis:\n  valid_cert []\n  t \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<And>p a x t.\n       \\<lbrakk>valid_cert []; t \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p a x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [a ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)\n 2. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  valid_cert []\n  t \\<in> set []", "show ?case"], ["proof (prove)\nusing this:\n  valid_cert []\n  t \\<in> set []\n\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "by force"], ["proof (state)\nthis:\n  (t = Prime p \\<longrightarrow> prime p) \\<and>\n  (t = Triple p a x \\<longrightarrow>\n   (\\<forall>q\\<in>#prime_factorization x.\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n   0 < x)\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>valid_cert ys; ?t \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> (?t = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n                    (?t = Triple ?p ?a ?x \\<longrightarrow>\n                     (\\<forall>q\\<in>#prime_factorization ?x.\n                         [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n                     0 < ?x)\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>valid_cert ys; ?t \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> (?t = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n                    (?t = Triple ?p ?a ?x \\<longrightarrow>\n                     (\\<forall>q\\<in>#prime_factorization ?x.\n                         [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n                     0 < ?x)\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "assume \"y=Triple p a x\" \"x=1\""], ["proof (state)\nthis:\n  y = Triple p a x\n  x = 1\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  y = Triple p a x\n  x = 1", "have \"(\\<forall> q \\<in> prime_factors x . [a^((p - 1) div q) \\<noteq> 1] (mod p)) \\<and> 0<x\""], ["proof (prove)\nusing this:\n  y = Triple p a x\n  x = 1\n\ngoal (1 subgoal):\n 1. (\\<forall>q\\<in>#prime_factorization x.\n        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n    0 < x", "by simp"], ["proof (state)\nthis:\n  (\\<forall>q\\<in>#prime_factorization x.\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y = Triple p a x; x = 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>y = Triple p a x; x = 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>y = Triple p a x; x = 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "assume x_y: \"y=Triple p a x\" \"x~=1\""], ["proof (state)\nthis:\n  y = Triple p a x\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "hence \"x>0\""], ["proof (prove)\nusing this:\n  y = Triple p a x\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 0 < x", "using Cons.prems"], ["proof (prove)\nusing this:\n  y = Triple p a x\n  x \\<noteq> 1\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. 0 < x", "by auto"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "obtain q z where \"x=q*z\" \"Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys\"\n               and cong:\"[a^((p - 1) div q) \\<noteq> 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q z.\n        \\<lbrakk>x = q * z;\n         Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys;\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.prems x_y"], ["proof (prove)\nusing this:\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n  y = Triple p a x\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>q z.\n        \\<lbrakk>x = q * z;\n         Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys;\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = q * z\n  Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  x = q * z\n  Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "have factors_IH:\"(\\<forall> r \\<in> prime_factors z . [a^((p - 1) div r) \\<noteq> 1] (mod p))\" \"prime q\" \"z>0\""], ["proof (prove)\nusing this:\n  x = q * z\n  Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>#prime_factorization z.\n       [a ^ ((p - 1) div r) \\<noteq> 1] (mod p) &&&\n    prime q &&& 0 < z", "using Cons.IH Cons.prems \\<open>x>0\\<close> \\<open>y=Triple p a x\\<close>"], ["proof (prove)\nusing this:\n  x = q * z\n  Prime q \\<in> set ys \\<and> Triple p a z \\<in> set ys\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n  \\<lbrakk>valid_cert ys; ?t \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> (?t = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n                    (?t = Triple ?p ?a ?x \\<longrightarrow>\n                     (\\<forall>q\\<in>#prime_factorization ?x.\n                         [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n                     0 < ?x)\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n  0 < x\n  y = Triple p a x\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>#prime_factorization z.\n       [a ^ ((p - 1) div r) \\<noteq> 1] (mod p) &&&\n    prime q &&& 0 < z", "by force+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>#prime_factorization z.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  0 < z\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>#prime_factorization z.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  0 < z", "have \"prime_factors x = prime_factors z \\<union> {q}\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>#prime_factorization z.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  0 < z\n\ngoal (1 subgoal):\n 1. prime_factors x = prime_factors z \\<union> {q}", "using \\<open>x =q*z\\<close> \\<open>x>0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>#prime_factorization z.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  0 < z\n  x = q * z\n  0 < x\n\ngoal (1 subgoal):\n 1. prime_factors x = prime_factors z \\<union> {q}", "by (simp add: prime_factors_product prime_factors_of_prime)"], ["proof (state)\nthis:\n  prime_factors x = prime_factors z \\<union> {q}\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  prime_factors x = prime_factors z \\<union> {q}", "have \"(\\<forall> q \\<in> prime_factors x . [a^((p - 1) div q) \\<noteq> 1] (mod p)) \\<and> 0 < x\""], ["proof (prove)\nusing this:\n  prime_factors x = prime_factors z \\<union> {q}\n\ngoal (1 subgoal):\n 1. (\\<forall>q\\<in>#prime_factorization x.\n        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n    0 < x", "using factors_IH cong"], ["proof (prove)\nusing this:\n  prime_factors x = prime_factors z \\<union> {q}\n  \\<forall>r\\<in>#prime_factorization z.\n     [a ^ ((p - 1) div r) \\<noteq> 1] (mod p)\n  prime q\n  0 < z\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. (\\<forall>q\\<in>#prime_factorization x.\n        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n    0 < x", "by (simp add: \\<open>x>0\\<close>)"], ["proof (state)\nthis:\n  (\\<forall>q\\<in>#prime_factorization x.\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y = Triple p a x; x \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>y = Triple p a x; x = 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n  \\<lbrakk>y = Triple p a x; x \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x", "have y_Triple:\"y=Triple p a x \\<Longrightarrow> (\\<forall> q \\<in> prime_factors x .\n                                                [a^((p - 1) div q) \\<noteq> 1] (mod p)) \\<and> 0<x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>y = Triple p a x; x = 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n  \\<lbrakk>y = Triple p a x; x \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>q\\<in>#prime_factorization x.\n                        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                    0 < x\n\ngoal (1 subgoal):\n 1. y = Triple p a x \\<Longrightarrow>\n    (\\<forall>q\\<in>#prime_factorization x.\n        [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n    0 < x", "by linarith"], ["proof (state)\nthis:\n  y = Triple p a x \\<Longrightarrow>\n  (\\<forall>q\\<in>#prime_factorization x.\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "{"], ["proof (state)\nthis:\n  y = Triple p a x \\<Longrightarrow>\n  (\\<forall>q\\<in>#prime_factorization x.\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n  0 < x\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "assume y: \"y=Prime p\" \"p>2\""], ["proof (state)\nthis:\n  y = Prime p\n  2 < p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  y = Prime p\n  2 < p", "obtain a where a:\"[a^(p - 1) = 1] (mod p)\" \"Triple p a (p - 1) \\<in> set ys\""], ["proof (prove)\nusing this:\n  y = Prime p\n  2 < p\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>[a ^ (p - 1) = 1] (mod p);\n         Triple p a (p - 1) \\<in> set ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.prems"], ["proof (prove)\nusing this:\n  y = Prime p\n  2 < p\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>[a ^ (p - 1) = 1] (mod p);\n         Triple p a (p - 1) \\<in> set ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  [a ^ (p - 1) = 1] (mod p)\n  Triple p a (p - 1) \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  [a ^ (p - 1) = 1] (mod p)\n  Triple p a (p - 1) \\<in> set ys", "have Bier:\"(\\<forall>q\\<in>prime_factors (p - 1). [a^((p - 1) div q) \\<noteq> 1] (mod p))\""], ["proof (prove)\nusing this:\n  [a ^ (p - 1) = 1] (mod p)\n  Triple p a (p - 1) \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1).\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "using Cons.IH Cons.prems(1)"], ["proof (prove)\nusing this:\n  [a ^ (p - 1) = 1] (mod p)\n  Triple p a (p - 1) \\<in> set ys\n  \\<lbrakk>valid_cert ys; ?t \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> (?t = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n                    (?t = Triple ?p ?a ?x \\<longrightarrow>\n                     (\\<forall>q\\<in>#prime_factorization ?x.\n                         [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n                     0 < ?x)\n  valid_cert (y # ys)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1).\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "by (simp add:y(1))"], ["proof (state)\nthis:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "have \"prime p\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. prime p", "using lehmers_theorem[OF _ _a(1)] \\<open>p>2\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n  \\<lbrakk>2 \\<le> p;\n   \\<And>x.\n      x \\<in># prime_factorization (p - 1) \\<Longrightarrow>\n      [a ^ ((p - 1) div x) \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> prime p\n  2 < p\n\ngoal (1 subgoal):\n 1. prime p", "by fastforce"], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y = Prime p; 2 < p\\<rbrakk> \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>y = Prime p; 2 < p\\<rbrakk> \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>y = Prime p; 2 < p\\<rbrakk> \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "assume \"y=Prime p\" \"p=2\""], ["proof (state)\nthis:\n  y = Prime p\n  p = 2\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "hence \"prime p\""], ["proof (prove)\nusing this:\n  y = Prime p\n  p = 2\n\ngoal (1 subgoal):\n 1. prime p", "by simp"], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y = Prime p; p = 2\\<rbrakk> \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>y = Prime p; p = 2\\<rbrakk> \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>y = Prime p; p = 2\\<rbrakk> \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "assume \"y=Prime p\""], ["proof (state)\nthis:\n  y = Prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "then"], ["proof (chain)\npicking this:\n  y = Prime p", "have \"p>1\""], ["proof (prove)\nusing this:\n  y = Prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "using Cons.prems"], ["proof (prove)\nusing this:\n  y = Prime p\n  valid_cert (y # ys)\n  t \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. 1 < p", "by simp"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "}"], ["proof (state)\nthis:\n  y = Prime p \\<Longrightarrow> 1 < p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>y = Prime p; 2 < p\\<rbrakk> \\<Longrightarrow> prime p\n  \\<lbrakk>y = Prime p; p = 2\\<rbrakk> \\<Longrightarrow> prime p\n  y = Prime p \\<Longrightarrow> 1 < p", "have y_Prime:\"y = Prime p \\<Longrightarrow> prime p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>y = Prime p; 2 < p\\<rbrakk> \\<Longrightarrow> prime p\n  \\<lbrakk>y = Prime p; p = 2\\<rbrakk> \\<Longrightarrow> prime p\n  y = Prime p \\<Longrightarrow> 1 < p\n\ngoal (1 subgoal):\n 1. y = Prime p \\<Longrightarrow> prime p", "by linarith"], ["proof (state)\nthis:\n  y = Prime p \\<Longrightarrow> prime p\n\ngoal (1 subgoal):\n 1. \\<And>a c p aa x t.\n       \\<lbrakk>\\<And>p a x t.\n                   \\<lbrakk>valid_cert c; t \\<in> set c\\<rbrakk>\n                   \\<Longrightarrow> (t = Prime p \\<longrightarrow>\nprime p) \\<and>\n                                     (t = Triple p a x \\<longrightarrow>\n(\\<forall>q\\<in>#prime_factorization x.\n    [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n0 < x);\n        valid_cert (a # c); t \\<in> set (a # c)\\<rbrakk>\n       \\<Longrightarrow> (t = Prime p \\<longrightarrow> prime p) \\<and>\n                         (t = Triple p aa x \\<longrightarrow>\n                          (\\<forall>q\\<in>#prime_factorization x.\n                              [aa ^\n                               ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n                          0 < x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "proof (cases \"t \\<in> set ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)\n 2. t \\<notin> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "case True"], ["proof (state)\nthis:\n  t \\<in> set ys\n\ngoal (2 subgoals):\n 1. t \\<in> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)\n 2. t \\<notin> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "using Cons.IH[OF _ True] Cons.prems(1)"], ["proof (prove)\nusing this:\n  valid_cert ys \\<Longrightarrow>\n  (t = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n  (t = Triple ?p ?a ?x \\<longrightarrow>\n   (\\<forall>q\\<in>#prime_factorization ?x.\n       [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n   0 < ?x)\n  valid_cert (y # ys)\n\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "by (cases y) auto"], ["proof (state)\nthis:\n  (t = Prime p \\<longrightarrow> prime p) \\<and>\n  (t = Triple p a x \\<longrightarrow>\n   (\\<forall>q\\<in>#prime_factorization x.\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n   0 < x)\n\ngoal (1 subgoal):\n 1. t \\<notin> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<notin> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "case False"], ["proof (state)\nthis:\n  t \\<notin> set ys\n\ngoal (1 subgoal):\n 1. t \\<notin> set ys \\<Longrightarrow>\n    (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t \\<notin> set ys\n\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "using Cons.prems(2) y_Prime y_Triple"], ["proof (prove)\nusing this:\n  t \\<notin> set ys\n  t \\<in> set (y # ys)\n  y = Prime p \\<Longrightarrow> prime p\n  y = Triple p a x \\<Longrightarrow>\n  (\\<forall>q\\<in>#prime_factorization x.\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n  0 < x\n\ngoal (1 subgoal):\n 1. (t = Prime p \\<longrightarrow> prime p) \\<and>\n    (t = Triple p a x \\<longrightarrow>\n     (\\<forall>q\\<in>#prime_factorization x.\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < x)", "by force"], ["proof (state)\nthis:\n  (t = Prime p \\<longrightarrow> prime p) \\<and>\n  (t = Triple p a x \\<longrightarrow>\n   (\\<forall>q\\<in>#prime_factorization x.\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n   0 < x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (t = Prime p \\<longrightarrow> prime p) \\<and>\n  (t = Triple p a x \\<longrightarrow>\n   (\\<forall>q\\<in>#prime_factorization x.\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n   0 < x)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary pratt_primeI:\n  assumes \"valid_cert xs\" \"Prime p \\<in> set xs\"\n  shows   \"prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p", "using pratt_sound[OF assms]"], ["proof (prove)\nusing this:\n  (Prime p = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n  (Prime p = Triple ?p ?a ?x \\<longrightarrow>\n   (\\<forall>q\\<in>#prime_factorization ?x.\n       [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n   0 < ?x)\n\ngoal (1 subgoal):\n 1. prime p", "by simp"], ["", "subsection \\<open>Completeness\\<close>"], ["", "text \\<open>\n  In this section we show completeness of Pratt's proof system, i.e., we show that for\n  every prime number $p$ there exists a certificate for $p$. We also give an upper\n  bound for the size of a minimal certificate\n\n  The prove we give is constructive. We assume that we have certificates for all prime\n  factors of $p - 1$ and use these to build a certificate for $p$ from that. It is\n  important to note that certificates can be concatenated.\n\\<close>"], ["", "lemma valid_cert_appendI:\n  assumes \"valid_cert r\"\n  assumes \"valid_cert s\"\n  shows \"valid_cert (r @ s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (r @ s)", "using assms"], ["proof (prove)\nusing this:\n  valid_cert r\n  valid_cert s\n\ngoal (1 subgoal):\n 1. valid_cert (r @ s)", "proof (induction r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_cert []; valid_cert s\\<rbrakk>\n    \\<Longrightarrow> valid_cert ([] @ s)\n 2. \\<And>a r.\n       \\<lbrakk>\\<lbrakk>valid_cert r; valid_cert s\\<rbrakk>\n                \\<Longrightarrow> valid_cert (r @ s);\n        valid_cert (a # r); valid_cert s\\<rbrakk>\n       \\<Longrightarrow> valid_cert ((a # r) @ s)", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>valid_cert ys; valid_cert s\\<rbrakk>\n  \\<Longrightarrow> valid_cert (ys @ s)\n  valid_cert (y # ys)\n  valid_cert s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_cert []; valid_cert s\\<rbrakk>\n    \\<Longrightarrow> valid_cert ([] @ s)\n 2. \\<And>a r.\n       \\<lbrakk>\\<lbrakk>valid_cert r; valid_cert s\\<rbrakk>\n                \\<Longrightarrow> valid_cert (r @ s);\n        valid_cert (a # r); valid_cert s\\<rbrakk>\n       \\<Longrightarrow> valid_cert ((a # r) @ s)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>valid_cert ys; valid_cert s\\<rbrakk>\n  \\<Longrightarrow> valid_cert (ys @ s)\n  valid_cert (y # ys)\n  valid_cert s", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_cert ys; valid_cert s\\<rbrakk>\n  \\<Longrightarrow> valid_cert (ys @ s)\n  valid_cert (y # ys)\n  valid_cert s\n\ngoal (1 subgoal):\n 1. valid_cert ((y # ys) @ s)", "by (cases y) auto"], ["proof (state)\nthis:\n  valid_cert ((y # ys) @ s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_cert []; valid_cert s\\<rbrakk>\n    \\<Longrightarrow> valid_cert ([] @ s)", "qed simp"], ["", "lemma valid_cert_concatI: \"(\\<forall>x \\<in> set xs . valid_cert x) \\<Longrightarrow> valid_cert (concat xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. valid_cert x \\<Longrightarrow>\n    valid_cert (concat xs)", "by (induction xs) (auto simp add: valid_cert_appendI)"], ["", "lemma size_pratt_le:\n fixes d::real\n assumes \"\\<forall> x \\<in> set c. size_pratt x \\<le> d\"\n shows \"size_cert c \\<le> length c * (1 + d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_cert c \\<le> real (length c) * (1 + d)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set c. Pratt_Certificate.size_pratt x \\<le> d\n\ngoal (1 subgoal):\n 1. size_cert c \\<le> real (length c) * (1 + d)", "by (induction c) (simp_all add: algebra_simps)"], ["", "fun build_fpc :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat list \\<Rightarrow> pratt list\" where\n  \"build_fpc p a r [] = [Triple p a r]\" |\n  \"build_fpc p a r (y # ys) = Triple p a r # build_fpc p a (r div y) ys\""], ["", "text \\<open>\n  The function @{term build_fpc} helps us to construct a certificate for $p$ from\n  the certificates for the prime factors of $p - 1$. Called as\n  @{term \"build_fpc p a (p - 1) qs\"} where $@{term \"qs\"} = q_1 \\ldots q_n$\n  is prime decomposition of $p - 1$ such that $q_1 \\cdot \\dotsb \\cdot q_n = @{term \"p - 1 :: nat\"}$,\n  it returns the following list of predicates:\n  \\[\n  (p,a,p-1), (p,a,\\frac{p - 1}{q_1}), (p,a,\\frac{p - 1}{q_1 q_2}), \\ldots, (p,a,\\frac{p-1}{q_1 \\ldots q_n}) = (p,a,1)\n  \\]\n\n  I.e., if there is an appropriate $a$ and and a certificate @{term rs} for all\n  prime factors of $p$, then we can construct a certificate for $p$ as\n  @{term [display] \"Prime p # build_fpc p a (p - 1) qs @ rs\"}\n\\<close>"], ["", "text \\<open>\n  The following lemma shows that \\<open>build_fpc\\<close> extends a certificate that\n  satisfies the preconditions described before to a correct certificate.\n\\<close>"], ["", "lemma correct_fpc:\n  assumes \"valid_cert xs\" \"p > 1\"\n  assumes \"prod_list qs = r\" \"r \\<noteq> 0\"\n  assumes \"\\<forall> q \\<in> set qs . Prime q \\<in> set xs\"\n  assumes \"\\<forall> q \\<in> set qs . [a^((p - 1) div q) \\<noteq> 1] (mod p)\"\n  shows \"valid_cert (build_fpc p a r qs @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a r qs @ xs)", "using assms"], ["proof (prove)\nusing this:\n  valid_cert xs\n  1 < p\n  prod_list qs = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set qs. Prime q \\<in> set xs\n  \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a r qs @ xs)", "proof (induction qs arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>valid_cert xs; 1 < p; prod_list [] = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set []. Prime q \\<in> set xs;\n        \\<forall>q\\<in>set [].\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r [] @ xs)\n 2. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "case Nil"], ["proof (state)\nthis:\n  valid_cert xs\n  1 < p\n  prod_list [] = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set []. Prime q \\<in> set xs\n  \\<forall>q\\<in>set []. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>valid_cert xs; 1 < p; prod_list [] = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set []. Prime q \\<in> set xs;\n        \\<forall>q\\<in>set [].\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r [] @ xs)\n 2. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_cert xs\n  1 < p\n  prod_list [] = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set []. Prime q \\<in> set xs\n  \\<forall>q\\<in>set []. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a r [] @ xs)", "by auto"], ["proof (state)\nthis:\n  valid_cert (build_fpc p a r [] @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>valid_cert xs; 1 < p; prod_list ys = ?r; ?r \\<noteq> 0;\n   \\<forall>q\\<in>set ys. Prime q \\<in> set xs;\n   \\<forall>q\\<in>set ys. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n  \\<Longrightarrow> valid_cert (build_fpc p a ?r ys @ xs)\n  valid_cert xs\n  1 < p\n  prod_list (y # ys) = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set (y # ys). Prime q \\<in> set xs\n  \\<forall>q\\<in>set (y # ys). [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "have \"prod_list ys = r div y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list ys = r div y", "using Cons.prems"], ["proof (prove)\nusing this:\n  valid_cert xs\n  1 < p\n  prod_list (y # ys) = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set (y # ys). Prime q \\<in> set xs\n  \\<forall>q\\<in>set (y # ys). [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. prod_list ys = r div y", "by auto"], ["proof (state)\nthis:\n  prod_list ys = r div y\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "then"], ["proof (chain)\npicking this:\n  prod_list ys = r div y", "have T_in: \"Triple p a (prod_list ys) \\<in> set (build_fpc p a (r div y) ys @ xs)\""], ["proof (prove)\nusing this:\n  prod_list ys = r div y\n\ngoal (1 subgoal):\n 1. Triple p a (prod_list ys) \\<in> set (build_fpc p a (r div y) ys @ xs)", "by (cases ys) auto"], ["proof (state)\nthis:\n  Triple p a (prod_list ys) \\<in> set (build_fpc p a (r div y) ys @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "have \"valid_cert (build_fpc p a (r div y) ys @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a (r div y) ys @ xs)", "using Cons.prems"], ["proof (prove)\nusing this:\n  valid_cert xs\n  1 < p\n  prod_list (y # ys) = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set (y # ys). Prime q \\<in> set xs\n  \\<forall>q\\<in>set (y # ys). [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a (r div y) ys @ xs)", "by (intro Cons.IH) auto"], ["proof (state)\nthis:\n  valid_cert (build_fpc p a (r div y) ys @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "then"], ["proof (chain)\npicking this:\n  valid_cert (build_fpc p a (r div y) ys @ xs)", "have \"valid_cert (Triple p a r # build_fpc p a (r div y) ys @ xs)\""], ["proof (prove)\nusing this:\n  valid_cert (build_fpc p a (r div y) ys @ xs)\n\ngoal (1 subgoal):\n 1. valid_cert (Triple p a r # build_fpc p a (r div y) ys @ xs)", "using \\<open>r \\<noteq> 0\\<close> T_in Cons.prems"], ["proof (prove)\nusing this:\n  valid_cert (build_fpc p a (r div y) ys @ xs)\n  r \\<noteq> 0\n  Triple p a (prod_list ys) \\<in> set (build_fpc p a (r div y) ys @ xs)\n  valid_cert xs\n  1 < p\n  prod_list (y # ys) = r\n  r \\<noteq> 0\n  \\<forall>q\\<in>set (y # ys). Prime q \\<in> set xs\n  \\<forall>q\\<in>set (y # ys). [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. valid_cert (Triple p a r # build_fpc p a (r div y) ys @ xs)", "by auto"], ["proof (state)\nthis:\n  valid_cert (Triple p a r # build_fpc p a (r div y) ys @ xs)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>valid_cert xs; 1 < p; prod_list qs = r;\n                    r \\<noteq> 0;\n                    \\<forall>q\\<in>set qs. Prime q \\<in> set xs;\n                    \\<forall>q\\<in>set qs.\n                       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n                   \\<Longrightarrow> valid_cert (build_fpc p a r qs @ xs);\n        valid_cert xs; 1 < p; prod_list (aa # qs) = r; r \\<noteq> 0;\n        \\<forall>q\\<in>set (aa # qs). Prime q \\<in> set xs;\n        \\<forall>q\\<in>set (aa # qs).\n           [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\\<rbrakk>\n       \\<Longrightarrow> valid_cert (build_fpc p a r (aa # qs) @ xs)", "then"], ["proof (chain)\npicking this:\n  valid_cert (Triple p a r # build_fpc p a (r div y) ys @ xs)", "show ?case"], ["proof (prove)\nusing this:\n  valid_cert (Triple p a r # build_fpc p a (r div y) ys @ xs)\n\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a r (y # ys) @ xs)", "by simp"], ["proof (state)\nthis:\n  valid_cert (build_fpc p a r (y # ys) @ xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_fpc:\n  \"length (build_fpc p a r qs) = length qs + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (build_fpc p a r qs) = length qs + 1", "by (induction qs arbitrary: r) auto"], ["", "lemma div_gt_0:\n  fixes m n :: nat assumes \"m \\<le> n\" \"0 < m\" shows \"0 < n div m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n div m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < n div m", "have \"0 < m div m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m div m", "using \\<open>0 < m\\<close> div_self"], ["proof (prove)\nusing this:\n  0 < m\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a div ?a = (1::?'a)\n\ngoal (1 subgoal):\n 1. 0 < m div m", "by auto"], ["proof (state)\nthis:\n  0 < m div m\n\ngoal (1 subgoal):\n 1. 0 < n div m", "also"], ["proof (state)\nthis:\n  0 < m div m\n\ngoal (1 subgoal):\n 1. 0 < n div m", "have \"m div m \\<le> n div m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m div m \\<le> n div m", "using \\<open>m \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. m div m \\<le> n div m", "by (rule div_le_mono)"], ["proof (state)\nthis:\n  m div m \\<le> n div m\n\ngoal (1 subgoal):\n 1. 0 < n div m", "finally"], ["proof (chain)\npicking this:\n  0 < n div m", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < n div m\n\ngoal (1 subgoal):\n 1. 0 < n div m", "."], ["proof (state)\nthis:\n  0 < n div m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma size_pratt_fpc:\n  assumes \"a \\<le> p\" \"r \\<le> p\" \"0 < a\" \"0 < r\" \"0 < p\" \"prod_list qs = r\"\n  shows \"\\<forall>x \\<in> set (build_fpc p a r qs) . size_pratt x \\<le> 3 * log 2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a r qs).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "using assms"], ["proof (prove)\nusing this:\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list qs = r\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a r qs).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "proof (induction qs arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list [] = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r []).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)\n 2. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "case Nil"], ["proof (state)\nthis:\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list [] = r\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list [] = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r []).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)\n 2. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "then"], ["proof (chain)\npicking this:\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list [] = r", "have \"log 2 a \\<le> log 2 p\" \"log 2 r \\<le> log 2 p\""], ["proof (prove)\nusing this:\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list [] = r\n\ngoal (1 subgoal):\n 1. log 2 (real a) \\<le> log 2 (real p) &&&\n    log 2 (real r) \\<le> log 2 (real p)", "by auto"], ["proof (state)\nthis:\n  log 2 (real a) \\<le> log 2 (real p)\n  log 2 (real r) \\<le> log 2 (real p)\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list [] = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r []).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)\n 2. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "then"], ["proof (chain)\npicking this:\n  log 2 (real a) \\<le> log 2 (real p)\n  log 2 (real r) \\<le> log 2 (real p)", "show ?case"], ["proof (prove)\nusing this:\n  log 2 (real a) \\<le> log 2 (real p)\n  log 2 (real r) \\<le> log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a r []).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (build_fpc p a r []).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "case (Cons q qs)"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<le> p; ?r \\<le> p; 0 < a; 0 < ?r; 0 < p;\n   prod_list qs = ?r\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a ?r qs).\n                       Pratt_Certificate.size_pratt x\n                       \\<le> 3 * log 2 (real p)\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list (q # qs) = r\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>a \\<le> p; ?r \\<le> p; 0 < a; 0 < ?r; 0 < p;\n   prod_list qs = ?r\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a ?r qs).\n                       Pratt_Certificate.size_pratt x\n                       \\<le> 3 * log 2 (real p)\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list (q # qs) = r", "have \"log 2 a \\<le> log 2 p\" \"log 2 r \\<le> log 2 p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<le> p; ?r \\<le> p; 0 < a; 0 < ?r; 0 < p;\n   prod_list qs = ?r\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a ?r qs).\n                       Pratt_Certificate.size_pratt x\n                       \\<le> 3 * log 2 (real p)\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list (q # qs) = r\n\ngoal (1 subgoal):\n 1. log 2 (real a) \\<le> log 2 (real p) &&&\n    log 2 (real r) \\<le> log 2 (real p)", "by auto"], ["proof (state)\nthis:\n  log 2 (real a) \\<le> log 2 (real p)\n  log 2 (real r) \\<le> log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "then"], ["proof (chain)\npicking this:\n  log 2 (real a) \\<le> log 2 (real p)\n  log 2 (real r) \\<le> log 2 (real p)", "have  \"log 2 a + log 2 r \\<le> 2 * log 2 p\""], ["proof (prove)\nusing this:\n  log 2 (real a) \\<le> log 2 (real p)\n  log 2 (real r) \\<le> log 2 (real p)\n\ngoal (1 subgoal):\n 1. log 2 (real a) + log 2 (real r) \\<le> 2 * log 2 (real p)", "by arith"], ["proof (state)\nthis:\n  log 2 (real a) + log 2 (real r) \\<le> 2 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "moreover"], ["proof (state)\nthis:\n  log 2 (real a) + log 2 (real r) \\<le> 2 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "have \"r div q > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r div q", "using Cons.prems"], ["proof (prove)\nusing this:\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list (q # qs) = r\n\ngoal (1 subgoal):\n 1. 0 < r div q", "by (fastforce intro: div_gt_0)"], ["proof (state)\nthis:\n  0 < r div q\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "moreover"], ["proof (state)\nthis:\n  0 < r div q\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "hence \"prod_list qs = r div q\""], ["proof (prove)\nusing this:\n  0 < r div q\n\ngoal (1 subgoal):\n 1. prod_list qs = r div q", "using Cons.prems(6)"], ["proof (prove)\nusing this:\n  0 < r div q\n  prod_list (q # qs) = r\n\ngoal (1 subgoal):\n 1. prod_list qs = r div q", "by auto"], ["proof (state)\nthis:\n  prod_list qs = r div q\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "moreover"], ["proof (state)\nthis:\n  prod_list qs = r div q\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "have \"r div q \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r div q \\<le> p", "using \\<open>r\\<le>p\\<close> div_le_dividend[of r q]"], ["proof (prove)\nusing this:\n  r \\<le> p\n  r div q \\<le> r\n\ngoal (1 subgoal):\n 1. r div q \\<le> p", "by linarith"], ["proof (state)\nthis:\n  r div q \\<le> p\n\ngoal (1 subgoal):\n 1. \\<And>aa qs r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n                    prod_list qs = r\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>x\n        \\<in>set (build_fpc p a r qs).\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p);\n        a \\<le> p; r \\<le> p; 0 < a; 0 < r; 0 < p;\n        prod_list (aa # qs) = r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a r (aa # qs)).\n                            Pratt_Certificate.size_pratt x\n                            \\<le> 3 * log 2 (real p)", "ultimately"], ["proof (chain)\npicking this:\n  log 2 (real a) + log 2 (real r) \\<le> 2 * log 2 (real p)\n  0 < r div q\n  prod_list qs = r div q\n  r div q \\<le> p", "show ?case"], ["proof (prove)\nusing this:\n  log 2 (real a) + log 2 (real r) \\<le> 2 * log 2 (real p)\n  0 < r div q\n  prod_list qs = r div q\n  r div q \\<le> p\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a r (q # qs)).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "using Cons"], ["proof (prove)\nusing this:\n  log 2 (real a) + log 2 (real r) \\<le> 2 * log 2 (real p)\n  0 < r div q\n  prod_list qs = r div q\n  r div q \\<le> p\n  \\<lbrakk>a \\<le> p; ?r \\<le> p; 0 < a; 0 < ?r; 0 < p;\n   prod_list qs = ?r\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (build_fpc p a ?r qs).\n                       Pratt_Certificate.size_pratt x\n                       \\<le> 3 * log 2 (real p)\n  a \\<le> p\n  r \\<le> p\n  0 < a\n  0 < r\n  0 < p\n  prod_list (q # qs) = r\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a r (q # qs)).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (build_fpc p a r (q # qs)).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma concat_set:\n  assumes \"\\<forall> q \\<in> qs . \\<exists> c \\<in> set cs . Prime q \\<in> set c\"\n  shows \"\\<forall> q \\<in> qs . Prime q \\<in> set (concat cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>qs. Prime q \\<in> set (concat cs)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>qs. \\<exists>c\\<in>set cs. Prime q \\<in> set c\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>qs. Prime q \\<in> set (concat cs)", "by (induction cs) auto"], ["", "lemma p_in_prime_factorsE:\n  fixes n :: nat\n  assumes \"p \\<in> prime_factors n\" \"0 < n\"\n  obtains \"2 \\<le> p\" \"p \\<le> n\" \"p dvd n\" \"prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    2 \\<le> p\n 2. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p \\<le> n\n 3. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p dvd n\n 4. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    prime p", "from assms"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization n\n  0 < n", "show \"prime p\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n  0 < n\n\ngoal (1 subgoal):\n 1. prime p", "by auto"], ["proof (state)\nthis:\n  prime p\n\ngoal (3 subgoals):\n 1. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    2 \\<le> p\n 2. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p \\<le> n\n 3. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p dvd n", "then"], ["proof (chain)\npicking this:\n  prime p", "show \"2 \\<le> p\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 2 \\<le> p", "by (auto dest: prime_gt_1_nat)"], ["proof (state)\nthis:\n  2 \\<le> p\n\ngoal (2 subgoals):\n 1. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p \\<le> n\n 2. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p dvd n", "from assms"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization n\n  0 < n", "show \"p dvd n\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n  0 < n\n\ngoal (1 subgoal):\n 1. p dvd n", "by auto"], ["proof (state)\nthis:\n  p dvd n\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>2 \\<le> p; p \\<le> n; p dvd n; prime p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    p \\<le> n", "then"], ["proof (chain)\npicking this:\n  p dvd n", "show \"p \\<le> n\""], ["proof (prove)\nusing this:\n  p dvd n\n\ngoal (1 subgoal):\n 1. p \\<le> n", "using  \\<open>0 < n\\<close>"], ["proof (prove)\nusing this:\n  p dvd n\n  0 < n\n\ngoal (1 subgoal):\n 1. p \\<le> n", "by (rule dvd_imp_le)"], ["proof (state)\nthis:\n  p \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_factors_list_prime:\n  fixes n :: nat\n  assumes \"prime n\"\n  shows \"\\<exists> qs. prime_factors n = set qs \\<and> prod_list qs = n \\<and> length qs = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and> prod_list qs = n \\<and> length qs = 1", "using assms"], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and> prod_list qs = n \\<and> length qs = 1", "by (auto simp add: prime_factorization_prime intro: exI [of _ \"[n]\"])"], ["", "lemma prime_factors_list:\n  fixes n :: nat assumes \"3 < n\" \"\\<not> prime n\"\n  shows \"\\<exists> qs. prime_factors n = set qs \\<and> prod_list qs = n \\<and> length qs \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "using assms"], ["proof (prove)\nusing this:\n  3 < n\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "proof (induction n rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; 3 < ?y; \\<not> prime ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors ?y = set qs \\<and>\n                       prod_list qs = ?y \\<and> 2 \\<le> length qs\n  3 < n\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "obtain p where \"p \\<in> prime_factors n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in># prime_factorization n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>n > 3\\<close> prime_factors_elem"], ["proof (prove)\nusing this:\n  3 < n\n  1 < ?n \\<Longrightarrow> \\<exists>p. p \\<in># prime_factorization ?n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in># prime_factorization n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  p \\<in># prime_factorization n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "then"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization n", "have p':\"2 \\<le> p\" \"p \\<le> n\" \"p dvd n\" \"prime p\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n\ngoal (1 subgoal):\n 1. (2 \\<le> p &&& p \\<le> n) &&& p dvd n &&& prime p", "using \\<open>3 < n\\<close>"], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n  3 < n\n\ngoal (1 subgoal):\n 1. (2 \\<le> p &&& p \\<le> n) &&& p dvd n &&& prime p", "by (auto elim: p_in_prime_factorsE)"], ["proof (state)\nthis:\n  2 \\<le> p\n  p \\<le> n\n  p dvd n\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "{"], ["proof (state)\nthis:\n  2 \\<le> p\n  p \\<le> n\n  p dvd n\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "assume \"n div p > 3\" \"\\<not> prime (n div p)\""], ["proof (state)\nthis:\n  3 < n div p\n  \\<not> prime (n div p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "then"], ["proof (chain)\npicking this:\n  3 < n div p\n  \\<not> prime (n div p)", "obtain qs\n        where \"prime_factors (n div p) = set qs\" \"prod_list qs = (n div p)\" \"length qs \\<ge> 2\""], ["proof (prove)\nusing this:\n  3 < n div p\n  \\<not> prime (n div p)\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>prime_factors (n div p) = set qs; prod_list qs = n div p;\n         2 \\<le> length qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using p'"], ["proof (prove)\nusing this:\n  3 < n div p\n  \\<not> prime (n div p)\n  2 \\<le> p\n  p \\<le> n\n  p dvd n\n  prime p\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>prime_factors (n div p) = set qs; prod_list qs = n div p;\n         2 \\<le> length qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (auto intro: less simp: div_gt_0)"], ["proof (state)\nthis:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "moreover"], ["proof (state)\nthis:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "have \"prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (p * (n div p)) = insert p (prime_factors (n div p))", "using \\<open>3 < n\\<close> \\<open>2 \\<le> p\\<close> \\<open>p \\<le> n\\<close> \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  3 < n\n  2 \\<le> p\n  p \\<le> n\n  prime p\n\ngoal (1 subgoal):\n 1. prime_factors (p * (n div p)) = insert p (prime_factors (n div p))", "by (auto simp: prime_factors_product div_gt_0 prime_factors_of_prime)"], ["proof (state)\nthis:\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "ultimately"], ["proof (chain)\npicking this:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  2 \\<le> length qs\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))", "have \"prime_factors n = set (p # qs)\" \"prod_list (p # qs) = n\" \"length (p#qs) \\<ge> 2\""], ["proof (prove)\nusing this:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  2 \\<le> length qs\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\n\ngoal (1 subgoal):\n 1. prime_factors n = set (p # qs) &&&\n    prod_list (p # qs) = n &&& 2 \\<le> length (p # qs)", "using \\<open>p dvd n\\<close>"], ["proof (prove)\nusing this:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  2 \\<le> length qs\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\n  p dvd n\n\ngoal (1 subgoal):\n 1. prime_factors n = set (p # qs) &&&\n    prod_list (p # qs) = n &&& 2 \\<le> length (p # qs)", "by simp_all"], ["proof (state)\nthis:\n  prime_factors n = set (p # qs)\n  prod_list (p # qs) = n\n  2 \\<le> length (p # qs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "hence ?case"], ["proof (prove)\nusing this:\n  prime_factors n = set (p # qs)\n  prod_list (p # qs) = n\n  2 \\<le> length (p # qs)\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "by blast"], ["proof (state)\nthis:\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>3 < n div p; \\<not> prime (n div p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors n = set qs \\<and>\n                       prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>3 < n div p; \\<not> prime (n div p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors n = set qs \\<and>\n                       prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "{"], ["proof (state)\nthis:\n  \\<lbrakk>3 < n div p; \\<not> prime (n div p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors n = set qs \\<and>\n                       prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "assume \"prime (n div p)\""], ["proof (state)\nthis:\n  prime (n div p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "then"], ["proof (chain)\npicking this:\n  prime (n div p)", "obtain qs\n        where \"prime_factors (n div p) = set qs\" \"prod_list qs = (n div p)\" \"length qs = 1\""], ["proof (prove)\nusing this:\n  prime (n div p)\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>prime_factors (n div p) = set qs; prod_list qs = n div p;\n         length qs = 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_factors_list_prime"], ["proof (prove)\nusing this:\n  prime (n div p)\n  prime ?n \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors ?n = set qs \\<and> prod_list qs = ?n \\<and> length qs = 1\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>prime_factors (n div p) = set qs; prod_list qs = n div p;\n         length qs = 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "moreover"], ["proof (state)\nthis:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "have \"prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (p * (n div p)) = insert p (prime_factors (n div p))", "using \\<open>3 < n\\<close> \\<open>2 \\<le> p\\<close> \\<open>p \\<le> n\\<close> \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  3 < n\n  2 \\<le> p\n  p \\<le> n\n  prime p\n\ngoal (1 subgoal):\n 1. prime_factors (p * (n div p)) = insert p (prime_factors (n div p))", "by (auto simp: prime_factors_product div_gt_0 prime_factors_of_prime)"], ["proof (state)\nthis:\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "ultimately"], ["proof (chain)\npicking this:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  length qs = 1\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))", "have \"prime_factors n = set (p # qs)\" \"prod_list (p # qs) = n\" \"length (p#qs) \\<ge> 2\""], ["proof (prove)\nusing this:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  length qs = 1\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\n\ngoal (1 subgoal):\n 1. prime_factors n = set (p # qs) &&&\n    prod_list (p # qs) = n &&& 2 \\<le> length (p # qs)", "using \\<open>p dvd n\\<close>"], ["proof (prove)\nusing this:\n  prime_factors (n div p) = set qs\n  prod_list qs = n div p\n  length qs = 1\n  prime_factors (p * (n div p)) = insert p (prime_factors (n div p))\n  p dvd n\n\ngoal (1 subgoal):\n 1. prime_factors n = set (p # qs) &&&\n    prod_list (p # qs) = n &&& 2 \\<le> length (p # qs)", "by simp_all"], ["proof (state)\nthis:\n  prime_factors n = set (p # qs)\n  prod_list (p # qs) = n\n  2 \\<le> length (p # qs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "hence ?case"], ["proof (prove)\nusing this:\n  prime_factors n = set (p # qs)\n  prod_list (p # qs) = n\n  2 \\<le> length (p # qs)\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "by blast"], ["proof (state)\nthis:\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "}"], ["proof (state)\nthis:\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "note case_prime = this"], ["proof (state)\nthis:\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "moreover"], ["proof (state)\nthis:\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "{"], ["proof (state)\nthis:\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "assume \"n div p = 1\""], ["proof (state)\nthis:\n  n div p = 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "hence \"n = p\""], ["proof (prove)\nusing this:\n  n div p = 1\n\ngoal (1 subgoal):\n 1. n = p", "using \\<open>n>3\\<close>"], ["proof (prove)\nusing this:\n  n div p = 1\n  3 < n\n\ngoal (1 subgoal):\n 1. n = p", "using One_leq_div[OF \\<open>p dvd n\\<close>] p'(2)"], ["proof (prove)\nusing this:\n  n div p = 1\n  3 < n\n  p < n \\<Longrightarrow> 1 < n div p\n  p \\<le> n\n\ngoal (1 subgoal):\n 1. n = p", "by force"], ["proof (state)\nthis:\n  n = p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "hence ?case"], ["proof (prove)\nusing this:\n  n = p\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "using \\<open>prime p\\<close> \\<open>\\<not> prime n\\<close>"], ["proof (prove)\nusing this:\n  n = p\n  prime p\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "by auto"], ["proof (state)\nthis:\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "}"], ["proof (state)\nthis:\n  n div p = 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "moreover"], ["proof (state)\nthis:\n  n div p = 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "{"], ["proof (state)\nthis:\n  n div p = 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "assume \"n div p = 2\""], ["proof (state)\nthis:\n  n div p = 2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "hence ?case"], ["proof (prove)\nusing this:\n  n div p = 2\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "using case_prime"], ["proof (prove)\nusing this:\n  n div p = 2\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "by force"], ["proof (state)\nthis:\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "}"], ["proof (state)\nthis:\n  n div p = 2 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "moreover"], ["proof (state)\nthis:\n  n div p = 2 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "{"], ["proof (state)\nthis:\n  n div p = 2 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "assume \"n div p = 3\""], ["proof (state)\nthis:\n  n div p = 3\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "hence ?case"], ["proof (prove)\nusing this:\n  n div p = 3\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "using p' case_prime"], ["proof (prove)\nusing this:\n  n div p = 3\n  2 \\<le> p\n  p \\<le> n\n  p dvd n\n  prime p\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "by force"], ["proof (state)\nthis:\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "}"], ["proof (state)\nthis:\n  n div p = 3 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; 3 < y; \\<not> prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qs.\n  prime_factors y = set qs \\<and> prod_list qs = y \\<and> 2 \\<le> length qs;\n        3 < x; \\<not> prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            prime_factors x = set qs \\<and>\n                            prod_list qs = x \\<and> 2 \\<le> length qs", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>3 < n div p; \\<not> prime (n div p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors n = set qs \\<and>\n                       prod_list qs = n \\<and> 2 \\<le> length qs\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 2 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 3 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>3 < n div p; \\<not> prime (n div p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors n = set qs \\<and>\n                       prod_list qs = n \\<and> 2 \\<le> length qs\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 2 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 3 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "using p' div_gt_0[of p n] case_prime"], ["proof (prove)\nusing this:\n  \\<lbrakk>3 < n div p; \\<not> prime (n div p)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factors n = set qs \\<and>\n                       prod_list qs = n \\<and> 2 \\<le> length qs\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 2 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  n div p = 3 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n  2 \\<le> p\n  p \\<le> n\n  p dvd n\n  prime p\n  \\<lbrakk>p \\<le> n; 0 < p\\<rbrakk> \\<Longrightarrow> 0 < n div p\n  prime (n div p) \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       prime_factors n = set qs \\<and>\n       prod_list qs = n \\<and> 2 \\<le> length qs", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>qs.\n     prime_factors n = set qs \\<and>\n     prod_list qs = n \\<and> 2 \\<le> length qs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_list_ge:\n  fixes xs::\"nat list\"\n  assumes \"\\<forall> x \\<in> set xs . x \\<ge> 1\"\n  shows \"prod_list xs \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> prod_list xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. 1 \\<le> x\n\ngoal (1 subgoal):\n 1. 1 \\<le> prod_list xs", "by (induction xs) auto"], ["", "lemma sum_list_log:\n  fixes b::real\n  fixes xs::\"nat list\"\n  assumes b: \"b > 0\" \"b \\<noteq> 1\"\n  assumes xs:\"\\<forall> x \\<in> set xs . x \\<ge> b\"\n  shows \"(\\<Sum>x\\<leftarrow>xs. log b x) = log b (prod_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map (log b) (map real xs)) = log b (real (prod_list xs))", "using assms"], ["proof (prove)\nusing this:\n  0 < b\n  b \\<noteq> 1\n  \\<forall>x\\<in>set xs. b \\<le> real x\n\ngoal (1 subgoal):\n 1. sum_list (map (log b) (map real xs)) = log b (real (prod_list xs))", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < b; b \\<noteq> 1;\n     \\<forall>x\\<in>set []. b \\<le> real x\\<rbrakk>\n    \\<Longrightarrow> sum_list (map (log b) (map real [])) =\n                      log b (real (prod_list []))\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>0 < b; b \\<noteq> 1;\n                 \\<forall>x\\<in>set xs. b \\<le> real x\\<rbrakk>\n                \\<Longrightarrow> sum_list (map (log b) (map real xs)) =\n                                  log b (real (prod_list xs));\n        0 < b; b \\<noteq> 1;\n        \\<forall>x\\<in>set (a # xs). b \\<le> real x\\<rbrakk>\n       \\<Longrightarrow> sum_list (map (log b) (map real (a # xs))) =\n                         log b (real (prod_list (a # xs)))", "case Nil"], ["proof (state)\nthis:\n  0 < b\n  b \\<noteq> 1\n  \\<forall>x\\<in>set []. b \\<le> real x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < b; b \\<noteq> 1;\n     \\<forall>x\\<in>set []. b \\<le> real x\\<rbrakk>\n    \\<Longrightarrow> sum_list (map (log b) (map real [])) =\n                      log b (real (prod_list []))\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>0 < b; b \\<noteq> 1;\n                 \\<forall>x\\<in>set xs. b \\<le> real x\\<rbrakk>\n                \\<Longrightarrow> sum_list (map (log b) (map real xs)) =\n                                  log b (real (prod_list xs));\n        0 < b; b \\<noteq> 1;\n        \\<forall>x\\<in>set (a # xs). b \\<le> real x\\<rbrakk>\n       \\<Longrightarrow> sum_list (map (log b) (map real (a # xs))) =\n                         log b (real (prod_list (a # xs)))", "thus ?case"], ["proof (prove)\nusing this:\n  0 < b\n  b \\<noteq> 1\n  \\<forall>x\\<in>set []. b \\<le> real x\n\ngoal (1 subgoal):\n 1. sum_list (map (log b) (map real [])) = log b (real (prod_list []))", "by simp"], ["proof (state)\nthis:\n  sum_list (map (log b) (map real [])) = log b (real (prod_list []))\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>0 < b; b \\<noteq> 1;\n                 \\<forall>x\\<in>set xs. b \\<le> real x\\<rbrakk>\n                \\<Longrightarrow> sum_list (map (log b) (map real xs)) =\n                                  log b (real (prod_list xs));\n        0 < b; b \\<noteq> 1;\n        \\<forall>x\\<in>set (a # xs). b \\<le> real x\\<rbrakk>\n       \\<Longrightarrow> sum_list (map (log b) (map real (a # xs))) =\n                         log b (real (prod_list (a # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>0 < b; b \\<noteq> 1;\n                 \\<forall>x\\<in>set xs. b \\<le> real x\\<rbrakk>\n                \\<Longrightarrow> sum_list (map (log b) (map real xs)) =\n                                  log b (real (prod_list xs));\n        0 < b; b \\<noteq> 1;\n        \\<forall>x\\<in>set (a # xs). b \\<le> real x\\<rbrakk>\n       \\<Longrightarrow> sum_list (map (log b) (map real (a # xs))) =\n                         log b (real (prod_list (a # xs)))", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < b; b \\<noteq> 1;\n   \\<forall>x\\<in>set ys. b \\<le> real x\\<rbrakk>\n  \\<Longrightarrow> sum_list (map (log b) (map real ys)) =\n                    log b (real (prod_list ys))\n  0 < b\n  b \\<noteq> 1\n  \\<forall>x\\<in>set (y # ys). b \\<le> real x\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>0 < b; b \\<noteq> 1;\n                 \\<forall>x\\<in>set xs. b \\<le> real x\\<rbrakk>\n                \\<Longrightarrow> sum_list (map (log b) (map real xs)) =\n                                  log b (real (prod_list xs));\n        0 < b; b \\<noteq> 1;\n        \\<forall>x\\<in>set (a # xs). b \\<le> real x\\<rbrakk>\n       \\<Longrightarrow> sum_list (map (log b) (map real (a # xs))) =\n                         log b (real (prod_list (a # xs)))", "have \"real (prod_list ys) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < real (prod_list ys)", "using prod_list_ge Cons.prems"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?xs. 1 \\<le> x \\<Longrightarrow> 1 \\<le> prod_list ?xs\n  0 < b\n  b \\<noteq> 1\n  \\<forall>x\\<in>set (y # ys). b \\<le> real x\n\ngoal (1 subgoal):\n 1. 0 < real (prod_list ys)", "by fastforce"], ["proof (state)\nthis:\n  0 < real (prod_list ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>0 < b; b \\<noteq> 1;\n                 \\<forall>x\\<in>set xs. b \\<le> real x\\<rbrakk>\n                \\<Longrightarrow> sum_list (map (log b) (map real xs)) =\n                                  log b (real (prod_list xs));\n        0 < b; b \\<noteq> 1;\n        \\<forall>x\\<in>set (a # xs). b \\<le> real x\\<rbrakk>\n       \\<Longrightarrow> sum_list (map (log b) (map real (a # xs))) =\n                         log b (real (prod_list (a # xs)))", "thus ?case"], ["proof (prove)\nusing this:\n  0 < real (prod_list ys)\n\ngoal (1 subgoal):\n 1. sum_list (map (log b) (map real (y # ys))) =\n    log b (real (prod_list (y # ys)))", "using log_mult[OF Cons.prems(1-2)] Cons"], ["proof (prove)\nusing this:\n  0 < real (prod_list ys)\n  \\<lbrakk>0 < ?x; 0 < ?y\\<rbrakk>\n  \\<Longrightarrow> log b (?x * ?y) = log b ?x + log b ?y\n  \\<lbrakk>0 < b; b \\<noteq> 1;\n   \\<forall>x\\<in>set ys. b \\<le> real x\\<rbrakk>\n  \\<Longrightarrow> sum_list (map (log b) (map real ys)) =\n                    log b (real (prod_list ys))\n  0 < b\n  b \\<noteq> 1\n  \\<forall>x\\<in>set (y # ys). b \\<le> real x\n\ngoal (1 subgoal):\n 1. sum_list (map (log b) (map real (y # ys))) =\n    log b (real (prod_list (y # ys)))", "by force"], ["proof (state)\nthis:\n  sum_list (map (log b) (map real (y # ys))) =\n  log b (real (prod_list (y # ys)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma concat_length_le:\n  fixes g :: \"nat \\<Rightarrow> real\"\n  assumes \"\\<forall> x \\<in> set xs . real (length (f x)) \\<le> g x\"\n  shows \"length (concat (map f xs)) \\<le> (\\<Sum>x\\<leftarrow>xs. g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (length (concat (map f xs))) \\<le> sum_list (map g xs)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. real (length (f x)) \\<le> g x\n\ngoal (1 subgoal):\n 1. real (length (concat (map f xs))) \\<le> sum_list (map g xs)", "by (induction xs) force+"], ["", "lemma prime_gt_3_impl_p_minus_one_not_prime:\n  fixes p::nat\n  assumes \"prime p\" \"p>3\"\n  shows \"\\<not> prime (p - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prime (p - 1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. prime (p - 1) \\<Longrightarrow> False", "assume \"prime (p - 1)\""], ["proof (state)\nthis:\n  prime (p - 1)\n\ngoal (1 subgoal):\n 1. prime (p - 1) \\<Longrightarrow> False", "have \"\\<not> even p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd p", "using assms"], ["proof (prove)\nusing this:\n  prime p\n  3 < p\n\ngoal (1 subgoal):\n 1. odd p", "by (simp add: prime_odd_nat)"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. prime (p - 1) \\<Longrightarrow> False", "hence \"2 dvd (p - 1)\""], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. even (p - 1)", "by presburger"], ["proof (state)\nthis:\n  even (p - 1)\n\ngoal (1 subgoal):\n 1. prime (p - 1) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  even (p - 1)", "obtain q where \"p - 1 = 2 * q\""], ["proof (prove)\nusing this:\n  even (p - 1)\n\ngoal (1 subgoal):\n 1. (\\<And>q. p - 1 = 2 * q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  p - 1 = 2 * q\n\ngoal (1 subgoal):\n 1. prime (p - 1) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p - 1 = 2 * q", "have \"2 \\<in> prime_factors (p - 1)\""], ["proof (prove)\nusing this:\n  p - 1 = 2 * q\n\ngoal (1 subgoal):\n 1. 2 \\<in># prime_factorization (p - 1)", "using \\<open>p>3\\<close>"], ["proof (prove)\nusing this:\n  p - 1 = 2 * q\n  3 < p\n\ngoal (1 subgoal):\n 1. 2 \\<in># prime_factorization (p - 1)", "by (auto simp: prime_factorization_times_prime)"], ["proof (state)\nthis:\n  2 \\<in># prime_factorization (p - 1)\n\ngoal (1 subgoal):\n 1. prime (p - 1) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  2 \\<in># prime_factorization (p - 1)\n\ngoal (1 subgoal):\n 1. False", "using prime_factors_of_prime \\<open>p>3\\<close> \\<open>prime (p - 1)\\<close>"], ["proof (prove)\nusing this:\n  2 \\<in># prime_factorization (p - 1)\n  prime ?p \\<Longrightarrow> prime_factors ?p = {?p}\n  3 < p\n  prime (p - 1)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We now prove that Pratt's proof system is complete and derive upper bounds for\n  the length and the size of the entries of a minimal certificate.\n\\<close>"], ["", "theorem pratt_complete':\n  assumes \"prime p\"\n  shows \"\\<exists>c. Prime p \\<in> set c \\<and> valid_cert c \\<and> length c \\<le> 6*log 2 p - 4 \\<and> (\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "using assms"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "proof (induction p rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c.\n  Prime y \\<in> set c \\<and>\n  valid_cert c \\<and>\n  real (length c) \\<le> 6 * log 2 (real y) - 4 \\<and>\n  (\\<forall>x\\<in>set c.\n      Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real y));\n        prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            Prime x \\<in> set c \\<and>\n                            valid_cert c \\<and>\n                            real (length c)\n                            \\<le> 6 * log 2 (real x) - 4 \\<and>\n                            (\\<forall>xa\\<in>set c.\n                                Pratt_Certificate.size_pratt xa\n                                \\<le> 3 * log 2 (real x))", "case (less p)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < p; prime ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       Prime ?y \\<in> set c \\<and>\n                       valid_cert c \\<and>\n                       real (length c) \\<le> 6 * log 2 (real ?y) - 4 \\<and>\n                       (\\<forall>x\\<in>set c.\n                           Pratt_Certificate.size_pratt x\n                           \\<le> 3 * log 2 (real ?y))\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c.\n  Prime y \\<in> set c \\<and>\n  valid_cert c \\<and>\n  real (length c) \\<le> 6 * log 2 (real y) - 4 \\<and>\n  (\\<forall>x\\<in>set c.\n      Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real y));\n        prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            Prime x \\<in> set c \\<and>\n                            valid_cert c \\<and>\n                            real (length c)\n                            \\<le> 6 * log 2 (real x) - 4 \\<and>\n                            (\\<forall>xa\\<in>set c.\n                                Pratt_Certificate.size_pratt xa\n                                \\<le> 3 * log 2 (real x))", "from \\<open>prime p\\<close>"], ["proof (chain)\npicking this:\n  prime p", "have \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (rule prime_gt_1_nat)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c.\n  Prime y \\<in> set c \\<and>\n  valid_cert c \\<and>\n  real (length c) \\<le> 6 * log 2 (real y) - 4 \\<and>\n  (\\<forall>x\\<in>set c.\n      Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real y));\n        prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            Prime x \\<in> set c \\<and>\n                            valid_cert c \\<and>\n                            real (length c)\n                            \\<le> 6 * log 2 (real x) - 4 \\<and>\n                            (\\<forall>xa\\<in>set c.\n                                Pratt_Certificate.size_pratt xa\n                                \\<le> 3 * log 2 (real x))", "then"], ["proof (chain)\npicking this:\n  1 < p", "consider \"p = 2\" | \" p = 3\" | \"p > 3\""], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = 2 \\<Longrightarrow> thesis; p = 3 \\<Longrightarrow> thesis;\n     3 < p \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>p = 2 \\<Longrightarrow> ?thesis; p = 3 \\<Longrightarrow> ?thesis;\n   3 < p \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; prime y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c.\n  Prime y \\<in> set c \\<and>\n  valid_cert c \\<and>\n  real (length c) \\<le> 6 * log 2 (real y) - 4 \\<and>\n  (\\<forall>x\\<in>set c.\n      Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real y));\n        prime x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            Prime x \\<in> set c \\<and>\n                            valid_cert c \\<and>\n                            real (length c)\n                            \\<le> 6 * log 2 (real x) - 4 \\<and>\n                            (\\<forall>xa\\<in>set c.\n                                Pratt_Certificate.size_pratt xa\n                                \\<le> 3 * log 2 (real x))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>p = 2 \\<Longrightarrow> ?thesis; p = 3 \\<Longrightarrow> ?thesis;\n   3 < p \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. p = 2 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 3. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "assume [simp]: \"p = 2\""], ["proof (state)\nthis:\n  p = 2\n\ngoal (3 subgoals):\n 1. p = 2 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 3. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"Prime p \\<in> set [Prime 2, Triple 2 1 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prime p \\<in> set [Prime 2, Triple 2 1 1]", "by simp"], ["proof (state)\nthis:\n  Prime p \\<in> set [Prime 2, Triple 2 1 1]\n\ngoal (3 subgoals):\n 1. p = 2 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 3. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "thus ?case"], ["proof (prove)\nusing this:\n  Prime p \\<in> set [Prime 2, Triple 2 1 1]\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>c.\n     Prime p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n     (\\<forall>x\\<in>set c.\n         Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "assume [simp]: \"p = 3\""], ["proof (state)\nthis:\n  p = 3\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "let ?cert = \"[Prime 3, Triple 3 2 2, Triple 3 2 1, Prime 2, Triple 2 1 1]\""], ["proof (state)\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"length ?cert \\<le> 6*log 2 p - 4 \\<longleftrightarrow> 3 \\<le> 2 * log 2 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (real\n      (length [Prime 3, Triple 3 2 2, Triple 3 2 1, Prime 2, Triple 2 1 1])\n     \\<le> 6 * log 2 (real p) - 4) =\n    (3 \\<le> 2 * log 2 3)", "by simp"], ["proof (state)\nthis:\n  (real\n    (length [Prime 3, Triple 3 2 2, Triple 3 2 1, Prime 2, Triple 2 1 1])\n   \\<le> 6 * log 2 (real p) - 4) =\n  (3 \\<le> 2 * log 2 3)\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  (real\n    (length [Prime 3, Triple 3 2 2, Triple 3 2 1, Prime 2, Triple 2 1 1])\n   \\<le> 6 * log 2 (real p) - 4) =\n  (3 \\<le> 2 * log 2 3)\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"2 * log 2 3 = log 2 (3 ^ 2 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * log 2 3 = log 2 (3\\<^sup>2)", "by (subst log_nat_power) simp_all"], ["proof (state)\nthis:\n  2 * log 2 3 = log 2 (3\\<^sup>2)\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  2 * log 2 3 = log 2 (3\\<^sup>2)\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<dots> = log 2 9\""], ["proof (prove)\ngoal (1 subgoal):\n 1. log 2 (3\\<^sup>2) = log 2 9", "by simp"], ["proof (state)\nthis:\n  log 2 (3\\<^sup>2) = log 2 9\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  log 2 (3\\<^sup>2) = log 2 9\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"3 \\<le> log 2 9 \\<longleftrightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (3 \\<le> log 2 9) = True", "by (subst le_log_iff) simp_all"], ["proof (state)\nthis:\n  (3 \\<le> log 2 9) = True\n\ngoal (2 subgoals):\n 1. p = 3 \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n 2. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "finally"], ["proof (chain)\npicking this:\n  (real\n    (length [Prime 3, Triple 3 2 2, Triple 3 2 1, Prime 2, Triple 2 1 1])\n   \\<le> 6 * log 2 (real p) - 4) =\n  True", "show ?case"], ["proof (prove)\nusing this:\n  (real\n    (length [Prime 3, Triple 3 2 2, Triple 3 2 1, Prime 2, Triple 2 1 1])\n   \\<le> 6 * log 2 (real p) - 4) =\n  True\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "by (intro exI[where x = \"?cert\"]) (simp add: cong_def)"], ["proof (state)\nthis:\n  \\<exists>c.\n     Prime p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n     (\\<forall>x\\<in>set c.\n         Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "assume \"p > 3\""], ["proof (state)\nthis:\n  3 < p\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have qlp: \"\\<forall>q \\<in> prime_factors (p - 1) . q < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1). q < p", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1). q < p", "by (metis One_nat_def Suc_pred le_imp_less_Suc lessI less_trans p_in_prime_factorsE prime_gt_1_nat zero_less_diff)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>#prime_factorization (p - 1). q < p\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "hence factor_certs:\"\\<forall>q \\<in> prime_factors (p - 1) . (\\<exists>c . ((Prime q \\<in> set c) \\<and> (valid_cert c)\n                                                      \\<and> length c \\<le> 6*log 2 q - 4) \\<and> (\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 q))\""], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1). q < p\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1).\n       \\<exists>c.\n          (Prime q \\<in> set c \\<and>\n           valid_cert c \\<and>\n           real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n          (\\<forall>x\\<in>set c.\n              Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))", "by (auto intro: less.IH)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "obtain a where a:\"[a^(p - 1) = 1] (mod p) \\<and> (\\<forall> q. q \\<in> prime_factors (p - 1)\n              \\<longrightarrow> [a^((p - 1) div q) \\<noteq> 1] (mod p))\" and a_size: \"a > 0\" \"a < p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>[a ^ (p - 1) = 1] (mod p) \\<and>\n                 (\\<forall>q.\n                     q \\<in># prime_factorization (p - 1) \\<longrightarrow>\n                     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p));\n         0 < a; a < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converse_lehmer[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     [a ^ (p - 1) = 1] (mod p) \\<and>\n     (\\<forall>q.\n         q \\<in># prime_factorization (p - 1) \\<longrightarrow>\n         [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)) \\<and>\n     0 < a \\<and> a < p\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>[a ^ (p - 1) = 1] (mod p) \\<and>\n                 (\\<forall>q.\n                     q \\<in># prime_factorization (p - 1) \\<longrightarrow>\n                     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p));\n         0 < a; a < p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [a ^ (p - 1) = 1] (mod p) \\<and>\n  (\\<forall>q.\n      q \\<in># prime_factorization (p - 1) \\<longrightarrow>\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p))\n  0 < a\n  a < p\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<not> prime (p - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> prime (p - 1)", "using \\<open>p>3\\<close> prime_gt_3_impl_p_minus_one_not_prime \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  3 < p\n  \\<lbrakk>prime ?p; 3 < ?p\\<rbrakk> \\<Longrightarrow> \\<not> prime (?p - 1)\n  prime p\n\ngoal (1 subgoal):\n 1. \\<not> prime (p - 1)", "by auto"], ["proof (state)\nthis:\n  \\<not> prime (p - 1)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"p \\<noteq> 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 4", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 4", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "hence \"p - 1 > 3\""], ["proof (prove)\nusing this:\n  p \\<noteq> 4\n\ngoal (1 subgoal):\n 1. 3 < p - 1", "using \\<open>p > 3\\<close>"], ["proof (prove)\nusing this:\n  p \\<noteq> 4\n  3 < p\n\ngoal (1 subgoal):\n 1. 3 < p - 1", "by auto"], ["proof (state)\nthis:\n  3 < p - 1\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "then"], ["proof (chain)\npicking this:\n  3 < p - 1", "obtain qs where prod_qs_eq:\"prod_list qs = p - 1\"\n        and qs_eq:\"set qs = prime_factors (p - 1)\" and qs_length_eq: \"length qs \\<ge> 2\""], ["proof (prove)\nusing this:\n  3 < p - 1\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>prod_list qs = p - 1; set qs = prime_factors (p - 1);\n         2 \\<le> length qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_factors_list[OF _ \\<open>\\<not> prime (p - 1)\\<close>]"], ["proof (prove)\nusing this:\n  3 < p - 1\n  3 < p - 1 \\<Longrightarrow>\n  \\<exists>qs.\n     prime_factors (p - 1) = set qs \\<and>\n     prod_list qs = p - 1 \\<and> 2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. (\\<And>qs.\n        \\<lbrakk>prod_list qs = p - 1; set qs = prime_factors (p - 1);\n         2 \\<le> length qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  prod_list qs = p - 1\n  set qs = prime_factors (p - 1)\n  2 \\<le> length qs\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "obtain f where f:\"\\<forall>q \\<in> prime_factors (p - 1) . \\<exists> c. f q = c\n                     \\<and> ((Prime q \\<in> set c) \\<and> (valid_cert c) \\<and> length c \\<le> 6*log 2 q - 4)\n                     \\<and> (\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>q\\<in>#prime_factorization (p - 1).\n           \\<exists>c.\n              f q = c \\<and>\n              (Prime q \\<in> set c \\<and>\n               valid_cert c \\<and>\n               real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n              (\\<forall>x\\<in>set c.\n                  Pratt_Certificate.size_pratt x\n                  \\<le> 3 * log 2 (real q)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using factor_certs"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>q\\<in>#prime_factorization (p - 1).\n           \\<exists>c.\n              f q = c \\<and>\n              (Prime q \\<in> set c \\<and>\n               valid_cert c \\<and>\n               real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n              (\\<forall>x\\<in>set c.\n                  Pratt_Certificate.size_pratt x\n                  \\<le> 3 * log 2 (real q)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        f q = c \\<and>\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "let ?cs = \"map f qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have cs: \"\\<forall>q \\<in> prime_factors (p - 1) . (\\<exists>c \\<in> set ?cs . (Prime q \\<in> set c) \\<and> (valid_cert c)\n                                           \\<and> length c \\<le> 6*log 2 q - 4\n                                           \\<and> (\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1).\n       \\<exists>c\\<in>set (map f qs).\n          Prime q \\<in> set c \\<and>\n          valid_cert c \\<and>\n          real (length c) \\<le> 6 * log 2 (real q) - 4 \\<and>\n          (\\<forall>x\\<in>set c.\n              Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))", "using f qs_eq"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        f q = c \\<and>\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n  set qs = prime_factors (p - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>#prime_factorization (p - 1).\n       \\<exists>c\\<in>set (map f qs).\n          Prime q \\<in> set c \\<and>\n          valid_cert c \\<and>\n          real (length c) \\<le> 6 * log 2 (real q) - 4 \\<and>\n          (\\<forall>x\\<in>set c.\n              Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))", "by auto"], ["proof (state)\nthis:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c\\<in>set (map f qs).\n        Prime q \\<in> set c \\<and>\n        valid_cert c \\<and>\n        real (length c) \\<le> 6 * log 2 (real q) - 4 \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have cs_cert_size: \"\\<forall>c \\<in> set ?cs . \\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (map f qs).\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> set (map f qs) \\<Longrightarrow>\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> set (map f qs) \\<Longrightarrow>\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "assume \"c \\<in> set (map f qs)\""], ["proof (state)\nthis:\n  c \\<in> set (map f qs)\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> set (map f qs) \\<Longrightarrow>\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "then"], ["proof (chain)\npicking this:\n  c \\<in> set (map f qs)", "obtain q where \"c = f q\" and \"q \\<in> set qs\""], ["proof (prove)\nusing this:\n  c \\<in> set (map f qs)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>c = f q; q \\<in> set qs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c = f q\n  q \\<in> set qs\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> set (map f qs) \\<Longrightarrow>\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "hence *:\"\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 q\""], ["proof (prove)\nusing this:\n  c = f q\n  q \\<in> set qs\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set c.\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)", "using f qs_eq"], ["proof (prove)\nusing this:\n  c = f q\n  q \\<in> set qs\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        f q = c \\<and>\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n  set qs = prime_factors (p - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set c.\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> set (map f qs) \\<Longrightarrow>\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "have \"q < p\" \"q > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q < p &&& 0 < q", "using qlp \\<open>q \\<in> set qs\\<close> qs_eq prime_factors_gt_0_nat"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1). q < p\n  q \\<in> set qs\n  set qs = prime_factors (p - 1)\n  ?p \\<in># prime_factorization ?x \\<Longrightarrow> 0 < ?p\n\ngoal (1 subgoal):\n 1. q < p &&& 0 < q", "by auto"], ["proof (state)\nthis:\n  q < p\n  0 < q\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> set (map f qs) \\<Longrightarrow>\n       \\<forall>x\\<in>set c.\n          Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "show \"\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set c.\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set c \\<Longrightarrow>\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set c \\<Longrightarrow>\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "assume \"x \\<in> set c\""], ["proof (state)\nthis:\n  x \\<in> set c\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set c \\<Longrightarrow>\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "hence \"size_pratt x \\<le> 3 * log 2 q\""], ["proof (prove)\nusing this:\n  x \\<in> set c\n\ngoal (1 subgoal):\n 1. Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)", "using *"], ["proof (prove)\nusing this:\n  x \\<in> set c\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)\n\ngoal (1 subgoal):\n 1. Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)", "by fastforce"], ["proof (state)\nthis:\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set c \\<Longrightarrow>\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "also"], ["proof (state)\nthis:\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set c \\<Longrightarrow>\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "have \"\\<dots> \\<le> 3 * log 2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 * log 2 (real q) \\<le> 3 * log 2 (real p)", "using \\<open>q < p\\<close> \\<open>q > 0\\<close> \\<open>p > 3\\<close>"], ["proof (prove)\nusing this:\n  q < p\n  0 < q\n  3 < p\n\ngoal (1 subgoal):\n 1. 3 * log 2 (real q) \\<le> 3 * log 2 (real p)", "by simp"], ["proof (state)\nthis:\n  3 * log 2 (real q) \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set c \\<Longrightarrow>\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "finally"], ["proof (chain)\npicking this:\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "show \"size_pratt x \\<le> 3 * log 2 p\""], ["proof (prove)\nusing this:\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "."], ["proof (state)\nthis:\n  Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>c\\<in>set (map f qs).\n     \\<forall>x\\<in>set c.\n        Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have cs_valid_all: \"\\<forall>c \\<in> set ?cs . valid_cert c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (map f qs). valid_cert c", "using f qs_eq"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        f q = c \\<and>\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n  set qs = prime_factors (p - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>set (map f qs). valid_cert c", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>c\\<in>set (map f qs). valid_cert c\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<forall>x \\<in> set (build_fpc p a (p - 1) qs). size_pratt x \\<le> 3 * log 2 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a (p - 1) qs).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "using cs_cert_size a_size \\<open>p > 3\\<close> prod_qs_eq"], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (map f qs).\n     \\<forall>x\\<in>set c.\n        Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n  0 < a\n  a < p\n  3 < p\n  prod_list qs = p - 1\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a (p - 1) qs).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "by (intro size_pratt_fpc) auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "hence \"\\<forall>x \\<in> set (build_fpc p a (p - 1) qs @ concat ?cs) . size_pratt x \\<le> 3 * log 2 p\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a (p - 1) qs @ concat (map f qs)).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "using cs_cert_size"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n  \\<forall>c\\<in>set (map f qs).\n     \\<forall>x\\<in>set c.\n        Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (build_fpc p a (p - 1) qs @ concat (map f qs)).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs @ concat (map f qs)).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs @ concat (map f qs)).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"Triple p a (p - 1) \\<in> set (build_fpc p a (p - 1) qs @ concat ?cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Triple p a (p - 1)\n    \\<in> set (build_fpc p a (p - 1) qs @ concat (map f qs))", "by (cases qs) auto"], ["proof (state)\nthis:\n  Triple p a (p - 1)\n  \\<in> set (build_fpc p a (p - 1) qs @ concat (map f qs))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "moreover"], ["proof (state)\nthis:\n  Triple p a (p - 1)\n  \\<in> set (build_fpc p a (p - 1) qs @ concat (map f qs))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"valid_cert ((build_fpc p a (p - 1) qs)@ concat ?cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (build_fpc p a (p - 1) qs @ concat (map f qs))", "proof (rule correct_fpc)"], ["proof (state)\ngoal (6 subgoals):\n 1. valid_cert (concat (map f qs))\n 2. 1 < p\n 3. prod_list qs = p - 1\n 4. p - 1 \\<noteq> 0\n 5. \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))\n 6. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "show \"valid_cert (concat ?cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (concat (map f qs))", "using cs_valid_all"], ["proof (prove)\nusing this:\n  \\<forall>c\\<in>set (map f qs). valid_cert c\n\ngoal (1 subgoal):\n 1. valid_cert (concat (map f qs))", "by (auto simp: valid_cert_concatI)"], ["proof (state)\nthis:\n  valid_cert (concat (map f qs))\n\ngoal (5 subgoals):\n 1. 1 < p\n 2. prod_list qs = p - 1\n 3. p - 1 \\<noteq> 0\n 4. \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))\n 5. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "show \"prod_list qs = p - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list qs = p - 1", "by (rule prod_qs_eq)"], ["proof (state)\nthis:\n  prod_list qs = p - 1\n\ngoal (4 subgoals):\n 1. 1 < p\n 2. p - 1 \\<noteq> 0\n 3. \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))\n 4. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "show \"p - 1 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - 1 \\<noteq> 0", "using prime_gt_1_nat[OF \\<open>prime p\\<close>]"], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. p - 1 \\<noteq> 0", "by arith"], ["proof (state)\nthis:\n  p - 1 \\<noteq> 0\n\ngoal (3 subgoals):\n 1. 1 < p\n 2. \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))\n 3. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "show \"\\<forall> q \\<in> set qs . Prime q \\<in> set (concat ?cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))", "using concat_set[of \"prime_factors (p - 1)\"] cs qs_eq"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c\\<in>set ?cs. Prime q \\<in> set c \\<Longrightarrow>\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     Prime q \\<in> set (concat ?cs)\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c\\<in>set (map f qs).\n        Prime q \\<in> set c \\<and>\n        valid_cert c \\<and>\n        real (length c) \\<le> 6 * log 2 (real q) - 4 \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n  set qs = prime_factors (p - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))", "by blast"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set qs. Prime q \\<in> set (concat (map f qs))\n\ngoal (2 subgoals):\n 1. 1 < p\n 2. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "show \"\\<forall> q \\<in> set qs . [a^((p - 1) div q) \\<noteq> 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "using qs_eq a"], ["proof (prove)\nusing this:\n  set qs = prime_factors (p - 1)\n  [a ^ (p - 1) = 1] (mod p) \\<and>\n  (\\<forall>q.\n      q \\<in># prime_factorization (p - 1) \\<longrightarrow>\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p))\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "by auto"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set qs. [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. 1 < p", "qed (insert \\<open>p > 3\\<close>, simp_all)"], ["proof (state)\nthis:\n  valid_cert (build_fpc p a (p - 1) qs @ concat (map f qs))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "moreover"], ["proof (state)\nthis:\n  valid_cert (build_fpc p a (p - 1) qs @ concat (map f qs))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "{"], ["proof (state)\nthis:\n  valid_cert (build_fpc p a (p - 1) qs @ concat (map f qs))\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "let ?k = \"length qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have qs_ge_2:\"\\<forall>q \\<in> set qs . q \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set qs. 2 \\<le> q", "using qs_eq"], ["proof (prove)\nusing this:\n  set qs = prime_factors (p - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>q\\<in>set qs. 2 \\<le> q", "by (auto intro: prime_ge_2_nat)"], ["proof (state)\nthis:\n  \\<forall>q\\<in>set qs. 2 \\<le> q\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<forall>x\\<in>set qs. real (length (f x)) \\<le> 6 * log 2 (real x) - 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set qs. real (length (f x)) \\<le> 6 * log 2 (real x) - 4", "using f qs_eq"], ["proof (prove)\nusing this:\n  \\<forall>q\\<in>#prime_factorization (p - 1).\n     \\<exists>c.\n        f q = c \\<and>\n        (Prime q \\<in> set c \\<and>\n         valid_cert c \\<and>\n         real (length c) \\<le> 6 * log 2 (real q) - 4) \\<and>\n        (\\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real q))\n  set qs = prime_factors (p - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set qs. real (length (f x)) \\<le> 6 * log 2 (real x) - 4", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set qs. real (length (f x)) \\<le> 6 * log 2 (real x) - 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "hence \"length (concat ?cs) \\<le> (\\<Sum>q\\<leftarrow>qs. 6*log 2 q - 4)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set qs. real (length (f x)) \\<le> 6 * log 2 (real x) - 4\n\ngoal (1 subgoal):\n 1. real (length (concat (map f qs)))\n    \\<le> (\\<Sum>q\\<leftarrow>qs. 6 * log 2 (real q) - 4)", "using concat_length_le"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set qs. real (length (f x)) \\<le> 6 * log 2 (real x) - 4\n  \\<forall>x\\<in>set ?xs. real (length (?f x)) \\<le> ?g x \\<Longrightarrow>\n  real (length (concat (map ?f ?xs))) \\<le> sum_list (map ?g ?xs)\n\ngoal (1 subgoal):\n 1. real (length (concat (map f qs)))\n    \\<le> (\\<Sum>q\\<leftarrow>qs. 6 * log 2 (real q) - 4)", "by fast"], ["proof (state)\nthis:\n  real (length (concat (map f qs)))\n  \\<le> (\\<Sum>q\\<leftarrow>qs. 6 * log 2 (real q) - 4)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "hence \"length (Prime p # ((build_fpc p a (p - 1) qs)@ concat ?cs))\n            \\<le> ((\\<Sum>q\\<leftarrow>(map real qs). 6*log 2 q - 4) + ?k + 2)\""], ["proof (prove)\nusing this:\n  real (length (concat (map f qs)))\n  \\<le> (\\<Sum>q\\<leftarrow>qs. 6 * log 2 (real q) - 4)\n\ngoal (1 subgoal):\n 1. real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n    \\<le> (\\<Sum>q\\<leftarrow>map real qs. 6 * log 2 q - 4) +\n          real (length qs) +\n          2", "by (simp add: o_def length_fpc)"], ["proof (state)\nthis:\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> (\\<Sum>q\\<leftarrow>map real qs. 6 * log 2 q - 4) +\n        real (length qs) +\n        2\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> (\\<Sum>q\\<leftarrow>map real qs. 6 * log 2 q - 4) +\n        real (length qs) +\n        2\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<dots> = (6*(\\<Sum>q\\<leftarrow>(map real qs). log 2 q) + (-4 * real ?k) + ?k + 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>q\\<leftarrow>map real qs. 6 * log 2 q - 4) + real (length qs) +\n    2 =\n    6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n    real (length qs) +\n    2", "by (simp add: o_def sum_list_subtractf sum_list_triv sum_list_const_mult)"], ["proof (state)\nthis:\n  (\\<Sum>q\\<leftarrow>map real qs. 6 * log 2 q - 4) + real (length qs) + 2 =\n  6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n  real (length qs) +\n  2\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  (\\<Sum>q\\<leftarrow>map real qs. 6 * log 2 q - 4) + real (length qs) + 2 =\n  6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n  real (length qs) +\n  2\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<dots> \\<le> 6*log 2 (p - 1) - 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n    real (length qs) +\n    2\n    \\<le> 6 * log 2 (real (p - 1)) - 4", "using \\<open>?k\\<ge>2\\<close> prod_qs_eq sum_list_log[of 2 qs] qs_ge_2"], ["proof (prove)\nusing this:\n  2 \\<le> length qs\n  prod_list qs = p - 1\n  \\<lbrakk>0 < 2; 2 \\<noteq> 1;\n   \\<forall>x\\<in>set qs. 2 \\<le> real x\\<rbrakk>\n  \\<Longrightarrow> sum_list (map (log 2) (map real qs)) =\n                    log 2 (real (prod_list qs))\n  \\<forall>q\\<in>set qs. 2 \\<le> q\n\ngoal (1 subgoal):\n 1. 6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n    real (length qs) +\n    2\n    \\<le> 6 * log 2 (real (p - 1)) - 4", "by force"], ["proof (state)\nthis:\n  6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n  real (length qs) +\n  2\n  \\<le> 6 * log 2 (real (p - 1)) - 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  6 * sum_list (map (log 2) (map real qs)) + - 4 * real (length qs) +\n  real (length qs) +\n  2\n  \\<le> 6 * log 2 (real (p - 1)) - 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "have \"\\<dots> \\<le> 6*log 2 p - 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 6 * log 2 (real (p - 1)) - 4 \\<le> 6 * log 2 (real p) - 4", "using log_le_cancel_iff[of 2 \"p - 1\" p] \\<open>p>3\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>1 < 2; 0 < real (p - 1); 0 < real p\\<rbrakk>\n  \\<Longrightarrow> (log 2 (real (p - 1)) \\<le> log 2 (real p)) =\n                    (real (p - 1) \\<le> real p)\n  3 < p\n\ngoal (1 subgoal):\n 1. 6 * log 2 (real (p - 1)) - 4 \\<le> 6 * log 2 (real p) - 4", "by force"], ["proof (state)\nthis:\n  6 * log 2 (real (p - 1)) - 4 \\<le> 6 * log 2 (real p) - 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "ultimately"], ["proof (chain)\npicking this:\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> 6 * log 2 (real (p - 1)) - 4\n  6 * log 2 (real (p - 1)) - 4 \\<le> 6 * log 2 (real p) - 4", "have \"length (Prime p # ((build_fpc p a (p - 1) qs)@ concat ?cs))\n                       \\<le> 6*log 2 p - 4\""], ["proof (prove)\nusing this:\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> 6 * log 2 (real (p - 1)) - 4\n  6 * log 2 (real (p - 1)) - 4 \\<le> 6 * log 2 (real p) - 4\n\ngoal (1 subgoal):\n 1. real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n    \\<le> 6 * log 2 (real p) - 4", "by linarith"], ["proof (state)\nthis:\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> 6 * log 2 (real p) - 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "}"], ["proof (state)\nthis:\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> 6 * log 2 (real p) - 4\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs @ concat (map f qs)).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n  Triple p a (p - 1)\n  \\<in> set (build_fpc p a (p - 1) qs @ concat (map f qs))\n  valid_cert (build_fpc p a (p - 1) qs @ concat (map f qs))\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> 6 * log 2 (real p) - 4", "obtain c where c:\"Triple p a (p - 1) \\<in> set c\" \"valid_cert c\"\n                               \"length (Prime p #c) \\<le> 6*log 2 p - 4\"\n                               \"(\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 p)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (build_fpc p a (p - 1) qs @ concat (map f qs)).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n  Triple p a (p - 1)\n  \\<in> set (build_fpc p a (p - 1) qs @ concat (map f qs))\n  valid_cert (build_fpc p a (p - 1) qs @ concat (map f qs))\n  real (length (Prime p # build_fpc p a (p - 1) qs @ concat (map f qs)))\n  \\<le> 6 * log 2 (real p) - 4\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>Triple p a (p - 1) \\<in> set c; valid_cert c;\n         real (length (Prime p # c)) \\<le> 6 * log 2 (real p) - 4;\n         \\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Triple p a (p - 1) \\<in> set c\n  valid_cert c\n  real (length (Prime p # c)) \\<le> 6 * log 2 (real p) - 4\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "hence \"Prime p \\<in> set (Prime p # c)\" \"valid_cert (Prime p # c)\"\n         \"(\\<forall> x \\<in> set (Prime p # c). size_pratt x \\<le> 3 * log 2 p)\""], ["proof (prove)\nusing this:\n  Triple p a (p - 1) \\<in> set c\n  valid_cert c\n  real (length (Prime p # c)) \\<le> 6 * log 2 (real p) - 4\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. Prime p \\<in> set (Prime p # c) &&&\n    valid_cert (Prime p # c) &&&\n    \\<forall>x\\<in>set (Prime p # c).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "using a \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  Triple p a (p - 1) \\<in> set c\n  valid_cert c\n  real (length (Prime p # c)) \\<le> 6 * log 2 (real p) - 4\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n  [a ^ (p - 1) = 1] (mod p) \\<and>\n  (\\<forall>q.\n      q \\<in># prime_factorization (p - 1) \\<longrightarrow>\n      [a ^ ((p - 1) div q) \\<noteq> 1] (mod p))\n  prime p\n\ngoal (1 subgoal):\n 1. Prime p \\<in> set (Prime p # c) &&&\n    valid_cert (Prime p # c) &&&\n    \\<forall>x\\<in>set (Prime p # c).\n       Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)", "by (auto simp: Primes.prime_gt_Suc_0_nat)"], ["proof (state)\nthis:\n  Prime p \\<in> set (Prime p # c)\n  valid_cert (Prime p # c)\n  \\<forall>x\\<in>set (Prime p # c).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. 3 < p \\<Longrightarrow>\n    \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "thus ?case"], ["proof (prove)\nusing this:\n  Prime p \\<in> set (Prime p # c)\n  valid_cert (Prime p # c)\n  \\<forall>x\\<in>set (Prime p # c).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "using c"], ["proof (prove)\nusing this:\n  Prime p \\<in> set (Prime p # c)\n  valid_cert (Prime p # c)\n  \\<forall>x\\<in>set (Prime p # c).\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n  Triple p a (p - 1) \\<in> set c\n  valid_cert c\n  real (length (Prime p # c)) \\<le> 6 * log 2 (real p) - 4\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n       (\\<forall>x\\<in>set c.\n           Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))", "by blast"], ["proof (state)\nthis:\n  \\<exists>c.\n     Prime p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n     (\\<forall>x\\<in>set c.\n         Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c.\n     Prime p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     real (length c) \\<le> 6 * log 2 (real p) - 4 \\<and>\n     (\\<forall>x\\<in>set c.\n         Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We now recapitulate our results. A number $p$ is prime if and only if there\n  is a certificate for $p$. Moreover, for a prime $p$ there always is a certificate\n  whose size is polynomially bounded in the logarithm of $p$.\n\\<close>"], ["", "corollary pratt:\n  \"prime p \\<longleftrightarrow> (\\<exists>c. Prime p \\<in> set c \\<and> valid_cert c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p = (\\<exists>c. Prime p \\<in> set c \\<and> valid_cert c)", "using pratt_complete' pratt_sound(1)"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow>\n  \\<exists>c.\n     Prime ?p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     real (length c) \\<le> 6 * log 2 (real ?p) - 4 \\<and>\n     (\\<forall>x\\<in>set c.\n         Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real ?p))\n  \\<lbrakk>valid_cert ?c; ?t \\<in> set ?c\\<rbrakk>\n  \\<Longrightarrow> (?t = Prime ?p \\<longrightarrow> prime ?p) \\<and>\n                    (?t = Triple ?p ?a ?x \\<longrightarrow>\n                     (\\<forall>q\\<in>#prime_factorization ?x.\n                         [?a ^ ((?p - 1) div q) \\<noteq> 1] (mod ?p)) \\<and>\n                     0 < ?x)\n\ngoal (1 subgoal):\n 1. prime p = (\\<exists>c. Prime p \\<in> set c \\<and> valid_cert c)", "by blast"], ["", "corollary pratt_size:\n  assumes \"prime p\"\n  shows \"\\<exists>c. Prime p \\<in> set c \\<and> valid_cert c \\<and> size_cert c \\<le> (6 * log 2 p - 4) * (1 + 3 * log 2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "obtain c where c: \"Prime p \\<in> set c\" \"valid_cert c\"\n      and len: \"length c \\<le> 6*log 2 p - 4\" and \"(\\<forall> x \\<in> set c. size_pratt x \\<le> 3 * log 2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>Prime p \\<in> set c; valid_cert c;\n         real (length c) \\<le> 6 * log 2 (real p) - 4;\n         \\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pratt_complete' assms"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow>\n  \\<exists>c.\n     Prime ?p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     real (length c) \\<le> 6 * log 2 (real ?p) - 4 \\<and>\n     (\\<forall>x\\<in>set c.\n         Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real ?p))\n  prime p\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>Prime p \\<in> set c; valid_cert c;\n         real (length c) \\<le> 6 * log 2 (real p) - 4;\n         \\<forall>x\\<in>set c.\n            Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Prime p \\<in> set c\n  valid_cert c\n  real (length c) \\<le> 6 * log 2 (real p) - 4\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "hence \"size_cert c \\<le> length c * (1 + 3 * log 2 p)\""], ["proof (prove)\nusing this:\n  Prime p \\<in> set c\n  valid_cert c\n  real (length c) \\<le> 6 * log 2 (real p) - 4\n  \\<forall>x\\<in>set c.\n     Pratt_Certificate.size_pratt x \\<le> 3 * log 2 (real p)\n\ngoal (1 subgoal):\n 1. size_cert c \\<le> real (length c) * (1 + 3 * log 2 (real p))", "by (simp add: size_pratt_le)"], ["proof (state)\nthis:\n  size_cert c \\<le> real (length c) * (1 + 3 * log 2 (real p))\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "also"], ["proof (state)\nthis:\n  size_cert c \\<le> real (length c) * (1 + 3 * log 2 (real p))\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "have \"\\<dots> \\<le> (6*log 2 p - 4) * (1 + 3 * log 2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (length c) * (1 + 3 * log 2 (real p))\n    \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "using len"], ["proof (prove)\nusing this:\n  real (length c) \\<le> 6 * log 2 (real p) - 4\n\ngoal (1 subgoal):\n 1. real (length c) * (1 + 3 * log 2 (real p))\n    \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "by simp"], ["proof (state)\nthis:\n  real (length c) * (1 + 3 * log 2 (real p))\n  \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "finally"], ["proof (chain)\npicking this:\n  size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "show ?thesis"], ["proof (prove)\nusing this:\n  size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "using c"], ["proof (prove)\nusing this:\n  size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))\n  Prime p \\<in> set c\n  valid_cert c\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Prime p \\<in> set c \\<and>\n       valid_cert c \\<and>\n       size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))", "by blast"], ["proof (state)\nthis:\n  \\<exists>c.\n     Prime p \\<in> set c \\<and>\n     valid_cert c \\<and>\n     size_cert c \\<le> (6 * log 2 (real p) - 4) * (1 + 3 * log 2 (real p))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Efficient modular exponentiation\\<close>"], ["", "locale efficient_power =\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  assumes f_assoc: \"\\<And>x z. f x (f x z) = f (f x x) z\"\nbegin"], ["", "function efficient_power :: \"'a \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a\" where\n  \"efficient_power y x 0 = y\"\n| \"efficient_power y x (Suc 0) = f x y\"\n| \"n \\<noteq> 0 \\<Longrightarrow> even n \\<Longrightarrow> efficient_power y x n = efficient_power y (f x x) (n div 2)\"\n| \"n \\<noteq> 1 \\<Longrightarrow> odd n \\<Longrightarrow> efficient_power y x n = efficient_power (f x y) (f x x) (n div 2)\""], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>y xa. x = (y, xa, 0) \\<Longrightarrow> P;\n        \\<And>y xa. x = (y, xa, Suc 0) \\<Longrightarrow> P;\n        \\<And>n y xa.\n           \\<lbrakk>n \\<noteq> 0; even n; x = (y, xa, n)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>n y xa.\n           \\<lbrakk>n \\<noteq> 1; odd n; x = (y, xa, n)\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>y x ya xa. (y, x, 0) = (ya, xa, 0) \\<Longrightarrow> y = ya\n 3. \\<And>y x ya xa.\n       (y, x, 0) = (ya, xa, Suc 0) \\<Longrightarrow> y = f xa ya\n 4. \\<And>y x n ya xa.\n       \\<lbrakk>n \\<noteq> 0; even n; (y, x, 0) = (ya, xa, n)\\<rbrakk>\n       \\<Longrightarrow> y = efficient_power_sumC (ya, f xa xa, n div 2)\n 5. \\<And>y x n ya xa.\n       \\<lbrakk>n \\<noteq> 1; odd n; (y, x, 0) = (ya, xa, n)\\<rbrakk>\n       \\<Longrightarrow> y =\n                         efficient_power_sumC (f xa ya, f xa xa, n div 2)\n 6. \\<And>y x ya xa.\n       (y, x, Suc 0) = (ya, xa, Suc 0) \\<Longrightarrow> f x y = f xa ya\n 7. \\<And>y x n ya xa.\n       \\<lbrakk>n \\<noteq> 0; even n; (y, x, Suc 0) = (ya, xa, n)\\<rbrakk>\n       \\<Longrightarrow> f x y = efficient_power_sumC (ya, f xa xa, n div 2)\n 8. \\<And>y x n ya xa.\n       \\<lbrakk>n \\<noteq> 1; odd n; (y, x, Suc 0) = (ya, xa, n)\\<rbrakk>\n       \\<Longrightarrow> f x y =\n                         efficient_power_sumC (f xa ya, f xa xa, n div 2)\n 9. \\<And>n y x na ya xa.\n       \\<lbrakk>n \\<noteq> 0; even n; na \\<noteq> 0; even na;\n        (y, x, n) = (ya, xa, na)\\<rbrakk>\n       \\<Longrightarrow> efficient_power_sumC (y, f x x, n div 2) =\n                         efficient_power_sumC (ya, f xa xa, na div 2)\n 10. \\<And>n y x na ya xa.\n        \\<lbrakk>n \\<noteq> 0; even n; na \\<noteq> 1; odd na;\n         (y, x, n) = (ya, xa, na)\\<rbrakk>\n        \\<Longrightarrow> efficient_power_sumC (y, f x x, n div 2) =\n                          efficient_power_sumC (f xa ya, f xa xa, na div 2)\nA total of 11 subgoals...", "by force+"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All efficient_power_dom", "by (relation \"measure (snd \\<circ> snd)\") (auto elim: oddE)"], ["", "lemma efficient_power_code:\n  \"efficient_power y x n =\n     (if n = 0 then y\n      else if n = 1 then f x y\n      else if even n then efficient_power y (f x x) (n div 2)\n      else efficient_power (f x y) (f x x) (n div 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.efficient_power y x n =\n    (if n = 0 then y\n     else if n = 1 then f x y\n          else if even n then local.efficient_power y (f x x) (n div 2)\n               else local.efficient_power (f x y) (f x x) (n div 2))", "by (induction y x n rule: efficient_power.induct) auto"], ["", "lemma efficient_power_correct: \"efficient_power y x n = (f x ^^ n) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.efficient_power y x n = (f x ^^ n) y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.efficient_power y x n = (f x ^^ n) y", "have [simp]: \"f ^^ 2 = (\\<lambda>x. f (f x))\" for f :: \"'a \\<Rightarrow> 'a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ^^ 2 = (\\<lambda>x. f (f x))", "by (simp add: eval_nat_numeral o_def)"], ["proof (state)\nthis:\n  ?f ^^ 2 = (\\<lambda>x. ?f (?f x))\n\ngoal (1 subgoal):\n 1. local.efficient_power y x n = (f x ^^ n) y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.efficient_power y x n = (f x ^^ n) y", "by (induction y x n rule: efficient_power.induct)\n       (auto elim!: evenE oddE simp: funpow_mult [symmetric] funpow_Suc_right f_assoc\n             simp del: funpow.simps(2))"], ["proof (state)\nthis:\n  local.efficient_power y x n = (f x ^^ n) y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "interpretation mod_exp_nat: efficient_power \"\\<lambda>x y :: nat. (x * y) mod m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. efficient_power (\\<lambda>x y. x * y mod m)", "by standard (simp add: mod_mult_left_eq mod_mult_right_eq mult_ac)"], ["", "definition mod_exp_nat_aux where \"mod_exp_nat_aux = mod_exp_nat.efficient_power\""], ["", "lemma mod_exp_nat_aux_code [code]:\n  \"mod_exp_nat_aux m y x n =\n     (if n = 0 then y\n      else if n = 1 then (x * y) mod m\n      else if even n then mod_exp_nat_aux m y ((x * x) mod m) (n div 2)\n      else mod_exp_nat_aux m ((x * y) mod m) ((x * x) mod m) (n div 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n =\n    (if n = 0 then y\n     else if n = 1 then x * y mod m\n          else if even n then mod_exp_nat_aux m y (x * x mod m) (n div 2)\n               else mod_exp_nat_aux m (x * y mod m) (x * x mod m) (n div 2))", "unfolding mod_exp_nat_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat.efficient_power m y x n =\n    (if n = 0 then y\n     else if n = 1 then x * y mod m\n          else if even n\n               then mod_exp_nat.efficient_power m y (x * x mod m) (n div 2)\n               else mod_exp_nat.efficient_power m (x * y mod m)\n                     (x * x mod m) (n div 2))", "by (rule mod_exp_nat.efficient_power_code)"], ["", "lemma mod_exp_nat_aux_correct:\n  \"mod_exp_nat_aux m y x n mod m = (x ^ n * y) mod m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "have \"mod_exp_nat_aux m y x n = ((\\<lambda>y. x * y mod m) ^^ n) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n = ((\\<lambda>y. x * y mod m) ^^ n) y", "by (simp add: mod_exp_nat_aux_def mod_exp_nat.efficient_power_correct)"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x n = ((\\<lambda>y. x * y mod m) ^^ n) y\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "also"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x n = ((\\<lambda>y. x * y mod m) ^^ n) y\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "have \"((\\<lambda>y. x * y mod m) ^^ n) y mod m = (x ^ n * y) mod m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x ^ n * y mod m", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((\\<lambda>y. x * y mod m) ^^ 0) y mod m = x ^ 0 * y mod m\n 2. \\<And>n.\n       ((\\<lambda>y. x * y mod m) ^^ n) y mod m =\n       x ^ n * y mod m \\<Longrightarrow>\n       ((\\<lambda>y. x * y mod m) ^^ Suc n) y mod m = x ^ Suc n * y mod m", "case (Suc n)"], ["proof (state)\nthis:\n  ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x ^ n * y mod m\n\ngoal (2 subgoals):\n 1. ((\\<lambda>y. x * y mod m) ^^ 0) y mod m = x ^ 0 * y mod m\n 2. \\<And>n.\n       ((\\<lambda>y. x * y mod m) ^^ n) y mod m =\n       x ^ n * y mod m \\<Longrightarrow>\n       ((\\<lambda>y. x * y mod m) ^^ Suc n) y mod m = x ^ Suc n * y mod m", "hence \"x * ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x * x ^ n * y mod m\""], ["proof (prove)\nusing this:\n  ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x ^ n * y mod m\n\ngoal (1 subgoal):\n 1. x * ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x * x ^ n * y mod m", "by (metis mod_mult_right_eq mult.assoc)"], ["proof (state)\nthis:\n  x * ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x * x ^ n * y mod m\n\ngoal (2 subgoals):\n 1. ((\\<lambda>y. x * y mod m) ^^ 0) y mod m = x ^ 0 * y mod m\n 2. \\<And>n.\n       ((\\<lambda>y. x * y mod m) ^^ n) y mod m =\n       x ^ n * y mod m \\<Longrightarrow>\n       ((\\<lambda>y. x * y mod m) ^^ Suc n) y mod m = x ^ Suc n * y mod m", "thus ?case"], ["proof (prove)\nusing this:\n  x * ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x * x ^ n * y mod m\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y. x * y mod m) ^^ Suc n) y mod m = x ^ Suc n * y mod m", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>y. x * y mod m) ^^ Suc n) y mod m = x ^ Suc n * y mod m\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y. x * y mod m) ^^ 0) y mod m = x ^ 0 * y mod m", "qed auto"], ["proof (state)\nthis:\n  ((\\<lambda>y. x * y mod m) ^^ n) y mod m = x ^ n * y mod m\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "finally"], ["proof (chain)\npicking this:\n  mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "show ?thesis"], ["proof (prove)\nusing this:\n  mod_exp_nat_aux m y x n mod m = x ^ n * y mod m\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x n mod m = x ^ n * y mod m", "."], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x n mod m = x ^ n * y mod m\n\ngoal:\nNo subgoals!", "qed"], ["", "definition mod_exp_nat :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\"\n  where [code_abbrev]: \"mod_exp_nat b e m = (b ^ e) mod m\""], ["", "lemma mod_exp_nat_code [code]: \"mod_exp_nat b e m = mod_exp_nat_aux m 1 b e mod m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat b e m = mod_exp_nat_aux m 1 b e mod m", "by (simp add: mod_exp_nat_def mod_exp_nat_aux_correct)"], ["", "lemmas [code_unfold] = cong_def"], ["", "lemma eval_mod_exp_nat_aux [simp]:\n  \"mod_exp_nat_aux m y x 0 = y\"\n  \"mod_exp_nat_aux m y x (Suc 0) = (x * y) mod m\"\n  \"mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n     mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\"\n  \"mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n     mod_exp_nat_aux m ((x * y) mod m) (x\\<^sup>2 mod m) (numeral n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mod_exp_nat_aux m y x 0 = y &&&\n     mod_exp_nat_aux m y x (Suc 0) = x * y mod m) &&&\n    mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n) &&&\n    mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. mod_exp_nat_aux m y x 0 = y\n 2. mod_exp_nat_aux m y x (Suc 0) = x * y mod m\n 3. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 4. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "define n' where \"n' = (numeral n :: nat)\""], ["proof (state)\nthis:\n  n' = numeral n\n\ngoal (4 subgoals):\n 1. mod_exp_nat_aux m y x 0 = y\n 2. mod_exp_nat_aux m y x (Suc 0) = x * y mod m\n 3. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 4. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "have [simp]: \"n' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<noteq> 0", "by (auto simp: n'_def)"], ["proof (state)\nthis:\n  n' \\<noteq> 0\n\ngoal (4 subgoals):\n 1. mod_exp_nat_aux m y x 0 = y\n 2. mod_exp_nat_aux m y x (Suc 0) = x * y mod m\n 3. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 4. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "show \"mod_exp_nat_aux m y x 0 = y\" and \"mod_exp_nat_aux m y x (Suc 0) = (x * y) mod m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x 0 = y &&&\n    mod_exp_nat_aux m y x (Suc 0) = x * y mod m", "by (simp_all add: mod_exp_nat_aux_def)"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x 0 = y\n  mod_exp_nat_aux m y x (Suc 0) = x * y mod m\n\ngoal (2 subgoals):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 2. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "have \"numeral (num.Bit0 n) = (2 * n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral (num.Bit0 n) = 2 * n'", "by (subst numeral.numeral_Bit0) (simp del: arith_simps add: n'_def)"], ["proof (state)\nthis:\n  numeral (num.Bit0 n) = 2 * n'\n\ngoal (2 subgoals):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 2. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "also"], ["proof (state)\nthis:\n  numeral (num.Bit0 n) = 2 * n'\n\ngoal (2 subgoals):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 2. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "have \"mod_exp_nat_aux m y x \\<dots> = mod_exp_nat_aux m y (x^2 mod m) n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (2 * n') =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) n'", "by (subst mod_exp_nat_aux_code) (simp_all add: power2_eq_square)"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x (2 * n') = mod_exp_nat_aux m y (x\\<^sup>2 mod m) n'\n\ngoal (2 subgoals):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n 2. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "finally"], ["proof (chain)\npicking this:\n  mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n  mod_exp_nat_aux m y (x\\<^sup>2 mod m) n'", "show \"mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n                  mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\""], ["proof (prove)\nusing this:\n  mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n  mod_exp_nat_aux m y (x\\<^sup>2 mod m) n'\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n    mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)", "by (simp add: n'_def)"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x (numeral (num.Bit0 n)) =\n  mod_exp_nat_aux m y (x\\<^sup>2 mod m) (numeral n)\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "have \"numeral (num.Bit1 n) = Suc (2 * n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral (num.Bit1 n) = Suc (2 * n')", "by (subst numeral.numeral_Bit1) (simp del: arith_simps add: n'_def)"], ["proof (state)\nthis:\n  numeral (num.Bit1 n) = Suc (2 * n')\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "also"], ["proof (state)\nthis:\n  numeral (num.Bit1 n) = Suc (2 * n')\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "have \"mod_exp_nat_aux m y x \\<dots> = mod_exp_nat_aux m ((x * y) mod m) (x^2 mod m) n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (Suc (2 * n')) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) n'", "by (subst mod_exp_nat_aux_code) (simp_all add: power2_eq_square)"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x (Suc (2 * n')) =\n  mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) n'\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "finally"], ["proof (chain)\npicking this:\n  mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n  mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) n'", "show \"mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n                  mod_exp_nat_aux m ((x * y) mod m) (x\\<^sup>2 mod m) (numeral n)\""], ["proof (prove)\nusing this:\n  mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n  mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) n'\n\ngoal (1 subgoal):\n 1. mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n    mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)", "by (simp add: n'_def)"], ["proof (state)\nthis:\n  mod_exp_nat_aux m y x (numeral (num.Bit1 n)) =\n  mod_exp_nat_aux m (x * y mod m) (x\\<^sup>2 mod m) (numeral n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_mod_exp [simp]:\n  \"mod_exp_nat b' 0 m' = 1 mod m'\"\n  \"mod_exp_nat b' 1 m' = b' mod m'\"\n  \"mod_exp_nat b' (Suc 0) m' = b' mod m'\"\n  \"mod_exp_nat b' e' 0 = b' ^ e'\"  \n  \"mod_exp_nat b' e' 1 = 0\"\n  \"mod_exp_nat b' e' (Suc 0) = 0\"\n  \"mod_exp_nat 0 1 m' = 0\"\n  \"mod_exp_nat 0 (Suc 0) m' = 0\"\n  \"mod_exp_nat 0 (numeral e) m' = 0\"\n  \"mod_exp_nat 1 e' m' = 1 mod m'\"\n  \"mod_exp_nat (Suc 0) e' m' = 1 mod m'\"\n  \"mod_exp_nat (numeral b) (numeral e) (numeral m) =\n     mod_exp_nat_aux (numeral m) 1 (numeral b) (numeral e) mod numeral m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((mod_exp_nat b' 0 m' = 1 mod m' &&&\n      mod_exp_nat b' 1 m' = b' mod m' &&&\n      mod_exp_nat b' (Suc 0) m' = b' mod m') &&&\n     mod_exp_nat b' e' 0 = b' ^ e' &&&\n     mod_exp_nat b' e' 1 = 0 &&& mod_exp_nat b' e' (Suc 0) = 0) &&&\n    (mod_exp_nat 0 1 m' = 0 &&&\n     mod_exp_nat 0 (Suc 0) m' = 0 &&& mod_exp_nat 0 (numeral e) m' = 0) &&&\n    mod_exp_nat 1 e' m' = 1 mod m' &&&\n    mod_exp_nat (Suc 0) e' m' = 1 mod m' &&&\n    mod_exp_nat (numeral b) (numeral e) (numeral m) =\n    mod_exp_nat_aux (numeral m) 1 (numeral b) (numeral e) mod numeral m", "by (simp_all add: mod_exp_nat_def mod_exp_nat_aux_correct)"], ["", "subsection \\<open>Executable certificate checker\\<close>"], ["", "lemmas [code] = valid_cert.simps(1)"], ["", "context\nbegin"], ["", "lemma valid_cert_Cons1 [code]:\n  \"valid_cert (Prime p # xs) \\<longleftrightarrow>\n     p > 1 \\<and> (\\<exists>t\\<in>set xs. case t of Prime _ \\<Rightarrow> False | \n     Triple p' a x \\<Rightarrow> p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p-1) p = 1 ) \\<and> valid_cert xs\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (Prime p # xs) =\n    (1 < p \\<and>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a x \\<Rightarrow>\n             p' = p \\<and>\n             x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n     valid_cert xs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. valid_cert (Prime p # xs) \\<Longrightarrow>\n    1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs\n 2. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "assume ?lhs"], ["proof (state)\nthis:\n  valid_cert (Prime p # xs)\n\ngoal (2 subgoals):\n 1. valid_cert (Prime p # xs) \\<Longrightarrow>\n    1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs\n 2. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "thus ?rhs"], ["proof (prove)\nusing this:\n  valid_cert (Prime p # xs)\n\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs", "by (auto simp: mod_exp_nat_def cong_def split: pratt.splits)"], ["proof (state)\nthis:\n  1 < p \\<and>\n  (\\<exists>t\\<in>set xs.\n      case t of Prime x \\<Rightarrow> False\n      | Triple p' a x \\<Rightarrow>\n          p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "assume ?rhs"], ["proof (state)\nthis:\n  1 < p \\<and>\n  (\\<exists>t\\<in>set xs.\n      case t of Prime x \\<Rightarrow> False\n      | Triple p' a x \\<Rightarrow>\n          p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "hence \"p > 1\" \"valid_cert xs\""], ["proof (prove)\nusing this:\n  1 < p \\<and>\n  (\\<exists>t\\<in>set xs.\n      case t of Prime x \\<Rightarrow> False\n      | Triple p' a x \\<Rightarrow>\n          p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 1 < p &&& valid_cert xs", "by blast+"], ["proof (state)\nthis:\n  1 < p\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "moreover"], ["proof (state)\nthis:\n  1 < p\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "from \\<open>?rhs\\<close>"], ["proof (chain)\npicking this:\n  1 < p \\<and>\n  (\\<exists>t\\<in>set xs.\n      case t of Prime x \\<Rightarrow> False\n      | Triple p' a x \\<Rightarrow>\n          p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n  valid_cert xs", "obtain t where \"t \\<in> set xs\" \"case t of Prime _ \\<Rightarrow> False | \n     Triple p' a x \\<Rightarrow> p' = p \\<and> x = p - 1 \\<and> [a^(p-1) = 1] (mod p)\""], ["proof (prove)\nusing this:\n  1 < p \\<and>\n  (\\<exists>t\\<in>set xs.\n      case t of Prime x \\<Rightarrow> False\n      | Triple p' a x \\<Rightarrow>\n          p' = p \\<and> x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> set xs;\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a x \\<Rightarrow>\n             p' = p \\<and>\n             x = p - 1 \\<and> [a ^ (p - 1) = 1] (mod p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: cong_def mod_exp_nat_def cong: pratt.case_cong)"], ["proof (state)\nthis:\n  t \\<in> set xs\n  case t of Prime x \\<Rightarrow> False\n  | Triple p' a x \\<Rightarrow>\n      p' = p \\<and> x = p - 1 \\<and> [a ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. 1 < p \\<and>\n    (\\<exists>t\\<in>set xs.\n        case t of Prime x \\<Rightarrow> False\n        | Triple p' a x \\<Rightarrow>\n            p' = p \\<and>\n            x = p - 1 \\<and> mod_exp_nat a (p - 1) p = 1) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Prime p # xs)", "ultimately"], ["proof (chain)\npicking this:\n  1 < p\n  valid_cert xs\n  t \\<in> set xs\n  case t of Prime x \\<Rightarrow> False\n  | Triple p' a x \\<Rightarrow>\n      p' = p \\<and> x = p - 1 \\<and> [a ^ (p - 1) = 1] (mod p)", "show ?lhs"], ["proof (prove)\nusing this:\n  1 < p\n  valid_cert xs\n  t \\<in> set xs\n  case t of Prime x \\<Rightarrow> False\n  | Triple p' a x \\<Rightarrow>\n      p' = p \\<and> x = p - 1 \\<and> [a ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. valid_cert (Prime p # xs)", "by (cases t) auto"], ["proof (state)\nthis:\n  valid_cert (Prime p # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma Suc_0_mod_eq_Suc_0_iff:\n  \"Suc 0 mod n = Suc 0 \\<longleftrightarrow> n \\<noteq> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc 0 mod n = Suc 0) = (n \\<noteq> Suc 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Suc 0 mod n = Suc 0) = (n \\<noteq> Suc 0)", "consider \"n = 0\" | \"n = Suc 0\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis;\n     n = Suc 0 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases n) auto"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis;\n   n = Suc 0 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (Suc 0 mod n = Suc 0) = (n \\<noteq> Suc 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis;\n   n = Suc 0 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (Suc 0 mod n = Suc 0) = (n \\<noteq> Suc 0)", "by cases auto"], ["proof (state)\nthis:\n  (Suc 0 mod n = Suc 0) = (n \\<noteq> Suc 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma Suc_0_eq_Suc_0_mod_iff:\n  \"Suc 0 = Suc 0 mod n \\<longleftrightarrow> n \\<noteq> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc 0 = Suc 0 mod n) = (n \\<noteq> Suc 0)", "using Suc_0_mod_eq_Suc_0_iff"], ["proof (prove)\nusing this:\n  (Suc 0 mod ?n = Suc 0) = (?n \\<noteq> Suc 0)\n\ngoal (1 subgoal):\n 1. (Suc 0 = Suc 0 mod n) = (n \\<noteq> Suc 0)", "by (simp add: eq_commute)"], ["", "lemma valid_cert_Cons2 [code]:\n  \"valid_cert (Triple p a x # xs) \\<longleftrightarrow> x > 0 \\<and> p > 1 \\<and> (x = 1 \\<or> (\n     (\\<exists>t\\<in>set xs. case t of Prime _ \\<Rightarrow> False |\n        Triple p' a' y \\<Rightarrow> p' = p \\<and> a' = a \\<and> y dvd x \\<and> \n        (let q = x div y in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p-1) div q) p \\<noteq> 1)))) \\<and> valid_cert xs\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (Triple p a x # xs) =\n    (0 < x \\<and>\n     1 < p \\<and>\n     (x = 1 \\<or>\n      (\\<exists>t\\<in>set xs.\n          case t of Prime x \\<Rightarrow> False\n          | Triple p' a' y \\<Rightarrow>\n              p' = p \\<and>\n              a' = a \\<and>\n              y dvd x \\<and>\n              (let q = x div y\n               in Prime q \\<in> set xs \\<and>\n                  mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n     valid_cert xs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. valid_cert (Triple p a x # xs) \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs\n 2. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "assume ?lhs"], ["proof (state)\nthis:\n  valid_cert (Triple p a x # xs)\n\ngoal (2 subgoals):\n 1. valid_cert (Triple p a x # xs) \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs\n 2. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "from \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  valid_cert (Triple p a x # xs)", "have pos: \"x > 0\" and gt_1: \"p > 1\" and valid: \"valid_cert xs\""], ["proof (prove)\nusing this:\n  valid_cert (Triple p a x # xs)\n\ngoal (1 subgoal):\n 1. 0 < x &&& 1 < p &&& valid_cert xs", "by simp_all"], ["proof (state)\nthis:\n  0 < x\n  1 < p\n  valid_cert xs\n\ngoal (2 subgoals):\n 1. valid_cert (Triple p a x # xs) \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs\n 2. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "show ?rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "proof (cases \"x = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs\n 2. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "case True"], ["proof (state)\nthis:\n  x = 1\n\ngoal (2 subgoals):\n 1. x = 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs\n 2. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "with \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  valid_cert (Triple p a x # xs)\n  x = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_cert (Triple p a x # xs)\n  x = 1\n\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "by auto"], ["proof (state)\nthis:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "with \\<open>?lhs\\<close>"], ["proof (chain)\npicking this:\n  valid_cert (Triple p a x # xs)\n  x \\<noteq> 1", "have \"(\\<exists>q y. x = q * y \\<and> Prime q \\<in> set xs \\<and> Triple p a y \\<in> set xs\n      \\<and> [a^((p - 1) div q) \\<noteq> 1] (mod p))\""], ["proof (prove)\nusing this:\n  valid_cert (Triple p a x # xs)\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<exists>q y.\n       x = q * y \\<and>\n       Prime q \\<in> set xs \\<and>\n       Triple p a y \\<in> set xs \\<and>\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "by auto"], ["proof (state)\nthis:\n  \\<exists>q y.\n     x = q * y \\<and>\n     Prime q \\<in> set xs \\<and>\n     Triple p a y \\<in> set xs \\<and>\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "then"], ["proof (chain)\npicking this:\n  \\<exists>q y.\n     x = q * y \\<and>\n     Prime q \\<in> set xs \\<and>\n     Triple p a y \\<in> set xs \\<and>\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "guess q y"], ["proof (prove)\nusing this:\n  \\<exists>q y.\n     x = q * y \\<and>\n     Prime q \\<in> set xs \\<and>\n     Triple p a y \\<in> set xs \\<and>\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. thesis", "by (elim exE conjE)"], ["proof (state)\nthis:\n  x = q * y\n  Prime q \\<in> set xs\n  Triple p a y \\<in> set xs\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "note qy = this"], ["proof (state)\nthis:\n  x = q * y\n  Prime q \\<in> set xs\n  Triple p a y \\<in> set xs\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "hence \"(\\<exists>t\\<in>set xs. case t of Prime _ \\<Rightarrow> False |\n        Triple p' a' y \\<Rightarrow> p' = p \\<and> a' = a \\<and> y dvd x \\<and> \n        (let q = x div y in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p-1) div q) p \\<noteq> 1))\""], ["proof (prove)\nusing this:\n  x = q * y\n  Prime q \\<in> set xs\n  Triple p a y \\<in> set xs\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)", "using pos gt_1"], ["proof (prove)\nusing this:\n  x = q * y\n  Prime q \\<in> set xs\n  Triple p a y \\<in> set xs\n  [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n  0 < x\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)", "by (intro bexI [of _ \"Triple p a y\"]) \n      (auto simp: Suc_0_mod_eq_Suc_0_iff Suc_0_eq_Suc_0_mod_iff cong_def mod_exp_nat_def)"], ["proof (state)\nthis:\n  \\<exists>t\\<in>set xs.\n     case t of Prime x \\<Rightarrow> False\n     | Triple p' a' y \\<Rightarrow>\n         p' = p \\<and>\n         a' = a \\<and>\n         y dvd x \\<and>\n         (let q = x div y\n          in Prime q \\<in> set xs \\<and>\n             mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow>\n    0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "with pos gt_1 valid"], ["proof (chain)\npicking this:\n  0 < x\n  1 < p\n  valid_cert xs\n  \\<exists>t\\<in>set xs.\n     case t of Prime x \\<Rightarrow> False\n     | Triple p' a' y \\<Rightarrow>\n         p' = p \\<and>\n         a' = a \\<and>\n         y dvd x \\<and>\n         (let q = x div y\n          in Prime q \\<in> set xs \\<and>\n             mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < x\n  1 < p\n  valid_cert xs\n  \\<exists>t\\<in>set xs.\n     case t of Prime x \\<Rightarrow> False\n     | Triple p' a' y \\<Rightarrow>\n         p' = p \\<and>\n         a' = a \\<and>\n         y dvd x \\<and>\n         (let q = x div y\n          in Prime q \\<in> set xs \\<and>\n             mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)\n\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs", "by blast"], ["proof (state)\nthis:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "assume ?rhs"], ["proof (state)\nthis:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "hence pos: \"x > 0\" and gt_1: \"p > 1\" and valid: \"valid_cert xs\""], ["proof (prove)\nusing this:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 0 < x &&& 1 < p &&& valid_cert xs", "by simp_all"], ["proof (state)\nthis:\n  0 < x\n  1 < p\n  valid_cert xs\n\ngoal (1 subgoal):\n 1. 0 < x \\<and>\n    1 < p \\<and>\n    (x = 1 \\<or>\n     (\\<exists>t\\<in>set xs.\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n    valid_cert xs \\<Longrightarrow>\n    valid_cert (Triple p a x # xs)", "show ?lhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_cert (Triple p a x # xs)", "proof (cases \"x = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)\n 2. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "case True"], ["proof (state)\nthis:\n  x = 1\n\ngoal (2 subgoals):\n 1. x = 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)\n 2. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "with \\<open>?rhs\\<close>"], ["proof (chain)\npicking this:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n  x = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n  x = 1\n\ngoal (1 subgoal):\n 1. valid_cert (Triple p a x # xs)", "by auto"], ["proof (state)\nthis:\n  valid_cert (Triple p a x # xs)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "with \\<open>?rhs\\<close>"], ["proof (chain)\npicking this:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n  x \\<noteq> 1", "obtain t where t: \"t \\<in> set xs\" \"case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow> p' = p \\<and> a' = a \\<and> y dvd x \\<and> (let q = x div y\n              in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)\""], ["proof (prove)\nusing this:\n  0 < x \\<and>\n  1 < p \\<and>\n  (x = 1 \\<or>\n   (\\<exists>t\\<in>set xs.\n       case t of Prime x \\<Rightarrow> False\n       | Triple p' a' y \\<Rightarrow>\n           p' = p \\<and>\n           a' = a \\<and>\n           y dvd x \\<and>\n           (let q = x div y\n            in Prime q \\<in> set xs \\<and>\n               mod_exp_nat a ((p - 1) div q) p \\<noteq> 1))) \\<and>\n  valid_cert xs\n  x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> set xs;\n         case t of Prime x \\<Rightarrow> False\n         | Triple p' a' y \\<Rightarrow>\n             p' = p \\<and>\n             a' = a \\<and>\n             y dvd x \\<and>\n             (let q = x div y\n              in Prime q \\<in> set xs \\<and>\n                 mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t \\<in> set xs\n  case t of Prime x \\<Rightarrow> False\n  | Triple p' a' y \\<Rightarrow>\n      p' = p \\<and>\n      a' = a \\<and>\n      y dvd x \\<and>\n      (let q = x div y\n       in Prime q \\<in> set xs \\<and>\n          mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "then"], ["proof (chain)\npicking this:\n  t \\<in> set xs\n  case t of Prime x \\<Rightarrow> False\n  | Triple p' a' y \\<Rightarrow>\n      p' = p \\<and>\n      a' = a \\<and>\n      y dvd x \\<and>\n      (let q = x div y\n       in Prime q \\<in> set xs \\<and>\n          mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)", "obtain y where y: \"t = Triple p a y\" \"y dvd x\" \"let q = x div y in Prime q \\<in> set xs \\<and> \n                              mod_exp_nat a ((p - 1) div q) p \\<noteq> 1\""], ["proof (prove)\nusing this:\n  t \\<in> set xs\n  case t of Prime x \\<Rightarrow> False\n  | Triple p' a' y \\<Rightarrow>\n      p' = p \\<and>\n      a' = a \\<and>\n      y dvd x \\<and>\n      (let q = x div y\n       in Prime q \\<in> set xs \\<and>\n          mod_exp_nat a ((p - 1) div q) p \\<noteq> 1)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>t = Triple p a y; y dvd x;\n         let q = x div y\n         in Prime q \\<in> set xs \\<and>\n            mod_exp_nat a ((p - 1) div q) p \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases t rule: pratt.exhaust) auto"], ["proof (state)\nthis:\n  t = Triple p a y\n  y dvd x\n  let q = x div y\n  in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p - 1) div q) p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "with gt_1"], ["proof (chain)\npicking this:\n  1 < p\n  t = Triple p a y\n  y dvd x\n  let q = x div y\n  in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p - 1) div q) p \\<noteq> 1", "have y': \"let q = x div y in Prime q \\<in> set xs \\<and> [a^((p - 1) div q) \\<noteq> 1] (mod p)\""], ["proof (prove)\nusing this:\n  1 < p\n  t = Triple p a y\n  y dvd x\n  let q = x div y\n  in Prime q \\<in> set xs \\<and> mod_exp_nat a ((p - 1) div q) p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. let q = x div y\n    in Prime q \\<in> set xs \\<and> [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "by (auto simp: cong_def Let_def mod_exp_nat_def Suc_0_mod_eq_Suc_0_iff Suc_0_eq_Suc_0_mod_iff)"], ["proof (state)\nthis:\n  let q = x div y\n  in Prime q \\<in> set xs \\<and> [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "define q where \"q = x div y\""], ["proof (state)\nthis:\n  q = x div y\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "have \"\\<exists>q y. x = q * y \\<and> Prime q \\<in> set xs \\<and> Triple p a y \\<in> set xs\n                     \\<and> [a^((p - 1) div q) \\<noteq> 1] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q y.\n       x = q * y \\<and>\n       Prime q \\<in> set xs \\<and>\n       Triple p a y \\<in> set xs \\<and>\n       [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "by (rule exI[of _ q], rule exI[of _ y]) (insert t y y', auto simp: Let_def q_def)"], ["proof (state)\nthis:\n  \\<exists>q y.\n     x = q * y \\<and>\n     Prime q \\<in> set xs \\<and>\n     Triple p a y \\<in> set xs \\<and>\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 1 \\<Longrightarrow> valid_cert (Triple p a x # xs)", "with pos gt_1 valid"], ["proof (chain)\npicking this:\n  0 < x\n  1 < p\n  valid_cert xs\n  \\<exists>q y.\n     x = q * y \\<and>\n     Prime q \\<in> set xs \\<and>\n     Triple p a y \\<in> set xs \\<and>\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < x\n  1 < p\n  valid_cert xs\n  \\<exists>q y.\n     x = q * y \\<and>\n     Prime q \\<in> set xs \\<and>\n     Triple p a y \\<in> set xs \\<and>\n     [a ^ ((p - 1) div q) \\<noteq> 1] (mod p)\n\ngoal (1 subgoal):\n 1. valid_cert (Triple p a x # xs)", "by simp"], ["proof (state)\nthis:\n  valid_cert (Triple p a x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid_cert (Triple p a x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare valid_cert.simps(2,3) [simp del]"], ["", "lemmas eval_valid_cert = valid_cert.simps(1) valid_cert_Cons1 valid_cert_Cons2"], ["", "end"], ["", "text \\<open>\n  The following alternative tree representation of certificates is better suited for \n  efficient checking.\n\\<close>"], ["", "datatype pratt_tree = Pratt_Node \"nat \\<times> nat \\<times> pratt_tree list\""], ["", "fun pratt_tree_number where\n  \"pratt_tree_number (Pratt_Node (n, _, _)) = n\""], ["", "text \\<open>\n  The following function checks that a given list contains all the prime factors of the given\n  number.\n\\<close>"], ["", "fun check_prime_factors_subset :: \"nat \\<Rightarrow> nat list \\<Rightarrow> bool\" where\n  \"check_prime_factors_subset n [] \\<longleftrightarrow> n = 1\"\n| \"check_prime_factors_subset n (p # ps) \\<longleftrightarrow> (if n = 0 then False else\n     (if p > 1 \\<and> p dvd n then check_prime_factors_subset (n div p) (p # ps)\n                         else check_prime_factors_subset n ps))\""], ["", "lemma check_prime_factors_subset_0 [simp]: \"\\<not>check_prime_factors_subset 0 ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> check_prime_factors_subset 0 ps", "by (induction ps) auto"], ["", "lemmas [simp del] = check_prime_factors_subset.simps(2)"], ["", "lemma check_prime_factors_subset_Cons [simp]:\n  \"check_prime_factors_subset (Suc 0) (p # ps) \\<longleftrightarrow> check_prime_factors_subset (Suc 0) ps\"\n  \"check_prime_factors_subset 1 (p # ps) \\<longleftrightarrow> check_prime_factors_subset 1 ps\"\n  \"p > 1 \\<Longrightarrow> p dvd numeral n \\<Longrightarrow> check_prime_factors_subset (numeral n) (p # ps) \\<longleftrightarrow>\n                           check_prime_factors_subset (numeral n div p) (p # ps)\"\n  \"p \\<le> 1 \\<or> \\<not>p dvd numeral n \\<Longrightarrow> check_prime_factors_subset (numeral n) (p # ps) \\<longleftrightarrow>\n                           check_prime_factors_subset (numeral n) ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (check_prime_factors_subset (Suc 0) (p # ps) =\n     check_prime_factors_subset (Suc 0) ps &&&\n     check_prime_factors_subset 1 (p # ps) =\n     check_prime_factors_subset 1 ps) &&&\n    (\\<lbrakk>1 < p; p dvd numeral n\\<rbrakk>\n     \\<Longrightarrow> check_prime_factors_subset (numeral n) (p # ps) =\n                       check_prime_factors_subset (numeral n div p)\n                        (p # ps)) &&&\n    (p \\<le> 1 \\<or> \\<not> p dvd numeral n \\<Longrightarrow>\n     check_prime_factors_subset (numeral n) (p # ps) =\n     check_prime_factors_subset (numeral n) ps)", "by (subst check_prime_factors_subset.simps; force)+"], ["", "lemma check_prime_factors_subset_correct:\n  assumes \"check_prime_factors_subset n ps\" \"list_all prime ps\"\n  shows   \"prime_factors n \\<subseteq> set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> set ps", "using assms"], ["proof (prove)\nusing this:\n  check_prime_factors_subset n ps\n  list_all prime ps\n\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> set ps", "proof (induction n ps rule: check_prime_factors_subset.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>check_prime_factors_subset n []; list_all prime []\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set []\n 2. \\<And>n p ps.\n       \\<lbrakk>\\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n                 check_prime_factors_subset (n div p) (p # ps);\n                 list_all prime (p # ps)\\<rbrakk>\n                \\<Longrightarrow> prime_factors (n div p)\n                                  \\<subseteq> set (p # ps);\n        \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n         check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n        \\<Longrightarrow> prime_factors n \\<subseteq> set ps;\n        check_prime_factors_subset n (p # ps);\n        list_all prime (p # ps)\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "case (2 n p ps)"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n   check_prime_factors_subset (n div p) (p # ps);\n   list_all prime (p # ps)\\<rbrakk>\n  \\<Longrightarrow> prime_factors (n div p) \\<subseteq> set (p # ps)\n  \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n   check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n  \\<Longrightarrow> prime_factors n \\<subseteq> set ps\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>check_prime_factors_subset n []; list_all prime []\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set []\n 2. \\<And>n p ps.\n       \\<lbrakk>\\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n                 check_prime_factors_subset (n div p) (p # ps);\n                 list_all prime (p # ps)\\<rbrakk>\n                \\<Longrightarrow> prime_factors (n div p)\n                                  \\<subseteq> set (p # ps);\n        \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n         check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n        \\<Longrightarrow> prime_factors n \\<subseteq> set ps;\n        check_prime_factors_subset n (p # ps);\n        list_all prime (p # ps)\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "note * = this"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n   check_prime_factors_subset (n div p) (p # ps);\n   list_all prime (p # ps)\\<rbrakk>\n  \\<Longrightarrow> prime_factors (n div p) \\<subseteq> set (p # ps)\n  \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n   check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n  \\<Longrightarrow> prime_factors n \\<subseteq> set ps\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>check_prime_factors_subset n []; list_all prime []\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set []\n 2. \\<And>n p ps.\n       \\<lbrakk>\\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n                 check_prime_factors_subset (n div p) (p # ps);\n                 list_all prime (p # ps)\\<rbrakk>\n                \\<Longrightarrow> prime_factors (n div p)\n                                  \\<subseteq> set (p # ps);\n        \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n         check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n        \\<Longrightarrow> prime_factors n \\<subseteq> set ps;\n        check_prime_factors_subset n (p # ps);\n        list_all prime (p # ps)\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "from \"2.prems\""], ["proof (chain)\npicking this:\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)", "have \"prime p\" and \"p > 1\""], ["proof (prove)\nusing this:\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)\n\ngoal (1 subgoal):\n 1. prime p &&& 1 < p", "by (auto simp: prime_gt_Suc_0_nat)"], ["proof (state)\nthis:\n  prime p\n  1 < p\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>check_prime_factors_subset n []; list_all prime []\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set []\n 2. \\<And>n p ps.\n       \\<lbrakk>\\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n                 check_prime_factors_subset (n div p) (p # ps);\n                 list_all prime (p # ps)\\<rbrakk>\n                \\<Longrightarrow> prime_factors (n div p)\n                                  \\<subseteq> set (p # ps);\n        \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n         check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n        \\<Longrightarrow> prime_factors n \\<subseteq> set ps;\n        check_prime_factors_subset n (p # ps);\n        list_all prime (p # ps)\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "consider \"n = 0\" | \"n > 0\" \"p dvd n\" | \"n > 0\" \"\\<not>(p dvd n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis;\n     \\<lbrakk>0 < n; p dvd n\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis;\n   \\<lbrakk>0 < n; p dvd n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>check_prime_factors_subset n []; list_all prime []\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set []\n 2. \\<And>n p ps.\n       \\<lbrakk>\\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n                 check_prime_factors_subset (n div p) (p # ps);\n                 list_all prime (p # ps)\\<rbrakk>\n                \\<Longrightarrow> prime_factors (n div p)\n                                  \\<subseteq> set (p # ps);\n        \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n         check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n        \\<Longrightarrow> prime_factors n \\<subseteq> set ps;\n        check_prime_factors_subset n (p # ps);\n        list_all prime (p # ps)\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis;\n   \\<lbrakk>0 < n; p dvd n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> set (p # ps)", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 3. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "case 2"], ["proof (state)\nthis:\n  0 < n\n  p dvd n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 3. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "hence \"n div p > 0\""], ["proof (prove)\nusing this:\n  0 < n\n  p dvd n\n\ngoal (1 subgoal):\n 1. 0 < n div p", "by auto"], ["proof (state)\nthis:\n  0 < n div p\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 3. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "hence \"prime_factors ((n div p) * p) = insert p (prime_factors (n div p))\""], ["proof (prove)\nusing this:\n  0 < n div p\n\ngoal (1 subgoal):\n 1. prime_factors (n div p * p) = insert p (prime_factors (n div p))", "using \\<open>p > 1\\<close> \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  0 < n div p\n  1 < p\n  prime p\n\ngoal (1 subgoal):\n 1. prime_factors (n div p * p) = insert p (prime_factors (n div p))", "by (auto simp: prime_factors_product prime_prime_factors)"], ["proof (state)\nthis:\n  prime_factors (n div p * p) = insert p (prime_factors (n div p))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 3. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "also"], ["proof (state)\nthis:\n  prime_factors (n div p * p) = insert p (prime_factors (n div p))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 3. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "have \"(n div p) * p = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n div p * p = n", "using 2"], ["proof (prove)\nusing this:\n  0 < n\n  p dvd n\n\ngoal (1 subgoal):\n 1. n div p * p = n", "by auto"], ["proof (state)\nthis:\n  n div p * p = n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 3. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "finally"], ["proof (chain)\npicking this:\n  prime_factors n = insert p (prime_factors (n div p))", "show ?thesis"], ["proof (prove)\nusing this:\n  prime_factors n = insert p (prime_factors (n div p))\n\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> set (p # ps)", "using 2 \\<open>p > 1\\<close> *"], ["proof (prove)\nusing this:\n  prime_factors n = insert p (prime_factors (n div p))\n  0 < n\n  p dvd n\n  1 < p\n  \\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n   check_prime_factors_subset (n div p) (p # ps);\n   list_all prime (p # ps)\\<rbrakk>\n  \\<Longrightarrow> prime_factors (n div p) \\<subseteq> set (p # ps)\n  \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n   check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n  \\<Longrightarrow> prime_factors n \\<subseteq> set ps\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)\n\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> set (p # ps)", "by (auto simp: check_prime_factors_subset.simps(2)[of n])"], ["proof (state)\nthis:\n  prime_factors n \\<subseteq> set (p # ps)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "case 3"], ["proof (state)\nthis:\n  0 < n\n  \\<not> p dvd n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)\n 2. \\<lbrakk>0 < n; \\<not> p dvd n\\<rbrakk>\n    \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "with * and \\<open>p > 1\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n   check_prime_factors_subset (n div p) (p # ps);\n   list_all prime (p # ps)\\<rbrakk>\n  \\<Longrightarrow> prime_factors (n div p) \\<subseteq> set (p # ps)\n  \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n   check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n  \\<Longrightarrow> prime_factors n \\<subseteq> set ps\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)\n  1 < p\n  0 < n\n  \\<not> p dvd n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>n \\<noteq> 0; 1 < p \\<and> p dvd n;\n   check_prime_factors_subset (n div p) (p # ps);\n   list_all prime (p # ps)\\<rbrakk>\n  \\<Longrightarrow> prime_factors (n div p) \\<subseteq> set (p # ps)\n  \\<lbrakk>n \\<noteq> 0; \\<not> (1 < p \\<and> p dvd n);\n   check_prime_factors_subset n ps; list_all prime ps\\<rbrakk>\n  \\<Longrightarrow> prime_factors n \\<subseteq> set ps\n  check_prime_factors_subset n (p # ps)\n  list_all prime (p # ps)\n  1 < p\n  0 < n\n  \\<not> p dvd n\n\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> set (p # ps)", "by (auto simp: check_prime_factors_subset.simps(2)[of n])"], ["proof (state)\nthis:\n  prime_factors n \\<subseteq> set (p # ps)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> prime_factors n \\<subseteq> set (p # ps)", "qed auto"], ["proof (state)\nthis:\n  prime_factors n \\<subseteq> set (p # ps)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>check_prime_factors_subset n []; list_all prime []\\<rbrakk>\n       \\<Longrightarrow> prime_factors n \\<subseteq> set []", "qed auto"], ["", "fun valid_pratt_tree where\n  \"valid_pratt_tree (Pratt_Node (n, a, ts)) \\<longleftrightarrow>\n     n \\<ge> 2 \\<and>\n     check_prime_factors_subset (n - 1) (map pratt_tree_number ts) \\<and>\n     [a ^ (n - 1) = 1] (mod n) \\<and>\n     (\\<forall>t\\<in>set ts. [a ^ ((n - 1) div pratt_tree_number t) \\<noteq> 1] (mod n)) \\<and>\n     (\\<forall>t\\<in>set ts. valid_pratt_tree t)\""], ["", "lemma valid_pratt_tree_code [code]:\n  \"valid_pratt_tree (Pratt_Node (n, a, ts)) \\<longleftrightarrow>\n     n \\<ge> 2 \\<and>\n     check_prime_factors_subset (n - 1) (map pratt_tree_number ts) \\<and>\n     mod_exp_nat a (n - 1) n = 1 \\<and>\n     (\\<forall>t\\<in>set ts. mod_exp_nat a ((n - 1) div pratt_tree_number t) n \\<noteq> 1) \\<and>\n     (\\<forall>t\\<in>set ts. valid_pratt_tree t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_pratt_tree (Pratt_Node (n, a, ts)) =\n    (2 \\<le> n \\<and>\n     check_prime_factors_subset (n - 1) (map pratt_tree_number ts) \\<and>\n     mod_exp_nat a (n - 1) n = 1 \\<and>\n     (\\<forall>t\\<in>set ts.\n         mod_exp_nat a ((n - 1) div pratt_tree_number t) n \\<noteq>\n         1) \\<and>\n     (\\<forall>t\\<in>set ts. valid_pratt_tree t))", "by (simp add: mod_exp_nat_def cong_def)"], ["", "lemma valid_pratt_tree_imp_prime:\n  assumes \"valid_pratt_tree t\"\n  shows   \"prime (pratt_tree_number t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (pratt_tree_number t)", "using assms"], ["proof (prove)\nusing this:\n  valid_pratt_tree t\n\ngoal (1 subgoal):\n 1. prime (pratt_tree_number t)", "proof (induction t rule: valid_pratt_tree.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n a ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set ts; valid_pratt_tree x\\<rbrakk>\n                   \\<Longrightarrow> prime (pratt_tree_number x);\n        valid_pratt_tree (Pratt_Node (n, a, ts))\\<rbrakk>\n       \\<Longrightarrow> prime (pratt_tree_number (Pratt_Node (n, a, ts)))", "case (1 n a ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set ts; valid_pratt_tree ?x\\<rbrakk>\n  \\<Longrightarrow> prime (pratt_tree_number ?x)\n  valid_pratt_tree (Pratt_Node (n, a, ts))\n\ngoal (1 subgoal):\n 1. \\<And>n a ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set ts; valid_pratt_tree x\\<rbrakk>\n                   \\<Longrightarrow> prime (pratt_tree_number x);\n        valid_pratt_tree (Pratt_Node (n, a, ts))\\<rbrakk>\n       \\<Longrightarrow> prime (pratt_tree_number (Pratt_Node (n, a, ts)))", "from 1"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> set ts; valid_pratt_tree ?x\\<rbrakk>\n  \\<Longrightarrow> prime (pratt_tree_number ?x)\n  valid_pratt_tree (Pratt_Node (n, a, ts))", "have \"prime_factors (n - 1) \\<subseteq> set (map pratt_tree_number ts)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set ts; valid_pratt_tree ?x\\<rbrakk>\n  \\<Longrightarrow> prime (pratt_tree_number ?x)\n  valid_pratt_tree (Pratt_Node (n, a, ts))\n\ngoal (1 subgoal):\n 1. prime_factors (n - 1) \\<subseteq> set (map pratt_tree_number ts)", "by (intro check_prime_factors_subset_correct) (auto simp: list.pred_set)"], ["proof (state)\nthis:\n  prime_factors (n - 1) \\<subseteq> set (map pratt_tree_number ts)\n\ngoal (1 subgoal):\n 1. \\<And>n a ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set ts; valid_pratt_tree x\\<rbrakk>\n                   \\<Longrightarrow> prime (pratt_tree_number x);\n        valid_pratt_tree (Pratt_Node (n, a, ts))\\<rbrakk>\n       \\<Longrightarrow> prime (pratt_tree_number (Pratt_Node (n, a, ts)))", "with 1"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> set ts; valid_pratt_tree ?x\\<rbrakk>\n  \\<Longrightarrow> prime (pratt_tree_number ?x)\n  valid_pratt_tree (Pratt_Node (n, a, ts))\n  prime_factors (n - 1) \\<subseteq> set (map pratt_tree_number ts)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set ts; valid_pratt_tree ?x\\<rbrakk>\n  \\<Longrightarrow> prime (pratt_tree_number ?x)\n  valid_pratt_tree (Pratt_Node (n, a, ts))\n  prime_factors (n - 1) \\<subseteq> set (map pratt_tree_number ts)\n\ngoal (1 subgoal):\n 1. prime (pratt_tree_number (Pratt_Node (n, a, ts)))", "by (intro lehmers_theorem[where a = a]) auto"], ["proof (state)\nthis:\n  prime (pratt_tree_number (Pratt_Node (n, a, ts)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_pratt_tree_imp_prime':\n  assumes \"PROP (Trueprop (valid_pratt_tree (Pratt_Node (n, a, ts)))) \\<equiv> PROP (Trueprop True)\"\n  shows   \"prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prime n", "have \"valid_pratt_tree (Pratt_Node (n, a, ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_pratt_tree (Pratt_Node (n, a, ts))", "by (subst assms) auto"], ["proof (state)\nthis:\n  valid_pratt_tree (Pratt_Node (n, a, ts))\n\ngoal (1 subgoal):\n 1. prime n", "from valid_pratt_tree_imp_prime[OF this]"], ["proof (chain)\npicking this:\n  prime (pratt_tree_number (Pratt_Node (n, a, ts)))", "show ?thesis"], ["proof (prove)\nusing this:\n  prime (pratt_tree_number (Pratt_Node (n, a, ts)))\n\ngoal (1 subgoal):\n 1. prime n", "by simp"], ["proof (state)\nthis:\n  prime n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Proof method setup\\<close>"], ["", "theorem lehmers_theorem':\n  fixes p :: nat\n  assumes \"list_all prime ps\" \"a \\<equiv> a\" \"n \\<equiv> n\"\n  assumes \"list_all (\\<lambda>p. mod_exp_nat a ((n - 1) div p) n \\<noteq> 1) ps\" \"mod_exp_nat a (n - 1) n = 1\"\n  assumes \"check_prime_factors_subset (n - 1) ps\" \"2 \\<le> n\"\n  shows \"prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime n", "using assms check_prime_factors_subset_correct[OF assms(6,1)]"], ["proof (prove)\nusing this:\n  list_all prime ps\n  a \\<equiv> a\n  n \\<equiv> n\n  list_all (\\<lambda>p. mod_exp_nat a ((n - 1) div p) n \\<noteq> 1) ps\n  mod_exp_nat a (n - 1) n = 1\n  check_prime_factors_subset (n - 1) ps\n  2 \\<le> n\n  prime_factors (n - 1) \\<subseteq> set ps\n\ngoal (1 subgoal):\n 1. prime n", "by (intro lehmers_theorem[where a = a]) (auto simp: cong_def mod_exp_nat_def list.pred_set)"], ["", "lemma list_all_ConsI: \"P x \\<Longrightarrow> list_all P xs \\<Longrightarrow> list_all P (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x; list_all P xs\\<rbrakk>\n    \\<Longrightarrow> list_all P (x # xs)", "by simp"], ["", "ML_file \\<open>pratt.ML\\<close>"], ["", "method_setup pratt = \\<open>\n  Scan.lift (Pratt.tac_config_parser -- Scan.option Pratt.cert_cartouche) >> \n    (fn (config, cert) => fn ctxt => SIMPLE_METHOD (HEADGOAL (Pratt.tac config cert ctxt)))\n\\<close> \"Prove primality of natural numbers using Pratt certificates.\""], ["", "text \\<open>\n  The proof method replays a given Pratt certificate to prove the primality of a given number.\n  If no certificate is given, the method attempts to compute one. The computed certificate is then\n  also printed with a prompt to insert it into the proof document so that it does not have to\n  be recomputed the next time.\n\n  The format of the certificates is compatible with those generated by Mathematica. Therefore,\n  for larger numbers, certificates generated by Mathematica can be used with this method directly.\n\\<close>"], ["", "lemma \"prime (47 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime 47", "by (pratt (silent))"], ["", "lemma \"prime (2503 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime 2503", "by pratt"], ["", "lemma \"prime (7919 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime 7919", "by pratt"], ["", "lemma \"prime (131059 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime 131059", "by (pratt \\<open>{131059, 2, {2, {3, 2, {2}}, {809, 3, {2, {101, 2, {2, {5, 2, {2}}}}}}}}\\<close>)"], ["", "end"]]}