{"file_name": "/home/qj213/afp-2021-10-22/thys/VeriComp/Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/VeriComp", "problem_names": ["lemma finished_star:\n  assumes \"finished r x\"\n  shows \"r\\<^sup>*\\<^sup>* x y \\<Longrightarrow> x = y\"", "lemma finished_step:\n  \"step s s' \\<Longrightarrow> \\<not>finished step s\"", "lemma finished_inf: \"s \\<rightarrow>\\<^sup>\\<infinity> \\<Longrightarrow> \\<not> finished step s\"", "lemma eval_deterministic:\n  assumes\n    deterministic: \"\\<And>x y z. step x y \\<Longrightarrow> step x z \\<Longrightarrow> y = z\"\n  shows \"s1 \\<rightarrow>\\<^sup>* s2 \\<Longrightarrow> s1 \\<rightarrow>\\<^sup>* s3 \\<Longrightarrow> finished step s2 \\<Longrightarrow> finished step s3 \\<Longrightarrow> s2 = s3\"", "lemma sem_behaves_deterministic:\n  assumes\n    deterministic: \"\\<And>x y z. step x y \\<Longrightarrow> step x z \\<Longrightarrow> y = z\"\n  shows \"s \\<down> b1 \\<Longrightarrow> s \\<down> b2 \\<Longrightarrow> b1 = b2\""], "translations": [["", "lemma finished_star:\n  assumes \"finished r x\"\n  shows \"r\\<^sup>*\\<^sup>* x y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sup>*\\<^sup>* x y \\<Longrightarrow> x = y", "proof (induction y rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = x\n 2. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z; x = y\\<rbrakk>\n       \\<Longrightarrow> x = z", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. x = x\n 2. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z; x = y\\<rbrakk>\n       \\<Longrightarrow> x = z", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = x", "by simp"], ["proof (state)\nthis:\n  x = x\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z; x = y\\<rbrakk>\n       \\<Longrightarrow> x = z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z; x = y\\<rbrakk>\n       \\<Longrightarrow> x = z", "case (step y z)"], ["proof (state)\nthis:\n  r\\<^sup>*\\<^sup>* x y\n  r y z\n  x = y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>r\\<^sup>*\\<^sup>* x y; r y z; x = y\\<rbrakk>\n       \\<Longrightarrow> x = z", "then"], ["proof (chain)\npicking this:\n  r\\<^sup>*\\<^sup>* x y\n  r y z\n  x = y", "show ?case"], ["proof (prove)\nusing this:\n  r\\<^sup>*\\<^sup>* x y\n  r y z\n  x = y\n\ngoal (1 subgoal):\n 1. x = z", "using assms"], ["proof (prove)\nusing this:\n  r\\<^sup>*\\<^sup>* x y\n  r y z\n  x = y\n  finished r x\n\ngoal (1 subgoal):\n 1. x = z", "by (auto simp: finished_def)"], ["proof (state)\nthis:\n  x = z\n\ngoal:\nNo subgoals!", "qed"], ["", "locale semantics =\n  fixes\n    step :: \"'state \\<Rightarrow> 'state \\<Rightarrow> bool\" (infix \"\\<rightarrow>\" 50) and\n    final :: \"'state \\<Rightarrow> bool\"\n  assumes\n    final_finished: \"final s \\<Longrightarrow> finished step s\"\nbegin"], ["", "text \\<open>\nThe semantics locale represents the semantics as an abstract machine.\nIt is expressed by a transition system with a transition relation @{term step}---usually written as an infix @{text \\<rightarrow>} arrow---and final states @{term final}.\n\\<close>"], ["", "lemma finished_step:\n  \"step s s' \\<Longrightarrow> \\<not>finished step s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow> s' \\<Longrightarrow> \\<not> finished (\\<rightarrow>) s", "by (auto simp add: finished_def)"], ["", "abbreviation eval :: \"'state \\<Rightarrow> 'state \\<Rightarrow> bool\" (infix \"\\<rightarrow>\\<^sup>*\" 50) where\n  \"eval \\<equiv> step\\<^sup>*\\<^sup>*\""], ["", "abbreviation inf_step :: \"'state \\<Rightarrow> bool\" where\n  \"inf_step \\<equiv> inf step\""], ["", "notation\n  inf_step (\"'(\\<rightarrow>\\<^sup>\\<infinity>')\" [] 50) and\n  inf_step (\"_ \\<rightarrow>\\<^sup>\\<infinity>\" [55] 50)"], ["", "lemma finished_inf: \"s \\<rightarrow>\\<^sup>\\<infinity> \\<Longrightarrow> \\<not> finished step s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sup>\\<infinity> \\<Longrightarrow>\n    \\<not> finished (\\<rightarrow>) s", "using inf.cases finished_step"], ["proof (prove)\nusing this:\n  \\<lbrakk>Inf.inf ?r ?a;\n   \\<And>x y.\n      \\<lbrakk>?a = x; ?r x y; Inf.inf ?r y\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  ?s \\<rightarrow> ?s' \\<Longrightarrow> \\<not> finished (\\<rightarrow>) ?s\n\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sup>\\<infinity> \\<Longrightarrow>\n    \\<not> finished (\\<rightarrow>) s", "by metis"], ["", "lemma eval_deterministic:\n  assumes\n    deterministic: \"\\<And>x y z. step x y \\<Longrightarrow> step x z \\<Longrightarrow> y = z\"\n  shows \"s1 \\<rightarrow>\\<^sup>* s2 \\<Longrightarrow> s1 \\<rightarrow>\\<^sup>* s3 \\<Longrightarrow> finished step s2 \\<Longrightarrow> finished step s3 \\<Longrightarrow> s2 = s3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; s1 \\<rightarrow>\\<^sup>* s3;\n     finished (\\<rightarrow>) s2; finished (\\<rightarrow>) s3\\<rbrakk>\n    \\<Longrightarrow> s2 = s3", "proof(induction s1 arbitrary: s3 rule: converse_rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s3.\n       \\<lbrakk>s2 \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3\n 2. \\<And>y z s3.\n       \\<lbrakk>y \\<rightarrow> z; z \\<rightarrow>\\<^sup>* s2;\n        \\<And>s3.\n           \\<lbrakk>z \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n            finished (\\<rightarrow>) s3\\<rbrakk>\n           \\<Longrightarrow> s2 = s3;\n        y \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3", "case base"], ["proof (state)\nthis:\n  s2 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s2\n  finished (\\<rightarrow>) s3\n\ngoal (2 subgoals):\n 1. \\<And>s3.\n       \\<lbrakk>s2 \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3\n 2. \\<And>y z s3.\n       \\<lbrakk>y \\<rightarrow> z; z \\<rightarrow>\\<^sup>* s2;\n        \\<And>s3.\n           \\<lbrakk>z \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n            finished (\\<rightarrow>) s3\\<rbrakk>\n           \\<Longrightarrow> s2 = s3;\n        y \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3", "then"], ["proof (chain)\npicking this:\n  s2 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s2\n  finished (\\<rightarrow>) s3", "show ?case"], ["proof (prove)\nusing this:\n  s2 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s2\n  finished (\\<rightarrow>) s3\n\ngoal (1 subgoal):\n 1. s2 = s3", "by (simp add: finished_star)"], ["proof (state)\nthis:\n  s2 = s3\n\ngoal (1 subgoal):\n 1. \\<And>y z s3.\n       \\<lbrakk>y \\<rightarrow> z; z \\<rightarrow>\\<^sup>* s2;\n        \\<And>s3.\n           \\<lbrakk>z \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n            finished (\\<rightarrow>) s3\\<rbrakk>\n           \\<Longrightarrow> s2 = s3;\n        y \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z s3.\n       \\<lbrakk>y \\<rightarrow> z; z \\<rightarrow>\\<^sup>* s2;\n        \\<And>s3.\n           \\<lbrakk>z \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n            finished (\\<rightarrow>) s3\\<rbrakk>\n           \\<Longrightarrow> s2 = s3;\n        y \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3", "case (step y z)"], ["proof (state)\nthis:\n  y \\<rightarrow> z\n  z \\<rightarrow>\\<^sup>* s2\n  \\<lbrakk>z \\<rightarrow>\\<^sup>* ?s3.0; finished (\\<rightarrow>) s2;\n   finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> s2 = ?s3.0\n  y \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s2\n  finished (\\<rightarrow>) s3\n\ngoal (1 subgoal):\n 1. \\<And>y z s3.\n       \\<lbrakk>y \\<rightarrow> z; z \\<rightarrow>\\<^sup>* s2;\n        \\<And>s3.\n           \\<lbrakk>z \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n            finished (\\<rightarrow>) s3\\<rbrakk>\n           \\<Longrightarrow> s2 = s3;\n        y \\<rightarrow>\\<^sup>* s3; finished (\\<rightarrow>) s2;\n        finished (\\<rightarrow>) s3\\<rbrakk>\n       \\<Longrightarrow> s2 = s3", "then"], ["proof (chain)\npicking this:\n  y \\<rightarrow> z\n  z \\<rightarrow>\\<^sup>* s2\n  \\<lbrakk>z \\<rightarrow>\\<^sup>* ?s3.0; finished (\\<rightarrow>) s2;\n   finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> s2 = ?s3.0\n  y \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s2\n  finished (\\<rightarrow>) s3", "show ?case"], ["proof (prove)\nusing this:\n  y \\<rightarrow> z\n  z \\<rightarrow>\\<^sup>* s2\n  \\<lbrakk>z \\<rightarrow>\\<^sup>* ?s3.0; finished (\\<rightarrow>) s2;\n   finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> s2 = ?s3.0\n  y \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s2\n  finished (\\<rightarrow>) s3\n\ngoal (1 subgoal):\n 1. s2 = s3", "by (metis converse_rtranclpE deterministic finished_step)"], ["proof (state)\nthis:\n  s2 = s3\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Behaviour of a dynamic execution\\<close>"], ["", "inductive sem_behaves :: \"'state \\<Rightarrow> 'state behaviour \\<Rightarrow> bool\" (infix \"\\<down>\" 50) where\n  state_terminates:\n    \"s1 \\<rightarrow>\\<^sup>* s2 \\<Longrightarrow> finished step s2 \\<Longrightarrow> final s2 \\<Longrightarrow> s1 \\<down> (Terminates s2)\" |\n  state_diverges:\n    \"s1 \\<rightarrow>\\<^sup>\\<infinity> \\<Longrightarrow> s1 \\<down> Diverges\" |\n  state_goes_wrong:\n    \"s1 \\<rightarrow>\\<^sup>* s2 \\<Longrightarrow> finished step s2 \\<Longrightarrow> \\<not> final s2 \\<Longrightarrow> s1 \\<down> (Goes_wrong s2)\""], ["", "text \\<open>\nEven though the @{term step} transition relation in the @{locale semantics} locale need not be deterministic, if it happens to be, then the behaviour of a program becomes deterministic too.\n\\<close>"], ["", "lemma sem_behaves_deterministic:\n  assumes\n    deterministic: \"\\<And>x y z. step x y \\<Longrightarrow> step x z \\<Longrightarrow> y = z\"\n  shows \"s \\<down> b1 \\<Longrightarrow> s \\<down> b2 \\<Longrightarrow> b1 = b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<down> b1; s \\<down> b2\\<rbrakk> \\<Longrightarrow> b1 = b2", "proof (induction s b1 rule: sem_behaves.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = b2\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Diverges = b2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "case (state_terminates s1 s2)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  s1 \\<down> b2\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = b2\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Diverges = b2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Terminates s2 = b2", "using state_terminates.prems state_terminates.hyps"], ["proof (prove)\nusing this:\n  s1 \\<down> b2\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (1 subgoal):\n 1. Terminates s2 = b2", "proof (induction s1 b2 rule: sem_behaves.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        final s2a; s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Terminates s2a\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Diverges\n 3. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "case (state_terminates s1 s3)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        final s2a; s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Terminates s2a\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Diverges\n 3. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (1 subgoal):\n 1. Terminates s2 = Terminates s3", "using eval_deterministic deterministic"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?s1.0 \\<rightarrow>\\<^sup>* ?s2.0; ?s1.0 \\<rightarrow>\\<^sup>* ?s3.0;\n   finished (\\<rightarrow>) ?s2.0; finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s2.0 = ?s3.0\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n\ngoal (1 subgoal):\n 1. Terminates s2 = Terminates s3", "by simp"], ["proof (state)\nthis:\n  Terminates s2 = Terminates s3\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Diverges\n 2. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Diverges\n 2. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "case (state_diverges s1)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Diverges\n 2. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (1 subgoal):\n 1. Terminates s2 = Diverges", "using deterministic star_inf[THEN finished_inf]"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?x1 \\<rightarrow>\\<^sup>* ?s;\n   ?x1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n  \\<Longrightarrow> \\<not> finished (\\<rightarrow>) ?s\n\ngoal (1 subgoal):\n 1. Terminates s2 = Diverges", "by simp"], ["proof (state)\nthis:\n  Terminates s2 = Diverges\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "case (state_goes_wrong s1 s3)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; final s2\\<rbrakk>\n       \\<Longrightarrow> Terminates s2 = Goes_wrong s2a", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n\ngoal (1 subgoal):\n 1. Terminates s2 = Goes_wrong s3", "using eval_deterministic deterministic"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?s1.0 \\<rightarrow>\\<^sup>* ?s2.0; ?s1.0 \\<rightarrow>\\<^sup>* ?s3.0;\n   finished (\\<rightarrow>) ?s2.0; finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s2.0 = ?s3.0\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n\ngoal (1 subgoal):\n 1. Terminates s2 = Goes_wrong s3", "by blast"], ["proof (state)\nthis:\n  Terminates s2 = Goes_wrong s3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Terminates s2 = b2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Diverges = b2\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Diverges = b2\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "case (state_diverges s1)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<down> b2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Diverges = b2\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Diverges = b2", "using state_diverges.prems state_diverges.hyps"], ["proof (prove)\nusing this:\n  s1 \\<down> b2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. Diverges = b2", "proof (induction s1 b2 rule: sem_behaves.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Terminates s2\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Diverges\n 3. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "case (state_terminates s1 s2)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Terminates s2\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Diverges\n 3. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. Diverges = Terminates s2", "using deterministic star_inf[THEN finished_inf]"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?x1 \\<rightarrow>\\<^sup>* ?s;\n   ?x1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n  \\<Longrightarrow> \\<not> finished (\\<rightarrow>) ?s\n\ngoal (1 subgoal):\n 1. Diverges = Terminates s2", "by simp"], ["proof (state)\nthis:\n  Diverges = Terminates s2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Diverges\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Diverges\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "case (state_diverges s1)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Diverges\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>\\<infinity>", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. Diverges = Diverges", "by simp"], ["proof (state)\nthis:\n  Diverges = Diverges\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "case (state_goes_wrong s1 s2)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> Diverges = Goes_wrong s2", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n\ngoal (1 subgoal):\n 1. Diverges = Goes_wrong s2", "using deterministic star_inf[THEN finished_inf]"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?x1 \\<rightarrow>\\<^sup>* ?s;\n   ?x1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n  \\<Longrightarrow> \\<not> finished (\\<rightarrow>) ?s\n\ngoal (1 subgoal):\n 1. Diverges = Goes_wrong s2", "by simp"], ["proof (state)\nthis:\n  Diverges = Goes_wrong s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Diverges = b2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "case (state_goes_wrong s1 s2)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  s1 \\<down> b2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2; s1 \\<down> b2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = b2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Goes_wrong s2 = b2", "using state_goes_wrong.prems state_goes_wrong.hyps"], ["proof (prove)\nusing this:\n  s1 \\<down> b2\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = b2", "proof (induction s1 b2 rule: sem_behaves.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        final s2a; s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Terminates s2a\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Diverges\n 3. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "case (state_terminates s1 s3)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        final s2a; s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Terminates s2a\n 2. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Diverges\n 3. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = Terminates s3", "using eval_deterministic deterministic"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?s1.0 \\<rightarrow>\\<^sup>* ?s2.0; ?s1.0 \\<rightarrow>\\<^sup>* ?s3.0;\n   finished (\\<rightarrow>) ?s2.0; finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s2.0 = ?s3.0\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = Terminates s3", "by blast"], ["proof (state)\nthis:\n  Goes_wrong s2 = Terminates s3\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Diverges\n 2. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Diverges\n 2. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "case (state_diverges s1)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>\\<infinity>;\n        s1 \\<rightarrow>\\<^sup>* s2; finished (\\<rightarrow>) s2;\n        \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Diverges\n 2. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = Diverges", "using deterministic star_inf[THEN finished_inf]"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>\\<infinity>\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?x1 \\<rightarrow>\\<^sup>* ?s;\n   ?x1 \\<rightarrow>\\<^sup>\\<infinity>\\<rbrakk>\n  \\<Longrightarrow> \\<not> finished (\\<rightarrow>) ?s\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = Diverges", "by simp"], ["proof (state)\nthis:\n  Goes_wrong s2 = Diverges\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "case (state_goes_wrong s1 s3)"], ["proof (state)\nthis:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2a.\n       \\<lbrakk>s1 \\<rightarrow>\\<^sup>* s2a; finished (\\<rightarrow>) s2a;\n        \\<not> final s2a; s1 \\<rightarrow>\\<^sup>* s2;\n        finished (\\<rightarrow>) s2; \\<not> final s2\\<rbrakk>\n       \\<Longrightarrow> Goes_wrong s2 = Goes_wrong s2a", "then"], ["proof (chain)\npicking this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = Goes_wrong s3", "using eval_deterministic deterministic"], ["proof (prove)\nusing this:\n  s1 \\<rightarrow>\\<^sup>* s3\n  finished (\\<rightarrow>) s3\n  \\<not> final s3\n  s1 \\<rightarrow>\\<^sup>* s2\n  finished (\\<rightarrow>) s2\n  \\<not> final s2\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<rightarrow> y; x \\<rightarrow> z\\<rbrakk>\n              \\<Longrightarrow> y = z;\n   ?s1.0 \\<rightarrow>\\<^sup>* ?s2.0; ?s1.0 \\<rightarrow>\\<^sup>* ?s3.0;\n   finished (\\<rightarrow>) ?s2.0; finished (\\<rightarrow>) ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s2.0 = ?s3.0\n  \\<lbrakk>?x \\<rightarrow> ?y; ?x \\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?y = ?z\n\ngoal (1 subgoal):\n 1. Goes_wrong s2 = Goes_wrong s3", "by simp"], ["proof (state)\nthis:\n  Goes_wrong s2 = Goes_wrong s3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Goes_wrong s2 = b2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}