{"file_name": "/home/qj213/afp-2021-10-22/thys/VeriComp/Simulation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/VeriComp", "problem_names": ["lemma lift_simulation_plus:\n  \"step2\\<^sup>+\\<^sup>+ s2 s2' \\<Longrightarrow> match i1 s1 s2 \\<Longrightarrow>\n    (\\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n    (\\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1)\"", "lemma lift_simulation_eval:\n  \"L2.eval s2 s2' \\<Longrightarrow> match i1 s1 s2 \\<Longrightarrow> \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\"", "lemma backward_simulation_inf:\n  assumes\n    \"match i s1 s2\" and\n    \"inf step2 s2\"\n  shows \"inf step1 s1\"", "lemma simulation_behaviour :\n  \"L2.sem_behaves s\\<^sub>2 b\\<^sub>2 \\<Longrightarrow> \\<not>is_wrong b\\<^sub>2 \\<Longrightarrow> match i s\\<^sub>1 s\\<^sub>2 \\<Longrightarrow>\n    \\<exists>b\\<^sub>1 i'. L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and> rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\"", "lemma backward_simulation_composition:\n  assumes\n    \"backward_simulation step1 step2 final1 final2 order1 match1\"\n    \"backward_simulation step2 step3 final2 final3 order2 match2\"\n  shows\n    \"backward_simulation step1 step3 final1 final3\n      (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)\"", "lemma backward_simulation_pow:\n  assumes\n    \"backward_simulation step step final final order match\"\n  shows\n    \"backward_simulation step step final final (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)\"", "lemma\n  assumes \"lockstep_backward_simulation step1 step2 match\"\n  shows \"plus_backward_simulation step1 step2 match\"", "lemma lockstep_to_plus_backward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\"\n  assumes\n    lockstep_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step2 s2 s2' \\<Longrightarrow> (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step2 s2 s2'\"\n  shows \"\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'\"", "lemma lockstep_to_option_backward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    measure :: \"'state2 \\<Rightarrow> nat\"\n  assumes\n    lockstep_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step2 s2 s2' \\<Longrightarrow> (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step2 s2 s2'\"\n  shows \"(\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2') \\<or> match s1 s2' \\<and> measure s2' < measure s2\"", "lemma plus_to_star_backward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    measure :: \"'state2 \\<Rightarrow> nat\"\n  assumes\n    star_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step2 s2 s2' \\<Longrightarrow> (\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step2 s2 s2'\"\n  shows \"(\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2') \\<or> match s1 s2' \\<and> measure s2' < measure s2\"", "lemma lockstep_to_plus_forward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\"\n  assumes\n    lockstep_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step1 s1 s1' \\<Longrightarrow> (\\<exists>s2'. step2 s2 s2' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step1 s1 s1'\"\n  shows \"\\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'\""], "translations": [["", "lemma lift_simulation_plus:\n  \"step2\\<^sup>+\\<^sup>+ s2 s2' \\<Longrightarrow> match i1 s1 s2 \\<Longrightarrow>\n    (\\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n    (\\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 s2'; match i1 s1 s2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i2 s1'.\n                          step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                          match i2 s1' s2') \\<or>\n                      (\\<exists>i2.\n                          match i2 s1 s2' \\<and>\n                          (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "thm tranclp_induct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 s2'; match i1 s1 s2\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i2 s1'.\n                          step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                          match i2 s1' s2') \\<or>\n                      (\\<exists>i2.\n                          match i2 s1 s2' \\<and>\n                          (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "proof(induction s2' arbitrary: i1 s1 rule: tranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y i1 s1.\n       \\<lbrakk>step2 s2 y; match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' y) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 y \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<And>y z i1 s1.\n       \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 y; step2 y z;\n        \\<And>i1 s1.\n           match i1 s1 s2 \\<Longrightarrow>\n           (\\<exists>i2 s1'.\n               step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' y) \\<or>\n           (\\<exists>i2.\n               match i2 s1 y \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1);\n        match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' z) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 z \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "case (base s2')"], ["proof (state)\nthis:\n  step2 s2 s2'\n  match i1 s1 s2\n\ngoal (2 subgoals):\n 1. \\<And>y i1 s1.\n       \\<lbrakk>step2 s2 y; match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' y) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 y \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<And>y z i1 s1.\n       \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 y; step2 y z;\n        \\<And>i1 s1.\n           match i1 s1 s2 \\<Longrightarrow>\n           (\\<exists>i2 s1'.\n               step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' y) \\<or>\n           (\\<exists>i2.\n               match i2 s1 y \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1);\n        match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' z) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 z \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "from simulation[OF base.prems(1) base.hyps(1)]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> i2 \\<sqsubset> i1)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> i2 \\<sqsubset> i1)\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal (1 subgoal):\n 1. \\<And>y z i1 s1.\n       \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 y; step2 y z;\n        \\<And>i1 s1.\n           match i1 s1 s2 \\<Longrightarrow>\n           (\\<exists>i2 s1'.\n               step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' y) \\<or>\n           (\\<exists>i2.\n               match i2 s1 y \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1);\n        match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' z) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 z \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z i1 s1.\n       \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 y; step2 y z;\n        \\<And>i1 s1.\n           match i1 s1 s2 \\<Longrightarrow>\n           (\\<exists>i2 s1'.\n               step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' y) \\<or>\n           (\\<exists>i2.\n               match i2 s1 y \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1);\n        match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' z) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 z \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "case (step s2' s2'')"], ["proof (state)\nthis:\n  step2\\<^sup>+\\<^sup>+ s2 s2'\n  step2 s2' s2''\n  match ?i1.0 ?s1.0 s2 \\<Longrightarrow>\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ ?s1.0 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2.\n      match i2 ?s1.0 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 ?i1.0)\n  match i1 s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>y z i1 s1.\n       \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 y; step2 y z;\n        \\<And>i1 s1.\n           match i1 s1 s2 \\<Longrightarrow>\n           (\\<exists>i2 s1'.\n               step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' y) \\<or>\n           (\\<exists>i2.\n               match i2 s1 y \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1);\n        match i1 s1 s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             match i2 s1' z) \\<or>\n                         (\\<exists>i2.\n                             match i2 s1 z \\<and>\n                             (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "using step.IH[OF \\<open>match i1 s1 s2\\<close>]"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "assume \"\\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\""], ["proof (state)\nthis:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'", "obtain i2 s1' where \"step1\\<^sup>+\\<^sup>+ s1 s1'\" and \"match i2 s1' s2'\""], ["proof (prove)\nusing this:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s1' i2.\n        \\<lbrakk>step1\\<^sup>+\\<^sup>+ s1 s1'; match i2 s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step1\\<^sup>+\\<^sup>+ s1 s1'\n  match i2 s1' s2'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "from simulation[OF \\<open>match i2 s1' s2'\\<close> \\<open>step2 s2' s2''\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'a.\n      step1\\<^sup>+\\<^sup>+ s1' s1'a \\<and> match i2 s1'a s2'') \\<or>\n  (\\<exists>i2a. match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'a.\n      step1\\<^sup>+\\<^sup>+ s1' s1'a \\<and> match i2 s1'a s2'') \\<or>\n  (\\<exists>i2a. match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2)\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'a.\n       step1\\<^sup>+\\<^sup>+ s1' s1'a \\<and>\n       match i2 s1'a s2'' \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "assume \"\\<exists>i3 s1''. step1\\<^sup>+\\<^sup>+ s1' s1'' \\<and> match i3 s1'' s2''\""], ["proof (state)\nthis:\n  \\<exists>i3 s1''. step1\\<^sup>+\\<^sup>+ s1' s1'' \\<and> match i3 s1'' s2''\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'a.\n       step1\\<^sup>+\\<^sup>+ s1' s1'a \\<and>\n       match i2 s1'a s2'' \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i3 s1''. step1\\<^sup>+\\<^sup>+ s1' s1'' \\<and> match i3 s1'' s2''", "obtain i3 s1'' where \"step1\\<^sup>+\\<^sup>+ s1' s1''\" and \"match i3 s1'' s2''\""], ["proof (prove)\nusing this:\n  \\<exists>i3 s1''. step1\\<^sup>+\\<^sup>+ s1' s1'' \\<and> match i3 s1'' s2''\n\ngoal (1 subgoal):\n 1. (\\<And>s1'' i3.\n        \\<lbrakk>step1\\<^sup>+\\<^sup>+ s1' s1''; match i3 s1'' s2''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step1\\<^sup>+\\<^sup>+ s1' s1''\n  match i3 s1'' s2''\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'a.\n       step1\\<^sup>+\\<^sup>+ s1' s1'a \\<and>\n       match i2 s1'a s2'' \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n 2. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  step1\\<^sup>+\\<^sup>+ s1' s1''\n  match i3 s1'' s2''", "show ?thesis"], ["proof (prove)\nusing this:\n  step1\\<^sup>+\\<^sup>+ s1' s1''\n  match i3 s1'' s2''\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "using tranclp_trans[OF \\<open>step1\\<^sup>+\\<^sup>+ s1 s1'\\<close>]"], ["proof (prove)\nusing this:\n  step1\\<^sup>+\\<^sup>+ s1' s1''\n  match i3 s1'' s2''\n  step1\\<^sup>+\\<^sup>+ s1' ?z \\<Longrightarrow> step1\\<^sup>+\\<^sup>+ s1 ?z\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal (1 subgoal):\n 1. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "assume \"\\<exists>i3. match i3 s1' s2'' \\<and> i3 \\<sqsubset> i2\""], ["proof (state)\nthis:\n  \\<exists>i3. match i3 s1' s2'' \\<and> i3 \\<sqsubset> i2\n\ngoal (1 subgoal):\n 1. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i3. match i3 s1' s2'' \\<and> i3 \\<sqsubset> i2", "obtain i3 where \"match i3 s1' s2''\" and \"i3 \\<sqsubset> i2\""], ["proof (prove)\nusing this:\n  \\<exists>i3. match i3 s1' s2'' \\<and> i3 \\<sqsubset> i2\n\ngoal (1 subgoal):\n 1. (\\<And>i3.\n        \\<lbrakk>match i3 s1' s2''; i3 \\<sqsubset> i2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match i3 s1' s2''\n  i3 \\<sqsubset> i2\n\ngoal (1 subgoal):\n 1. \\<exists>i2a.\n       match i2a s1' s2'' \\<and> i2a \\<sqsubset> i2 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  match i3 s1' s2''\n  i3 \\<sqsubset> i2", "show ?thesis"], ["proof (prove)\nusing this:\n  match i3 s1' s2''\n  i3 \\<sqsubset> i2\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "using \\<open>step1\\<^sup>+\\<^sup>+ s1 s1'\\<close>"], ["proof (prove)\nusing this:\n  match i3 s1' s2''\n  i3 \\<sqsubset> i2\n  step1\\<^sup>+\\<^sup>+ s1 s1'\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "assume \"\\<exists>i2. match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1\""], ["proof (state)\nthis:\n  \\<exists>i2. match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2. match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1", "obtain i3 where \"match i3 s1 s2'\" and \"(\\<sqsubset>)\\<^sup>+\\<^sup>+ i3 i1\""], ["proof (prove)\nusing this:\n  \\<exists>i2. match i2 s1 s2' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1\n\ngoal (1 subgoal):\n 1. (\\<And>i3.\n        \\<lbrakk>match i3 s1 s2';\n         (\\<sqsubset>)\\<^sup>+\\<^sup>+ i3 i1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match i3 s1 s2'\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ i3 i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and>\n       (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "then"], ["proof (chain)\npicking this:\n  match i3 s1 s2'\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ i3 i1", "show ?thesis"], ["proof (prove)\nusing this:\n  match i3 s1 s2'\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ i3 i1\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "using simulation[OF \\<open>match i3 s1 s2'\\<close> \\<open>step2 s2' s2''\\<close>]"], ["proof (prove)\nusing this:\n  match i3 s1 s2'\n  (\\<sqsubset>)\\<^sup>+\\<^sup>+ i3 i1\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i3)\n\ngoal (1 subgoal):\n 1. (\\<exists>i2 s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n    (\\<exists>i2.\n        match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> (\\<sqsubset>)\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_simulation_eval:\n  \"L2.eval s2 s2' \\<Longrightarrow> match i1 s1 s2 \\<Longrightarrow> \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L2.eval s2 s2'; match i1 s1 s2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i2 s1'.\n                         L1.eval s1 s1' \\<and> match i2 s1' s2'", "proof(induction s2 arbitrary: i1 s1 rule: converse_rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i1 s1.\n       match i1 s1 s2' \\<Longrightarrow>\n       \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n 2. \\<And>y z i1 s1.\n       \\<lbrakk>step2 y z; L2.eval z s2';\n        \\<And>i1 s1.\n           match i1 s1 z \\<Longrightarrow>\n           \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2';\n        match i1 s1 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i2 s1'.\n                            L1.eval s1 s1' \\<and> match i2 s1' s2'", "case (base s2)"], ["proof (state)\nthis:\n  match s2 s1 s2'\n\ngoal (2 subgoals):\n 1. \\<And>i1 s1.\n       match i1 s1 s2' \\<Longrightarrow>\n       \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n 2. \\<And>y z i1 s1.\n       \\<lbrakk>step2 y z; L2.eval z s2';\n        \\<And>i1 s1.\n           match i1 s1 z \\<Longrightarrow>\n           \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2';\n        match i1 s1 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i2 s1'.\n                            L1.eval s1 s1' \\<and> match i2 s1' s2'", "thus ?case"], ["proof (prove)\nusing this:\n  match s2 s1 s2'\n\ngoal (1 subgoal):\n 1. \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n\ngoal (1 subgoal):\n 1. \\<And>y z i1 s1.\n       \\<lbrakk>step2 y z; L2.eval z s2';\n        \\<And>i1 s1.\n           match i1 s1 z \\<Longrightarrow>\n           \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2';\n        match i1 s1 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i2 s1'.\n                            L1.eval s1 s1' \\<and> match i2 s1' s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z i1 s1.\n       \\<lbrakk>step2 y z; L2.eval z s2';\n        \\<And>i1 s1.\n           match i1 s1 z \\<Longrightarrow>\n           \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2';\n        match i1 s1 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i2 s1'.\n                            L1.eval s1 s1' \\<and> match i2 s1' s2'", "case (step s2 s2'')"], ["proof (state)\nthis:\n  step2 s2 s2''\n  L2.eval s2'' s2'\n  match ?i1.0 ?s1.0 s2'' \\<Longrightarrow>\n  \\<exists>i2 s1'. L1.eval ?s1.0 s1' \\<and> match i2 s1' s2'\n  match i1 s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>y z i1 s1.\n       \\<lbrakk>step2 y z; L2.eval z s2';\n        \\<And>i1 s1.\n           match i1 s1 z \\<Longrightarrow>\n           \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2';\n        match i1 s1 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i2 s1'.\n                            L1.eval s1 s1' \\<and> match i2 s1' s2'", "from simulation[OF \\<open>match i1 s1 s2\\<close> \\<open>step2 s2 s2''\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'') \\<or>\n  (\\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1)\n\ngoal (1 subgoal):\n 1. \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match i2 s1' s2'' \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n 2. \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1 \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "assume \"\\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2''\""], ["proof (state)\nthis:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2''\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match i2 s1' s2'' \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n 2. \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1 \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2''\n\ngoal (1 subgoal):\n 1. \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "by (meson rtranclp_trans step.IH tranclp_into_rtranclp)"], ["proof (state)\nthis:\n  \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1 \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1 \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "assume \"\\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1\""], ["proof (state)\nthis:\n  \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1 \\<Longrightarrow>\n    \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i2. match i2 s1 s2'' \\<and> i2 \\<sqsubset> i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'", "by (auto intro: step.IH)"], ["proof (state)\nthis:\n  \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i2 s1'. L1.eval s1 s1' \\<and> match i2 s1' s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma backward_simulation_inf:\n  assumes\n    \"match i s1 s2\" and\n    \"inf step2 s2\"\n  shows \"inf step1 s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L1.inf_step s1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L1.inf_step s1", "from assms"], ["proof (chain)\npicking this:\n  match i s1 s2\n  L2.inf_step s2", "have \"inf_wf step1 order i s1\""], ["proof (prove)\nusing this:\n  match i s1 s2\n  L2.inf_step s2\n\ngoal (1 subgoal):\n 1. inf_wf step1 (\\<sqsubset>) i s1", "proof (coinduction arbitrary: i s1 s2)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>match i s1 s2; L2.inf_step s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>n m x.\n                             i = m \\<and>\n                             s1 = x \\<and>\n                             n \\<sqsubset> m \\<and>\n                             ((\\<exists>i s1 s2.\n                                  n = i \\<and>\n                                  x = s1 \\<and>\n                                  match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n                              inf_wf step1 (\\<sqsubset>) n x)) \\<or>\n                         (\\<exists>x y n m.\n                             i = m \\<and>\n                             s1 = x \\<and>\n                             step1\\<^sup>+\\<^sup>+ x y \\<and>\n                             ((\\<exists>i s1 s2.\n                                  n = i \\<and>\n                                  y = s1 \\<and>\n                                  match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n                              inf_wf step1 (\\<sqsubset>) n y))", "case inf_wf"], ["proof (state)\nthis:\n  match i s1 s2\n  L2.inf_step s2\n\ngoal (1 subgoal):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>match i s1 s2; L2.inf_step s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>n m x.\n                             i = m \\<and>\n                             s1 = x \\<and>\n                             n \\<sqsubset> m \\<and>\n                             ((\\<exists>i s1 s2.\n                                  n = i \\<and>\n                                  x = s1 \\<and>\n                                  match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n                              inf_wf step1 (\\<sqsubset>) n x)) \\<or>\n                         (\\<exists>x y n m.\n                             i = m \\<and>\n                             s1 = x \\<and>\n                             step1\\<^sup>+\\<^sup>+ x y \\<and>\n                             ((\\<exists>i s1 s2.\n                                  n = i \\<and>\n                                  y = s1 \\<and>\n                                  match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n                              inf_wf step1 (\\<sqsubset>) n y))", "obtain s2' where \"step2 s2 s2'\" and \"inf step2 s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        \\<lbrakk>step2 s2 s2'; L2.inf_step s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using inf_wf(2)"], ["proof (prove)\nusing this:\n  L2.inf_step s2\n\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        \\<lbrakk>step2 s2 s2'; L2.inf_step s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: inf.cases)"], ["proof (state)\nthis:\n  step2 s2 s2'\n  L2.inf_step s2'\n\ngoal (1 subgoal):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>match i s1 s2; L2.inf_step s2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>n m x.\n                             i = m \\<and>\n                             s1 = x \\<and>\n                             n \\<sqsubset> m \\<and>\n                             ((\\<exists>i s1 s2.\n                                  n = i \\<and>\n                                  x = s1 \\<and>\n                                  match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n                              inf_wf step1 (\\<sqsubset>) n x)) \\<or>\n                         (\\<exists>x y n m.\n                             i = m \\<and>\n                             s1 = x \\<and>\n                             step1\\<^sup>+\\<^sup>+ x y \\<and>\n                             ((\\<exists>i s1 s2.\n                                  n = i \\<and>\n                                  y = s1 \\<and>\n                                  match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n                              inf_wf step1 (\\<sqsubset>) n y))", "from simulation[OF \\<open>match i s1 s2\\<close> \\<open>step2 s2 s2'\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> i2 \\<sqsubset> i)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> i2 \\<sqsubset> i)\n\ngoal (1 subgoal):\n 1. (\\<exists>n m x.\n        i = m \\<and>\n        s1 = x \\<and>\n        n \\<sqsubset> m \\<and>\n        ((\\<exists>i s1 s2.\n             n = i \\<and>\n             x = s1 \\<and> match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n         inf_wf step1 (\\<sqsubset>) n x)) \\<or>\n    (\\<exists>x y n m.\n        i = m \\<and>\n        s1 = x \\<and>\n        step1\\<^sup>+\\<^sup>+ x y \\<and>\n        ((\\<exists>i s1 s2.\n             n = i \\<and>\n             y = s1 \\<and> match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n         inf_wf step1 (\\<sqsubset>) n y))", "using \\<open>inf step2 s2'\\<close>"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> i2 \\<sqsubset> i)\n  L2.inf_step s2'\n\ngoal (1 subgoal):\n 1. (\\<exists>n m x.\n        i = m \\<and>\n        s1 = x \\<and>\n        n \\<sqsubset> m \\<and>\n        ((\\<exists>i s1 s2.\n             n = i \\<and>\n             x = s1 \\<and> match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n         inf_wf step1 (\\<sqsubset>) n x)) \\<or>\n    (\\<exists>x y n m.\n        i = m \\<and>\n        s1 = x \\<and>\n        step1\\<^sup>+\\<^sup>+ x y \\<and>\n        ((\\<exists>i s1 s2.\n             n = i \\<and>\n             y = s1 \\<and> match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n         inf_wf step1 (\\<sqsubset>) n y))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n m x.\n      i = m \\<and>\n      s1 = x \\<and>\n      n \\<sqsubset> m \\<and>\n      ((\\<exists>i s1 s2.\n           n = i \\<and>\n           x = s1 \\<and> match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n       inf_wf step1 (\\<sqsubset>) n x)) \\<or>\n  (\\<exists>x y n m.\n      i = m \\<and>\n      s1 = x \\<and>\n      step1\\<^sup>+\\<^sup>+ x y \\<and>\n      ((\\<exists>i s1 s2.\n           n = i \\<and>\n           y = s1 \\<and> match i s1 s2 \\<and> L2.inf_step s2) \\<or>\n       inf_wf step1 (\\<sqsubset>) n y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inf_wf step1 (\\<sqsubset>) i s1\n\ngoal (1 subgoal):\n 1. L1.inf_step s1", "thus ?thesis"], ["proof (prove)\nusing this:\n  inf_wf step1 (\\<sqsubset>) i s1\n\ngoal (1 subgoal):\n 1. L1.inf_step s1", "using inf_wf_to_inf"], ["proof (prove)\nusing this:\n  inf_wf step1 (\\<sqsubset>) i s1\n  \\<lbrakk>well_founded ?order; inf_wf ?r ?order ?n ?x\\<rbrakk>\n  \\<Longrightarrow> Inf.inf ?r ?x\n\ngoal (1 subgoal):\n 1. L1.inf_step s1", "by (auto intro: inf_wf_to_inf well_founded_axioms)"], ["proof (state)\nthis:\n  L1.inf_step s1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Preservation of behaviour\\<close>"], ["", "text \\<open>\nThe main correctness theorem states that, for any two matching programs, any not wrong behaviour of the later is also a behaviour of the former.\nIn other words, if the compiled program does not crash, then its behaviour, whether it terminates or not, is a also a valid behaviour of the source program.\n\\<close>"], ["", "lemma simulation_behaviour :\n  \"L2.sem_behaves s\\<^sub>2 b\\<^sub>2 \\<Longrightarrow> \\<not>is_wrong b\\<^sub>2 \\<Longrightarrow> match i s\\<^sub>1 s\\<^sub>2 \\<Longrightarrow>\n    \\<exists>b\\<^sub>1 i'. L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and> rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>L2.sem_behaves s\\<^sub>2 b\\<^sub>2; \\<not> is_wrong b\\<^sub>2;\n     match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                         L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                         rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "proof(induction rule: L2.sem_behaves.cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "case (state_terminates s2 s2')"], ["proof (state)\nthis:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Terminates s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Terminates s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2", "obtain i' s1' where \"L1.eval s\\<^sub>1 s1'\" and \"match i' s1' s2'\""], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Terminates s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>s1' i'.\n        \\<lbrakk>L1.eval s\\<^sub>1 s1'; match i' s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lift_simulation_eval"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Terminates s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n  \\<lbrakk>L2.eval ?s2.0 ?s2'; match ?i1.0 ?s1.0 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i2 s1'.\n                       L1.eval ?s1.0 s1' \\<and> match i2 s1' ?s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s1' i'.\n        \\<lbrakk>L1.eval s\\<^sub>1 s1'; match i' s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  L1.eval s\\<^sub>1 s1'\n  match i' s1' s2'\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "hence \"final1 s1'\""], ["proof (prove)\nusing this:\n  L1.eval s\\<^sub>1 s1'\n  match i' s1' s2'\n\ngoal (1 subgoal):\n 1. final1 s1'", "by (auto intro: state_terminates.hyps match_final)"], ["proof (state)\nthis:\n  final1 s1'\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "hence \"L1.sem_behaves s\\<^sub>1 (Terminates s1')\""], ["proof (prove)\nusing this:\n  final1 s1'\n\ngoal (1 subgoal):\n 1. L1.sem_behaves s\\<^sub>1 (Terminates s1')", "using L1.final_finished"], ["proof (prove)\nusing this:\n  final1 s1'\n  final1 ?s \\<Longrightarrow> finished step1 ?s\n\ngoal (1 subgoal):\n 1. L1.sem_behaves s\\<^sub>1 (Terminates s1')", "by (simp add: L1.state_terminates \\<open>L1.eval s\\<^sub>1 s1'\\<close>)"], ["proof (state)\nthis:\n  L1.sem_behaves s\\<^sub>1 (Terminates s1')\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  L1.sem_behaves s\\<^sub>1 (Terminates s1')\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "have \"rel_behaviour (match i') (Terminates s1') b\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_behaviour (match i') (Terminates s1') b\\<^sub>2", "by (simp add: \\<open>match i' s1' s2'\\<close> state_terminates.hyps)"], ["proof (state)\nthis:\n  rel_behaviour (match i') (Terminates s1') b\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Terminates s2; L2.eval s1 s2;\n        finished step2 s2; final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 3. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  L1.sem_behaves s\\<^sub>1 (Terminates s1')\n  rel_behaviour (match i') (Terminates s1') b\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  L1.sem_behaves s\\<^sub>1 (Terminates s1')\n  rel_behaviour (match i') (Terminates s1') b\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<^sub>1 i'.\n       L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n       rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "by blast"], ["proof (state)\nthis:\n  \\<exists>b\\<^sub>1 i'.\n     L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n     rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "case (state_diverges s2)"], ["proof (state)\nthis:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Diverges\n  L2.inf_step s2\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Diverges; L2.inf_step s1;\n        \\<not> is_wrong b\\<^sub>2; match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n 2. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Diverges\n  L2.inf_step s2\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Diverges\n  L2.inf_step s2\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<^sub>1 i'.\n       L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n       rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "using backward_simulation_inf L1.state_diverges"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Diverges\n  L2.inf_step s2\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n  \\<lbrakk>match ?i ?s1.0 ?s2.0; L2.inf_step ?s2.0\\<rbrakk>\n  \\<Longrightarrow> L1.inf_step ?s1.0\n  L1.inf_step ?s1.0 \\<Longrightarrow> L1.sem_behaves ?s1.0 Diverges\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<^sub>1 i'.\n       L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n       rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>b\\<^sub>1 i'.\n     L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n     rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "case (state_goes_wrong s2 s2')"], ["proof (state)\nthis:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Goes_wrong s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  \\<not> final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s\\<^sub>2 = s1; b\\<^sub>2 = Goes_wrong s2; L2.eval s1 s2;\n        finished step2 s2; \\<not> final2 s2; \\<not> is_wrong b\\<^sub>2;\n        match i s\\<^sub>1 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<^sub>1 i'.\n                            L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n                            rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Goes_wrong s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  \\<not> final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Goes_wrong s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  \\<not> final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<^sub>1 i'.\n       L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n       rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "using \\<open>\\<not>is_wrong b\\<^sub>2\\<close>"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s2\n  b\\<^sub>2 = Goes_wrong s2'\n  L2.eval s2 s2'\n  finished step2 s2'\n  \\<not> final2 s2'\n  \\<not> is_wrong b\\<^sub>2\n  match i s\\<^sub>1 s\\<^sub>2\n  \\<not> is_wrong b\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<^sub>1 i'.\n       L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n       rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  \\<exists>b\\<^sub>1 i'.\n     L1.sem_behaves s\\<^sub>1 b\\<^sub>1 \\<and>\n     rel_behaviour (match i') b\\<^sub>1 b\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Composition of backward simulations\\<close>"], ["", "definition rel_comp ::\n  \"('a \\<Rightarrow> 'b \\<Rightarrow> 'c \\<Rightarrow> bool) \\<Rightarrow> ('d \\<Rightarrow> 'c \\<Rightarrow> 'e \\<Rightarrow> bool) \\<Rightarrow> ('a \\<times> 'd) \\<Rightarrow> 'b \\<Rightarrow> 'e \\<Rightarrow> bool\" where\n  \"rel_comp r1 r2 i \\<equiv> (r1 (fst i) OO r2 (snd i))\""], ["", "lemma backward_simulation_composition:\n  assumes\n    \"backward_simulation step1 step2 final1 final2 order1 match1\"\n    \"backward_simulation step2 step3 final2 final3 order2 match2\"\n  shows\n    \"backward_simulation step1 step3 final1 final3\n      (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backward_simulation step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "proof intro_locales"], ["proof (state)\ngoal (4 subgoals):\n 1. semantics step1 final1\n 2. semantics step3 final3\n 3. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\n 4. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "show \"semantics step1 final1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semantics step1 final1", "by (auto intro: backward_simulation.axioms assms)"], ["proof (state)\nthis:\n  semantics step1 final1\n\ngoal (3 subgoals):\n 1. semantics step3 final3\n 2. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\n 3. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. semantics step3 final3\n 2. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\n 3. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "show \"semantics step3 final3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semantics step3 final3", "by (auto intro: backward_simulation.axioms assms)"], ["proof (state)\nthis:\n  semantics step3 final3\n\ngoal (2 subgoals):\n 1. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\n 2. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\n 2. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "show \"well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)", "using assms[THEN backward_simulation.axioms(3)]"], ["proof (prove)\nusing this:\n  well_founded order1\n  well_founded order2\n\ngoal (1 subgoal):\n 1. well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)", "by (simp add: lex_prodp_well_founded well_founded.intro well_founded.wf wfP_trancl)"], ["proof (state)\nthis:\n  well_founded (lex_prodp order1\\<^sup>+\\<^sup>+ order2)\n\ngoal (1 subgoal):\n 1. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "show \"backward_simulation_axioms step1 step3 final1 final3\n    (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backward_simulation_axioms step1 step3 final1 final3\n     (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp match1 match2 i s1 s2; final3 s2\\<rbrakk>\n       \\<Longrightarrow> final1 s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "fix i s1 s3"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp match1 match2 i s1 s2; final3 s2\\<rbrakk>\n       \\<Longrightarrow> final1 s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "assume\n      match: \"rel_comp match1 match2 i s1 s3\" and\n      final: \"final3 s3\""], ["proof (state)\nthis:\n  rel_comp match1 match2 i s1 s3\n  final3 s3\n\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp match1 match2 i s1 s2; final3 s2\\<rbrakk>\n       \\<Longrightarrow> final1 s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "obtain i1 i2 s2 where \"match1 i1 s1 s2\" and \"match2 i2 s2 s3\" and \"i = (i1, i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i1 s2 i2.\n        \\<lbrakk>match1 i1 s1 s2; match2 i2 s2 s3; i = (i1, i2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using match"], ["proof (prove)\nusing this:\n  rel_comp match1 match2 i s1 s3\n\ngoal (1 subgoal):\n 1. (\\<And>i1 s2 i2.\n        \\<lbrakk>match1 i1 s1 s2; match2 i2 s2 s3; i = (i1, i2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rel_comp_def"], ["proof (prove)\nusing this:\n  (match1 (fst i) OO match2 (snd i)) s1 s3\n\ngoal (1 subgoal):\n 1. (\\<And>i1 s2 i2.\n        \\<lbrakk>match1 i1 s1 s2; match2 i2 s2 s3; i = (i1, i2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match1 i1 s1 s2\n  match2 i2 s2 s3\n  i = (i1, i2)\n\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp match1 match2 i s1 s2; final3 s2\\<rbrakk>\n       \\<Longrightarrow> final1 s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "thus \"final1 s1\""], ["proof (prove)\nusing this:\n  match1 i1 s1 s2\n  match2 i2 s2 s3\n  i = (i1, i2)\n\ngoal (1 subgoal):\n 1. final1 s1", "using final assms[THEN backward_simulation.match_final]"], ["proof (prove)\nusing this:\n  match1 i1 s1 s2\n  match2 i2 s2 s3\n  i = (i1, i2)\n  final3 s3\n  \\<lbrakk>match1 ?i ?s1.0 ?s2.0; final2 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> final1 ?s1.0\n  \\<lbrakk>match2 ?i ?s1.0 ?s2.0; final3 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> final2 ?s1.0\n\ngoal (1 subgoal):\n 1. final1 s1", "by simp"], ["proof (state)\nthis:\n  final1 s1\n\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "fix i s1 s3 s3'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "assume\n      match: \"rel_comp match1 match2 i s1 s3\" and\n      step: \"step3 s3 s3'\""], ["proof (state)\nthis:\n  rel_comp match1 match2 i s1 s3\n  step3 s3 s3'\n\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "obtain i1 i2 s2 where \"match1 i1 s1 s2\" and \"match2 i2 s2 s3\" and i_def: \"i = (i1, i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i1 s2 i2.\n        \\<lbrakk>match1 i1 s1 s2; match2 i2 s2 s3; i = (i1, i2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using match"], ["proof (prove)\nusing this:\n  rel_comp match1 match2 i s1 s3\n\ngoal (1 subgoal):\n 1. (\\<And>i1 s2 i2.\n        \\<lbrakk>match1 i1 s1 s2; match2 i2 s2 s3; i = (i1, i2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rel_comp_def"], ["proof (prove)\nusing this:\n  (match1 (fst i) OO match2 (snd i)) s1 s3\n\ngoal (1 subgoal):\n 1. (\\<And>i1 s2 i2.\n        \\<lbrakk>match1 i1 s1 s2; match2 i2 s2 s3; i = (i1, i2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match1 i1 s1 s2\n  match2 i2 s2 s3\n  i = (i1, i2)\n\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp match1 match2 i1 s1 s2; step3 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp match1 match2 i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp match1 match2 i2 s1 s2' \\<and>\n                             lex_prodp order1\\<^sup>+\\<^sup>+ order2 i2 i1)", "from backward_simulation.simulation[OF assms(2) \\<open>match2 i2 s2 s3\\<close> step]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step2\\<^sup>+\\<^sup>+ s2 s1' \\<and> match2 i2 s1' s3') \\<or>\n  (\\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2)", "show \"(\\<exists>i' s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> rel_comp match1 match2 i' s1' s3') \\<or>\n       (\\<exists>i'. rel_comp match1 match2 i' s1 s3' \\<and> lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\"\n      (is \"(\\<exists>i' s1'. ?STEPS i' s1') \\<or> ?STALL\")"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step2\\<^sup>+\\<^sup>+ s2 s1' \\<and> match2 i2 s1' s3') \\<or>\n  (\\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2)\n\ngoal (1 subgoal):\n 1. (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step2\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n       match2 i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "assume \"\\<exists>i2' s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match2 i2' s2' s3'\""], ["proof (state)\nthis:\n  \\<exists>i2' s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match2 i2' s2' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step2\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n       match2 i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2' s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match2 i2' s2' s3'", "obtain i2' s2' where \"step2\\<^sup>+\\<^sup>+ s2 s2'\" and \"match2 i2' s2' s3'\""], ["proof (prove)\nusing this:\n  \\<exists>i2' s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match2 i2' s2' s3'\n\ngoal (1 subgoal):\n 1. (\\<And>s2' i2'.\n        \\<lbrakk>step2\\<^sup>+\\<^sup>+ s2 s2'; match2 i2' s2' s3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step2\\<^sup>+\\<^sup>+ s2 s2'\n  match2 i2' s2' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step2\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n       match2 i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "from backward_simulation.lift_simulation_plus[OF assms(1) \\<open>step2\\<^sup>+\\<^sup>+ s2 s2'\\<close> \\<open>match1 i1 s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match1 i2 s1' s2') \\<or>\n  (\\<exists>i2. match1 i2 s1 s2' \\<and> order1\\<^sup>+\\<^sup>+ i2 i1)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match1 i2 s1' s2') \\<or>\n  (\\<exists>i2. match1 i2 s1 s2' \\<and> order1\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal (1 subgoal):\n 1. (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match1 i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "assume \"\\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match1 i2 s1' s2'\""], ["proof (state)\nthis:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match1 i2 s1' s2'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match1 i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match1 i2 s1' s2'", "obtain i2 s1' where \"step1\\<^sup>+\\<^sup>+ s1 s1'\" and \"match1 i2 s1' s2'\""], ["proof (prove)\nusing this:\n  \\<exists>i2 s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match1 i2 s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s1' i2.\n        \\<lbrakk>step1\\<^sup>+\\<^sup>+ s1 s1'; match1 i2 s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step1\\<^sup>+\\<^sup>+ s1 s1'\n  match1 i2 s1' s2'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match1 i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "hence \"?STEPS (i2, i2') s1'\""], ["proof (prove)\nusing this:\n  step1\\<^sup>+\\<^sup>+ s1 s1'\n  match1 i2 s1' s2'\n\ngoal (1 subgoal):\n 1. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n    rel_comp match1 match2 (i2, i2') s1' s3'", "by (auto intro: \\<open>match2 i2' s2' s3'\\<close> simp: rel_comp_def)"], ["proof (state)\nthis:\n  step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n  rel_comp match1 match2 (i2, i2') s1' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n       match1 i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n 2. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n  rel_comp match1 match2 (i2, i2') s1' s3'\n\ngoal (1 subgoal):\n 1. (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i' s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      rel_comp match1 match2 i' s1' s3') \\<or>\n  (\\<exists>i'.\n      rel_comp match1 match2 i' s1 s3' \\<and>\n      lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "assume \"\\<exists>i2. match1 i2 s1 s2' \\<and> order1\\<^sup>+\\<^sup>+ i2 i1\""], ["proof (state)\nthis:\n  \\<exists>i2. match1 i2 s1 s2' \\<and> order1\\<^sup>+\\<^sup>+ i2 i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2. match1 i2 s1 s2' \\<and> order1\\<^sup>+\\<^sup>+ i2 i1", "obtain i2'' where \"match1 i2'' s1 s2'\" and \"order1\\<^sup>+\\<^sup>+ i2'' i1\""], ["proof (prove)\nusing this:\n  \\<exists>i2. match1 i2 s1 s2' \\<and> order1\\<^sup>+\\<^sup>+ i2 i1\n\ngoal (1 subgoal):\n 1. (\\<And>i2''.\n        \\<lbrakk>match1 i2'' s1 s2'; order1\\<^sup>+\\<^sup>+ i2'' i1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match1 i2'' s1 s2'\n  order1\\<^sup>+\\<^sup>+ i2'' i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "hence ?STALL"], ["proof (prove)\nusing this:\n  match1 i2'' s1 s2'\n  order1\\<^sup>+\\<^sup>+ i2'' i1\n\ngoal (1 subgoal):\n 1. \\<exists>i'.\n       rel_comp match1 match2 i' s1 s3' \\<and>\n       lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i", "unfolding rel_comp_def i_def lex_prodp_def"], ["proof (prove)\nusing this:\n  match1 i2'' s1 s2'\n  order1\\<^sup>+\\<^sup>+ i2'' i1\n\ngoal (1 subgoal):\n 1. \\<exists>i'.\n       (match1 (fst i') OO match2 (snd i')) s1 s3' \\<and>\n       (order1\\<^sup>+\\<^sup>+ (fst i') (fst (i1, i2)) \\<or>\n        fst i' = fst (i1, i2) \\<and> order2 (snd i') (snd (i1, i2)))", "using \\<open>match2 i2' s2' s3'\\<close>"], ["proof (prove)\nusing this:\n  match1 i2'' s1 s2'\n  order1\\<^sup>+\\<^sup>+ i2'' i1\n  match2 i2' s2' s3'\n\ngoal (1 subgoal):\n 1. \\<exists>i'.\n       (match1 (fst i') OO match2 (snd i')) s1 s3' \\<and>\n       (order1\\<^sup>+\\<^sup>+ (fst i') (fst (i1, i2)) \\<or>\n        fst i' = fst (i1, i2) \\<and> order2 (snd i') (snd (i1, i2)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>i'.\n     rel_comp match1 match2 i' s1 s3' \\<and>\n     lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match1 i2 s1 s2' \\<and>\n       order1\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i'.\n     rel_comp match1 match2 i' s1 s3' \\<and>\n     lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i\n\ngoal (1 subgoal):\n 1. (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "by simp"], ["proof (state)\nthis:\n  (\\<exists>i' s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      rel_comp match1 match2 i' s1' s3') \\<or>\n  (\\<exists>i'.\n      rel_comp match1 match2 i' s1 s3' \\<and>\n      lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>i' s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      rel_comp match1 match2 i' s1' s3') \\<or>\n  (\\<exists>i'.\n      rel_comp match1 match2 i' s1 s3' \\<and>\n      lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n\ngoal (1 subgoal):\n 1. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "assume \"\\<exists>i2'. match2 i2' s2 s3' \\<and> order2 i2' i2\""], ["proof (state)\nthis:\n  \\<exists>i2'. match2 i2' s2 s3' \\<and> order2 i2' i2\n\ngoal (1 subgoal):\n 1. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2'. match2 i2' s2 s3' \\<and> order2 i2' i2", "obtain i2' where \"match2 i2' s2 s3'\" and \"order2 i2' i2\""], ["proof (prove)\nusing this:\n  \\<exists>i2'. match2 i2' s2 s3' \\<and> order2 i2' i2\n\ngoal (1 subgoal):\n 1. (\\<And>i2'.\n        \\<lbrakk>match2 i2' s2 s3'; order2 i2' i2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match2 i2' s2 s3'\n  order2 i2' i2\n\ngoal (1 subgoal):\n 1. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "hence ?STALL"], ["proof (prove)\nusing this:\n  match2 i2' s2 s3'\n  order2 i2' i2\n\ngoal (1 subgoal):\n 1. \\<exists>i'.\n       rel_comp match1 match2 i' s1 s3' \\<and>\n       lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i", "unfolding rel_comp_def i_def lex_prodp_def"], ["proof (prove)\nusing this:\n  match2 i2' s2 s3'\n  order2 i2' i2\n\ngoal (1 subgoal):\n 1. \\<exists>i'.\n       (match1 (fst i') OO match2 (snd i')) s1 s3' \\<and>\n       (order1\\<^sup>+\\<^sup>+ (fst i') (fst (i1, i2)) \\<or>\n        fst i' = fst (i1, i2) \\<and> order2 (snd i') (snd (i1, i2)))", "using \\<open>match1 i1 s1 s2\\<close>"], ["proof (prove)\nusing this:\n  match2 i2' s2 s3'\n  order2 i2' i2\n  match1 i1 s1 s2\n\ngoal (1 subgoal):\n 1. \\<exists>i'.\n       (match1 (fst i') OO match2 (snd i')) s1 s3' \\<and>\n       (order1\\<^sup>+\\<^sup>+ (fst i') (fst (i1, i2)) \\<or>\n        fst i' = fst (i1, i2) \\<and> order2 (snd i') (snd (i1, i2)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>i'.\n     rel_comp match1 match2 i' s1 s3' \\<and>\n     lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i\n\ngoal (1 subgoal):\n 1. \\<exists>i2a. match2 i2a s2 s3' \\<and> order2 i2a i2 \\<Longrightarrow>\n    (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i'.\n     rel_comp match1 match2 i' s1 s3' \\<and>\n     lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i\n\ngoal (1 subgoal):\n 1. (\\<exists>i' s1'.\n        step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp match1 match2 i' s1' s3') \\<or>\n    (\\<exists>i'.\n        rel_comp match1 match2 i' s1 s3' \\<and>\n        lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)", "by simp"], ["proof (state)\nthis:\n  (\\<exists>i' s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      rel_comp match1 match2 i' s1' s3') \\<or>\n  (\\<exists>i'.\n      rel_comp match1 match2 i' s1 s3' \\<and>\n      lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>i' s1'.\n      step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      rel_comp match1 match2 i' s1' s3') \\<or>\n  (\\<exists>i'.\n      rel_comp match1 match2 i' s1 s3' \\<and>\n      lex_prodp order1\\<^sup>+\\<^sup>+ order2 i' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  backward_simulation_axioms step1 step3 final1 final3\n   (lex_prodp order1\\<^sup>+\\<^sup>+ order2) (rel_comp match1 match2)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes r :: \"'i \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\nbegin"], ["", "fun rel_comp_pow where\n  \"rel_comp_pow [] x y = False\" |\n  \"rel_comp_pow [i] x y = r i x y\" |\n  \"rel_comp_pow (i # is) x z = (\\<exists>y. r i x y \\<and> rel_comp_pow is y z)\""], ["", "end"], ["", "lemma backward_simulation_pow:\n  assumes\n    \"backward_simulation step step final final order match\"\n  shows\n    \"backward_simulation step step final final (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backward_simulation step step final final (lexp order\\<^sup>+\\<^sup>+)\n     (rel_comp_pow match)", "proof intro_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. semantics step final\n 2. well_founded (lexp order\\<^sup>+\\<^sup>+)\n 3. backward_simulation_axioms step step final final\n     (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)", "show \"semantics step final\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semantics step final", "by (auto intro: backward_simulation.axioms assms)"], ["proof (state)\nthis:\n  semantics step final\n\ngoal (2 subgoals):\n 1. well_founded (lexp order\\<^sup>+\\<^sup>+)\n 2. backward_simulation_axioms step step final final\n     (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. well_founded (lexp order\\<^sup>+\\<^sup>+)\n 2. backward_simulation_axioms step step final final\n     (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)", "show \"well_founded (lexp order\\<^sup>+\\<^sup>+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_founded (lexp order\\<^sup>+\\<^sup>+)", "using backward_simulation.axioms(3)[OF assms] lex_list_well_founded"], ["proof (prove)\nusing this:\n  well_founded order\n  well_founded ?order \\<Longrightarrow> well_founded (lexp ?order)\n\ngoal (1 subgoal):\n 1. well_founded (lexp order\\<^sup>+\\<^sup>+)", "using well_founded.intro well_founded.wf wfP_trancl"], ["proof (prove)\nusing this:\n  well_founded order\n  well_founded ?order \\<Longrightarrow> well_founded (lexp ?order)\n  wfP ?R \\<Longrightarrow> well_founded ?R\n  well_founded ?R \\<Longrightarrow> wfP ?R\n  wfP ?r \\<Longrightarrow> wfP ?r\\<^sup>+\\<^sup>+\n\ngoal (1 subgoal):\n 1. well_founded (lexp order\\<^sup>+\\<^sup>+)", "by blast"], ["proof (state)\nthis:\n  well_founded (lexp order\\<^sup>+\\<^sup>+)\n\ngoal (1 subgoal):\n 1. backward_simulation_axioms step step final final\n     (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. backward_simulation_axioms step step final final\n     (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)", "show \"backward_simulation_axioms step step final final (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backward_simulation_axioms step step final final\n     (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)", "proof unfold_locales"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp_pow match i s1 s2; final s2\\<rbrakk>\n       \\<Longrightarrow> final s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "fix \"is\" s1 s2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp_pow match i s1 s2; final s2\\<rbrakk>\n       \\<Longrightarrow> final s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "assume \"rel_comp_pow match is s1 s2\" and \"final s2\""], ["proof (state)\nthis:\n  rel_comp_pow match is s1 s2\n  final s2\n\ngoal (2 subgoals):\n 1. \\<And>i s1 s2.\n       \\<lbrakk>rel_comp_pow match i s1 s2; final s2\\<rbrakk>\n       \\<Longrightarrow> final s1\n 2. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "thus \"final s1\""], ["proof (prove)\nusing this:\n  rel_comp_pow match is s1 s2\n  final s2\n\ngoal (1 subgoal):\n 1. final s1", "thm rel_comp_pow.induct"], ["proof (prove)\nusing this:\n  rel_comp_pow match is s1 s2\n  final s2\n\ngoal (1 subgoal):\n 1. final s1", "proof (induction \"is\" s1 s2 rule: rel_comp_pow.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>rel_comp_pow match [] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 2. \\<And>i x y.\n       \\<lbrakk>rel_comp_pow match [i] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 3. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "case (1 x y)"], ["proof (state)\nthis:\n  rel_comp_pow match [] x y\n  final y\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>rel_comp_pow match [] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 2. \\<And>i x y.\n       \\<lbrakk>rel_comp_pow match [i] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 3. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "then"], ["proof (chain)\npicking this:\n  rel_comp_pow match [] x y\n  final y", "show ?case"], ["proof (prove)\nusing this:\n  rel_comp_pow match [] x y\n  final y\n\ngoal (1 subgoal):\n 1. final x", "by simp"], ["proof (state)\nthis:\n  final x\n\ngoal (2 subgoals):\n 1. \\<And>i x y.\n       \\<lbrakk>rel_comp_pow match [i] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 2. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x y.\n       \\<lbrakk>rel_comp_pow match [i] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 2. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "case (2 i x y)"], ["proof (state)\nthis:\n  rel_comp_pow match [i] x y\n  final y\n\ngoal (2 subgoals):\n 1. \\<And>i x y.\n       \\<lbrakk>rel_comp_pow match [i] x y; final y\\<rbrakk>\n       \\<Longrightarrow> final x\n 2. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "then"], ["proof (chain)\npicking this:\n  rel_comp_pow match [i] x y\n  final y", "show ?case"], ["proof (prove)\nusing this:\n  rel_comp_pow match [i] x y\n  final y\n\ngoal (1 subgoal):\n 1. final x", "using backward_simulation.match_final[OF assms(1)]"], ["proof (prove)\nusing this:\n  rel_comp_pow match [i] x y\n  final y\n  \\<lbrakk>match ?i ?s1.0 ?s2.0; final ?s2.0\\<rbrakk>\n  \\<Longrightarrow> final ?s1.0\n\ngoal (1 subgoal):\n 1. final x", "by simp"], ["proof (state)\nthis:\n  final x\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "case (3 i1 i2 \"is\" x z)"], ["proof (state)\nthis:\n  \\<lbrakk>rel_comp_pow match (i2 # is) ?xa z; final z\\<rbrakk>\n  \\<Longrightarrow> final ?xa\n  rel_comp_pow match (i1 # i2 # is) x z\n  final z\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "from \"3.prems\"[simplified]"], ["proof (chain)\npicking this:\n  \\<exists>y. match i1 x y \\<and> rel_comp_pow match (i2 # is) y z\n  final z", "obtain y where\n        match: \"match i1 x y\" and \"rel_comp_pow match (i2 # is) y z\""], ["proof (prove)\nusing this:\n  \\<exists>y. match i1 x y \\<and> rel_comp_pow match (i2 # is) y z\n  final z\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>match i1 x y; rel_comp_pow match (i2 # is) y z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match i1 x y\n  rel_comp_pow match (i2 # is) y z\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "hence \"final y\""], ["proof (prove)\nusing this:\n  match i1 x y\n  rel_comp_pow match (i2 # is) y z\n\ngoal (1 subgoal):\n 1. final y", "using \"3.IH\" \"3.prems\""], ["proof (prove)\nusing this:\n  match i1 x y\n  rel_comp_pow match (i2 # is) y z\n  \\<lbrakk>rel_comp_pow match (i2 # is) ?xa z; final z\\<rbrakk>\n  \\<Longrightarrow> final ?xa\n  rel_comp_pow match (i1 # i2 # is) x z\n  final z\n\ngoal (1 subgoal):\n 1. final y", "by simp"], ["proof (state)\nthis:\n  final y\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    final z\\<rbrakk>\n                   \\<Longrightarrow> final xa;\n        rel_comp_pow match (i # v # va) x z; final z\\<rbrakk>\n       \\<Longrightarrow> final x", "thus ?case"], ["proof (prove)\nusing this:\n  final y\n\ngoal (1 subgoal):\n 1. final x", "using \"3.prems\" match backward_simulation.match_final[OF assms(1)]"], ["proof (prove)\nusing this:\n  final y\n  rel_comp_pow match (i1 # i2 # is) x z\n  final z\n  match i1 x y\n  \\<lbrakk>match ?i ?s1.0 ?s2.0; final ?s2.0\\<rbrakk>\n  \\<Longrightarrow> final ?s1.0\n\ngoal (1 subgoal):\n 1. final x", "by auto"], ["proof (state)\nthis:\n  final x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  final s1\n\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "fix \"is\" s1 s3 s3'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "assume \"rel_comp_pow match is s1 s3\" and \"step s3 s3'\""], ["proof (state)\nthis:\n  rel_comp_pow match is s1 s3\n  step s3 s3'\n\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "hence \"(\\<exists>is' s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> length is' = length is \\<and> rel_comp_pow match is' s1' s3') \\<or>\n      (\\<exists>is'. rel_comp_pow match is' s1 s3' \\<and> lexp order\\<^sup>+\\<^sup>+ is' is)\""], ["proof (prove)\nusing this:\n  rel_comp_pow match is s1 s3\n  step s3 s3'\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length is \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' is)", "proof (induction \"is\" s1 s3 arbitrary: s3' rule: rel_comp_pow.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y s3'.\n       \\<lbrakk>rel_comp_pow match [] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [])\n 2. \\<And>i x y s3'.\n       \\<lbrakk>rel_comp_pow match [i] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [i] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [i])\n 3. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "case 1"], ["proof (state)\nthis:\n  rel_comp_pow match [] x_ y_\n  step y_ s3'\n\ngoal (3 subgoals):\n 1. \\<And>x y s3'.\n       \\<lbrakk>rel_comp_pow match [] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [])\n 2. \\<And>i x y s3'.\n       \\<lbrakk>rel_comp_pow match [i] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [i] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [i])\n 3. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "then"], ["proof (chain)\npicking this:\n  rel_comp_pow match [] x_ y_\n  step y_ s3'", "show ?case"], ["proof (prove)\nusing this:\n  rel_comp_pow match [] x_ y_\n  step y_ s3'\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ x_ s1' \\<and>\n        length is' = length [] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' x_ s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [])", "by simp"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ x_ s1' \\<and>\n      length is' = length [] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' x_ s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' [])\n\ngoal (2 subgoals):\n 1. \\<And>i x y s3'.\n       \\<lbrakk>rel_comp_pow match [i] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [i] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i x y s3'.\n       \\<lbrakk>rel_comp_pow match [i] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [i] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "case (2 i s1 s3)"], ["proof (state)\nthis:\n  rel_comp_pow match [i] s1 s3\n  step s3 s3'\n\ngoal (2 subgoals):\n 1. \\<And>i x y s3'.\n       \\<lbrakk>rel_comp_pow match [i] x y; step y s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length [i] \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "from backward_simulation.simulation[OF assms(1) \"2.prems\"[simplified]]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s3') \\<or>\n  (\\<exists>i2. match i2 s1 s3' \\<and> order i2 i)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s3') \\<or>\n  (\\<exists>i2. match i2 s1 s3' \\<and> order i2 i)\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "assume \"\\<exists>i' s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i' s1' s3'\""], ["proof (state)\nthis:\n  \\<exists>i' s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i' s1' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "then"], ["proof (chain)\npicking this:\n  \\<exists>i' s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i' s1' s3'", "obtain i' s1' where \"step\\<^sup>+\\<^sup>+ s1 s1'\" and \"match i' s1' s3'\""], ["proof (prove)\nusing this:\n  \\<exists>i' s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i' s1' s3'\n\ngoal (1 subgoal):\n 1. (\\<And>s1' i'.\n        \\<lbrakk>step\\<^sup>+\\<^sup>+ s1 s1'; match i' s1' s3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step\\<^sup>+\\<^sup>+ s1 s1'\n  match i' s1' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "hence \"step\\<^sup>+\\<^sup>+ s1 s1' \\<and> rel_comp_pow match [i'] s1' s3'\""], ["proof (prove)\nusing this:\n  step\\<^sup>+\\<^sup>+ s1 s1'\n  match i' s1' s3'\n\ngoal (1 subgoal):\n 1. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> rel_comp_pow match [i'] s1' s3'", "by simp"], ["proof (state)\nthis:\n  step\\<^sup>+\\<^sup>+ s1 s1' \\<and> rel_comp_pow match [i'] s1' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])\n 2. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "thus ?thesis"], ["proof (prove)\nusing this:\n  step\\<^sup>+\\<^sup>+ s1 s1' \\<and> rel_comp_pow match [i'] s1' s3'\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "by (metis length_Cons)"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' [i])\n\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "assume \"\\<exists>i'. match i' s1 s3' \\<and> order i' i\""], ["proof (state)\nthis:\n  \\<exists>i'. match i' s1 s3' \\<and> order i' i\n\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "then"], ["proof (chain)\npicking this:\n  \\<exists>i'. match i' s1 s3' \\<and> order i' i", "obtain i' where \"match i' s1 s3'\" and \"order i' i\""], ["proof (prove)\nusing this:\n  \\<exists>i'. match i' s1 s3' \\<and> order i' i\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>match i' s1 s3'; order i' i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match i' s1 s3'\n  order i' i\n\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "hence \"rel_comp_pow match [i'] s1 s3' \\<and> lexp order\\<^sup>+\\<^sup>+ [i'] [i]\""], ["proof (prove)\nusing this:\n  match i' s1 s3'\n  order i' i\n\ngoal (1 subgoal):\n 1. rel_comp_pow match [i'] s1 s3' \\<and>\n    lexp order\\<^sup>+\\<^sup>+ [i'] [i]", "by (simp add: lexp_head tranclp.r_into_trancl)"], ["proof (state)\nthis:\n  rel_comp_pow match [i'] s1 s3' \\<and> lexp order\\<^sup>+\\<^sup>+ [i'] [i]\n\ngoal (1 subgoal):\n 1. \\<exists>i2. match i2 s1 s3' \\<and> order i2 i \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "thus ?thesis"], ["proof (prove)\nusing this:\n  rel_comp_pow match [i'] s1 s3' \\<and> lexp order\\<^sup>+\\<^sup>+ [i'] [i]\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' [i])", "by blast"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' [i])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length [i] \\<and> rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' [i])\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "case (3 i1 i2 \"is\" s1 s3)"], ["proof (state)\nthis:\n  \\<lbrakk>rel_comp_pow match (i2 # is) ?xa s3; step s3 ?s3'\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>is' s1'.\n                        step\\<^sup>+\\<^sup>+ ?xa s1' \\<and>\n                        length is' = length (i2 # is) \\<and>\n                        rel_comp_pow match is' s1' ?s3') \\<or>\n                    (\\<exists>is'.\n                        rel_comp_pow match is' ?xa ?s3' \\<and>\n                        lexp order\\<^sup>+\\<^sup>+ is' (i2 # is))\n  rel_comp_pow match (i1 # i2 # is) s1 s3\n  step s3 s3'\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "from \"3.prems\"[simplified]"], ["proof (chain)\npicking this:\n  \\<exists>y. match i1 s1 y \\<and> rel_comp_pow match (i2 # is) y s3\n  step s3 s3'", "obtain s2 where\n        \"match i1 s1 s2\" and 0: \"rel_comp_pow match (i2 # is) s2 s3\""], ["proof (prove)\nusing this:\n  \\<exists>y. match i1 s1 y \\<and> rel_comp_pow match (i2 # is) y s3\n  step s3 s3'\n\ngoal (1 subgoal):\n 1. (\\<And>s2.\n        \\<lbrakk>match i1 s1 s2; rel_comp_pow match (i2 # is) s2 s3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match i1 s1 s2\n  rel_comp_pow match (i2 # is) s2 s3\n\ngoal (1 subgoal):\n 1. \\<And>i v va x z s3'.\n       \\<lbrakk>\\<And>xa s3'.\n                   \\<lbrakk>rel_comp_pow match (v # va) xa z;\n                    step z s3'\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>is' s1'.\n   step\\<^sup>+\\<^sup>+ xa s1' \\<and>\n   length is' = length (v # va) \\<and> rel_comp_pow match is' s1' s3') \\<or>\n                                     (\\<exists>is'.\n   rel_comp_pow match is' xa s3' \\<and>\n   lexp order\\<^sup>+\\<^sup>+ is' (v # va));\n        rel_comp_pow match (i # v # va) x z; step z s3'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>is' s1'.\n                             step\\<^sup>+\\<^sup>+ x s1' \\<and>\n                             length is' = length (i # v # va) \\<and>\n                             rel_comp_pow match is' s1' s3') \\<or>\n                         (\\<exists>is'.\n                             rel_comp_pow match is' x s3' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ is' (i # v # va))", "from \"3.IH\"[OF 0 \"3.prems\"(2)]"], ["proof (chain)\npicking this:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n      length is' = length (i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s2 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i2 # is))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n      length is' = length (i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s2 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i2 # is))\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>is' s1'.\n       step\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n       length is' = length (i2 # is) \\<and>\n       rel_comp_pow match is' s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n 2. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "assume \"\\<exists>is' s2'. step\\<^sup>+\\<^sup>+ s2 s2' \\<and> length is' = length (i2 # is) \\<and>\n          rel_comp_pow match is' s2' s3'\""], ["proof (state)\nthis:\n  \\<exists>is' s2'.\n     step\\<^sup>+\\<^sup>+ s2 s2' \\<and>\n     length is' = length (i2 # is) \\<and> rel_comp_pow match is' s2' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>is' s1'.\n       step\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n       length is' = length (i2 # is) \\<and>\n       rel_comp_pow match is' s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n 2. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "then"], ["proof (chain)\npicking this:\n  \\<exists>is' s2'.\n     step\\<^sup>+\\<^sup>+ s2 s2' \\<and>\n     length is' = length (i2 # is) \\<and> rel_comp_pow match is' s2' s3'", "obtain i2' is' s2' where\n          \"step\\<^sup>+\\<^sup>+ s2 s2'\" and \"length is' = length is\" and \"rel_comp_pow match (i2' # is') s2' s3'\""], ["proof (prove)\nusing this:\n  \\<exists>is' s2'.\n     step\\<^sup>+\\<^sup>+ s2 s2' \\<and>\n     length is' = length (i2 # is) \\<and> rel_comp_pow match is' s2' s3'\n\ngoal (1 subgoal):\n 1. (\\<And>s2' is' i2'.\n        \\<lbrakk>step\\<^sup>+\\<^sup>+ s2 s2'; length is' = length is;\n         rel_comp_pow match (i2' # is') s2' s3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Suc_length_conv)"], ["proof (state)\nthis:\n  step\\<^sup>+\\<^sup>+ s2 s2'\n  length is' = length is\n  rel_comp_pow match (i2' # is') s2' s3'\n\ngoal (2 subgoals):\n 1. \\<exists>is' s1'.\n       step\\<^sup>+\\<^sup>+ s2 s1' \\<and>\n       length is' = length (i2 # is) \\<and>\n       rel_comp_pow match is' s1' s3' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n 2. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "from backward_simulation.lift_simulation_plus[OF assms(1) \\<open>step\\<^sup>+\\<^sup>+ s2 s2'\\<close> \\<open>match i1 s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>i2 s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>i2 s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2') \\<or>\n  (\\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1)\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n 2. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "assume \"\\<exists>i2 s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\""], ["proof (state)\nthis:\n  \\<exists>i2 s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\n\ngoal (2 subgoals):\n 1. \\<exists>i2 s1'.\n       step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2' \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n 2. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i2 s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "using \\<open>rel_comp_pow match (i2' # is') s2' s3'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i2 s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> match i2 s1' s2'\n  rel_comp_pow match (i2' # is') s2' s3'\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "by (metis \\<open>length is' = length is\\<close> length_Cons rel_comp_pow.simps(3))"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length (i1 # i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "assume \"\\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1\""], ["proof (state)\nthis:\n  \\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "then"], ["proof (chain)\npicking this:\n  \\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1", "obtain i1' where \"match i1' s1 s2'\" and \"order\\<^sup>+\\<^sup>+ i1' i1\""], ["proof (prove)\nusing this:\n  \\<exists>i2. match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1\n\ngoal (1 subgoal):\n 1. (\\<And>i1'.\n        \\<lbrakk>match i1' s1 s2'; order\\<^sup>+\\<^sup>+ i1' i1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match i1' s1 s2'\n  order\\<^sup>+\\<^sup>+ i1' i1\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "hence \"rel_comp_pow match (i1' # i2' # is') s1 s3'\""], ["proof (prove)\nusing this:\n  match i1' s1 s2'\n  order\\<^sup>+\\<^sup>+ i1' i1\n\ngoal (1 subgoal):\n 1. rel_comp_pow match (i1' # i2' # is') s1 s3'", "using \\<open>rel_comp_pow match (i2' # is') s2' s3'\\<close>"], ["proof (prove)\nusing this:\n  match i1' s1 s2'\n  order\\<^sup>+\\<^sup>+ i1' i1\n  rel_comp_pow match (i2' # is') s2' s3'\n\ngoal (1 subgoal):\n 1. rel_comp_pow match (i1' # i2' # is') s1 s3'", "by auto"], ["proof (state)\nthis:\n  rel_comp_pow match (i1' # i2' # is') s1 s3'\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "moreover"], ["proof (state)\nthis:\n  rel_comp_pow match (i1' # i2' # is') s1 s3'\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "have \"lexp order\\<^sup>+\\<^sup>+ (i1' # i2' # is') (i1 # i2 # is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexp order\\<^sup>+\\<^sup>+ (i1' # i2' # is') (i1 # i2 # is)", "using \\<open>order\\<^sup>+\\<^sup>+ i1' i1\\<close> \\<open>length is' = length is\\<close>"], ["proof (prove)\nusing this:\n  order\\<^sup>+\\<^sup>+ i1' i1\n  length is' = length is\n\ngoal (1 subgoal):\n 1. lexp order\\<^sup>+\\<^sup>+ (i1' # i2' # is') (i1 # i2 # is)", "by (auto intro: lexp_head)"], ["proof (state)\nthis:\n  lexp order\\<^sup>+\\<^sup>+ (i1' # i2' # is') (i1 # i2 # is)\n\ngoal (1 subgoal):\n 1. \\<exists>i2.\n       match i2 s1 s2' \\<and> order\\<^sup>+\\<^sup>+ i2 i1 \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "ultimately"], ["proof (chain)\npicking this:\n  rel_comp_pow match (i1' # i2' # is') s1 s3'\n  lexp order\\<^sup>+\\<^sup>+ (i1' # i2' # is') (i1 # i2 # is)", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_comp_pow match (i1' # i2' # is') s1 s3'\n  lexp order\\<^sup>+\\<^sup>+ (i1' # i2' # is') (i1 # i2 # is)\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "by fast"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length (i1 # i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length (i1 # i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n\ngoal (1 subgoal):\n 1. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "assume \"\\<exists>i'. rel_comp_pow match i' s2 s3' \\<and> lexp order\\<^sup>+\\<^sup>+ i' (i2 # is)\""], ["proof (state)\nthis:\n  \\<exists>i'.\n     rel_comp_pow match i' s2 s3' \\<and>\n     lexp order\\<^sup>+\\<^sup>+ i' (i2 # is)\n\ngoal (1 subgoal):\n 1. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "then"], ["proof (chain)\npicking this:\n  \\<exists>i'.\n     rel_comp_pow match i' s2 s3' \\<and>\n     lexp order\\<^sup>+\\<^sup>+ i' (i2 # is)", "obtain i2' is' where\n          \"rel_comp_pow match (i2' # is') s2 s3'\" and \"lexp order\\<^sup>+\\<^sup>+ (i2' # is') (i2 # is)\""], ["proof (prove)\nusing this:\n  \\<exists>i'.\n     rel_comp_pow match i' s2 s3' \\<and>\n     lexp order\\<^sup>+\\<^sup>+ i' (i2 # is)\n\ngoal (1 subgoal):\n 1. (\\<And>i2' is'.\n        \\<lbrakk>rel_comp_pow match (i2' # is') s2 s3';\n         lexp order\\<^sup>+\\<^sup>+ (i2' # is') (i2 # is)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis lexp.simps)"], ["proof (state)\nthis:\n  rel_comp_pow match (i2' # is') s2 s3'\n  lexp order\\<^sup>+\\<^sup>+ (i2' # is') (i2 # is)\n\ngoal (1 subgoal):\n 1. \\<exists>is'.\n       rel_comp_pow match is' s2 s3' \\<and>\n       lexp order\\<^sup>+\\<^sup>+ is' (i2 # is) \\<Longrightarrow>\n    (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "thus ?thesis"], ["proof (prove)\nusing this:\n  rel_comp_pow match (i2' # is') s2 s3'\n  lexp order\\<^sup>+\\<^sup>+ (i2' # is') (i2 # is)\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        length is' = length (i1 # i2 # is) \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))", "by (metis \\<open>match i1 s1 s2\\<close> lexp.simps(1) rel_comp_pow.simps(3))"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length (i1 # i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length (i1 # i2 # is) \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' (i1 # i2 # is))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length is \\<and> rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' is)\n\ngoal (1 subgoal):\n 1. \\<And>i1 s1 s2 s2'.\n       \\<lbrakk>rel_comp_pow match i1 s1 s2; step s2 s2'\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i2 s1'.\n                             step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                             rel_comp_pow match i2 s1' s2') \\<or>\n                         (\\<exists>i2.\n                             rel_comp_pow match i2 s1 s2' \\<and>\n                             lexp order\\<^sup>+\\<^sup>+ i2 i1)", "thus \"(\\<exists>is' s1'. step\\<^sup>+\\<^sup>+ s1 s1' \\<and> rel_comp_pow match is' s1' s3') \\<or>\n      (\\<exists>is'. rel_comp_pow match is' s1 s3' \\<and> lexp order\\<^sup>+\\<^sup>+ is' is)\""], ["proof (prove)\nusing this:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      length is' = length is \\<and> rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' is)\n\ngoal (1 subgoal):\n 1. (\\<exists>is' s1'.\n        step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n        rel_comp_pow match is' s1' s3') \\<or>\n    (\\<exists>is'.\n        rel_comp_pow match is' s1 s3' \\<and>\n        lexp order\\<^sup>+\\<^sup>+ is' is)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>is' s1'.\n      step\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n      rel_comp_pow match is' s1' s3') \\<or>\n  (\\<exists>is'.\n      rel_comp_pow match is' s1 s3' \\<and>\n      lexp order\\<^sup>+\\<^sup>+ is' is)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  backward_simulation_axioms step step final final\n   (lexp order\\<^sup>+\\<^sup>+) (rel_comp_pow match)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition lockstep_backward_simulation where\n  \"lockstep_backward_simulation step1 step2 match \\<equiv>\n    \\<forall>s1 s2 s2'. match s1 s2 \\<longrightarrow> step2 s2 s2' \\<longrightarrow> (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2')\""], ["", "definition plus_backward_simulation where\n  \"plus_backward_simulation step1 step2 match \\<equiv>\n    \\<forall>s1 s2 s2'. match s1 s2 \\<longrightarrow> step2 s2 s2' \\<longrightarrow> (\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2')\""], ["", "lemma\n  assumes \"lockstep_backward_simulation step1 step2 match\"\n  shows \"plus_backward_simulation step1 step2 match\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plus_backward_simulation step1 step2 match", "unfolding plus_backward_simulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s1 s2 s2'.\n       match s1 s2 \\<longrightarrow>\n       step2 s2 s2' \\<longrightarrow>\n       (\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2')", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 s2'.\n       \\<lbrakk>match s1 s2; step2 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                            match s1' s2'", "fix s1 s2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 s2'.\n       \\<lbrakk>match s1 s2; step2 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                            match s1' s2'", "assume \"match s1 s2\" and \"step2 s2 s2'\""], ["proof (state)\nthis:\n  match s1 s2\n  step2 s2 s2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 s2'.\n       \\<lbrakk>match s1 s2; step2 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                            match s1' s2'", "then"], ["proof (chain)\npicking this:\n  match s1 s2\n  step2 s2 s2'", "obtain s1' where \"step1 s1 s1'\" and \"match s1' s2'\""], ["proof (prove)\nusing this:\n  match s1 s2\n  step2 s2 s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>step1 s1 s1'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  match s1 s2\n  step2 s2 s2'\n  lockstep_backward_simulation step1 step2 match\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>step1 s1 s1'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lockstep_backward_simulation_def"], ["proof (prove)\nusing this:\n  match s1 s2\n  step2 s2 s2'\n  \\<forall>s1 s2 s2'.\n     match s1 s2 \\<longrightarrow>\n     step2 s2 s2' \\<longrightarrow>\n     (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2')\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>step1 s1 s1'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  step1 s1 s1'\n  match s1' s2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 s2'.\n       \\<lbrakk>match s1 s2; step2 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            step1\\<^sup>+\\<^sup>+ s1 s1' \\<and>\n                            match s1' s2'", "then"], ["proof (chain)\npicking this:\n  step1 s1 s1'\n  match s1' s2'", "show \"\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'\""], ["proof (prove)\nusing this:\n  step1 s1 s1'\n  match s1' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lockstep_to_plus_backward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\"\n  assumes\n    lockstep_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step2 s2 s2' \\<Longrightarrow> (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step2 s2 s2'\"\n  shows \"\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'", "obtain s1' where \"step1 s1 s1'\" and \"match s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>step1 s1 s1'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lockstep_simulation[OF match step]"], ["proof (prove)\nusing this:\n  \\<exists>s1'. step1 s1 s1' \\<and> match s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>step1 s1 s1'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step1 s1 s1'\n  match s1' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  step1 s1 s1'\n  match s1' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lockstep_to_option_backward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    measure :: \"'state2 \\<Rightarrow> nat\"\n  assumes\n    lockstep_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step2 s2 s2' \\<Longrightarrow> (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step2 s2 s2'\"\n  shows \"(\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2') \\<or> match s1 s2' \\<and> measure s2' < measure s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2') \\<or>\n    match s1 s2' \\<and> measure s2' < measure s2", "using lockstep_simulation[OF match step]"], ["proof (prove)\nusing this:\n  \\<exists>s1'. step1 s1 s1' \\<and> match s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<exists>s1'. step1 s1 s1' \\<and> match s1' s2') \\<or>\n    match s1 s2' \\<and> measure s2' < measure s2", ".."], ["", "lemma plus_to_star_backward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    measure :: \"'state2 \\<Rightarrow> nat\"\n  assumes\n    star_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step2 s2 s2' \\<Longrightarrow> (\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step2 s2 s2'\"\n  shows \"(\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2') \\<or> match s1 s2' \\<and> measure s2' < measure s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2') \\<or>\n    match s1 s2' \\<and> measure s2' < measure s2", "using star_simulation[OF match step]"], ["proof (prove)\nusing this:\n  \\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<exists>s1'. step1\\<^sup>+\\<^sup>+ s1 s1' \\<and> match s1' s2') \\<or>\n    match s1 s2' \\<and> measure s2' < measure s2", ".."], ["", "lemma lockstep_to_plus_forward_simulation:\n  fixes\n    match :: \"'state1 \\<Rightarrow> 'state2 \\<Rightarrow> bool\" and\n    step1 :: \"'state1 \\<Rightarrow> 'state1 \\<Rightarrow> bool\" and\n    step2 :: \"'state2 \\<Rightarrow> 'state2 \\<Rightarrow> bool\"\n  assumes\n    lockstep_simulation: \"\\<And>s1 s2 s2'. match s1 s2 \\<Longrightarrow> step1 s1 s1' \\<Longrightarrow> (\\<exists>s2'. step2 s2 s2' \\<and> match s1' s2')\" and\n    match: \"match s1 s2\" and\n    step: \"step1 s1 s1'\"\n  shows \"\\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'", "obtain s2' where \"step2 s2 s2'\" and \"match s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        \\<lbrakk>step2 s2 s2'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lockstep_simulation[OF match step]"], ["proof (prove)\nusing this:\n  \\<exists>s2'. step2 s2 s2' \\<and> match s1' s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        \\<lbrakk>step2 s2 s2'; match s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  step2 s2 s2'\n  match s1' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  step2 s2 s2'\n  match s1' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'. step2\\<^sup>+\\<^sup>+ s2 s2' \\<and> match s1' s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}