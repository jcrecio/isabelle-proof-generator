{"file_name": "/home/qj213/afp-2021-10-22/thys/CCS/Strong_Sim_SC.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CCS", "problem_names": ["lemma resNilLeft:\n  fixes x :: name\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>\\<zero> \\<leadsto>[Rel] \\<zero>\"", "lemma resNilRight:\n  fixes x :: name\n\n  shows \"\\<zero> \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>\\<zero>\"", "lemma test[simp]:\n  fixes x :: name\n  and   P :: ccs\n\n  shows \"x \\<sharp> [x].P\"", "lemma scopeExtSumLeft:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R. y \\<sharp> R \\<Longrightarrow> (\\<lparr>\\<nu>y\\<rparr>R, R) \\<in> Rel\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(P \\<oplus> Q) \\<leadsto>[Rel] P \\<oplus> \\<lparr>\\<nu>x\\<rparr>Q\"", "lemma scopeExtSumRight:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R. y \\<sharp> R \\<Longrightarrow> (R, \\<lparr>\\<nu>y\\<rparr>R) \\<in> Rel\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<oplus> \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<oplus> Q)\"", "lemma scopeExtLeft:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R T. y \\<sharp> R \\<Longrightarrow> (\\<lparr>\\<nu>y\\<rparr>(R \\<parallel> T), R \\<parallel> \\<lparr>\\<nu>y\\<rparr>T) \\<in> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(P \\<parallel> Q) \\<leadsto>[Rel] P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q\"", "lemma scopeExtRight:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R T. y \\<sharp> R \\<Longrightarrow> (R \\<parallel> \\<lparr>\\<nu>y\\<rparr>T, \\<lparr>\\<nu>y\\<rparr>(R \\<parallel> T)) \\<in> Rel\"\n\n  shows \"P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<parallel> Q)\"", "lemma sumComm:\n  fixes P :: ccs\n  and   Q :: ccs\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<oplus> Q \\<leadsto>[Rel] Q \\<oplus> P\"", "lemma sumAssocLeft:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"(P \\<oplus> Q) \\<oplus> R \\<leadsto>[Rel] P \\<oplus> (Q \\<oplus> R)\"", "lemma sumAssocRight:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \" P \\<oplus> (Q \\<oplus> R) \\<leadsto>[Rel] (P \\<oplus> Q) \\<oplus> R\"", "lemma sumIdLeft:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<oplus> \\<zero> \\<leadsto>[Rel] P\"", "lemma sumIdRight:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<leadsto>[Rel] P \\<oplus> \\<zero>\"", "lemma parComm:\n  fixes P :: ccs\n  and   Q :: ccs\n\n  assumes C1: \"\\<And>R T. (R \\<parallel> T, T \\<parallel> R) \\<in> Rel\"\n\n  shows \"P \\<parallel> Q \\<leadsto>[Rel] Q \\<parallel> P\"", "lemma parAssocLeft:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes C1: \"\\<And>S T U. ((S \\<parallel> T) \\<parallel> U, S \\<parallel> (T \\<parallel> U)) \\<in> Rel\"\n\n  shows \"(P \\<parallel> Q) \\<parallel> R \\<leadsto>[Rel] P \\<parallel> (Q \\<parallel> R)\"", "lemma parAssocRight:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes C1: \"\\<And>S T U. (S \\<parallel> (T \\<parallel> U), (S \\<parallel> T) \\<parallel> U) \\<in> Rel\"\n\n  shows \"P \\<parallel> (Q \\<parallel> R) \\<leadsto>[Rel] (P \\<parallel> Q) \\<parallel> R\"", "lemma parIdLeft:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"\\<And>Q. (Q \\<parallel> \\<zero>, Q) \\<in> Rel\"\n\n  shows \"P \\<parallel> \\<zero> \\<leadsto>[Rel] P\"", "lemma parIdRight:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"\\<And>Q. (Q, Q \\<parallel> \\<zero>) \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] P \\<parallel> \\<zero>\"", "lemma resActLeft:\n  fixes x :: name\n  and   \\<alpha> :: act\n  and   P :: ccs\n\n  assumes \"x \\<sharp> \\<alpha>\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(\\<alpha>.(P)) \\<leadsto>[Rel] (\\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P))\"", "lemma resActRight:\n  fixes x :: name\n  and   \\<alpha> :: act\n  and   P :: ccs\n\n  assumes \"x \\<sharp> \\<alpha>\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"\\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P) \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(\\<alpha>.(P))\"", "lemma resComm:\n  fixes x :: name\n  and   y :: name \n  and   P :: ccs\n\n  assumes \"\\<And>Q. (\\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>Q), \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>Q)) \\<in> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>P) \\<leadsto>[Rel] \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>P)\"", "lemma bangUnfoldLeft:\n  fixes P :: ccs\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<parallel> !P \\<leadsto>[Rel] !P\"", "lemma bangUnfoldRight:\n  fixes P :: ccs\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"!P \\<leadsto>[Rel] P \\<parallel> !P\""], "translations": [["", "lemma resNilLeft:\n  fixes x :: name\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>\\<zero> \\<leadsto>[Rel] \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>\\<zero> \\<leadsto>[Rel] \\<zero>", "by(auto simp add: simulation_def)"], ["", "lemma resNilRight:\n  fixes x :: name\n\n  shows \"\\<zero> \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>\\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zero> \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>\\<zero>", "by(auto simp add: simulation_def elim: resCases)"], ["", "lemma test[simp]:\n  fixes x :: name\n  and   P :: ccs\n\n  shows \"x \\<sharp> [x].P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> [x].P", "by(auto simp add: abs_fresh)"], ["", "lemma scopeExtSumLeft:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R. y \\<sharp> R \\<Longrightarrow> (\\<lparr>\\<nu>y\\<rparr>R, R) \\<in> Rel\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(P \\<oplus> Q) \\<leadsto>[Rel] P \\<oplus> \\<lparr>\\<nu>x\\<rparr>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>(P \\<oplus>\n                           Q) \\<leadsto>[Rel] P \\<oplus>\n        \\<lparr>\\<nu>x\\<rparr>Q", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> P\n  ?y \\<sharp> ?R \\<Longrightarrow> (\\<lparr>\\<nu>?y\\<rparr>?R, ?R) \\<in> Rel\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>(P \\<oplus>\n                           Q) \\<leadsto>[Rel] P \\<oplus>\n        \\<lparr>\\<nu>x\\<rparr>Q", "apply(auto simp add: simulation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Q'.\n       \\<lbrakk>x \\<sharp> P;\n        \\<And>y R.\n           y \\<sharp> R \\<Longrightarrow>\n           (\\<lparr>\\<nu>y\\<rparr>R, R) \\<in> Rel;\n        Id \\<subseteq> Rel;\n        P \\<oplus>\n        \\<lparr>\\<nu>x\\<rparr>Q \\<longmapsto>a \\<prec> Q'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            \\<lparr>\\<nu>x\\<rparr>(P \\<oplus>\n             Q) \\<longmapsto>a \\<prec> P' \\<and>\n                            (P', Q') \\<in> Rel", "by(elim sumCases resCases) (blast intro: Res Sum1 Sum2 C1 dest: freshDerivative)+"], ["", "lemma scopeExtSumRight:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R. y \\<sharp> R \\<Longrightarrow> (R, \\<lparr>\\<nu>y\\<rparr>R) \\<in> Rel\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<oplus> \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<oplus> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus>\n    \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<oplus>\n                             Q)", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> P\n  ?y \\<sharp> ?R \\<Longrightarrow> (?R, \\<lparr>\\<nu>?y\\<rparr>?R) \\<in> Rel\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<oplus>\n    \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<oplus>\n                             Q)", "apply(auto simp add: simulation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Q'.\n       \\<lbrakk>x \\<sharp> P;\n        \\<And>y R.\n           y \\<sharp> R \\<Longrightarrow>\n           (R, \\<lparr>\\<nu>y\\<rparr>R) \\<in> Rel;\n        Id \\<subseteq> Rel;\n        \\<lparr>\\<nu>x\\<rparr>(P \\<oplus>\n                               Q) \\<longmapsto>a \\<prec> Q'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<oplus>\n                            \\<lparr>\\<nu>x\\<rparr>Q \\<longmapsto>a \\<prec> P' \\<and>\n                            (P', Q') \\<in> Rel", "by(elim sumCases resCases) (blast intro: Res Sum1 Sum2 C1 dest: freshDerivative)+"], ["", "lemma scopeExtLeft:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R T. y \\<sharp> R \\<Longrightarrow> (\\<lparr>\\<nu>y\\<rparr>(R \\<parallel> T), R \\<parallel> \\<lparr>\\<nu>y\\<rparr>T) \\<in> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(P \\<parallel> Q) \\<leadsto>[Rel] P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>(P \\<parallel>\n                           Q) \\<leadsto>[Rel] P \\<parallel>\n        \\<lparr>\\<nu>x\\<rparr>Q", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> P\n  ?y \\<sharp> ?R \\<Longrightarrow>\n  (\\<lparr>\\<nu>?y\\<rparr>(?R \\<parallel> ?T),\n   ?R \\<parallel> \\<lparr>\\<nu>?y\\<rparr>?T)\n  \\<in> Rel\n\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>(P \\<parallel>\n                           Q) \\<leadsto>[Rel] P \\<parallel>\n        \\<lparr>\\<nu>x\\<rparr>Q", "by(fastforce elim: parCases resCases intro: Res C1 Par1 Par2 Comm dest: freshDerivative simp add: simulation_def)"], ["", "lemma scopeExtRight:\n  fixes x :: name\n  and   P :: ccs\n  and   Q :: ccs\n\n  assumes \"x \\<sharp> P\"\n  and     C1: \"\\<And>y R T. y \\<sharp> R \\<Longrightarrow> (R \\<parallel> \\<lparr>\\<nu>y\\<rparr>T, \\<lparr>\\<nu>y\\<rparr>(R \\<parallel> T)) \\<in> Rel\"\n\n  shows \"P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<parallel> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<parallel>\n                             Q)", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> P\n  ?y \\<sharp> ?R \\<Longrightarrow>\n  (?R \\<parallel> \\<lparr>\\<nu>?y\\<rparr>?T,\n   \\<lparr>\\<nu>?y\\<rparr>(?R \\<parallel> ?T))\n  \\<in> Rel\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    \\<lparr>\\<nu>x\\<rparr>Q \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(P \\<parallel>\n                             Q)", "by(fastforce elim: parCases resCases intro: Res C1 Par1 Par2 Comm dest: freshDerivative simp add: simulation_def)"], ["", "lemma sumComm:\n  fixes P :: ccs\n  and   Q :: ccs\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<oplus> Q \\<leadsto>[Rel] Q \\<oplus> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus> Q \\<leadsto>[Rel] Q \\<oplus> P", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<oplus> Q \\<leadsto>[Rel] Q \\<oplus> P", "by(force simp add: simulation_def elim: sumCases intro: Sum1 Sum2)"], ["", "lemma sumAssocLeft:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"(P \\<oplus> Q) \\<oplus> R \\<leadsto>[Rel] P \\<oplus> (Q \\<oplus> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus> Q \\<oplus> R \\<leadsto>[Rel] P \\<oplus> (Q \\<oplus> R)", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<oplus> Q \\<oplus> R \\<leadsto>[Rel] P \\<oplus> (Q \\<oplus> R)", "by(force simp add: simulation_def elim: sumCases intro: Sum1 Sum2)"], ["", "lemma sumAssocRight:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \" P \\<oplus> (Q \\<oplus> R) \\<leadsto>[Rel] (P \\<oplus> Q) \\<oplus> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus> (Q \\<oplus> R) \\<leadsto>[Rel] P \\<oplus> Q \\<oplus> R", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<oplus> (Q \\<oplus> R) \\<leadsto>[Rel] P \\<oplus> Q \\<oplus> R", "by(intro simI, elim sumCases) (blast intro: Sum1 Sum2)+"], ["", "lemma sumIdLeft:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<oplus> \\<zero> \\<leadsto>[Rel] P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus> \\<zero> \\<leadsto>[Rel] P", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<oplus> \\<zero> \\<leadsto>[Rel] P", "by(auto simp add: simulation_def intro: Sum1)"], ["", "lemma sumIdRight:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<leadsto>[Rel] P \\<oplus> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] P \\<oplus> \\<zero>", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] P \\<oplus> \\<zero>", "by(fastforce simp add: simulation_def elim: sumCases)"], ["", "lemma parComm:\n  fixes P :: ccs\n  and   Q :: ccs\n\n  assumes C1: \"\\<And>R T. (R \\<parallel> T, T \\<parallel> R) \\<in> Rel\"\n\n  shows \"P \\<parallel> Q \\<leadsto>[Rel] Q \\<parallel> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> Q \\<leadsto>[Rel] Q \\<parallel> P", "by(fastforce simp add: simulation_def elim: parCases intro: Par1 Par2 Comm C1)"], ["", "lemma parAssocLeft:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes C1: \"\\<And>S T U. ((S \\<parallel> T) \\<parallel> U, S \\<parallel> (T \\<parallel> U)) \\<in> Rel\"\n\n  shows \"(P \\<parallel> Q) \\<parallel> R \\<leadsto>[Rel] P \\<parallel> (Q \\<parallel> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> Q \\<parallel>\n    R \\<leadsto>[Rel] P \\<parallel> (Q \\<parallel> R)", "by(fastforce simp add: simulation_def elim: parCases intro: Par1 Par2 Comm C1)"], ["", "lemma parAssocRight:\n  fixes P :: ccs\n  and   Q :: ccs\n  and   R :: ccs\n\n  assumes C1: \"\\<And>S T U. (S \\<parallel> (T \\<parallel> U), (S \\<parallel> T) \\<parallel> U) \\<in> Rel\"\n\n  shows \"P \\<parallel> (Q \\<parallel> R) \\<leadsto>[Rel] (P \\<parallel> Q) \\<parallel> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    (Q \\<parallel> R) \\<leadsto>[Rel] P \\<parallel> Q \\<parallel> R", "by(fastforce simp add: simulation_def elim: parCases intro: Par1 Par2 Comm C1)"], ["", "lemma parIdLeft:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"\\<And>Q. (Q \\<parallel> \\<zero>, Q) \\<in> Rel\"\n\n  shows \"P \\<parallel> \\<zero> \\<leadsto>[Rel] P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> \\<zero> \\<leadsto>[Rel] P", "using assms"], ["proof (prove)\nusing this:\n  (?Q \\<parallel> \\<zero>, ?Q) \\<in> Rel\n\ngoal (1 subgoal):\n 1. P \\<parallel> \\<zero> \\<leadsto>[Rel] P", "by(auto simp add: simulation_def intro: Par1)"], ["", "lemma parIdRight:\n  fixes P   :: ccs\n  and   Rel :: \"(ccs \\<times> ccs) set\"\n  \n  assumes \"\\<And>Q. (Q, Q \\<parallel> \\<zero>) \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] P \\<parallel> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] P \\<parallel> \\<zero>", "using assms"], ["proof (prove)\nusing this:\n  (?Q, ?Q \\<parallel> \\<zero>) \\<in> Rel\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] P \\<parallel> \\<zero>", "by(fastforce simp add: simulation_def elim: parCases)"], ["", "declare fresh_atm[simp]"], ["", "lemma resActLeft:\n  fixes x :: name\n  and   \\<alpha> :: act\n  and   P :: ccs\n\n  assumes \"x \\<sharp> \\<alpha>\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(\\<alpha>.(P)) \\<leadsto>[Rel] (\\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>\\<alpha>.P \\<leadsto>[Rel] \\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P)", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> \\<alpha>\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>\\<alpha>.P \\<leadsto>[Rel] \\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P)", "by(fastforce simp add: simulation_def elim: actCases intro: Res Action)"], ["", "lemma resActRight:\n  fixes x :: name\n  and   \\<alpha> :: act\n  and   P :: ccs\n\n  assumes \"x \\<sharp> \\<alpha>\"\n  and     \"Id \\<subseteq> Rel\"\n\n  shows \"\\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P) \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>(\\<alpha>.(P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P) \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>\\<alpha>.P", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> \\<alpha>\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. \\<alpha>.(\\<lparr>\\<nu>x\\<rparr>P) \\<leadsto>[Rel] \\<lparr>\\<nu>x\\<rparr>\\<alpha>.P", "by(fastforce simp add: simulation_def elim: resCases actCases intro: Action)"], ["", "lemma resComm:\n  fixes x :: name\n  and   y :: name \n  and   P :: ccs\n\n  assumes \"\\<And>Q. (\\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>Q), \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>Q)) \\<in> Rel\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>P) \\<leadsto>[Rel] \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>\\<lparr>\\<nu>y\\<rparr>P \\<leadsto>[Rel] \\<lparr>\\<nu>y\\<rparr>\\<lparr>\\<nu>x\\<rparr>P", "using assms"], ["proof (prove)\nusing this:\n  (\\<lparr>\\<nu>x\\<rparr>\\<lparr>\\<nu>y\\<rparr>?Q,\n   \\<lparr>\\<nu>y\\<rparr>\\<lparr>\\<nu>x\\<rparr>?Q)\n  \\<in> Rel\n\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>\\<lparr>\\<nu>y\\<rparr>P \\<leadsto>[Rel] \\<lparr>\\<nu>y\\<rparr>\\<lparr>\\<nu>x\\<rparr>P", "by(fastforce simp add: simulation_def elim: resCases intro: Res)"], ["", "inductive_cases bangCases[simplified ccs.distinct act.distinct]: \"!P \\<longmapsto>\\<alpha> \\<prec> P'\""], ["", "lemma bangUnfoldLeft:\n  fixes P :: ccs\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<parallel> !P \\<leadsto>[Rel] !P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> !P \\<leadsto>[Rel] !P", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<parallel> !P \\<leadsto>[Rel] !P", "by(fastforce simp add: simulation_def ccs.inject elim: bangCases)"], ["", "lemma bangUnfoldRight:\n  fixes P :: ccs\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"!P \\<leadsto>[Rel] P \\<parallel> !P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. !P \\<leadsto>[Rel] P \\<parallel> !P", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. !P \\<leadsto>[Rel] P \\<parallel> !P", "by(fastforce simp add: simulation_def ccs.inject intro: Bang)"], ["", "end"]]}