{"file_name": "/home/qj213/afp-2021-10-22/thys/ConcurrentGC/Local_Invariants_Lemmas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ConcurrentGC", "problem_names": ["lemma hs_get_roots_loop_locs_subseteq_hs_get_roots_locs:\n  \"hs_get_roots_loop_locs \\<subseteq> hs_get_roots_locs\"", "lemma hs_pending_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_pending_locs \\<subseteq> hs_pending_loaded_locs\"", "lemma ht_loaded_locs_subseteq_hs_pending_loaded_locs:\n  \"ht_loaded_locs \\<subseteq> hs_pending_loaded_locs\"", "lemma hs_noop_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_noop_locs \\<subseteq> hs_pending_loaded_locs\"", "lemma hs_noop_locs_subseteq_hs_pending_locs:\n  \"hs_noop_locs \\<subseteq> hs_pending_locs\"", "lemma hs_noop_locs_subseteq_ht_loaded_locs:\n  \"hs_noop_locs \\<subseteq> ht_loaded_locs\"", "lemma hs_get_roots_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_get_roots_locs \\<subseteq> hs_pending_loaded_locs\"", "lemma hs_get_roots_locs_subseteq_hs_pending_locs:\n  \"hs_get_roots_locs \\<subseteq> hs_pending_locs\"", "lemma hs_get_roots_locs_subseteq_ht_loaded_locs:\n  \"hs_get_roots_locs \\<subseteq> ht_loaded_locs\"", "lemma hs_get_work_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_get_work_locs \\<subseteq> hs_pending_loaded_locs\"", "lemma hs_get_work_locs_subseteq_hs_pending_locs:\n  \"hs_get_work_locs \\<subseteq> hs_pending_locs\"", "lemma hs_get_work_locs_subseteq_ht_loaded_locs:\n  \"hs_get_work_locs \\<subseteq> ht_loaded_locs\"", "lemma get_roots_UN_get_work_locs_subseteq_ghost_honorary_grey_empty_locs:\n  \"get_roots_UN_get_work_locs \\<subseteq> ghost_honorary_grey_empty_locs\"", "lemma hs_get_roots_locs_subseteq_hp_IdleMarkSweep_locs:\n  \"hs_get_roots_locs \\<subseteq> hp_IdleMarkSweep_locs\"", "lemma hs_get_work_locs_subseteq_hp_IdleMarkSweep_locs:\n  \"hs_get_work_locs \\<subseteq> hp_IdleMarkSweep_locs\"", "lemma obj_fields_marked_eq_imp:\n  \"eq_imp (\\<lambda>r'. gc_field_set \\<^bold>\\<otimes> gc_tmp_ref \\<^bold>\\<otimes> (\\<lambda>s. map_option obj_fields (sys_heap s r')) \\<^bold>\\<otimes> (\\<lambda>s. map_option obj_mark (sys_heap s r')) \\<^bold>\\<otimes> sys_fM \\<^bold>\\<otimes> tso_pending_mutate gc)\n          obj_fields_marked\"", "lemma obj_fields_marked_UNIV[iff]:\n  \"obj_fields_marked (s(gc := (s gc)\\<lparr> field_set := UNIV \\<rparr>))\"", "lemma obj_fields_marked_invL_eq_imp:\n  \"eq_imp (\\<lambda>r' s. (AT s gc, s\\<down> gc, map_option obj_fields (sys_heap s\\<down> r'), map_option obj_mark (sys_heap s\\<down> r'), sys_fM s\\<down>, sys_W s\\<down>, tso_pending_mutate gc s\\<down>))\n          obj_fields_marked_invL\"", "lemma obj_fields_marked_mark_field_done[iff]:\n  \"\\<lbrakk> obj_at_field_on_heap (\\<lambda>r. marked r s) (gc_tmp_ref s) (gc_field s) s; obj_fields_marked s \\<rbrakk>\n     \\<Longrightarrow> obj_fields_marked (s(gc := (s gc)\\<lparr>field_set := gc_field_set s - {gc_field s}\\<rparr>))\"", "lemmas gc_obj_fields_marked_inv_fun_upd[simp] = eq_imp_fun_upd[OF gc.obj_fields_marked_eq_imp, simplified eq_imp_simps, rule_format]", "lemmas gc_obj_fields_marked_invL_niE[nie] = iffD1[OF gc.obj_fields_marked_invL_eq_imp[simplified eq_imp_simps, rule_format, unfolded conj_explode], rotated -1]", "lemma mark_object_invL_eq_imp:\n  \"eq_imp (\\<lambda>(_::unit) s. (AT s p, s\\<down> p, sys_heap s\\<down>, sys_fM s\\<down>, sys_mem_store_buffers p s\\<down>))\n          mark_object_invL\"", "lemmas mark_object_invL_niE[nie] =\n  iffD1[OF mark_object_invL_eq_imp[simplified eq_imp_simps, rule_format, unfolded conj_explode], rotated -1]", "lemma mut_m_mark_object_invL_eq_imp:\n  \"eq_imp (\\<lambda>r s. (AT s (mutator m), s\\<down> (mutator m), sys_heap s\\<down> r, sys_fM s\\<down>, sys_phase s\\<down>, tso_pending_mutate (mutator m) s\\<down>))\n          (mut_m.mark_object_invL m)\"", "lemmas mut_m_mark_object_invL_niE[nie] =\n  iffD1[OF mut_m_mark_object_invL_eq_imp[simplified eq_imp_simps, rule_format, unfolded conj_explode], rotated -1]"], "translations": [["", "lemma hs_get_roots_loop_locs_subseteq_hs_get_roots_locs:\n  \"hs_get_roots_loop_locs \\<subseteq> hs_get_roots_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_roots_loop_locs \\<subseteq> hs_get_roots_locs", "unfolding hs_get_roots_loop_locs_def hs_get_roots_locs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_roots_loop'' \\<subseteq> prefixed ''hs_get_roots_''", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_pending_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_pending_locs \\<subseteq> hs_pending_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_pending_locs \\<subseteq> hs_pending_loaded_locs", "unfolding hs_pending_locs_def hs_pending_loaded_locs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_'' - {hs_load_pending, local.hs_pending}\n    \\<subseteq> prefixed ''hs_'' - {hs_load_pending}", "by (fastforce intro: append_prefixD)"], ["", "lemma ht_loaded_locs_subseteq_hs_pending_loaded_locs:\n  \"ht_loaded_locs \\<subseteq> hs_pending_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ht_loaded_locs \\<subseteq> hs_pending_loaded_locs", "unfolding ht_loaded_locs_def hs_pending_loaded_locs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_'' -\n    {hs_load_pending, local.hs_pending, hs_mfence, hs_load_ht}\n    \\<subseteq> prefixed ''hs_'' - {hs_load_pending}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_noop_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_noop_locs \\<subseteq> hs_pending_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_noop_locs \\<subseteq> hs_pending_loaded_locs", "unfolding hs_noop_locs_def hs_pending_loaded_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_noop_''\n    \\<subseteq> prefixed ''hs_'' - {''hs_load_pending''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_noop_locs_subseteq_hs_pending_locs:\n  \"hs_noop_locs \\<subseteq> hs_pending_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_noop_locs \\<subseteq> hs_pending_locs", "unfolding hs_noop_locs_def hs_pending_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_noop_''\n    \\<subseteq> prefixed ''hs_'' - {''hs_load_pending'', ''hs_pending''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_noop_locs_subseteq_ht_loaded_locs:\n  \"hs_noop_locs \\<subseteq> ht_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_noop_locs \\<subseteq> ht_loaded_locs", "unfolding hs_noop_locs_def ht_loaded_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_noop_''\n    \\<subseteq> prefixed ''hs_'' -\n                {''hs_load_pending'', ''hs_pending'', ''hs_mfence'',\n                 ''hs_load_ht''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_roots_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_get_roots_locs \\<subseteq> hs_pending_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_roots_locs \\<subseteq> hs_pending_loaded_locs", "unfolding hs_get_roots_locs_def hs_pending_loaded_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_roots_''\n    \\<subseteq> prefixed ''hs_'' - {''hs_load_pending''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_roots_locs_subseteq_hs_pending_locs:\n  \"hs_get_roots_locs \\<subseteq> hs_pending_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_roots_locs \\<subseteq> hs_pending_locs", "unfolding hs_get_roots_locs_def hs_pending_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_roots_''\n    \\<subseteq> prefixed ''hs_'' - {''hs_load_pending'', ''hs_pending''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_roots_locs_subseteq_ht_loaded_locs:\n  \"hs_get_roots_locs \\<subseteq> ht_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_roots_locs \\<subseteq> ht_loaded_locs", "unfolding hs_get_roots_locs_def ht_loaded_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_roots_''\n    \\<subseteq> prefixed ''hs_'' -\n                {''hs_load_pending'', ''hs_pending'', ''hs_mfence'',\n                 ''hs_load_ht''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_work_locs_subseteq_hs_pending_loaded_locs:\n  \"hs_get_work_locs \\<subseteq> hs_pending_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_work_locs \\<subseteq> hs_pending_loaded_locs", "unfolding hs_get_work_locs_def hs_pending_loaded_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_work_''\n    \\<subseteq> prefixed ''hs_'' - {''hs_load_pending''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_work_locs_subseteq_hs_pending_locs:\n  \"hs_get_work_locs \\<subseteq> hs_pending_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_work_locs \\<subseteq> hs_pending_locs", "unfolding hs_get_work_locs_def hs_pending_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_work_''\n    \\<subseteq> prefixed ''hs_'' - {''hs_load_pending'', ''hs_pending''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_work_locs_subseteq_ht_loaded_locs:\n  \"hs_get_work_locs \\<subseteq> ht_loaded_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_work_locs \\<subseteq> ht_loaded_locs", "unfolding hs_get_work_locs_def ht_loaded_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''hs_get_work_''\n    \\<subseteq> prefixed ''hs_'' -\n                {''hs_load_pending'', ''hs_pending'', ''hs_mfence'',\n                 ''hs_load_ht''}", "by (fastforce intro: append_prefixD)"], ["", "end"], ["", "declare\n  mut_m.hs_get_roots_loop_locs_subseteq_hs_get_roots_locs[locset_cache]\n  mut_m.hs_pending_locs_subseteq_hs_pending_loaded_locs[locset_cache]\n  mut_m.ht_loaded_locs_subseteq_hs_pending_loaded_locs[locset_cache]\n  mut_m.hs_noop_locs_subseteq_hs_pending_loaded_locs[locset_cache]\n  mut_m.hs_noop_locs_subseteq_hs_pending_locs[locset_cache]\n  mut_m.hs_noop_locs_subseteq_ht_loaded_locs[locset_cache]\n  mut_m.hs_get_roots_locs_subseteq_hs_pending_loaded_locs[locset_cache]\n  mut_m.hs_get_roots_locs_subseteq_hs_pending_locs[locset_cache]\n  mut_m.hs_get_roots_locs_subseteq_ht_loaded_locs[locset_cache]\n  mut_m.hs_get_work_locs_subseteq_hs_pending_loaded_locs[locset_cache]\n  mut_m.hs_get_work_locs_subseteq_hs_pending_locs[locset_cache]\n  mut_m.hs_get_work_locs_subseteq_ht_loaded_locs[locset_cache]"], ["", "context gc\nbegin"], ["", "lemma get_roots_UN_get_work_locs_subseteq_ghost_honorary_grey_empty_locs:\n  \"get_roots_UN_get_work_locs \\<subseteq> ghost_honorary_grey_empty_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_roots_UN_get_work_locs \\<subseteq> ghost_honorary_grey_empty_locs", "unfolding get_roots_UN_get_work_locs_def ghost_honorary_grey_empty_locs_def hs_get_roots_locs_def hs_get_work_locs_def loc_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''mark_loop_get_roots'' -\n    {''mark_loop_get_roots_init_type''} \\<union>\n    (prefixed ''mark_loop_get_work'' - {''mark_loop_get_work_init_type''})\n    \\<subseteq> - {''mark_loop_mo_co_unlock'', ''mark_loop_mo_co_won'',\n                   ''mark_loop_mo_co_W''}", "by (fastforce intro: append_prefixD)"], ["", "lemma hs_get_roots_locs_subseteq_hp_IdleMarkSweep_locs:\n  \"hs_get_roots_locs \\<subseteq> hp_IdleMarkSweep_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_roots_locs \\<subseteq> hp_IdleMarkSweep_locs", "by (auto simp: hs_get_roots_locs_def hp_IdleMarkSweep_locs_def mark_loop_locs_def\n        intro: append_prefixD)"], ["", "lemma hs_get_work_locs_subseteq_hp_IdleMarkSweep_locs:\n  \"hs_get_work_locs \\<subseteq> hp_IdleMarkSweep_locs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hs_get_work_locs \\<subseteq> hp_IdleMarkSweep_locs", "apply (simp add: hs_get_work_locs_def hp_IdleMarkSweep_locs_def mark_loop_locs_def loc_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefixed ''mark_loop_get_work'' - {''mark_loop_get_work_init_type''}\n    \\<subseteq> insert ''idle_noop_mfence''\n                 (insert ''idle_noop_init_type''\n                   (insert ''mark_end''\n                     (sweep_locs \\<union>\n                      (prefixed ''mark_loop'' -\n                       {''mark_loop_get_roots_init_type''}))))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> ''idle_noop_mfence'';\n        x \\<noteq> ''idle_noop_init_type''; x \\<noteq> ''mark_end'';\n        x \\<noteq> ''mark_loop_get_work_init_type'';\n        prefix ''mark_loop'' x \\<longrightarrow>\n        x = ''mark_loop_get_roots_init_type'';\n        prefix ''mark_loop_get_work'' x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> sweep_locs", "apply (drule mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> ''idle_noop_mfence'';\n        x \\<noteq> ''idle_noop_init_type''; x \\<noteq> ''mark_end'';\n        x \\<noteq> ''mark_loop_get_work_init_type'';\n        prefix ''mark_loop_get_work'' x\\<rbrakk>\n       \\<Longrightarrow> prefix ''mark_loop'' x\n 2. \\<And>x.\n       \\<lbrakk>x \\<noteq> ''idle_noop_mfence'';\n        x \\<noteq> ''idle_noop_init_type''; x \\<noteq> ''mark_end'';\n        x \\<noteq> ''mark_loop_get_work_init_type'';\n        prefix ''mark_loop_get_work'' x;\n        x = ''mark_loop_get_roots_init_type''\\<rbrakk>\n       \\<Longrightarrow> x \\<in> sweep_locs", "apply (auto intro: append_prefixD)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq> ''idle_noop_mfence'';\n        x \\<noteq> ''idle_noop_init_type''; x \\<noteq> ''mark_end'';\n        x \\<noteq> ''mark_loop_get_work_init_type'';\n        prefix ''mark_loop_get_work'' x;\n        x = ''mark_loop_get_roots_init_type''\\<rbrakk>\n       \\<Longrightarrow> x \\<in> sweep_locs", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "declare\n  gc.get_roots_UN_get_work_locs_subseteq_ghost_honorary_grey_empty_locs[locset_cache]\n  gc.hs_get_roots_locs_subseteq_hp_IdleMarkSweep_locs[locset_cache]\n  gc.hs_get_work_locs_subseteq_hp_IdleMarkSweep_locs[locset_cache]"], ["", "subsection\\<open> \\<open>obj_fields_marked_inv\\<close> \\<close>"], ["", "context gc\nbegin"], ["", "lemma obj_fields_marked_eq_imp:\n  \"eq_imp (\\<lambda>r'. gc_field_set \\<^bold>\\<otimes> gc_tmp_ref \\<^bold>\\<otimes> (\\<lambda>s. map_option obj_fields (sys_heap s r')) \\<^bold>\\<otimes> (\\<lambda>s. map_option obj_mark (sys_heap s r')) \\<^bold>\\<otimes> sys_fM \\<^bold>\\<otimes> tso_pending_mutate gc)\n          obj_fields_marked\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_imp\n     (\\<lambda>r' s.\n         (gc_field_set s, gc_tmp_ref s,\n          map_option obj_fields (sys_heap s r'),\n          map_option obj_mark (sys_heap s r'), sys_fM s,\n          filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n           (sys_mem_store_buffers gc s)))\n     obj_fields_marked", "unfolding eq_imp_def obj_fields_marked_def obj_at_field_on_heap_def obj_at_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s s'.\n       (\\<forall>x.\n           (gc_field_set s, gc_tmp_ref s,\n            map_option obj_fields (sys_heap s x),\n            map_option obj_mark (sys_heap s x), sys_fM s,\n            filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n             (sys_mem_store_buffers gc s)) =\n           (gc_field_set s', gc_tmp_ref s',\n            map_option obj_fields (sys_heap s' x),\n            map_option obj_mark (sys_heap s' x), sys_fM s',\n            filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n             (sys_mem_store_buffers gc s'))) \\<longrightarrow>\n       (\\<forall>x.\n           x \\<in> (- gc_field_set) s \\<longrightarrow>\n           (case map_option obj_fields (sys_heap s (gc_tmp_ref s)) of\n            None \\<Rightarrow> False\n            | Some fs \\<Rightarrow>\n                case fs x of None \\<Rightarrow> True\n                | Some r' \\<Rightarrow>\n                    case sys_heap s r' of None \\<Rightarrow> False\n                    | Some obj \\<Rightarrow> obj_mark obj = sys_fM s)) =\n       (\\<forall>x.\n           x \\<in> (- gc_field_set) s' \\<longrightarrow>\n           (case map_option obj_fields (sys_heap s' (gc_tmp_ref s')) of\n            None \\<Rightarrow> False\n            | Some fs \\<Rightarrow>\n                case fs x of None \\<Rightarrow> True\n                | Some r' \\<Rightarrow>\n                    case sys_heap s' r' of None \\<Rightarrow> False\n                    | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'))", "apply (clarsimp simp: all_conj_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>gc_field_set s = gc_field_set s';\n        gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x.\n                             x \\<notin> gc_field_set s' \\<longrightarrow>\n                             (case sys_heap s' (gc_tmp_ref s') of\n                              None \\<Rightarrow> False\n                              | Some xa \\<Rightarrow>\n                                  ((\\<lambda>fs.\n case fs x of None \\<Rightarrow> True\n | Some r' \\<Rightarrow>\n     case sys_heap s r' of None \\<Rightarrow> False\n     | Some obj \\<Rightarrow> obj_mark obj = sys_fM s) \\<circ>\n                                   obj_fields)\n                                   xa)) =\n                         (\\<forall>x.\n                             x \\<notin> gc_field_set s' \\<longrightarrow>\n                             (case sys_heap s' (gc_tmp_ref s') of\n                              None \\<Rightarrow> False\n                              | Some xa \\<Rightarrow>\n                                  ((\\<lambda>fs.\n case fs x of None \\<Rightarrow> True\n | Some r' \\<Rightarrow>\n     case sys_heap s' r' of None \\<Rightarrow> False\n     | Some obj \\<Rightarrow> obj_mark obj = sys_fM s') \\<circ>\n                                   obj_fields)\n                                   xa))", "apply (rule iffI; clarsimp split: option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (sys_heap s' (gc_tmp_ref s') =\n                          None \\<longrightarrow>\n                          x \\<in> gc_field_set s') \\<and>\n                         (\\<forall>x2 x2a.\n                             (sys_heap s' x2a = None \\<longrightarrow>\n                              obj_fields x2 x = Some x2a \\<longrightarrow>\n                              sys_heap s' (gc_tmp_ref s') =\n                              Some x2 \\<longrightarrow>\n                              x \\<in> gc_field_set s') \\<and>\n                             (\\<forall>x2b.\n                                 sys_heap s' x2a =\n                                 Some x2b \\<longrightarrow>\n                                 obj_fields x2 x =\n                                 Some x2a \\<longrightarrow>\n                                 sys_heap s' (gc_tmp_ref s') =\n                                 Some x2 \\<longrightarrow>\n                                 x \\<notin> gc_field_set\n       s' \\<longrightarrow>\n                                 obj_mark x2b = sys_fM s'))\n 2. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (sys_heap s' (gc_tmp_ref s') =\n                          None \\<longrightarrow>\n                          x \\<in> gc_field_set s') \\<and>\n                         (\\<forall>x2 x2a.\n                             (sys_heap s x2a = None \\<longrightarrow>\n                              obj_fields x2 x = Some x2a \\<longrightarrow>\n                              sys_heap s' (gc_tmp_ref s') =\n                              Some x2 \\<longrightarrow>\n                              x \\<in> gc_field_set s') \\<and>\n                             (\\<forall>x2b.\n                                 sys_heap s x2a = Some x2b \\<longrightarrow>\n                                 obj_fields x2 x =\n                                 Some x2a \\<longrightarrow>\n                                 sys_heap s' (gc_tmp_ref s') =\n                                 Some x2 \\<longrightarrow>\n                                 x \\<notin> gc_field_set\n       s' \\<longrightarrow>\n                                 obj_mark x2b = sys_fM s'))", "apply (intro allI conjI impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' (gc_tmp_ref s') = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> gc_field_set s'\n 2. \\<And>s s' x x2 x2a.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' x2a = None; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> gc_field_set s'\n 3. \\<And>s s' x x2 x2a x2b.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' x2a = Some x2b; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2;\n        x \\<notin> gc_field_set s'\\<rbrakk>\n       \\<Longrightarrow> obj_mark x2b = sys_fM s'\n 4. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (sys_heap s' (gc_tmp_ref s') =\n                          None \\<longrightarrow>\n                          x \\<in> gc_field_set s') \\<and>\n                         (\\<forall>x2 x2a.\n                             (sys_heap s x2a = None \\<longrightarrow>\n                              obj_fields x2 x = Some x2a \\<longrightarrow>\n                              sys_heap s' (gc_tmp_ref s') =\n                              Some x2 \\<longrightarrow>\n                              x \\<in> gc_field_set s') \\<and>\n                             (\\<forall>x2b.\n                                 sys_heap s x2a = Some x2b \\<longrightarrow>\n                                 obj_fields x2 x =\n                                 Some x2a \\<longrightarrow>\n                                 sys_heap s' (gc_tmp_ref s') =\n                                 Some x2 \\<longrightarrow>\n                                 x \\<notin> gc_field_set\n       s' \\<longrightarrow>\n                                 obj_mark x2b = sys_fM s'))", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x x2 x2a.\n       \\<lbrakk>\\<forall>x x2a.\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<forall>x2.\n                        sys_heap s x2a = Some x2 \\<longrightarrow>\n                        x \\<in> gc_field_set s' \\<or>\n                        obj_mark x2 = sys_fM s'));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' x2a = None; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> gc_field_set s'\n 2. \\<And>s s' x x2 x2a x2b.\n       \\<lbrakk>\\<forall>x x2a.\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<forall>x2.\n                        sys_heap s x2a = Some x2 \\<longrightarrow>\n                        x \\<in> gc_field_set s' \\<or>\n                        obj_mark x2 = sys_fM s'));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' x2a = Some x2b; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2;\n        x \\<notin> gc_field_set s'\\<rbrakk>\n       \\<Longrightarrow> obj_mark x2b = sys_fM s'\n 3. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (sys_heap s' (gc_tmp_ref s') =\n                          None \\<longrightarrow>\n                          x \\<in> gc_field_set s') \\<and>\n                         (\\<forall>x2 x2a.\n                             (sys_heap s x2a = None \\<longrightarrow>\n                              obj_fields x2 x = Some x2a \\<longrightarrow>\n                              sys_heap s' (gc_tmp_ref s') =\n                              Some x2 \\<longrightarrow>\n                              x \\<in> gc_field_set s') \\<and>\n                             (\\<forall>x2b.\n                                 sys_heap s x2a = Some x2b \\<longrightarrow>\n                                 obj_fields x2 x =\n                                 Some x2a \\<longrightarrow>\n                                 sys_heap s' (gc_tmp_ref s') =\n                                 Some x2 \\<longrightarrow>\n                                 x \\<notin> gc_field_set\n       s' \\<longrightarrow>\n                                 obj_mark x2b = sys_fM s'))", "apply (metis (no_types, hide_lams) option.distinct(1) option.map_disc_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' x x2 x2a x2b.\n       \\<lbrakk>\\<forall>x x2a.\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<exists>y. sys_heap s x2a = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<forall>x2.\n                        sys_heap s x2a = Some x2 \\<longrightarrow>\n                        x \\<in> gc_field_set s' \\<or>\n                        obj_mark x2 = sys_fM s'));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' x2a = Some x2b; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2;\n        x \\<notin> gc_field_set s'\\<rbrakk>\n       \\<Longrightarrow> obj_mark x2b = sys_fM s'\n 2. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (sys_heap s' (gc_tmp_ref s') =\n                          None \\<longrightarrow>\n                          x \\<in> gc_field_set s') \\<and>\n                         (\\<forall>x2 x2a.\n                             (sys_heap s x2a = None \\<longrightarrow>\n                              obj_fields x2 x = Some x2a \\<longrightarrow>\n                              sys_heap s' (gc_tmp_ref s') =\n                              Some x2 \\<longrightarrow>\n                              x \\<in> gc_field_set s') \\<and>\n                             (\\<forall>x2b.\n                                 sys_heap s x2a = Some x2b \\<longrightarrow>\n                                 obj_fields x2 x =\n                                 Some x2a \\<longrightarrow>\n                                 sys_heap s' (gc_tmp_ref s') =\n                                 Some x2 \\<longrightarrow>\n                                 x \\<notin> gc_field_set\n       s' \\<longrightarrow>\n                                 obj_mark x2b = sys_fM s'))", "apply (metis (no_types, lifting) option.distinct(1) option.map_sel option.sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s')\\<rbrakk>\n       \\<Longrightarrow> (sys_heap s' (gc_tmp_ref s') =\n                          None \\<longrightarrow>\n                          x \\<in> gc_field_set s') \\<and>\n                         (\\<forall>x2 x2a.\n                             (sys_heap s x2a = None \\<longrightarrow>\n                              obj_fields x2 x = Some x2a \\<longrightarrow>\n                              sys_heap s' (gc_tmp_ref s') =\n                              Some x2 \\<longrightarrow>\n                              x \\<in> gc_field_set s') \\<and>\n                             (\\<forall>x2b.\n                                 sys_heap s x2a = Some x2b \\<longrightarrow>\n                                 obj_fields x2 x =\n                                 Some x2a \\<longrightarrow>\n                                 sys_heap s' (gc_tmp_ref s') =\n                                 Some x2 \\<longrightarrow>\n                                 x \\<notin> gc_field_set\n       s' \\<longrightarrow>\n                                 obj_mark x2b = sys_fM s'))", "apply (intro allI conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s' (gc_tmp_ref s') = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> gc_field_set s'\n 2. \\<And>s s' x x2 x2a.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s x2a = None; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> gc_field_set s'\n 3. \\<And>s s' x x2 x2a x2b.\n       \\<lbrakk>\\<forall>x.\n                   ((\\<exists>y. sys_heap s' (gc_tmp_ref s') = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (\\<forall>x2.\n                       sys_heap s' (gc_tmp_ref s') =\n                       Some x2 \\<longrightarrow>\n                       (\\<forall>x2a.\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                            x \\<in> gc_field_set s') \\<and>\n                           (obj_fields x2 x = Some x2a \\<longrightarrow>\n                            (\\<forall>x2.\n                                sys_heap s' x2a = Some x2 \\<longrightarrow>\n                                x \\<in> gc_field_set s' \\<or>\n                                obj_mark x2 = sys_fM s'))));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s x2a = Some x2b; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2;\n        x \\<notin> gc_field_set s'\\<rbrakk>\n       \\<Longrightarrow> obj_mark x2b = sys_fM s'", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' x x2 x2a.\n       \\<lbrakk>\\<forall>x x2a.\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<forall>x2.\n                        sys_heap s' x2a = Some x2 \\<longrightarrow>\n                        x \\<in> gc_field_set s' \\<or>\n                        obj_mark x2 = sys_fM s'));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s x2a = None; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> gc_field_set s'\n 2. \\<And>s s' x x2 x2a x2b.\n       \\<lbrakk>\\<forall>x x2a.\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<forall>x2.\n                        sys_heap s' x2a = Some x2 \\<longrightarrow>\n                        x \\<in> gc_field_set s' \\<or>\n                        obj_mark x2 = sys_fM s'));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s x2a = Some x2b; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2;\n        x \\<notin> gc_field_set s'\\<rbrakk>\n       \\<Longrightarrow> obj_mark x2b = sys_fM s'", "apply (metis (no_types, hide_lams) option.distinct(1) option.map_disc_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s' x x2 x2a x2b.\n       \\<lbrakk>\\<forall>x x2a.\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<exists>y. sys_heap s' x2a = Some y) \\<or>\n                    x \\<in> gc_field_set s') \\<and>\n                   (obj_fields x2 x = Some x2a \\<longrightarrow>\n                    (\\<forall>x2.\n                        sys_heap s' x2a = Some x2 \\<longrightarrow>\n                        x \\<in> gc_field_set s' \\<or>\n                        obj_mark x2 = sys_fM s'));\n        gc_field_set s = gc_field_set s'; gc_tmp_ref s = gc_tmp_ref s';\n        \\<forall>x.\n           map_option obj_fields (sys_heap s x) =\n           map_option obj_fields (sys_heap s' x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s x) =\n           map_option obj_mark (sys_heap s' x);\n        sys_fM s = sys_fM s';\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s');\n        sys_heap s x2a = Some x2b; obj_fields x2 x = Some x2a;\n        sys_heap s' (gc_tmp_ref s') = Some x2;\n        x \\<notin> gc_field_set s'\\<rbrakk>\n       \\<Longrightarrow> obj_mark x2b = sys_fM s'", "apply (metis (no_types, lifting) option.distinct(1) option.map_sel option.sel)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma obj_fields_marked_UNIV[iff]:\n  \"obj_fields_marked (s(gc := (s gc)\\<lparr> field_set := UNIV \\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_fields_marked (s(gc := s gc\\<lparr>field_set := UNIV\\<rparr>))", "unfolding obj_fields_marked_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> (- gc_field_set)\n                (s(gc := s gc\n                     \\<lparr>field_set := UNIV\\<rparr>)) \\<longrightarrow>\n       obj_at_field_on_heap\n        (\\<lambda>r.\n            marked r (s(gc := s gc\\<lparr>field_set := UNIV\\<rparr>)))\n        (gc_tmp_ref (s(gc := s gc\\<lparr>field_set := UNIV\\<rparr>))) x\n        (s(gc := s gc\\<lparr>field_set := UNIV\\<rparr>))", "by (simp add: fun_upd_apply)"], ["", "lemma obj_fields_marked_invL_eq_imp:\n  \"eq_imp (\\<lambda>r' s. (AT s gc, s\\<down> gc, map_option obj_fields (sys_heap s\\<down> r'), map_option obj_mark (sys_heap s\\<down> r'), sys_fM s\\<down>, sys_W s\\<down>, tso_pending_mutate gc s\\<down>))\n          obj_fields_marked_invL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_imp\n     (\\<lambda>r' s.\n         (AT s gc, s\\<down> gc,\n          map_option obj_fields (sys_heap s\\<down> r'),\n          map_option obj_mark (sys_heap s\\<down> r'), sys_fM s\\<down>,\n          sys_W s\\<down>,\n          filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n           (sys_mem_store_buffers gc s\\<down>)))\n     obj_fields_marked_invL", "unfolding eq_imp_def inv obj_at_def obj_at_field_on_heap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s s'.\n       (\\<forall>x.\n           (AT s gc, s\\<down> gc,\n            map_option obj_fields (sys_heap s\\<down> x),\n            map_option obj_mark (sys_heap s\\<down> x), sys_fM s\\<down>,\n            sys_W s\\<down>,\n            filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n             (sys_mem_store_buffers gc s\\<down>)) =\n           (AT s' gc, s'\\<down> gc,\n            map_option obj_fields (sys_heap s'\\<down> x),\n            map_option obj_mark (sys_heap s'\\<down> x), sys_fM s'\\<down>,\n            sys_W s'\\<down>,\n            filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n             (sys_mem_store_buffers gc s'\\<down>))) \\<longrightarrow>\n       ((atS gc obj_fields_marked_locs s \\<longrightarrow>\n         obj_fields_marked s\\<down> \\<and>\n         gc_tmp_ref s\\<down> \\<in> gc_W s\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s \\<longrightarrow>\n         (case map_option obj_fields\n                (sys_heap s\\<down> (gc_tmp_ref s\\<down>)) of\n          None \\<Rightarrow> False\n          | Some fs \\<Rightarrow>\n              case fs (gc_field s\\<down>) of None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s\\<down> = Some r' \\<or>\n                  (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s \\<longrightarrow>\n         (\\<forall>x.\n             gc_ref s\\<down> \\<noteq> None \\<and>\n             (gc_the_ref s\\<down> reaches x) s\\<down> \\<longrightarrow>\n             (case sys_heap s\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s \\<longrightarrow>\n         gc_tmp_ref s\\<down> \\<in> gc_W s\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s \\<longrightarrow>\n         gc_ref s\\<down> \\<noteq> None \\<longrightarrow>\n         (case sys_heap s\\<down> (gc_the_ref s\\<down>) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s\\<down>)) \\<and>\n        (at gc mark_loop_blacken s \\<longrightarrow>\n         gc_field_set s\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s \\<longrightarrow>\n         gc_ghost_honorary_grey s\\<down> = {})) =\n       ((atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case map_option obj_fields\n                (sys_heap s'\\<down> (gc_tmp_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some fs \\<Rightarrow>\n              case fs (gc_field s'\\<down>) of None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             gc_ref s'\\<down> \\<noteq> None \\<and>\n             (gc_the_ref s'\\<down> reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         gc_ref s'\\<down> \\<noteq> None \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_the_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {}))", "apply (clarsimp simp: all_conj_distrib cong: option.case_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> ((atS gc obj_fields_marked_locs\n                            s' \\<longrightarrow>\n                           obj_fields_marked s\\<down> \\<and>\n                           gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                          (atS gc obj_fields_marked_good_ref_locs\n                            s' \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (gc_tmp_ref s'\\<down>) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2 (gc_field s'\\<down>) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    gc_ref s'\\<down> = Some r' \\<or>\n                                    (case sys_heap s\\<down> r' of\n                                     None \\<Rightarrow> False\n                                     | Some obj \\<Rightarrow>\n   obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                          (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                           (\\<forall>x.\n                               (\\<exists>y.\n                                   gc_ref s'\\<down> = Some y) \\<and>\n                               (the (gc_ref s'\\<down>) reaches x)\n                                s\\<down> \\<longrightarrow>\n                               (case sys_heap s\\<down> x of\n                                None \\<Rightarrow> False\n                                | Some obj \\<Rightarrow> True))) \\<and>\n                          (at gc mark_loop_fields s' \\<longrightarrow>\n                           gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                          (at gc mark_loop_mark_field_done\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                           (case sys_heap s\\<down>\n                                  (the (gc_ref s'\\<down>)) of\n                            None \\<Rightarrow> False\n                            | Some obj \\<Rightarrow>\n                                obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                          (at gc mark_loop_blacken s' \\<longrightarrow>\n                           gc_field_set s'\\<down> = {}) \\<and>\n                          (atS gc ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           gc_ghost_honorary_grey s'\\<down> = {})) =\n                         ((atS gc obj_fields_marked_locs\n                            s' \\<longrightarrow>\n                           obj_fields_marked s'\\<down> \\<and>\n                           gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                          (atS gc obj_fields_marked_good_ref_locs\n                            s' \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (gc_tmp_ref s'\\<down>) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2 (gc_field s'\\<down>) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    gc_ref s'\\<down> = Some r' \\<or>\n                                    (case sys_heap s'\\<down> r' of\n                                     None \\<Rightarrow> False\n                                     | Some obj \\<Rightarrow>\n   obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                          (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                           (\\<forall>x.\n                               (\\<exists>y.\n                                   gc_ref s'\\<down> = Some y) \\<and>\n                               (the (gc_ref s'\\<down>) reaches x)\n                                s'\\<down> \\<longrightarrow>\n                               (case sys_heap s'\\<down> x of\n                                None \\<Rightarrow> False\n                                | Some obj \\<Rightarrow> True))) \\<and>\n                          (at gc mark_loop_fields s' \\<longrightarrow>\n                           gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                          (at gc mark_loop_mark_field_done\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (the (gc_ref s'\\<down>)) of\n                            None \\<Rightarrow> False\n                            | Some obj \\<Rightarrow>\n                                obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                          (at gc mark_loop_blacken s' \\<longrightarrow>\n                           gc_field_set s'\\<down> = {}) \\<and>\n                          (atS gc ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           gc_ghost_honorary_grey s'\\<down> = {}))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s\\<down> \\<longrightarrow>\n             (case sys_heap s\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s'\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s'\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s'\\<down> \\<longrightarrow>\n                              (case sys_heap s'\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s'\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})\n 2. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (intro conjI impI; clarsimp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_locs s'; obj_fields_marked s\\<down>;\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n            (the (gc_ref s'\\<down>) reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        (case sys_heap s\\<down> (the (gc_ref s'\\<down>)) of\n         None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> obj_fields_marked s'\\<down>\n 2. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n        None \\<Rightarrow> False\n        | Some x2 \\<Rightarrow>\n            case obj_fields x2 (gc_field s'\\<down>) of\n            None \\<Rightarrow> True\n            | Some r' \\<Rightarrow>\n                gc_ref s'\\<down> = Some r' \\<or>\n                (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                 | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n            (the (gc_ref s'\\<down>) reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        (case sys_heap s\\<down> (the (gc_ref s'\\<down>)) of\n         None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                         None \\<Rightarrow> False\n                         | Some x2 \\<Rightarrow>\n                             case obj_fields x2 (gc_field s'\\<down>) of\n                             None \\<Rightarrow> True\n                             | Some r' \\<Rightarrow>\n                                 gc_ref s'\\<down> = Some r' \\<or>\n                                 (case sys_heap s'\\<down> r' of\n                                  None \\<Rightarrow> False\n                                  | Some obj \\<Rightarrow>\nobj_mark obj = sys_fM s'\\<down>)\n 3. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 4. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 5. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (subst eq_impD[OF obj_fields_marked_eq_imp]; force)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n        None \\<Rightarrow> False\n        | Some x2 \\<Rightarrow>\n            case obj_fields x2 (gc_field s'\\<down>) of\n            None \\<Rightarrow> True\n            | Some r' \\<Rightarrow>\n                gc_ref s'\\<down> = Some r' \\<or>\n                (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                 | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n            (the (gc_ref s'\\<down>) reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        (case sys_heap s\\<down> (the (gc_ref s'\\<down>)) of\n         None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                         None \\<Rightarrow> False\n                         | Some x2 \\<Rightarrow>\n                             case obj_fields x2 (gc_field s'\\<down>) of\n                             None \\<Rightarrow> True\n                             | Some r' \\<Rightarrow>\n                                 gc_ref s'\\<down> = Some r' \\<or>\n                                 (case sys_heap s'\\<down> r' of\n                                  None \\<Rightarrow> False\n                                  | Some obj \\<Rightarrow>\nobj_mark obj = sys_fM s'\\<down>)\n 2. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 4. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (clarsimp split: option.split_asm)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s s' x2 x2a x2b.\n       \\<lbrakk>obj_mark x2b = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = None;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        gc_ref s'\\<down> = None;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2a;\n        sys_heap s\\<down> x2a = Some x2b;\n        sys_heap s'\\<down> x2a = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2a\n 2. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2b = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = None;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        gc_ref s'\\<down> = None;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2a;\n        sys_heap s\\<down> x2a = Some x2b; sys_heap s'\\<down> x2a = Some x2c;\n        obj_mark x2c = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2a\n 3. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        sys_heap s'\\<down> x2b = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 4. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c; sys_heap s'\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 5. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 6. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 7. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, lifting) None_eq_map_option_iff option.simps(3))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2b = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = None;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        gc_ref s'\\<down> = None;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2a;\n        sys_heap s\\<down> x2a = Some x2b; sys_heap s'\\<down> x2a = Some x2c;\n        obj_mark x2c = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2a\n 2. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        sys_heap s'\\<down> x2b = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 3. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c; sys_heap s'\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 4. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 5. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 6. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, lifting) option.distinct(1) option.map_sel option.sel)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        sys_heap s'\\<down> x2b = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 2. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c; sys_heap s'\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 3. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 4. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 5. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, lifting) None_eq_map_option_iff option.simps(3))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c; sys_heap s'\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 2. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 4. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, lifting) option.distinct(1) option.map_sel option.sel)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 2. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 3. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (subst (asm) (2) eq_impD[OF reaches_eq_imp])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s'\\<down> xa)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap (?s'225 s s' x y) xa))\n 2. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) (?s'225 s s' x y); gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 4. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) (?s'225 s s' x y); gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 2. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s'\\<down> xa)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap (?s'225 s s' x y) xa))\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 4. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y;\n        case sys_heap s\\<down> x of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 2. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s'\\<down> x)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields ` set_option (sys_heap s\\<down> x))\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 4. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types) option.disc_eq_case(2) option.map_disc_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s\\<down> \\<longrightarrow>\n           (case sys_heap s\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s'\\<down> x)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields ` set_option (sys_heap s\\<down> x))\n 2. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 3. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis option.set_map)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s\\<down> \\<longrightarrow>\n            (case sys_heap s\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>\n 2. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (clarsimp split: option.splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s s' y x2.\n       \\<lbrakk>at gc mark_loop_blacken s' \\<longrightarrow>\n                gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = None;\n        \\<not> atS gc obj_fields_marked_good_ref_locs s';\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n            \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2;\n        obj_mark x2 = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s' y x2 x2a.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 3. \\<And>s s' y x2 x2a x2b.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = None;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 4. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 5. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, hide_lams) atS_simps(2) atS_un obj_fields_marked_good_ref_locs_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' y x2 x2a.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s' y x2 x2a x2b.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = None;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 3. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 4. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, hide_lams) map_option_eq_Some option.inject option.simps(9))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' y x2 x2a x2b.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = None;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 3. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, hide_lams) map_option_eq_Some option.inject option.simps(9))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya.\n                             sys_heap s'\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s'\\<down> y =\n                             Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (metis (no_types, hide_lams) map_option_eq_Some option.inject option.simps(9))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "(* cut and paste *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n         obj_fields_marked s'\\<down> \\<and>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n         (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n          None \\<Rightarrow> False\n          | Some x2 \\<Rightarrow>\n              case obj_fields x2 (gc_field s'\\<down>) of\n              None \\<Rightarrow> True\n              | Some r' \\<Rightarrow>\n                  gc_ref s'\\<down> = Some r' \\<or>\n                  (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                   | Some obj \\<Rightarrow>\n                       obj_mark obj = sys_fM s'\\<down>))) \\<and>\n        (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n         (\\<forall>x.\n             (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n             (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n             (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n              | Some obj \\<Rightarrow> True))) \\<and>\n        (at gc mark_loop_fields s' \\<longrightarrow>\n         gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n        (at gc mark_loop_mark_field_done s' \\<longrightarrow>\n         (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n         (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n          None \\<Rightarrow> False\n          | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>)) \\<and>\n        (at gc mark_loop_blacken s' \\<longrightarrow>\n         gc_field_set s'\\<down> = {}) \\<and>\n        (atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n         gc_ghost_honorary_grey s'\\<down> = {})\\<rbrakk>\n       \\<Longrightarrow> (atS gc obj_fields_marked_locs s' \\<longrightarrow>\n                          obj_fields_marked s\\<down> \\<and>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (atS gc obj_fields_marked_good_ref_locs\n                           s' \\<longrightarrow>\n                          (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                           None \\<Rightarrow> False\n                           | Some x2 \\<Rightarrow>\n                               case obj_fields x2 (gc_field s'\\<down>) of\n                               None \\<Rightarrow> True\n                               | Some r' \\<Rightarrow>\n                                   gc_ref s'\\<down> = Some r' \\<or>\n                                   (case sys_heap s\\<down> r' of\n                                    None \\<Rightarrow> False\n                                    | Some obj \\<Rightarrow>\n  obj_mark obj = sys_fM s'\\<down>))) \\<and>\n                         (atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                          (\\<forall>x.\n                              (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n                              (the (gc_ref s'\\<down>) reaches x)\n                               s\\<down> \\<longrightarrow>\n                              (case sys_heap s\\<down> x of\n                               None \\<Rightarrow> False\n                               | Some obj \\<Rightarrow> True))) \\<and>\n                         (at gc mark_loop_fields s' \\<longrightarrow>\n                          gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>) \\<and>\n                         (at gc mark_loop_mark_field_done\n                           s' \\<longrightarrow>\n                          (\\<exists>y.\n                              gc_ref s'\\<down> = Some y) \\<longrightarrow>\n                          (case sys_heap s\\<down>\n                                 (the (gc_ref s'\\<down>)) of\n                           None \\<Rightarrow> False\n                           | Some obj \\<Rightarrow>\n                               obj_mark obj = sys_fM s'\\<down>)) \\<and>\n                         (at gc mark_loop_blacken s' \\<longrightarrow>\n                          gc_field_set s'\\<down> = {}) \\<and>\n                         (atS gc ghost_honorary_grey_empty_locs\n                           s' \\<longrightarrow>\n                          gc_ghost_honorary_grey s'\\<down> = {})", "apply (intro conjI impI; clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_locs s'; obj_fields_marked s'\\<down>;\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n            (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n         None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> obj_fields_marked s\\<down>\n 2. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n        None \\<Rightarrow> False\n        | Some x2 \\<Rightarrow>\n            case obj_fields x2 (gc_field s'\\<down>) of\n            None \\<Rightarrow> True\n            | Some r' \\<Rightarrow>\n                gc_ref s'\\<down> = Some r' \\<or>\n                (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                 | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n            (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n         None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                         None \\<Rightarrow> False\n                         | Some x2 \\<Rightarrow>\n                             case obj_fields x2 (gc_field s'\\<down>) of\n                             None \\<Rightarrow> True\n                             | Some r' \\<Rightarrow>\n                                 gc_ref s'\\<down> = Some r' \\<or>\n                                 (case sys_heap s\\<down> r' of\n                                  None \\<Rightarrow> False\n                                  | Some obj \\<Rightarrow>\nobj_mark obj = sys_fM s'\\<down>)\n 3. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 4. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (subst eq_impD[OF obj_fields_marked_eq_imp]; force)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n        None \\<Rightarrow> False\n        | Some x2 \\<Rightarrow>\n            case obj_fields x2 (gc_field s'\\<down>) of\n            None \\<Rightarrow> True\n            | Some r' \\<Rightarrow>\n                gc_ref s'\\<down> = Some r' \\<or>\n                (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                 | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. gc_ref s'\\<down> = Some y) \\<and>\n            (the (gc_ref s'\\<down>) reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        (case sys_heap s'\\<down> (the (gc_ref s'\\<down>)) of\n         None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n                         None \\<Rightarrow> False\n                         | Some x2 \\<Rightarrow>\n                             case obj_fields x2 (gc_field s'\\<down>) of\n                             None \\<Rightarrow> True\n                             | Some r' \\<Rightarrow>\n                                 gc_ref s'\\<down> = Some r' \\<or>\n                                 (case sys_heap s\\<down> r' of\n                                  None \\<Rightarrow> False\n                                  | Some obj \\<Rightarrow>\nobj_mark obj = sys_fM s'\\<down>)\n 2. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (clarsimp split: option.split_asm)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s s' x2 x2a x2b.\n       \\<lbrakk>obj_mark x2b = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = None;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        gc_ref s'\\<down> = None;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2a;\n        sys_heap s'\\<down> x2a = Some x2b;\n        sys_heap s\\<down> x2a = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2a\n 2. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2b = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = None;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        gc_ref s'\\<down> = None;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2a;\n        sys_heap s'\\<down> x2a = Some x2b; sys_heap s\\<down> x2a = Some x2c;\n        obj_mark x2c = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2a\n 3. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        sys_heap s\\<down> x2b = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 4. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c; sys_heap s\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 5. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 6. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (metis (no_types, lifting) None_eq_map_option_iff option.simps(3))"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2b = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = None;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        gc_ref s'\\<down> = None;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2a;\n        sys_heap s'\\<down> x2a = Some x2b; sys_heap s\\<down> x2a = Some x2c;\n        obj_mark x2c = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2a\n 2. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        sys_heap s\\<down> x2b = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 3. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c; sys_heap s\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 4. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 5. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (metis (no_types, lifting) option.distinct(1) option.map_sel option.sel)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' x2 x2a x2b x2c.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        sys_heap s\\<down> x2b = None\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 2. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c; sys_heap s\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 3. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 4. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (metis (no_types, lifting) None_eq_map_option_iff option.simps(3))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x2 x2a x2b x2c x2d.\n       \\<lbrakk>obj_mark x2c = sys_fM s'\\<down>;\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            gc_ref s'\\<down> = None \\<or>\n            \\<not> (the (gc_ref s'\\<down>) reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (the (gc_ref s'\\<down>)) = Some x2a;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (\\<exists>y. gc_ref s'\\<down> = Some y) \\<longrightarrow>\n        obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc obj_fields_marked_good_ref_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c; sys_heap s\\<down> x2b = Some x2d;\n        obj_mark x2d = (\\<not> sys_fM s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> gc_ref s'\\<down> = Some x2b\n 2. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (metis (no_types, lifting) option.distinct(1) option.map_sel option.sel)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s\\<down>; gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 2. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (subst (asm) (2) eq_impD[OF reaches_eq_imp])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s\\<down> xa)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap (?s'538 s s' x y) xa))\n 2. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) (?s'538 s s' x y); gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) (?s'538 s s' x y); gc_ref s'\\<down> = Some y\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 2. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s\\<down> xa)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap (?s'538 s s' x y) xa))\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (drule spec, drule mp, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        (y reaches x) s'\\<down>; gc_ref s'\\<down> = Some y;\n        case sys_heap s'\\<down> x of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> x of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow> True\n 2. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s\\<down> x)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s'\\<down> x))\n 3. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (metis (no_types, lifting) None_eq_map_option_iff option.case_eq_if)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' x y.\n       \\<lbrakk>gc_ref s'\\<down> = Some y; AT s gc = AT s' gc;\n        s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        atS gc mark_loop_mo_locs s';\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        \\<forall>x.\n           (y reaches x) s'\\<down> \\<longrightarrow>\n           (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n            | Some obj \\<Rightarrow> True);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        at gc mark_loop_mark_field_done s' \\<longrightarrow>\n        (case sys_heap s'\\<down> y of None \\<Rightarrow> False\n         | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>);\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s\\<down> x)) =\n                            \\<Union>\n                             (ran `\n                              obj_fields `\n                              set_option (sys_heap s'\\<down> x))\n 2. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (metis option.set_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s' y.\n       \\<lbrakk>AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        (case sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) of\n         None \\<Rightarrow> False\n         | Some x2 \\<Rightarrow>\n             case obj_fields x2 (gc_field s'\\<down>) of\n             None \\<Rightarrow> True\n             | Some r' \\<Rightarrow>\n                 gc_ref s'\\<down> = Some r' \\<or>\n                 (case sys_heap s'\\<down> r' of None \\<Rightarrow> False\n                  | Some obj \\<Rightarrow>\n                      obj_mark obj = sys_fM s'\\<down>));\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (y reaches x) s'\\<down> \\<longrightarrow>\n            (case sys_heap s'\\<down> x of None \\<Rightarrow> False\n             | Some obj \\<Rightarrow> True));\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        case sys_heap s'\\<down> y of None \\<Rightarrow> False\n        | Some obj \\<Rightarrow> obj_mark obj = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {}\\<rbrakk>\n       \\<Longrightarrow> case sys_heap s\\<down> y of\n                         None \\<Rightarrow> False\n                         | Some obj \\<Rightarrow>\n                             obj_mark obj = sys_fM s'\\<down>", "apply (clarsimp split: option.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s' y x2.\n       \\<lbrakk>at gc mark_loop_blacken s' \\<longrightarrow>\n                gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = None;\n        \\<not> atS gc obj_fields_marked_good_ref_locs s';\n        atS gc mark_loop_mo_locs s' \\<longrightarrow>\n        (\\<forall>x.\n            (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n            \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2;\n        obj_mark x2 = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s' y x2 x2a.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 3. \\<And>s s' y x2 x2a x2b.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = None;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 4. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)", "apply (metis (no_types, hide_lams) atS_simps(2) atS_un obj_fields_marked_good_ref_locs_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s' y x2 x2a.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s' y x2 x2a x2b.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = None;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 3. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)", "apply (metis (no_types, hide_lams) map_option_eq_Some option.inject option.simps(9))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s' y x2 x2a x2b.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = None;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)\n 2. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)", "apply (metis (no_types, hide_lams) map_option_eq_Some option.inject option.simps(9))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s' y x2 x2a x2b x2c.\n       \\<lbrakk>atS gc mark_loop_mo_locs s' \\<longrightarrow>\n                (\\<forall>x.\n                    (\\<exists>y. sys_heap s'\\<down> x = Some y) \\<or>\n                    \\<not> (y reaches x) s'\\<down>);\n        at gc mark_loop_fields s' \\<longrightarrow>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> y = Some x2a; obj_mark x2a = sys_fM s'\\<down>;\n        at gc mark_loop_blacken s' \\<longrightarrow>\n        gc_field_set s'\\<down> = {};\n        atS gc ghost_honorary_grey_empty_locs s' \\<longrightarrow>\n        gc_ghost_honorary_grey s'\\<down> = {};\n        AT s gc = AT s' gc; s\\<down> gc = s'\\<down> gc;\n        \\<forall>x.\n           map_option obj_fields (sys_heap s\\<down> x) =\n           map_option obj_fields (sys_heap s'\\<down> x);\n        \\<forall>x.\n           map_option obj_mark (sys_heap s\\<down> x) =\n           map_option obj_mark (sys_heap s'\\<down> x);\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_W s\\<down> = sys_W s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers gc s'\\<down>);\n        at gc mark_loop_mark_field_done s'; gc_ref s'\\<down> = Some y;\n        atS gc obj_fields_marked_locs s' \\<longrightarrow>\n        obj_fields_marked s'\\<down> \\<and>\n        gc_tmp_ref s'\\<down> \\<in> gc_W s'\\<down>;\n        sys_heap s'\\<down> (gc_tmp_ref s'\\<down>) = Some x2;\n        obj_fields x2 (gc_field s'\\<down>) = Some x2b;\n        sys_heap s'\\<down> x2b = Some x2c;\n        atS gc obj_fields_marked_good_ref_locs s' \\<longrightarrow>\n        y = x2b \\<or> obj_mark x2c = sys_fM s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ya. sys_heap s\\<down> y = Some ya) \\<and>\n                         (\\<forall>x2.\n                             sys_heap s\\<down> y = Some x2 \\<longrightarrow>\n                             obj_mark x2 = sys_fM s'\\<down>)", "apply (metis (no_types, hide_lams) map_option_eq_Some option.inject option.simps(9))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma obj_fields_marked_mark_field_done[iff]:\n  \"\\<lbrakk> obj_at_field_on_heap (\\<lambda>r. marked r s) (gc_tmp_ref s) (gc_field s) s; obj_fields_marked s \\<rbrakk>\n     \\<Longrightarrow> obj_fields_marked (s(gc := (s gc)\\<lparr>field_set := gc_field_set s - {gc_field s}\\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obj_at_field_on_heap (\\<lambda>r. marked r s) (gc_tmp_ref s)\n              (gc_field s) s;\n     obj_fields_marked s\\<rbrakk>\n    \\<Longrightarrow> obj_fields_marked\n                       (s(gc := s gc\n                            \\<lparr>field_set :=\ngc_field_set s - {gc_field s}\\<rparr>))", "unfolding obj_fields_marked_def obj_at_field_on_heap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case map_option obj_fields (sys_heap s (gc_tmp_ref s)) of\n             None \\<Rightarrow> False\n             | Some fs \\<Rightarrow>\n                 case fs (gc_field s) of None \\<Rightarrow> True\n                 | Some r' \\<Rightarrow> marked r' s;\n     \\<forall>x.\n        x \\<in> (- gc_field_set) s \\<longrightarrow>\n        (case map_option obj_fields (sys_heap s (gc_tmp_ref s)) of\n         None \\<Rightarrow> False\n         | Some fs \\<Rightarrow>\n             case fs x of None \\<Rightarrow> True\n             | Some r' \\<Rightarrow> marked r' s)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> (- gc_field_set)\n                                  (s(gc := s gc\n \\<lparr>field_set :=\n           gc_field_set s - {gc_field s}\\<rparr>)) \\<longrightarrow>\n                         (case map_option obj_fields\n                                (sys_heap\n                                  (s(gc := s gc\n \\<lparr>field_set := gc_field_set s - {gc_field s}\\<rparr>))\n                                  (gc_tmp_ref\n                                    (s(gc := s gc\n   \\<lparr>field_set := gc_field_set s - {gc_field s}\\<rparr>)))) of\n                          None \\<Rightarrow> False\n                          | Some fs \\<Rightarrow>\n                              case fs x of None \\<Rightarrow> True\n                              | Some r' \\<Rightarrow>\n                                  marked r'\n                                   (s(gc := s gc\n  \\<lparr>field_set := gc_field_set s - {gc_field s}\\<rparr>)))", "by (fastforce simp: fun_upd_apply split: option.splits obj_at_splits)+"], ["", "end"], ["", "lemmas gc_obj_fields_marked_inv_fun_upd[simp] = eq_imp_fun_upd[OF gc.obj_fields_marked_eq_imp, simplified eq_imp_simps, rule_format]"], ["", "lemmas gc_obj_fields_marked_invL_niE[nie] = iffD1[OF gc.obj_fields_marked_invL_eq_imp[simplified eq_imp_simps, rule_format, unfolded conj_explode], rotated -1]"], ["", "subsection\\<open> mark object \\<close>"], ["", "context mark_object\nbegin"], ["", "lemma mark_object_invL_eq_imp:\n  \"eq_imp (\\<lambda>(_::unit) s. (AT s p, s\\<down> p, sys_heap s\\<down>, sys_fM s\\<down>, sys_mem_store_buffers p s\\<down>))\n          mark_object_invL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_imp\n     (\\<lambda>_ s.\n         (AT s p, s\\<down> p, sys_heap s\\<down>, sys_fM s\\<down>,\n          sys_mem_store_buffers p s\\<down>))\n     mark_object_invL", "unfolding eq_imp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s s'.\n       (\\<forall>x.\n           (AT s p, s\\<down> p, sys_heap s\\<down>, sys_fM s\\<down>,\n            sys_mem_store_buffers p s\\<down>) =\n           (AT s' p, s'\\<down> p, sys_heap s'\\<down>, sys_fM s'\\<down>,\n            sys_mem_store_buffers p s'\\<down>)) \\<longrightarrow>\n       mark_object_invL s = mark_object_invL s'", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s p = AT s' p; s\\<down> p = s'\\<down> p;\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_mem_store_buffers p s\\<down> =\n        sys_mem_store_buffers p s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> mark_object_invL s = mark_object_invL s'", "apply (rename_tac s s')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s p = AT s' p; s\\<down> p = s'\\<down> p;\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_mem_store_buffers p s\\<down> =\n        sys_mem_store_buffers p s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> mark_object_invL s = mark_object_invL s'", "apply (cut_tac s=\"s\\<down>\" and s'=\"s'\\<down>\" in eq_impD[OF p_ph_enabled_eq_imp], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s p = AT s' p; s\\<down> p = s'\\<down> p;\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_mem_store_buffers p s\\<down> =\n        sys_mem_store_buffers p s'\\<down>;\n        p_ph_enabled s\\<down> = p_ph_enabled s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> mark_object_invL s = mark_object_invL s'", "apply (clarsimp simp: mark_object_invL_def obj_at_def white_def\n                cong: option.case_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas mark_object_invL_niE[nie] =\n  iffD1[OF mark_object_invL_eq_imp[simplified eq_imp_simps, rule_format, unfolded conj_explode], rotated -1]"], ["", "end"], ["", "lemma mut_m_mark_object_invL_eq_imp:\n  \"eq_imp (\\<lambda>r s. (AT s (mutator m), s\\<down> (mutator m), sys_heap s\\<down> r, sys_fM s\\<down>, sys_phase s\\<down>, tso_pending_mutate (mutator m) s\\<down>))\n          (mut_m.mark_object_invL m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_imp\n     (\\<lambda>r s.\n         (AT s (mutator m), s\\<down> (mutator m), sys_heap s\\<down> r,\n          sys_fM s\\<down>, sys_phase s\\<down>,\n          filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n           (sys_mem_store_buffers (mutator m) s\\<down>)))\n     (mut_m.mark_object_invL m)", "apply (clarsimp simp: eq_imp_def mut_m.mark_object_invL_def fun_eq_iff[symmetric] obj_at_field_on_heap_def\n                cong: option.case_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (new_ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     obj_at\n(\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>) r' s\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    obj_at\n                                     (\\<lambda>obj.\n   obj_mark obj = sys_fM s'\\<down>)\n                                     r' s\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {})) =\n                         ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (new_ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     marked r' s'\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    marked r' s'\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {}))", "apply (rename_tac s s')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (new_ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     obj_at\n(\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>) r' s\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    obj_at\n                                     (\\<lambda>obj.\n   obj_mark obj = sys_fM s'\\<down>)\n                                     r' s\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {})) =\n                         ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (new_ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     marked r' s'\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    marked r' s'\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {}))", "apply (subgoal_tac \"\\<forall>r. marked r s\\<down> \\<longleftrightarrow> marked r s'\\<down>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (new_ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     obj_at\n(\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>) r' s\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    obj_at\n                                     (\\<lambda>obj.\n   obj_mark obj = sys_fM s'\\<down>)\n                                     r' s\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {})) =\n                         ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (new_ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     marked r' s'\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    marked r' s'\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {}))\n 2. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r. marked r s\\<down> = marked r s'\\<down>", "apply (subgoal_tac \"\\<forall>r. valid_null_ref r s\\<down> \\<longleftrightarrow> valid_null_ref r s'\\<down>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>;\n        \\<forall>r.\n           valid_null_ref r s\\<down> = valid_null_ref r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (new_ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     obj_at\n(\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>) r' s\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    obj_at\n                                     (\\<lambda>obj.\n   obj_mark obj = sys_fM s'\\<down>)\n                                     r' s\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {})) =\n                         ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (new_ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     marked r' s'\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    marked r' s'\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {}))\n 2. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r.\n                            valid_null_ref r s\\<down> =\n                            valid_null_ref r s'\\<down>\n 3. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r. marked r s\\<down> = marked r s'\\<down>", "apply (subgoal_tac \"\\<forall>r f opt_r'. mw_Mutate r f opt_r' \\<notin> set (sys_mem_store_buffers (mutator m) s\\<down>)\n                               \\<longleftrightarrow> mw_Mutate r f opt_r' \\<notin> set (sys_mem_store_buffers (mutator m) s'\\<down>)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>;\n        \\<forall>r. valid_null_ref r s\\<down> = valid_null_ref r s'\\<down>;\n        \\<forall>r f opt_r'.\n           (mw_Mutate r f opt_r'\n            \\<notin> set (sys_mem_store_buffers (mutator m) s\\<down>)) =\n           (mw_Mutate r f opt_r'\n            \\<notin> set (sys_mem_store_buffers (mutator m)\n                           s'\\<down>))\\<rbrakk>\n       \\<Longrightarrow> ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               obj_at\n                                (\\<lambda>obj.\n                                    obj_mark obj = sys_fM s'\\<down>)\n                                x s\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (new_ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     obj_at\n(\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>) r' s\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    obj_at\n                                     (\\<lambda>obj.\n   obj_mark obj = sys_fM s'\\<down>)\n                                     r' s\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           obj_at\n                            (\\<lambda>obj. obj_mark obj = sys_fM s'\\<down>)\n                            (the (ref (s'\\<down> (mutator m))))\n                            s\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {})) =\n                         ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            s' \\<longrightarrow>\n                           refs (s'\\<down> (mutator m))\n                           \\<subseteq> roots (s'\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots (s'\\<down> (mutator m)) \\<and>\n                               x \\<notin> refs\n     (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) = Some y) \\<and>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            s' \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            s' \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (s'\\<down> (mutator m)) \\<longrightarrow>\n                               marked x s'\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            s' \\<longrightarrow>\n                           ((\\<exists>y.\n                                new_ref (s'\\<down> (mutator m)) =\n                                Some y) \\<longrightarrow>\n                            the (new_ref (s'\\<down> (mutator m)))\n                            \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            s' \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            s' \\<longrightarrow>\n                           the (ref (s'\\<down> (mutator m)))\n                           \\<in> ghost_honorary_root\n                                  (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            s' \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            s' \\<longrightarrow>\n                           phase (s'\\<down> (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_Idle \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleInit \\<or>\n                           ghost_hs_phase (s'\\<down> (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase s'\\<down> = ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_grey (s'\\<down> (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_InitMark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               new_ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (new_ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            s' \\<longrightarrow>\n                           ((ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase (s'\\<down> (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                 (field (s'\\<down> (mutator m))) opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                            (case sys_heap s'\\<down>\n                                   (tmp_ref (s'\\<down> (mutator m))) of\n                             None \\<Rightarrow> False\n                             | Some x2 \\<Rightarrow>\n                                 case obj_fields x2\n (field (s'\\<down> (mutator m))) of\n                                 None \\<Rightarrow> True\n                                 | Some r' \\<Rightarrow>\n                                     marked r' s'\\<down>)) \\<and>\n                           ref (s'\\<down> (mutator m)) =\n                           new_ref (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate (tmp_ref (s'\\<down> (mutator m)))\n                                (field (s'\\<down> (mutator m))) opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m) s'\\<down>)) \\<longrightarrow>\n                           (case sys_heap s'\\<down>\n                                  (tmp_ref (s'\\<down> (mutator m))) of\n                            None \\<Rightarrow> False\n                            | Some x2 \\<Rightarrow>\n                                case obj_fields x2\n(field (s'\\<down> (mutator m))) of\n                                None \\<Rightarrow> True\n                                | Some r' \\<Rightarrow>\n                                    ref (s'\\<down> (mutator m)) =\n                                    Some r' \\<or>\n                                    marked r' s'\\<down>)) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            s' \\<longrightarrow>\n                           (ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase (s'\\<down> (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase s'\\<down> \\<noteq> ph_Idle) \\<and>\n                           (\\<exists>y.\n                               ref (s'\\<down> (mutator m)) =\n                               Some y) \\<longrightarrow>\n                           marked (the (ref (s'\\<down> (mutator m))))\n                            s'\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            s' \\<longrightarrow>\n                           tmp_ref (s'\\<down> (mutator m))\n                           \\<in> roots (s'\\<down> (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            s' \\<longrightarrow>\n                           ghost_honorary_root (s'\\<down> (mutator m)) =\n                           {}))\n 2. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>;\n        \\<forall>r.\n           valid_null_ref r s\\<down> = valid_null_ref r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r f opt_r'.\n                            (mw_Mutate r f opt_r'\n                             \\<notin> set\n (sys_mem_store_buffers (mutator m) s\\<down>)) =\n                            (mw_Mutate r f opt_r'\n                             \\<notin> set\n (sys_mem_store_buffers (mutator m) s'\\<down>))\n 3. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r.\n                            valid_null_ref r s\\<down> =\n                            valid_null_ref r s'\\<down>\n 4. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r. marked r s\\<down> = marked r s'\\<down>", "apply (clarsimp cong: option.case_cong)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>;\n        \\<forall>r.\n           valid_null_ref r s\\<down> = valid_null_ref r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r f opt_r'.\n                            (mw_Mutate r f opt_r'\n                             \\<notin> set\n (sys_mem_store_buffers (mutator m) s\\<down>)) =\n                            (mw_Mutate r f opt_r'\n                             \\<notin> set\n (sys_mem_store_buffers (mutator m) s'\\<down>))\n 2. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r.\n                            valid_null_ref r s\\<down> =\n                            valid_null_ref r s'\\<down>\n 3. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r. marked r s\\<down> = marked r s'\\<down>", "apply (metis (mono_tags, lifting) filter_set member_filter)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>);\n        \\<forall>r. marked r s\\<down> = marked r s'\\<down>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r.\n                            valid_null_ref r s\\<down> =\n                            valid_null_ref r s'\\<down>\n 2. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r. marked r s\\<down> = marked r s'\\<down>", "apply (clarsimp simp: obj_at_def valid_null_ref_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>AT s (mutator m) = AT s' (mutator m);\n        s\\<down> (mutator m) = s'\\<down> (mutator m);\n        sys_heap s\\<down> = sys_heap s'\\<down>;\n        sys_fM s\\<down> = sys_fM s'\\<down>;\n        sys_phase s\\<down> = sys_phase s'\\<down>;\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s\\<down>) =\n        filter (\\<lambda>s. is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n         (sys_mem_store_buffers (mutator m) s'\\<down>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r. marked r s\\<down> = marked r s'\\<down>", "apply (clarsimp simp: obj_at_def valid_null_ref_def split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas mut_m_mark_object_invL_niE[nie] =\n  iffD1[OF mut_m_mark_object_invL_eq_imp[simplified eq_imp_simps, rule_format, unfolded conj_explode], rotated -1]"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}