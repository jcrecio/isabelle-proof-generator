{"file_name": "/home/qj213/afp-2021-10-22/thys/ConcurrentGC/Initial_Conditions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ConcurrentGC", "problem_names": ["lemma init_strong_tricolour_inv:\n  \"\\<lbrakk> obj_mark ` ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<subseteq> {gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>}; sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> = gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<rbrakk>\n     \\<Longrightarrow> strong_tricolour_inv \\<lparr>GST = s, HST = []\\<rparr>\\<down>\"", "lemma init_no_grey_refs:\n  \"\\<lbrakk> gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {}; \\<forall>m. W (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) = {}; sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     gc_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {}; \\<forall>m. ghost_honorary_grey (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) = {}; sys_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<rbrakk>\n     \\<Longrightarrow> no_grey_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>\"", "lemma valid_refs_imp_valid_refs_inv:\n  \"\\<lbrakk> valid_refs s; no_grey_refs s; \\<forall>p. sys_mem_store_buffers p s = []; \\<forall>m. ghost_honorary_root (s (mutator m)) = {} \\<rbrakk>\n     \\<Longrightarrow> valid_refs_inv s\"", "lemma no_grey_refs_imp_valid_W_inv:\n  \"\\<lbrakk> no_grey_refs s; \\<forall>p. sys_mem_store_buffers p s = [] \\<rbrakk>\n     \\<Longrightarrow> valid_W_inv s\"", "lemma valid_refs_imp_reachable_snapshot_inv:\n  \"\\<lbrakk> valid_refs s; obj_mark ` ran (sys_heap s) \\<subseteq> {sys_fM s}; \\<forall>p. sys_mem_store_buffers p s = []; \\<forall>m. ghost_honorary_root (s (mutator m)) = {} \\<rbrakk>\n     \\<Longrightarrow> mut_m.reachable_snapshot_inv m s\"", "lemma init_inv_sys: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> invs \\<lparr>GST = s, HST = []\\<rparr>\\<down>\"", "lemma init_inv_mut: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> mut_m.invsL m \\<lparr>GST = s, HST = []\\<rparr>\"", "lemma init_inv_gc: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> gc.invsL \\<lparr>GST = s, HST = []\\<rparr>\"", "lemmas I_defs = gc.invsL_def mut_m.invsL_def invsL_def invs_def I_def", "theorem init_inv: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> I \\<lparr>GST = s, HST = []\\<rparr>\""], "translations": [["", "lemma init_strong_tricolour_inv:\n  \"\\<lbrakk> obj_mark ` ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<subseteq> {gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>}; sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> = gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<rbrakk>\n     \\<Longrightarrow> strong_tricolour_inv \\<lparr>GST = s, HST = []\\<rparr>\\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obj_mark `\n             ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n             \\<subseteq> {gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>};\n     sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n     gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>\\<rbrakk>\n    \\<Longrightarrow> strong_tricolour_inv\n                       \\<lparr>GST = s, HST = []\\<rparr>\\<down>", "unfolding strong_tricolour_inv_def ran_def white_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obj_mark `\n             {b. \\<exists>a.\n                    sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down> a =\n                    Some b}\n             \\<subseteq> {gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>};\n     sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n     gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x xa.\n                         black x\n                          \\<lparr>GST = s,\n                             HST = []\\<rparr>\\<down> \\<longrightarrow>\n                         \\<not> (obj_at\n                                  (\\<lambda>obj.\nxa \\<in> {b. \\<exists>a. obj_fields obj a = Some b})\n                                  x \\<lparr>GST = s,\n HST = []\\<rparr>\\<down> \\<and>\n                                 obj_at\n                                  (\\<lambda>obj.\nobj_mark obj \\<noteq> sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                                  xa \\<lparr>GST = s,\n  HST = []\\<rparr>\\<down>)", "by (auto split: obj_at_splits)"], ["", "lemma init_no_grey_refs:\n  \"\\<lbrakk> gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {}; \\<forall>m. W (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) = {}; sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     gc_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {}; \\<forall>m. ghost_honorary_grey (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) = {}; sys_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<rbrakk>\n     \\<Longrightarrow> no_grey_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     \\<forall>m.\n        W (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) = {};\n     sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     gc_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     \\<forall>m.\n        ghost_honorary_grey\n         (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) =\n        {};\n     sys_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n     {}\\<rbrakk>\n    \\<Longrightarrow> no_grey_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>", "unfolding no_grey_refs_def grey_def WL_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     \\<forall>m.\n        W (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) = {};\n     sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     gc_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {};\n     \\<forall>m.\n        ghost_honorary_grey\n         (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) =\n        {};\n     sys_ghost_honorary_grey \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n     {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         \\<nexists>xa.\n                            x \\<in> W (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  xa) \\<union>\n                                    ghost_honorary_grey\n                                     (\\<lparr>GST = s,\n   HST = []\\<rparr>\\<down>\n xa)", "by (metis equals0D process_name.exhaust sup_bot.left_neutral)"], ["", "lemma valid_refs_imp_valid_refs_inv:\n  \"\\<lbrakk> valid_refs s; no_grey_refs s; \\<forall>p. sys_mem_store_buffers p s = []; \\<forall>m. ghost_honorary_root (s (mutator m)) = {} \\<rbrakk>\n     \\<Longrightarrow> valid_refs_inv s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_refs s; no_grey_refs s;\n     \\<forall>p. sys_mem_store_buffers p s = [];\n     \\<forall>m. ghost_honorary_root (s (mutator m)) = {}\\<rbrakk>\n    \\<Longrightarrow> valid_refs_inv s", "unfolding valid_refs_inv_def valid_refs_def mut_m.reachable_def mut_m.tso_store_refs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<exists>xa xb.\n                    xb \\<in> roots (s (mutator xa)) \\<and>\n                    (xb reaches x) s) \\<longrightarrow>\n                obj_at (\\<lambda>s. True) x s;\n     no_grey_refs s; \\<forall>p. sys_mem_store_buffers p s = [];\n     \\<forall>m. ghost_honorary_root (s (mutator m)) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x xa.\n                         (\\<exists>xb.\n                             xb \\<in> roots (s (mutator x)) \\<union>\nghost_honorary_root (s (mutator x)) \\<union>\n\\<Union> (store_refs ` set (sys_mem_store_buffers (mutator x) s)) \\<and>\n                             (xb reaches xa) s) \\<or>\n                         grey_reachable xa s \\<longrightarrow>\n                         obj_at (\\<lambda>s. True) xa s", "using no_grey_refs_not_grey_reachableD"], ["proof (prove)\nusing this:\n  no_grey_refs ?s \\<Longrightarrow> \\<not> grey_reachable ?x ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<exists>xa xb.\n                    xb \\<in> roots (s (mutator xa)) \\<and>\n                    (xb reaches x) s) \\<longrightarrow>\n                obj_at (\\<lambda>s. True) x s;\n     no_grey_refs s; \\<forall>p. sys_mem_store_buffers p s = [];\n     \\<forall>m. ghost_honorary_root (s (mutator m)) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x xa.\n                         (\\<exists>xb.\n                             xb \\<in> roots (s (mutator x)) \\<union>\nghost_honorary_root (s (mutator x)) \\<union>\n\\<Union> (store_refs ` set (sys_mem_store_buffers (mutator x) s)) \\<and>\n                             (xb reaches xa) s) \\<or>\n                         grey_reachable xa s \\<longrightarrow>\n                         obj_at (\\<lambda>s. True) xa s", "by fastforce"], ["", "lemma no_grey_refs_imp_valid_W_inv:\n  \"\\<lbrakk> no_grey_refs s; \\<forall>p. sys_mem_store_buffers p s = [] \\<rbrakk>\n     \\<Longrightarrow> valid_W_inv s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_grey_refs s;\n     \\<forall>p. sys_mem_store_buffers p s = []\\<rbrakk>\n    \\<Longrightarrow> valid_W_inv s", "unfolding valid_W_inv_def no_grey_refs_def grey_def WL_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                \\<nexists>xa.\n                   x \\<in> W (s xa) \\<union> ghost_honorary_grey (s xa);\n     \\<forall>p. sys_mem_store_buffers p s = []\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x xa.\n                          xa \\<in> W (s x) \\<or>\n                          sys_mem_lock s \\<noteq> Some x \\<and>\n                          xa \\<in> ghost_honorary_grey\n                                    (s x) \\<longrightarrow>\n                          marked xa s) \\<and>\n                      (\\<forall>x xa.\n                          x \\<noteq> xa \\<longrightarrow>\n                          (W (s x) \\<union>\n                           ghost_honorary_grey (s x)) \\<inter>\n                          (W (s xa) \\<union> ghost_honorary_grey (s xa)) =\n                          {}) \\<and>\n                      (\\<forall>x xa xb.\n                          \\<not> (xb \\<in> ghost_honorary_grey (s x) \\<and>\n                                  xb \\<in> W (s xa))) \\<and>\n                      sys_ghost_honorary_grey s = {} \\<and>\n                      (\\<forall>x xa xb.\n                          mw_Mark xa xb\n                          \\<in> set (sys_mem_store_buffers x\ns) \\<longrightarrow>\n                          xb = sys_fM s \\<and>\n                          xa \\<in> ghost_honorary_grey (s x) \\<and>\n                          sys_mem_lock s = Some x \\<and>\n                          white xa s \\<and>\n                          filter is_mw_Mark (sys_mem_store_buffers x s) =\n                          [mw_Mark xa xb])", "by auto"], ["", "lemma valid_refs_imp_reachable_snapshot_inv:\n  \"\\<lbrakk> valid_refs s; obj_mark ` ran (sys_heap s) \\<subseteq> {sys_fM s}; \\<forall>p. sys_mem_store_buffers p s = []; \\<forall>m. ghost_honorary_root (s (mutator m)) = {} \\<rbrakk>\n     \\<Longrightarrow> mut_m.reachable_snapshot_inv m s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_refs s;\n     obj_mark ` ran (sys_heap s) \\<subseteq> {sys_fM s};\n     \\<forall>p. sys_mem_store_buffers p s = [];\n     \\<forall>m. ghost_honorary_root (s (mutator m)) = {}\\<rbrakk>\n    \\<Longrightarrow> mut_m.reachable_snapshot_inv m s", "unfolding mut_m.reachable_snapshot_inv_def in_snapshot_def valid_refs_def black_def mut_m.reachable_def mut_m.tso_store_refs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<exists>xa xb.\n                    xb \\<in> roots (s (mutator xa)) \\<and>\n                    (xb reaches x) s) \\<longrightarrow>\n                obj_at (\\<lambda>s. True) x s;\n     obj_mark ` ran (sys_heap s) \\<subseteq> {sys_fM s};\n     \\<forall>p. sys_mem_store_buffers p s = [];\n     \\<forall>m. ghost_honorary_root (s (mutator m)) = {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (\\<exists>xa.\n                             xa \\<in> roots (s (mutator m)) \\<union>\nghost_honorary_root (s (mutator m)) \\<union>\n\\<Union> (store_refs ` set (sys_mem_store_buffers (mutator m) s)) \\<and>\n                             (xa reaches x) s) \\<longrightarrow>\n                         marked x s \\<and> \\<not> grey x s \\<or>\n                         (\\<exists>xa. (xa grey_protects_white x) s)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>x.\n                   (\\<exists>xa xb.\n                       xb \\<in> roots (s (mutator xa)) \\<and>\n                       (xb reaches x) s) \\<longrightarrow>\n                   obj_at (\\<lambda>s. True) x s;\n        obj_mark ` ran (sys_heap s) \\<subseteq> {sys_fM s};\n        \\<forall>p. sys_mem_store_buffers p s = [];\n        \\<forall>m. ghost_honorary_root (s (mutator m)) = {};\n        xa \\<in> roots (s (mutator m)); (xa reaches x) s;\n        \\<forall>xa. \\<not> (xa grey_protects_white x) s\\<rbrakk>\n       \\<Longrightarrow> marked x s \\<and> \\<not> grey x s", "apply (auto simp: image_subset_iff ran_def split: obj_at_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma init_inv_sys: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> invs \\<lparr>GST = s, HST = []\\<rparr>\\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = gc_coms, INIT = gc_system_init,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       invs \\<lparr>GST = s, HST = []\\<rparr>\\<down>", "apply (clarsimp dest!: initial_stateD\n              simp: gc_system_init_def invs_def gc_initial_state_def mut_initial_state_def sys_initial_state_def\n                    inv\n                    handshake_phase_rel_def handshake_phase_inv_def hp_step_rel_def phase_rel_inv_def phase_rel_def\n                    tso_store_inv_def\n                    init_no_grey_refs init_strong_tricolour_inv no_grey_refs_imp_valid_W_inv\n                    valid_refs_imp_reachable_snapshot_inv\n                    valid_refs_imp_valid_refs_inv\n                    mut_m.marked_deletions_def mut_m.marked_insertions_def\n                    fA_rel_inv_def fA_rel_def fM_rel_inv_def fM_rel_def\n                    all_conj_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma init_inv_mut: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> mut_m.invsL m \\<lparr>GST = s, HST = []\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = gc_coms, INIT = gc_system_init,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       mut_m.invsL m \\<lparr>GST = s, HST = []\\<rparr>", "apply (clarsimp dest!: initial_stateD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>AT \\<lparr>GST = s, HST = []\\<rparr> =\n                (\\<lambda>x. atC (gc_coms x));\n        gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l.\n           \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> mut_m.invsL m \\<lparr>GST = s, HST = []\\<rparr>", "apply (drule fun_cong[where x=\"mutator m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> (mutator m) =\n        atC (gc_coms (mutator m))\\<rbrakk>\n       \\<Longrightarrow> mut_m.invsL m \\<lparr>GST = s, HST = []\\<rparr>", "apply (clarsimp simp: all_com_interned_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> (mutator m) =\n        {mut_m.hs_load_pending, mut_m.mut_mfence,\n         mut_m.mut_store_payload_choose, mut_m.mut_load_payload_choose,\n         mut_m.store_choose, mut_m.mut_load_choose, mut_m.discard_refs,\n         Proofs_Basis.mut_m.alloc, mut_m.mut_local_computation}\\<rbrakk>\n       \\<Longrightarrow> mut_m.invsL m \\<lparr>GST = s, HST = []\\<rparr>", "unfolding mut_m.invsL_def mut_m.mut_get_roots_mark_object_invL_def2 mut_m.mut_store_del_mark_object_invL_def2 mut_m.mut_store_ins_mark_object_invL_def2\n          mut_m.mark_object_invL_def mut_m.handshake_invL_def mut_m.tso_lock_invL_def\n          gc_system_init_def mut_initial_state_def sys_initial_state_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_initial_state\n                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down> gc) \\<and>\n                (\\<forall>m.\n                    ghost_hs_phase\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    hp_IdleMarkSweep \\<and>\n                    ghost_honorary_grey\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    ghost_honorary_root\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    W (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                        (mutator m)) =\n                    {}) \\<and>\n                ((\\<forall>m.\n                     \\<not> sys_hs_pending m\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                     sys_ghost_hs_in_sync m\n                      \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                 sys_ghost_hs_phase\n                  \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 hp_IdleMarkSweep \\<and>\n                 sys_hs_type \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 ht_GetRoots \\<and>\n                 obj_mark `\n                 ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                 \\<subseteq> {initial_mark} \\<and>\n                 sys_fA \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 initial_mark \\<and>\n                 sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 initial_mark \\<and>\n                 sys_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 ph_Idle \\<and>\n                 sys_ghost_honorary_grey\n                  \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 {} \\<and>\n                 sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                 (\\<forall>p.\n                     sys_mem_store_buffers p\n                      \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                     []) \\<and>\n                 sys_mem_lock \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                 None) \\<and>\n                valid_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> (mutator m) =\n        {mut_m.hs_load_pending, mut_m.mut_mfence,\n         mut_m.mut_store_payload_choose, mut_m.mut_load_payload_choose,\n         mut_m.store_choose, mut_m.mut_load_choose, mut_m.discard_refs,\n         Proofs_Basis.mut_m.alloc, mut_m.mut_local_computation}\\<rbrakk>\n       \\<Longrightarrow> ((atS (mutator m) mut_m.hs_get_roots_loop_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           refs\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m))\n                           \\<subseteq> roots\n  (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) \\<and>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) -\n refs\n  (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) \\<longrightarrow>\n                               marked x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_loop_mo_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) \\<noteq>\n                           None \\<and>\n                           (the \\<circ> (\\<lambda>s. ref (s (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> roots\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m))) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_done\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           marked\n                            ((the \\<circ> (\\<lambda>s. ref (s (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           ph_Idle) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_done\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> roots\n  (\\<lparr>GST = s, HST = []\\<rparr>\\<down> (mutator m)) \\<longrightarrow>\n                               marked x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS (mutator m) mut_m.mo_valid_ref_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (new_ref\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            None \\<longrightarrow>\n                            (the \\<circ>\n                             (\\<lambda>s. new_ref (s (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                            \\<in> roots\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m))) \\<and>\n                           tmp_ref\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m))\n                           \\<in> roots\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_null\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) \\<noteq>\n                           None \\<longrightarrow>\n                           (the \\<circ> (\\<lambda>s. ref (s (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> ghost_honorary_root\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_nonempty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (the \\<circ> (\\<lambda>s. ref (s (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> ghost_honorary_root\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.not_idle_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.hs_not_hp_Idle_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ghost_hs_phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           hp_Idle) \\<and>\n                          (atS (mutator m) mut_m.mo_ptest_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           ph_Idle \\<longrightarrow>\n                           ghost_hs_phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m))\n                           \\<in> {hp_Idle, hp_IdleInit} \\<or>\n                           ghost_hs_phase\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           hp_IdleMarkSweep \\<and>\n                           sys_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ph_Idle) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_grey_empty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ghost_honorary_grey\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           {}) \\<and>\n                          (at (mutator m) mut_m.store_ins\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m))\n                            \\<in> {hp_InitMark, hp_Mark} \\<or>\n                            ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<noteq>\n                            ph_Idle) \\<and>\n                           new_ref\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           None \\<longrightarrow>\n                           marked\n                            ((the \\<circ>\n                              (\\<lambda>s. new_ref (s (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS (mutator m) mut_m.ins_barrier_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ((ghost_hs_phase\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                             hp_Mark \\<or>\n                             ghost_hs_phase\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                             hp_IdleMarkSweep \\<and>\n                             sys_phase\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down> \\<noteq>\n                             ph_Idle) \\<and>\n                            (\\<forall>opt_r'.\n                                mw_Mutate\n                                 (tmp_ref\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                                 (field\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                                 opt_r'\n                                \\<notin> set\n    (sys_mem_store_buffers (mutator m)\n      \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<longrightarrow>\n                            obj_at_field_on_heap\n                             (\\<lambda>r'.\n                                 marked r'\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (tmp_ref\n                               (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)))\n                             (field\n                               (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                           new_ref\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.del_barrier1_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<noteq>\n                            ph_Idle) \\<and>\n                           (\\<forall>opt_r'.\n                               mw_Mutate\n                                (tmp_ref\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                                (field\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                                opt_r'\n                               \\<notin> set\n   (sys_mem_store_buffers (mutator m)\n     \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<longrightarrow>\n                           obj_at_field_on_heap\n                            (\\<lambda>r.\n                                ref (\\<lparr>GST = s,\n  HST = []\\<rparr>\\<down>\n(mutator m)) =\n                                Some r \\<or>\n                                marked r\n                                 \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            (tmp_ref\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)))\n                            (field\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.lop_store_ins\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) =\n                            hp_Mark \\<or>\n                            ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) =\n                            hp_IdleMarkSweep \\<and>\n                            sys_phase\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<noteq>\n                            ph_Idle) \\<and>\n                           ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) \\<noteq>\n                           None \\<longrightarrow>\n                           marked\n                            ((the \\<circ> (\\<lambda>s. ref (s (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.mut_load\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           tmp_ref\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m))\n                           \\<in> roots\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m))) \\<and>\n                          (atS (mutator m)\n                            mut_m.ghost_honorary_root_empty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ghost_honorary_root\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           {})) \\<and>\n                         ((at (mutator m) mut_m.hs_get_roots_loop_mo_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_mtest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_phase\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_ptest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_co_lock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m)\n                            mut_m.hs_get_roots_loop_mo_co_cmark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m)\n                            mut_m.hs_get_roots_loop_mo_co_ctest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           obj_at\n                            (\\<lambda>obj.\n                                Some (obj_mark obj) =\n                                cas_mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)))\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_co_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           cas_mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           white\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m)\n                            mut_m.hs_get_roots_loop_mo_co_unlock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if cas_mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))\n                            then ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {(the \\<circ>\n                                   (\\<lambda>s. ref (s (mutator m))))\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           ((cas_mark\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                             mark\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) \\<longrightarrow>\n                             filter is_mw_Mark\n                              (sys_mem_store_buffers (mutator m)\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                             []) \\<longrightarrow>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           (filter is_mw_Mark\n                             (sys_mem_store_buffers (mutator m)\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [] \\<or>\n                            filter is_mw_Mark\n                             (sys_mem_store_buffers (mutator m)\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [mw_Mark\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))])) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_co_won\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if cas_mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))\n                            then ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {(the \\<circ>\n                                   (\\<lambda>s. ref (s (mutator m))))\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.hs_get_roots_loop_mo_co_W\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ghost_honorary_grey\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           {the (ref (\\<lparr>GST = s,\n   HST = []\\<rparr>\\<down>\n (mutator m)))} \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         ((at (mutator m) mut_m.store_ins_mo_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>))) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_mtest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                            fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                            sys_fM\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_phase\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                            fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                            sys_fM\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_ptest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                            fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                            sys_fM\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_lock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_cmark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_ctest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           obj_at\n                            (\\<lambda>obj.\n                                Some (obj_mark obj) =\n                                cas_mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)))\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           cas_mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           white\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_unlock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if cas_mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))\n                            then ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {(the \\<circ>\n                                   (\\<lambda>s. ref (s (mutator m))))\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           ((cas_mark\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                             mark\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) \\<longrightarrow>\n                             filter is_mw_Mark\n                              (sys_mem_store_buffers (mutator m)\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                             []) \\<longrightarrow>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           (filter is_mw_Mark\n                             (sys_mem_store_buffers (mutator m)\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [] \\<or>\n                            filter is_mw_Mark\n                             (sys_mem_store_buffers (mutator m)\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [mw_Mark\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))])) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_won\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if cas_mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))\n                            then ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {(the \\<circ>\n                                   (\\<lambda>s. ref (s (mutator m))))\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_ins_mo_co_W\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ghost_honorary_grey\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           {the (ref (\\<lparr>GST = s,\n   HST = []\\<rparr>\\<down>\n (mutator m)))} \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         ((at (mutator m) mut_m.store_del_mo_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>))) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_mtest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                            fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                            sys_fM\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_phase\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                            fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                            sys_fM\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_ptest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           (ghost_hs_phase\n                             (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                               (mutator m)) \\<noteq>\n                            hp_Idle \\<longrightarrow>\n                            (\\<exists>y.\n                                mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)) =\n                                Some y) \\<and>\n                            (obj_at\n                              (\\<lambda>obj.\n                                  Some (obj_mark obj) =\n                                  mark\n                                   (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)))\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                             marked\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                            fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 (mutator m)) =\n                            sys_fM\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_lock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_cmark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_ctest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 mark\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<noteq>\n                           Some\n                            (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))) \\<and>\n                           obj_at\n                            (\\<lambda>obj.\n                                Some (obj_mark obj) =\n                                cas_mark\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   (mutator m)))\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           cas_mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           mark\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           white\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_unlock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if cas_mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))\n                            then ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {(the \\<circ>\n                                   (\\<lambda>s. ref (s (mutator m))))\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           ((cas_mark\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                             mark\n                              (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) \\<longrightarrow>\n                             filter is_mw_Mark\n                              (sys_mem_store_buffers (mutator m)\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                             []) \\<longrightarrow>\n                            marked\n                             (the (ref (\\<lparr>GST = s,\n     HST = []\\<rparr>\\<down>\n   (mutator m))))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           (filter is_mw_Mark\n                             (sys_mem_store_buffers (mutator m)\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [] \\<or>\n                            filter is_mw_Mark\n                             (sys_mem_store_buffers (mutator m)\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [mw_Mark\n                              (the (ref (\\<lparr>GST = s,\n      HST = []\\<rparr>\\<down>\n    (mutator m))))\n                              (fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)))])) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_won\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if cas_mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m)) =\n                               mark\n                                (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                  (mutator m))\n                            then ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {(the \\<circ>\n                                   (\\<lambda>s. ref (s (mutator m))))\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else ghost_honorary_grey\n                                  (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                    (mutator m)) =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at (mutator m) mut_m.store_del_mo_co_W\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           ghost_honorary_grey\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           {the (ref (\\<lparr>GST = s,\n   HST = []\\<rparr>\\<down>\n (mutator m)))} \\<and>\n                           (\\<exists>y.\n                               ref (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                     (mutator m)) =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           fM (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                (mutator m)) =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (ref (\\<lparr>GST = s,\n    HST = []\\<rparr>\\<down>\n  (mutator m))))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         ((atS (mutator m) mut_m.hs_noop_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ht_NOOP) \\<and>\n                          (atS (mutator m) mut_m.hs_get_roots_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ht_GetRoots) \\<and>\n                          (atS (mutator m) mut_m.hs_get_work_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ht_GetWork) \\<and>\n                          (atS (mutator m) mut_m.ht_loaded_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           mutator_hs_pending\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<longrightarrow>\n                           hs_type\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) =\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS (mutator m) mut_m.hs_pending_loaded_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           mutator_hs_pending\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m)) \\<longrightarrow>\n                           sys_hs_pending m\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS (mutator m) mut_m.hs_pending_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           mutator_hs_pending\n                            (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                              (mutator m))) \\<and>\n                          (atS (mutator m) mut_m.no_pending_mutations_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers (mutator m)\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         (atS (mutator m) mut_m.tso_lock_locs\n                           \\<lparr>GST = s,\n                              HST = []\\<rparr> \\<longrightarrow>\n                          sys_mem_lock\n                           \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                          Some (mutator m)) \\<and>\n                         (atS (mutator m) (- mut_m.tso_lock_locs)\n                           \\<lparr>GST = s,\n                              HST = []\\<rparr> \\<longrightarrow>\n                          sys_mem_lock\n                           \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<noteq>\n                          Some (mutator m))", "apply (intro conjI; simp add: locset_cache atS_simps; simp add: mut_m.loc_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma init_inv_gc: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> gc.invsL \\<lparr>GST = s, HST = []\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = gc_coms, INIT = gc_system_init,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       gc.invsL \\<lparr>GST = s, HST = []\\<rparr>", "apply (clarsimp dest!: initial_stateD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>AT \\<lparr>GST = s, HST = []\\<rparr> =\n                (\\<lambda>x. atC (gc_coms x));\n        gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l.\n           \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> gc.invsL \\<lparr>GST = s, HST = []\\<rparr>", "apply (drule fun_cong[where x=gc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc = atC (gc_coms gc)\\<rbrakk>\n       \\<Longrightarrow> gc.invsL \\<lparr>GST = s, HST = []\\<rparr>", "apply (clarsimp simp: all_com_interned_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {gc.idle_noop_mfence}\\<rbrakk>\n       \\<Longrightarrow> gc.invsL \\<lparr>GST = s, HST = []\\<rparr>", "unfolding gc.invsL_def gc.fM_fA_invL_def gc.handshake_invL_def gc.obj_fields_marked_invL_def gc.phase_invL_def gc.sweep_loop_invL_def\n          gc.tso_lock_invL_def gc.gc_W_empty_invL_def gc.gc_mark_mark_object_invL_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {gc.idle_noop_mfence}\\<rbrakk>\n       \\<Longrightarrow> ((atS gc gc.fM_eq_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.idle_store_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.idle_flip_noop_mfence\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           gc_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<longrightarrow>\n                           filter is_mw_fM\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<noteq>\n                           []) \\<and>\n                          (atS gc gc.fM_tso_empty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           filter is_mw_fM\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (atS gc gc.fA_eq_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fA\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.fA_neq_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           sys_fA\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_noop_mfence\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           sys_fA\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<longrightarrow>\n                           filter is_mw_fA\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<noteq>\n                           []) \\<and>\n                          (atS gc gc.fA_tso_empty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           filter is_mw_fA\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         ((at gc gc.mark_loop_mo_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_mo_fM\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at gc gc.mark_loop_mo_mtest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_mo_phase\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           Some\n                            (gc_fM\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_mo_ptest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           Some\n                            (gc_fM\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_mo_co_lock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           Some\n                            (gc_fM\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at gc gc.mark_loop_mo_co_cmark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           Some\n                            (gc_fM\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at gc gc.mark_loop_mo_co_ctest\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           (obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           Some\n                            (gc_fM\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down>) \\<and>\n                           obj_at\n                            (\\<lambda>obj.\n                                Some (obj_mark obj) =\n                                gc_cas_mark\n                                 \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at gc gc.mark_loop_mo_co_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_cas_mark\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           gc_mark\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           white\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter is_mw_Mark\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at gc gc.mark_loop_mo_co_unlock\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if gc_cas_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                            then gc_ghost_honorary_grey\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                                 {gc_the_ref\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else gc_ghost_honorary_grey\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           ((gc_cas_mark\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                             gc_mark\n                              \\<lparr>GST = s,\n                                 HST = []\\<rparr>\\<down> \\<longrightarrow>\n                             filter is_mw_Mark\n                              (sys_mem_store_buffers gc\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                             []) \\<longrightarrow>\n                            marked\n                             (the (gc_ref\n                                    \\<lparr>GST = s,\n HST = []\\<rparr>\\<down>))\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           (filter is_mw_Mark\n                             (sys_mem_store_buffers gc\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [] \\<or>\n                            filter is_mw_Mark\n                             (sys_mem_store_buffers gc\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                            [mw_Mark\n                              (the (gc_ref\n                                     \\<lparr>GST = s,\n  HST = []\\<rparr>\\<down>))\n                              (gc_fM\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)])) \\<and>\n                          (at gc gc.mark_loop_mo_co_won\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (if gc_cas_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               gc_mark\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                            then gc_ghost_honorary_grey\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                                 {gc_the_ref\n                                   \\<lparr>GST = s, HST = []\\<rparr>\\<down>}\n                            else gc_ghost_honorary_grey\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                                 {}) \\<and>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           []) \\<and>\n                          (at gc gc.mark_loop_mo_co_W\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_ghost_honorary_grey\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {the (gc_ref\n                                  \\<lparr>GST = s,\n                                     HST = []\\<rparr>\\<down>)} \\<and>\n                           (\\<exists>y.\n                               gc_ref\n                                \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                               Some y) \\<and>\n                           obj_at (\\<lambda>obj. True)\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           sys_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           marked\n                            (the (gc_ref\n                                   \\<lparr>GST = s,\nHST = []\\<rparr>\\<down>))\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           filter\n                            (\\<lambda>s.\n                                is_mw_Mutate s \\<or> is_mw_Mutate_Payload s)\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         ((atS gc gc.get_roots_UN_get_work_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               mut_m.gc_W_empty_mut_inv x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (at gc gc.mark_loop_get_roots_load_W\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {} \\<longrightarrow>\n                           no_grey_refs\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_get_work_load_W\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {} \\<longrightarrow>\n                           no_grey_refs\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {} \\<longrightarrow>\n                           no_grey_refs\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.no_grey_refs_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           no_grey_refs\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.gc_W_empty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {})) \\<and>\n                         ((atS gc gc.hs_noop_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ht_NOOP) \\<and>\n                          (atS gc gc.hs_get_roots_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ht_GetRoots) \\<and>\n                          (atS gc gc.hs_get_work_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_hs_type\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ht_GetWork) \\<and>\n                          (atS gc gc.hs_mut_in_muts_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_mut \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> gc_muts\n                                  \\<lparr>GST = s,\n                                     HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.hs_init_loop_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<notin> gc_muts\n     \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               sys_hs_pending x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<or>\n                               sys_ghost_hs_in_sync x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hs_init_loop_not_done_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> gc_muts\n  \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               \\<not> sys_hs_pending x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                               \\<not> sys_ghost_hs_in_sync x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hs_init_loop_done_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (sys_hs_pending\n                             (gc_mut\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<or>\n                            sys_ghost_hs_in_sync\n                             (gc_mut\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           (\\<forall>x.\n                               x \\<in> gc_muts\n  \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                               x \\<noteq>\n                               gc_mut\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               \\<not> sys_hs_pending x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                               \\<not> sys_ghost_hs_in_sync x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hs_done_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               sys_hs_pending x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<or>\n                               sys_ghost_hs_in_sync x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hs_done_loop_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<notin> gc_muts\n     \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               \\<not> sys_hs_pending x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hs_none_pending_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               \\<not> sys_hs_pending x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hs_in_sync_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           All (ghost_hs_in_sync\n                                 (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                   sys))) \\<and>\n                          (atS gc gc.hs_out_of_sync_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               \\<not> sys_hs_pending x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                               \\<not> sys_ghost_hs_in_sync x\n \\<lparr>GST = s, HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.hp_Idle_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_ghost_hs_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           hp_Idle) \\<and>\n                          (atS gc gc.hp_IdleInit_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_ghost_hs_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           hp_IdleInit) \\<and>\n                          (atS gc gc.hp_InitMark_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_ghost_hs_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           hp_InitMark) \\<and>\n                          (atS gc gc.hp_IdleMarkSweep_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_ghost_hs_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           hp_IdleMarkSweep) \\<and>\n                          (atS gc gc.hp_Mark_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           sys_ghost_hs_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           hp_Mark)) \\<and>\n                         ((atS gc gc.obj_fields_marked_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc.obj_fields_marked\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           gc_tmp_ref\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> gc_W\n                                  \\<lparr>GST = s,\n                                     HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.obj_fields_marked_good_ref_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           obj_at_field_on_heap\n                            (\\<lambda>r.\n                                gc_ref\n                                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                                Some r \\<or>\n                                marked r\n                                 \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            (gc_tmp_ref\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            (gc_field\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.mark_loop_mo_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               gc_ref\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<noteq>\n                               None \\<and>\n                               (gc_the_ref\n                                 \\<lparr>GST = s,\n                                    HST = []\\<rparr>\\<down> reaches\n                                x)\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               obj_at (\\<lambda>s. True) x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (at gc gc.mark_loop_fields\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_tmp_ref\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> gc_W\n                                  \\<lparr>GST = s,\n                                     HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_mark_field_done\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_ref\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           None \\<longrightarrow>\n                           marked\n                            (gc_the_ref\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.mark_loop_blacken\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_field_set\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {}) \\<and>\n                          (atS gc gc.ghost_honorary_grey_empty_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_ghost_honorary_grey\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           {})) \\<and>\n                         ((atS gc gc.idle_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ph_Idle) \\<and>\n                          (atS gc gc.init_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ph_Init) \\<and>\n                          (atS gc gc.mark_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ph_Mark) \\<and>\n                          (atS gc gc.sweep_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_phase\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                           ph_Sweep) \\<and>\n                          (atS gc gc.no_pending_phase_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           filter is_mw_Phase\n                            (sys_mem_store_buffers gc\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                           [])) \\<and>\n                         ((at gc gc.sweep_loop_check\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (gc_mark\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<noteq>\n                            None \\<longrightarrow>\n                            obj_at\n                             (\\<lambda>obj.\n                                 Some (obj_mark obj) =\n                                 gc_mark\n                                  \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             (gc_tmp_ref\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>) \\<and>\n                           (gc_mark\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                            None \\<and>\n                            obj_at (\\<lambda>s. True)\n                             (gc_tmp_ref\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<longrightarrow>\n                            marked\n                             (gc_tmp_ref\n                               \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down>)) \\<and>\n                          (at gc gc.sweep_loop_free\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_mark\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           None \\<and>\n                           (the \\<circ> gc_mark)\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<noteq>\n                           gc_fM\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                           obj_at\n                            (\\<lambda>obj.\n                                Some (obj_mark obj) =\n                                gc_mark\n                                 \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            (gc_tmp_ref\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (at gc gc.sweep_loop_ref_done\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           obj_at (\\<lambda>s. True)\n                            (gc_tmp_ref\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr>\\<down> \\<longrightarrow>\n                           marked\n                            (gc_tmp_ref\n                              \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                          (atS gc gc.sweep_loop_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<notin> gc_refs\n     \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                               obj_at (\\<lambda>s. True) x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               marked x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.black_heap_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           (\\<forall>x.\n                               obj_at (\\<lambda>s. True) x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down> \\<longrightarrow>\n                               marked x\n                                \\<lparr>GST = s,\n                                   HST = []\\<rparr>\\<down>)) \\<and>\n                          (atS gc gc.sweep_loop_not_choose_ref_locs\n                            \\<lparr>GST = s,\n                               HST = []\\<rparr> \\<longrightarrow>\n                           gc_tmp_ref\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                           \\<in> gc_refs\n                                  \\<lparr>GST = s,\n                                     HST = []\\<rparr>\\<down>)) \\<and>\n                         (atS gc gc.tso_lock_locs\n                           \\<lparr>GST = s,\n                              HST = []\\<rparr> \\<longrightarrow>\n                          sys_mem_lock\n                           \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                          Some gc) \\<and>\n                         (atS gc (- gc.tso_lock_locs)\n                           \\<lparr>GST = s,\n                              HST = []\\<rparr> \\<longrightarrow>\n                          sys_mem_lock\n                           \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<noteq>\n                          Some gc)", "apply (intro conjI; simp add: locset_cache atS_simps init_no_grey_refs; simp add: gc.loc_defs)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                         sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n 2. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> filter is_mw_fM\n                          (sys_mem_store_buffers gc\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                         []\n 3. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                         sys_fA \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n 4. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> filter is_mw_fA\n                          (sys_mem_store_buffers gc\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down>) =\n                         []\n 5. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> no_grey_refs\n                          \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n 6. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {}\n 7. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            \\<not> sys_hs_pending x\n                                    \\<lparr>GST = s, HST = []\\<rparr>\\<down>\n 8. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> All (ghost_hs_in_sync\n                               (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 sys))\n 9. \\<And>s.\n       \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> sys_ghost_hs_phase\n                          \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                         hp_IdleMarkSweep\n 10. \\<And>s.\n        \\<lbrakk>gc_system_init \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n         \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n         AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n         {''idle_noop_mfence''}\\<rbrakk>\n        \\<Longrightarrow> gc_ghost_honorary_grey\n                           \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                          {}\nA total of 13 subgoals...", "apply (simp_all add: gc_system_init_def gc_initial_state_def mut_initial_state_def sys_initial_state_def\n                     gc_system.init_no_grey_refs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                gc_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ph_Idle \\<and>\n                gc_ghost_honorary_grey\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                {} \\<and>\n                gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                (\\<forall>m.\n                    ghost_hs_phase\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    hp_IdleMarkSweep \\<and>\n                    ghost_honorary_grey\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    ghost_honorary_root\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    W (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                        (mutator m)) =\n                    {}) \\<and>\n                (\\<forall>m.\n                    \\<not> sys_hs_pending m\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                    sys_ghost_hs_in_sync m\n                     \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                sys_ghost_hs_phase\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                hp_IdleMarkSweep \\<and>\n                sys_hs_type \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ht_GetRoots \\<and>\n                obj_mark `\n                ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                \\<subseteq> {initial_mark} \\<and>\n                sys_fA \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                sys_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ph_Idle \\<and>\n                sys_ghost_honorary_grey\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                {} \\<and>\n                sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                (\\<forall>p.\n                    sys_mem_store_buffers p\n                     \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                    []) \\<and>\n                sys_mem_lock \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                None \\<and>\n                valid_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> All (ghost_hs_in_sync\n                               (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                                 sys))\n 2. \\<And>s.\n       \\<lbrakk>gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                gc_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ph_Idle \\<and>\n                gc_ghost_honorary_grey\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                {} \\<and>\n                gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                (\\<forall>m.\n                    ghost_hs_phase\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    hp_IdleMarkSweep \\<and>\n                    ghost_honorary_grey\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    ghost_honorary_root\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    W (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                        (mutator m)) =\n                    {}) \\<and>\n                (\\<forall>m.\n                    \\<not> sys_hs_pending m\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                    sys_ghost_hs_in_sync m\n                     \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                sys_ghost_hs_phase\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                hp_IdleMarkSweep \\<and>\n                sys_hs_type \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ht_GetRoots \\<and>\n                obj_mark `\n                ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                \\<subseteq> {initial_mark} \\<and>\n                sys_fA \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                sys_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ph_Idle \\<and>\n                sys_ghost_honorary_grey\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                {} \\<and>\n                sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                (\\<forall>p.\n                    sys_mem_store_buffers p\n                     \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                    []) \\<and>\n                sys_mem_lock \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                None \\<and>\n                valid_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            obj_at (\\<lambda>s. True) x\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<longrightarrow>\n                            obj_at\n                             (\\<lambda>obj. obj_mark obj = initial_mark) x\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>gc_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                gc_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ph_Idle \\<and>\n                gc_ghost_honorary_grey\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                {} \\<and>\n                gc_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                (\\<forall>m.\n                    ghost_hs_phase\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    hp_IdleMarkSweep \\<and>\n                    ghost_honorary_grey\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    ghost_honorary_root\n                     (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                       (mutator m)) =\n                    {} \\<and>\n                    W (\\<lparr>GST = s, HST = []\\<rparr>\\<down>\n                        (mutator m)) =\n                    {}) \\<and>\n                (\\<forall>m.\n                    \\<not> sys_hs_pending m\n                            \\<lparr>GST = s, HST = []\\<rparr>\\<down> \\<and>\n                    sys_ghost_hs_in_sync m\n                     \\<lparr>GST = s, HST = []\\<rparr>\\<down>) \\<and>\n                sys_ghost_hs_phase\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                hp_IdleMarkSweep \\<and>\n                sys_hs_type \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ht_GetRoots \\<and>\n                obj_mark `\n                ran (sys_heap \\<lparr>GST = s, HST = []\\<rparr>\\<down>)\n                \\<subseteq> {initial_mark} \\<and>\n                sys_fA \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                sys_fM \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                initial_mark \\<and>\n                sys_phase \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                ph_Idle \\<and>\n                sys_ghost_honorary_grey\n                 \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                {} \\<and>\n                sys_W \\<lparr>GST = s, HST = []\\<rparr>\\<down> = {} \\<and>\n                (\\<forall>p.\n                    sys_mem_store_buffers p\n                     \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                    []) \\<and>\n                sys_mem_lock \\<lparr>GST = s, HST = []\\<rparr>\\<down> =\n                None \\<and>\n                valid_refs \\<lparr>GST = s, HST = []\\<rparr>\\<down>;\n        \\<forall>p l. \\<not> taken p l \\<lparr>GST = s, HST = []\\<rparr>;\n        AT \\<lparr>GST = s, HST = []\\<rparr> gc =\n        {''idle_noop_mfence''}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            obj_at (\\<lambda>s. True) x\n                             \\<lparr>GST = s,\n                                HST = []\\<rparr>\\<down> \\<longrightarrow>\n                            obj_at\n                             (\\<lambda>obj. obj_mark obj = initial_mark) x\n                             \\<lparr>GST = s, HST = []\\<rparr>\\<down>", "apply (clarsimp simp: image_subset_iff ranI split: obj_at_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "(* FIXME really deserves to be somewhere very public but there's no shared theory immediately above Local and Global invs by design *)"], ["", "definition I :: \"('field, 'mut, 'payload, 'ref) gc_pred\" where\n  \"I = (invsL \\<^bold>\\<and> LSTP invs)\""], ["", "lemmas I_defs = gc.invsL_def mut_m.invsL_def invsL_def invs_def I_def"], ["", "context gc_system\nbegin"], ["", "theorem init_inv: \"\\<forall>s. initial_state gc_system s \\<longrightarrow> I \\<lparr>GST = s, HST = []\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = gc_coms, INIT = gc_system_init,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       I \\<lparr>GST = s, HST = []\\<rparr>", "unfolding I_def invsL_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s.\n       initial_state\n        \\<lparr>PGMs = gc_coms, INIT = gc_system_init,\n           FAIR = \\<lambda>s. True\\<rparr>\n        s \\<longrightarrow>\n       (gc.invsL \\<lparr>GST = s, HST = []\\<rparr> \\<and>\n        (\\<forall>x.\n            mut_m.invsL x \\<lparr>GST = s, HST = []\\<rparr>)) \\<and>\n       invs \\<lparr>GST = s, HST = []\\<rparr>\\<down>", "by (simp add: init_inv_sys init_inv_gc init_inv_mut)"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}