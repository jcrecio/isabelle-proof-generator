{"file_name": "/home/qj213/afp-2021-10-22/thys/Approximation_Algorithms/Approx_MIS_Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Approximation_Algorithms", "problem_names": ["lemma finite_edges: \"e \\<in> E \\<Longrightarrow> finite e\"", "lemma finite_V: \"finite V\"", "lemma finite_neighbors: \"finite (neighbors u)\"", "lemma independent_vertices_finite: \"independent_vertices E S \\<Longrightarrow> finite S\"", "lemma edge_ex_vertices: \"e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}\"", "lemma \\<Delta>_pos [simp]: \"E = {} \\<or> 0 < \\<Delta>\"", "lemma \\<Delta>_max_degree: \"u \\<in> V \\<Longrightarrow> degree_vertex u \\<le> \\<Delta>\"", "lemma inv_preserv:\n  fixes S :: \"'a set\"\n    and X :: \"'a set\"\n    and x :: \"'a\"\n  assumes inv: \"inv_iv S X\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\"", "lemma inv_approx_preserv:\n  assumes inv: \"inv_approx S X (\\<Delta> + 1)\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x}) (\\<Delta> + 1)\"", "lemma inv_approx: \"independent_vertices E S \\<Longrightarrow> card V \\<le> card S * r \\<Longrightarrow> approximation_miv r S\"", "theorem wei_approx_\\<Delta>_plus_1:\n\"VARS (S :: 'a set) (X :: 'a set) (x :: 'a)\n  { True }\n  S := {};\n  X := {};\n  WHILE X \\<noteq> V\n  INV { inv_approx S X (\\<Delta> + 1) }\n  DO x := (SOME x. x \\<in> V - X);\n     S := insert x S;\n     X := X \\<union> neighbors x \\<union> {x}\n  OD\n  { approximation_miv (\\<Delta> + 1) S }\"", "lemma inv_partition_preserv:\n  assumes inv: \"inv_partition S X P\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x}) (insert ({x} \\<union> neighbors x) P)\"", "lemma card_Union_le_sum_card:\n  fixes U :: \"'a set set\"\n  assumes \"\\<forall>u \\<in> U. finite u\"\n  shows \"card (\\<Union>U) \\<le> sum card U\"", "lemma sum_card:\n  fixes U :: \"'a set set\"\n    and n :: nat\n  assumes \"\\<forall>S \\<in> U. card S \\<le> n\"\n  shows \"sum card U \\<le> card U * n\"", "lemma x_or_neighbors:\n  fixes P :: \"'a set set\"\n    and S :: \"'a set\"\n  assumes inv: \"\\<forall>p\\<in>P. \\<exists>s \\<in> V. p = {s} \\<union> neighbors s\"\n      and ivS: \"independent_vertices E S\"\n    shows \"\\<forall>p \\<in> P. card (S \\<inter> p) \\<le> \\<Delta>\"", "lemma inv_partition_approx: \"inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S\"", "theorem wei_approx_\\<Delta>:\n\"VARS (S :: 'a set) (X :: 'a set) (x :: 'a)\n  { True }\n  S := {};\n  X := {};\n  WHILE X \\<noteq> V\n  INV { \\<exists>P. inv_partition S X P }\n  DO x := (SOME x. x \\<in> V - X);\n     S := insert x S;\n     X := X \\<union> neighbors x \\<union> {x}\n  OD\n  { approximation_miv \\<Delta> S }\"", "lemma ex_min_finite_set:\n  fixes S :: \"'a set\"\n    and f :: \"'a \\<Rightarrow> nat\"\n    shows \"finite S \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> S \\<and> (\\<forall>y \\<in> S. f x \\<le> f y)\"\n          (is \"?P1 \\<Longrightarrow> ?P2 \\<Longrightarrow> \\<exists>x. ?minf S x\")", "lemma inv_approx_preserv2:\n  fixes S :: \"'a set\"\n    and X :: \"'a set\"\n    and s :: nat\n    and x :: \"'a\"\n  assumes inv: \"inv_approx S X s\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x}) (max (card (neighbors x \\<union> {x} - X)) s)\"", "theorem wei_approx_min_degree_heuristic:\n\"VARS (S :: 'a set) (X :: 'a set) (x :: 'a) (r :: nat)\n  { True }\n  S := {};\n  X := {};\n  r := 0;\n  WHILE X \\<noteq> V\n  INV { inv_approx S X r }\n  DO x := (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x);\n     S := insert x S;\n     r := max (card (neighbors x \\<union> {x} - X)) r;\n     X := X \\<union> neighbors x \\<union> {x}\n  OD\n  { approximation_miv r S }\""], "translations": [["", "lemma finite_edges: \"e \\<in> E \\<Longrightarrow> finite e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> E \\<Longrightarrow> finite e", "using card_ge_0_finite and edges2"], ["proof (prove)\nusing this:\n  0 < card ?A \\<Longrightarrow> finite ?A\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n\ngoal (1 subgoal):\n 1. e \\<in> E \\<Longrightarrow> finite e", "by force"], ["", "lemma finite_V: \"finite V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite V", "using finite_edges and finite_E"], ["proof (prove)\nusing this:\n  ?e \\<in> E \\<Longrightarrow> finite ?e\n  finite E\n\ngoal (1 subgoal):\n 1. finite V", "by auto"], ["", "lemma finite_neighbors: \"finite (neighbors u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (neighbors u)", "using finite_V and rev_finite_subset [of V \"neighbors u\"]"], ["proof (prove)\nusing this:\n  finite V\n  \\<lbrakk>finite V; neighbors u \\<subseteq> V\\<rbrakk>\n  \\<Longrightarrow> finite (neighbors u)\n\ngoal (1 subgoal):\n 1. finite (neighbors u)", "by auto"], ["", "lemma independent_vertices_finite: \"independent_vertices E S \\<Longrightarrow> finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. independent_vertices E S \\<Longrightarrow> finite S", "by (metis rev_finite_subset independent_vertices_def vertices.simps finite_V)"], ["", "lemma edge_ex_vertices: \"e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}", "assume \"e \\<in> E\""], ["proof (state)\nthis:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}", "then"], ["proof (chain)\npicking this:\n  e \\<in> E", "have \"card e = Suc (Suc 0)\""], ["proof (prove)\nusing this:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. card e = Suc (Suc 0)", "using edges2"], ["proof (prove)\nusing this:\n  e \\<in> E\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n\ngoal (1 subgoal):\n 1. card e = Suc (Suc 0)", "by auto"], ["proof (state)\nthis:\n  card e = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}", "then"], ["proof (chain)\npicking this:\n  card e = Suc (Suc 0)", "show \"\\<exists>u v. u \\<noteq> v \\<and> e = {u, v}\""], ["proof (prove)\nusing this:\n  card e = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}", "by (metis card_eq_SucD insertI1)"], ["proof (state)\nthis:\n  \\<exists>u v. u \\<noteq> v \\<and> e = {u, v}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Delta>_pos [simp]: \"E = {} \\<or> 0 < \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E = {} \\<or> 0 < \\<Delta>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>\n 2. \\<not> ?P \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "assume \"E = {}\""], ["proof (state)\nthis:\n  E = {}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>\n 2. \\<not> ?P \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "then"], ["proof (chain)\npicking this:\n  E = {}", "show \"E = {} \\<or> 0 < \\<Delta>\""], ["proof (prove)\nusing this:\n  E = {}\n\ngoal (1 subgoal):\n 1. E = {} \\<or> 0 < \\<Delta>", "by auto"], ["proof (state)\nthis:\n  E = {} \\<or> 0 < \\<Delta>\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "assume 1: \"E \\<noteq> {}\""], ["proof (state)\nthis:\n  E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "then"], ["proof (chain)\npicking this:\n  E \\<noteq> {}", "have \"V \\<noteq> {}\""], ["proof (prove)\nusing this:\n  E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. V \\<noteq> {}", "using edges2"], ["proof (prove)\nusing this:\n  E \\<noteq> {}\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n\ngoal (1 subgoal):\n 1. V \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  V \\<noteq> {}\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "moreover"], ["proof (state)\nthis:\n  V \\<noteq> {}\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "have \"finite {degree_vertex u |u. u \\<in> V}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {degree_vertex u |u. u \\<in> V}", "by (metis finite_V finite_imageI Setcompr_eq_image)"], ["proof (state)\nthis:\n  finite {degree_vertex u |u. u \\<in> V}\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "ultimately"], ["proof (chain)\npicking this:\n  V \\<noteq> {}\n  finite {degree_vertex u |u. u \\<in> V}", "have 2: \"\\<Delta> \\<in> {degree_vertex u |u. u \\<in> V}\""], ["proof (prove)\nusing this:\n  V \\<noteq> {}\n  finite {degree_vertex u |u. u \\<in> V}\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<in> {degree_vertex u |u. u \\<in> V}", "using Max_in"], ["proof (prove)\nusing this:\n  V \\<noteq> {}\n  finite {degree_vertex u |u. u \\<in> V}\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. \\<Delta> \\<in> {degree_vertex u |u. u \\<in> V}", "by auto"], ["proof (state)\nthis:\n  \\<Delta> \\<in> {degree_vertex u |u. u \\<in> V}\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "have \"\\<Delta> \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Delta> \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Delta> = 0 \\<Longrightarrow> False", "assume \"\\<Delta> = 0\""], ["proof (state)\nthis:\n  \\<Delta> = 0\n\ngoal (1 subgoal):\n 1. \\<Delta> = 0 \\<Longrightarrow> False", "with 2"], ["proof (chain)\npicking this:\n  \\<Delta> \\<in> {degree_vertex u |u. u \\<in> V}\n  \\<Delta> = 0", "obtain u where 3: \"u \\<in> V\" and 4: \"degree_vertex u = 0\""], ["proof (prove)\nusing this:\n  \\<Delta> \\<in> {degree_vertex u |u. u \\<in> V}\n  \\<Delta> = 0\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> V; degree_vertex u = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<in> V\n  degree_vertex u = 0\n\ngoal (1 subgoal):\n 1. \\<Delta> = 0 \\<Longrightarrow> False", "from 3"], ["proof (chain)\npicking this:\n  u \\<in> V", "obtain e where 5: \"e \\<in> E\" and \"u \\<in> e\""], ["proof (prove)\nusing this:\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> E; u \\<in> e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e \\<in> E\n  u \\<in> e\n\ngoal (1 subgoal):\n 1. \\<Delta> = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  e \\<in> E\n  u \\<in> e\n\ngoal (1 subgoal):\n 1. \\<Delta> = 0 \\<Longrightarrow> False", "with 4"], ["proof (chain)\npicking this:\n  degree_vertex u = 0\n  e \\<in> E\n  u \\<in> e", "have \"\\<forall>v. {u, v} \\<noteq> e\""], ["proof (prove)\nusing this:\n  degree_vertex u = 0\n  e \\<in> E\n  u \\<in> e\n\ngoal (1 subgoal):\n 1. \\<forall>v. {u, v} \\<noteq> e", "using finite_neighbors insert_absorb"], ["proof (prove)\nusing this:\n  degree_vertex u = 0\n  e \\<in> E\n  u \\<in> e\n  finite (neighbors ?u)\n  ?a \\<in> ?A \\<Longrightarrow> insert ?a ?A = ?A\n\ngoal (1 subgoal):\n 1. \\<forall>v. {u, v} \\<noteq> e", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>v. {u, v} \\<noteq> e\n\ngoal (1 subgoal):\n 1. \\<Delta> = 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  e \\<in> E\n  u \\<in> e\n  \\<forall>v. {u, v} \\<noteq> e", "show False"], ["proof (prove)\nusing this:\n  e \\<in> E\n  u \\<in> e\n  \\<forall>v. {u, v} \\<noteq> e\n\ngoal (1 subgoal):\n 1. False", "using edge_ex_vertices"], ["proof (prove)\nusing this:\n  e \\<in> E\n  u \\<in> e\n  \\<forall>v. {u, v} \\<noteq> e\n  ?e \\<in> E \\<Longrightarrow> \\<exists>u v. u \\<noteq> v \\<and> ?e = {u, v}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Delta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. E \\<noteq> {} \\<Longrightarrow> E = {} \\<or> 0 < \\<Delta>", "then"], ["proof (chain)\npicking this:\n  \\<Delta> \\<noteq> 0", "show \"E = {} \\<or> 0 < \\<Delta>\""], ["proof (prove)\nusing this:\n  \\<Delta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. E = {} \\<or> 0 < \\<Delta>", "by auto"], ["proof (state)\nthis:\n  E = {} \\<or> 0 < \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Delta>_max_degree: \"u \\<in> V \\<Longrightarrow> degree_vertex u \\<le> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> V \\<Longrightarrow> degree_vertex u \\<le> \\<Delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> V \\<Longrightarrow> degree_vertex u \\<le> \\<Delta>", "assume H: \"u \\<in> V\""], ["proof (state)\nthis:\n  u \\<in> V\n\ngoal (1 subgoal):\n 1. u \\<in> V \\<Longrightarrow> degree_vertex u \\<le> \\<Delta>", "have \"finite {degree_vertex u |u. u \\<in> V}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {degree_vertex u |u. u \\<in> V}", "by (metis finite_V finite_imageI Setcompr_eq_image)"], ["proof (state)\nthis:\n  finite {degree_vertex u |u. u \\<in> V}\n\ngoal (1 subgoal):\n 1. u \\<in> V \\<Longrightarrow> degree_vertex u \\<le> \\<Delta>", "with H"], ["proof (chain)\npicking this:\n  u \\<in> V\n  finite {degree_vertex u |u. u \\<in> V}", "show \"degree_vertex u \\<le> \\<Delta>\""], ["proof (prove)\nusing this:\n  u \\<in> V\n  finite {degree_vertex u |u. u \\<in> V}\n\ngoal (1 subgoal):\n 1. degree_vertex u \\<le> \\<Delta>", "using Max_ge"], ["proof (prove)\nusing this:\n  u \\<in> V\n  finite {degree_vertex u |u. u \\<in> V}\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?x \\<le> Max ?A\n\ngoal (1 subgoal):\n 1. degree_vertex u \\<le> \\<Delta>", "by auto"], ["proof (state)\nthis:\n  degree_vertex u \\<le> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Wei's algorithm: \\<open>(\\<Delta>+1)\\<close>-approximation\\<close>"], ["", "text \\<open>The 'functional' part of the invariant, used to prove that the algorithm produces an independent set of vertices.\\<close>"], ["", "definition inv_iv :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n\"inv_iv S X \\<longleftrightarrow> independent_vertices E S\n            \\<and> X \\<subseteq> V\n            \\<and> (\\<forall>v1 \\<in> (V - X). \\<forall>v2 \\<in> S. {v1, v2} \\<notin> E)\n            \\<and> S \\<subseteq> X\""], ["", "text \\<open>Strenghten the invariant with an approximation ratio \\<open>r\\<close>:\\<close>"], ["", "definition inv_approx :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> nat \\<Rightarrow> bool\" where\n\"inv_approx S X r \\<longleftrightarrow> inv_iv S X \\<and> card X \\<le> card S * r\""], ["", "text \\<open>Preservation of the functional invariant:\\<close>"], ["", "lemma inv_preserv:\n  fixes S :: \"'a set\"\n    and X :: \"'a set\"\n    and x :: \"'a\"\n  assumes inv: \"inv_iv S X\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have inv1: \"independent_vertices E S\"\n   and inv2: \"X \\<subseteq> V\"\n   and inv3: \"S \\<subseteq> X\"\n   and inv4: \"\\<forall>v1 v2. v1 \\<in> (V - X) \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (independent_vertices E S &&& X \\<subseteq> V) &&&\n    S \\<subseteq> X &&&\n    \\<forall>v1 v2.\n       v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow>\n       {v1, v2} \\<notin> E", "using inv"], ["proof (prove)\nusing this:\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. (independent_vertices E S &&& X \\<subseteq> V) &&&\n    S \\<subseteq> X &&&\n    \\<forall>v1 v2.\n       v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow>\n       {v1, v2} \\<notin> E", "unfolding inv_iv_def"], ["proof (prove)\nusing this:\n  independent_vertices E S \\<and>\n  X \\<subseteq> V \\<and>\n  (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n  S \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (independent_vertices E S &&& X \\<subseteq> V) &&&\n    S \\<subseteq> X &&&\n    \\<forall>v1 v2.\n       v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow>\n       {v1, v2} \\<notin> E", "by auto"], ["proof (state)\nthis:\n  independent_vertices E S\n  X \\<subseteq> V\n  S \\<subseteq> X\n  \\<forall>v1 v2.\n     v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have finite_S: \"finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S", "using inv1 and independent_vertices_finite"], ["proof (prove)\nusing this:\n  independent_vertices E S\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "by auto"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have S1: \"\\<forall>y \\<in> S. {x, y} \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>S. {x, y} \\<notin> E", "using inv4 and x_def"], ["proof (prove)\nusing this:\n  \\<forall>v1 v2.\n     v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>S. {x, y} \\<notin> E", "by blast"], ["proof (state)\nthis:\n  \\<forall>y\\<in>S. {x, y} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have S2: \"\\<forall>x \\<in> S. \\<forall>y \\<in> S. {x, y} \\<notin> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S. \\<forall>y\\<in>S. {x, y} \\<notin> E", "using inv1"], ["proof (prove)\nusing this:\n  independent_vertices E S\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S. \\<forall>y\\<in>S. {x, y} \\<notin> E", "unfolding independent_vertices_def"], ["proof (prove)\nusing this:\n  S \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S. \\<forall>y\\<in>S. {x, y} \\<notin> E", "by metis"], ["proof (state)\nthis:\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S. {x, y} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have S3: \"v1 \\<in> insert x S \\<Longrightarrow> v2 \\<in> insert x S \\<Longrightarrow> {v1, v2} \\<notin> E\" for v1 v2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> insert x S; v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> insert x S; v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "assume \"v1 \\<in> insert x S\" and \"v2 \\<in> insert x S\""], ["proof (state)\nthis:\n  v1 \\<in> insert x S\n  v2 \\<in> insert x S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> insert x S; v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 \\<in> insert x S\n  v2 \\<in> insert x S", "consider\n          (a) \"v1 = x\" and \"v2 = x\"\n        | (b) \"v1 = x\" and \"v2 \\<in> S\"\n        | (c) \"v1 \\<in> S\" and \"v2 = x\"\n        | (d) \"v1 \\<in> S\" and \"v2 \\<in> S\""], ["proof (prove)\nusing this:\n  v1 \\<in> insert x S\n  v2 \\<in> insert x S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>v1 = x; v2 = x\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>v1 = x; v2 = x\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> insert x S; v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<lbrakk>v1 = x; v2 = x\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"{v1, v2} \\<notin> E\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>v1 = x; v2 = x\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "proof cases"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>v1 = x; v2 = x\\<rbrakk> \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 3. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 4. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "case a"], ["proof (state)\nthis:\n  v1 = x\n  v2 = x\n\ngoal (4 subgoals):\n 1. \\<lbrakk>v1 = x; v2 = x\\<rbrakk> \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 3. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 4. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 = x\n  v2 = x", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = x\n  v2 = x\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "using edges2"], ["proof (prove)\nusing this:\n  v1 = x\n  v2 = x\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "by force"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal (3 subgoals):\n 1. \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 3. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 3. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "case b"], ["proof (state)\nthis:\n  v1 = x\n  v2 \\<in> S\n\ngoal (3 subgoals):\n 1. \\<lbrakk>v1 = x; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 3. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 = x\n  v2 \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = x\n  v2 \\<in> S\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "using S1"], ["proof (prove)\nusing this:\n  v1 = x\n  v2 \\<in> S\n  \\<forall>y\\<in>S. {x, y} \\<notin> E\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "by auto"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "case c"], ["proof (state)\nthis:\n  v1 \\<in> S\n  v2 = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v1 \\<in> S; v2 = x\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 \\<in> S\n  v2 = x", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 \\<in> S\n  v2 = x\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "using S1"], ["proof (prove)\nusing this:\n  v1 \\<in> S\n  v2 = x\n  \\<forall>y\\<in>S. {x, y} \\<notin> E\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "by (metis doubleton_eq_iff)"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "case d"], ["proof (state)\nthis:\n  v1 \\<in> S\n  v2 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> S; v2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 \\<in> S\n  v2 \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 \\<in> S\n  v2 \\<in> S\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "using S2"], ["proof (prove)\nusing this:\n  v1 \\<in> S\n  v2 \\<in> S\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S. {x, y} \\<notin> E\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "by auto"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?v1.0 \\<in> insert x S; ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "(* invariant conjunct 1 *)"], ["proof (state)\nthis:\n  \\<lbrakk>?v1.0 \\<in> insert x S; ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have \"independent_vertices E (insert x S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. independent_vertices E (insert x S)", "using S3 and inv1 and x_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v1.0 \\<in> insert x S; ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n  independent_vertices E S\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. independent_vertices E (insert x S)", "unfolding independent_vertices_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v1.0 \\<in> insert x S; ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n  S \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E)\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. insert x S \\<subseteq> \\<Union> E \\<and>\n    (\\<forall>v1 v2.\n        v1 \\<in> insert x S \\<and> v2 \\<in> insert x S \\<longrightarrow>\n        {v1, v2} \\<notin> E)", "by auto"], ["proof (state)\nthis:\n  independent_vertices E (insert x S)\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "(* invariant conjunct 2 *)"], ["proof (state)\nthis:\n  independent_vertices E (insert x S)\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "moreover"], ["proof (state)\nthis:\n  independent_vertices E (insert x S)\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have \"X \\<union> neighbors x \\<union> {x} \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<union> neighbors x \\<union> {x} \\<subseteq> V", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> X \\<union> neighbors x \\<union> {x} \\<Longrightarrow>\n       xa \\<in> V", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> X \\<union> neighbors x \\<union> {x} \\<Longrightarrow>\n       xa \\<in> V", "assume \"xa \\<in> X \\<union> neighbors x \\<union> {x}\""], ["proof (state)\nthis:\n  xa \\<in> X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> X \\<union> neighbors x \\<union> {x} \\<Longrightarrow>\n       xa \\<in> V", "then"], ["proof (chain)\npicking this:\n  xa \\<in> X \\<union> neighbors x \\<union> {x}", "consider (a) \"xa \\<in> X\" | (b) \"xa \\<in> neighbors x\" | (c) \"xa = x\""], ["proof (prove)\nusing this:\n  xa \\<in> X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<in> X \\<Longrightarrow> thesis;\n     xa \\<in> neighbors x \\<Longrightarrow> thesis;\n     xa = x \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>xa \\<in> X \\<Longrightarrow> ?thesis;\n   xa \\<in> neighbors x \\<Longrightarrow> ?thesis;\n   xa = x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> X \\<union> neighbors x \\<union> {x} \\<Longrightarrow>\n       xa \\<in> V", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>xa \\<in> X \\<Longrightarrow> ?thesis;\n   xa \\<in> neighbors x \\<Longrightarrow> ?thesis;\n   xa = x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"xa \\<in> V\""], ["proof (prove)\nusing this:\n  \\<lbrakk>xa \\<in> X \\<Longrightarrow> ?thesis;\n   xa \\<in> neighbors x \\<Longrightarrow> ?thesis;\n   xa = x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. xa \\<in> V", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. xa \\<in> X \\<Longrightarrow> xa \\<in> V\n 2. xa \\<in> neighbors x \\<Longrightarrow> xa \\<in> V\n 3. xa = x \\<Longrightarrow> xa \\<in> V", "case a"], ["proof (state)\nthis:\n  xa \\<in> X\n\ngoal (3 subgoals):\n 1. xa \\<in> X \\<Longrightarrow> xa \\<in> V\n 2. xa \\<in> neighbors x \\<Longrightarrow> xa \\<in> V\n 3. xa = x \\<Longrightarrow> xa \\<in> V", "then"], ["proof (chain)\npicking this:\n  xa \\<in> X", "show ?thesis"], ["proof (prove)\nusing this:\n  xa \\<in> X\n\ngoal (1 subgoal):\n 1. xa \\<in> V", "using inv2"], ["proof (prove)\nusing this:\n  xa \\<in> X\n  X \\<subseteq> V\n\ngoal (1 subgoal):\n 1. xa \\<in> V", "by blast"], ["proof (state)\nthis:\n  xa \\<in> V\n\ngoal (2 subgoals):\n 1. xa \\<in> neighbors x \\<Longrightarrow> xa \\<in> V\n 2. xa = x \\<Longrightarrow> xa \\<in> V", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. xa \\<in> neighbors x \\<Longrightarrow> xa \\<in> V\n 2. xa = x \\<Longrightarrow> xa \\<in> V", "case b"], ["proof (state)\nthis:\n  xa \\<in> neighbors x\n\ngoal (2 subgoals):\n 1. xa \\<in> neighbors x \\<Longrightarrow> xa \\<in> V\n 2. xa = x \\<Longrightarrow> xa \\<in> V", "then"], ["proof (chain)\npicking this:\n  xa \\<in> neighbors x", "show ?thesis"], ["proof (prove)\nusing this:\n  xa \\<in> neighbors x\n\ngoal (1 subgoal):\n 1. xa \\<in> V", "by auto"], ["proof (state)\nthis:\n  xa \\<in> V\n\ngoal (1 subgoal):\n 1. xa = x \\<Longrightarrow> xa \\<in> V", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xa = x \\<Longrightarrow> xa \\<in> V", "case c"], ["proof (state)\nthis:\n  xa = x\n\ngoal (1 subgoal):\n 1. xa = x \\<Longrightarrow> xa \\<in> V", "then"], ["proof (chain)\npicking this:\n  xa = x", "show ?thesis"], ["proof (prove)\nusing this:\n  xa = x\n\ngoal (1 subgoal):\n 1. xa \\<in> V", "using x_def"], ["proof (prove)\nusing this:\n  xa = x\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. xa \\<in> V", "by blast"], ["proof (state)\nthis:\n  xa \\<in> V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xa \\<in> V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X \\<union> neighbors x \\<union> {x} \\<subseteq> V\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "(* invariant conjunct 3 *)"], ["proof (state)\nthis:\n  X \\<union> neighbors x \\<union> {x} \\<subseteq> V\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "moreover"], ["proof (state)\nthis:\n  X \\<union> neighbors x \\<union> {x} \\<subseteq> V\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have \"insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}", "using inv3"], ["proof (prove)\nusing this:\n  S \\<subseteq> X\n\ngoal (1 subgoal):\n 1. insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "(* invariant conjunct 4 *)"], ["proof (state)\nthis:\n  insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "moreover"], ["proof (state)\nthis:\n  insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "have \"v1 \\<in> V - (X \\<union> neighbors x \\<union> {x}) \\<Longrightarrow> v2 \\<in> insert x S \\<Longrightarrow> {v1, v2} \\<notin> E\" for v1 v2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n     v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n     v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "assume H: \"v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\" and \"v2 \\<in> insert x S\""], ["proof (state)\nthis:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\n  v2 \\<in> insert x S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n     v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\n  v2 \\<in> insert x S", "consider (a) \"v2 = x\" | (b) \"v2 \\<in> S\""], ["proof (prove)\nusing this:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\n  v2 \\<in> insert x S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v2 = x \\<Longrightarrow> thesis;\n     v2 \\<in> S \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>v2 = x \\<Longrightarrow> ?thesis;\n   v2 \\<in> S \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n     v2 \\<in> insert x S\\<rbrakk>\n    \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>v2 = x \\<Longrightarrow> ?thesis;\n   v2 \\<in> S \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"{v1, v2} \\<notin> E\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v2 = x \\<Longrightarrow> ?thesis;\n   v2 \\<in> S \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. v2 = x \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "case a"], ["proof (state)\nthis:\n  v2 = x\n\ngoal (2 subgoals):\n 1. v2 = x \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "with H"], ["proof (chain)\npicking this:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\n  v2 = x", "have \"v1 \\<notin> neighbors v2\""], ["proof (prove)\nusing this:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\n  v2 = x\n\ngoal (1 subgoal):\n 1. v1 \\<notin> neighbors v2", "by blast"], ["proof (state)\nthis:\n  v1 \\<notin> neighbors v2\n\ngoal (2 subgoals):\n 1. v2 = x \\<Longrightarrow> {v1, v2} \\<notin> E\n 2. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "then"], ["proof (chain)\npicking this:\n  v1 \\<notin> neighbors v2", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 \\<notin> neighbors v2\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "by auto"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal (1 subgoal):\n 1. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "case b"], ["proof (state)\nthis:\n  v2 \\<in> S\n\ngoal (1 subgoal):\n 1. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "from H"], ["proof (chain)\npicking this:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})", "have \"v1 \\<in> V - X\""], ["proof (prove)\nusing this:\n  v1 \\<in> V - (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. v1 \\<in> V - X", "by blast"], ["proof (state)\nthis:\n  v1 \\<in> V - X\n\ngoal (1 subgoal):\n 1. v2 \\<in> S \\<Longrightarrow> {v1, v2} \\<notin> E", "with b and inv4"], ["proof (chain)\npicking this:\n  v2 \\<in> S\n  \\<forall>v1 v2.\n     v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E\n  v1 \\<in> V - X", "show ?thesis"], ["proof (prove)\nusing this:\n  v2 \\<in> S\n  \\<forall>v1 v2.\n     v1 \\<in> V - X \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E\n  v1 \\<in> V - X\n\ngoal (1 subgoal):\n 1. {v1, v2} \\<notin> E", "by blast"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {v1, v2} \\<notin> E\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?v1.0 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n   ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "(* conclusion *)"], ["proof (state)\nthis:\n  \\<lbrakk>?v1.0 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n   ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "ultimately"], ["proof (chain)\npicking this:\n  independent_vertices E (insert x S)\n  X \\<union> neighbors x \\<union> {x} \\<subseteq> V\n  insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\n  \\<lbrakk>?v1.0 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n   ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E", "show \"inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\""], ["proof (prove)\nusing this:\n  independent_vertices E (insert x S)\n  X \\<union> neighbors x \\<union> {x} \\<subseteq> V\n  insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\n  \\<lbrakk>?v1.0 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n   ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "unfolding inv_iv_def"], ["proof (prove)\nusing this:\n  independent_vertices E (insert x S)\n  X \\<union> neighbors x \\<union> {x} \\<subseteq> V\n  insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}\n  \\<lbrakk>?v1.0 \\<in> V - (X \\<union> neighbors x \\<union> {x});\n   ?v2.0 \\<in> insert x S\\<rbrakk>\n  \\<Longrightarrow> {?v1.0, ?v2.0} \\<notin> E\n\ngoal (1 subgoal):\n 1. independent_vertices E (insert x S) \\<and>\n    X \\<union> neighbors x \\<union> {x} \\<subseteq> V \\<and>\n    (\\<forall>v1\\<in>V - (X \\<union> neighbors x \\<union> {x}).\n        \\<forall>v2\\<in>insert x S. {v1, v2} \\<notin> E) \\<and>\n    insert x S \\<subseteq> X \\<union> neighbors x \\<union> {x}", "by blast"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_approx_preserv:\n  assumes inv: \"inv_approx S X (\\<Delta> + 1)\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x}) (\\<Delta> + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "have finite_S: \"finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S", "using inv and independent_vertices_finite"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1)\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   X \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> X) \\<and>\n  card X \\<le> card S * (\\<Delta> + 1)\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "by auto"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "have Sx: \"x \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S", "using inv and x_def"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1)\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   X \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> X) \\<and>\n  card X \\<le> card S * (\\<Delta> + 1)\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "by blast"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "(* main invariant is preserved *)"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "from inv"], ["proof (chain)\npicking this:\n  inv_approx S X (\\<Delta> + 1)", "have \"inv_iv S X\""], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_iv S X", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and> card X \\<le> card S * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_iv S X", "by auto"], ["proof (state)\nthis:\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "with x_def"], ["proof (chain)\npicking this:\n  x \\<in> V - X\n  inv_iv S X", "have \"inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\""], ["proof (prove)\nusing this:\n  x \\<in> V - X\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "proof (intro inv_preserv, auto)"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "(* the approximation ratio is preserved (at most \\<Delta>+1 vertices are removed in any iteration) *)"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "moreover"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "have \"card (X \\<union> neighbors x \\<union> {x}) \\<le> card (insert x S) * (\\<Delta> + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "have \"degree_vertex x \\<le> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree_vertex x \\<le> \\<Delta>", "using \\<Delta>_max_degree and x_def"], ["proof (prove)\nusing this:\n  ?u \\<in> V \\<Longrightarrow> degree_vertex ?u \\<le> \\<Delta>\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. degree_vertex x \\<le> \\<Delta>", "by auto"], ["proof (state)\nthis:\n  degree_vertex x \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "then"], ["proof (chain)\npicking this:\n  degree_vertex x \\<le> \\<Delta>", "have \"card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1\""], ["proof (prove)\nusing this:\n  degree_vertex x \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1", "using card_Un_le [of \"neighbors x\" \"{x}\"]"], ["proof (prove)\nusing this:\n  degree_vertex x \\<le> \\<Delta>\n  card (neighbors x \\<union> {x}) \\<le> card (neighbors x) + card {x}\n\ngoal (1 subgoal):\n 1. card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1", "by auto"], ["proof (state)\nthis:\n  card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "then"], ["proof (chain)\npicking this:\n  card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1", "have \"card (X \\<union> neighbors x \\<union> {x}) \\<le> card X + \\<Delta> + 1\""], ["proof (prove)\nusing this:\n  card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x}) \\<le> card X + \\<Delta> + 1", "using card_Un_le [of X \"neighbors x \\<union> {x}\"]"], ["proof (prove)\nusing this:\n  card (neighbors x \\<union> {x}) \\<le> \\<Delta> + 1\n  card (X \\<union> (neighbors x \\<union> {x}))\n  \\<le> card X + card (neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x}) \\<le> card X + \\<Delta> + 1", "by auto"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x}) \\<le> card X + \\<Delta> + 1\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "also"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x}) \\<le> card X + \\<Delta> + 1\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "have \"... \\<le> card S * (\\<Delta> + 1) + \\<Delta> + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X + \\<Delta> + 1 \\<le> card S * (\\<Delta> + 1) + \\<Delta> + 1", "using inv"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. card X + \\<Delta> + 1 \\<le> card S * (\\<Delta> + 1) + \\<Delta> + 1", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and> card X \\<le> card S * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. card X + \\<Delta> + 1 \\<le> card S * (\\<Delta> + 1) + \\<Delta> + 1", "by auto"], ["proof (state)\nthis:\n  card X + \\<Delta> + 1 \\<le> card S * (\\<Delta> + 1) + \\<Delta> + 1\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "also"], ["proof (state)\nthis:\n  card X + \\<Delta> + 1 \\<le> card S * (\\<Delta> + 1) + \\<Delta> + 1\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "have \"... = card (insert x S) * (\\<Delta> + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card S * (\\<Delta> + 1) + \\<Delta> + 1 =\n    card (insert x S) * (\\<Delta> + 1)", "using finite_S and Sx"], ["proof (prove)\nusing this:\n  finite S\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. card S * (\\<Delta> + 1) + \\<Delta> + 1 =\n    card (insert x S) * (\\<Delta> + 1)", "by auto"], ["proof (state)\nthis:\n  card S * (\\<Delta> + 1) + \\<Delta> + 1 =\n  card (insert x S) * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "finally"], ["proof (chain)\npicking this:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "."], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "(* conclusion *)"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "ultimately"], ["proof (chain)\npicking this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)", "show \"inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x}) (\\<Delta> + 1)\""], ["proof (prove)\nusing this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (\\<Delta> + 1)", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x}) \\<and>\n    card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * (\\<Delta> + 1)", "by auto"], ["proof (state)\nthis:\n  inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n   (\\<Delta> + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* the antecedent combines inv_approx (for an arbitrary ratio r) and the negated post-condition *)"], ["", "lemma inv_approx: \"independent_vertices E S \\<Longrightarrow> card V \\<le> card S * r \\<Longrightarrow> approximation_miv r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>independent_vertices E S; card V \\<le> card S * r\\<rbrakk>\n    \\<Longrightarrow> approximation_miv r S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>independent_vertices E S; card V \\<le> card S * r\\<rbrakk>\n    \\<Longrightarrow> approximation_miv r S", "assume 1: \"independent_vertices E S\" and 2: \"card V \\<le> card S * r\""], ["proof (state)\nthis:\n  independent_vertices E S\n  card V \\<le> card S * r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>independent_vertices E S; card V \\<le> card S * r\\<rbrakk>\n    \\<Longrightarrow> approximation_miv r S", "have \"independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r\" for S'"], ["proof (prove)\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "assume  \"independent_vertices E S'\""], ["proof (state)\nthis:\n  independent_vertices E S'\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "then"], ["proof (chain)\npicking this:\n  independent_vertices E S'", "have \"S' \\<subseteq> V\""], ["proof (prove)\nusing this:\n  independent_vertices E S'\n\ngoal (1 subgoal):\n 1. S' \\<subseteq> V", "unfolding independent_vertices_def"], ["proof (prove)\nusing this:\n  S' \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S' \\<and> v2 \\<in> S' \\<longrightarrow> {v1, v2} \\<notin> E)\n\ngoal (1 subgoal):\n 1. S' \\<subseteq> V", "by auto"], ["proof (state)\nthis:\n  S' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "then"], ["proof (chain)\npicking this:\n  S' \\<subseteq> V", "have \"card S' \\<le> card V\""], ["proof (prove)\nusing this:\n  S' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. card S' \\<le> card V", "using finite_V and card_mono"], ["proof (prove)\nusing this:\n  S' \\<subseteq> V\n  finite V\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n\ngoal (1 subgoal):\n 1. card S' \\<le> card V", "by auto"], ["proof (state)\nthis:\n  card S' \\<le> card V\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "also"], ["proof (state)\nthis:\n  card S' \\<le> card V\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "have \"... \\<le> card S * r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card V \\<le> card S * r", "using 2"], ["proof (prove)\nusing this:\n  card V \\<le> card S * r\n\ngoal (1 subgoal):\n 1. card V \\<le> card S * r", "by auto"], ["proof (state)\nthis:\n  card V \\<le> card S * r\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * r", "finally"], ["proof (chain)\npicking this:\n  card S' \\<le> card S * r", "show \"card S' \\<le> card S * r\""], ["proof (prove)\nusing this:\n  card S' \\<le> card S * r\n\ngoal (1 subgoal):\n 1. card S' \\<le> card S * r", "."], ["proof (state)\nthis:\n  card S' \\<le> card S * r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  independent_vertices E ?S' \\<Longrightarrow> card ?S' \\<le> card S * r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>independent_vertices E S; card V \\<le> card S * r\\<rbrakk>\n    \\<Longrightarrow> approximation_miv r S", "with 1"], ["proof (chain)\npicking this:\n  independent_vertices E S\n  independent_vertices E ?S' \\<Longrightarrow> card ?S' \\<le> card S * r", "show \"approximation_miv r S\""], ["proof (prove)\nusing this:\n  independent_vertices E S\n  independent_vertices E ?S' \\<Longrightarrow> card ?S' \\<le> card S * r\n\ngoal (1 subgoal):\n 1. approximation_miv r S", "unfolding approximation_miv_def"], ["proof (prove)\nusing this:\n  independent_vertices E S\n  independent_vertices E ?S' \\<Longrightarrow> card ?S' \\<le> card S * r\n\ngoal (1 subgoal):\n 1. independent_vertices E S \\<and>\n    (\\<forall>S'.\n        independent_vertices E S' \\<longrightarrow>\n        card S' \\<le> card S * r)", "by auto"], ["proof (state)\nthis:\n  approximation_miv r S\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wei_approx_\\<Delta>_plus_1:\n\"VARS (S :: 'a set) (X :: 'a set) (x :: 'a)\n  { True }\n  S := {};\n  X := {};\n  WHILE X \\<noteq> V\n  INV { inv_approx S X (\\<Delta> + 1) }\n  DO x := (SOME x. x \\<in> V - X);\n     S := insert x S;\n     X := X \\<union> neighbors x \\<union> {x}\n  OD\n  { approximation_miv (\\<Delta> + 1) S }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {True} \n     S := {};\n     X := {};\n     WHILE X \\<noteq> V INV {inv_approx S X (\\<Delta> + 1)} \n      VAR {\\<lambda>(S, X, x). 0} \n      DO x := (SOME x. x \\<in> V - X);\n         S := insert x S; X := X \\<union> neighbors x \\<union> {x} \n      OD \n     {approximation_miv (\\<Delta> + 1) S}", "proof (vcg, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> inv_approx {} {} (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 3. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "case (1 S X x)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> inv_approx {} {} (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 3. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "(* invariant initially true *)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> inv_approx {} {} (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 3. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "then"], ["proof (chain)\npicking this:\n  True", "show ?case"], ["proof (prove)\nusing this:\n  True\n\ngoal (1 subgoal):\n 1. inv_approx {} {} (\\<Delta> + 1)", "unfolding inv_approx_def inv_iv_def independent_vertices_def"], ["proof (prove)\nusing this:\n  True\n\ngoal (1 subgoal):\n 1. (({} \\<subseteq> \\<Union> E \\<and>\n      (\\<forall>v1 v2.\n          v1 \\<in> {} \\<and> v2 \\<in> {} \\<longrightarrow>\n          {v1, v2} \\<notin> E)) \\<and>\n     {} \\<subseteq> V \\<and>\n     (\\<forall>v1\\<in>V - {}.\n         \\<forall>v2\\<in>{}. {v1, v2} \\<notin> E) \\<and>\n     {} \\<subseteq> {}) \\<and>\n    card {} \\<le> card {} * (\\<Delta> + 1)", "by auto"], ["proof (state)\nthis:\n  inv_approx {} {} (\\<Delta> + 1)\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "case (2 S X x)"], ["proof (state)\nthis:\n  inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "(* invariant preserved by loop *)\n  (* definedness of assignment *)"], ["proof (state)\nthis:\n  inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "let ?x = \"(SOME x. x \\<in> V - X)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "have \"V - X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "using 2"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  ((independent_vertices E S \\<and>\n    X \\<subseteq> V \\<and>\n    (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n    S \\<subseteq> X) \\<and>\n   card X \\<le> card S * (\\<Delta> + 1)) \\<and>\n  X \\<noteq> V\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  V - X \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "then"], ["proof (chain)\npicking this:\n  V - X \\<noteq> {}", "have \"?x \\<in> V - X\""], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> V - X) \\<in> V - X", "using some_in_eq"], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n  ((SOME x. x \\<in> ?A) \\<in> ?A) = (?A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> V - X) \\<in> V - X", "by metis"], ["proof (state)\nthis:\n  (SOME x. x \\<in> V - X) \\<in> V - X\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx (insert (SOME x. x \\<in> V - X) S)\n        (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n         {SOME x. x \\<in> V - X})\n        (\\<Delta> + 1)\n 2. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "with 2"], ["proof (chain)\npicking this:\n  inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V\n  (SOME x. x \\<in> V - X) \\<in> V - X", "show ?case"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V\n  (SOME x. x \\<in> V - X) \\<in> V - X\n\ngoal (1 subgoal):\n 1. inv_approx (insert (SOME x. x \\<in> V - X) S)\n     (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n      {SOME x. x \\<in> V - X})\n     (\\<Delta> + 1)", "using inv_approx_preserv"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1) \\<and> X \\<noteq> V\n  (SOME x. x \\<in> V - X) \\<in> V - X\n  \\<lbrakk>inv_approx ?S ?X (\\<Delta> + 1); ?x \\<in> V - ?X\\<rbrakk>\n  \\<Longrightarrow> inv_approx (insert ?x ?S)\n                     (?X \\<union> neighbors ?x \\<union> {?x}) (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. inv_approx (insert (SOME x. x \\<in> V - X) S)\n     (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n      {SOME x. x \\<in> V - X})\n     (\\<Delta> + 1)", "by auto"], ["proof (state)\nthis:\n  inv_approx (insert (SOME x. x \\<in> V - X) S)\n   (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n    {SOME x. x \\<in> V - X})\n   (\\<Delta> + 1)\n\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "case (3 S X x)"], ["proof (state)\nthis:\n  inv_approx S X (\\<Delta> + 1) \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "(* invariant implies post-condition *)"], ["proof (state)\nthis:\n  inv_approx S X (\\<Delta> + 1) \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       inv_approx S X (\\<Delta> + 1) \\<and>\n       \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv (\\<Delta> + 1) S", "then"], ["proof (chain)\npicking this:\n  inv_approx S X (\\<Delta> + 1) \\<and> \\<not> X \\<noteq> V", "show ?case"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1) \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. approximation_miv (\\<Delta> + 1) S", "using inv_approx"], ["proof (prove)\nusing this:\n  inv_approx S X (\\<Delta> + 1) \\<and> \\<not> X \\<noteq> V\n  \\<lbrakk>independent_vertices E ?S; card V \\<le> card ?S * ?r\\<rbrakk>\n  \\<Longrightarrow> approximation_miv ?r ?S\n\ngoal (1 subgoal):\n 1. approximation_miv (\\<Delta> + 1) S", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  ((independent_vertices E S \\<and>\n    X \\<subseteq> V \\<and>\n    (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n    S \\<subseteq> X) \\<and>\n   card X \\<le> card S * (\\<Delta> + 1)) \\<and>\n  \\<not> X \\<noteq> V\n  \\<lbrakk>independent_vertices E ?S; card V \\<le> card ?S * ?r\\<rbrakk>\n  \\<Longrightarrow> approximation_miv ?r ?S\n\ngoal (1 subgoal):\n 1. approximation_miv (\\<Delta> + 1) S", "by auto"], ["proof (state)\nthis:\n  approximation_miv (\\<Delta> + 1) S\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Wei's algorithm: \\<open>\\<Delta>\\<close>-approximation\\<close>"], ["", "text \\<open>The previous approximation uses very little information about the optimal solution (it has at most as many vertices as the set itself). With some extra effort we can improve the ratio to \\<open>\\<Delta>\\<close> instead of \\<open>\\<Delta>+1\\<close>. In order to do that we must show that among the vertices removed in each iteration, at most \\<open>\\<Delta>\\<close> could belong to an optimal solution. This requires carrying around a set \\<open>P\\<close> (via a ghost variable) which records the vertices deleted in each iteration.\\<close>"], ["", "definition inv_partition :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> 'a set set \\<Rightarrow> bool\" where\n\"inv_partition S X P \\<longleftrightarrow> inv_iv S X\n                     \\<and> \\<Union>P = X\n                     \\<and> (\\<forall>p \\<in> P. \\<exists>s \\<in> V. p = {s} \\<union> neighbors s)\n                     \\<and> card P = card S\n                     \\<and> finite P\""], ["", "lemma inv_partition_preserv:\n  assumes inv: \"inv_partition S X P\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x}) (insert ({x} \\<union> neighbors x) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "have finite_S: \"finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S", "using inv and independent_vertices_finite"], ["proof (prove)\nusing this:\n  inv_partition S X P\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "unfolding inv_partition_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   X \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> X) \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "by auto"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "have Sx: \"x \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S", "using inv and x_def"], ["proof (prove)\nusing this:\n  inv_partition S X P\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "unfolding inv_partition_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   X \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> X) \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "by blast"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "(* main invariant is preserved *)"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "from inv"], ["proof (chain)\npicking this:\n  inv_partition S X P", "have \"inv_iv S X\""], ["proof (prove)\nusing this:\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. inv_iv S X", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. inv_iv S X", "by auto"], ["proof (state)\nthis:\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "with x_def"], ["proof (chain)\npicking this:\n  x \\<in> V - X\n  inv_iv S X", "have \"inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\""], ["proof (prove)\nusing this:\n  x \\<in> V - X\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "proof (intro inv_preserv, auto)"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "(* conjunct 1 *)"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "moreover"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "have \"\\<Union>(insert ({x} \\<union> neighbors x) P) = X \\<union> neighbors x \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (insert ({x} \\<union> neighbors x) P) =\n    X \\<union> neighbors x \\<union> {x}", "using inv"], ["proof (prove)\nusing this:\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. \\<Union> (insert ({x} \\<union> neighbors x) P) =\n    X \\<union> neighbors x \\<union> {x}", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. \\<Union> (insert ({x} \\<union> neighbors x) P) =\n    X \\<union> neighbors x \\<union> {x}", "by auto"], ["proof (state)\nthis:\n  \\<Union> (insert ({x} \\<union> neighbors x) P) =\n  X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "(* conjunct 2 *)"], ["proof (state)\nthis:\n  \\<Union> (insert ({x} \\<union> neighbors x) P) =\n  X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "moreover"], ["proof (state)\nthis:\n  \\<Union> (insert ({x} \\<union> neighbors x) P) =\n  X \\<union> neighbors x \\<union> {x}\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "have \"(\\<forall>p\\<in>insert ({x} \\<union> neighbors x) P. \\<exists>s \\<in> V. p = {s} \\<union> neighbors s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n       \\<exists>s\\<in>V. p = {s} \\<union> neighbors s", "using inv and x_def"], ["proof (prove)\nusing this:\n  inv_partition S X P\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n       \\<exists>s\\<in>V. p = {s} \\<union> neighbors s", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n       \\<exists>s\\<in>V. p = {s} \\<union> neighbors s", "by auto"], ["proof (state)\nthis:\n  \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n     \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "(* conjunct 3 *)"], ["proof (state)\nthis:\n  \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n     \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "moreover"], ["proof (state)\nthis:\n  \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n     \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "have \"card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "from x_def and inv"], ["proof (chain)\npicking this:\n  x \\<in> V - X\n  inv_partition S X P", "have \"x \\<notin> \\<Union>P\""], ["proof (prove)\nusing this:\n  x \\<in> V - X\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<Union> P", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  x \\<in> V - X\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<Union> P", "by auto"], ["proof (state)\nthis:\n  x \\<notin> \\<Union> P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "then"], ["proof (chain)\npicking this:\n  x \\<notin> \\<Union> P", "have \"{x} \\<union> neighbors x \\<notin> P\""], ["proof (prove)\nusing this:\n  x \\<notin> \\<Union> P\n\ngoal (1 subgoal):\n 1. {x} \\<union> neighbors x \\<notin> P", "by auto"], ["proof (state)\nthis:\n  {x} \\<union> neighbors x \\<notin> P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "then"], ["proof (chain)\npicking this:\n  {x} \\<union> neighbors x \\<notin> P", "have \"card (insert ({x} \\<union> neighbors x) P) = card P + 1\""], ["proof (prove)\nusing this:\n  {x} \\<union> neighbors x \\<notin> P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card P + 1", "using inv"], ["proof (prove)\nusing this:\n  {x} \\<union> neighbors x \\<notin> P\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card P + 1", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  {x} \\<union> neighbors x \\<notin> P\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card P + 1", "by auto"], ["proof (state)\nthis:\n  card (insert ({x} \\<union> neighbors x) P) = card P + 1\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "moreover"], ["proof (state)\nthis:\n  card (insert ({x} \\<union> neighbors x) P) = card P + 1\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "have \"card (insert x S) = card S + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert x S) = card S + 1", "using Sx and finite_S"], ["proof (prove)\nusing this:\n  x \\<notin> S\n  finite S\n\ngoal (1 subgoal):\n 1. card (insert x S) = card S + 1", "by auto"], ["proof (state)\nthis:\n  card (insert x S) = card S + 1\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "ultimately"], ["proof (chain)\npicking this:\n  card (insert ({x} \\<union> neighbors x) P) = card P + 1\n  card (insert x S) = card S + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  card (insert ({x} \\<union> neighbors x) P) = card P + 1\n  card (insert x S) = card S + 1\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "using inv"], ["proof (prove)\nusing this:\n  card (insert ({x} \\<union> neighbors x) P) = card P + 1\n  card (insert x S) = card S + 1\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  card (insert ({x} \\<union> neighbors x) P) = card P + 1\n  card (insert x S) = card S + 1\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. card (insert ({x} \\<union> neighbors x) P) = card (insert x S)", "by auto"], ["proof (state)\nthis:\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "(* conjunct 4 *)"], ["proof (state)\nthis:\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "moreover"], ["proof (state)\nthis:\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "have \"finite (insert ({x} \\<union> neighbors x) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (insert ({x} \\<union> neighbors x) P)", "using inv"], ["proof (prove)\nusing this:\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. finite (insert ({x} \\<union> neighbors x) P)", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. finite (insert ({x} \\<union> neighbors x) P)", "by auto"], ["proof (state)\nthis:\n  finite (insert ({x} \\<union> neighbors x) P)\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "(* conclusion *)"], ["proof (state)\nthis:\n  finite (insert ({x} \\<union> neighbors x) P)\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "ultimately"], ["proof (chain)\npicking this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  \\<Union> (insert ({x} \\<union> neighbors x) P) =\n  X \\<union> neighbors x \\<union> {x}\n  \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n     \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n  finite (insert ({x} \\<union> neighbors x) P)", "show \"inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x}) (insert ({x} \\<union> neighbors x) P)\""], ["proof (prove)\nusing this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  \\<Union> (insert ({x} \\<union> neighbors x) P) =\n  X \\<union> neighbors x \\<union> {x}\n  \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n     \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n  finite (insert ({x} \\<union> neighbors x) P)\n\ngoal (1 subgoal):\n 1. inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (insert ({x} \\<union> neighbors x) P)", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  \\<Union> (insert ({x} \\<union> neighbors x) P) =\n  X \\<union> neighbors x \\<union> {x}\n  \\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n     \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n  card (insert ({x} \\<union> neighbors x) P) = card (insert x S)\n  finite (insert ({x} \\<union> neighbors x) P)\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x}) \\<and>\n    \\<Union> (insert ({x} \\<union> neighbors x) P) =\n    X \\<union> neighbors x \\<union> {x} \\<and>\n    (\\<forall>p\\<in>insert ({x} \\<union> neighbors x) P.\n        \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n    card (insert ({x} \\<union> neighbors x) P) = card (insert x S) \\<and>\n    finite (insert ({x} \\<union> neighbors x) P)", "by auto"], ["proof (state)\nthis:\n  inv_partition (insert x S) (X \\<union> neighbors x \\<union> {x})\n   (insert ({x} \\<union> neighbors x) P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_Union_le_sum_card:\n  fixes U :: \"'a set set\"\n  assumes \"\\<forall>u \\<in> U. finite u\"\n  shows \"card (\\<Union>U) \\<le> sum card U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<Union> U) \\<le> sum card U", "proof (cases \"finite U\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U\n 2. infinite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U", "case False"], ["proof (state)\nthis:\n  infinite U\n\ngoal (2 subgoals):\n 1. finite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U\n 2. infinite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U", "then"], ["proof (chain)\npicking this:\n  infinite U", "show \"card (\\<Union>U) \\<le> sum card U\""], ["proof (prove)\nusing this:\n  infinite U\n\ngoal (1 subgoal):\n 1. card (\\<Union> U) \\<le> sum card U", "using card_eq_0_iff finite_UnionD"], ["proof (prove)\nusing this:\n  infinite U\n  (card ?A = 0) = (?A = {} \\<or> infinite ?A)\n  finite (\\<Union> ?A) \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. card (\\<Union> U) \\<le> sum card U", "by auto"], ["proof (state)\nthis:\n  card (\\<Union> U) \\<le> sum card U\n\ngoal (1 subgoal):\n 1. finite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U", "case True"], ["proof (state)\nthis:\n  finite U\n\ngoal (1 subgoal):\n 1. finite U \\<Longrightarrow> card (\\<Union> U) \\<le> sum card U", "then"], ["proof (chain)\npicking this:\n  finite U", "show \"card (\\<Union>U) \\<le> sum card U\""], ["proof (prove)\nusing this:\n  finite U\n\ngoal (1 subgoal):\n 1. card (\\<Union> U) \\<le> sum card U", "proof (induct U rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. card (\\<Union> {}) \\<le> sum card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. card (\\<Union> {}) \\<le> sum card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<Union> {}) \\<le> sum card {}", "by auto"], ["proof (state)\nthis:\n  card (\\<Union> {}) \\<le> sum card {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  card (\\<Union> F) \\<le> sum card F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  card (\\<Union> F) \\<le> sum card F", "have \"card(\\<Union>(insert x F)) \\<le> card(x) + card (\\<Union>F)\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  card (\\<Union> F) \\<le> sum card F\n\ngoal (1 subgoal):\n 1. card (\\<Union> (insert x F)) \\<le> card x + card (\\<Union> F)", "using card_Un_le"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  card (\\<Union> F) \\<le> sum card F\n  card (?A \\<union> ?B) \\<le> card ?A + card ?B\n\ngoal (1 subgoal):\n 1. card (\\<Union> (insert x F)) \\<le> card x + card (\\<Union> F)", "by auto"], ["proof (state)\nthis:\n  card (\\<Union> (insert x F)) \\<le> card x + card (\\<Union> F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "also"], ["proof (state)\nthis:\n  card (\\<Union> (insert x F)) \\<le> card x + card (\\<Union> F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "have \"... \\<le> card(x) + sum card F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card x + card (\\<Union> F) \\<le> card x + sum card F", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  card (\\<Union> F) \\<le> sum card F\n\ngoal (1 subgoal):\n 1. card x + card (\\<Union> F) \\<le> card x + sum card F", "by auto"], ["proof (state)\nthis:\n  card x + card (\\<Union> F) \\<le> card x + sum card F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "also"], ["proof (state)\nthis:\n  card x + card (\\<Union> F) \\<le> card x + sum card F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "have \"... = sum card (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card x + sum card F = sum card (insert x F)", "using sum.insert_if and insert.hyps"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow>\n  sum ?g (insert ?x ?A) =\n  (if ?x \\<in> ?A then sum ?g ?A else ?g ?x + sum ?g ?A)\n  finite F\n  x \\<notin> F\n  card (\\<Union> F) \\<le> sum card F\n\ngoal (1 subgoal):\n 1. card x + sum card F = sum card (insert x F)", "by auto"], ["proof (state)\nthis:\n  card x + sum card F = sum card (insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card (\\<Union> F) \\<le> sum card F\\<rbrakk>\n       \\<Longrightarrow> card (\\<Union> (insert x F))\n                         \\<le> sum card (insert x F)", "finally"], ["proof (chain)\npicking this:\n  card (\\<Union> (insert x F)) \\<le> sum card (insert x F)", "show ?case"], ["proof (prove)\nusing this:\n  card (\\<Union> (insert x F)) \\<le> sum card (insert x F)\n\ngoal (1 subgoal):\n 1. card (\\<Union> (insert x F)) \\<le> sum card (insert x F)", "."], ["proof (state)\nthis:\n  card (\\<Union> (insert x F)) \\<le> sum card (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (\\<Union> U) \\<le> sum card U\n\ngoal:\nNo subgoals!", "qed"], ["", "(* this lemma could be more generally about U :: \"nat set\", but this makes its application more difficult later *)"], ["", "lemma sum_card:\n  fixes U :: \"'a set set\"\n    and n :: nat\n  assumes \"\\<forall>S \\<in> U. card S \\<le> n\"\n  shows \"sum card U \\<le> card U * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum card U \\<le> card U * n", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum card U \\<le> card U * n\n 2. \\<not> ?P \\<Longrightarrow> sum card U \\<le> card U * n", "assume \"infinite U \\<or> U = {}\""], ["proof (state)\nthis:\n  infinite U \\<or> U = {}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum card U \\<le> card U * n\n 2. \\<not> ?P \\<Longrightarrow> sum card U \\<le> card U * n", "then"], ["proof (chain)\npicking this:\n  infinite U \\<or> U = {}", "have \"sum card U = 0\""], ["proof (prove)\nusing this:\n  infinite U \\<or> U = {}\n\ngoal (1 subgoal):\n 1. sum card U = 0", "using sum.infinite"], ["proof (prove)\nusing this:\n  infinite U \\<or> U = {}\n  infinite ?A \\<Longrightarrow> sum ?g ?A = (0::?'a)\n\ngoal (1 subgoal):\n 1. sum card U = 0", "by auto"], ["proof (state)\nthis:\n  sum card U = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> sum card U \\<le> card U * n\n 2. \\<not> ?P \\<Longrightarrow> sum card U \\<le> card U * n", "then"], ["proof (chain)\npicking this:\n  sum card U = 0", "show \"sum card U \\<le> card U * n\""], ["proof (prove)\nusing this:\n  sum card U = 0\n\ngoal (1 subgoal):\n 1. sum card U \\<le> card U * n", "by auto"], ["proof (state)\nthis:\n  sum card U \\<le> card U * n\n\ngoal (1 subgoal):\n 1. \\<not> (infinite U \\<or> U = {}) \\<Longrightarrow>\n    sum card U \\<le> card U * n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (infinite U \\<or> U = {}) \\<Longrightarrow>\n    sum card U \\<le> card U * n", "assume \"\\<not>(infinite U \\<or> U = {})\""], ["proof (state)\nthis:\n  \\<not> (infinite U \\<or> U = {})\n\ngoal (1 subgoal):\n 1. \\<not> (infinite U \\<or> U = {}) \\<Longrightarrow>\n    sum card U \\<le> card U * n", "with assms"], ["proof (chain)\npicking this:\n  \\<forall>S\\<in>U. card S \\<le> n\n  \\<not> (infinite U \\<or> U = {})", "have \"finite U\" and \"U \\<noteq> {}\"and \"\\<forall>S \\<in> U. card S \\<le> n\""], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>U. card S \\<le> n\n  \\<not> (infinite U \\<or> U = {})\n\ngoal (1 subgoal):\n 1. finite U &&& U \\<noteq> {} &&& \\<forall>S\\<in>U. card S \\<le> n", "by auto"], ["proof (state)\nthis:\n  finite U\n  U \\<noteq> {}\n  \\<forall>S\\<in>U. card S \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> (infinite U \\<or> U = {}) \\<Longrightarrow>\n    sum card U \\<le> card U * n", "then"], ["proof (chain)\npicking this:\n  finite U\n  U \\<noteq> {}\n  \\<forall>S\\<in>U. card S \\<le> n", "show \"sum card U \\<le> card U * n\""], ["proof (prove)\nusing this:\n  finite U\n  U \\<noteq> {}\n  \\<forall>S\\<in>U. card S \\<le> n\n\ngoal (1 subgoal):\n 1. sum card U \\<le> card U * n", "proof (induct U rule: finite_ne_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>S\\<in>{x}. card S \\<le> n \\<Longrightarrow>\n       sum card {x} \\<le> card {x} * n\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "case (singleton x)"], ["proof (state)\nthis:\n  \\<forall>S\\<in>{x}. card S \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>S\\<in>{x}. card S \\<le> n \\<Longrightarrow>\n       sum card {x} \\<le> card {x} * n\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "then"], ["proof (chain)\npicking this:\n  \\<forall>S\\<in>{x}. card S \\<le> n", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>{x}. card S \\<le> n\n\ngoal (1 subgoal):\n 1. sum card {x} \\<le> card {x} * n", "by auto"], ["proof (state)\nthis:\n  sum card {x} \\<le> card {x} * n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  F \\<noteq> {}\n  x \\<notin> F\n  \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n  sum card F \\<le> card F * n\n  \\<forall>S\\<in>insert x F. card S \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "assume \"\\<forall>S\\<in>insert x F. card S \\<le> n\""], ["proof (state)\nthis:\n  \\<forall>S\\<in>insert x F. card S \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "then"], ["proof (chain)\npicking this:\n  \\<forall>S\\<in>insert x F. card S \\<le> n", "have 1:\"card x \\<le> n\" and 2:\"sum card F \\<le> card F * n\""], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>insert x F. card S \\<le> n\n\ngoal (1 subgoal):\n 1. card x \\<le> n &&& sum card F \\<le> card F * n", "using insert.hyps"], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>insert x F. card S \\<le> n\n  finite F\n  F \\<noteq> {}\n  x \\<notin> F\n  \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n  sum card F \\<le> card F * n\n\ngoal (1 subgoal):\n 1. card x \\<le> n &&& sum card F \\<le> card F * n", "by auto"], ["proof (state)\nthis:\n  card x \\<le> n\n  sum card F \\<le> card F * n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "then"], ["proof (chain)\npicking this:\n  card x \\<le> n\n  sum card F \\<le> card F * n", "have \"sum card (insert x F) = card x + sum card F\""], ["proof (prove)\nusing this:\n  card x \\<le> n\n  sum card F \\<le> card F * n\n\ngoal (1 subgoal):\n 1. sum card (insert x F) = card x + sum card F", "using sum.insert_if and insert.hyps"], ["proof (prove)\nusing this:\n  card x \\<le> n\n  sum card F \\<le> card F * n\n  finite ?A \\<Longrightarrow>\n  sum ?g (insert ?x ?A) =\n  (if ?x \\<in> ?A then sum ?g ?A else ?g ?x + sum ?g ?A)\n  finite F\n  F \\<noteq> {}\n  x \\<notin> F\n  \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n  sum card F \\<le> card F * n\n\ngoal (1 subgoal):\n 1. sum card (insert x F) = card x + sum card F", "by auto"], ["proof (state)\nthis:\n  sum card (insert x F) = card x + sum card F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "also"], ["proof (state)\nthis:\n  sum card (insert x F) = card x + sum card F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "have \"... \\<le> n + card F * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card x + sum card F \\<le> n + card F * n", "using 1 and 2"], ["proof (prove)\nusing this:\n  card x \\<le> n\n  sum card F \\<le> card F * n\n\ngoal (1 subgoal):\n 1. card x + sum card F \\<le> n + card F * n", "by auto"], ["proof (state)\nthis:\n  card x + sum card F \\<le> n + card F * n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "also"], ["proof (state)\nthis:\n  card x + sum card F \\<le> n + card F * n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "have \"... = card (insert x F) * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n + card F * n = card (insert x F) * n", "using card_insert_if and insert.hyps"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow>\n  card (insert ?x ?A) = (if ?x \\<in> ?A then card ?A else Suc (card ?A))\n  finite F\n  F \\<noteq> {}\n  x \\<notin> F\n  \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n  sum card F \\<le> card F * n\n\ngoal (1 subgoal):\n 1. n + card F * n = card (insert x F) * n", "by auto"], ["proof (state)\nthis:\n  n + card F * n = card (insert x F) * n\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<forall>S\\<in>F. card S \\<le> n \\<Longrightarrow>\n        sum card F \\<le> card F * n;\n        \\<forall>S\\<in>insert x F. card S \\<le> n\\<rbrakk>\n       \\<Longrightarrow> sum card (insert x F) \\<le> card (insert x F) * n", "finally"], ["proof (chain)\npicking this:\n  sum card (insert x F) \\<le> card (insert x F) * n", "show ?case"], ["proof (prove)\nusing this:\n  sum card (insert x F) \\<le> card (insert x F) * n\n\ngoal (1 subgoal):\n 1. sum card (insert x F) \\<le> card (insert x F) * n", "."], ["proof (state)\nthis:\n  sum card (insert x F) \\<le> card (insert x F) * n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum card U \\<le> card U * n\n\ngoal:\nNo subgoals!", "qed"], ["", "(* among the vertices deleted in each iteration, at most \\<Delta> can belong to an independent set of\n   vertices: the chosen vertex or (some of) its neighbors *)"], ["", "lemma x_or_neighbors:\n  fixes P :: \"'a set set\"\n    and S :: \"'a set\"\n  assumes inv: \"\\<forall>p\\<in>P. \\<exists>s \\<in> V. p = {s} \\<union> neighbors s\"\n      and ivS: \"independent_vertices E S\"\n    shows \"\\<forall>p \\<in> P. card (S \\<inter> p) \\<le> \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>P. card (S \\<inter> p) \\<le> \\<Delta>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> P \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> P \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "assume \"p \\<in> P\""], ["proof (state)\nthis:\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> P \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  p \\<in> P", "obtain s where 1: \"s \\<in> V \\<and> p = {s} \\<union> neighbors s\""], ["proof (prove)\nusing this:\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s \\<in> V \\<and> p = {s} \\<union> neighbors s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using inv"], ["proof (prove)\nusing this:\n  p \\<in> P\n  \\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s \\<in> V \\<and> p = {s} \\<union> neighbors s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> P \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s", "show \"card (S \\<inter> p) \\<le> \\<Delta>\""], ["proof (prove)\nusing this:\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s; ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "assume \"s \\<in> S\""], ["proof (state)\nthis:\n  s \\<in> S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s; ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  s \\<in> S", "have \"S \\<inter> neighbors s = {}\""], ["proof (prove)\nusing this:\n  s \\<in> S\n\ngoal (1 subgoal):\n 1. S \\<inter> neighbors s = {}", "using ivS"], ["proof (prove)\nusing this:\n  s \\<in> S\n  independent_vertices E S\n\ngoal (1 subgoal):\n 1. S \\<inter> neighbors s = {}", "unfolding independent_vertices_def"], ["proof (prove)\nusing this:\n  s \\<in> S\n  S \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E)\n\ngoal (1 subgoal):\n 1. S \\<inter> neighbors s = {}", "by auto"], ["proof (state)\nthis:\n  S \\<inter> neighbors s = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s; ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  S \\<inter> neighbors s = {}", "have \"S \\<inter> p \\<subseteq> {s}\""], ["proof (prove)\nusing this:\n  S \\<inter> neighbors s = {}\n\ngoal (1 subgoal):\n 1. S \\<inter> p \\<subseteq> {s}", "using 1"], ["proof (prove)\nusing this:\n  S \\<inter> neighbors s = {}\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s\n\ngoal (1 subgoal):\n 1. S \\<inter> p \\<subseteq> {s}", "by auto"], ["proof (state)\nthis:\n  S \\<inter> p \\<subseteq> {s}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s; ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  S \\<inter> p \\<subseteq> {s}", "have 2: \"card (S \\<inter> p) \\<le> 1\""], ["proof (prove)\nusing this:\n  S \\<inter> p \\<subseteq> {s}\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> 1", "using subset_singletonD"], ["proof (prove)\nusing this:\n  S \\<inter> p \\<subseteq> {s}\n  ?A \\<subseteq> {?x} \\<Longrightarrow> ?A = {} \\<or> ?A = {?x}\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> 1", "by fastforce"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s; ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "consider (a) \"E = {}\" | (b) \"0 < \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E = {} \\<Longrightarrow> thesis;\n     0 < \\<Delta> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using \\<Delta>_pos"], ["proof (prove)\nusing this:\n  E = {} \\<or> 0 < \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>E = {} \\<Longrightarrow> thesis;\n     0 < \\<Delta> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>E = {} \\<Longrightarrow> ?thesis;\n   0 < \\<Delta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s; ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>E = {} \\<Longrightarrow> ?thesis;\n   0 < \\<Delta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"card (S \\<inter> p) \\<le> \\<Delta>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>E = {} \\<Longrightarrow> ?thesis;\n   0 < \\<Delta> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. E = {} \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. 0 < \\<Delta> \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "case a"], ["proof (state)\nthis:\n  E = {}\n\ngoal (2 subgoals):\n 1. E = {} \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. 0 < \\<Delta> \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  E = {}", "have \"S = {}\""], ["proof (prove)\nusing this:\n  E = {}\n\ngoal (1 subgoal):\n 1. S = {}", "using ivS"], ["proof (prove)\nusing this:\n  E = {}\n  independent_vertices E S\n\ngoal (1 subgoal):\n 1. S = {}", "unfolding independent_vertices_def"], ["proof (prove)\nusing this:\n  E = {}\n  S \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S \\<and> v2 \\<in> S \\<longrightarrow> {v1, v2} \\<notin> E)\n\ngoal (1 subgoal):\n 1. S = {}", "by auto"], ["proof (state)\nthis:\n  S = {}\n\ngoal (2 subgoals):\n 1. E = {} \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>\n 2. 0 < \\<Delta> \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  S = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  S = {}\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "by auto"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. 0 < \\<Delta> \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < \\<Delta> \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "case b"], ["proof (state)\nthis:\n  0 < \\<Delta>\n\ngoal (1 subgoal):\n 1. 0 < \\<Delta> \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  0 < \\<Delta>", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < \\<Delta>\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "using 2"], ["proof (prove)\nusing this:\n  0 < \\<Delta>\n  card (S \\<inter> p) \\<le> 1\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "by auto"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     s \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     s \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "assume \"s \\<notin> S\""], ["proof (state)\nthis:\n  s \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     s \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "with 1"], ["proof (chain)\npicking this:\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s\n  s \\<notin> S", "have \"S \\<inter> p \\<subseteq> neighbors s\""], ["proof (prove)\nusing this:\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s\n  s \\<notin> S\n\ngoal (1 subgoal):\n 1. S \\<inter> p \\<subseteq> neighbors s", "by auto"], ["proof (state)\nthis:\n  S \\<inter> p \\<subseteq> neighbors s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     s \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  S \\<inter> p \\<subseteq> neighbors s", "have \"card (S \\<inter> p) \\<le> degree_vertex s\""], ["proof (prove)\nusing this:\n  S \\<inter> p \\<subseteq> neighbors s\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> degree_vertex s", "using card_mono and finite_neighbors"], ["proof (prove)\nusing this:\n  S \\<inter> p \\<subseteq> neighbors s\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n  finite (neighbors ?u)\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> degree_vertex s", "by auto"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> degree_vertex s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> V \\<and> p = {s} \\<union> neighbors s;\n     s \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> card (S \\<inter> p) \\<le> \\<Delta>", "then"], ["proof (chain)\npicking this:\n  card (S \\<inter> p) \\<le> degree_vertex s", "show \"card (S \\<inter> p) \\<le> \\<Delta>\""], ["proof (prove)\nusing this:\n  card (S \\<inter> p) \\<le> degree_vertex s\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "using 1 and \\<Delta>_max_degree [of s]"], ["proof (prove)\nusing this:\n  card (S \\<inter> p) \\<le> degree_vertex s\n  s \\<in> V \\<and> p = {s} \\<union> neighbors s\n  s \\<in> V \\<Longrightarrow> degree_vertex s \\<le> \\<Delta>\n\ngoal (1 subgoal):\n 1. card (S \\<inter> p) \\<le> \\<Delta>", "by auto"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (S \\<inter> p) \\<le> \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* the premise combines the invariant and the negated post-condition *)"], ["", "lemma inv_partition_approx: \"inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S", "assume H1: \"inv_partition S V P\""], ["proof (state)\nthis:\n  inv_partition S V P\n\ngoal (1 subgoal):\n 1. inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S", "then"], ["proof (chain)\npicking this:\n  inv_partition S V P", "have \"independent_vertices E S\""], ["proof (prove)\nusing this:\n  inv_partition S V P\n\ngoal (1 subgoal):\n 1. independent_vertices E S", "unfolding inv_partition_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   V \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - V. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> V) \\<and>\n  \\<Union> P = V \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. independent_vertices E S", "by auto"], ["proof (state)\nthis:\n  independent_vertices E S\n\ngoal (1 subgoal):\n 1. inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S", "moreover"], ["proof (state)\nthis:\n  independent_vertices E S\n\ngoal (1 subgoal):\n 1. inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S", "have \"independent_vertices E S' \\<Longrightarrow> card S' \\<le> card S * \\<Delta>\" for S'"], ["proof (prove)\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "let ?I = \"{S' \\<inter> p | p. p \\<in> P}\""], ["proof (state)\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "(* split the optimal solution among the sets of P, which cover V so no element is\n       lost. We obtain a cover of S' and show the required bound on its cardinality *)"], ["proof (state)\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "assume H2: \"independent_vertices E S'\""], ["proof (state)\nthis:\n  independent_vertices E S'\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "then"], ["proof (chain)\npicking this:\n  independent_vertices E S'", "have \"S' \\<subseteq> V\""], ["proof (prove)\nusing this:\n  independent_vertices E S'\n\ngoal (1 subgoal):\n 1. S' \\<subseteq> V", "unfolding independent_vertices_def"], ["proof (prove)\nusing this:\n  S' \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S' \\<and> v2 \\<in> S' \\<longrightarrow> {v1, v2} \\<notin> E)\n\ngoal (1 subgoal):\n 1. S' \\<subseteq> V", "using vertices.simps"], ["proof (prove)\nusing this:\n  S' \\<subseteq> \\<Union> E \\<and>\n  (\\<forall>v1 v2.\n      v1 \\<in> S' \\<and> v2 \\<in> S' \\<longrightarrow> {v1, v2} \\<notin> E)\n  vertices ?G = \\<Union> ?G\n\ngoal (1 subgoal):\n 1. S' \\<subseteq> V", "by blast"], ["proof (state)\nthis:\n  S' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "with H1"], ["proof (chain)\npicking this:\n  inv_partition S V P\n  S' \\<subseteq> V", "have \"S' = S' \\<inter> \\<Union>P\""], ["proof (prove)\nusing this:\n  inv_partition S V P\n  S' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. S' = S' \\<inter> \\<Union> P", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S V \\<and>\n  \\<Union> P = V \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n  S' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. S' = S' \\<inter> \\<Union> P", "by auto"], ["proof (state)\nthis:\n  S' = S' \\<inter> \\<Union> P\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "then"], ["proof (chain)\npicking this:\n  S' = S' \\<inter> \\<Union> P", "have \"S' = (\\<Union>p \\<in> P. S' \\<inter> p)\""], ["proof (prove)\nusing this:\n  S' = S' \\<inter> \\<Union> P\n\ngoal (1 subgoal):\n 1. S' = \\<Union> ((\\<inter>) S' ` P)", "using Int_Union"], ["proof (prove)\nusing this:\n  S' = S' \\<inter> \\<Union> P\n  ?A \\<inter> \\<Union> ?B = \\<Union> ((\\<inter>) ?A ` ?B)\n\ngoal (1 subgoal):\n 1. S' = \\<Union> ((\\<inter>) S' ` P)", "by auto"], ["proof (state)\nthis:\n  S' = \\<Union> ((\\<inter>) S' ` P)\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "then"], ["proof (chain)\npicking this:\n  S' = \\<Union> ((\\<inter>) S' ` P)", "have \"S' = \\<Union>?I\""], ["proof (prove)\nusing this:\n  S' = \\<Union> ((\\<inter>) S' ` P)\n\ngoal (1 subgoal):\n 1. S' = \\<Union> {S' \\<inter> p |p. p \\<in> P}", "by blast"], ["proof (state)\nthis:\n  S' = \\<Union> {S' \\<inter> p |p. p \\<in> P}\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "moreover"], ["proof (state)\nthis:\n  S' = \\<Union> {S' \\<inter> p |p. p \\<in> P}\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "have \"finite S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S'", "using H2 and independent_vertices_finite"], ["proof (prove)\nusing this:\n  independent_vertices E S'\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S'", "by auto"], ["proof (state)\nthis:\n  finite S'\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "then"], ["proof (chain)\npicking this:\n  finite S'", "have \"p \\<in> P \\<Longrightarrow> finite (S' \\<inter> p)\" for p"], ["proof (prove)\nusing this:\n  finite S'\n\ngoal (1 subgoal):\n 1. p \\<in> P \\<Longrightarrow> finite (S' \\<inter> p)", "by auto"], ["proof (state)\nthis:\n  ?p \\<in> P \\<Longrightarrow> finite (S' \\<inter> ?p)\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "ultimately"], ["proof (chain)\npicking this:\n  S' = \\<Union> {S' \\<inter> p |p. p \\<in> P}\n  ?p \\<in> P \\<Longrightarrow> finite (S' \\<inter> ?p)", "have \"card S' \\<le> sum card ?I\""], ["proof (prove)\nusing this:\n  S' = \\<Union> {S' \\<inter> p |p. p \\<in> P}\n  ?p \\<in> P \\<Longrightarrow> finite (S' \\<inter> ?p)\n\ngoal (1 subgoal):\n 1. card S' \\<le> sum card {S' \\<inter> p |p. p \\<in> P}", "using card_Union_le_sum_card [of ?I]"], ["proof (prove)\nusing this:\n  S' = \\<Union> {S' \\<inter> p |p. p \\<in> P}\n  ?p \\<in> P \\<Longrightarrow> finite (S' \\<inter> ?p)\n  \\<forall>u\\<in>{S' \\<inter> p |p. p \\<in> P}. finite u \\<Longrightarrow>\n  card (\\<Union> {S' \\<inter> p |p. p \\<in> P})\n  \\<le> sum card {S' \\<inter> p |p. p \\<in> P}\n\ngoal (1 subgoal):\n 1. card S' \\<le> sum card {S' \\<inter> p |p. p \\<in> P}", "by auto"], ["proof (state)\nthis:\n  card S' \\<le> sum card {S' \\<inter> p |p. p \\<in> P}\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "also"], ["proof (state)\nthis:\n  card S' \\<le> sum card {S' \\<inter> p |p. p \\<in> P}\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "have \"... \\<le> card ?I * \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum card {S' \\<inter> p |p. p \\<in> P}\n    \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>", "using x_or_neighbors [of P S']\n        and sum_card [of ?I \\<Delta>]\n        and H1 and H2"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s;\n   independent_vertices E S'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p\\<in>P. card (S' \\<inter> p) \\<le> \\<Delta>\n  \\<forall>S\\<in>{S' \\<inter> p |p. p \\<in> P}.\n     card S \\<le> \\<Delta> \\<Longrightarrow>\n  sum card {S' \\<inter> p |p. p \\<in> P}\n  \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>\n  inv_partition S V P\n  independent_vertices E S'\n\ngoal (1 subgoal):\n 1. sum card {S' \\<inter> p |p. p \\<in> P}\n    \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s;\n   independent_vertices E S'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>p\\<in>P. card (S' \\<inter> p) \\<le> \\<Delta>\n  \\<forall>S\\<in>{S' \\<inter> p |p. p \\<in> P}.\n     card S \\<le> \\<Delta> \\<Longrightarrow>\n  sum card {S' \\<inter> p |p. p \\<in> P}\n  \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>\n  inv_iv S V \\<and>\n  \\<Union> P = V \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n  independent_vertices E S'\n\ngoal (1 subgoal):\n 1. sum card {S' \\<inter> p |p. p \\<in> P}\n    \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>", "by auto"], ["proof (state)\nthis:\n  sum card {S' \\<inter> p |p. p \\<in> P}\n  \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "also"], ["proof (state)\nthis:\n  sum card {S' \\<inter> p |p. p \\<in> P}\n  \\<le> card {S' \\<inter> p |p. p \\<in> P} * \\<Delta>\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "have \"... \\<le> card P * \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>", "have \"finite P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite P", "using H1"], ["proof (prove)\nusing this:\n  inv_partition S V P\n\ngoal (1 subgoal):\n 1. finite P", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S V \\<and>\n  \\<Union> P = V \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. finite P", "by auto"], ["proof (state)\nthis:\n  finite P\n\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>", "then"], ["proof (chain)\npicking this:\n  finite P", "have \"card ?I \\<le> card P\""], ["proof (prove)\nusing this:\n  finite P\n\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} \\<le> card P", "using Setcompr_eq_image [of \"\\<lambda>p. S' \\<inter> p\" P]\n          and card_image_le"], ["proof (prove)\nusing this:\n  finite P\n  {S' \\<inter> x |x. x \\<in> P} = (\\<inter>) S' ` P\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} \\<le> card P", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  finite P\n  {S' \\<inter> x |x. x \\<in> P} = (\\<inter>) S' ` P\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} \\<le> card P", "by auto"], ["proof (state)\nthis:\n  card {S' \\<inter> p |p. p \\<in> P} \\<le> card P\n\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>", "then"], ["proof (chain)\npicking this:\n  card {S' \\<inter> p |p. p \\<in> P} \\<le> card P", "show ?thesis"], ["proof (prove)\nusing this:\n  card {S' \\<inter> p |p. p \\<in> P} \\<le> card P\n\ngoal (1 subgoal):\n 1. card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>", "by auto"], ["proof (state)\nthis:\n  card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "also"], ["proof (state)\nthis:\n  card {S' \\<inter> p |p. p \\<in> P} * \\<Delta> \\<le> card P * \\<Delta>\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "have \"... = card S * \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card P * \\<Delta> = card S * \\<Delta>", "using H1"], ["proof (prove)\nusing this:\n  inv_partition S V P\n\ngoal (1 subgoal):\n 1. card P * \\<Delta> = card S * \\<Delta>", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S V \\<and>\n  \\<Union> P = V \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n\ngoal (1 subgoal):\n 1. card P * \\<Delta> = card S * \\<Delta>", "by auto"], ["proof (state)\nthis:\n  card P * \\<Delta> = card S * \\<Delta>\n\ngoal (1 subgoal):\n 1. independent_vertices E S' \\<Longrightarrow>\n    card S' \\<le> card S * \\<Delta>", "ultimately"], ["proof (chain)\npicking this:\n  card S' \\<le> card P * \\<Delta>\n  card P * \\<Delta> = card S * \\<Delta>", "show \"card S' \\<le> card S * \\<Delta>\""], ["proof (prove)\nusing this:\n  card S' \\<le> card P * \\<Delta>\n  card P * \\<Delta> = card S * \\<Delta>\n\ngoal (1 subgoal):\n 1. card S' \\<le> card S * \\<Delta>", "by auto"], ["proof (state)\nthis:\n  card S' \\<le> card S * \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  independent_vertices E ?S' \\<Longrightarrow>\n  card ?S' \\<le> card S * \\<Delta>\n\ngoal (1 subgoal):\n 1. inv_partition S V P \\<Longrightarrow> approximation_miv \\<Delta> S", "ultimately"], ["proof (chain)\npicking this:\n  independent_vertices E S\n  independent_vertices E ?S' \\<Longrightarrow>\n  card ?S' \\<le> card S * \\<Delta>", "show \"approximation_miv \\<Delta> S\""], ["proof (prove)\nusing this:\n  independent_vertices E S\n  independent_vertices E ?S' \\<Longrightarrow>\n  card ?S' \\<le> card S * \\<Delta>\n\ngoal (1 subgoal):\n 1. approximation_miv \\<Delta> S", "unfolding approximation_miv_def"], ["proof (prove)\nusing this:\n  independent_vertices E S\n  independent_vertices E ?S' \\<Longrightarrow>\n  card ?S' \\<le> card S * \\<Delta>\n\ngoal (1 subgoal):\n 1. independent_vertices E S \\<and>\n    (\\<forall>S'.\n        independent_vertices E S' \\<longrightarrow>\n        card S' \\<le> card S * \\<Delta>)", "by auto"], ["proof (state)\nthis:\n  approximation_miv \\<Delta> S\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wei_approx_\\<Delta>:\n\"VARS (S :: 'a set) (X :: 'a set) (x :: 'a)\n  { True }\n  S := {};\n  X := {};\n  WHILE X \\<noteq> V\n  INV { \\<exists>P. inv_partition S X P }\n  DO x := (SOME x. x \\<in> V - X);\n     S := insert x S;\n     X := X \\<union> neighbors x \\<union> {x}\n  OD\n  { approximation_miv \\<Delta> S }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {True} \n     S := {};\n     X := {};\n     WHILE X \\<noteq> V INV {\\<exists>P. inv_partition S X P} \n      VAR {\\<lambda>(S, X, x). 0} \n      DO x := (SOME x. x \\<in> V - X);\n         S := insert x S; X := X \\<union> neighbors x \\<union> {x} \n      OD \n     {approximation_miv \\<Delta> S}", "proof (vcg, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> Ex (inv_partition {} {})\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 3. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "case (1 S X x)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> Ex (inv_partition {} {})\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 3. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "(* invariant initially true *)\n  (* the invariant is initially true with the ghost variable P := {} *)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> Ex (inv_partition {} {})\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 3. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "have \"inv_partition {} {} {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_partition {} {} {}", "unfolding inv_partition_def inv_iv_def independent_vertices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (({} \\<subseteq> \\<Union> E \\<and>\n      (\\<forall>v1 v2.\n          v1 \\<in> {} \\<and> v2 \\<in> {} \\<longrightarrow>\n          {v1, v2} \\<notin> E)) \\<and>\n     {} \\<subseteq> V \\<and>\n     (\\<forall>v1\\<in>V - {}.\n         \\<forall>v2\\<in>{}. {v1, v2} \\<notin> E) \\<and>\n     {} \\<subseteq> {}) \\<and>\n    \\<Union> {} = {} \\<and>\n    (\\<forall>p\\<in>{}.\n        \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n    card {} = card {} \\<and> finite {}", "by auto"], ["proof (state)\nthis:\n  inv_partition {} {} {}\n\ngoal (3 subgoals):\n 1. \\<And>S X x. True \\<Longrightarrow> Ex (inv_partition {} {})\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 3. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "then"], ["proof (chain)\npicking this:\n  inv_partition {} {} {}", "show ?case"], ["proof (prove)\nusing this:\n  inv_partition {} {} {}\n\ngoal (1 subgoal):\n 1. Ex (inv_partition {} {})", "by auto"], ["proof (state)\nthis:\n  Ex (inv_partition {} {})\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "case (2 S X x)"], ["proof (state)\nthis:\n  Ex (inv_partition S X) \\<and> X \\<noteq> V\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "(* invariant preserved by loop *)\n  (* definedness of assignment *)"], ["proof (state)\nthis:\n  Ex (inv_partition S X) \\<and> X \\<noteq> V\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "let ?x = \"(SOME x. x \\<in> V - X)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "from 2"], ["proof (chain)\npicking this:\n  Ex (inv_partition S X) \\<and> X \\<noteq> V", "obtain P where I: \"inv_partition S X P\""], ["proof (prove)\nusing this:\n  Ex (inv_partition S X) \\<and> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        inv_partition S X P \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  inv_partition S X P\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "then"], ["proof (chain)\npicking this:\n  inv_partition S X P", "have \"V - X \\<noteq> {}\""], ["proof (prove)\nusing this:\n  inv_partition S X P\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "using 2"], ["proof (prove)\nusing this:\n  inv_partition S X P\n  Ex (inv_partition S X) \\<and> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "unfolding inv_partition_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and>\n  \\<Union> P = X \\<and>\n  (\\<forall>p\\<in>P. \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n  card P = card S \\<and> finite P\n  (\\<exists>P.\n      inv_iv S X \\<and>\n      \\<Union> P = X \\<and>\n      (\\<forall>p\\<in>P.\n          \\<exists>s\\<in>V. p = {s} \\<union> neighbors s) \\<and>\n      card P = card S \\<and> finite P) \\<and>\n  X \\<noteq> V\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  V - X \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "then"], ["proof (chain)\npicking this:\n  V - X \\<noteq> {}", "have \"?x \\<in> V - X\""], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> V - X) \\<in> V - X", "using some_in_eq"], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n  ((SOME x. x \\<in> ?A) \\<in> ?A) = (?A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> V - X) \\<in> V - X", "by metis"], ["proof (state)\nthis:\n  (SOME x. x \\<in> V - X) \\<in> V - X\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "(* show that the invariant is true with the ghost variable P := insert ({?x} \\<union> neighbors ?x) P *)"], ["proof (state)\nthis:\n  (SOME x. x \\<in> V - X) \\<in> V - X\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "with I"], ["proof (chain)\npicking this:\n  inv_partition S X P\n  (SOME x. x \\<in> V - X) \\<in> V - X", "have \"inv_partition (insert ?x S) (X \\<union> neighbors ?x \\<union> {?x}) (insert ({?x} \\<union> neighbors ?x) P)\""], ["proof (prove)\nusing this:\n  inv_partition S X P\n  (SOME x. x \\<in> V - X) \\<in> V - X\n\ngoal (1 subgoal):\n 1. inv_partition (insert (SOME x. x \\<in> V - X) S)\n     (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n      {SOME x. x \\<in> V - X})\n     (insert\n       ({SOME x. x \\<in> V - X} \\<union> neighbors (SOME x. x \\<in> V - X))\n       P)", "using inv_partition_preserv"], ["proof (prove)\nusing this:\n  inv_partition S X P\n  (SOME x. x \\<in> V - X) \\<in> V - X\n  \\<lbrakk>inv_partition ?S ?X ?P; ?x \\<in> V - ?X\\<rbrakk>\n  \\<Longrightarrow> inv_partition (insert ?x ?S)\n                     (?X \\<union> neighbors ?x \\<union> {?x})\n                     (insert ({?x} \\<union> neighbors ?x) ?P)\n\ngoal (1 subgoal):\n 1. inv_partition (insert (SOME x. x \\<in> V - X) S)\n     (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n      {SOME x. x \\<in> V - X})\n     (insert\n       ({SOME x. x \\<in> V - X} \\<union> neighbors (SOME x. x \\<in> V - X))\n       P)", "by blast"], ["proof (state)\nthis:\n  inv_partition (insert (SOME x. x \\<in> V - X) S)\n   (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n    {SOME x. x \\<in> V - X})\n   (insert\n     ({SOME x. x \\<in> V - X} \\<union> neighbors (SOME x. x \\<in> V - X)) P)\n\ngoal (2 subgoals):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> X \\<noteq> V \\<Longrightarrow>\n       Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n            (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n             {SOME x. x \\<in> V - X}))\n 2. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "then"], ["proof (chain)\npicking this:\n  inv_partition (insert (SOME x. x \\<in> V - X) S)\n   (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n    {SOME x. x \\<in> V - X})\n   (insert\n     ({SOME x. x \\<in> V - X} \\<union> neighbors (SOME x. x \\<in> V - X)) P)", "show ?case"], ["proof (prove)\nusing this:\n  inv_partition (insert (SOME x. x \\<in> V - X) S)\n   (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n    {SOME x. x \\<in> V - X})\n   (insert\n     ({SOME x. x \\<in> V - X} \\<union> neighbors (SOME x. x \\<in> V - X)) P)\n\ngoal (1 subgoal):\n 1. Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n         (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n          {SOME x. x \\<in> V - X}))", "by auto"], ["proof (state)\nthis:\n  Ex (inv_partition (insert (SOME x. x \\<in> V - X) S)\n       (X \\<union> neighbors (SOME x. x \\<in> V - X) \\<union>\n        {SOME x. x \\<in> V - X}))\n\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "case (3 S X x)"], ["proof (state)\nthis:\n  Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "(* invariant implies post-condition *)"], ["proof (state)\nthis:\n  Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>S X x.\n       Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv \\<Delta> S", "then"], ["proof (chain)\npicking this:\n  Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V", "show ?case"], ["proof (prove)\nusing this:\n  Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. approximation_miv \\<Delta> S", "using inv_partition_approx"], ["proof (prove)\nusing this:\n  Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V\n  inv_partition ?S V ?P \\<Longrightarrow> approximation_miv \\<Delta> ?S\n\ngoal (1 subgoal):\n 1. approximation_miv \\<Delta> S", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  Ex (inv_partition S X) \\<and> \\<not> X \\<noteq> V\n  inv_partition ?S V ?P \\<Longrightarrow> approximation_miv \\<Delta> ?S\n\ngoal (1 subgoal):\n 1. approximation_miv \\<Delta> S", "by auto"], ["proof (state)\nthis:\n  approximation_miv \\<Delta> S\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Wei's algorithm with dynamically computed approximation ratio\""], ["", "text \\<open>In this subsection, we augment the algorithm with a variable used to compute the effective approximation ratio of the solution. In addition, the vertex of smallest degree is picked. With this heuristic, the algorithm achieves an approximation ratio of \\<open>(\\<Delta>+2)/3\\<close>, but this is not proved here.\\<close>"], ["", "definition vertex_heuristic :: \"'a set \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n\"vertex_heuristic X v = (\\<forall>u \\<in> V - X. card (neighbors v - X) \\<le> card (neighbors u - X))\""], ["", "(* this lemma is needed to show that there exist a vertex to be picked by the heuristic *)"], ["", "lemma ex_min_finite_set:\n  fixes S :: \"'a set\"\n    and f :: \"'a \\<Rightarrow> nat\"\n    shows \"finite S \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> S \\<and> (\\<forall>y \\<in> S. f x \\<le> f y)\"\n          (is \"?P1 \\<Longrightarrow> ?P2 \\<Longrightarrow> \\<exists>x. ?minf S x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; S \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> S \\<and> (\\<forall>y\\<in>S. f x \\<le> f y)", "proof (induct S rule: finite_ne_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa. xa \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f xa \\<le> f y)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "case (singleton x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa. xa \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f xa \\<le> f y)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "have \"?minf {x} x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f x \\<le> f y)", "by auto"], ["proof (state)\nthis:\n  x \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f x \\<le> f y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa. xa \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f xa \\<le> f y)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "then"], ["proof (chain)\npicking this:\n  x \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f x \\<le> f y)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f x \\<le> f y)\n\ngoal (1 subgoal):\n 1. \\<exists>xa. xa \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f xa \\<le> f y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa. xa \\<in> {x} \\<and> (\\<forall>y\\<in>{x}. f xa \\<le> f y)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  F \\<noteq> {}\n  x \\<notin> F\n  \\<exists>x. x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "from insert(4)"], ["proof (chain)\npicking this:\n  \\<exists>x. x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)", "obtain y where Py: \"?minf F y\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<in> F \\<and>\n        (\\<forall>ya\\<in>F. f y \\<le> f ya) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> F \\<and> (\\<forall>ya\\<in>F. f y \\<le> f ya)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>x.\n           x \\<in> F \\<and> (\\<forall>y\\<in>F. f x \\<le> f y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> insert x F \\<and>\n                            (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "show \"\\<exists>z. ?minf (insert x F) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "assume \"f x < f y\""], ["proof (state)\nthis:\n  f x < f y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "then"], ["proof (chain)\npicking this:\n  f x < f y", "have \"?minf (insert x F) x\""], ["proof (prove)\nusing this:\n  f x < f y\n\ngoal (1 subgoal):\n 1. x \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f x \\<le> f y)", "using Py"], ["proof (prove)\nusing this:\n  f x < f y\n  y \\<in> F \\<and> (\\<forall>ya\\<in>F. f y \\<le> f ya)\n\ngoal (1 subgoal):\n 1. x \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f x \\<le> f y)", "by auto"], ["proof (state)\nthis:\n  x \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f x \\<le> f y)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "then"], ["proof (chain)\npicking this:\n  x \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f x \\<le> f y)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f x \\<le> f y)\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       xa \\<in> insert x F \\<and>\n       (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa.\n     xa \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f xa \\<le> f y)\n\ngoal (1 subgoal):\n 1. \\<not> f x < f y \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f x < f y \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "assume \"\\<not>f x < f y\""], ["proof (state)\nthis:\n  \\<not> f x < f y\n\ngoal (1 subgoal):\n 1. \\<not> f x < f y \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "then"], ["proof (chain)\npicking this:\n  \\<not> f x < f y", "have \"?minf (insert x F) y\""], ["proof (prove)\nusing this:\n  \\<not> f x < f y\n\ngoal (1 subgoal):\n 1. y \\<in> insert x F \\<and> (\\<forall>ya\\<in>insert x F. f y \\<le> f ya)", "using Py"], ["proof (prove)\nusing this:\n  \\<not> f x < f y\n  y \\<in> F \\<and> (\\<forall>ya\\<in>F. f y \\<le> f ya)\n\ngoal (1 subgoal):\n 1. y \\<in> insert x F \\<and> (\\<forall>ya\\<in>insert x F. f y \\<le> f ya)", "by auto"], ["proof (state)\nthis:\n  y \\<in> insert x F \\<and> (\\<forall>ya\\<in>insert x F. f y \\<le> f ya)\n\ngoal (1 subgoal):\n 1. \\<not> f x < f y \\<Longrightarrow>\n    \\<exists>z.\n       z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)", "then"], ["proof (chain)\npicking this:\n  y \\<in> insert x F \\<and> (\\<forall>ya\\<in>insert x F. f y \\<le> f ya)", "show ?case"], ["proof (prove)\nusing this:\n  y \\<in> insert x F \\<and> (\\<forall>ya\\<in>insert x F. f y \\<le> f ya)\n\ngoal (1 subgoal):\n 1. \\<exists>xa.\n       xa \\<in> insert x F \\<and>\n       (\\<forall>y\\<in>insert x F. f xa \\<le> f y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa.\n     xa \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f xa \\<le> f y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z.\n     z \\<in> insert x F \\<and> (\\<forall>y\\<in>insert x F. f z \\<le> f y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_approx_preserv2:\n  fixes S :: \"'a set\"\n    and X :: \"'a set\"\n    and s :: nat\n    and x :: \"'a\"\n  assumes inv: \"inv_approx S X s\"\n      and x_def: \"x \\<in> V - X\"\n    shows \"inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x}) (max (card (neighbors x \\<union> {x} - X)) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "have finite_S: \"finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S", "using inv and independent_vertices_finite"], ["proof (prove)\nusing this:\n  inv_approx S X s\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   X \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> X) \\<and>\n  card X \\<le> card S * s\n  independent_vertices E ?S \\<Longrightarrow> finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "by auto"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "have Sx: \"x \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S", "using inv and x_def"], ["proof (prove)\nusing this:\n  inv_approx S X s\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  (independent_vertices E S \\<and>\n   X \\<subseteq> V \\<and>\n   (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n   S \\<subseteq> X) \\<and>\n  card X \\<le> card S * s\n  x \\<in> V - X\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "by blast"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "(* main invariant is preserved *)"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "from inv"], ["proof (chain)\npicking this:\n  inv_approx S X s", "have \"inv_iv S X\""], ["proof (prove)\nusing this:\n  inv_approx S X s\n\ngoal (1 subgoal):\n 1. inv_iv S X", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and> card X \\<le> card S * s\n\ngoal (1 subgoal):\n 1. inv_iv S X", "by auto"], ["proof (state)\nthis:\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "with x_def"], ["proof (chain)\npicking this:\n  x \\<in> V - X\n  inv_iv S X", "have \"inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\""], ["proof (prove)\nusing this:\n  x \\<in> V - X\n  inv_iv S X\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})", "proof (intro inv_preserv, auto)"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "(* the approximation ratio is preserved *)"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "moreover"], ["proof (state)\nthis:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "have \"card (X \\<union> neighbors x \\<union> {x}) \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "let ?N = \"neighbors x \\<union> {x} - X\""], ["proof (state)\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "have \"card (X \\<union> ?N) \\<le> card X + card ?N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (X \\<union> (neighbors x \\<union> {x} - X))\n    \\<le> card X + card (neighbors x \\<union> {x} - X)", "using card_Un_le [of X ?N]"], ["proof (prove)\nusing this:\n  card (X \\<union> (neighbors x \\<union> {x} - X))\n  \\<le> card X + card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> (neighbors x \\<union> {x} - X))\n    \\<le> card X + card (neighbors x \\<union> {x} - X)", "by auto"], ["proof (state)\nthis:\n  card (X \\<union> (neighbors x \\<union> {x} - X))\n  \\<le> card X + card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "also"], ["proof (state)\nthis:\n  card (X \\<union> (neighbors x \\<union> {x} - X))\n  \\<le> card X + card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "have \"... \\<le> card S * s + card ?N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X + card (neighbors x \\<union> {x} - X)\n    \\<le> card S * s + card (neighbors x \\<union> {x} - X)", "using inv"], ["proof (prove)\nusing this:\n  inv_approx S X s\n\ngoal (1 subgoal):\n 1. card X + card (neighbors x \\<union> {x} - X)\n    \\<le> card S * s + card (neighbors x \\<union> {x} - X)", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  inv_iv S X \\<and> card X \\<le> card S * s\n\ngoal (1 subgoal):\n 1. card X + card (neighbors x \\<union> {x} - X)\n    \\<le> card S * s + card (neighbors x \\<union> {x} - X)", "by auto"], ["proof (state)\nthis:\n  card X + card (neighbors x \\<union> {x} - X)\n  \\<le> card S * s + card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "also"], ["proof (state)\nthis:\n  card X + card (neighbors x \\<union> {x} - X)\n  \\<le> card S * s + card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "have \"... \\<le> card S * max (card ?N) s + card ?N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card S * s + card (neighbors x \\<union> {x} - X)\n    \\<le> card S * max (card (neighbors x \\<union> {x} - X)) s +\n          card (neighbors x \\<union> {x} - X)", "by auto"], ["proof (state)\nthis:\n  card S * s + card (neighbors x \\<union> {x} - X)\n  \\<le> card S * max (card (neighbors x \\<union> {x} - X)) s +\n        card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "also"], ["proof (state)\nthis:\n  card S * s + card (neighbors x \\<union> {x} - X)\n  \\<le> card S * max (card (neighbors x \\<union> {x} - X)) s +\n        card (neighbors x \\<union> {x} - X)\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "have \"... \\<le> card S * max (card ?N) s + max (card ?N) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card S * max (card (neighbors x \\<union> {x} - X)) s +\n    card (neighbors x \\<union> {x} - X)\n    \\<le> card S * max (card (neighbors x \\<union> {x} - X)) s +\n          max (card (neighbors x \\<union> {x} - X)) s", "by auto"], ["proof (state)\nthis:\n  card S * max (card (neighbors x \\<union> {x} - X)) s +\n  card (neighbors x \\<union> {x} - X)\n  \\<le> card S * max (card (neighbors x \\<union> {x} - X)) s +\n        max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "also"], ["proof (state)\nthis:\n  card S * max (card (neighbors x \\<union> {x} - X)) s +\n  card (neighbors x \\<union> {x} - X)\n  \\<le> card S * max (card (neighbors x \\<union> {x} - X)) s +\n        max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "have \"... = card (insert x S) * max (card ?N) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card S * max (card (neighbors x \\<union> {x} - X)) s +\n    max (card (neighbors x \\<union> {x} - X)) s =\n    card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "using Sx and finite_S"], ["proof (prove)\nusing this:\n  x \\<notin> S\n  finite S\n\ngoal (1 subgoal):\n 1. card S * max (card (neighbors x \\<union> {x} - X)) s +\n    max (card (neighbors x \\<union> {x} - X)) s =\n    card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "by auto"], ["proof (state)\nthis:\n  card S * max (card (neighbors x \\<union> {x} - X)) s +\n  max (card (neighbors x \\<union> {x} - X)) s =\n  card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "finally"], ["proof (chain)\npicking this:\n  card (X \\<union> (neighbors x \\<union> {x} - X))\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "show ?thesis"], ["proof (prove)\nusing this:\n  card (X \\<union> (neighbors x \\<union> {x} - X))\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "by auto"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "(* conclusion *)"], ["proof (state)\nthis:\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "ultimately"], ["proof (chain)\npicking this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "show \"inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x}) (max (card (neighbors x \\<union> {x} - X)) s)\""], ["proof (prove)\nusing this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n     (max (card (neighbors x \\<union> {x} - X)) s)", "unfolding inv_approx_def"], ["proof (prove)\nusing this:\n  inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x})\n  card (X \\<union> neighbors x \\<union> {x})\n  \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s\n\ngoal (1 subgoal):\n 1. inv_iv (insert x S) (X \\<union> neighbors x \\<union> {x}) \\<and>\n    card (X \\<union> neighbors x \\<union> {x})\n    \\<le> card (insert x S) * max (card (neighbors x \\<union> {x} - X)) s", "by auto"], ["proof (state)\nthis:\n  inv_approx (insert x S) (X \\<union> neighbors x \\<union> {x})\n   (max (card (neighbors x \\<union> {x} - X)) s)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem wei_approx_min_degree_heuristic:\n\"VARS (S :: 'a set) (X :: 'a set) (x :: 'a) (r :: nat)\n  { True }\n  S := {};\n  X := {};\n  r := 0;\n  WHILE X \\<noteq> V\n  INV { inv_approx S X r }\n  DO x := (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x);\n     S := insert x S;\n     r := max (card (neighbors x \\<union> {x} - X)) r;\n     X := X \\<union> neighbors x \\<union> {x}\n  OD\n  { approximation_miv r S }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {True} \n     S := {};\n     X := {};\n     r := 0;\n     WHILE X \\<noteq> V INV {inv_approx S X r} \n      VAR {\\<lambda>(S, X, x, r). 0} \n      DO x := (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x);\n         S := insert x S;\n         r := max (card (neighbors x \\<union> {x} - X)) r;\n         X := X \\<union> neighbors x \\<union> {x} \n      OD \n     {approximation_miv r S}", "proof (vcg, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S X x r. True \\<Longrightarrow> inv_approx {} {} 0\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 3. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "case (1 S X x r)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>S X x r. True \\<Longrightarrow> inv_approx {} {} 0\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 3. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "(* invariant initially true *)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>S X x r. True \\<Longrightarrow> inv_approx {} {} 0\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 3. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "then"], ["proof (chain)\npicking this:\n  True", "show ?case"], ["proof (prove)\nusing this:\n  True\n\ngoal (1 subgoal):\n 1. inv_approx {} {} 0", "unfolding inv_approx_def inv_iv_def independent_vertices_def"], ["proof (prove)\nusing this:\n  True\n\ngoal (1 subgoal):\n 1. (({} \\<subseteq> \\<Union> E \\<and>\n      (\\<forall>v1 v2.\n          v1 \\<in> {} \\<and> v2 \\<in> {} \\<longrightarrow>\n          {v1, v2} \\<notin> E)) \\<and>\n     {} \\<subseteq> V \\<and>\n     (\\<forall>v1\\<in>V - {}.\n         \\<forall>v2\\<in>{}. {v1, v2} \\<notin> E) \\<and>\n     {} \\<subseteq> {}) \\<and>\n    card {} \\<le> card {} * 0", "by auto"], ["proof (state)\nthis:\n  inv_approx {} {} 0\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "case (2 S X x r)"], ["proof (state)\nthis:\n  inv_approx S X r \\<and> X \\<noteq> V\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "(* invariant preserved by loop *)\n  (* definedness of assignment *)"], ["proof (state)\nthis:\n  inv_approx S X r \\<and> X \\<noteq> V\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "let ?x = \"(SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "have \"V - X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "using 2"], ["proof (prove)\nusing this:\n  inv_approx S X r \\<and> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  ((independent_vertices E S \\<and>\n    X \\<subseteq> V \\<and>\n    (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n    S \\<subseteq> X) \\<and>\n   card X \\<le> card S * r) \\<and>\n  X \\<noteq> V\n\ngoal (1 subgoal):\n 1. V - X \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  V - X \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "moreover"], ["proof (state)\nthis:\n  V - X \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "have \"finite (V - X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (V - X)", "using 2 and finite_V"], ["proof (prove)\nusing this:\n  inv_approx S X r \\<and> X \\<noteq> V\n  finite V\n\ngoal (1 subgoal):\n 1. finite (V - X)", "by auto"], ["proof (state)\nthis:\n  finite (V - X)\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "ultimately"], ["proof (chain)\npicking this:\n  V - X \\<noteq> {}\n  finite (V - X)", "have \"\\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x\""], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n  finite (V - X)\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x", "using ex_min_finite_set [where ?f = \"\\<lambda>x. card (neighbors x - X)\"]"], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n  finite (V - X)\n  \\<lbrakk>finite ?S; ?S \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       x \\<in> ?S \\<and>\n                       (\\<forall>y\\<in>?S.\n                           card (neighbors x - X)\n                           \\<le> card (neighbors y - X))\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x", "unfolding vertex_heuristic_def"], ["proof (prove)\nusing this:\n  V - X \\<noteq> {}\n  finite (V - X)\n  \\<lbrakk>finite ?S; ?S \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       x \\<in> ?S \\<and>\n                       (\\<forall>y\\<in>?S.\n                           card (neighbors x - X)\n                           \\<le> card (neighbors y - X))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> V - X \\<and>\n       (\\<forall>u\\<in>V - X.\n           card (neighbors x - X) \\<le> card (neighbors u - X))", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x", "have x_def: \"?x \\<in> V - X \\<and> vertex_heuristic X ?x\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n    vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)", "using someI_ex [where ?P = \"\\<lambda>x. x \\<in> V - X \\<and> vertex_heuristic X x\"]"], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x\n  \\<exists>x. x \\<in> V - X \\<and> vertex_heuristic X x \\<Longrightarrow>\n  (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n  vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n    vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)", "by auto"], ["proof (state)\nthis:\n  (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n  vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)\n\ngoal (2 subgoals):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> X \\<noteq> V \\<Longrightarrow>\n       inv_approx\n        (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n        (X \\<union>\n         neighbors\n          (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n         {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n        (max (card\n               (neighbors\n                 (SOME x.\n                     x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n                {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n                X))\n          r)\n 2. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "with 2"], ["proof (chain)\npicking this:\n  inv_approx S X r \\<and> X \\<noteq> V\n  (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n  vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)", "show ?case"], ["proof (prove)\nusing this:\n  inv_approx S X r \\<and> X \\<noteq> V\n  (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n  vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)\n\ngoal (1 subgoal):\n 1. inv_approx\n     (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n     (X \\<union>\n      neighbors (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n      {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n     (max (card\n            (neighbors\n              (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n             {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n             X))\n       r)", "using inv_approx_preserv2"], ["proof (prove)\nusing this:\n  inv_approx S X r \\<and> X \\<noteq> V\n  (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<in> V - X \\<and>\n  vertex_heuristic X (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x)\n  \\<lbrakk>inv_approx ?S ?X ?s; ?x \\<in> V - ?X\\<rbrakk>\n  \\<Longrightarrow> inv_approx (insert ?x ?S)\n                     (?X \\<union> neighbors ?x \\<union> {?x})\n                     (max (card (neighbors ?x \\<union> {?x} - ?X)) ?s)\n\ngoal (1 subgoal):\n 1. inv_approx\n     (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n     (X \\<union>\n      neighbors (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n      {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n     (max (card\n            (neighbors\n              (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n             {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n             X))\n       r)", "by auto"], ["proof (state)\nthis:\n  inv_approx (insert (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) S)\n   (X \\<union>\n    neighbors (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n    {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x})\n   (max (card\n          (neighbors\n            (SOME x. x \\<in> V - X \\<and> vertex_heuristic X x) \\<union>\n           {SOME x. x \\<in> V - X \\<and> vertex_heuristic X x} -\n           X))\n     r)\n\ngoal (1 subgoal):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "case (3 S X x r)"], ["proof (state)\nthis:\n  inv_approx S X r \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>S X x r.\n       inv_approx S X r \\<and> \\<not> X \\<noteq> V \\<Longrightarrow>\n       approximation_miv r S", "then"], ["proof (chain)\npicking this:\n  inv_approx S X r \\<and> \\<not> X \\<noteq> V", "show ?case"], ["proof (prove)\nusing this:\n  inv_approx S X r \\<and> \\<not> X \\<noteq> V\n\ngoal (1 subgoal):\n 1. approximation_miv r S", "using inv_approx"], ["proof (prove)\nusing this:\n  inv_approx S X r \\<and> \\<not> X \\<noteq> V\n  \\<lbrakk>independent_vertices E ?S; card V \\<le> card ?S * ?r\\<rbrakk>\n  \\<Longrightarrow> approximation_miv ?r ?S\n\ngoal (1 subgoal):\n 1. approximation_miv r S", "unfolding inv_approx_def inv_iv_def"], ["proof (prove)\nusing this:\n  ((independent_vertices E S \\<and>\n    X \\<subseteq> V \\<and>\n    (\\<forall>v1\\<in>V - X. \\<forall>v2\\<in>S. {v1, v2} \\<notin> E) \\<and>\n    S \\<subseteq> X) \\<and>\n   card X \\<le> card S * r) \\<and>\n  \\<not> X \\<noteq> V\n  \\<lbrakk>independent_vertices E ?S; card V \\<le> card ?S * ?r\\<rbrakk>\n  \\<Longrightarrow> approximation_miv ?r ?S\n\ngoal (1 subgoal):\n 1. approximation_miv r S", "by auto"], ["proof (state)\nthis:\n  approximation_miv r S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}