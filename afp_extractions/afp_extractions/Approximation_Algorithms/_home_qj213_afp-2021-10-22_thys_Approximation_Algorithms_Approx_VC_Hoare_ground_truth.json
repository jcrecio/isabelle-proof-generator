{"file_name": "/home/qj213/afp-2021-10-22/thys/Approximation_Algorithms/Approx_VC_Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Approximation_Algorithms", "problem_names": ["lemma card_matching_vertex_cover:\n  \"\\<lbrakk> finite C;  matching M;  M \\<subseteq> E;  vertex_cover E C \\<rbrakk> \\<Longrightarrow> card M \\<le> card C\"", "lemma invar_step:\n  assumes \"F \\<noteq> {}\" \"invar C F\"\n  shows \"invar (C \\<union> some F) (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\"", "lemma approx_vertex_cover:\n\"VARS C F\n  {True}\n  C := {};\n  F := E;\n  WHILE F \\<noteq> {}\n  INV {invar C F}\n  DO C := C \\<union> some F;\n     F := F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}\n  OD\n  {vertex_cover E C \\<and> (\\<forall>C'. finite C' \\<and> vertex_cover E C' \\<longrightarrow> card C \\<le> 2 * card C')}\"", "lemma invar_step:\n  assumes \"F \\<noteq> {}\" \"invar C F\"\n  shows \"invar (C \\<union> some F) (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\"", "lemma approx_vertex_cover_bnd:\n\"VARS C F\n  {True}\n  C := {};\n  F := E;\n  WHILE F \\<noteq> {}\n  INV {invar C F}\n  DO C := C \\<union> some F;\n     F := F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}\n  OD\n  {vertex_cover E C \\<and> (\\<forall>C'. finite C' \\<and> vertex_cover E C' \\<longrightarrow> card C \\<le> k * card C')}\""], "translations": [["", "lemma card_matching_vertex_cover:\n  \"\\<lbrakk> finite C;  matching M;  M \\<subseteq> E;  vertex_cover E C \\<rbrakk> \\<Longrightarrow> card M \\<le> card C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite C; matching M; M \\<subseteq> E;\n     vertex_cover E C\\<rbrakk>\n    \\<Longrightarrow> card M \\<le> card C", "apply(erule card_le_if_inj_on_rel[where r = \"\\<lambda>e v. v \\<in> e\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>matching M; M \\<subseteq> E; vertex_cover E C;\n        a \\<in> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> C \\<and> b \\<in> a\n 2. \\<And>a1 a2 b.\n       \\<lbrakk>matching M; M \\<subseteq> E; vertex_cover E C; a1 \\<in> M;\n        a2 \\<in> M; b \\<in> C; b \\<in> a1; b \\<in> a2\\<rbrakk>\n       \\<Longrightarrow> a1 = a2", "apply (meson disjnt_def disjnt_iff vertex_cover_def subsetCE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 b.\n       \\<lbrakk>matching M; M \\<subseteq> E; vertex_cover E C; a1 \\<in> M;\n        a2 \\<in> M; b \\<in> C; b \\<in> a1; b \\<in> a2\\<rbrakk>\n       \\<Longrightarrow> a1 = a2", "by (meson disjnt_iff pairwise_def)"], ["", "subsection \"The Approximation Algorithm\""], ["", "text \\<open>Formulated using a simple(!) predefined Hoare-logic.\nThis leads to a streamlined proof based on standard invariant reasoning.\n\nThe nondeterministic selection of an element from a set \\<open>F\\<close> is simulated by @{term \"SOME x. x \\<in> F\"}.\nThe \\<open>SOME\\<close> operator is built into HOL: @{term \"SOME x. P x\"} denotes some \\<open>x\\<close> that satisfies \\<open>P\\<close>\nif such an \\<open>x\\<close> exists; otherwise it denotes an arbitrary element. Note that there is no\nactual nondeterminism involved: @{term \"SOME x. P x\"} is some fixed element\nbut in general we don't know which one. Proofs about \\<open>SOME\\<close> are notoriously tedious.\nTypically it involves showing first that @{prop \"\\<exists>x. P x\"}. Then @{thm someI_ex} implies\n@{prop\"P (SOME x. P x)\"}. There are a number of (more) useful related theorems:\njust click on @{thm someI_ex} to be taken there.\\<close>"], ["", "text \\<open>Convenient notation for choosing an arbitrary element from a set:\\<close>"], ["", "abbreviation \"some A \\<equiv> SOME x. x \\<in> A\""], ["", "locale Edges =\n  fixes E :: \"'a set set\"\n  assumes finE: \"finite E\"\n  assumes edges2: \"e \\<in> E \\<Longrightarrow> card e = 2\"\nbegin"], ["", "text \\<open>The invariant:\\<close>"], ["", "definition \"inv_matching C F M =\n  (matching M \\<and> M \\<subseteq> E \\<and> card C \\<le> 2 * card M \\<and> (\\<forall>e \\<in> M. \\<forall>f \\<in> F. e \\<inter> f = {}))\""], ["", "definition invar :: \"'a set \\<Rightarrow> 'a set set \\<Rightarrow> bool\" where\n\"invar C F = (F \\<subseteq> E \\<and> vertex_cover (E-F) C \\<and> finite C \\<and> (\\<exists>M. inv_matching C F M))\""], ["", "text \\<open>Preservation of the invariant by the loop body:\\<close>"], ["", "lemma invar_step:\n  assumes \"F \\<noteq> {}\" \"invar C F\"\n  shows \"invar (C \\<union> some F) (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "from assms(2)"], ["proof (chain)\npicking this:\n  invar C F", "obtain M where \"F \\<subseteq> E\" and vc: \"vertex_cover (E-F) C\" and fC: \"finite C\"\n    and m: \"matching M\" \"M \\<subseteq> E\" and card: \"card C \\<le> 2 * card M\"\n    and disj: \"\\<forall>e \\<in> M. \\<forall>f \\<in> F. e \\<inter> f = {}\""], ["proof (prove)\nusing this:\n  invar C F\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>F \\<subseteq> E; vertex_cover (E - F) C; finite C;\n         matching M; M \\<subseteq> E; card C \\<le> 2 * card M;\n         \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: invar_def inv_matching_def)"], ["proof (state)\nthis:\n  F \\<subseteq> E\n  vertex_cover (E - F) C\n  finite C\n  matching M\n  M \\<subseteq> E\n  card C \\<le> 2 * card M\n  \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "let ?e = \"SOME e. e \\<in> F\""], ["proof (state)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have \"?e \\<in> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some F \\<in> F", "using \\<open>F \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. some F \\<in> F", "by (simp add: some_in_eq)"], ["proof (state)\nthis:\n  some F \\<in> F\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "hence fe': \"finite ?e\""], ["proof (prove)\nusing this:\n  some F \\<in> F\n\ngoal (1 subgoal):\n 1. finite (some F)", "using \\<open>F \\<subseteq> E\\<close> edges2"], ["proof (prove)\nusing this:\n  some F \\<in> F\n  F \\<subseteq> E\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n\ngoal (1 subgoal):\n 1. finite (some F)", "by(intro card_ge_0_finite) auto"], ["proof (state)\nthis:\n  finite (some F)\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have \"?e \\<notin> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some F \\<notin> M", "using edges2 \\<open>?e \\<in> F\\<close> disj \\<open>F \\<subseteq> E\\<close>"], ["proof (prove)\nusing this:\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n  some F \\<in> F\n  \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\n  F \\<subseteq> E\n\ngoal (1 subgoal):\n 1. some F \\<notin> M", "by fastforce"], ["proof (state)\nthis:\n  some F \\<notin> M\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have card': \"card (C \\<union> ?e) \\<le> 2 * card (insert ?e M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (C \\<union> some F) \\<le> 2 * card (insert (some F) M)", "using \\<open>?e \\<in> F\\<close> \\<open>?e \\<notin> M\\<close> card_Un_le[of C ?e] \\<open>F \\<subseteq> E\\<close> edges2 card finite_subset[OF m(2) finE]"], ["proof (prove)\nusing this:\n  some F \\<in> F\n  some F \\<notin> M\n  card (C \\<union> some F) \\<le> card C + card (some F)\n  F \\<subseteq> E\n  ?e \\<in> E \\<Longrightarrow> card ?e = 2\n  card C \\<le> 2 * card M\n  finite M\n\ngoal (1 subgoal):\n 1. card (C \\<union> some F) \\<le> 2 * card (insert (some F) M)", "by fastforce"], ["proof (state)\nthis:\n  card (C \\<union> some F) \\<le> 2 * card (insert (some F) M)\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "let ?M = \"M \\<union> {?e}\""], ["proof (state)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have vc': \"vertex_cover (E - (F - {e' \\<in> F. ?e \\<inter> e' \\<noteq> {}})) (C \\<union> ?e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n     (C \\<union> some F)", "using vc"], ["proof (prove)\nusing this:\n  vertex_cover (E - F) C\n\ngoal (1 subgoal):\n 1. vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n     (C \\<union> some F)", "by(auto simp: vertex_cover_def)"], ["proof (state)\nthis:\n  vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n   (C \\<union> some F)\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have m': \"inv_matching (C \\<union> ?e) (F - {e' \\<in> F. ?e \\<inter> e' \\<noteq> {}}) ?M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_matching (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n     (M \\<union> {some F})", "using m card' \\<open>F \\<subseteq> E\\<close> \\<open>?e \\<in> F\\<close> disj"], ["proof (prove)\nusing this:\n  matching M\n  M \\<subseteq> E\n  card (C \\<union> some F) \\<le> 2 * card (insert (some F) M)\n  F \\<subseteq> E\n  some F \\<in> F\n  \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\n\ngoal (1 subgoal):\n 1. inv_matching (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n     (M \\<union> {some F})", "by(auto simp: inv_matching_def Int_commute disjnt_def pairwise_insert)"], ["proof (state)\nthis:\n  inv_matching (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}) (M \\<union> {some F})\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "using \\<open>F \\<subseteq> E\\<close> vc' fC fe' m'"], ["proof (prove)\nusing this:\n  F \\<subseteq> E\n  vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n   (C \\<union> some F)\n  finite C\n  finite (some F)\n  inv_matching (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}) (M \\<union> {some F})\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "by(auto simp add: invar_def Let_def)"], ["proof (state)\nthis:\n  invar (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma approx_vertex_cover:\n\"VARS C F\n  {True}\n  C := {};\n  F := E;\n  WHILE F \\<noteq> {}\n  INV {invar C F}\n  DO C := C \\<union> some F;\n     F := F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}\n  OD\n  {vertex_cover E C \\<and> (\\<forall>C'. finite C' \\<and> vertex_cover E C' \\<longrightarrow> card C \\<le> 2 * card C')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {True} \n     C := {};\n     F := E;\n     WHILE F \\<noteq> {} INV {\\<lambda>(x, y). invar x y} \n      VAR {\\<lambda>(C, F). 0} \n      DO C := C \\<union> some F;\n         F := F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}} \n      OD \n     {vertex_cover E C \\<and>\n      (\\<forall>C'.\n          finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n          card C \\<le> 2 * card C')}", "proof (vcg, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>C F. True \\<Longrightarrow> invar {} E\n 2. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 3. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "case (1 C F)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>C F. True \\<Longrightarrow> invar {} E\n 2. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 3. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "have \"inv_matching {} E {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_matching {} E {}", "by (auto simp add: inv_matching_def)"], ["proof (state)\nthis:\n  inv_matching {} E {}\n\ngoal (3 subgoals):\n 1. \\<And>C F. True \\<Longrightarrow> invar {} E\n 2. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 3. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "with 1"], ["proof (chain)\npicking this:\n  True\n  inv_matching {} E {}", "show ?case"], ["proof (prove)\nusing this:\n  True\n  inv_matching {} E {}\n\ngoal (1 subgoal):\n 1. invar {} E", "by (auto simp add: invar_def vertex_cover_def)"], ["proof (state)\nthis:\n  invar {} E\n\ngoal (2 subgoals):\n 1. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 2. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 2. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "case (2 C F)"], ["proof (state)\nthis:\n  invar C F \\<and> F \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 2. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "thus ?case"], ["proof (prove)\nusing this:\n  invar C F \\<and> F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "using invar_step[of F C]"], ["proof (prove)\nusing this:\n  invar C F \\<and> F \\<noteq> {}\n  \\<lbrakk>F \\<noteq> {}; invar C F\\<rbrakk>\n  \\<Longrightarrow> invar (C \\<union> some F)\n                     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "by(auto simp: Let_def)"], ["proof (state)\nthis:\n  invar (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "case (3 C F)"], ["proof (state)\nthis:\n  invar C F \\<and> \\<not> F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "then"], ["proof (chain)\npicking this:\n  invar C F \\<and> \\<not> F \\<noteq> {}", "obtain M :: \"'a set set\" where\n    post: \"vertex_cover E C\" \"matching M\" \"M \\<subseteq> E\" \"card C \\<le> 2 * card M\""], ["proof (prove)\nusing this:\n  invar C F \\<and> \\<not> F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>vertex_cover E C; matching M; M \\<subseteq> E;\n         card C \\<le> 2 * card M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp: invar_def inv_matching_def)"], ["proof (state)\nthis:\n  vertex_cover E C\n  matching M\n  M \\<subseteq> E\n  card C \\<le> 2 * card M\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "have opt: \"card C \\<le> 2 * card C'\" if C': \"finite C'\" \"vertex_cover E C'\" for C'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card C \\<le> 2 * card C'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card C \\<le> 2 * card C'", "note post(4)"], ["proof (state)\nthis:\n  card C \\<le> 2 * card M\n\ngoal (1 subgoal):\n 1. card C \\<le> 2 * card C'", "also"], ["proof (state)\nthis:\n  card C \\<le> 2 * card M\n\ngoal (1 subgoal):\n 1. card C \\<le> 2 * card C'", "have \"2 * card M \\<le> 2 * card C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * card M \\<le> 2 * card C'", "using card_matching_vertex_cover[OF C'(1) post(2,3) C'(2)]"], ["proof (prove)\nusing this:\n  card M \\<le> card C'\n\ngoal (1 subgoal):\n 1. 2 * card M \\<le> 2 * card C'", "by simp"], ["proof (state)\nthis:\n  2 * card M \\<le> 2 * card C'\n\ngoal (1 subgoal):\n 1. card C \\<le> 2 * card C'", "finally"], ["proof (chain)\npicking this:\n  card C \\<le> 2 * card C'", "show \"card C \\<le> 2 * card C'\""], ["proof (prove)\nusing this:\n  card C \\<le> 2 * card C'\n\ngoal (1 subgoal):\n 1. card C \\<le> 2 * card C'", "."], ["proof (state)\nthis:\n  card C \\<le> 2 * card C'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?C'1; vertex_cover E ?C'1\\<rbrakk>\n  \\<Longrightarrow> card C \\<le> 2 * card ?C'1\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> 2 * card C')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_cover E C \\<and>\n    (\\<forall>C'.\n        finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n        card C \\<le> 2 * card C')", "using post(1) opt"], ["proof (prove)\nusing this:\n  vertex_cover E C\n  \\<lbrakk>finite ?C'1; vertex_cover E ?C'1\\<rbrakk>\n  \\<Longrightarrow> card C \\<le> 2 * card ?C'1\n\ngoal (1 subgoal):\n 1. vertex_cover E C \\<and>\n    (\\<forall>C'.\n        finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n        card C \\<le> 2 * card C')", "by auto"], ["proof (state)\nthis:\n  vertex_cover E C \\<and>\n  (\\<forall>C'.\n      finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n      card C \\<le> 2 * card C')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* locale Graph *)"], ["", "subsection \"Version for Hypergraphs\""], ["", "text \\<open>Almost the same. We assume that the degree of every edge is bounded.\\<close>"], ["", "locale Bounded_Hypergraph =\n  fixes E :: \"'a set set\"\n  fixes k :: nat\n  assumes finE: \"finite E\"\n  assumes edge_bnd: \"e \\<in> E \\<Longrightarrow> finite e \\<and> card e \\<le> k\"\n  assumes E1: \"{} \\<notin> E\"\nbegin"], ["", "definition \"inv_matching C F M =\n  (matching M \\<and> M \\<subseteq> E \\<and> card C \\<le> k * card M \\<and> (\\<forall>e \\<in> M. \\<forall>f \\<in> F. e \\<inter> f = {}))\""], ["", "definition invar :: \"'a set \\<Rightarrow> 'a set set \\<Rightarrow> bool\" where\n\"invar C F = (F \\<subseteq> E \\<and> vertex_cover (E-F) C \\<and> finite C \\<and> (\\<exists>M. inv_matching C F M))\""], ["", "lemma invar_step:\n  assumes \"F \\<noteq> {}\" \"invar C F\"\n  shows \"invar (C \\<union> some F) (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "from assms(2)"], ["proof (chain)\npicking this:\n  invar C F", "obtain M where \"F \\<subseteq> E\" and vc: \"vertex_cover (E-F) C\" and fC: \"finite C\"\n    and m: \"matching M\" \"M \\<subseteq> E\" and card: \"card C \\<le> k * card M\"\n    and disj: \"\\<forall>e \\<in> M. \\<forall>f \\<in> F. e \\<inter> f = {}\""], ["proof (prove)\nusing this:\n  invar C F\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>F \\<subseteq> E; vertex_cover (E - F) C; finite C;\n         matching M; M \\<subseteq> E; card C \\<le> k * card M;\n         \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: invar_def inv_matching_def)"], ["proof (state)\nthis:\n  F \\<subseteq> E\n  vertex_cover (E - F) C\n  finite C\n  matching M\n  M \\<subseteq> E\n  card C \\<le> k * card M\n  \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "let ?e = \"SOME e. e \\<in> F\""], ["proof (state)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have \"?e \\<in> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some F \\<in> F", "using \\<open>F \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. some F \\<in> F", "by (simp add: some_in_eq)"], ["proof (state)\nthis:\n  some F \\<in> F\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "hence fe': \"finite ?e\""], ["proof (prove)\nusing this:\n  some F \\<in> F\n\ngoal (1 subgoal):\n 1. finite (some F)", "using \\<open>F \\<subseteq> E\\<close> assms(2) edge_bnd"], ["proof (prove)\nusing this:\n  some F \\<in> F\n  F \\<subseteq> E\n  invar C F\n  ?e \\<in> E \\<Longrightarrow> finite ?e \\<and> card ?e \\<le> k\n\ngoal (1 subgoal):\n 1. finite (some F)", "by blast"], ["proof (state)\nthis:\n  finite (some F)\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have \"?e \\<notin> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. some F \\<notin> M", "using E1 \\<open>?e \\<in> F\\<close> disj \\<open>F \\<subseteq> E\\<close>"], ["proof (prove)\nusing this:\n  {} \\<notin> E\n  some F \\<in> F\n  \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\n  F \\<subseteq> E\n\ngoal (1 subgoal):\n 1. some F \\<notin> M", "by fastforce"], ["proof (state)\nthis:\n  some F \\<notin> M\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have card': \"card (C \\<union> ?e) \\<le> k * card (insert ?e M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (C \\<union> some F) \\<le> k * card (insert (some F) M)", "using \\<open>?e \\<in> F\\<close> \\<open>?e \\<notin> M\\<close> card_Un_le[of C ?e] \\<open>F \\<subseteq> E\\<close> edge_bnd card finite_subset[OF m(2) finE]"], ["proof (prove)\nusing this:\n  some F \\<in> F\n  some F \\<notin> M\n  card (C \\<union> some F) \\<le> card C + card (some F)\n  F \\<subseteq> E\n  ?e \\<in> E \\<Longrightarrow> finite ?e \\<and> card ?e \\<le> k\n  card C \\<le> k * card M\n  finite M\n\ngoal (1 subgoal):\n 1. card (C \\<union> some F) \\<le> k * card (insert (some F) M)", "by fastforce"], ["proof (state)\nthis:\n  card (C \\<union> some F) \\<le> k * card (insert (some F) M)\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "let ?M = \"M \\<union> {?e}\""], ["proof (state)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have vc': \"vertex_cover (E - (F - {e' \\<in> F. ?e \\<inter> e' \\<noteq> {}})) (C \\<union> ?e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n     (C \\<union> some F)", "using vc"], ["proof (prove)\nusing this:\n  vertex_cover (E - F) C\n\ngoal (1 subgoal):\n 1. vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n     (C \\<union> some F)", "by(auto simp: vertex_cover_def)"], ["proof (state)\nthis:\n  vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n   (C \\<union> some F)\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "have m': \"inv_matching (C \\<union> ?e) (F - {e' \\<in> F. ?e \\<inter> e' \\<noteq> {}}) ?M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_matching (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n     (M \\<union> {some F})", "using m card' \\<open>F \\<subseteq> E\\<close> \\<open>?e \\<in> F\\<close> disj"], ["proof (prove)\nusing this:\n  matching M\n  M \\<subseteq> E\n  card (C \\<union> some F) \\<le> k * card (insert (some F) M)\n  F \\<subseteq> E\n  some F \\<in> F\n  \\<forall>e\\<in>M. \\<forall>f\\<in>F. e \\<inter> f = {}\n\ngoal (1 subgoal):\n 1. inv_matching (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n     (M \\<union> {some F})", "by(auto simp: inv_matching_def Int_commute disjnt_def pairwise_insert)"], ["proof (state)\nthis:\n  inv_matching (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}) (M \\<union> {some F})\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "using \\<open>F \\<subseteq> E\\<close> vc' fC fe' m'"], ["proof (prove)\nusing this:\n  F \\<subseteq> E\n  vertex_cover (E - (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}))\n   (C \\<union> some F)\n  finite C\n  finite (some F)\n  inv_matching (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}) (M \\<union> {some F})\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "by(auto simp add: invar_def Let_def)"], ["proof (state)\nthis:\n  invar (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma approx_vertex_cover_bnd:\n\"VARS C F\n  {True}\n  C := {};\n  F := E;\n  WHILE F \\<noteq> {}\n  INV {invar C F}\n  DO C := C \\<union> some F;\n     F := F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}}\n  OD\n  {vertex_cover E C \\<and> (\\<forall>C'. finite C' \\<and> vertex_cover E C' \\<longrightarrow> card C \\<le> k * card C')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {True} \n     C := {};\n     F := E;\n     WHILE F \\<noteq> {} INV {\\<lambda>(x, y). invar x y} \n      VAR {\\<lambda>(C, F). 0} \n      DO C := C \\<union> some F;\n         F := F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}} \n      OD \n     {vertex_cover E C \\<and>\n      (\\<forall>C'.\n          finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n          card C \\<le> k * card C')}", "proof (vcg, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>C F. True \\<Longrightarrow> invar {} E\n 2. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 3. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "case (1 C F)"], ["proof (state)\nthis:\n  True\n\ngoal (3 subgoals):\n 1. \\<And>C F. True \\<Longrightarrow> invar {} E\n 2. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 3. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "have \"inv_matching {} E {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_matching {} E {}", "by (auto simp add: inv_matching_def)"], ["proof (state)\nthis:\n  inv_matching {} E {}\n\ngoal (3 subgoals):\n 1. \\<And>C F. True \\<Longrightarrow> invar {} E\n 2. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 3. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "with 1"], ["proof (chain)\npicking this:\n  True\n  inv_matching {} E {}", "show ?case"], ["proof (prove)\nusing this:\n  True\n  inv_matching {} E {}\n\ngoal (1 subgoal):\n 1. invar {} E", "by (auto simp add: invar_def vertex_cover_def)"], ["proof (state)\nthis:\n  invar {} E\n\ngoal (2 subgoals):\n 1. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 2. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 2. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "case (2 C F)"], ["proof (state)\nthis:\n  invar C F \\<and> F \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>C F.\n       invar C F \\<and> F \\<noteq> {} \\<Longrightarrow>\n       invar (C \\<union> some F)\n        (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n 2. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "thus ?case"], ["proof (prove)\nusing this:\n  invar C F \\<and> F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "using invar_step[of F C]"], ["proof (prove)\nusing this:\n  invar C F \\<and> F \\<noteq> {}\n  \\<lbrakk>F \\<noteq> {}; invar C F\\<rbrakk>\n  \\<Longrightarrow> invar (C \\<union> some F)\n                     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n\ngoal (1 subgoal):\n 1. invar (C \\<union> some F)\n     (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})", "by(auto simp: Let_def)"], ["proof (state)\nthis:\n  invar (C \\<union> some F)\n   (F - {e' \\<in> F. some F \\<inter> e' \\<noteq> {}})\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "case (3 C F)"], ["proof (state)\nthis:\n  invar C F \\<and> \\<not> F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "then"], ["proof (chain)\npicking this:\n  invar C F \\<and> \\<not> F \\<noteq> {}", "obtain M :: \"'a set set\" where\n    post: \"vertex_cover E C\" \"matching M\" \"M \\<subseteq> E\" \"card C \\<le> k * card M\""], ["proof (prove)\nusing this:\n  invar C F \\<and> \\<not> F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>vertex_cover E C; matching M; M \\<subseteq> E;\n         card C \\<le> k * card M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp: invar_def inv_matching_def)"], ["proof (state)\nthis:\n  vertex_cover E C\n  matching M\n  M \\<subseteq> E\n  card C \\<le> k * card M\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "have opt: \"card C \\<le> k * card C'\" if C': \"finite C'\" \"vertex_cover E C'\" for C'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card C \\<le> k * card C'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card C \\<le> k * card C'", "note post(4)"], ["proof (state)\nthis:\n  card C \\<le> k * card M\n\ngoal (1 subgoal):\n 1. card C \\<le> k * card C'", "also"], ["proof (state)\nthis:\n  card C \\<le> k * card M\n\ngoal (1 subgoal):\n 1. card C \\<le> k * card C'", "have \"k * card M \\<le> k * card C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * card M \\<le> k * card C'", "using card_matching_vertex_cover[OF C'(1) post(2,3) C'(2)]"], ["proof (prove)\nusing this:\n  card M \\<le> card C'\n\ngoal (1 subgoal):\n 1. k * card M \\<le> k * card C'", "by simp"], ["proof (state)\nthis:\n  k * card M \\<le> k * card C'\n\ngoal (1 subgoal):\n 1. card C \\<le> k * card C'", "finally"], ["proof (chain)\npicking this:\n  card C \\<le> k * card C'", "show \"card C \\<le> k * card C'\""], ["proof (prove)\nusing this:\n  card C \\<le> k * card C'\n\ngoal (1 subgoal):\n 1. card C \\<le> k * card C'", "."], ["proof (state)\nthis:\n  card C \\<le> k * card C'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?C'1; vertex_cover E ?C'1\\<rbrakk>\n  \\<Longrightarrow> card C \\<le> k * card ?C'1\n\ngoal (1 subgoal):\n 1. \\<And>C F.\n       invar C F \\<and> \\<not> F \\<noteq> {} \\<Longrightarrow>\n       vertex_cover E C \\<and>\n       (\\<forall>C'.\n           finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n           card C \\<le> k * card C')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex_cover E C \\<and>\n    (\\<forall>C'.\n        finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n        card C \\<le> k * card C')", "using post(1) opt"], ["proof (prove)\nusing this:\n  vertex_cover E C\n  \\<lbrakk>finite ?C'1; vertex_cover E ?C'1\\<rbrakk>\n  \\<Longrightarrow> card C \\<le> k * card ?C'1\n\ngoal (1 subgoal):\n 1. vertex_cover E C \\<and>\n    (\\<forall>C'.\n        finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n        card C \\<le> k * card C')", "by auto"], ["proof (state)\nthis:\n  vertex_cover E C \\<and>\n  (\\<forall>C'.\n      finite C' \\<and> vertex_cover E C' \\<longrightarrow>\n      card C \\<le> k * card C')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* locale Bounded_Hypergraph *)"], ["", "end"]]}