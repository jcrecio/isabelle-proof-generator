{"file_name": "/home/qj213/afp-2021-10-22/thys/HOLCF-Prelude/Data_Bool.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HOLCF-Prelude", "problem_names": ["lemma eq_eqI[case_names bottomLTR bottomRTL LTR RTL]:\n  \"(x = \\<bottom> \\<Longrightarrow> y = \\<bottom>) \\<Longrightarrow> (y = \\<bottom> \\<Longrightarrow> x = \\<bottom>) \\<Longrightarrow> (x = TT \\<Longrightarrow> y = TT) \\<Longrightarrow> (y = TT \\<Longrightarrow> x = TT) \\<Longrightarrow> x = y\"", "lemma eq_tr_simps [simp]:\n  shows \"eq\\<cdot>TT\\<cdot>TT = TT\" and \"eq\\<cdot>TT\\<cdot>FF = FF\"\n    and \"eq\\<cdot>FF\\<cdot>TT = FF\" and \"eq\\<cdot>FF\\<cdot>FF = TT\"", "lemma compare_tr_simps [simp]:\n  \"compare\\<cdot>FF\\<cdot>FF = EQ\"\n  \"compare\\<cdot>FF\\<cdot>TT = LT\"\n  \"compare\\<cdot>TT\\<cdot>FF = GT\"\n  \"compare\\<cdot>TT\\<cdot>TT = EQ\"", "lemma andalso_eq_TT_iff [simp]:\n  \"(x andalso y) = TT \\<longleftrightarrow> x = TT \\<and> y = TT\"", "lemma andalso_eq_FF_iff [simp]:\n  \"(x andalso y) = FF \\<longleftrightarrow> x = FF \\<or> (x = TT \\<and> y = FF)\"", "lemma andalso_eq_bottom_iff [simp]:\n  \"(x andalso y) = \\<bottom> \\<longleftrightarrow> x = \\<bottom> \\<or> (x = TT \\<and> y = \\<bottom>)\"", "lemma orelse_eq_FF_iff [simp]:\n  \"(x orelse y) = FF \\<longleftrightarrow> x = FF \\<and> y = FF\"", "lemma orelse_assoc [simp]:\n  \"((x orelse y) orelse z) = (x orelse y orelse z)\"", "lemma andalso_assoc [simp]:\n  \"((x andalso y) andalso z) = (x andalso y andalso z)\"", "lemma neg_orelse [simp]:\n  \"neg\\<cdot>(x orelse y) = (neg\\<cdot>x andalso neg\\<cdot>y)\"", "lemma neg_andalso [simp]:\n  \"neg\\<cdot>(x andalso y) = (neg\\<cdot>x orelse neg\\<cdot>y)\"", "lemma neg_eq_simps:\n  \"neg\\<cdot>x = TT \\<Longrightarrow> x = FF\"\n  \"neg\\<cdot>x = FF \\<Longrightarrow> x = TT\"\n  \"neg\\<cdot>x = \\<bottom> \\<Longrightarrow> x = \\<bottom>\"", "lemma neg_eq_TT_iff [simp]: \"neg\\<cdot>x = TT \\<longleftrightarrow> x = FF\"", "lemma neg_eq_FF_iff [simp]: \"neg\\<cdot>x = FF \\<longleftrightarrow> x = TT\"", "lemma neg_eq_bottom_iff [simp]: \"neg\\<cdot>x = \\<bottom> \\<longleftrightarrow> x = \\<bottom>\"", "lemma neg_eq [simp]:\n  \"neg\\<cdot>x = neg\\<cdot>y \\<longleftrightarrow> x = y\"", "lemma neg_neg [simp]:\n  \"neg\\<cdot>(neg\\<cdot>x) = x\"", "lemma neg_comp_neg [simp]:\n  \"neg oo neg = ID\""], "translations": [["", "lemma eq_eqI[case_names bottomLTR bottomRTL LTR RTL]:\n  \"(x = \\<bottom> \\<Longrightarrow> y = \\<bottom>) \\<Longrightarrow> (y = \\<bottom> \\<Longrightarrow> x = \\<bottom>) \\<Longrightarrow> (x = TT \\<Longrightarrow> y = TT) \\<Longrightarrow> (y = TT \\<Longrightarrow> x = TT) \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = \\<bottom> \\<Longrightarrow> y = \\<bottom>;\n     y = \\<bottom> \\<Longrightarrow> x = \\<bottom>;\n     x = TT \\<Longrightarrow> y = TT;\n     y = TT \\<Longrightarrow> x = TT\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (metis Exh_tr)"], ["", "lemma eq_tr_simps [simp]:\n  shows \"eq\\<cdot>TT\\<cdot>TT = TT\" and \"eq\\<cdot>TT\\<cdot>FF = FF\"\n    and \"eq\\<cdot>FF\\<cdot>TT = FF\" and \"eq\\<cdot>FF\\<cdot>FF = TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eq\\<cdot>TT\\<cdot>TT = TT &&& eq\\<cdot>TT\\<cdot>FF = FF) &&&\n    eq\\<cdot>FF\\<cdot>TT = FF &&& eq\\<cdot>FF\\<cdot>FF = TT", "unfolding TT_def FF_def eq_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Lambda> (Def x) (Def y). Def (x = y))\\<cdot>(Def True)\\<cdot>\n     (Def True) =\n     Def True &&&\n     (\\<Lambda> (Def x) (Def y). Def (x = y))\\<cdot>(Def True)\\<cdot>\n     (Def False) =\n     Def False) &&&\n    (\\<Lambda> (Def x) (Def y). Def (x = y))\\<cdot>(Def False)\\<cdot>\n    (Def True) =\n    Def False &&&\n    (\\<Lambda> (Def x) (Def y). Def (x = y))\\<cdot>(Def False)\\<cdot>\n    (Def False) =\n    Def True", "by simp_all"], ["", "text \\<open>Ord\\<close>"], ["", "lemma compare_tr_simps [simp]:\n  \"compare\\<cdot>FF\\<cdot>FF = EQ\"\n  \"compare\\<cdot>FF\\<cdot>TT = LT\"\n  \"compare\\<cdot>TT\\<cdot>FF = GT\"\n  \"compare\\<cdot>TT\\<cdot>TT = EQ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compare\\<cdot>FF\\<cdot>FF = EQ &&& compare\\<cdot>FF\\<cdot>TT = LT) &&&\n    compare\\<cdot>TT\\<cdot>FF = GT &&& compare\\<cdot>TT\\<cdot>TT = EQ", "unfolding TT_def FF_def compare_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Lambda> (Def x) (Def y).\n         if x < y then LT else if y < x then GT else EQ)\\<cdot>\n     (Def False)\\<cdot>\n     (Def False) =\n     EQ &&&\n     (\\<Lambda> (Def x) (Def y).\n         if x < y then LT else if y < x then GT else EQ)\\<cdot>\n     (Def False)\\<cdot>\n     (Def True) =\n     LT) &&&\n    (\\<Lambda> (Def x) (Def y).\n        if x < y then LT else if y < x then GT else EQ)\\<cdot>\n    (Def True)\\<cdot>\n    (Def False) =\n    GT &&&\n    (\\<Lambda> (Def x) (Def y).\n        if x < y then LT else if y < x then GT else EQ)\\<cdot>\n    (Def True)\\<cdot>\n    (Def True) =\n    EQ", "by simp_all"], ["", "subsection \\<open>Lemmas\\<close>"], ["", "lemma andalso_eq_TT_iff [simp]:\n  \"(x andalso y) = TT \\<longleftrightarrow> x = TT \\<and> y = TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x andalso y) = TT) = (x = TT \\<and> y = TT)", "by (cases x, simp_all)"], ["", "lemma andalso_eq_FF_iff [simp]:\n  \"(x andalso y) = FF \\<longleftrightarrow> x = FF \\<or> (x = TT \\<and> y = FF)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x andalso y) = FF) = (x = FF \\<or> x = TT \\<and> y = FF)", "by (cases x, simp_all)"], ["", "lemma andalso_eq_bottom_iff [simp]:\n  \"(x andalso y) = \\<bottom> \\<longleftrightarrow> x = \\<bottom> \\<or> (x = TT \\<and> y = \\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x andalso y) = \\<bottom>) =\n    (x = \\<bottom> \\<or> x = TT \\<and> y = \\<bottom>)", "by (cases x, simp_all)"], ["", "lemma orelse_eq_FF_iff [simp]:\n  \"(x orelse y) = FF \\<longleftrightarrow> x = FF \\<and> y = FF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x orelse y) = FF) = (x = FF \\<and> y = FF)", "by (cases x, simp_all)"], ["", "lemma orelse_assoc [simp]:\n  \"((x orelse y) orelse z) = (x orelse y orelse z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x orelse y) orelse z) = (x orelse y orelse z)", "by (cases x) auto"], ["", "lemma andalso_assoc [simp]:\n  \"((x andalso y) andalso z) = (x andalso y andalso z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x andalso y) andalso z) = (x andalso y andalso z)", "by (cases x) auto"], ["", "lemma neg_orelse [simp]:\n  \"neg\\<cdot>(x orelse y) = (neg\\<cdot>x andalso neg\\<cdot>y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. neg\\<cdot>(x orelse y) = (neg\\<cdot>x andalso neg\\<cdot>y)", "by (cases x) auto"], ["", "lemma neg_andalso [simp]:\n  \"neg\\<cdot>(x andalso y) = (neg\\<cdot>x orelse neg\\<cdot>y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. neg\\<cdot>(x andalso y) = (neg\\<cdot>x orelse neg\\<cdot>y)", "by (cases x) auto"], ["", "text \\<open>Not suitable as default simp rules, because they cause the\n  simplifier to loop:\\<close>"], ["", "lemma neg_eq_simps:\n  \"neg\\<cdot>x = TT \\<Longrightarrow> x = FF\"\n  \"neg\\<cdot>x = FF \\<Longrightarrow> x = TT\"\n  \"neg\\<cdot>x = \\<bottom> \\<Longrightarrow> x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (neg\\<cdot>x = TT \\<Longrightarrow> x = FF) &&&\n    (neg\\<cdot>x = FF \\<Longrightarrow> x = TT) &&&\n    (neg\\<cdot>x = \\<bottom> \\<Longrightarrow> x = \\<bottom>)", "by (cases x, simp_all)+"], ["", "lemma neg_eq_TT_iff [simp]: \"neg\\<cdot>x = TT \\<longleftrightarrow> x = FF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (neg\\<cdot>x = TT) = (x = FF)", "by (cases x, simp_all)+"], ["", "lemma neg_eq_FF_iff [simp]: \"neg\\<cdot>x = FF \\<longleftrightarrow> x = TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (neg\\<cdot>x = FF) = (x = TT)", "by (cases x, simp_all)+"], ["", "lemma neg_eq_bottom_iff [simp]: \"neg\\<cdot>x = \\<bottom> \\<longleftrightarrow> x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (neg\\<cdot>x = \\<bottom>) = (x = \\<bottom>)", "by (cases x, simp_all)+"], ["", "(* TODO: set up reorient_proc for TT and FF *)"], ["", "lemma neg_eq [simp]:\n  \"neg\\<cdot>x = neg\\<cdot>y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (neg\\<cdot>x = neg\\<cdot>y) = (x = y)", "by (cases y, simp_all)"], ["", "lemma neg_neg [simp]:\n  \"neg\\<cdot>(neg\\<cdot>x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. neg\\<cdot>(neg\\<cdot>x) = x", "by (cases x, auto)"], ["", "lemma neg_comp_neg [simp]:\n  \"neg oo neg = ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. neg oo neg = ID", "by (metis cfun_eqI cfcomp2 neg_neg ID1)"], ["", "end"]]}