{"file_name": "/home/qj213/afp-2021-10-22/thys/QHLProver/Partial_State.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/QHLProver", "problem_names": ["lemma nths_intersection_eq:\n  assumes \"{0..<length xs} \\<subseteq> A\"\n  shows \"nths xs B = nths xs (A \\<inter> B)\"", "lemma nths_minus_eq:\n  assumes \"{0..<length xs} \\<subseteq> A\"\n  shows \"nths xs (-B) = nths xs (A - B)\"", "lemma nths_split_complement_eq:\n  assumes \"A \\<inter> B = {}\"\n  and \"{0..<length xs} \\<subseteq> A \\<union> B\"\nshows \"nths xs A = nths xs (-B)\"", "lemma lt_set_card_lt:\n  fixes A :: \"nat set\"\n  assumes \"finite A\" and \"x \\<in> A\"\n  shows \"card {y. y \\<in> A \\<and> y < x} < card A\"", "lemma bij_ind_in_set_bound:\n  fixes M :: \"nat\" and v0 :: \"nat set\"\n  assumes \"\\<And>x. f x = card {y. y \\<in> v0 \\<and> y < x}\"\n  shows \"bij_betw f ({0..<M} \\<inter> v0) {0..<card ({0..<M} \\<inter> v0)}\"", "lemma ind_in_set_bound:\n  fixes A :: \"nat set\" and M N :: \"nat\"\n  assumes \"N \\<ge> M\" \n  shows \"ind_in_set A N \\<notin> (ind_in_set A ` ({0..<M} \\<inter> A))\"", "lemma bij_minus_subset:\n  \"bij_betw f A B \\<Longrightarrow> C \\<subseteq> A \\<Longrightarrow> (f ` A) - (f ` C) = f ` (A - C)\"", "lemma ind_in_set_minus_subset_bound:\n  fixes A B :: \"nat set\" and M :: \"nat\"\n  assumes \"B \\<subseteq> A\"\n  shows \"(ind_in_set A ` ({0..<M} \\<inter> A)) - (ind_in_set A ` B) = (ind_in_set A ` ({0..<M} \\<inter> A)) \\<inter> (ind_in_set A ` (A - B))\"", "lemma ind_in_set_iff:\n  fixes A B :: \"nat set\"\n  assumes \"x \\<in> A\" and \"B \\<subseteq> A\"\n  shows \"ind_in_set A x \\<in> (ind_in_set A ` B) = (x \\<in> B)\"", "lemma nths_reencode_eq:\n  assumes \"B \\<subseteq> A\"\n  shows \"nths (nths xs A) (ind_in_set A ` B) = nths xs B\"", "lemma nths_reencode_eq_comp:\n  assumes \"B \\<subseteq> A\"\n  shows \"nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)\"", "lemma nths_prod_list_split:\n  fixes A :: \"nat set\" and xs :: \"nat list\"\n  assumes \"B \\<subseteq> A\"\n  shows \"prod_list (nths xs A) = (prod_list (nths xs B)) * (prod_list (nths xs (A - B)))\"", "lemma digit_encode_take:\n  \"take n (digit_encode ds a) = digit_encode (take n ds) a\"", "lemma nths_minus_upt_eq_drop:\n  \"nths l (-{..<n}) = drop n l\"", "lemma digit_encode_drop:\n  \"drop n (digit_encode ds a) = digit_encode (drop n ds) (a div (prod_list (take n ds)))\"", "lemma dims1_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"dims1 = nths dims (A \\<inter> vars)\"", "lemma dims2_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"dims2 = nths dims (A-vars)\"", "lemma encode1_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"encode1 i = digit_decode dims1 (nths (digit_encode dims i) (A \\<inter> vars))\"", "lemma encode2_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"encode2 i = digit_decode dims2 (nths (digit_encode dims i) (A-vars))\"", "lemma encode1_lt [simp]:\n  assumes \"i < d\"\n  shows \"encode1 i < d1\"", "lemma encode2_lt [simp]:\n  assumes \"i < d\"\n  shows \"encode2 i < d2\"", "lemma encode12_inv:\n  assumes \"k < d\"\n  shows \"encode12 (encode1 k, encode2 k) = k\"", "lemma encode12_inv1:\n  assumes \"i < d1\" \"j < d2\"\n  shows \"encode1 (encode12 (i, j)) = i\"", "lemma encode12_inv2:\n  assumes \"i < d1\" \"j < d2\"\n  shows \"encode2 (encode12 (i, j)) = j\"", "lemma encode12_lt:\n  assumes \"i < d1\" \"j < d2\"\n  shows \"encode12 (i, j) < d\"", "lemma sum_encode: \"(\\<Sum>i = 0..<d1. \\<Sum>j = 0..<d2. f i j) = sum (\\<lambda>k. f (encode1 k) (encode2 k)) {0..<d}\"", "lemma tensor_vec_dim [simp]:\n  \"dim_vec (tensor_vec v1 v2) = d\"", "lemma tensor_vec_carrier:\n  \"tensor_vec v1 v2 \\<in> carrier_vec d\"", "lemma tensor_vec_eval:\n  assumes \"i < d\"\n  shows \"tensor_vec v1 v2 $ i = v1 $ encode1 i * v2 $ encode2 i\"", "lemma tensor_vec_add1:\n  fixes v1 v2 v3 :: \"'a::comm_ring vec\"\n  assumes \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d1\"\n    and \"v3 \\<in> carrier_vec d2\"\n  shows \"tensor_vec (v1 + v2) v3 = tensor_vec v1 v3 + tensor_vec v2 v3\"", "lemma tensor_vec_add2:\n  fixes v1 v2 v3 :: \"'a::comm_ring vec\"\n  assumes \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d2\"\n    and \"v3 \\<in> carrier_vec d2\"\n  shows \"tensor_vec v1 (v2 + v3) = tensor_vec v1 v2 + tensor_vec v1 v3\"", "lemma tensor_mat_dim_row [simp]:\n  \"dim_row (tensor_mat m1 m2) = d\"", "lemma tensor_mat_dim_col [simp]:\n  \"dim_col (tensor_mat m1 m2) = d\"", "lemma tensor_mat_carrier:\n  \"tensor_mat m1 m2 \\<in> carrier_mat d d\"", "lemma tensor_mat_eval:\n  assumes \"i < d\" \"j < d\"\n  shows \"tensor_mat m1 m2 $$ (i, j) = m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)\"", "lemma tensor_mat_zero1:\n  shows \"tensor_mat (0\\<^sub>m d1 d1) m1 = 0\\<^sub>m d d\"", "lemma tensor_mat_zero2:\n  shows \"tensor_mat m1 (0\\<^sub>m d2 d2) = 0\\<^sub>m d d\"", "lemma tensor_mat_add1:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (m1 + m2) m3 = tensor_mat m1 m3 + tensor_mat m2 m3\"", "lemma tensor_mat_add2:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat m1 (m2 + m3) = tensor_mat m1 m2 + tensor_mat m1 m3\"", "lemma tensor_mat_minus1:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (m1 - m2) m3 = tensor_mat m1 m3 - tensor_mat m2 m3\"", "lemma tensor_mat_matrix_sum2:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n  shows \"(\\<And>k. k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2)\n    \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n = tensor_mat m1 (matrix_sum d2 f n)\"", "lemma tensor_mat_scale1:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (a \\<cdot>\\<^sub>m m1) m2 = a \\<cdot>\\<^sub>m tensor_mat m1 m2\"", "lemma tensor_mat_scale2:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat m1 (a \\<cdot>\\<^sub>m m2) = a \\<cdot>\\<^sub>m tensor_mat m1 m2\"", "lemma tensor_mat_trace:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"trace (tensor_mat m1 m2) = trace m1 * trace m2\"", "lemma tensor_mat_id:\n  \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d\"", "lemma tensor_mat_mult_vec:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d2\"\n  shows \"tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) = tensor_mat m1 m2 *\\<^sub>v tensor_vec v1 v2\"", "lemma tensor_mat_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n    and \"m4 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (m1 * m2) (m3 * m4) = tensor_mat m1 m3 * tensor_mat m2 m4\"", "lemma tensor_mat_adjoint:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"adjoint (tensor_mat m1 m2) = tensor_mat (adjoint m1) (adjoint m2)\"", "lemma tensor_mat_hermitian:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"hermitian m1\"\n    and \"hermitian m2\"\n  shows \"hermitian (tensor_mat m1 m2)\"", "lemma tensor_mat_unitary:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"unitary m1\"\n    and \"unitary m2\"\n  shows \"unitary (tensor_mat m1 m2)\"", "lemma tensor_mat_positive:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"positive m1\"\n    and \"positive m2\"\n  shows \"positive (tensor_mat m1 m2)\"", "lemma tensor_mat_positive_le:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"positive m1\"\n    and \"positive m2\"\n    and \"m1 \\<le>\\<^sub>L A\"\n    and \"m2 \\<le>\\<^sub>L B\"\n  shows \"tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B\"", "lemma tensor_mat_le_one:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"positive m1\"\n    and \"positive m2\"\n    and \"m1 \\<le>\\<^sub>L 1\\<^sub>m d1\"\n    and \"m2 \\<le>\\<^sub>L 1\\<^sub>m d2\"\n  shows \"tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d\"", "lemma mat_extension_carrier:\n  \"mat_extension m \\<in> carrier_mat d d\"", "lemma mat_extension_add:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"mat_extension (m1 + m2) = mat_extension m1 + mat_extension m2\"", "lemma mat_extension_trace:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n  shows \"trace (mat_extension m) = d2 * trace m\"", "lemma mat_extension_id:\n  \"mat_extension (1\\<^sub>m d1) = 1\\<^sub>m d\"", "lemma mat_extension_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"mat_extension (m1 * m2) = mat_extension m1 * mat_extension m2\"", "lemma mat_extension_hermitian:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n    and \"hermitian m\"\n  shows \"hermitian (mat_extension m)\"", "lemma mat_extension_unitary:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n    and \"unitary m\"\n  shows \"unitary (mat_extension m)\"", "lemma tensor_mat_comm:\n  assumes \"vars1 \\<inter> vars2 = {}\"\n    and \"{0..<length dims} \\<subseteq> vars1 \\<union> vars2\"\n    and \"m1 \\<in> carrier_mat (prod_list (nths dims vars1)) (prod_list (nths dims vars1))\"\n    and \"m2 \\<in> carrier_mat (prod_list (nths dims vars2)) (prod_list (nths dims vars2))\"\n  shows \"tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1\"", "lemma dims_product:\n  \"d0 = d1 * d2\"", "lemma vars1'I:\n  \"x \\<in> vars1 \\<Longrightarrow> card {y\\<in>vars0. y < x} \\<in> vars1'\"", "lemma vars1'D:\n  \"i \\<in> vars1' \\<Longrightarrow> \\<exists>x\\<in>vars1. card {y\\<in>vars0. y < x} = i\"", "lemma ind_in_set_bij:\n  \"bij_betw (ind_in_set vars0) ({0..<length dims} \\<inter> vars0) {0..<card ({0..<length dims} \\<inter> vars0)}\"", "lemma length_dims0:\n  \"length dims0 = card ({0..<length dims} \\<inter> vars0)\"", "lemma length_dims0_minus_vars2'_is_vars1':\n  \"{0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'\"", "lemma length_dims0_minus_vars1'_is_vars2':\n  \"{0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'\"", "lemma nths_vars1':\n  \"nths dims0 vars1' = dims1\"", "lemma nths_vars1'_comp:\n  \"nths dims0 (-vars2') = dims1\"", "lemma nths_vars2':\n  \"nths dims0 (-vars1') = dims2\"", "lemma nths_vars2'_comp:\n  \"nths dims0 (vars2') = dims2\"", "lemma ptensor_encode1_encode2:\n  \"partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'\"", "lemma ptensor_encode2_encode1:\n  \"partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'\"", "lemma ptensor_vec_dim [simp]:\n  \"dim_vec (ptensor_vec v1 v2) = d0\"", "lemma ptensor_vec_carrier:\n  \"ptensor_vec v1 v2 \\<in> carrier_vec d0\"", "lemma ptensor_vec_add:\n  fixes v1 v2 v3 :: \"'a::comm_ring vec\"\n  assumes \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d1\"\n    and \"v3 \\<in> carrier_vec d2\"\n  shows \"ptensor_vec (v1 + v2) v3 = ptensor_vec v1 v3 + ptensor_vec v2 v3\"", "lemma ptensor_mat_dim_row [simp]:\n  \"dim_row (ptensor_mat m1 m2) = d0\"", "lemma ptensor_mat_dim_col [simp]:\n  \"dim_col (ptensor_mat m1 m2) = d0\"", "lemma ptensor_mat_carrier:\n  \"ptensor_mat m1 m2 \\<in> carrier_mat d0 d0\"", "lemma ptensor_mat_add:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"ptensor_mat (m1 + m2) m3 = ptensor_mat m1 m3 + ptensor_mat m2 m3\"", "lemma ptensor_mat_trace:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"trace (ptensor_mat m1 m2) = trace m1 * trace m2\"", "lemma ptensor_mat_id:\n  \"ptensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d0\"", "lemma ptensor_mat_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n    and \"m4 \\<in> carrier_mat d2 d2\"\n  shows \"ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4\"", "lemma ptensor_mat_mult_vec:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"v1 \\<in> carrier_vec d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"v2 \\<in> carrier_vec d2\"\n  shows \"ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) = ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2\"", "lemma pmat_extension_carrier:\n  \"pmat_extension m \\<in> carrier_mat d0 d0\"", "lemma pmat_extension_add:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"pmat_extension (m1 + m2) = pmat_extension m1 + pmat_extension m2\"", "lemma pmat_extension_trace:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n  shows \"trace (pmat_extension m) = d2 * trace m\"", "lemma pmat_extension_id:\n  \"pmat_extension (1\\<^sub>m d1) = 1\\<^sub>m d0\"", "lemma pmat_extension_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"pmat_extension (m1 * m2) = pmat_extension m1 * pmat_extension m2\"", "lemma ptensor_mat_comm:\n  fixes m1 m2 :: \"complex mat\"\n  assumes \"vars1 \\<inter> vars2 = {}\"\n  shows \"ptensor_mat dims vars1 vars2 m1 m2 = ptensor_mat dims vars2 vars1 m2 m1\"", "lemma ind_in_set_mono:\n  fixes a b :: nat and A :: \"nat set\"\n  assumes \"a \\<in> A\" \"b \\<in> A\" \"a < b\"\n  shows \"ind_in_set A a < ind_in_set A b\"", "lemma ind_in_set_inj:\n  fixes a b :: nat and A :: \"nat set\"\n  assumes \"a \\<in> A\" \"b \\<in> A\" \"ind_in_set A a = ind_in_set A b\"\n  shows \"a = b\"", "lemma ind_in_set_mono2:\n  fixes a b :: nat and A :: \"nat set\"\n  assumes \"a \\<in> A\" \"b \\<in> A\" \"ind_in_set A a < ind_in_set A b\"\n  shows \"a < b\"", "lemma ind_in_set_bij_betw:\n  fixes A B :: \"nat set\"\n  assumes \"B \\<subseteq> A\" \"c \\<in> B\"\n  shows \"bij_betw (ind_in_set A) {i \\<in> B. i < c} {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\"", "lemma ind_in_set_assoc:\n  fixes A B C :: \"nat set\"\n  assumes \"C \\<subseteq> B\" \"B \\<subseteq> A\"\n  shows \"ind_in_set (ind_in_set A ` B) ` (ind_in_set A ` C) = ind_in_set B ` C\"", "lemma nths_reencode_eq3:\n  fixes A B C :: \"nat set\"\n  assumes \"C \\<subseteq> B\" \"B \\<subseteq> A\"\n  shows \"nths (nths xs (ind_in_set A ` B)) (ind_in_set B ` C) = nths xs (ind_in_set A ` C)\"", "lemma nths_assoc_three_A:\n  fixes A B C :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    and \"(A \\<union> B) \\<inter> C = {}\"\n  shows \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B))) (ind_in_set (A \\<union> B) ` A)\n       = nths xs (ind_in_set (A \\<union> B \\<union> C) ` A)\"", "lemma nths_assoc_three_B:\n  fixes A B C :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    and \"(A \\<union> B) \\<inter> C = {}\"\n  shows \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B))) (ind_in_set (A \\<union> B) ` B)\n       = nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C))) (ind_in_set (B \\<union> C) ` B)\"", "lemma nths_assoc_three_C:\n  fixes A B C :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    and \"(A \\<union> B) \\<inter> C = {}\"\n  shows \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C))) (ind_in_set (B \\<union> C) ` C)\n    = nths xs (ind_in_set (A \\<union> B \\<union> C) ` C) \"", "lemma valid_index_ind_in_set:\n  assumes \"is \\<lhd> nths dims A\" \"B \\<subseteq> A\"\n  shows \"nths is (ind_in_set A ` B) \\<lhd> nths dims B\"", "lemma ind_in_set_id:\n  fixes A :: \"nat set\"\n  assumes \"finite A\"\n  shows \"ind_in_set A ` A = {0..< card A}\"", "lemma nths_complement_ind_in_set:\n  fixes A B :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    \"card (A \\<union> B) = length xs\"\n  shows \"nths xs (- ind_in_set (A \\<union> B) ` A) = nths xs (ind_in_set (A \\<union> B) ` B)\"", "lemma ind_in_set_inj':\n  fixes A B :: \"nat set\"\n  assumes \"B \\<subseteq> A\"\n  shows \"inj_on (ind_in_set A) B\"", "lemma ind_in_set_less:\n  fixes x :: nat and A :: \"nat set\"\n  assumes \"finite A\" \"x \\<in> A\"\n  shows \"ind_in_set A x < card A\"", "lemma ptensor_mat_assoc:\n  assumes \"vars1 \\<inter> vars2 = {}\"\n    and \"(vars1 \\<union> vars2) \\<inter> vars3 = {}\"\n    and \"vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..< length dims}\"\n  shows \"ptensor_mat dims (vars1 \\<union> vars2) vars3 (ptensor_mat dims vars1 vars2 m1 m2) m3 =\n         ptensor_mat dims vars1 (vars2 \\<union> vars3) m1 (ptensor_mat dims vars2 vars3 m2 m3)\"", "lemma pmat_extension_assoc:\n  assumes \"vars1 \\<inter> vars2 = {}\"\n    and \"(vars1 \\<union> vars2) \\<inter> vars3 = {}\"\n    and \"vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..< length dims}\"\n  shows \"pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n         pmat_extension dims (vars1 \\<union> vars2) vars3 (pmat_extension dims vars1 vars2 m)\"", "lemma well_com_Utrans_P:\n  assumes \"U \\<in> carrier_mat (prod_list (nths dims vars)) (prod_list (nths dims vars))\"\n    and \"unitary U\"\n  shows \"well_com (Utrans_P vars U)\""], "translations": [["", "lemma nths_intersection_eq:\n  assumes \"{0..<length xs} \\<subseteq> A\"\n  shows \"nths xs B = nths xs (A \\<inter> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "have \"\\<And>x. x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n       snd x < length xs", "by (metis atLeastLessThan_iff atLeastLessThan_upt in_set_zip nth_mem)"], ["proof (state)\nthis:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs\n\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs", "have \"\\<And>x. x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> A\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs\n  {0..<length xs} \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> A", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x \\<in> A\n\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x \\<in> A", "have eqp: \"\\<And>x. x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> B = (snd x \\<in> (A \\<inter> B))\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n       (snd x \\<in> B) = (snd x \\<in> A \\<inter> B)", "by simp"], ["proof (state)\nthis:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> B) = (snd ?x \\<in> A \\<inter> B)\n\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> B) = (snd ?x \\<in> A \\<inter> B)", "have \"filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) = filter (\\<lambda>p. snd p \\<in> (A \\<inter> B)) (zip xs [0..<length xs])\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> B) = (snd ?x \\<in> A \\<inter> B)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) =\n    filter (\\<lambda>p. snd p \\<in> A \\<inter> B) (zip xs [0..<length xs])", "using filter_cong[of \"(zip xs [0..<length xs])\" \"(zip xs [0..<length xs])\", OF _ eqp]"], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> B) = (snd ?x \\<in> A \\<inter> B)\n  \\<lbrakk>zip xs [0..<length xs] = zip xs [0..<length xs];\n   \\<And>x.\n      x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n      ?x1 x \\<in> set (zip xs [0..<length xs])\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>x. snd (?x1 x) \\<in> B)\n                     (zip xs [0..<length xs]) =\n                    filter (\\<lambda>x. snd (?x1 x) \\<in> A \\<inter> B)\n                     (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) =\n    filter (\\<lambda>p. snd p \\<in> A \\<inter> B) (zip xs [0..<length xs])", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A \\<inter> B) (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A \\<inter> B) (zip xs [0..<length xs])", "show \"nths xs B = nths xs (A \\<inter> B)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A \\<inter> B) (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. nths xs B = nths xs (A \\<inter> B)", "unfolding nths_def"], ["proof (prove)\nusing this:\n  filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A \\<inter> B) (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. map fst (filter (\\<lambda>p. snd p \\<in> B) (zip xs [0..<length xs])) =\n    map fst\n     (filter (\\<lambda>p. snd p \\<in> A \\<inter> B)\n       (zip xs [0..<length xs]))", "by auto"], ["proof (state)\nthis:\n  nths xs B = nths xs (A \\<inter> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_minus_eq:\n  assumes \"{0..<length xs} \\<subseteq> A\"\n  shows \"nths xs (-B) = nths xs (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "have \"\\<And>x. x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n       snd x < length xs", "by (metis atLeastLessThan_iff atLeastLessThan_upt in_set_zip nth_mem)"], ["proof (state)\nthis:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs\n\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs", "have \"\\<And>x. x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> A\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x < length xs\n  {0..<length xs} \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> A", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x \\<in> A\n\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x \\<in> A", "have eqp: \"\\<And>x. x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd x \\<in> (-B) = (snd x \\<in> (A - B))\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow> snd ?x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n       (snd x \\<in> - B) = (snd x \\<in> A - B)", "by simp"], ["proof (state)\nthis:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> - B) = (snd ?x \\<in> A - B)\n\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> - B) = (snd ?x \\<in> A - B)", "have \"filter (\\<lambda>p. snd p \\<in> (-B)) (zip xs [0..<length xs]) = filter (\\<lambda>p. snd p \\<in> (A-B)) (zip xs [0..<length xs])\""], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> - B) = (snd ?x \\<in> A - B)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs]) =\n    filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs])", "using filter_cong[of \"(zip xs [0..<length xs])\" \"(zip xs [0..<length xs])\", OF _ eqp]"], ["proof (prove)\nusing this:\n  ?x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n  (snd ?x \\<in> - B) = (snd ?x \\<in> A - B)\n  \\<lbrakk>zip xs [0..<length xs] = zip xs [0..<length xs];\n   \\<And>x.\n      x \\<in> set (zip xs [0..<length xs]) \\<Longrightarrow>\n      ?x1 x \\<in> set (zip xs [0..<length xs])\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>x. snd (?x1 x) \\<in> - B)\n                     (zip xs [0..<length xs]) =\n                    filter (\\<lambda>x. snd (?x1 x) \\<in> A - B)\n                     (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs]) =\n    filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs])", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs])", "show \"nths xs (-B) = nths xs (A - B)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A - B)", "unfolding nths_def"], ["proof (prove)\nusing this:\n  filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs]) =\n  filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs])\n\ngoal (1 subgoal):\n 1. map fst\n     (filter (\\<lambda>p. snd p \\<in> - B) (zip xs [0..<length xs])) =\n    map fst\n     (filter (\\<lambda>p. snd p \\<in> A - B) (zip xs [0..<length xs]))", "by auto"], ["proof (state)\nthis:\n  nths xs (- B) = nths xs (A - B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_split_complement_eq:\n  assumes \"A \\<inter> B = {}\"\n  and \"{0..<length xs} \\<subseteq> A \\<union> B\"\nshows \"nths xs A = nths xs (-B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs A = nths xs (- B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths xs A = nths xs (- B)", "have \"nths xs (-B) = nths xs (A \\<union> B - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A \\<union> B - B)", "using nths_minus_eq assms"], ["proof (prove)\nusing this:\n  {0..<length ?xs} \\<subseteq> ?A \\<Longrightarrow>\n  nths ?xs (- ?B) = nths ?xs (?A - ?B)\n  A \\<inter> B = {}\n  {0..<length xs} \\<subseteq> A \\<union> B\n\ngoal (1 subgoal):\n 1. nths xs (- B) = nths xs (A \\<union> B - B)", "by auto"], ["proof (state)\nthis:\n  nths xs (- B) = nths xs (A \\<union> B - B)\n\ngoal (1 subgoal):\n 1. nths xs A = nths xs (- B)", "moreover"], ["proof (state)\nthis:\n  nths xs (- B) = nths xs (A \\<union> B - B)\n\ngoal (1 subgoal):\n 1. nths xs A = nths xs (- B)", "have \"A \\<union> B - B = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<union> B - B = A", "using assms"], ["proof (prove)\nusing this:\n  A \\<inter> B = {}\n  {0..<length xs} \\<subseteq> A \\<union> B\n\ngoal (1 subgoal):\n 1. A \\<union> B - B = A", "by auto"], ["proof (state)\nthis:\n  A \\<union> B - B = A\n\ngoal (1 subgoal):\n 1. nths xs A = nths xs (- B)", "ultimately"], ["proof (chain)\npicking this:\n  nths xs (- B) = nths xs (A \\<union> B - B)\n  A \\<union> B - B = A", "show ?thesis"], ["proof (prove)\nusing this:\n  nths xs (- B) = nths xs (A \\<union> B - B)\n  A \\<union> B - B = A\n\ngoal (1 subgoal):\n 1. nths xs A = nths xs (- B)", "by auto"], ["proof (state)\nthis:\n  nths xs A = nths xs (- B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_set_card_lt:\n  fixes A :: \"nat set\"\n  assumes \"finite A\" and \"x \\<in> A\"\n  shows \"card {y. y \\<in> A \\<and> y < x} < card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "have \"x \\<notin> {y. y \\<in> A \\<and> y < x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> {y \\<in> A. y < x}", "by auto"], ["proof (state)\nthis:\n  x \\<notin> {y \\<in> A. y < x}\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "then"], ["proof (chain)\npicking this:\n  x \\<notin> {y \\<in> A. y < x}", "have \"{y. y \\<in> A \\<and> y < x} \\<subseteq> A - {x}\""], ["proof (prove)\nusing this:\n  x \\<notin> {y \\<in> A. y < x}\n\ngoal (1 subgoal):\n 1. {y \\<in> A. y < x} \\<subseteq> A - {x}", "by auto"], ["proof (state)\nthis:\n  {y \\<in> A. y < x} \\<subseteq> A - {x}\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "then"], ["proof (chain)\npicking this:\n  {y \\<in> A. y < x} \\<subseteq> A - {x}", "have \"card {y. y \\<in> A \\<and> y < x} \\<le> card (A - {x})\""], ["proof (prove)\nusing this:\n  {y \\<in> A. y < x} \\<subseteq> A - {x}\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} \\<le> card (A - {x})", "using card_mono finite_Diff[OF assms(1)]"], ["proof (prove)\nusing this:\n  {y \\<in> A. y < x} \\<subseteq> A - {x}\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n  finite (A - ?B)\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} \\<le> card (A - {x})", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> A. y < x} \\<le> card (A - {x})\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "also"], ["proof (state)\nthis:\n  card {y \\<in> A. y < x} \\<le> card (A - {x})\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "have \"\\<dots> < card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (A - {x}) < card A", "using card_Diff1_less[OF assms]"], ["proof (prove)\nusing this:\n  card (A - {x}) < card A\n\ngoal (1 subgoal):\n 1. card (A - {x}) < card A", "by auto"], ["proof (state)\nthis:\n  card (A - {x}) < card A\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "finally"], ["proof (chain)\npicking this:\n  card {y \\<in> A. y < x} < card A", "show ?thesis"], ["proof (prove)\nusing this:\n  card {y \\<in> A. y < x} < card A\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} < card A", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> A. y < x} < card A\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ind_in_set where\n  \"ind_in_set A x = card {i. i \\<in> A \\<and> i < x}\""], ["", "lemma bij_ind_in_set_bound:\n  fixes M :: \"nat\" and v0 :: \"nat set\"\n  assumes \"\\<And>x. f x = card {y. y \\<in> v0 \\<and> y < x}\"\n  shows \"bij_betw f ({0..<M} \\<inter> v0) {0..<card ({0..<M} \\<inter> v0)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f ({0..<M} \\<inter> v0) {0..<card ({0..<M} \\<inter> v0)}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f ({0..<M} \\<inter> v0) \\<and>\n    f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "let ?dom = \"{0..<M} \\<inter> v0\""], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "let ?ran = \"{0..<card ({0..<M} \\<inter> v0)}\""], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "fix x1 x2 :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "assume x1: \"x1 \\<in> ?dom\" and x2: \"x2 \\<in> ?dom\" and \"f x1 = f x2\""], ["proof (state)\nthis:\n  x1 \\<in> {0..<M} \\<inter> v0\n  x2 \\<in> {0..<M} \\<inter> v0\n  f x1 = f x2\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  x1 \\<in> {0..<M} \\<inter> v0\n  x2 \\<in> {0..<M} \\<inter> v0\n  f x1 = f x2", "have \"card {y. y \\<in> v0 \\<and> y < x1} = card {y. y \\<in> v0 \\<and> y < x2}\""], ["proof (prove)\nusing this:\n  x1 \\<in> {0..<M} \\<inter> v0\n  x2 \\<in> {0..<M} \\<inter> v0\n  f x1 = f x2\n\ngoal (1 subgoal):\n 1. card {y \\<in> v0. y < x1} = card {y \\<in> v0. y < x2}", "using assms"], ["proof (prove)\nusing this:\n  x1 \\<in> {0..<M} \\<inter> v0\n  x2 \\<in> {0..<M} \\<inter> v0\n  f x1 = f x2\n  f ?x = card {y \\<in> v0. y < ?x}\n\ngoal (1 subgoal):\n 1. card {y \\<in> v0. y < x1} = card {y \\<in> v0. y < x2}", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> v0. y < x1} = card {y \\<in> v0. y < x2}\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  card {y \\<in> v0. y < x1} = card {y \\<in> v0. y < x2}", "have \"pick v0 (card {y. y \\<in> v0 \\<and> y < x1}) = pick v0 (card {y. y \\<in> v0 \\<and> y < x2})\""], ["proof (prove)\nusing this:\n  card {y \\<in> v0. y < x1} = card {y \\<in> v0. y < x2}\n\ngoal (1 subgoal):\n 1. pick v0 (card {y \\<in> v0. y < x1}) =\n    pick v0 (card {y \\<in> v0. y < x2})", "by auto"], ["proof (state)\nthis:\n  pick v0 (card {y \\<in> v0. y < x1}) = pick v0 (card {y \\<in> v0. y < x2})\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "moreover"], ["proof (state)\nthis:\n  pick v0 (card {y \\<in> v0. y < x1}) = pick v0 (card {y \\<in> v0. y < x2})\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "have \"pick v0 (card {y. y \\<in> v0 \\<and> y < x1}) = x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick v0 (card {y \\<in> v0. y < x1}) = x1", "using pick_card_in_set x1"], ["proof (prove)\nusing this:\n  ?i \\<in> ?I \\<Longrightarrow> pick ?I (card {a \\<in> ?I. a < ?i}) = ?i\n  x1 \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. pick v0 (card {y \\<in> v0. y < x1}) = x1", "by auto"], ["proof (state)\nthis:\n  pick v0 (card {y \\<in> v0. y < x1}) = x1\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "moreover"], ["proof (state)\nthis:\n  pick v0 (card {y \\<in> v0. y < x1}) = x1\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "have \"pick v0 (card {y. y \\<in> v0 \\<and> y < x2}) = x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick v0 (card {y \\<in> v0. y < x2}) = x2", "using pick_card_in_set x2"], ["proof (prove)\nusing this:\n  ?i \\<in> ?I \\<Longrightarrow> pick ?I (card {a \\<in> ?I. a < ?i}) = ?i\n  x2 \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. pick v0 (card {y \\<in> v0. y < x2}) = x2", "by auto"], ["proof (state)\nthis:\n  pick v0 (card {y \\<in> v0. y < x2}) = x2\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "ultimately"], ["proof (chain)\npicking this:\n  pick v0 (card {y \\<in> v0. y < x1}) = pick v0 (card {y \\<in> v0. y < x2})\n  pick v0 (card {y \\<in> v0. y < x1}) = x1\n  pick v0 (card {y \\<in> v0. y < x2}) = x2", "have \"x1 = x2\""], ["proof (prove)\nusing this:\n  pick v0 (card {y \\<in> v0. y < x1}) = pick v0 (card {y \\<in> v0. y < x2})\n  pick v0 (card {y \\<in> v0. y < x1}) = x1\n  pick v0 (card {y \\<in> v0. y < x2}) = x2\n\ngoal (1 subgoal):\n 1. x1 = x2", "by auto"], ["proof (state)\nthis:\n  x1 = x2\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x1.2 \\<in> {0..<M} \\<inter> v0; ?x2.2 \\<in> {0..<M} \\<inter> v0;\n   f ?x1.2 = f ?x2.2\\<rbrakk>\n  \\<Longrightarrow> ?x1.2 = ?x2.2\n\ngoal (2 subgoals):\n 1. inj_on f ({0..<M} \\<inter> v0)\n 2. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x1.2 \\<in> {0..<M} \\<inter> v0; ?x2.2 \\<in> {0..<M} \\<inter> v0;\n   f ?x1.2 = f ?x2.2\\<rbrakk>\n  \\<Longrightarrow> ?x1.2 = ?x2.2", "show \"inj_on f ?dom\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x1.2 \\<in> {0..<M} \\<inter> v0; ?x2.2 \\<in> {0..<M} \\<inter> v0;\n   f ?x1.2 = f ?x2.2\\<rbrakk>\n  \\<Longrightarrow> ?x1.2 = ?x2.2\n\ngoal (1 subgoal):\n 1. inj_on f ({0..<M} \\<inter> v0)", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x1.2 \\<in> {0..<M} \\<inter> v0; ?x2.2 \\<in> {0..<M} \\<inter> v0;\n   f ?x1.2 = f ?x2.2\\<rbrakk>\n  \\<Longrightarrow> ?x1.2 = ?x2.2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{0..<M} \\<inter> v0.\n       \\<forall>y\\<in>{0..<M} \\<inter> v0. f x = f y \\<longrightarrow> x = y", "by auto"], ["proof (state)\nthis:\n  inj_on f ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "{"], ["proof (state)\nthis:\n  inj_on f ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "assume x: \"x \\<in> ?dom\""], ["proof (state)\nthis:\n  x \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {0..<M} \\<inter> v0", "have \"(y \\<in> v0 \\<and> y < x) = (y \\<in> ?dom \\<and> y < x)\" for y"], ["proof (prove)\nusing this:\n  x \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. (y \\<in> v0 \\<and> y < x) = (y \\<in> {0..<M} \\<inter> v0 \\<and> y < x)", "using x"], ["proof (prove)\nusing this:\n  x \\<in> {0..<M} \\<inter> v0\n  x \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. (y \\<in> v0 \\<and> y < x) = (y \\<in> {0..<M} \\<inter> v0 \\<and> y < x)", "by auto"], ["proof (state)\nthis:\n  (?y \\<in> v0 \\<and> ?y < x) = (?y \\<in> {0..<M} \\<inter> v0 \\<and> ?y < x)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  (?y \\<in> v0 \\<and> ?y < x) = (?y \\<in> {0..<M} \\<inter> v0 \\<and> ?y < x)", "have \"card {y. y \\<in> v0 \\<and> y < x} = card {y. y \\<in> ?dom \\<and> y < x}\""], ["proof (prove)\nusing this:\n  (?y \\<in> v0 \\<and> ?y < x) = (?y \\<in> {0..<M} \\<inter> v0 \\<and> ?y < x)\n\ngoal (1 subgoal):\n 1. card {y \\<in> v0. y < x} = card {y \\<in> {0..<M} \\<inter> v0. y < x}", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> v0. y < x} = card {y \\<in> {0..<M} \\<inter> v0. y < x}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "moreover"], ["proof (state)\nthis:\n  card {y \\<in> v0. y < x} = card {y \\<in> {0..<M} \\<inter> v0. y < x}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "have \"card {y. y \\<in> ?dom \\<and> y < x} < card ?dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {y \\<in> {0..<M} \\<inter> v0. y < x} < card ({0..<M} \\<inter> v0)", "using x lt_set_card_lt[of ?dom]"], ["proof (prove)\nusing this:\n  x \\<in> {0..<M} \\<inter> v0\n  \\<lbrakk>finite ({0..<M} \\<inter> v0);\n   ?x \\<in> {0..<M} \\<inter> v0\\<rbrakk>\n  \\<Longrightarrow> card {y \\<in> {0..<M} \\<inter> v0. y < ?x}\n                    < card ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. card {y \\<in> {0..<M} \\<inter> v0. y < x} < card ({0..<M} \\<inter> v0)", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> {0..<M} \\<inter> v0. y < x} < card ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "ultimately"], ["proof (chain)\npicking this:\n  card {y \\<in> v0. y < x} = card {y \\<in> {0..<M} \\<inter> v0. y < x}\n  card {y \\<in> {0..<M} \\<inter> v0. y < x} < card ({0..<M} \\<inter> v0)", "have \"f x \\<in> ?ran\""], ["proof (prove)\nusing this:\n  card {y \\<in> v0. y < x} = card {y \\<in> {0..<M} \\<inter> v0. y < x}\n  card {y \\<in> {0..<M} \\<inter> v0. y < x} < card ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f x \\<in> {0..<card ({0..<M} \\<inter> v0)}", "using assms"], ["proof (prove)\nusing this:\n  card {y \\<in> v0. y < x} = card {y \\<in> {0..<M} \\<inter> v0. y < x}\n  card {y \\<in> {0..<M} \\<inter> v0. y < x} < card ({0..<M} \\<inter> v0)\n  f ?x = card {y \\<in> v0. y < ?x}\n\ngoal (1 subgoal):\n 1. f x \\<in> {0..<card ({0..<M} \\<inter> v0)}", "by auto"], ["proof (state)\nthis:\n  f x \\<in> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> {0..<M} \\<inter> v0 \\<Longrightarrow>\n  f ?x2 \\<in> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> {0..<M} \\<inter> v0 \\<Longrightarrow>\n  f ?x2 \\<in> {0..<card ({0..<M} \\<inter> v0)}", "have sub: \"(f ` ?dom) \\<subseteq> ?ran\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> {0..<M} \\<inter> v0 \\<Longrightarrow>\n  f ?x2 \\<in> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) \\<subseteq> {0..<card ({0..<M} \\<inter> v0)}", "by auto"], ["proof (state)\nthis:\n  f ` ({0..<M} \\<inter> v0) \\<subseteq> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "{"], ["proof (state)\nthis:\n  f ` ({0..<M} \\<inter> v0) \\<subseteq> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "assume y: \"y \\<in> ?ran\""], ["proof (state)\nthis:\n  y \\<in> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  y \\<in> {0..<card ({0..<M} \\<inter> v0)}", "have yle: \"y < card ?dom\""], ["proof (prove)\nusing this:\n  y \\<in> {0..<card ({0..<M} \\<inter> v0)}\n\ngoal (1 subgoal):\n 1. y < card ({0..<M} \\<inter> v0)", "by auto"], ["proof (state)\nthis:\n  y < card ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  y < card ({0..<M} \\<inter> v0)", "have pyindom: \"pick ?dom y \\<in> ?dom\""], ["proof (prove)\nusing this:\n  y < card ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0", "using pick_in_set_le[of y ?dom]"], ["proof (prove)\nusing this:\n  y < card ({0..<M} \\<inter> v0)\n  y < card ({0..<M} \\<inter> v0) \\<Longrightarrow>\n  pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0", "by auto"], ["proof (state)\nthis:\n  pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0", "have \"pick ?dom y < M\""], ["proof (prove)\nusing this:\n  pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0\n\ngoal (1 subgoal):\n 1. pick ({0..<M} \\<inter> v0) y < M", "by auto"], ["proof (state)\nthis:\n  pick ({0..<M} \\<inter> v0) y < M\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  pick ({0..<M} \\<inter> v0) y < M", "have \"\\<And>z. (z < pick ?dom y \\<Longrightarrow> z \\<in> v0 = (z \\<in> ?dom))\""], ["proof (prove)\nusing this:\n  pick ({0..<M} \\<inter> v0) y < M\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z < pick ({0..<M} \\<inter> v0) y \\<Longrightarrow>\n       (z \\<in> v0) = (z \\<in> {0..<M} \\<inter> v0)", "by auto"], ["proof (state)\nthis:\n  ?z < pick ({0..<M} \\<inter> v0) y \\<Longrightarrow>\n  (?z \\<in> v0) = (?z \\<in> {0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  ?z < pick ({0..<M} \\<inter> v0) y \\<Longrightarrow>\n  (?z \\<in> v0) = (?z \\<in> {0..<M} \\<inter> v0)", "have \"{z. z \\<in> v0 \\<and> z < pick ?dom y} = {z. z \\<in> ?dom \\<and> z < pick ?dom y}\""], ["proof (prove)\nusing this:\n  ?z < pick ({0..<M} \\<inter> v0) y \\<Longrightarrow>\n  (?z \\<in> v0) = (?z \\<in> {0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n    {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}", "by auto"], ["proof (state)\nthis:\n  {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}", "have \"card {z. z \\<in> v0 \\<and> z < pick ?dom y} = card {z. z \\<in> ?dom \\<and> z < pick ?dom y}\""], ["proof (prove)\nusing this:\n  {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}\n\ngoal (1 subgoal):\n 1. card {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n    card {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}", "by auto"], ["proof (state)\nthis:\n  card {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  card {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  card {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  card {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}", "have \"f (pick ?dom y) = y\""], ["proof (prove)\nusing this:\n  card {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  card {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}\n\ngoal (1 subgoal):\n 1. f (pick ({0..<M} \\<inter> v0) y) = y", "using card_pick_le[OF yle] assms"], ["proof (prove)\nusing this:\n  card {z \\<in> v0. z < pick ({0..<M} \\<inter> v0) y} =\n  card {z \\<in> {0..<M} \\<inter> v0. z < pick ({0..<M} \\<inter> v0) y}\n  card {a \\<in> {0..<M} \\<inter> v0. a < pick ({0..<M} \\<inter> v0) y} = y\n  f ?x = card {y \\<in> v0. y < ?x}\n\ngoal (1 subgoal):\n 1. f (pick ({0..<M} \\<inter> v0) y) = y", "by auto"], ["proof (state)\nthis:\n  f (pick ({0..<M} \\<inter> v0) y) = y\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "with pyindom"], ["proof (chain)\npicking this:\n  pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0\n  f (pick ({0..<M} \\<inter> v0) y) = y", "have \"\\<exists>x\\<in>?dom. f x = y\""], ["proof (prove)\nusing this:\n  pick ({0..<M} \\<inter> v0) y \\<in> {0..<M} \\<inter> v0\n  f (pick ({0..<M} \\<inter> v0) y) = y\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{0..<M} \\<inter> v0. f x = y", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>{0..<M} \\<inter> v0. f x = y\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "}"], ["proof (state)\nthis:\n  ?y2 \\<in> {0..<card ({0..<M} \\<inter> v0)} \\<Longrightarrow>\n  \\<exists>x\\<in>{0..<M} \\<inter> v0. f x = ?y2\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "then"], ["proof (chain)\npicking this:\n  ?y2 \\<in> {0..<card ({0..<M} \\<inter> v0)} \\<Longrightarrow>\n  \\<exists>x\\<in>{0..<M} \\<inter> v0. f x = ?y2", "have sup: \"?ran \\<subseteq> (f ` ?dom)\""], ["proof (prove)\nusing this:\n  ?y2 \\<in> {0..<card ({0..<M} \\<inter> v0)} \\<Longrightarrow>\n  \\<exists>x\\<in>{0..<M} \\<inter> v0. f x = ?y2\n\ngoal (1 subgoal):\n 1. {0..<card ({0..<M} \\<inter> v0)} \\<subseteq> f ` ({0..<M} \\<inter> v0)", "by fastforce"], ["proof (state)\nthis:\n  {0..<card ({0..<M} \\<inter> v0)} \\<subseteq> f ` ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "show \"(f ` ?dom) = ?ran\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "using sub sup"], ["proof (prove)\nusing this:\n  f ` ({0..<M} \\<inter> v0) \\<subseteq> {0..<card ({0..<M} \\<inter> v0)}\n  {0..<card ({0..<M} \\<inter> v0)} \\<subseteq> f ` ({0..<M} \\<inter> v0)\n\ngoal (1 subgoal):\n 1. f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}", "by auto"], ["proof (state)\nthis:\n  f ` ({0..<M} \\<inter> v0) = {0..<card ({0..<M} \\<inter> v0)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_bound:\n  fixes A :: \"nat set\" and M N :: \"nat\"\n  assumes \"N \\<ge> M\" \n  shows \"ind_in_set A N \\<notin> (ind_in_set A ` ({0..<M} \\<inter> A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "have \"{0..<M}\\<inter>A \\<subseteq> {i. i \\<in> A \\<and> i < N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<M} \\<inter> A \\<subseteq> {i \\<in> A. i < N}", "using assms"], ["proof (prove)\nusing this:\n  M \\<le> N\n\ngoal (1 subgoal):\n 1. {0..<M} \\<inter> A \\<subseteq> {i \\<in> A. i < N}", "by auto"], ["proof (state)\nthis:\n  {0..<M} \\<inter> A \\<subseteq> {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "then"], ["proof (chain)\npicking this:\n  {0..<M} \\<inter> A \\<subseteq> {i \\<in> A. i < N}", "have \"card ({0..<M}\\<inter>A) \\<le> card {i. i \\<in> A \\<and> i < N}\""], ["proof (prove)\nusing this:\n  {0..<M} \\<inter> A \\<subseteq> {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. card ({0..<M} \\<inter> A) \\<le> card {i \\<in> A. i < N}", "using card_mono[of \"{i. i \\<in> A \\<and> i < N}\"]"], ["proof (prove)\nusing this:\n  {0..<M} \\<inter> A \\<subseteq> {i \\<in> A. i < N}\n  \\<lbrakk>finite {i \\<in> A. i < N};\n   ?A \\<subseteq> {i \\<in> A. i < N}\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. card ({0..<M} \\<inter> A) \\<le> card {i \\<in> A. i < N}", "by auto"], ["proof (state)\nthis:\n  card ({0..<M} \\<inter> A) \\<le> card {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "moreover"], ["proof (state)\nthis:\n  card ({0..<M} \\<inter> A) \\<le> card {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "have \"ind_in_set A N = card {i. i \\<in> A \\<and> i < N}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A N = card {i \\<in> A. i < N}", "unfolding ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < N} = card {i \\<in> A. i < N}", "by auto"], ["proof (state)\nthis:\n  ind_in_set A N = card {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "ultimately"], ["proof (chain)\npicking this:\n  card ({0..<M} \\<inter> A) \\<le> card {i \\<in> A. i < N}\n  ind_in_set A N = card {i \\<in> A. i < N}", "have \"ind_in_set A N \\<ge> card ({0..<M}\\<inter>A)\""], ["proof (prove)\nusing this:\n  card ({0..<M} \\<inter> A) \\<le> card {i \\<in> A. i < N}\n  ind_in_set A N = card {i \\<in> A. i < N}\n\ngoal (1 subgoal):\n 1. card ({0..<M} \\<inter> A) \\<le> ind_in_set A N", "by auto"], ["proof (state)\nthis:\n  card ({0..<M} \\<inter> A) \\<le> ind_in_set A N\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "moreover"], ["proof (state)\nthis:\n  card ({0..<M} \\<inter> A) \\<le> ind_in_set A N\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "have \"y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow> y < card ({0..<M}\\<inter>A)\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "let ?dom = \"{0..<M} \\<inter> A\""], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "assume \"y \\<in> ind_in_set A ` (A \\<inter> {0..<M})\""], ["proof (state)\nthis:\n  y \\<in> ind_in_set A ` (A \\<inter> {0..<M})\n\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "then"], ["proof (chain)\npicking this:\n  y \\<in> ind_in_set A ` (A \\<inter> {0..<M})", "obtain x where x: \"x \\<in> ?dom\" and y: \"ind_in_set A x = y\""], ["proof (prove)\nusing this:\n  y \\<in> ind_in_set A ` (A \\<inter> {0..<M})\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> {0..<M} \\<inter> A; ind_in_set A x = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> {0..<M} \\<inter> A\n  ind_in_set A x = y\n\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "then"], ["proof (chain)\npicking this:\n  x \\<in> {0..<M} \\<inter> A\n  ind_in_set A x = y", "have \"(y \\<in> A \\<and> y < x) = (y \\<in> ?dom \\<and> y < x)\" for y"], ["proof (prove)\nusing this:\n  x \\<in> {0..<M} \\<inter> A\n  ind_in_set A x = y__\n\ngoal (1 subgoal):\n 1. (y \\<in> A \\<and> y < x) = (y \\<in> {0..<M} \\<inter> A \\<and> y < x)", "using x"], ["proof (prove)\nusing this:\n  x \\<in> {0..<M} \\<inter> A\n  ind_in_set A x = y__\n  x \\<in> {0..<M} \\<inter> A\n\ngoal (1 subgoal):\n 1. (y \\<in> A \\<and> y < x) = (y \\<in> {0..<M} \\<inter> A \\<and> y < x)", "by auto"], ["proof (state)\nthis:\n  (?y \\<in> A \\<and> ?y < x) = (?y \\<in> {0..<M} \\<inter> A \\<and> ?y < x)\n\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "then"], ["proof (chain)\npicking this:\n  (?y \\<in> A \\<and> ?y < x) = (?y \\<in> {0..<M} \\<inter> A \\<and> ?y < x)", "have \"card {y. y \\<in> A \\<and> y < x} = card {y. y \\<in> ?dom \\<and> y < x}\""], ["proof (prove)\nusing this:\n  (?y \\<in> A \\<and> ?y < x) = (?y \\<in> {0..<M} \\<inter> A \\<and> ?y < x)\n\ngoal (1 subgoal):\n 1. card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}\n\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "moreover"], ["proof (state)\nthis:\n  card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}\n\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "have \"card {y. y \\<in> ?dom \\<and> y < x} < card ?dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)", "using x lt_set_card_lt[of ?dom]"], ["proof (prove)\nusing this:\n  x \\<in> {0..<M} \\<inter> A\n  \\<lbrakk>finite ({0..<M} \\<inter> A); ?x \\<in> {0..<M} \\<inter> A\\<rbrakk>\n  \\<Longrightarrow> card {y \\<in> {0..<M} \\<inter> A. y < ?x}\n                    < card ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)", "by auto"], ["proof (state)\nthis:\n  card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n    y < card ({0..<M} \\<inter> A)", "ultimately"], ["proof (chain)\npicking this:\n  card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}\n  card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)", "show \"y < card ({0..<M}\\<inter>A)\""], ["proof (prove)\nusing this:\n  card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}\n  card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. y < card ({0..<M} \\<inter> A)", "using y"], ["proof (prove)\nusing this:\n  card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}\n  card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)\n  ind_in_set A x = y\n\ngoal (1 subgoal):\n 1. y < card ({0..<M} \\<inter> A)", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  card {y \\<in> A. y < x} = card {y \\<in> {0..<M} \\<inter> A. y < x}\n  card {y \\<in> {0..<M} \\<inter> A. y < x} < card ({0..<M} \\<inter> A)\n  card {i \\<in> A. i < x} = y\n\ngoal (1 subgoal):\n 1. y < card ({0..<M} \\<inter> A)", "by auto"], ["proof (state)\nthis:\n  y < card ({0..<M} \\<inter> A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n  ?y < card ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "ultimately"], ["proof (chain)\npicking this:\n  card ({0..<M} \\<inter> A) \\<le> ind_in_set A N\n  ?y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n  ?y < card ({0..<M} \\<inter> A)", "show ?thesis"], ["proof (prove)\nusing this:\n  card ({0..<M} \\<inter> A) \\<le> ind_in_set A N\n  ?y \\<in> ind_in_set A ` (A \\<inter> {0..<M}) \\<Longrightarrow>\n  ?y < card ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)", "by fastforce"], ["proof (state)\nthis:\n  ind_in_set A N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_minus_subset:\n  \"bij_betw f A B \\<Longrightarrow> C \\<subseteq> A \\<Longrightarrow> (f ` A) - (f ` C) = f ` (A - C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij_betw f A B; C \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - f ` C = f ` (A - C)", "by (metis Diff_subset bij_betw_imp_inj_on bij_betw_imp_surj_on inj_on_image_set_diff)"], ["", "lemma ind_in_set_minus_subset_bound:\n  fixes A B :: \"nat set\" and M :: \"nat\"\n  assumes \"B \\<subseteq> A\"\n  shows \"(ind_in_set A ` ({0..<M} \\<inter> A)) - (ind_in_set A ` B) = (ind_in_set A ` ({0..<M} \\<inter> A)) \\<inter> (ind_in_set A ` (A - B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "let ?dom = \"{0..<M} \\<inter> A\""], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "let ?ran = \"{0..<card ({0..<M} \\<inter> A)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "let ?f = \"ind_in_set A\""], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "let ?C = \"A - B\""], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have bij: \"bij_betw ?f ?dom ?ran\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n     {0..<card ({0..<M} \\<inter> A)}", "using bij_ind_in_set_bound[of \"?f\" A M]"], ["proof (prove)\nusing this:\n  (\\<And>x. ind_in_set A x = card {y \\<in> A. y < x}) \\<Longrightarrow>\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n     {0..<card ({0..<M} \\<inter> A)}", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  (\\<And>x.\n      card {i \\<in> A. i < x} = card {y \\<in> A. y < x}) \\<Longrightarrow>\n  bij_betw (\\<lambda>x. card {i \\<in> A. i < x}) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. card {i \\<in> A. i < x}) ({0..<M} \\<inter> A)\n     {0..<card ({0..<M} \\<inter> A)}", "by auto"], ["proof (state)\nthis:\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "then"], ["proof (chain)\npicking this:\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}", "have eq: \"?f ` ?dom = ?ran\""], ["proof (prove)\nusing this:\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) = {0..<card ({0..<M} \\<inter> A)}", "using bij_betw_imp_surj_on"], ["proof (prove)\nusing this:\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n  bij_betw ?f ?A ?B \\<Longrightarrow> ?f ` ?A = ?B\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) = {0..<card ({0..<M} \\<inter> A)}", "by fastforce"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) = {0..<card ({0..<M} \\<inter> A)}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"(?f ` B) = (?f ` ({0..<M} \\<inter> B)) \\<union> (?f ` ({n. n \\<ge> M} \\<inter> B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> B) \\<union>\n    ind_in_set A ` ({n. M \\<le> n} \\<inter> B)", "by fastforce"], ["proof (state)\nthis:\n  ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> B) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "then"], ["proof (chain)\npicking this:\n  ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> B) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B)", "have \"(?f ` ?dom) - (?f ` B) \n    = (?f ` ?dom) - (?f ` ({n. n \\<ge> M} \\<inter> B)) - (?f ` ({0..<M} \\<inter> B))\""], ["proof (prove)\nusing this:\n  ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> B) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) -\n    ind_in_set A ` ({n. M \\<le> n} \\<inter> B) -\n    ind_in_set A ` ({0..<M} \\<inter> B)", "by fastforce"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) -\n  ind_in_set A ` ({0..<M} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "moreover"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) -\n  ind_in_set A ` ({0..<M} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"(?f ` ({n. n \\<ge> M} \\<inter> B)) \\<inter> (?f ` ?dom) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({n. M \\<le> n} \\<inter> B) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> A) =\n    {}", "using ind_in_set_bound[of M _ A]"], ["proof (prove)\nusing this:\n  M \\<le> ?N \\<Longrightarrow>\n  ind_in_set A ?N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({n. M \\<le> n} \\<inter> B) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> A) =\n    {}", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> A) =\n  {}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) -\n  ind_in_set A ` ({0..<M} \\<inter> B)\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> A) =\n  {}", "have eq1: \"(?f ` ?dom) - (?f ` B) = (?f ` ?dom) - (?f ` ({0..<M} \\<inter> B))\""], ["proof (prove)\nusing this:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) -\n  ind_in_set A ` ({0..<M} \\<inter> B)\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> B) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> A) =\n  {}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) -\n    ind_in_set A ` ({0..<M} \\<inter> B)", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` ({0..<M} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"{0..<M} \\<inter> B \\<subseteq> ?dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<M} \\<inter> B \\<subseteq> {0..<M} \\<inter> A", "using assms"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. {0..<M} \\<inter> B \\<subseteq> {0..<M} \\<inter> A", "by auto"], ["proof (state)\nthis:\n  {0..<M} \\<inter> B \\<subseteq> {0..<M} \\<inter> A\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "then"], ["proof (chain)\npicking this:\n  {0..<M} \\<inter> B \\<subseteq> {0..<M} \\<inter> A", "have \"(?f ` ?dom) - (?f ` ({0..<M} \\<inter> B)) = ?f ` (?dom - ({0..<M} \\<inter> B))\""], ["proof (prove)\nusing this:\n  {0..<M} \\<inter> B \\<subseteq> {0..<M} \\<inter> A\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) -\n    ind_in_set A ` ({0..<M} \\<inter> B) =\n    ind_in_set A ` ({0..<M} \\<inter> A - {0..<M} \\<inter> B)", "using bij bij_minus_subset[of \"?f\"]"], ["proof (prove)\nusing this:\n  {0..<M} \\<inter> B \\<subseteq> {0..<M} \\<inter> A\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n  \\<lbrakk>bij_betw (ind_in_set A) ?A ?B; ?C \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ind_in_set A ` ?A - ind_in_set A ` ?C =\n                    ind_in_set A ` (?A - ?C)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) -\n    ind_in_set A ` ({0..<M} \\<inter> B) =\n    ind_in_set A ` ({0..<M} \\<inter> A - {0..<M} \\<inter> B)", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({0..<M} \\<inter> B) =\n  ind_in_set A ` ({0..<M} \\<inter> A - {0..<M} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "also"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({0..<M} \\<inter> B) =\n  ind_in_set A ` ({0..<M} \\<inter> A - {0..<M} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"\\<dots> = ?f ` ({0..<M} \\<inter> ?C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A - {0..<M} \\<inter> B) =\n    ind_in_set A ` ({0..<M} \\<inter> (A - B))", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A - {0..<M} \\<inter> B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "finally"], ["proof (chain)\npicking this:\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({0..<M} \\<inter> B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))", "have eq2: \"(?f ` ?dom) - (?f ` B) = ?f ` ({0..<M} \\<inter> ?C)\""], ["proof (prove)\nusing this:\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({0..<M} \\<inter> B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> (A - B))", "using eq1"], ["proof (prove)\nusing this:\n  ind_in_set A ` ({0..<M} \\<inter> A) -\n  ind_in_set A ` ({0..<M} \\<inter> B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` ({0..<M} \\<inter> B)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> (A - B))", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"(?f ` ?C) = (?f ` ({0..<M} \\<inter> ?C)) \\<union> (?f ` ({n. n \\<ge> M} \\<inter> ?C))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` (A - B) =\n    ind_in_set A ` ({0..<M} \\<inter> (A - B)) \\<union>\n    ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B))", "by fastforce"], ["proof (state)\nthis:\n  ind_in_set A ` (A - B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "moreover"], ["proof (state)\nthis:\n  ind_in_set A ` (A - B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"(?f ` ({n. n \\<ge> M} \\<inter> ?C)) \\<inter> (?f ` ?dom) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B)) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> A) =\n    {}", "using ind_in_set_bound[of M _ A]"], ["proof (prove)\nusing this:\n  M \\<le> ?N \\<Longrightarrow>\n  ind_in_set A ?N \\<notin> ind_in_set A ` ({0..<M} \\<inter> A)\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B)) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> A) =\n    {}", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B)) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> A) =\n  {}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  ind_in_set A ` (A - B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B))\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B)) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> A) =\n  {}", "have eq3:\"(ind_in_set A ` ?dom) \\<inter> (?f ` ?C) = (ind_in_set A ` ?dom) \\<inter> (?f ` ({0..<M} \\<inter> ?C))\""], ["proof (prove)\nusing this:\n  ind_in_set A ` (A - B) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) \\<union>\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B))\n  ind_in_set A ` ({n. M \\<le> n} \\<inter> (A - B)) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> A) =\n  {}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B) =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> (A - B))", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B) =\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "have \"{0..<M} \\<inter> ?C \\<subseteq> ?dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<M} \\<inter> (A - B) \\<subseteq> {0..<M} \\<inter> A", "using assms"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. {0..<M} \\<inter> (A - B) \\<subseteq> {0..<M} \\<inter> A", "by auto"], ["proof (state)\nthis:\n  {0..<M} \\<inter> (A - B) \\<subseteq> {0..<M} \\<inter> A\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "then"], ["proof (chain)\npicking this:\n  {0..<M} \\<inter> (A - B) \\<subseteq> {0..<M} \\<inter> A", "have \"(ind_in_set A ` ?dom) \\<inter> (?f ` ({0..<M} \\<inter> ?C)) = (?f ` ({0..<M} \\<inter> ?C))\""], ["proof (prove)\nusing this:\n  {0..<M} \\<inter> (A - B) \\<subseteq> {0..<M} \\<inter> A\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> (A - B)) =\n    ind_in_set A ` ({0..<M} \\<inter> (A - B))", "using bij"], ["proof (prove)\nusing this:\n  {0..<M} \\<inter> (A - B) \\<subseteq> {0..<M} \\<inter> A\n  bij_betw (ind_in_set A) ({0..<M} \\<inter> A)\n   {0..<card ({0..<M} \\<inter> A)}\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n    ind_in_set A ` ({0..<M} \\<inter> (A - B)) =\n    ind_in_set A ` ({0..<M} \\<inter> (A - B))", "by fastforce"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "then"], ["proof (chain)\npicking this:\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))", "show ?thesis"], ["proof (prove)\nusing this:\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "using eq2 eq3"], ["proof (prove)\nusing this:\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> (A - B)) =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B) =\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter>\n  ind_in_set A ` ({0..<M} \\<inter> (A - B))\n\ngoal (1 subgoal):\n 1. ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n    ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)", "by auto"], ["proof (state)\nthis:\n  ind_in_set A ` ({0..<M} \\<inter> A) - ind_in_set A ` B =\n  ind_in_set A ` ({0..<M} \\<inter> A) \\<inter> ind_in_set A ` (A - B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_iff:\n  fixes A B :: \"nat set\"\n  assumes \"x \\<in> A\" and \"B \\<subseteq> A\"\n  shows \"ind_in_set A x \\<in> (ind_in_set A ` B) = (x \\<in> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ind_in_set A x \\<in> ind_in_set A ` B) = (x \\<in> B)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "have lemm: \"card {i. i \\<in> A \\<and> i < (x::nat) } = card {i. i \\<in> A \\<and> i < (y::nat) } \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x = y\" for A x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>card {i \\<in> A. i < x} = card {i \\<in> A. i < y}; x \\<in> A;\n     y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (metis (full_types) pick_card_in_set)"], ["proof (state)\nthis:\n  \\<lbrakk>card {i \\<in> ?A. i < ?x} = card {i \\<in> ?A. i < ?y};\n   ?x \\<in> ?A; ?y \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "{"], ["proof (state)\nthis:\n  \\<lbrakk>card {i \\<in> ?A. i < ?x} = card {i \\<in> ?A. i < ?y};\n   ?x \\<in> ?A; ?y \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "assume \"ind_in_set A x \\<in> (ind_in_set A ` B)\""], ["proof (state)\nthis:\n  ind_in_set A x \\<in> ind_in_set A ` B\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "then"], ["proof (chain)\npicking this:\n  ind_in_set A x \\<in> ind_in_set A ` B", "have \"\\<exists>y \\<in> B. card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\""], ["proof (prove)\nusing this:\n  ind_in_set A x \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>B. card {i \\<in> A. i < x} = card {i \\<in> A. i < y}", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  card {i \\<in> A. i < x} \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>B. card {i \\<in> A. i < x} = card {i \\<in> A. i < y}", "by auto"], ["proof (state)\nthis:\n  \\<exists>y\\<in>B. card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "then"], ["proof (chain)\npicking this:\n  \\<exists>y\\<in>B. card {i \\<in> A. i < x} = card {i \\<in> A. i < y}", "obtain y where y1: \"y \\<in> B\" and ceq: \"card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\""], ["proof (prove)\nusing this:\n  \\<exists>y\\<in>B. card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> B;\n         card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> B\n  card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "with y1 assms"], ["proof (chain)\npicking this:\n  y \\<in> B\n  x \\<in> A\n  B \\<subseteq> A\n  y \\<in> B\n  card {i \\<in> A. i < x} = card {i \\<in> A. i < y}", "have y0: \"y \\<in> A\""], ["proof (prove)\nusing this:\n  y \\<in> B\n  x \\<in> A\n  B \\<subseteq> A\n  y \\<in> B\n  card {i \\<in> A. i < x} = card {i \\<in> A. i < y}\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by auto"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "then"], ["proof (chain)\npicking this:\n  y \\<in> A", "have \"x = y\""], ["proof (prove)\nusing this:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. x = y", "using lemm[OF ceq] y0 assms"], ["proof (prove)\nusing this:\n  y \\<in> A\n  \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk> \\<Longrightarrow> x = y\n  y \\<in> A\n  x \\<in> A\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n 2. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "then"], ["proof (chain)\npicking this:\n  x = y", "show \"x \\<in> B\""], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. x \\<in> B", "using y1"], ["proof (prove)\nusing this:\n  x = y\n  y \\<in> B\n\ngoal (1 subgoal):\n 1. x \\<in> B", "by auto"], ["proof (state)\nthis:\n  x \\<in> B\n\ngoal (1 subgoal):\n 1. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "}"], ["proof (state)\nthis:\n  ind_in_set A x \\<in> ind_in_set A ` B \\<Longrightarrow> x \\<in> B\n\ngoal (1 subgoal):\n 1. x \\<in> B \\<Longrightarrow> ind_in_set A x \\<in> ind_in_set A ` B", "qed (simp add: ind_in_set_def)"], ["", "lemma nths_reencode_eq:\n  assumes \"B \\<subseteq> A\"\n  shows \"nths (nths xs A) (ind_in_set A ` B) = nths xs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs A) (ind_in_set A ` B) = nths xs B", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. nths (nths [] A) (ind_in_set A ` B) = nths [] B\n 2. \\<And>x xs.\n       nths (nths xs A) (ind_in_set A ` B) = nths xs B \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. nths (nths [] A) (ind_in_set A ` B) = nths [] B\n 2. \\<And>x xs.\n       nths (nths xs A) (ind_in_set A ` B) = nths xs B \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths [] A) (ind_in_set A ` B) = nths [] B", "by auto"], ["proof (state)\nthis:\n  nths (nths [] A) (ind_in_set A ` B) = nths [] B\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (ind_in_set A ` B) = nths xs B \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (ind_in_set A ` B) = nths xs B \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "case (snoc x xs)"], ["proof (state)\nthis:\n  nths (nths xs A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (ind_in_set A ` B) = nths xs B \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have seteq: \"{i. i < length xs \\<and> i \\<in> A} = {i. i \\<in> A \\<and> i < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}", "by auto"], ["proof (state)\nthis:\n  {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (ind_in_set A ` B) = nths xs B \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "proof (cases \"length xs \\<in> B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "case True"], ["proof (state)\nthis:\n  length xs \\<in> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "moreover"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"nths [x] {l. l + length xs \\<in> B} = [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> B} = [x]", "using nths_singleton True"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<in> B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> B} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> B} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "ultimately"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n  nths [x] {l. l + length xs \\<in> B} = [x]", "have eqT1: \"nths (xs @ [x]) B = nths xs B @ [x]\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n  nths [x] {l. l + length xs \\<in> B} = [x]\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B @ [x]", "have \"length xs \\<in> A\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B @ [x]\n\ngoal (1 subgoal):\n 1. length xs \\<in> A", "using True assms"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B @ [x]\n  length xs \\<in> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> A", "by auto"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> A", "have \"nths [x] {l. l + length xs \\<in> A} = [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "using nths_singleton"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "moreover"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "ultimately"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "have \"nths (xs @ [x]) A = nths xs A @ [x]\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A @ [x]", "have eqT2: \"nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (nths xs A @ [x]) (ind_in_set A ` B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n    nths (nths xs A @ [x]) (ind_in_set A ` B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (ind_in_set A ` B)\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have eqT3: \"nths (nths xs A @ [x]) (ind_in_set A ` B) \n      = nths xs B @ (nths [x] {l. l + length (nths xs A) \\<in> (ind_in_set A ` B)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs A @ [x]) (ind_in_set A ` B) =\n    nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}", "using nths_append[of \"nths xs A\"] snoc"], ["proof (prove)\nusing this:\n  nths (nths xs A @ ?l') ?A =\n  nths (nths xs A) ?A @ nths ?l' {j. j + length (nths xs A) \\<in> ?A}\n  nths (nths xs A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. nths (nths xs A @ [x]) (ind_in_set A ` B) =\n    nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}", "by auto"], ["proof (state)\nthis:\n  nths (nths xs A @ [x]) (ind_in_set A ` B) =\n  nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}", "using ind_in_set_def seteq"], ["proof (prove)\nusing this:\n  ind_in_set ?A ?x = card {i \\<in> ?A. i < ?x}\n  {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}", "by auto"], ["proof (state)\nthis:\n  ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "moreover"], ["proof (state)\nthis:\n  ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}", "using length_nths"], ["proof (prove)\nusing this:\n  length (nths ?xs ?I) = card {i. i < length ?xs \\<and> i \\<in> ?I}\n\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "ultimately"], ["proof (chain)\npicking this:\n  ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}\n  length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}", "have \"length (nths xs A) = ind_in_set A (length xs)\""], ["proof (prove)\nusing this:\n  ind_in_set A (length xs) = card {i. i < length xs \\<and> i \\<in> A}\n  length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. length (nths xs A) = ind_in_set A (length xs)", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) = ind_in_set A (length xs)\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "moreover"], ["proof (state)\nthis:\n  length (nths xs A) = ind_in_set A (length xs)\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"ind_in_set A (length xs) \\<in> ind_in_set A ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A (length xs) \\<in> ind_in_set A ` B", "using True"], ["proof (prove)\nusing this:\n  length xs \\<in> B\n\ngoal (1 subgoal):\n 1. ind_in_set A (length xs) \\<in> ind_in_set A ` B", "by auto"], ["proof (state)\nthis:\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "ultimately"], ["proof (chain)\npicking this:\n  length (nths xs A) = ind_in_set A (length xs)\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B", "have \"length (nths xs A) \\<in> ind_in_set A ` B\""], ["proof (prove)\nusing this:\n  length (nths xs A) = ind_in_set A (length xs)\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> ind_in_set A ` B", "have \"(nths [x] {l. l + length (nths xs A) \\<in> (ind_in_set A ` B)}) = [x]\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = [x]", "using nths_singleton"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = [x]", "have \"nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = [x]\n\ngoal (1 subgoal):\n 1. nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]", "using eqT3"], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = [x]\n  nths (nths xs A @ [x]) (ind_in_set A ` B) =\n  nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}\n\ngoal (1 subgoal):\n 1. nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n 2. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "then"], ["proof (chain)\npicking this:\n  nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "using eqT1 eqT2"], ["proof (prove)\nusing this:\n  nths (nths xs A @ [x]) (ind_in_set A ` B) = nths xs B @ [x]\n  nths (xs @ [x]) B = nths xs B @ [x]\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (ind_in_set A ` B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "moreover"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"nths [x] {l. l + length xs \\<in> B} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> B} = []", "using nths_singleton False"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<notin> B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> B} = []", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> B} = []\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "ultimately"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n  nths [x] {l. l + length xs \\<in> B} = []", "have eqT1: \"nths (xs @ [x]) B = nths xs B\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {l. l + length xs \\<in> B}\n  nths [x] {l. l + length xs \\<in> B} = []\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "have \"nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "proof (cases \"length xs \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "case True"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> A", "have \"nths [x] {l. l + length xs \\<in> A} = [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "using nths_singleton"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "moreover"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "have \"nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "ultimately"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "have \"nths (xs @ [x]) A = nths xs A @ [x]\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A @ [x]", "have \"nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (nths xs A @ [x]) (ind_in_set A ` B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n    nths (nths xs A @ [x]) (ind_in_set A ` B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (ind_in_set A ` B)\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (ind_in_set A ` B)", "have eqT2: \"nths (nths (xs @ [x]) A) (ind_in_set A ` B) \n        = nths xs B @ (nths [x] {l. l + length (nths xs A) \\<in> (ind_in_set A ` B)})\""], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (ind_in_set A ` B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n    nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}", "using nths_append[of \"nths xs A\"] snoc"], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (ind_in_set A ` B)\n  nths (nths xs A @ ?l') ?A =\n  nths (nths xs A) ?A @ nths ?l' {j. j + length (nths xs A) \\<in> ?A}\n  nths (nths xs A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n    nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "have \"length (nths xs A) \\<in> (ind_in_set A ` B) \\<Longrightarrow> length xs \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "assume \"length (nths xs A) \\<in> (ind_in_set A ` B)\""], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "moreover"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "have \"length (nths xs A) = card {i. i \\<in> A \\<and> i < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i \\<in> A. i < length xs}", "using length_nths[of xs] seteq"], ["proof (prove)\nusing this:\n  length (nths xs ?I) = card {i. i < length xs \\<and> i \\<in> ?I}\n  {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i \\<in> A. i < length xs}", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "ultimately"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n  length (nths xs A) = card {i \\<in> A. i < length xs}", "have \"card {i. i \\<in> A \\<and> i < length xs} \\<in> (ind_in_set A ` B)\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < length xs}\n    \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B", "by auto"], ["proof (state)\nthis:\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "then"], ["proof (chain)\npicking this:\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B", "show \"length xs \\<in> B\""], ["proof (prove)\nusing this:\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "using ind_in_set_iff True assms"], ["proof (prove)\nusing this:\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B\n  \\<lbrakk>?x \\<in> ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> (ind_in_set ?A ?x \\<in> ind_in_set ?A ` ?B) =\n                    (?x \\<in> ?B)\n  length xs \\<in> A\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  card {i \\<in> A. i < length xs}\n  \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B\n  \\<lbrakk>?x \\<in> ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> (card {i \\<in> ?A. i < ?x}\n                     \\<in> (\\<lambda>x. card {i \\<in> ?A. i < x}) ` ?B) =\n                    (?x \\<in> ?B)\n  length xs \\<in> A\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "by auto"], ["proof (state)\nthis:\n  length xs \\<in> B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B", "have \"length (nths xs A) \\<notin> (ind_in_set A ` B)\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<notin> ind_in_set A ` B", "using False"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n  length xs \\<notin> B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<notin> ind_in_set A ` B", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) \\<notin> ind_in_set A ` B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<notin> ind_in_set A ` B", "have \"nths [x] {l. l + length (nths xs A) \\<in> (ind_in_set A ` B)} = []\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<notin> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = []", "using nths_singleton"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<notin> ind_in_set A ` B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = []", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = []\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = []", "show \"nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = []\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "using eqT2"], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B} = []\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) =\n  nths xs B @ nths [x] {l. l + length (nths xs A) \\<in> ind_in_set A ` B}\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  length xs \\<notin> A", "have \"nths [x] {l. l + length xs \\<in> A} = []\""], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = []", "using nths_singleton"], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = []", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = []\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "moreover"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = []\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "have \"nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "ultimately"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length xs \\<in> A} = []\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "have \"nths (xs @ [x]) A = nths xs A\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length xs \\<in> A} = []\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "using snoc"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A\n  nths (nths xs A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "with eqT1"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths xs B\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (ind_in_set A ` B) = nths (xs @ [x]) B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_reencode_eq_comp:\n  assumes \"B \\<subseteq> A\"\n  shows \"nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. nths (nths [] A) (- ind_in_set A ` B) = nths [] (A - B)\n 2. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. nths (nths [] A) (- ind_in_set A ` B) = nths [] (A - B)\n 2. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths [] A) (- ind_in_set A ` B) = nths [] (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (nths [] A) (- ind_in_set A ` B) = nths [] (A - B)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "case (snoc x xs)"], ["proof (state)\nthis:\n  nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "have sub20: \"A - B \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A - B \\<subseteq> A", "using assms"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A - B \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  A - B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "have seteq: \"{i. i < length xs \\<and> i \\<in> A} = {i. i \\<in> A \\<and> i < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}", "by auto"], ["proof (state)\nthis:\n  {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       nths (nths xs A) (- ind_in_set A ` B) =\n       nths xs (A - B) \\<Longrightarrow>\n       nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n       nths (xs @ [x]) (A - B)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "proof (cases \"length xs \\<in> (A - B)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "case True"], ["proof (state)\nthis:\n  length xs \\<in> A - B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"nths (xs @ [x]) (A - B) = nths xs (A - B) @ nths [x] {l. l + length xs \\<in> (A - B)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) =\n    nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) =\n    nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "moreover"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"nths [x] {l. l + length xs \\<in> (A - B)} = [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A - B} = [x]", "using nths_singleton True"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<in> A - B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A - B} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A - B} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n  nths [x] {l. l + length xs \\<in> A - B} = [x]", "have eqT1: \"nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n  nths [x] {l. l + length xs \\<in> A - B} = [x]\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]", "have \"length xs \\<in> A\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\n\ngoal (1 subgoal):\n 1. length xs \\<in> A", "using True sub20"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\n  length xs \\<in> A - B\n  A - B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> A", "by auto"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> A", "have \"nths [x] {l. l + length xs \\<in> A} = [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "using nths_singleton"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "moreover"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "have \"nths (xs @ [x]) A = nths xs A @ [x]\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A @ [x]", "have \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B) = nths (nths xs A @ [x]) (- (ind_in_set A) ` B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n    nths (nths xs A @ [x]) (- ind_in_set A ` B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)", "have eqT2: \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B)\n      = nths xs (A - B) @ (nths [x] {l. l + length (nths xs A) \\<in> (- (ind_in_set A) ` B)})\""], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n    nths xs (A - B) @\n    nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}", "using nths_append[of \"nths xs A\"] snoc"], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)\n  nths (nths xs A @ ?l') ?A =\n  nths (nths xs A) ?A @ nths ?l' {j. j + length (nths xs A) \\<in> ?A}\n  nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n    nths xs (A - B) @\n    nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths xs (A - B) @\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"length (nths xs A) \\<in> ((ind_in_set A) ` B) \\<Longrightarrow> length xs \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "assume \"length (nths xs A) \\<in> ((ind_in_set A) ` B)\""], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "moreover"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "have \"length (nths xs A) = card {i. i \\<in> A \\<and> i < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i \\<in> A. i < length xs}", "using length_nths[of xs] seteq"], ["proof (prove)\nusing this:\n  length (nths xs ?I) = card {i. i < length xs \\<and> i \\<in> ?I}\n  {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i \\<in> A. i < length xs}", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "ultimately"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n  length (nths xs A) = card {i \\<in> A. i < length xs}", "have \"ind_in_set A (length xs) \\<in> (ind_in_set A ` B)\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. ind_in_set A (length xs) \\<in> ind_in_set A ` B", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < length xs}\n    \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B", "by auto"], ["proof (state)\nthis:\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n    length xs \\<in> B", "then"], ["proof (chain)\npicking this:\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B", "show \"length xs \\<in> B\""], ["proof (prove)\nusing this:\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "using ind_in_set_iff True assms"], ["proof (prove)\nusing this:\n  ind_in_set A (length xs) \\<in> ind_in_set A ` B\n  \\<lbrakk>?x \\<in> ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> (ind_in_set ?A ?x \\<in> ind_in_set ?A ` ?B) =\n                    (?x \\<in> ?B)\n  length xs \\<in> A - B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "by auto"], ["proof (state)\nthis:\n  length xs \\<in> B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "moreover"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"length xs \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<notin> B", "using True"], ["proof (prove)\nusing this:\n  length xs \\<in> A - B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B", "by auto"], ["proof (state)\nthis:\n  length xs \\<notin> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n  length xs \\<notin> B", "have \"length (nths xs A) \\<in> (- (ind_in_set A) ` B)\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B \\<Longrightarrow>\n  length xs \\<in> B\n  length xs \\<notin> B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> - ind_in_set A ` B", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> - ind_in_set A ` B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> - ind_in_set A ` B", "have \"nths [x] {l. l + length (nths xs A) \\<in> (- (ind_in_set A) ` B)} = [x]\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> - ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = [x]", "using nths_singleton"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> - ind_in_set A ` B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = [x]", "have \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B) = nths xs (A - B) @ [x]\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B) @ [x]", "using eqT2"], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = [x]\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths xs (A - B) @\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B) @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B) @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n 2. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B) @ [x]", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B) @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "using eqT1"], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B) @ [x]\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> A - B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"nths (xs @ [x]) (A - B) = nths xs (A - B) @ nths [x] {l. l + length xs \\<in> (A - B)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) =\n    nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) =\n    nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "moreover"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"nths [x] {l. l + length xs \\<in> (A - B)} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A - B} = []", "using nths_singleton False"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<notin> A - B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A - B} = []", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A - B} = []\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n  nths [x] {l. l + length xs \\<in> A - B} = []", "have eqT1: \"nths (xs @ [x]) (A - B) = nths xs (A - B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {l. l + length xs \\<in> A - B}\n  nths [x] {l. l + length xs \\<in> A - B} = []\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "have \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B) = nths xs (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "proof (cases \"length xs \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "case True"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> A", "have True1: \"length xs \\<in> B\""], ["proof (prove)\nusing this:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "using False"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  length xs \\<notin> A - B\n\ngoal (1 subgoal):\n 1. length xs \\<in> B", "by auto"], ["proof (state)\nthis:\n  length xs \\<in> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> B", "have \"nths [x] {l. l + length xs \\<in> A} = [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "using nths_singleton True"], ["proof (prove)\nusing this:\n  length xs \\<in> B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = [x]", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "moreover"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "have \"nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "have \"nths (xs @ [x]) A = nths xs A @ [x]\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length xs \\<in> A} = [x]\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A @ [x]", "have \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B) = nths (nths xs A @ [x]) (- (ind_in_set A) ` B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n    nths (nths xs A @ [x]) (- ind_in_set A ` B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)", "have eqT2: \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B) \n        = nths xs (A - B) @ (nths [x] {l. l + length (nths xs A) \\<in> (- (ind_in_set A) ` B)})\""], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n    nths xs (A - B) @\n    nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}", "using nths_append[of \"nths xs A\"] snoc"], ["proof (prove)\nusing this:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths (nths xs A @ [x]) (- ind_in_set A ` B)\n  nths (nths xs A @ ?l') ?A =\n  nths (nths xs A) ?A @ nths ?l' {j. j + length (nths xs A) \\<in> ?A}\n  nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n    nths xs (A - B) @\n    nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths xs (A - B) @\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "have \"length (nths xs A) \\<in> ((ind_in_set A) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "have \"length (nths xs A) = card {i. i \\<in> A \\<and> i < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i \\<in> A. i < length xs}", "using length_nths[of xs] seteq"], ["proof (prove)\nusing this:\n  length (nths xs ?I) = card {i. i < length xs \\<and> i \\<in> ?I}\n  {i. i < length xs \\<and> i \\<in> A} = {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) = card {i \\<in> A. i < length xs}", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "moreover"], ["proof (state)\nthis:\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "have \"card {i. i \\<in> A \\<and> i < length xs} \\<in> (ind_in_set A ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B", "unfolding ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < length xs}\n    \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B", "using True ind_in_set_iff[of \"length xs\"] True1"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  \\<lbrakk>length xs \\<in> ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> (ind_in_set ?A (length xs) \\<in> ind_in_set ?A ` ?B) =\n                    (length xs \\<in> ?B)\n  length xs \\<in> B\n\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < length xs}\n    \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` B", "by auto"], ["proof (state)\nthis:\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "ultimately"], ["proof (chain)\npicking this:\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B", "show \"length (nths xs A) \\<in> (ind_in_set A) ` B\""], ["proof (prove)\nusing this:\n  length (nths xs A) = card {i \\<in> A. i < length xs}\n  card {i \\<in> A. i < length xs} \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. length (nths xs A) \\<in> ind_in_set A ` B", "by auto"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  length (nths xs A) \\<in> ind_in_set A ` B", "have \"nths [x] {l. l + length (nths xs A) \\<in> (- (ind_in_set A) ` B)} = []\""], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = []", "using nths_singleton"], ["proof (prove)\nusing this:\n  length (nths xs A) \\<in> ind_in_set A ` B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = []", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = []\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n 2. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = []", "show \"nths (nths (xs @ [x]) A) (- (ind_in_set A) ` B) = nths xs (A - B)\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = []\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "using eqT2"], ["proof (prove)\nusing this:\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B} = []\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) =\n  nths xs (A - B) @\n  nths [x] {l. l + length (nths xs A) \\<in> - ind_in_set A ` B}\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  length xs \\<notin> A", "have \"nths [x] {l. l + length xs \\<in> A} = []\""], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = []", "using nths_singleton"], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths [x] {l. l + length xs \\<in> A} = []", "by auto"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = []\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "moreover"], ["proof (state)\nthis:\n  nths [x] {l. l + length xs \\<in> A} = []\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "have \"nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "ultimately"], ["proof (chain)\npicking this:\n  nths [x] {l. l + length xs \\<in> A} = []\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}", "have \"nths (xs @ [x]) A = nths xs A\""], ["proof (prove)\nusing this:\n  nths [x] {l. l + length xs \\<in> A} = []\n  nths (xs @ [x]) A = nths xs A @ nths [x] {l. l + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "using snoc"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A\n  nths (nths xs A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B \\<Longrightarrow>\n    nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "with eqT1"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (nths (xs @ [x]) A) (- ind_in_set A ` B) = nths (xs @ [x]) (A - B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_prod_list_split:\n  fixes A :: \"nat set\" and xs :: \"nat list\"\n  assumes \"B \\<subseteq> A\"\n  shows \"prod_list (nths xs A) = (prod_list (nths xs B)) * (prod_list (nths xs (A - B)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths xs A) =\n    prod_list (nths xs B) * prod_list (nths xs (A - B))", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. prod_list (nths [] A) =\n    prod_list (nths [] B) * prod_list (nths [] (A - B))\n 2. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. prod_list (nths [] A) =\n    prod_list (nths [] B) * prod_list (nths [] (A - B))\n 2. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths [] A) =\n    prod_list (nths [] B) * prod_list (nths [] (A - B))", "by auto"], ["proof (state)\nthis:\n  prod_list (nths [] A) =\n  prod_list (nths [] B) * prod_list (nths [] (A - B))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "let ?C = \"A - B\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "case (snoc x xs)"], ["proof (state)\nthis:\n  prod_list (nths xs A) =\n  prod_list (nths xs B) * prod_list (nths xs (A - B))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have SA: \"nths (xs @ [x]) A = nths xs A @ nths [x] {j. j + length xs \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {j. j + length xs \\<in> A}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ nths [x] {j. j + length xs \\<in> A}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {j. j + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have SB: \"nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have SC: \"nths (xs @ [x]) ?C = nths xs ?C @ nths [x] {j. j + length xs \\<in> ?C}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) =\n    nths xs (A - B) @ nths [x] {j. j + length xs \\<in> A - B}", "using nths_append[of xs]"], ["proof (prove)\nusing this:\n  nths (xs @ ?l') ?A = nths xs ?A @ nths ?l' {j. j + length xs \\<in> ?A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) =\n    nths xs (A - B) @ nths [x] {j. j + length xs \\<in> A - B}", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {j. j + length xs \\<in> A - B}\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (nths xs A) =\n       prod_list (nths xs B) * prod_list (nths xs (A - B)) \\<Longrightarrow>\n       prod_list (nths (xs @ [x]) A) =\n       prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "proof (cases \"length xs \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "case True"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> A", "have \"nths (xs @ [x]) A = nths xs A @ [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "using SA"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  nths (xs @ [x]) A = nths xs A @ nths [x] {j. j + length xs \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A @ [x]", "have eqA: \"prod_list (nths (xs @ [x]) A) = prod_list (nths xs A) * x\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) = prod_list (nths xs A) * x", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) = prod_list (nths xs A) * x\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "proof (cases \"length xs \\<in> B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "case True"], ["proof (state)\nthis:\n  length xs \\<in> B\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> B", "have \"nths (xs @ [x]) B = nths xs B @ [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> B\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ [x]", "using SB"], ["proof (prove)\nusing this:\n  length xs \\<in> B\n  nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B @ [x]", "have eqB: \"prod_list (nths (xs @ [x]) B) = prod_list (nths xs B) * x\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B @ [x]\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) B) = prod_list (nths xs B) * x", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B) * x\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have \"length xs \\<notin> ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B", "using True assms"], ["proof (prove)\nusing this:\n  length xs \\<in> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A - B", "by auto"], ["proof (state)\nthis:\n  length xs \\<notin> A - B\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  length xs \\<notin> A - B", "have \"nths (xs @ [x]) ?C = nths xs ?C\""], ["proof (prove)\nusing this:\n  length xs \\<notin> A - B\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B)", "using SC"], ["proof (prove)\nusing this:\n  length xs \\<notin> A - B\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {j. j + length xs \\<in> A - B}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)", "have eqC: \"prod_list (nths (xs @ [x]) ?C) = prod_list (nths xs ?C)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n\ngoal (2 subgoals):\n 1. length xs \\<in> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n 2. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))", "show ?thesis"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "using snoc eqA eqB eqC"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n  prod_list (nths xs A) =\n  prod_list (nths xs B) * prod_list (nths xs (A - B))\n  prod_list (nths (xs @ [x]) A) = prod_list (nths xs A) * x\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B) * x\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) =\n  prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  length xs \\<notin> B", "have \"nths (xs @ [x]) B = nths xs B\""], ["proof (prove)\nusing this:\n  length xs \\<notin> B\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B", "using SB"], ["proof (prove)\nusing this:\n  length xs \\<notin> B\n  nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B", "have eqB: \"prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)", "have \"length xs \\<in> ?C\""], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\n\ngoal (1 subgoal):\n 1. length xs \\<in> A - B", "using True False assms"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\n  length xs \\<in> A\n  length xs \\<notin> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<in> A - B", "by auto"], ["proof (state)\nthis:\n  length xs \\<in> A - B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  length xs \\<in> A - B", "have \"nths (xs @ [x]) ?C = nths xs ?C @ [x]\""], ["proof (prove)\nusing this:\n  length xs \\<in> A - B\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]", "using SC"], ["proof (prove)\nusing this:\n  length xs \\<in> A - B\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {j. j + length xs \\<in> A - B}\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]", "have eqC: \"prod_list (nths (xs @ [x]) ?C) = prod_list (nths xs ?C) * x\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B) @ [x]\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B)) * x", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B)) * x\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B)) * x", "show ?thesis"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B)) * x\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "using snoc eqA eqB eqC"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B)) * x\n  prod_list (nths xs A) =\n  prod_list (nths xs B) * prod_list (nths xs (A - B))\n  prod_list (nths (xs @ [x]) A) = prod_list (nths xs A) * x\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B)) * x\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) =\n  prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) =\n  prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  length xs \\<notin> A", "have ninB: \"length xs \\<notin> B\" and ninC: \"length xs \\<notin> ?C\""], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B &&& length xs \\<notin> A - B", "using assms"], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> B &&& length xs \\<notin> A - B", "by auto"], ["proof (state)\nthis:\n  length xs \\<notin> B\n  length xs \\<notin> A - B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have \"nths (xs @ [x]) A = nths xs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A", "using SA False nths_singleton"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A @ nths [x] {j. j + length xs \\<in> A}\n  length xs \\<notin> A\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) A = nths xs A", "have eqA: \"prod_list (nths (xs @ [x]) A) = prod_list (nths xs A)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) = prod_list (nths xs A)", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) = prod_list (nths xs A)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have \"nths (xs @ [x]) B = nths xs B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B", "using SB ninB nths_singleton"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B @ nths [x] {j. j + length xs \\<in> B}\n  length xs \\<notin> B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) B = nths xs B", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) B = nths xs B\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) B = nths xs B", "have eqB: \"prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) B = nths xs B\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "have \"nths (xs @ [x]) ?C = nths xs ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B)", "using SC ninC nths_singleton"], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) =\n  nths xs (A - B) @ nths [x] {j. j + length xs \\<in> A - B}\n  length xs \\<notin> A - B\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (A - B) = nths xs (A - B)", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)", "have eqC: \"prod_list (nths (xs @ [x]) ?C) = prod_list (nths xs ?C)\""], ["proof (prove)\nusing this:\n  nths (xs @ [x]) (A - B) = nths xs (A - B)\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "then"], ["proof (chain)\npicking this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))", "show ?thesis"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "using eqA eqB eqC snoc"], ["proof (prove)\nusing this:\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n  prod_list (nths (xs @ [x]) A) = prod_list (nths xs A)\n  prod_list (nths (xs @ [x]) B) = prod_list (nths xs B)\n  prod_list (nths (xs @ [x]) (A - B)) = prod_list (nths xs (A - B))\n  prod_list (nths xs A) =\n  prod_list (nths xs B) * prod_list (nths xs (A - B))\n\ngoal (1 subgoal):\n 1. prod_list (nths (xs @ [x]) A) =\n    prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))", "by auto"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) =\n  prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prod_list (nths (xs @ [x]) A) =\n  prod_list (nths (xs @ [x]) B) * prod_list (nths (xs @ [x]) (A - B))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Encodings\\<close>"], ["", "lemma digit_encode_take:\n  \"take n (digit_encode ds a) = digit_encode (take n ds) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n (digit_encode ds a) = digit_encode (take n ds) a", "proof (induct n arbitrary: ds a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ds a. take 0 (digit_encode ds a) = digit_encode (take 0 ds) a\n 2. \\<And>n ds a.\n       (\\<And>ds a.\n           take n (digit_encode ds a) =\n           digit_encode (take n ds) a) \\<Longrightarrow>\n       take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ds a. take 0 (digit_encode ds a) = digit_encode (take 0 ds) a\n 2. \\<And>n ds a.\n       (\\<And>ds a.\n           take n (digit_encode ds a) =\n           digit_encode (take n ds) a) \\<Longrightarrow>\n       take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. take 0 (digit_encode ds a) = digit_encode (take 0 ds) a", "by auto"], ["proof (state)\nthis:\n  take 0 (digit_encode ds a) = digit_encode (take 0 ds) a\n\ngoal (1 subgoal):\n 1. \\<And>n ds a.\n       (\\<And>ds a.\n           take n (digit_encode ds a) =\n           digit_encode (take n ds) a) \\<Longrightarrow>\n       take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ds a.\n       (\\<And>ds a.\n           take n (digit_encode ds a) =\n           digit_encode (take n ds) a) \\<Longrightarrow>\n       take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "case (Suc n)"], ["proof (state)\nthis:\n  take n (digit_encode ?ds ?a) = digit_encode (take n ?ds) ?a\n\ngoal (1 subgoal):\n 1. \\<And>n ds a.\n       (\\<And>ds a.\n           take n (digit_encode ds a) =\n           digit_encode (take n ds) a) \\<Longrightarrow>\n       take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "then"], ["proof (chain)\npicking this:\n  take n (digit_encode ?ds ?a) = digit_encode (take n ?ds) ?a", "show ?case"], ["proof (prove)\nusing this:\n  take n (digit_encode ?ds ?a) = digit_encode (take n ?ds) ?a\n\ngoal (1 subgoal):\n 1. take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "proof (cases ds)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ds a.\n                take n (digit_encode ds a) = digit_encode (take n ds) a;\n     ds = []\\<rbrakk>\n    \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                      digit_encode (take (Suc n) ds) a\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   take n (digit_encode ds a) = digit_encode (take n ds) a;\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                         digit_encode (take (Suc n) ds) a", "case Nil"], ["proof (state)\nthis:\n  ds = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ds a.\n                take n (digit_encode ds a) = digit_encode (take n ds) a;\n     ds = []\\<rbrakk>\n    \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                      digit_encode (take (Suc n) ds) a\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   take n (digit_encode ds a) = digit_encode (take n ds) a;\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                         digit_encode (take (Suc n) ds) a", "then"], ["proof (chain)\npicking this:\n  ds = []", "show ?thesis"], ["proof (prove)\nusing this:\n  ds = []\n\ngoal (1 subgoal):\n 1. take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "by auto"], ["proof (state)\nthis:\n  take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   take n (digit_encode ds a) = digit_encode (take n ds) a;\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                         digit_encode (take (Suc n) ds) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   take n (digit_encode ds a) = digit_encode (take n ds) a;\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                         digit_encode (take (Suc n) ds) a", "case (Cons d ds')"], ["proof (state)\nthis:\n  ds = d # ds'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   take n (digit_encode ds a) = digit_encode (take n ds) a;\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> take (Suc n) (digit_encode ds a) =\n                         digit_encode (take (Suc n) ds) a", "then"], ["proof (chain)\npicking this:\n  ds = d # ds'", "show ?thesis"], ["proof (prove)\nusing this:\n  ds = d # ds'\n\ngoal (1 subgoal):\n 1. take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a", "by (auto simp add: Suc)"], ["proof (state)\nthis:\n  take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  take (Suc n) (digit_encode ds a) = digit_encode (take (Suc n) ds) a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_minus_upt_eq_drop:\n  \"nths l (-{..<n}) = drop n l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths l (- {..<n}) = drop n l", "apply (induct l rule: rev_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths [] (- {..<n}) = drop n []\n 2. \\<And>x xs.\n       nths xs (- {..<n}) = drop n xs \\<Longrightarrow>\n       nths (xs @ [x]) (- {..<n}) = drop n (xs @ [x])", "by (auto simp add: nths_append)"], ["", "lemma digit_encode_drop:\n  \"drop n (digit_encode ds a) = digit_encode (drop n ds) (a div (prod_list (take n ds)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop n (digit_encode ds a) =\n    digit_encode (drop n ds) (a div prod_list (take n ds))", "proof (induct n arbitrary: ds a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ds a.\n       drop 0 (digit_encode ds a) =\n       digit_encode (drop 0 ds) (a div prod_list (take 0 ds))\n 2. \\<And>n ds a.\n       (\\<And>ds a.\n           drop n (digit_encode ds a) =\n           digit_encode (drop n ds)\n            (a div prod_list (take n ds))) \\<Longrightarrow>\n       drop (Suc n) (digit_encode ds a) =\n       digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ds a.\n       drop 0 (digit_encode ds a) =\n       digit_encode (drop 0 ds) (a div prod_list (take 0 ds))\n 2. \\<And>n ds a.\n       (\\<And>ds a.\n           drop n (digit_encode ds a) =\n           digit_encode (drop n ds)\n            (a div prod_list (take n ds))) \\<Longrightarrow>\n       drop (Suc n) (digit_encode ds a) =\n       digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop 0 (digit_encode ds a) =\n    digit_encode (drop 0 ds) (a div prod_list (take 0 ds))", "by auto"], ["proof (state)\nthis:\n  drop 0 (digit_encode ds a) =\n  digit_encode (drop 0 ds) (a div prod_list (take 0 ds))\n\ngoal (1 subgoal):\n 1. \\<And>n ds a.\n       (\\<And>ds a.\n           drop n (digit_encode ds a) =\n           digit_encode (drop n ds)\n            (a div prod_list (take n ds))) \\<Longrightarrow>\n       drop (Suc n) (digit_encode ds a) =\n       digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ds a.\n       (\\<And>ds a.\n           drop n (digit_encode ds a) =\n           digit_encode (drop n ds)\n            (a div prod_list (take n ds))) \\<Longrightarrow>\n       drop (Suc n) (digit_encode ds a) =\n       digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "case (Suc n)"], ["proof (state)\nthis:\n  drop n (digit_encode ?ds ?a) =\n  digit_encode (drop n ?ds) (?a div prod_list (take n ?ds))\n\ngoal (1 subgoal):\n 1. \\<And>n ds a.\n       (\\<And>ds a.\n           drop n (digit_encode ds a) =\n           digit_encode (drop n ds)\n            (a div prod_list (take n ds))) \\<Longrightarrow>\n       drop (Suc n) (digit_encode ds a) =\n       digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "then"], ["proof (chain)\npicking this:\n  drop n (digit_encode ?ds ?a) =\n  digit_encode (drop n ?ds) (?a div prod_list (take n ?ds))", "show ?case"], ["proof (prove)\nusing this:\n  drop n (digit_encode ?ds ?a) =\n  digit_encode (drop n ?ds) (?a div prod_list (take n ?ds))\n\ngoal (1 subgoal):\n 1. drop (Suc n) (digit_encode ds a) =\n    digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "proof (cases ds)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ds a.\n                drop n (digit_encode ds a) =\n                digit_encode (drop n ds) (a div prod_list (take n ds));\n     ds = []\\<rbrakk>\n    \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                      digit_encode (drop (Suc n) ds)\n                       (a div prod_list (take (Suc n) ds))\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   drop n (digit_encode ds a) =\n                   digit_encode (drop n ds) (a div prod_list (take n ds));\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                         digit_encode (drop (Suc n) ds)\n                          (a div prod_list (take (Suc n) ds))", "case Nil"], ["proof (state)\nthis:\n  ds = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ds a.\n                drop n (digit_encode ds a) =\n                digit_encode (drop n ds) (a div prod_list (take n ds));\n     ds = []\\<rbrakk>\n    \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                      digit_encode (drop (Suc n) ds)\n                       (a div prod_list (take (Suc n) ds))\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   drop n (digit_encode ds a) =\n                   digit_encode (drop n ds) (a div prod_list (take n ds));\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                         digit_encode (drop (Suc n) ds)\n                          (a div prod_list (take (Suc n) ds))", "then"], ["proof (chain)\npicking this:\n  ds = []", "show ?thesis"], ["proof (prove)\nusing this:\n  ds = []\n\ngoal (1 subgoal):\n 1. drop (Suc n) (digit_encode ds a) =\n    digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "by auto"], ["proof (state)\nthis:\n  drop (Suc n) (digit_encode ds a) =\n  digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   drop n (digit_encode ds a) =\n                   digit_encode (drop n ds) (a div prod_list (take n ds));\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                         digit_encode (drop (Suc n) ds)\n                          (a div prod_list (take (Suc n) ds))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   drop n (digit_encode ds a) =\n                   digit_encode (drop n ds) (a div prod_list (take n ds));\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                         digit_encode (drop (Suc n) ds)\n                          (a div prod_list (take (Suc n) ds))", "case (Cons d ds')"], ["proof (state)\nthis:\n  ds = d # ds'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>\\<And>ds a.\n                   drop n (digit_encode ds a) =\n                   digit_encode (drop n ds) (a div prod_list (take n ds));\n        ds = a # list\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (digit_encode ds a) =\n                         digit_encode (drop (Suc n) ds)\n                          (a div prod_list (take (Suc n) ds))", "then"], ["proof (chain)\npicking this:\n  ds = d # ds'", "show ?thesis"], ["proof (prove)\nusing this:\n  ds = d # ds'\n\ngoal (1 subgoal):\n 1. drop (Suc n) (digit_encode ds a) =\n    digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))", "by (auto simp add: Suc div_mult2_eq)"], ["proof (state)\nthis:\n  drop (Suc n) (digit_encode ds a) =\n  digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  drop (Suc n) (digit_encode ds a) =\n  digit_encode (drop (Suc n) ds) (a div prod_list (take (Suc n) ds))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>List of active variables in the partial state\\<close>"], ["", "locale partial_state = state_sig +\n  fixes vars :: \"nat set\""], ["", "context partial_state\nbegin"], ["", "text \\<open>Dimensions of active variables\\<close>"], ["", "abbreviation avars :: \"nat set\" where\n  \"avars \\<equiv> {0..<length dims}\""], ["", "definition dims1 :: \"nat list\" where\n  \"dims1 = nths dims vars\""], ["", "definition dims2 :: \"nat list\" where\n  \"dims2 = nths dims (-vars)\""], ["", "lemma dims1_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"dims1 = nths dims (A \\<inter> vars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims1 = nths dims (A \\<inter> vars)", "using nths_intersection_eq assms"], ["proof (prove)\nusing this:\n  {0..<length ?xs} \\<subseteq> ?A \\<Longrightarrow>\n  nths ?xs ?B = nths ?xs (?A \\<inter> ?B)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. dims1 = nths dims (A \\<inter> vars)", "unfolding dims1_def"], ["proof (prove)\nusing this:\n  {0..<length ?xs} \\<subseteq> ?A \\<Longrightarrow>\n  nths ?xs ?B = nths ?xs (?A \\<inter> ?B)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. nths dims vars = nths dims (A \\<inter> vars)", "by auto"], ["", "lemma dims2_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"dims2 = nths dims (A-vars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dims2 = nths dims (A - vars)", "using nths_minus_eq assms"], ["proof (prove)\nusing this:\n  {0..<length ?xs} \\<subseteq> ?A \\<Longrightarrow>\n  nths ?xs (- ?B) = nths ?xs (?A - ?B)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. dims2 = nths dims (A - vars)", "unfolding dims2_def"], ["proof (prove)\nusing this:\n  {0..<length ?xs} \\<subseteq> ?A \\<Longrightarrow>\n  nths ?xs (- ?B) = nths ?xs (?A - ?B)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. nths dims (- vars) = nths dims (A - vars)", "by auto"], ["", "text \\<open>Total dimension for the active variables\\<close>"], ["", "definition d1 :: nat where\n  \"d1 = prod_list dims1\""], ["", "text \\<open>Total dimension for the non-active variables\\<close>"], ["", "definition d2 :: nat where\n  \"d2 = prod_list dims2\""], ["", "text \\<open>Translating dimension in d to dimension in d1\\<close>"], ["", "definition encode1 :: \"nat \\<Rightarrow> nat\" where\n  \"encode1 i = digit_decode dims1 (nths (digit_encode dims i) vars)\""], ["", "lemma encode1_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"encode1 i = digit_decode dims1 (nths (digit_encode dims i) (A \\<inter> vars))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode1 i =\n    digit_decode dims1 (nths (digit_encode dims i) (A \\<inter> vars))", "using length_digit_encode[of dims i] nths_intersection_eq[of \"digit_encode dims i\" A vars] assms"], ["proof (prove)\nusing this:\n  length (digit_encode dims i) = length dims\n  {0..<length (digit_encode dims i)} \\<subseteq> A \\<Longrightarrow>\n  nths (digit_encode dims i) vars =\n  nths (digit_encode dims i) (A \\<inter> vars)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. encode1 i =\n    digit_decode dims1 (nths (digit_encode dims i) (A \\<inter> vars))", "unfolding encode1_def"], ["proof (prove)\nusing this:\n  length (digit_encode dims i) = length dims\n  {0..<length (digit_encode dims i)} \\<subseteq> A \\<Longrightarrow>\n  nths (digit_encode dims i) vars =\n  nths (digit_encode dims i) (A \\<inter> vars)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. digit_decode dims1 (nths (digit_encode dims i) vars) =\n    digit_decode dims1 (nths (digit_encode dims i) (A \\<inter> vars))", "by (subgoal_tac \"nths (digit_encode dims i) (vars) = nths (digit_encode dims i) (A \\<inter> vars)\", auto)"], ["", "text \\<open>Translating dimension in d to dimension in d2\\<close>"], ["", "definition encode2 :: \"nat \\<Rightarrow> nat\" where\n  \"encode2 i = digit_decode dims2 (nths (digit_encode dims i) (-vars))\""], ["", "lemma encode2_alter:\n  assumes \"avars \\<subseteq> A\"\n  shows \"encode2 i = digit_decode dims2 (nths (digit_encode dims i) (A-vars))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode2 i = digit_decode dims2 (nths (digit_encode dims i) (A - vars))", "using length_digit_encode[of dims i] nths_minus_eq[of \"digit_encode dims i\" A] assms"], ["proof (prove)\nusing this:\n  length (digit_encode dims i) = length dims\n  {0..<length (digit_encode dims i)} \\<subseteq> A \\<Longrightarrow>\n  nths (digit_encode dims i) (- ?B) = nths (digit_encode dims i) (A - ?B)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. encode2 i = digit_decode dims2 (nths (digit_encode dims i) (A - vars))", "unfolding encode2_def"], ["proof (prove)\nusing this:\n  length (digit_encode dims i) = length dims\n  {0..<length (digit_encode dims i)} \\<subseteq> A \\<Longrightarrow>\n  nths (digit_encode dims i) (- ?B) = nths (digit_encode dims i) (A - ?B)\n  avars \\<subseteq> A\n\ngoal (1 subgoal):\n 1. digit_decode dims2 (nths (digit_encode dims i) (- vars)) =\n    digit_decode dims2 (nths (digit_encode dims i) (A - vars))", "by (subgoal_tac \"nths (digit_encode dims i) (- vars) = nths (digit_encode dims i) (A - vars)\", auto)"], ["", "lemma encode1_lt [simp]:\n  assumes \"i < d\"\n  shows \"encode1 i < d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode1 i < d1", "unfolding d1_def encode1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode dims1 (nths (digit_encode dims i) vars) < prod_list dims1", "apply (rule digit_decode_lt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (digit_encode dims i) vars \\<lhd> dims1", "using dims1_def assms d_def digit_encode_valid_index valid_index_nths"], ["proof (prove)\nusing this:\n  dims1 = nths dims vars\n  i < d\n  d = prod_list dims\n  ?a < prod_list ?ds \\<Longrightarrow> digit_encode ?ds ?a \\<lhd> ?ds\n  ?is \\<lhd> ?ds \\<Longrightarrow> nths ?is ?A \\<lhd> nths ?ds ?A\n\ngoal (1 subgoal):\n 1. nths (digit_encode dims i) vars \\<lhd> dims1", "by auto"], ["", "lemma encode2_lt [simp]:\n  assumes \"i < d\"\n  shows \"encode2 i < d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode2 i < d2", "unfolding d2_def encode2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode dims2 (nths (digit_encode dims i) (- vars))\n    < prod_list dims2", "apply (rule digit_decode_lt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (digit_encode dims i) (- vars) \\<lhd> dims2", "using dims2_def assms d_def digit_encode_valid_index valid_index_nths"], ["proof (prove)\nusing this:\n  dims2 = nths dims (- vars)\n  i < d\n  d = prod_list dims\n  ?a < prod_list ?ds \\<Longrightarrow> digit_encode ?ds ?a \\<lhd> ?ds\n  ?is \\<lhd> ?ds \\<Longrightarrow> nths ?is ?A \\<lhd> nths ?ds ?A\n\ngoal (1 subgoal):\n 1. nths (digit_encode dims i) (- vars) \\<lhd> dims2", "by auto"], ["", "text \\<open>Given dimensions in d1 and d2, form dimension in d\\<close>"], ["", "fun encode12 :: \"nat \\<times> nat \\<Rightarrow> nat\" where\n  \"encode12 (i, j) = digit_decode dims (weave vars (digit_encode dims1 i) (digit_encode dims2 j))\""], ["", "declare encode12.simps [simp del]"], ["", "lemma encode12_inv:\n  assumes \"k < d\"\n  shows \"encode12 (encode1 k, encode2 k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode12 (encode1 k, encode2 k) = k", "unfolding encode12.simps encode1_def encode2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode dims\n     (weave vars\n       (digit_encode dims1\n         (digit_decode dims1 (nths (digit_encode dims k) vars)))\n       (digit_encode dims2\n         (digit_decode dims2 (nths (digit_encode dims k) (- vars))))) =\n    k", "using assms d_def digit_encode_valid_index dims1_def dims2_def valid_index_nths"], ["proof (prove)\nusing this:\n  k < d\n  d = prod_list dims\n  ?a < prod_list ?ds \\<Longrightarrow> digit_encode ?ds ?a \\<lhd> ?ds\n  dims1 = nths dims vars\n  dims2 = nths dims (- vars)\n  ?is \\<lhd> ?ds \\<Longrightarrow> nths ?is ?A \\<lhd> nths ?ds ?A\n\ngoal (1 subgoal):\n 1. digit_decode dims\n     (weave vars\n       (digit_encode dims1\n         (digit_decode dims1 (nths (digit_encode dims k) vars)))\n       (digit_encode dims2\n         (digit_decode dims2 (nths (digit_encode dims k) (- vars))))) =\n    k", "by auto"], ["", "lemma encode12_inv1:\n  assumes \"i < d1\" \"j < d2\"\n  shows \"encode1 (encode12 (i, j)) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode1 (encode12 (i, j)) = i", "unfolding encode12.simps encode1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode dims1\n     (nths\n       (digit_encode dims\n         (digit_decode dims\n           (weave vars (digit_encode dims1 i) (digit_encode dims2 j))))\n       vars) =\n    i", "using assms"], ["proof (prove)\nusing this:\n  i < d1\n  j < d2\n\ngoal (1 subgoal):\n 1. digit_decode dims1\n     (nths\n       (digit_encode dims\n         (digit_decode dims\n           (weave vars (digit_encode dims1 i) (digit_encode dims2 j))))\n       vars) =\n    i", "unfolding d1_def d2_def dims1_def dims2_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims vars)\n  j < prod_list (nths dims (- vars))\n\ngoal (1 subgoal):\n 1. digit_decode (nths dims vars)\n     (nths\n       (digit_encode dims\n         (digit_decode dims\n           (weave vars (digit_encode (nths dims vars) i)\n             (digit_encode (nths dims (- vars)) j))))\n       vars) =\n    i", "by (metis digit_decode_encode_lt digit_encode_decode digit_encode_valid_index valid_index_weave(1,2))"], ["", "lemma encode12_inv2:\n  assumes \"i < d1\" \"j < d2\"\n  shows \"encode2 (encode12 (i, j)) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode2 (encode12 (i, j)) = j", "unfolding encode12.simps encode2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode dims2\n     (nths\n       (digit_encode dims\n         (digit_decode dims\n           (weave vars (digit_encode dims1 i) (digit_encode dims2 j))))\n       (- vars)) =\n    j", "using assms"], ["proof (prove)\nusing this:\n  i < d1\n  j < d2\n\ngoal (1 subgoal):\n 1. digit_decode dims2\n     (nths\n       (digit_encode dims\n         (digit_decode dims\n           (weave vars (digit_encode dims1 i) (digit_encode dims2 j))))\n       (- vars)) =\n    j", "unfolding d1_def d2_def dims1_def dims2_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims vars)\n  j < prod_list (nths dims (- vars))\n\ngoal (1 subgoal):\n 1. digit_decode (nths dims (- vars))\n     (nths\n       (digit_encode dims\n         (digit_decode dims\n           (weave vars (digit_encode (nths dims vars) i)\n             (digit_encode (nths dims (- vars)) j))))\n       (- vars)) =\n    j", "by (metis digit_decode_encode_lt digit_encode_decode digit_encode_valid_index valid_index_weave(1,3))"], ["", "lemma encode12_lt:\n  assumes \"i < d1\" \"j < d2\"\n  shows \"encode12 (i, j) < d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. encode12 (i, j) < d", "using assms"], ["proof (prove)\nusing this:\n  i < d1\n  j < d2\n\ngoal (1 subgoal):\n 1. encode12 (i, j) < d", "unfolding encode12.simps d_def d1_def d2_def dims1_def dims2_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims vars)\n  j < prod_list (nths dims (- vars))\n\ngoal (1 subgoal):\n 1. digit_decode dims\n     (weave vars (digit_encode (nths dims vars) i)\n       (digit_encode (nths dims (- vars)) j))\n    < prod_list dims", "by (simp add: digit_decode_lt digit_encode_valid_index valid_index_weave(1))"], ["", "lemma sum_encode: \"(\\<Sum>i = 0..<d1. \\<Sum>j = 0..<d2. f i j) = sum (\\<lambda>k. f (encode1 k) (encode2 k)) {0..<d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<d1. sum (f i) {0..<d2}) =\n    (\\<Sum>k = 0..<d. f (encode1 k) (encode2 k))", "apply (subst sum.cartesian_product)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(x, y)\\<in>{0..<d1} \\<times> {0..<d2}. f x y) =\n    (\\<Sum>k = 0..<d. f (encode1 k) (encode2 k))", "apply (rule sum.reindex_bij_witness[where i=\"\\<lambda>k. (encode1 k, encode2 k)\" and j=encode12])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a.\n       a \\<in> {0..<d1} \\<times> {0..<d2} \\<Longrightarrow>\n       (encode1 (encode12 a), encode2 (encode12 a)) = a\n 2. \\<And>a.\n       a \\<in> {0..<d1} \\<times> {0..<d2} \\<Longrightarrow>\n       encode12 a \\<in> {0..<d}\n 3. \\<And>b.\n       b \\<in> {0..<d} \\<Longrightarrow> encode12 (encode1 b, encode2 b) = b\n 4. \\<And>b.\n       b \\<in> {0..<d} \\<Longrightarrow>\n       (encode1 b, encode2 b) \\<in> {0..<d1} \\<times> {0..<d2}\n 5. \\<And>a.\n       a \\<in> {0..<d1} \\<times> {0..<d2} \\<Longrightarrow>\n       f (encode1 (encode12 a)) (encode2 (encode12 a)) =\n       (case a of (x, xa) \\<Rightarrow> f x xa)", "by (auto simp: encode12_inv1 encode12_inv2 encode12_inv encode12_lt)"], ["", "subsection \\<open>Tensor product of vectors and matrices\\<close>"], ["", "text \\<open>Given vector v1 of dimension d1, and vector v2 of dimension d2, form\n  the tensor vector of dimension d1 * d2 = d\\<close>"], ["", "definition tensor_vec :: \"'a::times vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\" where\n  \"tensor_vec v1 v2 = Matrix.vec d (\\<lambda>i. v1 $ encode1 i * v2 $ encode2 i)\""], ["", "lemma tensor_vec_dim [simp]:\n  \"dim_vec (tensor_vec v1 v2) = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (tensor_vec v1 v2) = d", "unfolding tensor_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (Matrix.vec d (\\<lambda>i. v1 $ encode1 i * v2 $ encode2 i)) = d", "by auto"], ["", "lemma tensor_vec_carrier:\n  \"tensor_vec v1 v2 \\<in> carrier_vec d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_vec v1 v2 \\<in> carrier_vec d", "unfolding tensor_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec d (\\<lambda>i. v1 $ encode1 i * v2 $ encode2 i)\n    \\<in> carrier_vec d", "by auto"], ["", "lemma tensor_vec_eval:\n  assumes \"i < d\"\n  shows \"tensor_vec v1 v2 $ i = v1 $ encode1 i * v2 $ encode2 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_vec v1 v2 $ i = v1 $ encode1 i * v2 $ encode2 i", "unfolding tensor_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix.vec d (\\<lambda>i. v1 $ encode1 i * v2 $ encode2 i) $ i =\n    v1 $ encode1 i * v2 $ encode2 i", "using assms"], ["proof (prove)\nusing this:\n  i < d\n\ngoal (1 subgoal):\n 1. Matrix.vec d (\\<lambda>i. v1 $ encode1 i * v2 $ encode2 i) $ i =\n    v1 $ encode1 i * v2 $ encode2 i", "by simp"], ["", "lemma tensor_vec_add1:\n  fixes v1 v2 v3 :: \"'a::comm_ring vec\"\n  assumes \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d1\"\n    and \"v3 \\<in> carrier_vec d2\"\n  shows \"tensor_vec (v1 + v2) v3 = tensor_vec v1 v3 + tensor_vec v2 v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_vec (v1 + v2) v3 = tensor_vec v1 v3 + tensor_vec v2 v3", "apply (rule eq_vecI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (v1 + v2) v3 $ i =\n       tensor_vec v1 v3 $ i + tensor_vec v2 v3 $ i", "unfolding tensor_vec_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       (v1 + v2) $ encode1 i * v3 $ encode2 i =\n       v1 $ encode1 i * v3 $ encode2 i + v2 $ encode1 i * v3 $ encode2 i", "using assms(2) comm_semiring_class.distrib"], ["proof (prove)\nusing this:\n  v2 \\<in> carrier_vec d1\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       (v1 + v2) $ encode1 i * v3 $ encode2 i =\n       v1 $ encode1 i * v3 $ encode2 i + v2 $ encode1 i * v3 $ encode2 i", "by force"], ["", "lemma tensor_vec_add2:\n  fixes v1 v2 v3 :: \"'a::comm_ring vec\"\n  assumes \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d2\"\n    and \"v3 \\<in> carrier_vec d2\"\n  shows \"tensor_vec v1 (v2 + v3) = tensor_vec v1 v2 + tensor_vec v1 v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_vec v1 (v2 + v3) = tensor_vec v1 v2 + tensor_vec v1 v3", "apply (rule eq_vecI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec v1 (v2 + v3) $ i =\n       tensor_vec v1 v2 $ i + tensor_vec v1 v3 $ i", "unfolding tensor_vec_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       v1 $ encode1 i * (v2 + v3) $ encode2 i =\n       v1 $ encode1 i * v2 $ encode2 i + v1 $ encode1 i * v3 $ encode2 i", "using assms(3) semiring_class.distrib_left"], ["proof (prove)\nusing this:\n  v3 \\<in> carrier_vec d2\n  ?a * (?b + ?c) = ?a * ?b + ?a * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       v1 $ encode1 i * (v2 + v3) $ encode2 i =\n       v1 $ encode1 i * v2 $ encode2 i + v1 $ encode1 i * v3 $ encode2 i", "by force"], ["", "text \\<open>Given d1-by-d1 matrix m1, and d2-by-d2 matrix m2, form d-by-d matrix\\<close>"], ["", "definition tensor_mat :: \"'a::comm_ring_1 mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" where\n  \"tensor_mat m1 m2 = Matrix.mat d d (\\<lambda>(i,j).\n    m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j))\""], ["", "lemma tensor_mat_dim_row [simp]:\n  \"dim_row (tensor_mat m1 m2) = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (tensor_mat m1 m2) = d", "unfolding tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat d d\n       (\\<lambda>(i, j).\n           m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j))) =\n    d", "by auto"], ["", "lemma tensor_mat_dim_col [simp]:\n  \"dim_col (tensor_mat m1 m2) = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (tensor_mat m1 m2) = d", "unfolding tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (mat d d\n       (\\<lambda>(i, j).\n           m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j))) =\n    d", "by auto"], ["", "lemma tensor_mat_carrier:\n  \"tensor_mat m1 m2 \\<in> carrier_mat d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "unfolding tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat d d\n     (\\<lambda>(i, j).\n         m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j))\n    \\<in> carrier_mat d d", "by auto"], ["", "lemma tensor_mat_eval:\n  assumes \"i < d\" \"j < d\"\n  shows \"tensor_mat m1 m2 $$ (i, j) = m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 $$ (i, j) =\n    m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)", "unfolding tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat d d\n     (\\<lambda>(i, j).\n         m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)) $$\n    (i, j) =\n    m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)", "using assms"], ["proof (prove)\nusing this:\n  i < d\n  j < d\n\ngoal (1 subgoal):\n 1. mat d d\n     (\\<lambda>(i, j).\n         m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)) $$\n    (i, j) =\n    m1 $$ (encode1 i, encode1 j) * m2 $$ (encode2 i, encode2 j)", "by simp"], ["", "lemma tensor_mat_zero1:\n  shows \"tensor_mat (0\\<^sub>m d1 d1) m1 = 0\\<^sub>m d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (0\\<^sub>m d1 d1) m1 = 0\\<^sub>m d d", "apply (rule eq_matI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m d d);\n        j < dim_col (0\\<^sub>m d d)\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (0\\<^sub>m d1 d1) m1 $$ (i, j) =\n                         0\\<^sub>m d d $$ (i, j)\n 2. dim_row (tensor_mat (0\\<^sub>m d1 d1) m1) = dim_row (0\\<^sub>m d d)\n 3. dim_col (tensor_mat (0\\<^sub>m d1 d1) m1) = dim_col (0\\<^sub>m d d)", "by (auto simp add: tensor_mat_eval)"], ["", "lemma tensor_mat_zero2:\n  shows \"tensor_mat m1 (0\\<^sub>m d2 d2) = 0\\<^sub>m d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 (0\\<^sub>m d2 d2) = 0\\<^sub>m d d", "apply (rule eq_matI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row (0\\<^sub>m d d);\n        j < dim_col (0\\<^sub>m d d)\\<rbrakk>\n       \\<Longrightarrow> tensor_mat m1 (0\\<^sub>m d2 d2) $$ (i, j) =\n                         0\\<^sub>m d d $$ (i, j)\n 2. dim_row (tensor_mat m1 (0\\<^sub>m d2 d2)) = dim_row (0\\<^sub>m d d)\n 3. dim_col (tensor_mat m1 (0\\<^sub>m d2 d2)) = dim_col (0\\<^sub>m d d)", "by (auto simp add: tensor_mat_eval)"], ["", "lemma tensor_mat_add1:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (m1 + m2) m3 = tensor_mat m1 m3 + tensor_mat m2 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (m1 + m2) m3 = tensor_mat m1 m3 + tensor_mat m2 m3", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 + m2) m3 $$ (i, j) =\n                         tensor_mat m1 m3 $$ (i, j) +\n                         tensor_mat m2 m3 $$ (i, j)", "unfolding tensor_mat_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 + m2) $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) +\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "using assms(2) comm_semiring_class.distrib"], ["proof (prove)\nusing this:\n  m2 \\<in> carrier_mat d1 d1\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 + m2) $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) +\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "by force"], ["", "lemma tensor_mat_add2:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat m1 (m2 + m3) = tensor_mat m1 m2 + tensor_mat m1 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 (m2 + m3) = tensor_mat m1 m2 + tensor_mat m1 m3", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat m1 (m2 + m3) $$ (i, j) =\n                         tensor_mat m1 m2 $$ (i, j) +\n                         tensor_mat m1 m3 $$ (i, j)", "unfolding tensor_mat_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$ (encode1 i, encode1 j) *\n                         (m2 + m3) $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m2 $$ (encode2 i, encode2 j) +\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "using assms(3) semiring_class.distrib_left"], ["proof (prove)\nusing this:\n  m3 \\<in> carrier_mat d2 d2\n  ?a * (?b + ?c) = ?a * ?b + ?a * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$ (encode1 i, encode1 j) *\n                         (m2 + m3) $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m2 $$ (encode2 i, encode2 j) +\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "by force"], ["", "lemma tensor_mat_minus1:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (m1 - m2) m3 = tensor_mat m1 m3 - tensor_mat m2 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (m1 - m2) m3 = tensor_mat m1 m3 - tensor_mat m2 m3", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 - m2) m3 $$ (i, j) =\n                         tensor_mat m1 m3 $$ (i, j) -\n                         tensor_mat m2 m3 $$ (i, j)", "unfolding tensor_mat_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 - m2) $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) -\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "apply (subst index_minus_mat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> encode1 i < dim_row m2\n 2. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> encode1 j < dim_col m2\n 3. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 $$ (encode1 i, encode1 j) -\n                          m2 $$ (encode1 i, encode1 j)) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) -\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i_ < d; j_ < d\\<rbrakk>\n    \\<Longrightarrow> encode1 i_ < dim_row m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n  m3 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i_ < d; j_ < d\\<rbrakk>\n    \\<Longrightarrow> encode1 i_ < dim_row m2", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> encode1 j < dim_col m2\n 2. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 $$ (encode1 i, encode1 j) -\n                          m2 $$ (encode1 i, encode1 j)) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) -\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i_ < d; j_ < d\\<rbrakk>\n    \\<Longrightarrow> encode1 j_ < dim_col m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n  m3 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i_ < d; j_ < d\\<rbrakk>\n    \\<Longrightarrow> encode1 j_ < dim_col m2", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 $$ (encode1 i, encode1 j) -\n                          m2 $$ (encode1 i, encode1 j)) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) -\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "using assms(2) ring_class.left_diff_distrib"], ["proof (prove)\nusing this:\n  m2 \\<in> carrier_mat d1 d1\n  (?a - ?b) * ?c = ?a * ?c - ?b * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (m1 $$ (encode1 i, encode1 j) -\n                          m2 $$ (encode1 i, encode1 j)) *\n                         m3 $$ (encode2 i, encode2 j) =\n                         m1 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j) -\n                         m2 $$ (encode1 i, encode1 j) *\n                         m3 $$ (encode2 i, encode2 j)", "by force"], ["", "lemma tensor_mat_matrix_sum2:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n  shows \"(\\<And>k. k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2)\n    \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n = tensor_mat m1 (matrix_sum d2 f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k < n \\<Longrightarrow>\n        f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n    matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n    tensor_mat m1 (matrix_sum d2 f n)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>k.\n        k < 0 \\<Longrightarrow>\n        f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n    matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) 0 =\n    tensor_mat m1 (matrix_sum d2 f 0)\n 2. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "case 0"], ["proof (state)\nthis:\n  ?k2 < 0 \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (2 subgoals):\n 1. (\\<And>k.\n        k < 0 \\<Longrightarrow>\n        f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n    matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) 0 =\n    tensor_mat m1 (matrix_sum d2 f 0)\n 2. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "then"], ["proof (chain)\npicking this:\n  ?k2 < 0 \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2", "show ?case"], ["proof (prove)\nusing this:\n  ?k2 < 0 \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) 0 =\n    tensor_mat m1 (matrix_sum d2 f 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m d d = tensor_mat m1 (0\\<^sub>m d2 d2)", "using tensor_mat_zero2[of m1]"], ["proof (prove)\nusing this:\n  tensor_mat m1 (0\\<^sub>m d2 d2) = 0\\<^sub>m d d\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m d d = tensor_mat m1 (0\\<^sub>m d2 d2)", "by auto"], ["proof (state)\nthis:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) 0 =\n  tensor_mat m1 (matrix_sum d2 f 0)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "case (Suc n)"], ["proof (state)\nthis:\n  (\\<And>k.\n      k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n  tensor_mat m1 (matrix_sum d2 f n)\n  ?k2 < Suc n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "then"], ["proof (chain)\npicking this:\n  (\\<And>k.\n      k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n  tensor_mat m1 (matrix_sum d2 f n)\n  ?k2 < Suc n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2", "have \"k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\" for k"], ["proof (prove)\nusing this:\n  (\\<And>k.\n      k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n  tensor_mat m1 (matrix_sum d2 f n)\n  ?k2 < Suc n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2", "by auto"], ["proof (state)\nthis:\n  ?k2 < n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "then"], ["proof (chain)\npicking this:\n  ?k2 < n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2", "have ds: \"matrix_sum d2 f n \\<in> carrier_mat d2 d2\""], ["proof (prove)\nusing this:\n  ?k2 < n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. matrix_sum d2 f n \\<in> carrier_mat d2 d2", "using matrix_sum_dim"], ["proof (prove)\nusing this:\n  ?k2 < n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n  (\\<And>k.\n      k < ?n \\<Longrightarrow>\n      ?f k \\<in> carrier_mat ?d ?d) \\<Longrightarrow>\n  matrix_sum ?d ?f ?n \\<in> carrier_mat ?d ?d\n\ngoal (1 subgoal):\n 1. matrix_sum d2 f n \\<in> carrier_mat d2 d2", "by auto"], ["proof (state)\nthis:\n  matrix_sum d2 f n \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "have dn: \"f n \\<in> carrier_mat d2 d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<in> carrier_mat d2 d2", "using Suc"], ["proof (prove)\nusing this:\n  (\\<And>k.\n      k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n  tensor_mat m1 (matrix_sum d2 f n)\n  ?k2 < Suc n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. f n \\<in> carrier_mat d2 d2", "by auto"], ["proof (state)\nthis:\n  f n \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "have \"matrix_sum d2 f (Suc n) = f n + matrix_sum d2 f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_sum d2 f (Suc n) = f n + matrix_sum d2 f n", "by simp"], ["proof (state)\nthis:\n  matrix_sum d2 f (Suc n) = f n + matrix_sum d2 f n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "then"], ["proof (chain)\npicking this:\n  matrix_sum d2 f (Suc n) = f n + matrix_sum d2 f n", "have eq: \"tensor_mat m1 (matrix_sum d2 f (Suc n)) \n    = tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\""], ["proof (prove)\nusing this:\n  matrix_sum d2 f (Suc n) = f n + matrix_sum d2 f n\n\ngoal (1 subgoal):\n 1. tensor_mat m1 (matrix_sum d2 f (Suc n)) =\n    tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)", "using tensor_mat_add2 dn ds assms"], ["proof (prove)\nusing this:\n  matrix_sum d2 f (Suc n) = f n + matrix_sum d2 f n\n  \\<lbrakk>?m1.0 \\<in> carrier_mat d1 d1; ?m2.0 \\<in> carrier_mat d2 d2;\n   ?m3.0 \\<in> carrier_mat d2 d2\\<rbrakk>\n  \\<Longrightarrow> tensor_mat ?m1.0 (?m2.0 + ?m3.0) =\n                    tensor_mat ?m1.0 ?m2.0 + tensor_mat ?m1.0 ?m3.0\n  f n \\<in> carrier_mat d2 d2\n  matrix_sum d2 f n \\<in> carrier_mat d2 d2\n  m1 \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. tensor_mat m1 (matrix_sum d2 f (Suc n)) =\n    tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 (matrix_sum d2 f (Suc n)) =\n  tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "have \"matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) \n    = tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n    tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n", "by simp"], ["proof (state)\nthis:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n  tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "also"], ["proof (state)\nthis:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n  tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "have \"\\<dots> = tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n    tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)", "using Suc"], ["proof (prove)\nusing this:\n  (\\<And>k.\n      k < n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n  tensor_mat m1 (matrix_sum d2 f n)\n  ?k2 < Suc n \\<Longrightarrow> f ?k2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n    tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 (f n) + matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n  tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>k.\n                    k < n \\<Longrightarrow>\n                    f k \\<in> carrier_mat d2 d2) \\<Longrightarrow>\n                matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) n =\n                tensor_mat m1 (matrix_sum d2 f n);\n        \\<And>k.\n           k < Suc n \\<Longrightarrow> f k \\<in> carrier_mat d2 d2\\<rbrakk>\n       \\<Longrightarrow> matrix_sum d (\\<lambda>k. tensor_mat m1 (f k))\n                          (Suc n) =\n                         tensor_mat m1 (matrix_sum d2 f (Suc n))", "finally"], ["proof (chain)\npicking this:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n  tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)", "show ?case"], ["proof (prove)\nusing this:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n  tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\n\ngoal (1 subgoal):\n 1. matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n    tensor_mat m1 (matrix_sum d2 f (Suc n))", "using eq"], ["proof (prove)\nusing this:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n  tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\n  tensor_mat m1 (matrix_sum d2 f (Suc n)) =\n  tensor_mat m1 (f n) + tensor_mat m1 (matrix_sum d2 f n)\n\ngoal (1 subgoal):\n 1. matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n    tensor_mat m1 (matrix_sum d2 f (Suc n))", "by auto"], ["proof (state)\nthis:\n  matrix_sum d (\\<lambda>k. tensor_mat m1 (f k)) (Suc n) =\n  tensor_mat m1 (matrix_sum d2 f (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_scale1:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (a \\<cdot>\\<^sub>m m1) m2 = a \\<cdot>\\<^sub>m tensor_mat m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (a \\<cdot>\\<^sub>m m1) m2 =\n    a \\<cdot>\\<^sub>m tensor_mat m1 m2", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (a \\<cdot>\\<^sub>m m1) m2 $$ (i, j) =\n                         a * tensor_mat m1 m2 $$ (i, j)", "unfolding tensor_mat_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m m1) $$ (encode1 i, encode1 j) *\n                         m2 $$ (encode2 i, encode2 j) =\n                         a *\n                         (m1 $$ (encode1 i, encode1 j) *\n                          m2 $$ (encode2 i, encode2 j))", "using assms comm_semiring_class.distrib"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> (a \\<cdot>\\<^sub>m m1) $$ (encode1 i, encode1 j) *\n                         m2 $$ (encode2 i, encode2 j) =\n                         a *\n                         (m1 $$ (encode1 i, encode1 j) *\n                          m2 $$ (encode2 i, encode2 j))", "by force"], ["", "lemma tensor_mat_scale2:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat m1 (a \\<cdot>\\<^sub>m m2) = a \\<cdot>\\<^sub>m tensor_mat m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 (a \\<cdot>\\<^sub>m m2) =\n    a \\<cdot>\\<^sub>m tensor_mat m1 m2", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat m1 (a \\<cdot>\\<^sub>m m2) $$ (i, j) =\n                         a * tensor_mat m1 m2 $$ (i, j)", "unfolding tensor_mat_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$ (encode1 i, encode1 j) *\n                         (a \\<cdot>\\<^sub>m m2) $$ (encode2 i, encode2 j) =\n                         a *\n                         (m1 $$ (encode1 i, encode1 j) *\n                          m2 $$ (encode2 i, encode2 j))", "using assms comm_semiring_class.distrib"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$ (encode1 i, encode1 j) *\n                         (a \\<cdot>\\<^sub>m m2) $$ (encode2 i, encode2 j) =\n                         a *\n                         (m1 $$ (encode1 i, encode1 j) *\n                          m2 $$ (encode2 i, encode2 j))", "by force"], ["", "lemma tensor_mat_trace:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"trace (tensor_mat m1 m2) = trace m1 * trace m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (tensor_mat m1 m2) = trace m1 * trace m2", "apply (auto simp add: tensor_mat_carrier trace_def tensor_mat_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<d.\n        m1 $$ (encode1 i, encode1 i) * m2 $$ (encode2 i, encode2 i)) =\n    (\\<Sum>i = 0..<dim_row m1. m1 $$ (i, i)) *\n    (\\<Sum>i = 0..<dim_row m2. m2 $$ (i, i))", "apply (subst Groups_Big.sum_product)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<d.\n        m1 $$ (encode1 i, encode1 i) * m2 $$ (encode2 i, encode2 i)) =\n    (\\<Sum>i = 0..<dim_row m1.\n        \\<Sum>j = 0..<dim_row m2. m1 $$ (i, i) * m2 $$ (j, j))", "apply (subst sum_encode[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<d1. \\<Sum>j = 0..<d2. m1 $$ (i, i) * m2 $$ (j, j)) =\n    (\\<Sum>i = 0..<dim_row m1.\n        \\<Sum>j = 0..<dim_row m2. m1 $$ (i, i) * m2 $$ (j, j))", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<d1. \\<Sum>j = 0..<d2. m1 $$ (i, i) * m2 $$ (j, j)) =\n    (\\<Sum>i = 0..<dim_row m1.\n        \\<Sum>j = 0..<dim_row m2. m1 $$ (i, i) * m2 $$ (j, j))", "by auto"], ["", "lemma tensor_mat_id:\n  \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d", "proof (rule eq_matI, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < d \\<Longrightarrow>\n       tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (j, j) = (1::'a)\n 2. \\<And>i j.\n       \\<lbrakk>i < d; j < d; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$\n                         (i, j) =\n                         (0::'a)", "show \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, i) = 1\" if \"i < d\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, i) = (1::'b)", "using that"], ["proof (prove)\nusing this:\n  i < d\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, i) = (1::'b)", "by (simp add: tensor_mat_eval)"], ["proof (state)\nthis:\n  ?i3 < d \\<Longrightarrow>\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (?i3, ?i3) = (1::?'b4)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$\n                         (i, j) =\n                         (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$\n                         (i, j) =\n                         (0::'a)", "show \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, j) = 0\" if \"i < d\" \"j < d\" \"i \\<noteq> j\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, j) = (0::'b)", "using that"], ["proof (prove)\nusing this:\n  i < d\n  j < d\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (i, j) = (0::'b)", "apply (simp add: tensor_mat_eval)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < d; j < d; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> encode1 i = encode1 j \\<longrightarrow>\n                      encode2 i \\<noteq> encode2 j", "by (metis encode12_inv)"], ["proof (state)\nthis:\n  \\<lbrakk>?i3 < d; ?j3 < d; ?i3 \\<noteq> ?j3\\<rbrakk>\n  \\<Longrightarrow> tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) $$ (?i3, ?j3) =\n                    (0::?'b4)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_mult_vec:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d2\"\n  shows \"tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) = tensor_mat m1 m2 *\\<^sub>v tensor_vec v1 v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    tensor_mat m1 m2 *\\<^sub>v tensor_vec v1 v2", "proof (rule eq_vecI, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "fix i j :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "assume i: \"i < d\""], ["proof (state)\nthis:\n  i < d\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "let ?i1 = \"encode1 i\" and ?i2 = \"encode2 i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "have \"tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i = (m1 *\\<^sub>v v1) $ ?i1 * (m2 *\\<^sub>v v2) $ ?i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n    (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i", "using i"], ["proof (prove)\nusing this:\n  i < d\n\ngoal (1 subgoal):\n 1. tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n    (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i", "by (simp add: tensor_vec_eval)"], ["proof (state)\nthis:\n  tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n  (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "also"], ["proof (state)\nthis:\n  tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n  (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "have \"\\<dots> = (row m1 ?i1 \\<bullet> v1) * (row m2 ?i2 \\<bullet> v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i =\n    row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2)", "using assms i"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  v1 \\<in> carrier_vec d1\n  v2 \\<in> carrier_vec d2\n  i < d\n\ngoal (1 subgoal):\n 1. (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i =\n    row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2)", "by auto"], ["proof (state)\nthis:\n  (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i =\n  row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "also"], ["proof (state)\nthis:\n  (m1 *\\<^sub>v v1) $ encode1 i * (m2 *\\<^sub>v v2) $ encode2 i =\n  row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "have \"\\<dots> = (\\<Sum>i = 0..<d1. m1 $$ (?i1, i) * v1 $ i) * (\\<Sum>j = 0..<d2. m2 $$ (?i2, j) * v2 $ j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2) =\n    (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n    (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j)", "using assms i"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  v1 \\<in> carrier_vec d1\n  v2 \\<in> carrier_vec d2\n  i < d\n\ngoal (1 subgoal):\n 1. row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2) =\n    (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n    (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j)", "by (simp add: scalar_prod_def)"], ["proof (state)\nthis:\n  row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2) =\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n  (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "also"], ["proof (state)\nthis:\n  row m1 (encode1 i) \\<bullet> v1 * (row m2 (encode2 i) \\<bullet> v2) =\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n  (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "have \"\\<dots> = (\\<Sum>i = 0..<d1. \\<Sum>j = 0..<d2. (m1 $$ (?i1, i) * v1 $ i) * (m2 $$ (?i2, j) * v2 $ j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n    (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j) =\n    (\\<Sum>ia = 0..<d1.\n        \\<Sum>j = 0..<d2.\n           m1 $$ (encode1 i, ia) * v1 $ ia *\n           (m2 $$ (encode2 i, j) * v2 $ j))", "by (rule Groups_Big.sum_product)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n  (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j) =\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>j = 0..<d2.\n         m1 $$ (encode1 i, ia) * v1 $ ia * (m2 $$ (encode2 i, j) * v2 $ j))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "also"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * v1 $ ia) *\n  (\\<Sum>j = 0..<d2. m2 $$ (encode2 i, j) * v2 $ j) =\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>j = 0..<d2.\n         m1 $$ (encode1 i, ia) * v1 $ ia * (m2 $$ (encode2 i, j) * v2 $ j))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "have \"\\<dots> = (\\<Sum>i = 0..<d. (m1 $$ (?i1, encode1 i) * v1 $ (encode1 i)) * (m2 $$ (?i2, encode2 i) * v2 $ (encode2 i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d1.\n        \\<Sum>j = 0..<d2.\n           m1 $$ (encode1 i, ia) * v1 $ ia *\n           (m2 $$ (encode2 i, j) * v2 $ j)) =\n    (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * v1 $ encode1 ia *\n        (m2 $$ (encode2 i, encode2 ia) * v2 $ encode2 ia))", "by (rule sum_encode)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>j = 0..<d2.\n         m1 $$ (encode1 i, ia) * v1 $ ia *\n         (m2 $$ (encode2 i, j) * v2 $ j)) =\n  (\\<Sum>ia = 0..<d.\n      m1 $$ (encode1 i, encode1 ia) * v1 $ encode1 ia *\n      (m2 $$ (encode2 i, encode2 ia) * v2 $ encode2 ia))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "also"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>j = 0..<d2.\n         m1 $$ (encode1 i, ia) * v1 $ ia *\n         (m2 $$ (encode2 i, j) * v2 $ j)) =\n  (\\<Sum>ia = 0..<d.\n      m1 $$ (encode1 i, encode1 ia) * v1 $ encode1 ia *\n      (m2 $$ (encode2 i, encode2 ia) * v2 $ encode2 ia))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "have \"\\<dots> = row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * v1 $ encode1 ia *\n        (m2 $$ (encode2 i, encode2 ia) * v2 $ encode2 ia)) =\n    row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "apply (simp add: scalar_prod_def tensor_mat_eval tensor_vec_eval i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * v1 $ encode1 ia *\n        (m2 $$ (encode2 i, encode2 ia) * v2 $ encode2 ia)) =\n    (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode2 i, encode2 ia) *\n        (v1 $ encode1 ia * v2 $ encode2 ia))", "by (rule sum.cong, auto)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d.\n      m1 $$ (encode1 i, encode1 ia) * v1 $ encode1 ia *\n      (m2 $$ (encode2 i, encode2 ia) * v2 $ encode2 ia)) =\n  row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < d \\<Longrightarrow>\n       tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n       row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "finally"], ["proof (chain)\npicking this:\n  tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n  row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "show \"tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i = row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2\""], ["proof (prove)\nusing this:\n  tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n  row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2\n\ngoal (1 subgoal):\n 1. tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n    row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2", "by auto"], ["proof (state)\nthis:\n  tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) $ i =\n  row (tensor_mat m1 m2) i \\<bullet> tensor_vec v1 v2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n    and \"m4 \\<in> carrier_mat d2 d2\"\n  shows \"tensor_mat (m1 * m2) (m3 * m4) = tensor_mat m1 m3 * tensor_mat m2 m4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (m1 * m2) (m3 * m4) = tensor_mat m1 m3 * tensor_mat m2 m4", "proof (rule eq_matI, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "fix i j :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "assume i: \"i < d\" and j: \"j < d\""], ["proof (state)\nthis:\n  i < d\n  j < d\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "let ?i1 = \"encode1 i\" and ?i2 = \"encode2 i\" and ?j1 = \"encode1 j\" and ?j2 = \"encode2 j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "have \"tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) = (m1 * m2) $$ (?i1, ?j1) * (m3 * m4) $$ (?i2, ?j2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n    (m1 * m2) $$ (encode1 i, encode1 j) *\n    (m3 * m4) $$ (encode2 i, encode2 j)", "using i j"], ["proof (prove)\nusing this:\n  i < d\n  j < d\n\ngoal (1 subgoal):\n 1. tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n    (m1 * m2) $$ (encode1 i, encode1 j) *\n    (m3 * m4) $$ (encode2 i, encode2 j)", "by (simp add: tensor_mat_eval)"], ["proof (state)\nthis:\n  tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n  (m1 * m2) $$ (encode1 i, encode1 j) * (m3 * m4) $$ (encode2 i, encode2 j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "also"], ["proof (state)\nthis:\n  tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n  (m1 * m2) $$ (encode1 i, encode1 j) * (m3 * m4) $$ (encode2 i, encode2 j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "have \"\\<dots> = (row m1 ?i1 \\<bullet> col m2 ?j1) * (row m3 ?i2 \\<bullet> col m4 ?j2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 * m2) $$ (encode1 i, encode1 j) *\n    (m3 * m4) $$ (encode2 i, encode2 j) =\n    row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n    (row m3 (encode2 i) \\<bullet> col m4 (encode2 j))", "using assms i j"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n  m3 \\<in> carrier_mat d2 d2\n  m4 \\<in> carrier_mat d2 d2\n  i < d\n  j < d\n\ngoal (1 subgoal):\n 1. (m1 * m2) $$ (encode1 i, encode1 j) *\n    (m3 * m4) $$ (encode2 i, encode2 j) =\n    row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n    (row m3 (encode2 i) \\<bullet> col m4 (encode2 j))", "by auto"], ["proof (state)\nthis:\n  (m1 * m2) $$ (encode1 i, encode1 j) *\n  (m3 * m4) $$ (encode2 i, encode2 j) =\n  row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n  (row m3 (encode2 i) \\<bullet> col m4 (encode2 j))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "also"], ["proof (state)\nthis:\n  (m1 * m2) $$ (encode1 i, encode1 j) *\n  (m3 * m4) $$ (encode2 i, encode2 j) =\n  row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n  (row m3 (encode2 i) \\<bullet> col m4 (encode2 j))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "have \"\\<dots> = (\\<Sum>i = 0..<d1. m1 $$ (?i1, i) * m2 $$ (i, ?j1)) * (\\<Sum>j = 0..<d2. m3 $$ (?i2, j) * m4 $$ (j, ?j2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n    (row m3 (encode2 i) \\<bullet> col m4 (encode2 j)) =\n    (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n    (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))", "using assms i j"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n  m3 \\<in> carrier_mat d2 d2\n  m4 \\<in> carrier_mat d2 d2\n  i < d\n  j < d\n\ngoal (1 subgoal):\n 1. row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n    (row m3 (encode2 i) \\<bullet> col m4 (encode2 j)) =\n    (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n    (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))", "by (simp add: scalar_prod_def)"], ["proof (state)\nthis:\n  row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n  (row m3 (encode2 i) \\<bullet> col m4 (encode2 j)) =\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n  (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "also"], ["proof (state)\nthis:\n  row m1 (encode1 i) \\<bullet> col m2 (encode1 j) *\n  (row m3 (encode2 i) \\<bullet> col m4 (encode2 j)) =\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n  (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "have \"\\<dots> = (\\<Sum>i = 0..<d1. \\<Sum>j = 0..<d2. (m1 $$ (?i1, i) * m2 $$ (i, ?j1)) * (m3 $$ (?i2, j) * m4 $$ (j, ?j2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n    (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j)) =\n    (\\<Sum>ia = 0..<d1.\n        \\<Sum>ja = 0..<d2.\n           m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j) *\n           (m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j)))", "by (rule Groups_Big.sum_product)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n  (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j)) =\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>ja = 0..<d2.\n         m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j) *\n         (m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j)))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "also"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1. m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j)) *\n  (\\<Sum>ja = 0..<d2. m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j)) =\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>ja = 0..<d2.\n         m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j) *\n         (m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j)))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "have \"\\<dots> = (\\<Sum>i = 0..<d. (m1 $$ (?i1, encode1 i) * m2 $$ (encode1 i, ?j1)) * (m3 $$ (?i2, encode2 i) * m4 $$ (encode2 i, ?j2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d1.\n        \\<Sum>ja = 0..<d2.\n           m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j) *\n           (m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))) =\n    (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode1 ia, encode1 j) *\n        (m3 $$ (encode2 i, encode2 ia) * m4 $$ (encode2 ia, encode2 j)))", "by (rule sum_encode)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>ja = 0..<d2.\n         m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j) *\n         (m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))) =\n  (\\<Sum>ia = 0..<d.\n      m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode1 ia, encode1 j) *\n      (m3 $$ (encode2 i, encode2 ia) * m4 $$ (encode2 ia, encode2 j)))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "also"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d1.\n      \\<Sum>ja = 0..<d2.\n         m1 $$ (encode1 i, ia) * m2 $$ (ia, encode1 j) *\n         (m3 $$ (encode2 i, ja) * m4 $$ (ja, encode2 j))) =\n  (\\<Sum>ia = 0..<d.\n      m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode1 ia, encode1 j) *\n      (m3 $$ (encode2 i, encode2 ia) * m4 $$ (encode2 ia, encode2 j)))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "have \"\\<dots> = row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode1 ia, encode1 j) *\n        (m3 $$ (encode2 i, encode2 ia) * m4 $$ (encode2 ia, encode2 j))) =\n    row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j", "apply (simp add: scalar_prod_def tensor_mat_eval i j)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode1 ia, encode1 j) *\n        (m3 $$ (encode2 i, encode2 ia) * m4 $$ (encode2 ia, encode2 j))) =\n    (\\<Sum>ia = 0..<d.\n        m1 $$ (encode1 i, encode1 ia) * m3 $$ (encode2 i, encode2 ia) *\n        (m2 $$ (encode1 ia, encode1 j) * m4 $$ (encode2 ia, encode2 j)))", "by (rule sum.cong, auto)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<d.\n      m1 $$ (encode1 i, encode1 ia) * m2 $$ (encode1 ia, encode1 j) *\n      (m3 $$ (encode2 i, encode2 ia) * m4 $$ (encode2 ia, encode2 j))) =\n  row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n                         row (tensor_mat m1 m3) i \\<bullet>\n                         col (tensor_mat m2 m4) j", "finally"], ["proof (chain)\npicking this:\n  tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n  row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j", "show \"tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) = row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j\""], ["proof (prove)\nusing this:\n  tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n  row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j\n\ngoal (1 subgoal):\n 1. tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n    row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j", "."], ["proof (state)\nthis:\n  tensor_mat (m1 * m2) (m3 * m4) $$ (i, j) =\n  row (tensor_mat m1 m3) i \\<bullet> col (tensor_mat m2 m4) j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_adjoint:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"adjoint (tensor_mat m1 m2) = tensor_mat (adjoint m1) (adjoint m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint (tensor_mat m1 m2) = tensor_mat (adjoint m1) (adjoint m2)", "apply (rule eq_matI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> adjoint (tensor_mat m1 m2) $$ (i, j) =\n                         tensor_mat (adjoint m1) (adjoint m2) $$ (i, j)", "unfolding tensor_mat_def adjoint_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> mat (dim_col\n                               (mat d d\n                                 (\\<lambda>(i, j).\n                                     m1 $$ (encode1 i, encode1 j) *\n                                     m2 $$ (encode2 i, encode2 j))))\n                          (dim_row\n                            (mat d d\n                              (\\<lambda>(i, j).\n                                  m1 $$ (encode1 i, encode1 j) *\n                                  m2 $$ (encode2 i, encode2 j))))\n                          (\\<lambda>(i, j).\n                              conjugate\n                               (mat d d\n                                 (\\<lambda>(i, j).\n                                     m1 $$ (encode1 i, encode1 j) *\n                                     m2 $$ (encode2 i, encode2 j)) $$\n                                (j, i))) $$\n                         (i, j) =\n                         mat d d\n                          (\\<lambda>(i, j).\n                              mat (dim_col m1) (dim_row m1)\n                               (\\<lambda>(i, j).\n                                   conjugate (m1 $$ (j, i))) $$\n                              (encode1 i, encode1 j) *\n                              mat (dim_col m2) (dim_row m2)\n                               (\\<lambda>(i, j).\n                                   conjugate (m2 $$ (j, i))) $$\n                              (encode2 i, encode2 j)) $$\n                         (i, j)", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> mat (dim_col\n                               (mat d d\n                                 (\\<lambda>(i, j).\n                                     m1 $$ (encode1 i, encode1 j) *\n                                     m2 $$ (encode2 i, encode2 j))))\n                          (dim_row\n                            (mat d d\n                              (\\<lambda>(i, j).\n                                  m1 $$ (encode1 i, encode1 j) *\n                                  m2 $$ (encode2 i, encode2 j))))\n                          (\\<lambda>(i, j).\n                              conjugate\n                               (mat d d\n                                 (\\<lambda>(i, j).\n                                     m1 $$ (encode1 i, encode1 j) *\n                                     m2 $$ (encode2 i, encode2 j)) $$\n                                (j, i))) $$\n                         (i, j) =\n                         mat d d\n                          (\\<lambda>(i, j).\n                              mat (dim_col m1) (dim_row m1)\n                               (\\<lambda>(i, j).\n                                   conjugate (m1 $$ (j, i))) $$\n                              (encode1 i, encode1 j) *\n                              mat (dim_col m2) (dim_row m2)\n                               (\\<lambda>(i, j).\n                                   conjugate (m2 $$ (j, i))) $$\n                              (encode2 i, encode2 j)) $$\n                         (i, j)", "by (simp add: conjugate_dist_mul)"], ["", "lemma tensor_mat_hermitian:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"hermitian m1\"\n    and \"hermitian m2\"\n  shows \"hermitian (tensor_mat m1 m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (tensor_mat m1 m2)", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  hermitian m1\n  hermitian m2\n\ngoal (1 subgoal):\n 1. hermitian (tensor_mat m1 m2)", "by (metis hermitian_def tensor_mat_adjoint)"], ["", "lemma tensor_mat_unitary:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"unitary m1\"\n    and \"unitary m2\"\n  shows \"unitary (tensor_mat m1 m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (tensor_mat m1 m2)", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  unitary m1\n  unitary m2\n\ngoal (1 subgoal):\n 1. unitary (tensor_mat m1 m2)", "apply (auto simp add: unitary_def tensor_mat_adjoint)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     inverts_mat m1 (adjoint m1); inverts_mat m2 (adjoint m2)\\<rbrakk>\n    \\<Longrightarrow> inverts_mat (tensor_mat m1 m2)\n                       (tensor_mat (adjoint m1) (adjoint m2))", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  unitary m1\n  unitary m2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     inverts_mat m1 (adjoint m1); inverts_mat m2 (adjoint m2)\\<rbrakk>\n    \\<Longrightarrow> inverts_mat (tensor_mat m1 m2)\n                       (tensor_mat (adjoint m1) (adjoint m2))", "unfolding inverts_mat_def"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  unitary m1\n  unitary m2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     m1 * adjoint m1 = 1\\<^sub>m (dim_row m1);\n     m2 * adjoint m2 = 1\\<^sub>m (dim_row m2)\\<rbrakk>\n    \\<Longrightarrow> tensor_mat m1 m2 *\n                      tensor_mat (adjoint m1) (adjoint m2) =\n                      1\\<^sub>m (dim_row (tensor_mat m1 m2))", "apply (subst tensor_mat_mult[symmetric], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     unitary m1; unitary m2\\<rbrakk>\n    \\<Longrightarrow> tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d", "by (rule tensor_mat_id)"], ["", "lemma tensor_mat_positive:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"positive m1\"\n    and \"positive m2\"\n  shows \"positive (tensor_mat m1 m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "obtain M1 where M1: \"m1 = M1 * adjoint M1\" and dM1:\"M1 \\<in> carrier_mat d1 d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M1.\n        \\<lbrakk>m1 = M1 * adjoint M1; M1 \\<in> carrier_mat d1 d1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using positive_only_if_decomp assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; positive ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>M\\<in>carrier_mat ?n ?n. M * adjoint M = ?A\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n\ngoal (1 subgoal):\n 1. (\\<And>M1.\n        \\<lbrakk>m1 = M1 * adjoint M1; M1 \\<in> carrier_mat d1 d1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m1 = M1 * adjoint M1\n  M1 \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "obtain M2 where M2: \"m2 = M2 * adjoint M2\" and dM2:\"M2 \\<in> carrier_mat d2 d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M2.\n        \\<lbrakk>m2 = M2 * adjoint M2; M2 \\<in> carrier_mat d2 d2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using positive_only_if_decomp assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; positive ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>M\\<in>carrier_mat ?n ?n. M * adjoint M = ?A\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n\ngoal (1 subgoal):\n 1. (\\<And>M2.\n        \\<lbrakk>m2 = M2 * adjoint M2; M2 \\<in> carrier_mat d2 d2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m2 = M2 * adjoint M2\n  M2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "have \"(adjoint (tensor_mat M1 M2)) = tensor_mat (adjoint M1) (adjoint M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint (tensor_mat M1 M2) = tensor_mat (adjoint M1) (adjoint M2)", "using tensor_mat_adjoint dM1 dM2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m1.0 \\<in> carrier_mat d1 d1;\n   ?m2.0 \\<in> carrier_mat d2 d2\\<rbrakk>\n  \\<Longrightarrow> adjoint (tensor_mat ?m1.0 ?m2.0) =\n                    tensor_mat (adjoint ?m1.0) (adjoint ?m2.0)\n  M1 \\<in> carrier_mat d1 d1\n  M2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. adjoint (tensor_mat M1 M2) = tensor_mat (adjoint M1) (adjoint M2)", "by auto"], ["proof (state)\nthis:\n  adjoint (tensor_mat M1 M2) = tensor_mat (adjoint M1) (adjoint M2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "then"], ["proof (chain)\npicking this:\n  adjoint (tensor_mat M1 M2) = tensor_mat (adjoint M1) (adjoint M2)", "have \"tensor_mat M1 M2 * (adjoint (tensor_mat M1 M2)) = tensor_mat (M1 * adjoint M1) (M2 * adjoint M2)\""], ["proof (prove)\nusing this:\n  adjoint (tensor_mat M1 M2) = tensor_mat (adjoint M1) (adjoint M2)\n\ngoal (1 subgoal):\n 1. tensor_mat M1 M2 * adjoint (tensor_mat M1 M2) =\n    tensor_mat (M1 * adjoint M1) (M2 * adjoint M2)", "using dM1 dM2 adjoint_dim[OF dM1] adjoint_dim[OF dM2]"], ["proof (prove)\nusing this:\n  adjoint (tensor_mat M1 M2) = tensor_mat (adjoint M1) (adjoint M2)\n  M1 \\<in> carrier_mat d1 d1\n  M2 \\<in> carrier_mat d2 d2\n  adjoint M1 \\<in> carrier_mat d1 d1\n  adjoint M2 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. tensor_mat M1 M2 * adjoint (tensor_mat M1 M2) =\n    tensor_mat (M1 * adjoint M1) (M2 * adjoint M2)", "by (auto simp add: tensor_mat_mult)"], ["proof (state)\nthis:\n  tensor_mat M1 M2 * adjoint (tensor_mat M1 M2) =\n  tensor_mat (M1 * adjoint M1) (M2 * adjoint M2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "also"], ["proof (state)\nthis:\n  tensor_mat M1 M2 * adjoint (tensor_mat M1 M2) =\n  tensor_mat (M1 * adjoint M1) (M2 * adjoint M2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "have \"\\<dots> = tensor_mat m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (M1 * adjoint M1) (M2 * adjoint M2) = tensor_mat m1 m2", "using M1 M2"], ["proof (prove)\nusing this:\n  m1 = M1 * adjoint M1\n  m2 = M2 * adjoint M2\n\ngoal (1 subgoal):\n 1. tensor_mat (M1 * adjoint M1) (M2 * adjoint M2) = tensor_mat m1 m2", "by auto"], ["proof (state)\nthis:\n  tensor_mat (M1 * adjoint M1) (M2 * adjoint M2) = tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "finally"], ["proof (chain)\npicking this:\n  tensor_mat M1 M2 * adjoint (tensor_mat M1 M2) = tensor_mat m1 m2", "have \"tensor_mat m1 m2 = tensor_mat M1 M2 * (adjoint (tensor_mat M1 M2))\""], ["proof (prove)\nusing this:\n  tensor_mat M1 M2 * adjoint (tensor_mat M1 M2) = tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 = tensor_mat M1 M2 * adjoint (tensor_mat M1 M2)", ".."], ["proof (state)\nthis:\n  tensor_mat m1 m2 = tensor_mat M1 M2 * adjoint (tensor_mat M1 M2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "then"], ["proof (chain)\npicking this:\n  tensor_mat m1 m2 = tensor_mat M1 M2 * adjoint (tensor_mat M1 M2)", "have \"\\<exists>M. M * adjoint M = tensor_mat m1 m2\""], ["proof (prove)\nusing this:\n  tensor_mat m1 m2 = tensor_mat M1 M2 * adjoint (tensor_mat M1 M2)\n\ngoal (1 subgoal):\n 1. \\<exists>M. M * adjoint M = tensor_mat m1 m2", "by auto"], ["proof (state)\nthis:\n  \\<exists>M. M * adjoint M = tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "moreover"], ["proof (state)\nthis:\n  \\<exists>M. M * adjoint M = tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "have \"tensor_mat m1 m2 \\<in> carrier_mat d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "using tensor_mat_carrier"], ["proof (prove)\nusing this:\n  tensor_mat ?m1.0 ?m2.0 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 m2 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>M. M * adjoint M = tensor_mat m1 m2\n  tensor_mat m1 m2 \\<in> carrier_mat d d", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>M. M * adjoint M = tensor_mat m1 m2\n  tensor_mat m1 m2 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "using positive_if_decomp[of \"tensor_mat m1 m2\"]"], ["proof (prove)\nusing this:\n  \\<exists>M. M * adjoint M = tensor_mat m1 m2\n  tensor_mat m1 m2 \\<in> carrier_mat d d\n  \\<lbrakk>tensor_mat m1 m2 \\<in> carrier_mat ?n ?n;\n   \\<exists>M. M * adjoint M = tensor_mat m1 m2\\<rbrakk>\n  \\<Longrightarrow> positive (tensor_mat m1 m2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat m1 m2)", "by auto"], ["proof (state)\nthis:\n  positive (tensor_mat m1 m2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_positive_le:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"positive m1\"\n    and \"positive m2\"\n    and \"m1 \\<le>\\<^sub>L A\"\n    and \"m2 \\<le>\\<^sub>L B\"\n  shows \"tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have dA: \"A \\<in> carrier_mat d1 d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat d1 d1", "using assms lowner_le_def"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n  (?A \\<le>\\<^sub>L ?B) =\n  (dim_row ?A = dim_row ?B \\<and>\n   dim_col ?A = dim_col ?B \\<and> positive (?B - ?A))\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat d1 d1", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have pA: \"positive A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positive A", "using assms dA lowner_le_trans_positiveI[of m1]"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n  A \\<in> carrier_mat d1 d1\n  \\<lbrakk>m1 \\<in> carrier_mat ?n ?n; positive m1;\n   m1 \\<le>\\<^sub>L ?B\\<rbrakk>\n  \\<Longrightarrow> positive ?B\n\ngoal (1 subgoal):\n 1. positive A", "by auto"], ["proof (state)\nthis:\n  positive A\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have dB: \"B \\<in> carrier_mat d2 d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat d2 d2", "using assms lowner_le_def"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n  (?A \\<le>\\<^sub>L ?B) =\n  (dim_row ?A = dim_row ?B \\<and>\n   dim_col ?A = dim_col ?B \\<and> positive (?B - ?A))\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat d2 d2", "by auto"], ["proof (state)\nthis:\n  B \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have pB: \"positive B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. positive B", "using assms dB lowner_le_trans_positiveI[of m2]"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n  B \\<in> carrier_mat d2 d2\n  \\<lbrakk>m2 \\<in> carrier_mat ?n ?n; positive m2;\n   m2 \\<le>\\<^sub>L ?B\\<rbrakk>\n  \\<Longrightarrow> positive ?B\n\ngoal (1 subgoal):\n 1. positive B", "by auto"], ["proof (state)\nthis:\n  positive B\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have \"A - m1 = A + (- m1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A - m1 = A + - m1", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. A - m1 = A + - m1", "by (auto simp add: minus_add_uminus_mat)"], ["proof (state)\nthis:\n  A - m1 = A + - m1\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "then"], ["proof (chain)\npicking this:\n  A - m1 = A + - m1", "have \"positive (A + (- m1))\""], ["proof (prove)\nusing this:\n  A - m1 = A + - m1\n\ngoal (1 subgoal):\n 1. positive (A + - m1)", "using assms"], ["proof (prove)\nusing this:\n  A - m1 = A + - m1\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. positive (A + - m1)", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  A - m1 = A + - m1\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  dim_row m1 = dim_row A \\<and>\n  dim_col m1 = dim_col A \\<and> positive (A - m1)\n  dim_row m2 = dim_row B \\<and>\n  dim_col m2 = dim_col B \\<and> positive (B - m2)\n\ngoal (1 subgoal):\n 1. positive (A + - m1)", "by auto"], ["proof (state)\nthis:\n  positive (A + - m1)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "then"], ["proof (chain)\npicking this:\n  positive (A + - m1)", "have p1: \"positive (tensor_mat (A + (- m1)) m2)\""], ["proof (prove)\nusing this:\n  positive (A + - m1)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat (A + - m1) m2)", "using assms tensor_mat_positive"], ["proof (prove)\nusing this:\n  positive (A + - m1)\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n  \\<lbrakk>?m1.0 \\<in> carrier_mat d1 d1; ?m2.0 \\<in> carrier_mat d2 d2;\n   positive ?m1.0; positive ?m2.0\\<rbrakk>\n  \\<Longrightarrow> positive (tensor_mat ?m1.0 ?m2.0)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat (A + - m1) m2)", "by auto"], ["proof (state)\nthis:\n  positive (tensor_mat (A + - m1) m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "moreover"], ["proof (state)\nthis:\n  positive (tensor_mat (A + - m1) m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have \"tensor_mat (- m1) m2 = - tensor_mat m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (- m1) m2 = - tensor_mat m1 m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. tensor_mat (- m1) m2 = - tensor_mat m1 m2", "apply (subgoal_tac \"- m1 = -1 \\<cdot>\\<^sub>m m1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L A; m2 \\<le>\\<^sub>L B;\n     - m1 = - 1 \\<cdot>\\<^sub>m m1\\<rbrakk>\n    \\<Longrightarrow> tensor_mat (- m1) m2 = - tensor_mat m1 m2\n 2. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L A;\n     m2 \\<le>\\<^sub>L B\\<rbrakk>\n    \\<Longrightarrow> - m1 = - 1 \\<cdot>\\<^sub>m m1", "by (auto simp add: tensor_mat_scale1)"], ["proof (state)\nthis:\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "moreover"], ["proof (state)\nthis:\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have \"tensor_mat (A + (- m1)) m2 = tensor_mat A m2 + (tensor_mat (- m1) m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (A + - m1) m2 = tensor_mat A m2 + tensor_mat (- m1) m2", "using\n      assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. tensor_mat (A + - m1) m2 = tensor_mat A m2 + tensor_mat (- m1) m2", "by (auto simp add: tensor_mat_add1 dA)"], ["proof (state)\nthis:\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 + tensor_mat (- m1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "ultimately"], ["proof (chain)\npicking this:\n  positive (tensor_mat (A + - m1) m2)\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 + tensor_mat (- m1) m2", "have \"tensor_mat (A + (- m1)) m2 = tensor_mat A m2 - (tensor_mat m1 m2)\""], ["proof (prove)\nusing this:\n  positive (tensor_mat (A + - m1) m2)\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 + tensor_mat (- m1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat (A + - m1) m2 = tensor_mat A m2 - tensor_mat m1 m2", "by auto"], ["proof (state)\nthis:\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "with p1"], ["proof (chain)\npicking this:\n  positive (tensor_mat (A + - m1) m2)\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 - tensor_mat m1 m2", "have le1: \"tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\""], ["proof (prove)\nusing this:\n  positive (tensor_mat (A + - m1) m2)\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  positive (tensor_mat (A + - m1) m2)\n  tensor_mat (A + - m1) m2 = tensor_mat A m2 - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. dim_row (tensor_mat m1 m2) = dim_row (tensor_mat A m2) \\<and>\n    dim_col (tensor_mat m1 m2) = dim_col (tensor_mat A m2) \\<and>\n    positive (tensor_mat A m2 - tensor_mat m1 m2)", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have \"B - m2 = B + (- m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B - m2 = B + - m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. B - m2 = B + - m2", "by (auto simp add: minus_add_uminus_mat)"], ["proof (state)\nthis:\n  B - m2 = B + - m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "then"], ["proof (chain)\npicking this:\n  B - m2 = B + - m2", "have \"positive (B + (- m2))\""], ["proof (prove)\nusing this:\n  B - m2 = B + - m2\n\ngoal (1 subgoal):\n 1. positive (B + - m2)", "using assms"], ["proof (prove)\nusing this:\n  B - m2 = B + - m2\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. positive (B + - m2)", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  B - m2 = B + - m2\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  dim_row m1 = dim_row A \\<and>\n  dim_col m1 = dim_col A \\<and> positive (A - m1)\n  dim_row m2 = dim_row B \\<and>\n  dim_col m2 = dim_col B \\<and> positive (B - m2)\n\ngoal (1 subgoal):\n 1. positive (B + - m2)", "by auto"], ["proof (state)\nthis:\n  positive (B + - m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "then"], ["proof (chain)\npicking this:\n  positive (B + - m2)", "have p2: \"positive (tensor_mat A (B + (- m2)))\""], ["proof (prove)\nusing this:\n  positive (B + - m2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat A (B + - m2))", "using assms tensor_mat_positive positive_one dA dB pA"], ["proof (prove)\nusing this:\n  positive (B + - m2)\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n  \\<lbrakk>?m1.0 \\<in> carrier_mat d1 d1; ?m2.0 \\<in> carrier_mat d2 d2;\n   positive ?m1.0; positive ?m2.0\\<rbrakk>\n  \\<Longrightarrow> positive (tensor_mat ?m1.0 ?m2.0)\n  positive (1\\<^sub>m ?n)\n  A \\<in> carrier_mat d1 d1\n  B \\<in> carrier_mat d2 d2\n  positive A\n\ngoal (1 subgoal):\n 1. positive (tensor_mat A (B + - m2))", "by auto"], ["proof (state)\nthis:\n  positive (tensor_mat A (B + - m2))\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "moreover"], ["proof (state)\nthis:\n  positive (tensor_mat A (B + - m2))\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have \"tensor_mat A (-m2) = - tensor_mat A m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat A (- m2) = - tensor_mat A m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. tensor_mat A (- m2) = - tensor_mat A m2", "apply (subgoal_tac \"- m2 = -1 \\<cdot>\\<^sub>m m2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L A; m2 \\<le>\\<^sub>L B;\n     - m2 = - 1 \\<cdot>\\<^sub>m m2\\<rbrakk>\n    \\<Longrightarrow> tensor_mat A (- m2) = - tensor_mat A m2\n 2. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L A;\n     m2 \\<le>\\<^sub>L B\\<rbrakk>\n    \\<Longrightarrow> - m2 = - 1 \\<cdot>\\<^sub>m m2", "by (auto simp add: tensor_mat_scale2 dA)"], ["proof (state)\nthis:\n  tensor_mat A (- m2) = - tensor_mat A m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "moreover"], ["proof (state)\nthis:\n  tensor_mat A (- m2) = - tensor_mat A m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "have \"tensor_mat A (B + (- m2)) = tensor_mat A B + tensor_mat A (- m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat A (B + - m2) = tensor_mat A B + tensor_mat A (- m2)", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L A\n  m2 \\<le>\\<^sub>L B\n\ngoal (1 subgoal):\n 1. tensor_mat A (B + - m2) = tensor_mat A B + tensor_mat A (- m2)", "by (auto simp add: tensor_mat_add2 dA dB)"], ["proof (state)\nthis:\n  tensor_mat A (B + - m2) = tensor_mat A B + tensor_mat A (- m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "ultimately"], ["proof (chain)\npicking this:\n  positive (tensor_mat A (B + - m2))\n  tensor_mat A (- m2) = - tensor_mat A m2\n  tensor_mat A (B + - m2) = tensor_mat A B + tensor_mat A (- m2)", "have \"tensor_mat A (B + (- m2)) = tensor_mat A B - tensor_mat A m2\""], ["proof (prove)\nusing this:\n  positive (tensor_mat A (B + - m2))\n  tensor_mat A (- m2) = - tensor_mat A m2\n  tensor_mat A (B + - m2) = tensor_mat A B + tensor_mat A (- m2)\n\ngoal (1 subgoal):\n 1. tensor_mat A (B + - m2) = tensor_mat A B - tensor_mat A m2", "by auto"], ["proof (state)\nthis:\n  tensor_mat A (B + - m2) = tensor_mat A B - tensor_mat A m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "with p2"], ["proof (chain)\npicking this:\n  positive (tensor_mat A (B + - m2))\n  tensor_mat A (B + - m2) = tensor_mat A B - tensor_mat A m2", "have le20: \"tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\""], ["proof (prove)\nusing this:\n  positive (tensor_mat A (B + - m2))\n  tensor_mat A (B + - m2) = tensor_mat A B - tensor_mat A m2\n\ngoal (1 subgoal):\n 1. tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  positive (tensor_mat A (B + - m2))\n  tensor_mat A (B + - m2) = tensor_mat A B - tensor_mat A m2\n\ngoal (1 subgoal):\n 1. dim_row (tensor_mat A m2) = dim_row (tensor_mat A B) \\<and>\n    dim_col (tensor_mat A m2) = dim_col (tensor_mat A B) \\<and>\n    positive (tensor_mat A B - tensor_mat A m2)", "by auto"], ["proof (state)\nthis:\n  tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B", "apply (subst lowner_le_trans[of _ d \"tensor_mat (A) m2\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d\n 2. tensor_mat A m2 \\<in> carrier_mat d d\n 3. tensor_mat A B \\<in> carrier_mat d d\n 4. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\n 5. tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\n 6. True", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "using tensor_mat_carrier"], ["proof (prove)\nusing this:\n  tensor_mat ?m1.0 ?m2.0 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. tensor_mat A m2 \\<in> carrier_mat d d\n 2. tensor_mat A B \\<in> carrier_mat d d\n 3. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\n 4. tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\n 5. True", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat A m2 \\<in> carrier_mat d d", "using tensor_mat_carrier"], ["proof (prove)\nusing this:\n  tensor_mat ?m1.0 ?m2.0 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. tensor_mat A m2 \\<in> carrier_mat d d", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. tensor_mat A B \\<in> carrier_mat d d\n 2. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\n 3. tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\n 4. True", "using le1 le20"], ["proof (prove)\nusing this:\n  tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\n  tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\n\ngoal (4 subgoals):\n 1. tensor_mat A B \\<in> carrier_mat d d\n 2. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A m2\n 3. tensor_mat A m2 \\<le>\\<^sub>L tensor_mat A B\n 4. True", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tensor_mat_le_one:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"positive m1\"\n    and \"positive m2\"\n    and \"m1 \\<le>\\<^sub>L 1\\<^sub>m d1\"\n    and \"m2 \\<le>\\<^sub>L 1\\<^sub>m d2\"\n  shows \"tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + (- m1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. 1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1", "by (auto simp add: minus_add_uminus_mat)"], ["proof (state)\nthis:\n  1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "then"], ["proof (chain)\npicking this:\n  1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1", "have \"positive (1\\<^sub>m d1 + (- m1))\""], ["proof (prove)\nusing this:\n  1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1\n\ngoal (1 subgoal):\n 1. positive (1\\<^sub>m d1 + - m1)", "using assms"], ["proof (prove)\nusing this:\n  1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. positive (1\\<^sub>m d1 + - m1)", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  1\\<^sub>m d1 - m1 = 1\\<^sub>m d1 + - m1\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  dim_row m1 = dim_row (1\\<^sub>m d1) \\<and>\n  dim_col m1 = dim_col (1\\<^sub>m d1) \\<and> positive (1\\<^sub>m d1 - m1)\n  dim_row m2 = dim_row (1\\<^sub>m d2) \\<and>\n  dim_col m2 = dim_col (1\\<^sub>m d2) \\<and> positive (1\\<^sub>m d2 - m2)\n\ngoal (1 subgoal):\n 1. positive (1\\<^sub>m d1 + - m1)", "by auto"], ["proof (state)\nthis:\n  positive (1\\<^sub>m d1 + - m1)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "then"], ["proof (chain)\npicking this:\n  positive (1\\<^sub>m d1 + - m1)", "have p1: \"positive (tensor_mat (1\\<^sub>m d1 + (- m1)) m2)\""], ["proof (prove)\nusing this:\n  positive (1\\<^sub>m d1 + - m1)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)", "using assms tensor_mat_positive"], ["proof (prove)\nusing this:\n  positive (1\\<^sub>m d1 + - m1)\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n  \\<lbrakk>?m1.0 \\<in> carrier_mat d1 d1; ?m2.0 \\<in> carrier_mat d2 d2;\n   positive ?m1.0; positive ?m2.0\\<rbrakk>\n  \\<Longrightarrow> positive (tensor_mat ?m1.0 ?m2.0)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)", "by auto"], ["proof (state)\nthis:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "moreover"], ["proof (state)\nthis:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"tensor_mat (- m1) m2 = - tensor_mat m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (- m1) m2 = - tensor_mat m1 m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. tensor_mat (- m1) m2 = - tensor_mat m1 m2", "apply (subgoal_tac \"- m1 = -1 \\<cdot>\\<^sub>m m1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L 1\\<^sub>m d1;\n     m2 \\<le>\\<^sub>L 1\\<^sub>m d2; - m1 = - 1 \\<cdot>\\<^sub>m m1\\<rbrakk>\n    \\<Longrightarrow> tensor_mat (- m1) m2 = - tensor_mat m1 m2\n 2. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L 1\\<^sub>m d1;\n     m2 \\<le>\\<^sub>L 1\\<^sub>m d2\\<rbrakk>\n    \\<Longrightarrow> - m1 = - 1 \\<cdot>\\<^sub>m m1", "by (auto simp add: tensor_mat_scale1)"], ["proof (state)\nthis:\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "moreover"], ["proof (state)\nthis:\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"tensor_mat (1\\<^sub>m d1 + (- m1)) m2 = tensor_mat (1\\<^sub>m d1) m2 + (tensor_mat (- m1) m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n    tensor_mat (1\\<^sub>m d1) m2 + tensor_mat (- m1) m2", "using\n      assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n    tensor_mat (1\\<^sub>m d1) m2 + tensor_mat (- m1) m2", "by (auto simp add: tensor_mat_add1)"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 + tensor_mat (- m1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "ultimately"], ["proof (chain)\npicking this:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 + tensor_mat (- m1) m2", "have \"tensor_mat (1\\<^sub>m d1 + (- m1)) m2 = tensor_mat (1\\<^sub>m d1) m2 - (tensor_mat m1 m2)\""], ["proof (prove)\nusing this:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n  tensor_mat (- m1) m2 = - tensor_mat m1 m2\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 + tensor_mat (- m1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n    tensor_mat (1\\<^sub>m d1) m2 - tensor_mat m1 m2", "by auto"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "with p1"], ["proof (chain)\npicking this:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 - tensor_mat m1 m2", "have le1: \"(tensor_mat m1 m2) \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\""], ["proof (prove)\nusing this:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  positive (tensor_mat (1\\<^sub>m d1 + - m1) m2)\n  tensor_mat (1\\<^sub>m d1 + - m1) m2 =\n  tensor_mat (1\\<^sub>m d1) m2 - tensor_mat m1 m2\n\ngoal (1 subgoal):\n 1. dim_row (tensor_mat m1 m2) =\n    dim_row (tensor_mat (1\\<^sub>m d1) m2) \\<and>\n    dim_col (tensor_mat m1 m2) =\n    dim_col (tensor_mat (1\\<^sub>m d1) m2) \\<and>\n    positive (tensor_mat (1\\<^sub>m d1) m2 - tensor_mat m1 m2)", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + (- m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. 1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2", "by (auto simp add: minus_add_uminus_mat)"], ["proof (state)\nthis:\n  1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "then"], ["proof (chain)\npicking this:\n  1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2", "have \"positive (1\\<^sub>m d2 + (- m2))\""], ["proof (prove)\nusing this:\n  1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2\n\ngoal (1 subgoal):\n 1. positive (1\\<^sub>m d2 + - m2)", "using assms"], ["proof (prove)\nusing this:\n  1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. positive (1\\<^sub>m d2 + - m2)", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  1\\<^sub>m d2 - m2 = 1\\<^sub>m d2 + - m2\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  dim_row m1 = dim_row (1\\<^sub>m d1) \\<and>\n  dim_col m1 = dim_col (1\\<^sub>m d1) \\<and> positive (1\\<^sub>m d1 - m1)\n  dim_row m2 = dim_row (1\\<^sub>m d2) \\<and>\n  dim_col m2 = dim_col (1\\<^sub>m d2) \\<and> positive (1\\<^sub>m d2 - m2)\n\ngoal (1 subgoal):\n 1. positive (1\\<^sub>m d2 + - m2)", "by auto"], ["proof (state)\nthis:\n  positive (1\\<^sub>m d2 + - m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "then"], ["proof (chain)\npicking this:\n  positive (1\\<^sub>m d2 + - m2)", "have p2: \"positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + (- m2)))\""], ["proof (prove)\nusing this:\n  positive (1\\<^sub>m d2 + - m2)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))", "using assms tensor_mat_positive positive_one"], ["proof (prove)\nusing this:\n  positive (1\\<^sub>m d2 + - m2)\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n  \\<lbrakk>?m1.0 \\<in> carrier_mat d1 d1; ?m2.0 \\<in> carrier_mat d2 d2;\n   positive ?m1.0; positive ?m2.0\\<rbrakk>\n  \\<Longrightarrow> positive (tensor_mat ?m1.0 ?m2.0)\n  positive (1\\<^sub>m ?n)\n\ngoal (1 subgoal):\n 1. positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))", "by auto"], ["proof (state)\nthis:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "moreover"], ["proof (state)\nthis:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"tensor_mat (1\\<^sub>m d1) (-m2) = - tensor_mat (1\\<^sub>m d1) m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (- m2) = - tensor_mat (1\\<^sub>m d1) m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (- m2) = - tensor_mat (1\\<^sub>m d1) m2", "apply (subgoal_tac \"- m2 = -1 \\<cdot>\\<^sub>m m2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L 1\\<^sub>m d1;\n     m2 \\<le>\\<^sub>L 1\\<^sub>m d2; - m2 = - 1 \\<cdot>\\<^sub>m m2\\<rbrakk>\n    \\<Longrightarrow> tensor_mat (1\\<^sub>m d1) (- m2) =\n                      - tensor_mat (1\\<^sub>m d1) m2\n 2. \\<lbrakk>m1 \\<in> carrier_mat d1 d1; m2 \\<in> carrier_mat d2 d2;\n     positive m1; positive m2; m1 \\<le>\\<^sub>L 1\\<^sub>m d1;\n     m2 \\<le>\\<^sub>L 1\\<^sub>m d2\\<rbrakk>\n    \\<Longrightarrow> - m2 = - 1 \\<cdot>\\<^sub>m m2", "by (auto simp add: tensor_mat_scale2)"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) (- m2) = - tensor_mat (1\\<^sub>m d1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "moreover"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) (- m2) = - tensor_mat (1\\<^sub>m d1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + (- m2)) = tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) + (tensor_mat (1\\<^sub>m d1) (- m2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n    tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) +\n    tensor_mat (1\\<^sub>m d1) (- m2)", "using\n      assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n  positive m1\n  positive m2\n  m1 \\<le>\\<^sub>L 1\\<^sub>m d1\n  m2 \\<le>\\<^sub>L 1\\<^sub>m d2\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n    tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) +\n    tensor_mat (1\\<^sub>m d1) (- m2)", "by (auto simp add: tensor_mat_add2)"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) +\n  tensor_mat (1\\<^sub>m d1) (- m2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "ultimately"], ["proof (chain)\npicking this:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n  tensor_mat (1\\<^sub>m d1) (- m2) = - tensor_mat (1\\<^sub>m d1) m2\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) +\n  tensor_mat (1\\<^sub>m d1) (- m2)", "have \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + (- m2)) = tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) - (tensor_mat (1\\<^sub>m d1) m2)\""], ["proof (prove)\nusing this:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n  tensor_mat (1\\<^sub>m d1) (- m2) = - tensor_mat (1\\<^sub>m d1) m2\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) +\n  tensor_mat (1\\<^sub>m d1) (- m2)\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n    tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) - tensor_mat (1\\<^sub>m d1) m2", "by auto"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) - tensor_mat (1\\<^sub>m d1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "with p2"], ["proof (chain)\npicking this:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) - tensor_mat (1\\<^sub>m d1) m2", "have le20: \"tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)\""], ["proof (prove)\nusing this:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) - tensor_mat (1\\<^sub>m d1) m2\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L\n    tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)", "unfolding lowner_le_def"], ["proof (prove)\nusing this:\n  positive (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2))\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2 + - m2) =\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) - tensor_mat (1\\<^sub>m d1) m2\n\ngoal (1 subgoal):\n 1. dim_row (tensor_mat (1\\<^sub>m d1) m2) =\n    dim_row (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)) \\<and>\n    dim_col (tensor_mat (1\\<^sub>m d1) m2) =\n    dim_col (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)) \\<and>\n    positive\n     (tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) -\n      tensor_mat (1\\<^sub>m d1) m2)", "by auto"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "then"], ["proof (chain)\npicking this:\n  tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)", "have le2: \"tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\""], ["proof (prove)\nusing this:\n  tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d", "apply (subst tensor_mat_id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L\n    tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) \\<Longrightarrow>\n    tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L\n    tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2)", "by auto"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "have \"tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d", "using tensor_mat_id"], ["proof (prove)\nusing this:\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d", "by auto"], ["proof (state)\nthis:\n  tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d", "apply (subst lowner_le_trans[of _ d \"tensor_mat (1\\<^sub>m d1) m2\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d\n 2. tensor_mat (1\\<^sub>m d1) m2 \\<in> carrier_mat d d\n 3. 1\\<^sub>m d \\<in> carrier_mat d d\n 4. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\n 5. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\n 6. True", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "using tensor_mat_carrier"], ["proof (prove)\nusing this:\n  tensor_mat ?m1.0 ?m2.0 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. tensor_mat m1 m2 \\<in> carrier_mat d d", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. tensor_mat (1\\<^sub>m d1) m2 \\<in> carrier_mat d d\n 2. 1\\<^sub>m d \\<in> carrier_mat d d\n 3. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\n 4. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\n 5. True", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) m2 \\<in> carrier_mat d d", "using tensor_mat_carrier"], ["proof (prove)\nusing this:\n  tensor_mat ?m1.0 ?m2.0 \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) m2 \\<in> carrier_mat d d", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. 1\\<^sub>m d \\<in> carrier_mat d d\n 2. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\n 3. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\n 4. True", "using le1 le2"], ["proof (prove)\nusing this:\n  tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\n  tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\n\ngoal (4 subgoals):\n 1. 1\\<^sub>m d \\<in> carrier_mat d d\n 2. tensor_mat m1 m2 \\<le>\\<^sub>L tensor_mat (1\\<^sub>m d1) m2\n 3. tensor_mat (1\\<^sub>m d1) m2 \\<le>\\<^sub>L 1\\<^sub>m d\n 4. True", "by auto"], ["proof (state)\nthis:\n  tensor_mat m1 m2 \\<le>\\<^sub>L 1\\<^sub>m d\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Extension of matrices\\<close>"], ["", "definition mat_extension :: \"'a::comm_ring_1 mat \\<Rightarrow> 'a mat\" where\n  \"mat_extension m = tensor_mat m (1\\<^sub>m d2)\""], ["", "lemma mat_extension_carrier:\n  \"mat_extension m \\<in> carrier_mat d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_extension m \\<in> carrier_mat d d", "by (simp add: mat_extension_def tensor_mat_carrier)"], ["", "lemma mat_extension_add:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"mat_extension (m1 + m2) = mat_extension m1 + mat_extension m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_extension (m1 + m2) = mat_extension m1 + mat_extension m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. mat_extension (m1 + m2) = mat_extension m1 + mat_extension m2", "by (simp add: mat_extension_def tensor_mat_add1)"], ["", "lemma mat_extension_trace:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n  shows \"trace (mat_extension m) = d2 * trace m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (mat_extension m) = int d2 * trace m", "unfolding mat_extension_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (tensor_mat m (1\\<^sub>m d2)) = int d2 * trace m", "using assms"], ["proof (prove)\nusing this:\n  m \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. trace (tensor_mat m (1\\<^sub>m d2)) = int d2 * trace m", "by (simp add: tensor_mat_trace)"], ["", "lemma mat_extension_id:\n  \"mat_extension (1\\<^sub>m d1) = 1\\<^sub>m d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_extension (1\\<^sub>m d1) = 1\\<^sub>m d", "unfolding mat_extension_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d", "by (rule tensor_mat_id)"], ["", "lemma mat_extension_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"mat_extension (m1 * m2) = mat_extension m1 * mat_extension m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_extension (m1 * m2) = mat_extension m1 * mat_extension m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. mat_extension (m1 * m2) = mat_extension m1 * mat_extension m2", "by (simp add: mat_extension_def tensor_mat_mult[symmetric])"], ["", "lemma mat_extension_hermitian:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n    and \"hermitian m\"\n  shows \"hermitian (mat_extension m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hermitian (mat_extension m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<in> carrier_mat d1 d1\n  hermitian m\n\ngoal (1 subgoal):\n 1. hermitian (mat_extension m)", "by (simp add: hermitian_one mat_extension_def tensor_mat_hermitian)"], ["", "lemma mat_extension_unitary:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n    and \"unitary m\"\n  shows \"unitary (mat_extension m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (mat_extension m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<in> carrier_mat d1 d1\n  unitary m\n\ngoal (1 subgoal):\n 1. unitary (mat_extension m)", "by (simp add: mat_extension_def tensor_mat_unitary unitary_one)"], ["", "end"], ["", "abbreviation \"tensor_mat \\<equiv> partial_state.tensor_mat\""], ["", "abbreviation \"mat_extension \\<equiv> partial_state.mat_extension\""], ["", "context state_sig\nbegin"], ["", "text \\<open>Swapping the order of matrices, as well as switching vars, should have no effect\\<close>"], ["", "lemma tensor_mat_comm:\n  assumes \"vars1 \\<inter> vars2 = {}\"\n    and \"{0..<length dims} \\<subseteq> vars1 \\<union> vars2\"\n    and \"m1 \\<in> carrier_mat (prod_list (nths dims vars1)) (prod_list (nths dims vars1))\"\n    and \"m2 \\<in> carrier_mat (prod_list (nths dims vars2)) (prod_list (nths dims vars2))\"\n  shows \"tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "have \"nths dims (- vars2) = nths dims vars1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims (- vars2) = nths dims vars1", "using nths_split_complement_eq[symmetric] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<inter> ?B = {};\n   {0..<length ?xs} \\<subseteq> ?A \\<union> ?B\\<rbrakk>\n  \\<Longrightarrow> nths ?xs (- ?B) = nths ?xs ?A\n  vars1 \\<inter> vars2 = {}\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  m1 \\<in> carrier_mat (prod_list (nths dims vars1))\n            (prod_list (nths dims vars1))\n  m2 \\<in> carrier_mat (prod_list (nths dims vars2))\n            (prod_list (nths dims vars2))\n\ngoal (1 subgoal):\n 1. nths dims (- vars2) = nths dims vars1", "by auto"], ["proof (state)\nthis:\n  nths dims (- vars2) = nths dims vars1\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "then"], ["proof (chain)\npicking this:\n  nths dims (- vars2) = nths dims vars1", "have eq2211: \"partial_state.dims2 dims vars2 = partial_state.dims1 dims vars1\""], ["proof (prove)\nusing this:\n  nths dims (- vars2) = nths dims vars1\n\ngoal (1 subgoal):\n 1. partial_state.dims2 dims vars2 = partial_state.dims1 dims vars1", "unfolding partial_state.dims2_def partial_state.dims1_def"], ["proof (prove)\nusing this:\n  nths dims (- vars2) = nths dims vars1\n\ngoal (1 subgoal):\n 1. nths dims (- vars2) = nths dims vars1", "by auto"], ["proof (state)\nthis:\n  partial_state.dims2 dims vars2 = partial_state.dims1 dims vars1\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "have \"nths dims (- vars1) = nths dims vars2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims (- vars1) = nths dims vars2", "using nths_split_complement_eq[symmetric, of vars2] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>vars2 \\<inter> ?B = {};\n   {0..<length ?xs} \\<subseteq> vars2 \\<union> ?B\\<rbrakk>\n  \\<Longrightarrow> nths ?xs (- ?B) = nths ?xs vars2\n  vars1 \\<inter> vars2 = {}\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  m1 \\<in> carrier_mat (prod_list (nths dims vars1))\n            (prod_list (nths dims vars1))\n  m2 \\<in> carrier_mat (prod_list (nths dims vars2))\n            (prod_list (nths dims vars2))\n\ngoal (1 subgoal):\n 1. nths dims (- vars1) = nths dims vars2", "by auto"], ["proof (state)\nthis:\n  nths dims (- vars1) = nths dims vars2\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "then"], ["proof (chain)\npicking this:\n  nths dims (- vars1) = nths dims vars2", "have eq2112: \"partial_state.dims2 dims vars1 = partial_state.dims1 dims vars2\""], ["proof (prove)\nusing this:\n  nths dims (- vars1) = nths dims vars2\n\ngoal (1 subgoal):\n 1. partial_state.dims2 dims vars1 = partial_state.dims1 dims vars2", "unfolding partial_state.dims2_def partial_state.dims1_def"], ["proof (prove)\nusing this:\n  nths dims (- vars1) = nths dims vars2\n\ngoal (1 subgoal):\n 1. nths dims (- vars1) = nths dims vars2", "by auto"], ["proof (state)\nthis:\n  partial_state.dims2 dims vars1 = partial_state.dims1 dims vars2\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "have \"vars1 \\<union> vars2 - vars2 = vars1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<union> vars2 - vars2 = vars1", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  m1 \\<in> carrier_mat (prod_list (nths dims vars1))\n            (prod_list (nths dims vars1))\n  m2 \\<in> carrier_mat (prod_list (nths dims vars2))\n            (prod_list (nths dims vars2))\n\ngoal (1 subgoal):\n 1. vars1 \\<union> vars2 - vars2 = vars1", "by auto"], ["proof (state)\nthis:\n  vars1 \\<union> vars2 - vars2 = vars1\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "then"], ["proof (chain)\npicking this:\n  vars1 \\<union> vars2 - vars2 = vars1", "have e1:\"partial_state.encode2 dims vars2 i = partial_state.encode1 dims (vars1) i\""], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 - vars2 = vars1\n\ngoal (1 subgoal):\n 1. partial_state.encode2 dims vars2 i = partial_state.encode1 dims vars1 i", "using assms(2) partial_state.encode2_alter[of dims \"vars1 \\<union> vars2\" vars2]"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 - vars2 = vars1\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  partial_state.encode2 dims vars2 ?i =\n  digit_decode (partial_state.dims2 dims vars2)\n   (nths (digit_encode dims ?i) (vars1 \\<union> vars2 - vars2))\n\ngoal (1 subgoal):\n 1. partial_state.encode2 dims vars2 i = partial_state.encode1 dims vars1 i", "unfolding partial_state.encode2_def partial_state.encode1_def"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 - vars2 = vars1\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  digit_decode (partial_state.dims2 dims vars2)\n   (nths (digit_encode dims ?i) (- vars2)) =\n  digit_decode (partial_state.dims2 dims vars2)\n   (nths (digit_encode dims ?i) (vars1 \\<union> vars2 - vars2))\n\ngoal (1 subgoal):\n 1. digit_decode (partial_state.dims2 dims vars2)\n     (nths (digit_encode dims i) (- vars2)) =\n    digit_decode (partial_state.dims1 dims vars1)\n     (nths (digit_encode dims i) vars1)", "apply (subst eq2211[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vars1 \\<union> vars2 - vars2 = vars1;\n     {0..<length dims} \\<subseteq> vars1 \\<union> vars2;\n     \\<And>i.\n        {0..<length dims} \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n        digit_decode (partial_state.dims2 dims vars2)\n         (nths (digit_encode dims i) (- vars2)) =\n        digit_decode (partial_state.dims2 dims vars2)\n         (nths (digit_encode dims i)\n           (vars1 \\<union> vars2 - vars2))\\<rbrakk>\n    \\<Longrightarrow> digit_decode (partial_state.dims2 dims vars2)\n                       (nths (digit_encode dims i) (- vars2)) =\n                      digit_decode (partial_state.dims2 dims vars2)\n                       (nths (digit_encode dims i) vars1)", "by auto"], ["proof (state)\nthis:\n  partial_state.encode2 dims vars2 i = partial_state.encode1 dims vars1 i\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "have \"vars1 \\<union> vars2 - vars1 = vars2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<union> vars2 - vars1 = vars2", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  m1 \\<in> carrier_mat (prod_list (nths dims vars1))\n            (prod_list (nths dims vars1))\n  m2 \\<in> carrier_mat (prod_list (nths dims vars2))\n            (prod_list (nths dims vars2))\n\ngoal (1 subgoal):\n 1. vars1 \\<union> vars2 - vars1 = vars2", "by auto"], ["proof (state)\nthis:\n  vars1 \\<union> vars2 - vars1 = vars2\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "then"], ["proof (chain)\npicking this:\n  vars1 \\<union> vars2 - vars1 = vars2", "have e2:\"partial_state.encode2 dims vars1 i = partial_state.encode1 dims (vars2) i\""], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 - vars1 = vars2\n\ngoal (1 subgoal):\n 1. partial_state.encode2 dims vars1 i = partial_state.encode1 dims vars2 i", "using assms(2) partial_state.encode2_alter[of dims \"vars1 \\<union> vars2\" vars1]"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 - vars1 = vars2\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  partial_state.encode2 dims vars1 ?i =\n  digit_decode (partial_state.dims2 dims vars1)\n   (nths (digit_encode dims ?i) (vars1 \\<union> vars2 - vars1))\n\ngoal (1 subgoal):\n 1. partial_state.encode2 dims vars1 i = partial_state.encode1 dims vars2 i", "unfolding partial_state.encode2_def partial_state.encode1_def"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 - vars1 = vars2\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2\n  {0..<length dims} \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  digit_decode (partial_state.dims2 dims vars1)\n   (nths (digit_encode dims ?i) (- vars1)) =\n  digit_decode (partial_state.dims2 dims vars1)\n   (nths (digit_encode dims ?i) (vars1 \\<union> vars2 - vars1))\n\ngoal (1 subgoal):\n 1. digit_decode (partial_state.dims2 dims vars1)\n     (nths (digit_encode dims i) (- vars1)) =\n    digit_decode (partial_state.dims1 dims vars2)\n     (nths (digit_encode dims i) vars2)", "apply (subst eq2112[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vars1 \\<union> vars2 - vars1 = vars2;\n     {0..<length dims} \\<subseteq> vars1 \\<union> vars2;\n     \\<And>i.\n        {0..<length dims} \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n        digit_decode (partial_state.dims2 dims vars1)\n         (nths (digit_encode dims i) (- vars1)) =\n        digit_decode (partial_state.dims2 dims vars1)\n         (nths (digit_encode dims i)\n           (vars1 \\<union> vars2 - vars1))\\<rbrakk>\n    \\<Longrightarrow> digit_decode (partial_state.dims2 dims vars1)\n                       (nths (digit_encode dims i) (- vars1)) =\n                      digit_decode (partial_state.dims2 dims vars1)\n                       (nths (digit_encode dims i) vars2)", "by auto"], ["proof (state)\nthis:\n  partial_state.encode2 dims vars1 i = partial_state.encode1 dims vars2 i\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "note e1 e2"], ["proof (state)\nthis:\n  partial_state.encode2 dims vars2 i = partial_state.encode1 dims vars1 i\n  partial_state.encode2 dims vars1 i = partial_state.encode1 dims vars2 i\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "}"], ["proof (state)\nthis:\n  partial_state.encode2 dims vars2 ?i2 =\n  partial_state.encode1 dims vars1 ?i2\n  partial_state.encode2 dims vars1 ?i2 =\n  partial_state.encode1 dims vars2 ?i2\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "note e = this"], ["proof (state)\nthis:\n  partial_state.encode2 dims vars2 ?i2 =\n  partial_state.encode1 dims vars1 ?i2\n  partial_state.encode2 dims vars1 ?i2 =\n  partial_state.encode1 dims vars2 ?i2\n\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1", "unfolding partial_state.tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat d d\n     (\\<lambda>(i, j).\n         m1 $$\n         (partial_state.encode1 dims vars1 i,\n          partial_state.encode1 dims vars1 j) *\n         m2 $$\n         (partial_state.encode2 dims vars1 i,\n          partial_state.encode2 dims vars1 j)) =\n    mat d d\n     (\\<lambda>(i, j).\n         m2 $$\n         (partial_state.encode1 dims vars2 i,\n          partial_state.encode1 dims vars2 j) *\n         m1 $$\n         (partial_state.encode2 dims vars2 i,\n          partial_state.encode2 dims vars2 j))", "apply (rule cong_mat, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 dims vars1 i,\n                          partial_state.encode1 dims vars1 j) *\n                         m2 $$\n                         (partial_state.encode2 dims vars1 i,\n                          partial_state.encode2 dims vars1 j) =\n                         m2 $$\n                         (partial_state.encode1 dims vars2 i,\n                          partial_state.encode1 dims vars2 j) *\n                         m1 $$\n                         (partial_state.encode2 dims vars2 i,\n                          partial_state.encode2 dims vars2 j)", "unfolding partial_state.dims1_def partial_state.dims2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 dims vars1 i,\n                          partial_state.encode1 dims vars1 j) *\n                         m2 $$\n                         (partial_state.encode2 dims vars1 i,\n                          partial_state.encode2 dims vars1 j) =\n                         m2 $$\n                         (partial_state.encode1 dims vars2 i,\n                          partial_state.encode1 dims vars2 j) *\n                         m1 $$\n                         (partial_state.encode2 dims vars2 i,\n                          partial_state.encode2 dims vars2 j)", "using e"], ["proof (prove)\nusing this:\n  partial_state.encode2 dims vars2 ?i2 =\n  partial_state.encode1 dims vars1 ?i2\n  partial_state.encode2 dims vars1 ?i2 =\n  partial_state.encode1 dims vars2 ?i2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < d; j < d\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 dims vars1 i,\n                          partial_state.encode1 dims vars1 j) *\n                         m2 $$\n                         (partial_state.encode2 dims vars1 i,\n                          partial_state.encode2 dims vars1 j) =\n                         m2 $$\n                         (partial_state.encode1 dims vars2 i,\n                          partial_state.encode1 dims vars2 j) *\n                         m1 $$\n                         (partial_state.encode2 dims vars2 i,\n                          partial_state.encode2 dims vars2 j)", "by auto"], ["proof (state)\nthis:\n  tensor_mat dims vars1 m1 m2 = tensor_mat dims vars2 m2 m1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Partial tensor product\\<close>"], ["", "text \\<open>In this context, we assume two disjoint sets of variables, and define\n  the tensor product of two matrices on these variables\\<close>"], ["", "locale partial_state2 = state_sig + \n  fixes vars1 :: \"nat set\"\n    and vars2 :: \"nat set\"\n  assumes disjoint: \"vars1 \\<inter> vars2 = {}\"\n\nbegin"], ["", "definition vars0 :: \"nat set\" where\n  \"vars0 = vars1 \\<union> vars2\""], ["", "definition dims0 :: \"nat list\" where\n  \"dims0 = nths dims vars0\""], ["", "definition dims1 :: \"nat list\" where\n  \"dims1 = nths dims vars1\""], ["", "definition dims2 :: \"nat list\" where\n  \"dims2 = nths dims vars2\""], ["", "definition d0 :: nat where\n  \"d0 = prod_list dims0\""], ["", "definition d1 :: nat where\n  \"d1 = prod_list dims1\""], ["", "definition d2 :: nat where\n  \"d2 = prod_list dims2\""], ["", "lemma dims_product:\n  \"d0 = d1 * d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d0 = d1 * d2", "unfolding d0_def d1_def d2_def dims0_def dims1_def dims2_def vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths dims (vars1 \\<union> vars2)) =\n    prod_list (nths dims vars1) * prod_list (nths dims vars2)", "using disjoint nths_prod_list_split[of vars1 \"vars1 \\<union> vars2\" dims]"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  prod_list (nths dims (vars1 \\<union> vars2)) =\n  prod_list (nths dims vars1) *\n  prod_list (nths dims (vars1 \\<union> vars2 - vars1))\n\ngoal (1 subgoal):\n 1. prod_list (nths dims (vars1 \\<union> vars2)) =\n    prod_list (nths dims vars1) * prod_list (nths dims vars2)", "apply (subgoal_tac \"vars1 \\<union> vars2 - vars1 = vars2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vars1 \\<inter> vars2 = {};\n     vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n     prod_list (nths dims (vars1 \\<union> vars2)) =\n     prod_list (nths dims vars1) *\n     prod_list (nths dims (vars1 \\<union> vars2 - vars1));\n     vars1 \\<union> vars2 - vars1 = vars2\\<rbrakk>\n    \\<Longrightarrow> prod_list (nths dims (vars1 \\<union> vars2)) =\n                      prod_list (nths dims vars1) *\n                      prod_list (nths dims vars2)\n 2. \\<lbrakk>vars1 \\<inter> vars2 = {};\n     vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n     prod_list (nths dims (vars1 \\<union> vars2)) =\n     prod_list (nths dims vars1) *\n     prod_list (nths dims (vars1 \\<union> vars2 - vars1))\\<rbrakk>\n    \\<Longrightarrow> vars1 \\<union> vars2 - vars1 = vars2", "by auto"], ["", "text \\<open>Locations of variables in vars1 relative to vars0.\n  For example: if vars0 = {0,1,2,4,5,6,9} and vars1 = {1,4,6,9}, then\n  vars1' should be {1,3,5,6}.\\<close>"], ["", "definition vars1' :: \"nat set\" where\n  \"vars1' = (ind_in_set vars0) ` vars1\""], ["", "definition vars2' :: \"nat set\" where\n  \"vars2' = (ind_in_set vars0) ` vars2\""], ["", "lemma vars1'I:\n  \"x \\<in> vars1 \\<Longrightarrow> card {y\\<in>vars0. y < x} \\<in> vars1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> vars1 \\<Longrightarrow> card {y \\<in> vars0. y < x} \\<in> vars1'", "unfolding vars1'_def ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> vars1 \\<Longrightarrow>\n    card {y \\<in> vars0. y < x}\n    \\<in> (\\<lambda>x. card {i \\<in> vars0. i < x}) ` vars1", "by auto"], ["", "lemma vars1'D:\n  \"i \\<in> vars1' \\<Longrightarrow> \\<exists>x\\<in>vars1. card {y\\<in>vars0. y < x} = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> vars1' \\<Longrightarrow>\n    \\<exists>x\\<in>vars1. card {y \\<in> vars0. y < x} = i", "unfolding vars1'_def ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> (\\<lambda>x. card {i \\<in> vars0. i < x}) `\n            vars1 \\<Longrightarrow>\n    \\<exists>x\\<in>vars1. card {y \\<in> vars0. y < x} = i", "by auto"], ["", "text \\<open>Main property of vars1'\\<close>"], ["", "lemma ind_in_set_bij:\n  \"bij_betw (ind_in_set vars0) ({0..<length dims} \\<inter> vars0) {0..<card ({0..<length dims} \\<inter> vars0)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set vars0) ({0..<length dims} \\<inter> vars0)\n     {0..<card ({0..<length dims} \\<inter> vars0)}", "using bij_ind_in_set_bound"], ["proof (prove)\nusing this:\n  (\\<And>x. ?f x = card {y \\<in> ?v0.0. y < x}) \\<Longrightarrow>\n  bij_betw ?f ({0..<?M} \\<inter> ?v0.0) {0..<card ({0..<?M} \\<inter> ?v0.0)}\n\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set vars0) ({0..<length dims} \\<inter> vars0)\n     {0..<card ({0..<length dims} \\<inter> vars0)}", "unfolding ind_in_set_def"], ["proof (prove)\nusing this:\n  (\\<And>x. ?f x = card {y \\<in> ?v0.0. y < x}) \\<Longrightarrow>\n  bij_betw ?f ({0..<?M} \\<inter> ?v0.0) {0..<card ({0..<?M} \\<inter> ?v0.0)}\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. card {i \\<in> vars0. i < x})\n     ({0..<length dims} \\<inter> vars0)\n     {0..<card ({0..<length dims} \\<inter> vars0)}", "by auto"], ["", "lemma length_dims0:\n  \"length dims0 = card ({0..<length dims} \\<inter> vars0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length dims0 = card ({0..<length dims} \\<inter> vars0)", "unfolding dims0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths dims vars0) = card ({0..<length dims} \\<inter> vars0)", "using length_nths[of dims vars0]"], ["proof (prove)\nusing this:\n  length (nths dims vars0) = card {i. i < length dims \\<and> i \\<in> vars0}\n\ngoal (1 subgoal):\n 1. length (nths dims vars0) = card ({0..<length dims} \\<inter> vars0)", "apply (subgoal_tac \"{i. i < length dims \\<and> i \\<in> vars0}= {0..<length dims} \\<inter> vars0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length (nths dims vars0) =\n             card {i. i < length dims \\<and> i \\<in> vars0};\n     {i. i < length dims \\<and> i \\<in> vars0} =\n     {0..<length dims} \\<inter> vars0\\<rbrakk>\n    \\<Longrightarrow> length (nths dims vars0) =\n                      card ({0..<length dims} \\<inter> vars0)\n 2. length (nths dims vars0) =\n    card {i. i < length dims \\<and> i \\<in> vars0} \\<Longrightarrow>\n    {i. i < length dims \\<and> i \\<in> vars0} =\n    {0..<length dims} \\<inter> vars0", "by auto"], ["", "lemma length_dims0_minus_vars2'_is_vars1':\n  \"{0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'", "have sub20: \"vars2 \\<subseteq> vars0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<subseteq> vars0", "unfolding vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<subseteq> vars1 \\<union> vars2", "by auto"], ["proof (state)\nthis:\n  vars2 \\<subseteq> vars0\n\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'", "have sub1: \"vars1 = vars0 - vars2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 = vars0 - vars2", "unfolding vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 = vars1 \\<union> vars2 - vars2", "using disjoint"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. vars1 = vars1 \\<union> vars2 - vars2", "by auto"], ["proof (state)\nthis:\n  vars1 = vars0 - vars2\n\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'", "have eq: \"{0..<length dims0} = ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length dims0} =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)", "using ind_in_set_bij length_dims0 bij_betw_imp_surj_on[of \"ind_in_set vars0\"]"], ["proof (prove)\nusing this:\n  bij_betw (ind_in_set vars0) ({0..<length dims} \\<inter> vars0)\n   {0..<card ({0..<length dims} \\<inter> vars0)}\n  length dims0 = card ({0..<length dims} \\<inter> vars0)\n  bij_betw (ind_in_set vars0) ?A ?B \\<Longrightarrow>\n  ind_in_set vars0 ` ?A = ?B\n\ngoal (1 subgoal):\n 1. {0..<length dims0} =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)", "by auto"], ["proof (state)\nthis:\n  {0..<length dims0} = ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)\n\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'", "unfolding vars2'_def vars1'_def eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) -\n    ind_in_set vars0 ` vars2 =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) \\<inter>\n    ind_in_set vars0 ` vars1", "using ind_in_set_minus_subset_bound[OF sub20] sub1"], ["proof (prove)\nusing this:\n  ind_in_set vars0 ` ({0..<?M} \\<inter> vars0) - ind_in_set vars0 ` vars2 =\n  ind_in_set vars0 ` ({0..<?M} \\<inter> vars0) \\<inter>\n  ind_in_set vars0 ` (vars0 - vars2)\n  vars1 = vars0 - vars2\n\ngoal (1 subgoal):\n 1. ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) -\n    ind_in_set vars0 ` vars2 =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) \\<inter>\n    ind_in_set vars0 ` vars1", "by auto"], ["proof (state)\nthis:\n  {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_dims0_minus_vars1'_is_vars2':\n  \"{0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'", "have sub10: \"vars1 \\<subseteq> vars0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<subseteq> vars0", "unfolding vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<subseteq> vars1 \\<union> vars2", "by auto"], ["proof (state)\nthis:\n  vars1 \\<subseteq> vars0\n\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'", "have sub2: \"vars2 = vars0 - vars1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 = vars0 - vars1", "unfolding vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 = vars1 \\<union> vars2 - vars1", "using disjoint"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. vars2 = vars1 \\<union> vars2 - vars1", "by auto"], ["proof (state)\nthis:\n  vars2 = vars0 - vars1\n\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'", "have eq: \"{0..<length dims0} = ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length dims0} =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)", "using ind_in_set_bij length_dims0 bij_betw_imp_surj_on[of \"ind_in_set vars0\"]"], ["proof (prove)\nusing this:\n  bij_betw (ind_in_set vars0) ({0..<length dims} \\<inter> vars0)\n   {0..<card ({0..<length dims} \\<inter> vars0)}\n  length dims0 = card ({0..<length dims} \\<inter> vars0)\n  bij_betw (ind_in_set vars0) ?A ?B \\<Longrightarrow>\n  ind_in_set vars0 ` ?A = ?B\n\ngoal (1 subgoal):\n 1. {0..<length dims0} =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)", "by auto"], ["proof (state)\nthis:\n  {0..<length dims0} = ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0)\n\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'", "unfolding vars2'_def vars1'_def eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) -\n    ind_in_set vars0 ` vars1 =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) \\<inter>\n    ind_in_set vars0 ` vars2", "using ind_in_set_minus_subset_bound[OF sub10] sub2"], ["proof (prove)\nusing this:\n  ind_in_set vars0 ` ({0..<?M} \\<inter> vars0) - ind_in_set vars0 ` vars1 =\n  ind_in_set vars0 ` ({0..<?M} \\<inter> vars0) \\<inter>\n  ind_in_set vars0 ` (vars0 - vars1)\n  vars2 = vars0 - vars1\n\ngoal (1 subgoal):\n 1. ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) -\n    ind_in_set vars0 ` vars1 =\n    ind_in_set vars0 ` ({0..<length dims} \\<inter> vars0) \\<inter>\n    ind_in_set vars0 ` vars2", "by auto"], ["proof (state)\nthis:\n  {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_vars1':\n  \"nths dims0 vars1' = dims1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims0 vars1' = dims1", "using nths_reencode_eq[of vars1 vars0 dims]"], ["proof (prove)\nusing this:\n  vars1 \\<subseteq> vars0 \\<Longrightarrow>\n  nths (nths dims vars0) (ind_in_set vars0 ` vars1) = nths dims vars1\n\ngoal (1 subgoal):\n 1. nths dims0 vars1' = dims1", "using nths_reencode_eq_comp[of vars1 vars0 dims]"], ["proof (prove)\nusing this:\n  vars1 \\<subseteq> vars0 \\<Longrightarrow>\n  nths (nths dims vars0) (ind_in_set vars0 ` vars1) = nths dims vars1\n  vars1 \\<subseteq> vars0 \\<Longrightarrow>\n  nths (nths dims vars0) (- ind_in_set vars0 ` vars1) =\n  nths dims (vars0 - vars1)\n\ngoal (1 subgoal):\n 1. nths dims0 vars1' = dims1", "unfolding vars0_def ind_in_set_def vars1'_def dims1_def dims0_def"], ["proof (prove)\nusing this:\n  vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  nths (nths dims (vars1 \\<union> vars2))\n   ((\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars1) =\n  nths dims vars1\n  vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  nths (nths dims (vars1 \\<union> vars2))\n   (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars1) =\n  nths dims (vars1 \\<union> vars2 - vars1)\n\ngoal (1 subgoal):\n 1. nths (nths dims (vars1 \\<union> vars2))\n     ((\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars1) =\n    nths dims vars1", "by auto"], ["", "lemma nths_vars1'_comp:\n  \"nths dims0 (-vars2') = dims1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims0 (- vars2') = dims1", "using nths_reencode_eq_comp[of vars2 vars0 dims] disjoint"], ["proof (prove)\nusing this:\n  vars2 \\<subseteq> vars0 \\<Longrightarrow>\n  nths (nths dims vars0) (- ind_in_set vars0 ` vars2) =\n  nths dims (vars0 - vars2)\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. nths dims0 (- vars2') = dims1", "unfolding vars0_def ind_in_set_def vars2'_def dims1_def dims0_def"], ["proof (prove)\nusing this:\n  vars2 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  nths (nths dims (vars1 \\<union> vars2))\n   (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars2) =\n  nths dims (vars1 \\<union> vars2 - vars2)\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. nths (nths dims (vars1 \\<union> vars2))\n     (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars2) =\n    nths dims vars1", "apply (subgoal_tac \"(vars1 \\<union> vars2 - vars2) = vars1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vars2 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n             nths (nths dims (vars1 \\<union> vars2))\n              (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) `\n                 vars2) =\n             nths dims (vars1 \\<union> vars2 - vars2);\n     vars1 \\<inter> vars2 = {};\n     vars1 \\<union> vars2 - vars2 = vars1\\<rbrakk>\n    \\<Longrightarrow> nths (nths dims (vars1 \\<union> vars2))\n                       (- (\\<lambda>x.\n                              card {i \\<in> vars1 \\<union> vars2. i < x}) `\n                          vars2) =\n                      nths dims vars1\n 2. \\<lbrakk>vars2 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n             nths (nths dims (vars1 \\<union> vars2))\n              (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) `\n                 vars2) =\n             nths dims (vars1 \\<union> vars2 - vars2);\n     vars1 \\<inter> vars2 = {}\\<rbrakk>\n    \\<Longrightarrow> vars1 \\<union> vars2 - vars2 = vars1", "by auto"], ["", "lemma nths_vars2':\n  \"nths dims0 (-vars1') = dims2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims0 (- vars1') = dims2", "using nths_reencode_eq_comp[of vars1 vars0 dims] disjoint"], ["proof (prove)\nusing this:\n  vars1 \\<subseteq> vars0 \\<Longrightarrow>\n  nths (nths dims vars0) (- ind_in_set vars0 ` vars1) =\n  nths dims (vars0 - vars1)\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. nths dims0 (- vars1') = dims2", "unfolding vars0_def ind_in_set_def vars1'_def dims2_def dims0_def"], ["proof (prove)\nusing this:\n  vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  nths (nths dims (vars1 \\<union> vars2))\n   (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars1) =\n  nths dims (vars1 \\<union> vars2 - vars1)\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. nths (nths dims (vars1 \\<union> vars2))\n     (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars1) =\n    nths dims vars2", "apply (subgoal_tac \"(vars1 \\<union> vars2 - vars1) = vars2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n             nths (nths dims (vars1 \\<union> vars2))\n              (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) `\n                 vars1) =\n             nths dims (vars1 \\<union> vars2 - vars1);\n     vars1 \\<inter> vars2 = {};\n     vars1 \\<union> vars2 - vars1 = vars2\\<rbrakk>\n    \\<Longrightarrow> nths (nths dims (vars1 \\<union> vars2))\n                       (- (\\<lambda>x.\n                              card {i \\<in> vars1 \\<union> vars2. i < x}) `\n                          vars1) =\n                      nths dims vars2\n 2. \\<lbrakk>vars1 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n             nths (nths dims (vars1 \\<union> vars2))\n              (- (\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) `\n                 vars1) =\n             nths dims (vars1 \\<union> vars2 - vars1);\n     vars1 \\<inter> vars2 = {}\\<rbrakk>\n    \\<Longrightarrow> vars1 \\<union> vars2 - vars1 = vars2", "by auto"], ["", "lemma nths_vars2'_comp:\n  \"nths dims0 (vars2') = dims2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims0 vars2' = dims2", "using nths_reencode_eq[of vars2 vars0 dims]"], ["proof (prove)\nusing this:\n  vars2 \\<subseteq> vars0 \\<Longrightarrow>\n  nths (nths dims vars0) (ind_in_set vars0 ` vars2) = nths dims vars2\n\ngoal (1 subgoal):\n 1. nths dims0 vars2' = dims2", "unfolding vars0_def ind_in_set_def vars2'_def dims2_def dims0_def"], ["proof (prove)\nusing this:\n  vars2 \\<subseteq> vars1 \\<union> vars2 \\<Longrightarrow>\n  nths (nths dims (vars1 \\<union> vars2))\n   ((\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars2) =\n  nths dims vars2\n\ngoal (1 subgoal):\n 1. nths (nths dims (vars1 \\<union> vars2))\n     ((\\<lambda>x. card {i \\<in> vars1 \\<union> vars2. i < x}) ` vars2) =\n    nths dims vars2", "by auto"], ["", "lemma ptensor_encode1_encode2:\n  \"partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "have \"partial_state.encode1 dims0 vars1' i \n    = digit_decode (partial_state.dims1 dims0 vars1') (nths (digit_encode dims0 i) ({0..<length dims0} \\<inter> vars1'))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' i =\n    digit_decode (partial_state.dims1 dims0 vars1')\n     (nths (digit_encode dims0 i) ({0..<length dims0} \\<inter> vars1'))", "using partial_state.encode1_alter"], ["proof (prove)\nusing this:\n  {0..<length ?dims} \\<subseteq> ?A \\<Longrightarrow>\n  partial_state.encode1 ?dims ?vars ?i =\n  digit_decode (partial_state.dims1 ?dims ?vars)\n   (nths (digit_encode ?dims ?i) (?A \\<inter> ?vars))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' i =\n    digit_decode (partial_state.dims1 dims0 vars1')\n     (nths (digit_encode dims0 i) ({0..<length dims0} \\<inter> vars1'))", "by auto"], ["proof (state)\nthis:\n  partial_state.encode1 dims0 vars1' ?i =\n  digit_decode (partial_state.dims1 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars1'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "moreover"], ["proof (state)\nthis:\n  partial_state.encode1 dims0 vars1' ?i =\n  digit_decode (partial_state.dims1 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars1'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "have \"partial_state.encode2 dims0 vars2' i \n    = digit_decode (partial_state.dims2 dims0 vars2') (nths (digit_encode dims0 i) ({0..<length dims0} - vars2'))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 dims0 vars2' i =\n    digit_decode (partial_state.dims2 dims0 vars2')\n     (nths (digit_encode dims0 i) ({0..<length dims0} - vars2'))", "using partial_state.encode2_alter"], ["proof (prove)\nusing this:\n  {0..<length ?dims} \\<subseteq> ?A \\<Longrightarrow>\n  partial_state.encode2 ?dims ?vars ?i =\n  digit_decode (partial_state.dims2 ?dims ?vars)\n   (nths (digit_encode ?dims ?i) (?A - ?vars))\n\ngoal (1 subgoal):\n 1. partial_state.encode2 dims0 vars2' i =\n    digit_decode (partial_state.dims2 dims0 vars2')\n     (nths (digit_encode dims0 i) ({0..<length dims0} - vars2'))", "by auto"], ["proof (state)\nthis:\n  partial_state.encode2 dims0 vars2' ?i =\n  digit_decode (partial_state.dims2 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars2'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "moreover"], ["proof (state)\nthis:\n  partial_state.encode2 dims0 vars2' ?i =\n  digit_decode (partial_state.dims2 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars2'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "have \"partial_state.dims1 dims0 vars1' = partial_state.dims2 dims0 vars2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.dims1 dims0 vars1' = partial_state.dims2 dims0 vars2'", "unfolding partial_state.dims1_def partial_state.dims2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims0 vars1' = nths dims0 (- vars2')", "using nths_vars1' nths_vars1'_comp"], ["proof (prove)\nusing this:\n  nths dims0 vars1' = dims1\n  nths dims0 (- vars2') = dims1\n\ngoal (1 subgoal):\n 1. nths dims0 vars1' = nths dims0 (- vars2')", "by auto"], ["proof (state)\nthis:\n  partial_state.dims1 dims0 vars1' = partial_state.dims2 dims0 vars2'\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "ultimately"], ["proof (chain)\npicking this:\n  partial_state.encode1 dims0 vars1' ?i =\n  digit_decode (partial_state.dims1 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars1'))\n  partial_state.encode2 dims0 vars2' ?i =\n  digit_decode (partial_state.dims2 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars2'))\n  partial_state.dims1 dims0 vars1' = partial_state.dims2 dims0 vars2'", "show ?thesis"], ["proof (prove)\nusing this:\n  partial_state.encode1 dims0 vars1' ?i =\n  digit_decode (partial_state.dims1 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars1'))\n  partial_state.encode2 dims0 vars2' ?i =\n  digit_decode (partial_state.dims2 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars2'))\n  partial_state.dims1 dims0 vars1' = partial_state.dims2 dims0 vars2'\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "using length_dims0_minus_vars2'_is_vars1'"], ["proof (prove)\nusing this:\n  partial_state.encode1 dims0 vars1' ?i =\n  digit_decode (partial_state.dims1 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars1'))\n  partial_state.encode2 dims0 vars2' ?i =\n  digit_decode (partial_state.dims2 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars2'))\n  partial_state.dims1 dims0 vars1' = partial_state.dims2 dims0 vars2'\n  {0..<length dims0} - vars2' = {0..<length dims0} \\<inter> vars1'\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'", "by auto"], ["proof (state)\nthis:\n  partial_state.encode1 dims0 vars1' = partial_state.encode2 dims0 vars2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ptensor_encode2_encode1:\n  \"partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "have \"partial_state.encode1 dims0 vars2' i \n    = digit_decode (partial_state.dims1 dims0 vars2') (nths (digit_encode dims0 i) ({0..<length dims0} \\<inter> vars2'))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' i =\n    digit_decode (partial_state.dims1 dims0 vars2')\n     (nths (digit_encode dims0 i) ({0..<length dims0} \\<inter> vars2'))", "using partial_state.encode1_alter"], ["proof (prove)\nusing this:\n  {0..<length ?dims} \\<subseteq> ?A \\<Longrightarrow>\n  partial_state.encode1 ?dims ?vars ?i =\n  digit_decode (partial_state.dims1 ?dims ?vars)\n   (nths (digit_encode ?dims ?i) (?A \\<inter> ?vars))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' i =\n    digit_decode (partial_state.dims1 dims0 vars2')\n     (nths (digit_encode dims0 i) ({0..<length dims0} \\<inter> vars2'))", "by auto"], ["proof (state)\nthis:\n  partial_state.encode1 dims0 vars2' ?i =\n  digit_decode (partial_state.dims1 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars2'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "moreover"], ["proof (state)\nthis:\n  partial_state.encode1 dims0 vars2' ?i =\n  digit_decode (partial_state.dims1 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars2'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "have \"partial_state.encode2 dims0 vars1' i \n    = digit_decode (partial_state.dims2 dims0 vars1') (nths (digit_encode dims0 i) ({0..<length dims0} - vars1'))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 dims0 vars1' i =\n    digit_decode (partial_state.dims2 dims0 vars1')\n     (nths (digit_encode dims0 i) ({0..<length dims0} - vars1'))", "using partial_state.encode2_alter"], ["proof (prove)\nusing this:\n  {0..<length ?dims} \\<subseteq> ?A \\<Longrightarrow>\n  partial_state.encode2 ?dims ?vars ?i =\n  digit_decode (partial_state.dims2 ?dims ?vars)\n   (nths (digit_encode ?dims ?i) (?A - ?vars))\n\ngoal (1 subgoal):\n 1. partial_state.encode2 dims0 vars1' i =\n    digit_decode (partial_state.dims2 dims0 vars1')\n     (nths (digit_encode dims0 i) ({0..<length dims0} - vars1'))", "by auto"], ["proof (state)\nthis:\n  partial_state.encode2 dims0 vars1' ?i =\n  digit_decode (partial_state.dims2 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars1'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "moreover"], ["proof (state)\nthis:\n  partial_state.encode2 dims0 vars1' ?i =\n  digit_decode (partial_state.dims2 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars1'))\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "have \"partial_state.dims1 dims0 vars2' = partial_state.dims2 dims0 vars1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.dims1 dims0 vars2' = partial_state.dims2 dims0 vars1'", "unfolding partial_state.dims1_def partial_state.dims2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths dims0 vars2' = nths dims0 (- vars1')", "using nths_vars2' nths_vars2'_comp"], ["proof (prove)\nusing this:\n  nths dims0 (- vars1') = dims2\n  nths dims0 vars2' = dims2\n\ngoal (1 subgoal):\n 1. nths dims0 vars2' = nths dims0 (- vars1')", "by auto"], ["proof (state)\nthis:\n  partial_state.dims1 dims0 vars2' = partial_state.dims2 dims0 vars1'\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "ultimately"], ["proof (chain)\npicking this:\n  partial_state.encode1 dims0 vars2' ?i =\n  digit_decode (partial_state.dims1 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars2'))\n  partial_state.encode2 dims0 vars1' ?i =\n  digit_decode (partial_state.dims2 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars1'))\n  partial_state.dims1 dims0 vars2' = partial_state.dims2 dims0 vars1'", "show ?thesis"], ["proof (prove)\nusing this:\n  partial_state.encode1 dims0 vars2' ?i =\n  digit_decode (partial_state.dims1 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars2'))\n  partial_state.encode2 dims0 vars1' ?i =\n  digit_decode (partial_state.dims2 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars1'))\n  partial_state.dims1 dims0 vars2' = partial_state.dims2 dims0 vars1'\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "using length_dims0_minus_vars1'_is_vars2'"], ["proof (prove)\nusing this:\n  partial_state.encode1 dims0 vars2' ?i =\n  digit_decode (partial_state.dims1 dims0 vars2')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} \\<inter> vars2'))\n  partial_state.encode2 dims0 vars1' ?i =\n  digit_decode (partial_state.dims2 dims0 vars1')\n   (nths (digit_encode dims0 ?i) ({0..<length dims0} - vars1'))\n  partial_state.dims1 dims0 vars2' = partial_state.dims2 dims0 vars1'\n  {0..<length dims0} - vars1' = {0..<length dims0} \\<inter> vars2'\n\ngoal (1 subgoal):\n 1. partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'", "by auto"], ["proof (state)\nthis:\n  partial_state.encode1 dims0 vars2' = partial_state.encode2 dims0 vars1'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Given vector v1 of dimension d1, and vector v2 of dimension d2, form\n  the tensor vector of dimension d1 * d2 = d0\\<close>"], ["", "definition ptensor_vec :: \"'a::times vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\" where\n  \"ptensor_vec v1 v2 = partial_state.tensor_vec dims0 vars1' v1 v2\""], ["", "lemma ptensor_vec_dim [simp]:\n  \"dim_vec (ptensor_vec v1 v2) = d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (ptensor_vec v1 v2) = d0", "by (simp add: ptensor_vec_def partial_state.tensor_vec_dim state_sig.d_def d0_def)"], ["", "lemma ptensor_vec_carrier:\n  \"ptensor_vec v1 v2 \\<in> carrier_vec d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_vec v1 v2 \\<in> carrier_vec d0", "by (simp add: carrier_dim_vec)"], ["", "lemma ptensor_vec_add:\n  fixes v1 v2 v3 :: \"'a::comm_ring vec\"\n  assumes \"v1 \\<in> carrier_vec d1\"\n    and \"v2 \\<in> carrier_vec d1\"\n    and \"v3 \\<in> carrier_vec d2\"\n  shows \"ptensor_vec (v1 + v2) v3 = ptensor_vec v1 v3 + ptensor_vec v2 v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_vec (v1 + v2) v3 = ptensor_vec v1 v3 + ptensor_vec v2 v3", "unfolding ptensor_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.tensor_vec dims0 vars1' (v1 + v2) v3 =\n    partial_state.tensor_vec dims0 vars1' v1 v3 +\n    partial_state.tensor_vec dims0 vars1' v2 v3", "apply (rule partial_state.tensor_vec_add1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. v1 \\<in> carrier_vec (partial_state.d1 dims0 vars1')\n 2. v2 \\<in> carrier_vec (partial_state.d1 dims0 vars1')\n 3. v3 \\<in> carrier_vec (partial_state.d2 dims0 vars1')", "unfolding partial_state.d1_def partial_state.d2_def\n    partial_state.dims1_def partial_state.dims2_def nths_vars1' nths_vars2'"], ["proof (prove)\ngoal (3 subgoals):\n 1. v1 \\<in> carrier_vec (prod_list dims1)\n 2. v2 \\<in> carrier_vec (prod_list dims1)\n 3. v3 \\<in> carrier_vec (prod_list dims2)", "using assms"], ["proof (prove)\nusing this:\n  v1 \\<in> carrier_vec d1\n  v2 \\<in> carrier_vec d1\n  v3 \\<in> carrier_vec d2\n\ngoal (3 subgoals):\n 1. v1 \\<in> carrier_vec (prod_list dims1)\n 2. v2 \\<in> carrier_vec (prod_list dims1)\n 3. v3 \\<in> carrier_vec (prod_list dims2)", "unfolding d1_def d2_def"], ["proof (prove)\nusing this:\n  v1 \\<in> carrier_vec (prod_list dims1)\n  v2 \\<in> carrier_vec (prod_list dims1)\n  v3 \\<in> carrier_vec (prod_list dims2)\n\ngoal (3 subgoals):\n 1. v1 \\<in> carrier_vec (prod_list dims1)\n 2. v2 \\<in> carrier_vec (prod_list dims1)\n 3. v3 \\<in> carrier_vec (prod_list dims2)", "by auto"], ["", "definition ptensor_mat :: \"'a::comm_ring_1 mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" where\n  \"ptensor_mat m1 m2 = partial_state.tensor_mat dims0 vars1' m1 m2\""], ["", "lemma ptensor_mat_dim_row [simp]:\n  \"dim_row (ptensor_mat m1 m2) = d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (ptensor_mat m1 m2) = d0", "by (simp add: ptensor_mat_def partial_state.tensor_mat_dim_row d0_def state_sig.d_def)"], ["", "lemma ptensor_mat_dim_col [simp]:\n  \"dim_col (ptensor_mat m1 m2) = d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (ptensor_mat m1 m2) = d0", "by (simp add: ptensor_mat_def partial_state.tensor_mat_dim_col d0_def state_sig.d_def)"], ["", "lemma ptensor_mat_carrier:\n  \"ptensor_mat m1 m2 \\<in> carrier_mat d0 d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_mat m1 m2 \\<in> carrier_mat d0 d0", "by (simp add: carrier_matI)"], ["", "lemma ptensor_mat_add:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n  shows \"ptensor_mat (m1 + m2) m3 = ptensor_mat m1 m3 + ptensor_mat m2 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_mat (m1 + m2) m3 = ptensor_mat m1 m3 + ptensor_mat m2 m3", "unfolding ptensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat dims0 vars1' (m1 + m2) m3 =\n    tensor_mat dims0 vars1' m1 m3 + tensor_mat dims0 vars1' m2 m3", "apply (rule partial_state.tensor_mat_add1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. m1 \\<in> carrier_mat (partial_state.d1 dims0 vars1')\n              (partial_state.d1 dims0 vars1')\n 2. m2 \\<in> carrier_mat (partial_state.d1 dims0 vars1')\n              (partial_state.d1 dims0 vars1')\n 3. m3 \\<in> carrier_mat (partial_state.d2 dims0 vars1')\n              (partial_state.d2 dims0 vars1')", "unfolding partial_state.d1_def partial_state.d2_def\n    partial_state.dims1_def partial_state.dims2_def nths_vars1'\n    nths_vars2'"], ["proof (prove)\ngoal (3 subgoals):\n 1. m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 2. m2 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 3. m3 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n  m3 \\<in> carrier_mat d2 d2\n\ngoal (3 subgoals):\n 1. m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 2. m2 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 3. m3 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)", "unfolding d1_def d2_def"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n  m2 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n  m3 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)\n\ngoal (3 subgoals):\n 1. m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 2. m2 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 3. m3 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)", "by auto"], ["", "lemma ptensor_mat_trace:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n  shows \"trace (ptensor_mat m1 m2) = trace m1 * trace m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (ptensor_mat m1 m2) = trace m1 * trace m2", "unfolding ptensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (tensor_mat dims0 vars1' m1 m2) = trace m1 * trace m2", "apply (rule partial_state.tensor_mat_trace)"], ["proof (prove)\ngoal (2 subgoals):\n 1. m1 \\<in> carrier_mat (partial_state.d1 dims0 vars1')\n              (partial_state.d1 dims0 vars1')\n 2. m2 \\<in> carrier_mat (partial_state.d2 dims0 vars1')\n              (partial_state.d2 dims0 vars1')", "unfolding partial_state.d1_def partial_state.d2_def\n    partial_state.dims1_def partial_state.dims2_def nths_vars1' nths_vars2'"], ["proof (prove)\ngoal (2 subgoals):\n 1. m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 2. m2 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d2 d2\n\ngoal (2 subgoals):\n 1. m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 2. m2 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)", "unfolding d1_def d2_def"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n  m2 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)\n\ngoal (2 subgoals):\n 1. m1 \\<in> carrier_mat (prod_list dims1) (prod_list dims1)\n 2. m2 \\<in> carrier_mat (prod_list dims2) (prod_list dims2)", "by auto"], ["", "lemma ptensor_mat_id:\n  \"ptensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_mat (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d0", "unfolding ptensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tensor_mat dims0 vars1' (1\\<^sub>m d1) (1\\<^sub>m d2) = 1\\<^sub>m d0", "by (metis d0_def d1_def d2_def nths_vars1' nths_vars2'\n      partial_state.d1_def partial_state.d2_def partial_state.dims1_def\n      partial_state.dims2_def partial_state.tensor_mat_id state_sig.d_def)"], ["", "lemma ptensor_mat_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n    and \"m3 \\<in> carrier_mat d2 d2\"\n    and \"m4 \\<in> carrier_mat d2 d2\"\n  shows \"ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "interpret st: partial_state dims0 vars1'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "have \"st.d1 = d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st.d1 = d1", "unfolding st.d1_def st.dims1_def d1_def nths_vars1'"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list dims1 = prod_list dims1", "by auto"], ["proof (state)\nthis:\n  st.d1 = d1\n\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "moreover"], ["proof (state)\nthis:\n  st.d1 = d1\n\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "have \"st.d2 = d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st.d2 = d2", "unfolding st.d2_def st.dims2_def d2_def nths_vars2'"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list dims2 = prod_list dims2", "by auto"], ["proof (state)\nthis:\n  st.d2 = d2\n\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "ultimately"], ["proof (chain)\npicking this:\n  st.d1 = d1\n  st.d2 = d2", "show ?thesis"], ["proof (prove)\nusing this:\n  st.d1 = d1\n  st.d2 = d2\n\ngoal (1 subgoal):\n 1. ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4", "unfolding ptensor_mat_def"], ["proof (prove)\nusing this:\n  st.d1 = d1\n  st.d2 = d2\n\ngoal (1 subgoal):\n 1. st.tensor_mat (m1 * m2) (m3 * m4) =\n    st.tensor_mat m1 m3 * st.tensor_mat m2 m4", "using st.tensor_mat_mult assms"], ["proof (prove)\nusing this:\n  st.d1 = d1\n  st.d2 = d2\n  \\<lbrakk>?m1.0 \\<in> carrier_mat st.d1 st.d1;\n   ?m2.0 \\<in> carrier_mat st.d1 st.d1; ?m3.0 \\<in> carrier_mat st.d2 st.d2;\n   ?m4.0 \\<in> carrier_mat st.d2 st.d2\\<rbrakk>\n  \\<Longrightarrow> st.tensor_mat (?m1.0 * ?m2.0) (?m3.0 * ?m4.0) =\n                    st.tensor_mat ?m1.0 ?m3.0 * st.tensor_mat ?m2.0 ?m4.0\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n  m3 \\<in> carrier_mat d2 d2\n  m4 \\<in> carrier_mat d2 d2\n\ngoal (1 subgoal):\n 1. st.tensor_mat (m1 * m2) (m3 * m4) =\n    st.tensor_mat m1 m3 * st.tensor_mat m2 m4", "by auto"], ["proof (state)\nthis:\n  ptensor_mat (m1 * m2) (m3 * m4) = ptensor_mat m1 m3 * ptensor_mat m2 m4\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ptensor_mat_mult_vec:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"v1 \\<in> carrier_vec d1\"\n    and \"m2 \\<in> carrier_mat d2 d2\"\n    and \"v2 \\<in> carrier_vec d2\"\n  shows \"ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) = ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "interpret st: partial_state dims0 vars1'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "have \"st.d1 = d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st.d1 = d1", "unfolding st.d1_def st.dims1_def d1_def nths_vars1'"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list dims1 = prod_list dims1", "by auto"], ["proof (state)\nthis:\n  st.d1 = d1\n\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "moreover"], ["proof (state)\nthis:\n  st.d1 = d1\n\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "have \"st.d2 = d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st.d2 = d2", "unfolding st.d2_def st.dims2_def d2_def nths_vars2'"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list dims2 = prod_list dims2", "by auto"], ["proof (state)\nthis:\n  st.d2 = d2\n\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "ultimately"], ["proof (chain)\npicking this:\n  st.d1 = d1\n  st.d2 = d2", "show ?thesis"], ["proof (prove)\nusing this:\n  st.d1 = d1\n  st.d2 = d2\n\ngoal (1 subgoal):\n 1. ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2", "unfolding ptensor_mat_def ptensor_vec_def"], ["proof (prove)\nusing this:\n  st.d1 = d1\n  st.d2 = d2\n\ngoal (1 subgoal):\n 1. st.tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    st.tensor_mat m1 m2 *\\<^sub>v st.tensor_vec v1 v2", "using st.tensor_mat_mult_vec assms"], ["proof (prove)\nusing this:\n  st.d1 = d1\n  st.d2 = d2\n  \\<lbrakk>?m1.0 \\<in> carrier_mat st.d1 st.d1;\n   ?m2.0 \\<in> carrier_mat st.d2 st.d2; ?v1.0 \\<in> carrier_vec st.d1;\n   ?v2.0 \\<in> carrier_vec st.d2\\<rbrakk>\n  \\<Longrightarrow> st.tensor_vec (?m1.0 *\\<^sub>v ?v1.0)\n                     (?m2.0 *\\<^sub>v ?v2.0) =\n                    st.tensor_mat ?m1.0 ?m2.0 *\\<^sub>v\n                    st.tensor_vec ?v1.0 ?v2.0\n  m1 \\<in> carrier_mat d1 d1\n  v1 \\<in> carrier_vec d1\n  m2 \\<in> carrier_mat d2 d2\n  v2 \\<in> carrier_vec d2\n\ngoal (1 subgoal):\n 1. st.tensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n    st.tensor_mat m1 m2 *\\<^sub>v st.tensor_vec v1 v2", "by auto"], ["proof (state)\nthis:\n  ptensor_vec (m1 *\\<^sub>v v1) (m2 *\\<^sub>v v2) =\n  ptensor_mat m1 m2 *\\<^sub>v ptensor_vec v1 v2\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Partial extensions\\<close>"], ["", "definition pmat_extension :: \"'a::comm_ring_1 mat \\<Rightarrow> 'a mat\" where\n  \"pmat_extension m = ptensor_mat m (1\\<^sub>m d2)\""], ["", "lemma pmat_extension_carrier:\n  \"pmat_extension m \\<in> carrier_mat d0 d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmat_extension m \\<in> carrier_mat d0 d0", "by (simp add: pmat_extension_def ptensor_mat_carrier)"], ["", "lemma pmat_extension_add:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"pmat_extension (m1 + m2) = pmat_extension m1 + pmat_extension m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmat_extension (m1 + m2) = pmat_extension m1 + pmat_extension m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. pmat_extension (m1 + m2) = pmat_extension m1 + pmat_extension m2", "by (simp add: pmat_extension_def ptensor_mat_add)"], ["", "lemma pmat_extension_trace:\n  assumes \"m \\<in> carrier_mat d1 d1\"\n  shows \"trace (pmat_extension m) = d2 * trace m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace (pmat_extension m) = int d2 * trace m", "using assms"], ["proof (prove)\nusing this:\n  m \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. trace (pmat_extension m) = int d2 * trace m", "by (simp add: pmat_extension_def ptensor_mat_trace)"], ["", "lemma pmat_extension_id:\n  \"pmat_extension (1\\<^sub>m d1) = 1\\<^sub>m d0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmat_extension (1\\<^sub>m d1) = 1\\<^sub>m d0", "by (simp add: pmat_extension_def ptensor_mat_id)"], ["", "lemma pmat_extension_mult:\n  assumes \"m1 \\<in> carrier_mat d1 d1\"\n    and \"m2 \\<in> carrier_mat d1 d1\"\n  shows \"pmat_extension (m1 * m2) = pmat_extension m1 * pmat_extension m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmat_extension (m1 * m2) = pmat_extension m1 * pmat_extension m2", "using assms"], ["proof (prove)\nusing this:\n  m1 \\<in> carrier_mat d1 d1\n  m2 \\<in> carrier_mat d1 d1\n\ngoal (1 subgoal):\n 1. pmat_extension (m1 * m2) = pmat_extension m1 * pmat_extension m2", "by (simp add: pmat_extension_def ptensor_mat_mult[symmetric])"], ["", "end"], ["", "context state_sig\nbegin"], ["", "abbreviation \"ptensor_vec \\<equiv> partial_state2.ptensor_vec\""], ["", "abbreviation \"ptensor_mat \\<equiv> partial_state2.ptensor_mat\""], ["", "abbreviation \"pmat_extension \\<equiv> partial_state2.pmat_extension\""], ["", "text \\<open>Key property: commutativity of tensor product\\<close>"], ["", "lemma ptensor_mat_comm:\n  fixes m1 m2 :: \"complex mat\"\n  assumes \"vars1 \\<inter> vars2 = {}\"\n  shows \"ptensor_mat dims vars1 vars2 m1 m2 = ptensor_mat dims vars2 vars1 m2 m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2.ptensor_mat dims vars1 vars2 m1 m2 =\n    partial_state2.ptensor_mat dims vars2 vars1 m2 m1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.ptensor_mat dims vars1 vars2 m1 m2 =\n    partial_state2.ptensor_mat dims vars2 vars1 m2 m1", "interpret st1: partial_state2 dims vars1 vars2"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars1 vars2", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> vars2 = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> vars2 = {}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. st1.ptensor_mat m1 m2 =\n    partial_state2.ptensor_mat dims vars2 vars1 m2 m1", "interpret st2: partial_state2 dims vars2 vars1"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars2 vars1", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars1 = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars1 = {}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. st1.ptensor_mat m1 m2 = st2.ptensor_mat m2 m1", "have eq1: \"partial_state.encode1 st1.dims0 st1.vars1' = partial_state.encode2 st2.dims0 st2.vars1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 st1.dims0 st1.vars1' =\n    partial_state.encode2 st2.dims0 st2.vars1'", "apply (subst st1.ptensor_encode1_encode2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 st1.dims0 st1.vars2' =\n    partial_state.encode2 st2.dims0 st2.vars1'", "unfolding st1.dims0_def st1.vars0_def st1.vars2'_def st2.dims0_def st2.vars0_def st2.vars1'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 (nths dims (vars1 \\<union> vars2))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    partial_state.encode2 (nths dims (vars2 \\<union> vars1))\n     (ind_in_set (vars2 \\<union> vars1) ` vars2)", "by (subgoal_tac \"vars1 \\<union> vars2 = vars2 \\<union> vars1\", auto)"], ["proof (state)\nthis:\n  partial_state.encode1 st1.dims0 st1.vars1' =\n  partial_state.encode2 st2.dims0 st2.vars1'\n\ngoal (1 subgoal):\n 1. st1.ptensor_mat m1 m2 = st2.ptensor_mat m2 m1", "have eq2: \"partial_state.encode2 st1.dims0 st1.vars1' = partial_state.encode1 st2.dims0 st2.vars1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 st1.dims0 st1.vars1' =\n    partial_state.encode1 st2.dims0 st2.vars1'", "apply (subst st1.ptensor_encode2_encode1[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 st1.dims0 st1.vars2' =\n    partial_state.encode1 st2.dims0 st2.vars1'", "unfolding st1.dims0_def st1.vars0_def st1.vars2'_def st2.dims0_def st2.vars0_def st2.vars1'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 (nths dims (vars1 \\<union> vars2))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    partial_state.encode1 (nths dims (vars2 \\<union> vars1))\n     (ind_in_set (vars2 \\<union> vars1) ` vars2)", "by (subgoal_tac \"vars1 \\<union> vars2 = vars2 \\<union> vars1\", auto)"], ["proof (state)\nthis:\n  partial_state.encode2 st1.dims0 st1.vars1' =\n  partial_state.encode1 st2.dims0 st2.vars1'\n\ngoal (1 subgoal):\n 1. st1.ptensor_mat m1 m2 = st2.ptensor_mat m2 m1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st1.ptensor_mat m1 m2 = st2.ptensor_mat m2 m1", "unfolding st1.ptensor_mat_def st2.ptensor_mat_def partial_state.tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (state_sig.d st1.dims0) (state_sig.d st1.dims0)\n     (\\<lambda>(i, j).\n         m1 $$\n         (partial_state.encode1 st1.dims0 st1.vars1' i,\n          partial_state.encode1 st1.dims0 st1.vars1' j) *\n         m2 $$\n         (partial_state.encode2 st1.dims0 st1.vars1' i,\n          partial_state.encode2 st1.dims0 st1.vars1' j)) =\n    mat (state_sig.d st2.dims0) (state_sig.d st2.dims0)\n     (\\<lambda>(i, j).\n         m2 $$\n         (partial_state.encode1 st2.dims0 st2.vars1' i,\n          partial_state.encode1 st2.dims0 st2.vars1' j) *\n         m1 $$\n         (partial_state.encode2 st2.dims0 st2.vars1' i,\n          partial_state.encode2 st2.dims0 st2.vars1' j))", "apply (rule cong_mat, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. state_sig.d st1.dims0 = state_sig.d st2.dims0\n 2. state_sig.d st1.dims0 = state_sig.d st2.dims0\n 3. \\<And>i j.\n       \\<lbrakk>i < state_sig.d st1.dims0;\n        j < state_sig.d st1.dims0\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 st1.dims0 st1.vars1' i,\n                          partial_state.encode1 st1.dims0 st1.vars1' j) *\n                         m2 $$\n                         (partial_state.encode2 st1.dims0 st1.vars1' i,\n                          partial_state.encode2 st1.dims0 st1.vars1' j) =\n                         m2 $$\n                         (partial_state.encode1 st2.dims0 st2.vars1' i,\n                          partial_state.encode1 st2.dims0 st2.vars1' j) *\n                         m1 $$\n                         (partial_state.encode2 st2.dims0 st2.vars1' i,\n                          partial_state.encode2 st2.dims0 st2.vars1' j)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d st1.dims0 = state_sig.d st2.dims0", "unfolding st1.dims0_def st1.vars0_def st2.dims0_def st2.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d (nths dims (vars1 \\<union> vars2)) =\n    state_sig.d (nths dims (vars2 \\<union> vars1))", "by (subgoal_tac \"vars1 \\<union> vars2 = vars2 \\<union> vars1\", auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. state_sig.d st1.dims0 = state_sig.d st2.dims0\n 2. \\<And>i j.\n       \\<lbrakk>i < state_sig.d st1.dims0;\n        j < state_sig.d st1.dims0\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 st1.dims0 st1.vars1' i,\n                          partial_state.encode1 st1.dims0 st1.vars1' j) *\n                         m2 $$\n                         (partial_state.encode2 st1.dims0 st1.vars1' i,\n                          partial_state.encode2 st1.dims0 st1.vars1' j) =\n                         m2 $$\n                         (partial_state.encode1 st2.dims0 st2.vars1' i,\n                          partial_state.encode1 st2.dims0 st2.vars1' j) *\n                         m1 $$\n                         (partial_state.encode2 st2.dims0 st2.vars1' i,\n                          partial_state.encode2 st2.dims0 st2.vars1' j)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d st1.dims0 = state_sig.d st2.dims0", "unfolding st1.dims0_def st1.vars0_def st2.dims0_def st2.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d (nths dims (vars1 \\<union> vars2)) =\n    state_sig.d (nths dims (vars2 \\<union> vars1))", "by (subgoal_tac \"vars1 \\<union> vars2 = vars2 \\<union> vars1\", auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < state_sig.d st1.dims0;\n        j < state_sig.d st1.dims0\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 st1.dims0 st1.vars1' i,\n                          partial_state.encode1 st1.dims0 st1.vars1' j) *\n                         m2 $$\n                         (partial_state.encode2 st1.dims0 st1.vars1' i,\n                          partial_state.encode2 st1.dims0 st1.vars1' j) =\n                         m2 $$\n                         (partial_state.encode1 st2.dims0 st2.vars1' i,\n                          partial_state.encode1 st2.dims0 st2.vars1' j) *\n                         m1 $$\n                         (partial_state.encode2 st2.dims0 st2.vars1' i,\n                          partial_state.encode2 st2.dims0 st2.vars1' j)", "using eq1 eq2"], ["proof (prove)\nusing this:\n  partial_state.encode1 st1.dims0 st1.vars1' =\n  partial_state.encode2 st2.dims0 st2.vars1'\n  partial_state.encode2 st1.dims0 st1.vars1' =\n  partial_state.encode1 st2.dims0 st2.vars1'\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < state_sig.d st1.dims0;\n        j < state_sig.d st1.dims0\\<rbrakk>\n       \\<Longrightarrow> m1 $$\n                         (partial_state.encode1 st1.dims0 st1.vars1' i,\n                          partial_state.encode1 st1.dims0 st1.vars1' j) *\n                         m2 $$\n                         (partial_state.encode2 st1.dims0 st1.vars1' i,\n                          partial_state.encode2 st1.dims0 st1.vars1' j) =\n                         m2 $$\n                         (partial_state.encode1 st2.dims0 st2.vars1' i,\n                          partial_state.encode1 st2.dims0 st2.vars1' j) *\n                         m1 $$\n                         (partial_state.encode2 st2.dims0 st2.vars1' i,\n                          partial_state.encode2 st2.dims0 st2.vars1' j)", "by auto"], ["proof (state)\nthis:\n  st1.ptensor_mat m1 m2 = st2.ptensor_mat m2 m1\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Key property: associativity of tensor product\\<close>"], ["", "lemma ind_in_set_mono:\n  fixes a b :: nat and A :: \"nat set\"\n  assumes \"a \\<in> A\" \"b \\<in> A\" \"a < b\"\n  shows \"ind_in_set A a < ind_in_set A b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A a < ind_in_set A b", "unfolding ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < a} < card {i \\<in> A. i < b}", "apply (rule psubset_card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite {i \\<in> A. i < b}\n 2. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i \\<in> A. i < b}", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "have \"x \\<in> {i \\<in> A. i < b}\" if \"x \\<in> {i \\<in> A. i < a}\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {i \\<in> A. i < b}", "using assms that"], ["proof (prove)\nusing this:\n  a \\<in> A\n  b \\<in> A\n  a < b\n  x \\<in> {i \\<in> A. i < a}\n\ngoal (1 subgoal):\n 1. x \\<in> {i \\<in> A. i < b}", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> {i \\<in> A. i < a} \\<Longrightarrow> ?x \\<in> {i \\<in> A. i < b}\n\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "moreover"], ["proof (state)\nthis:\n  ?x \\<in> {i \\<in> A. i < a} \\<Longrightarrow> ?x \\<in> {i \\<in> A. i < b}\n\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "have \"a \\<in> {i \\<in> A. i < b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {i \\<in> A. i < b}", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> A\n  b \\<in> A\n  a < b\n\ngoal (1 subgoal):\n 1. a \\<in> {i \\<in> A. i < b}", "by auto"], ["proof (state)\nthis:\n  a \\<in> {i \\<in> A. i < b}\n\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "moreover"], ["proof (state)\nthis:\n  a \\<in> {i \\<in> A. i < b}\n\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "have \"b \\<notin> {i \\<in> A. i < b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<notin> {i \\<in> A. i < b}", "by auto"], ["proof (state)\nthis:\n  b \\<notin> {i \\<in> A. i < b}\n\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "ultimately"], ["proof (chain)\npicking this:\n  ?x \\<in> {i \\<in> A. i < a} \\<Longrightarrow> ?x \\<in> {i \\<in> A. i < b}\n  a \\<in> {i \\<in> A. i < b}\n  b \\<notin> {i \\<in> A. i < b}", "show \"{i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}\""], ["proof (prove)\nusing this:\n  ?x \\<in> {i \\<in> A. i < a} \\<Longrightarrow> ?x \\<in> {i \\<in> A. i < b}\n  a \\<in> {i \\<in> A. i < b}\n  b \\<notin> {i \\<in> A. i < b}\n\ngoal (1 subgoal):\n 1. {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}", "by blast"], ["proof (state)\nthis:\n  {i \\<in> A. i < a} \\<subset> {i \\<in> A. i < b}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_inj:\n  fixes a b :: nat and A :: \"nat set\"\n  assumes \"a \\<in> A\" \"b \\<in> A\" \"ind_in_set A a = ind_in_set A b\"\n  shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a = b", "have \"ind_in_set A a < ind_in_set A b\" if \"a < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A a < ind_in_set A b", "by (rule ind_in_set_mono[OF assms(1) assms(2) that])"], ["proof (state)\nthis:\n  a < b \\<Longrightarrow> ind_in_set A a < ind_in_set A b\n\ngoal (1 subgoal):\n 1. a = b", "moreover"], ["proof (state)\nthis:\n  a < b \\<Longrightarrow> ind_in_set A a < ind_in_set A b\n\ngoal (1 subgoal):\n 1. a = b", "have \"ind_in_set A b < ind_in_set A a\" if \"b < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A b < ind_in_set A a", "by (rule ind_in_set_mono[OF assms(2) assms(1) that])"], ["proof (state)\nthis:\n  b < a \\<Longrightarrow> ind_in_set A b < ind_in_set A a\n\ngoal (1 subgoal):\n 1. a = b", "ultimately"], ["proof (chain)\npicking this:\n  a < b \\<Longrightarrow> ind_in_set A a < ind_in_set A b\n  b < a \\<Longrightarrow> ind_in_set A b < ind_in_set A a", "show ?thesis"], ["proof (prove)\nusing this:\n  a < b \\<Longrightarrow> ind_in_set A a < ind_in_set A b\n  b < a \\<Longrightarrow> ind_in_set A b < ind_in_set A a\n\ngoal (1 subgoal):\n 1. a = b", "using assms(3)"], ["proof (prove)\nusing this:\n  a < b \\<Longrightarrow> ind_in_set A a < ind_in_set A b\n  b < a \\<Longrightarrow> ind_in_set A b < ind_in_set A a\n  ind_in_set A a = ind_in_set A b\n\ngoal (1 subgoal):\n 1. a = b", "by arith"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_mono2:\n  fixes a b :: nat and A :: \"nat set\"\n  assumes \"a \\<in> A\" \"b \\<in> A\" \"ind_in_set A a < ind_in_set A b\"\n  shows \"a < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < b", "using ind_in_set_mono ind_in_set_inj"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> ?A; ?b \\<in> ?A; ?a < ?b\\<rbrakk>\n  \\<Longrightarrow> ind_in_set ?A ?a < ind_in_set ?A ?b\n  \\<lbrakk>?a \\<in> ?A; ?b \\<in> ?A;\n   ind_in_set ?A ?a = ind_in_set ?A ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. a < b", "by (metis assms not_less_iff_gr_or_eq)"], ["", "lemma ind_in_set_bij_betw:\n  fixes A B :: \"nat set\"\n  assumes \"B \\<subseteq> A\" \"c \\<in> B\"\n  shows \"bij_betw (ind_in_set A) {i \\<in> B. i < c} {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set A) {i \\<in> B. i < c}\n     {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set A) {i \\<in> B. i < c} \\<and>\n    ind_in_set A ` {i \\<in> B. i < c} =\n    {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. inj_on (ind_in_set A) {i \\<in> B. i < c}\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> B; xa < c\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa < ind_in_set A c\n 3. \\<And>xa.\n       \\<lbrakk>ind_in_set A xa < ind_in_set A c; xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa\n                         \\<in> ind_in_set A ` {i \\<in> B. i < c}", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. inj_on (ind_in_set A) {i \\<in> B. i < c}\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> B; xa < c\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa < ind_in_set A c\n 3. \\<And>xa.\n       \\<lbrakk>ind_in_set A xa < ind_in_set A c; xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa\n                         \\<in> ind_in_set A ` {i \\<in> B. i < c}", "show \"inj_on (ind_in_set A) {i \\<in> B. i < c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set A) {i \\<in> B. i < c}", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{i \\<in> B. i < c}.\n       \\<forall>y\\<in>{i \\<in> B. i < c}.\n          ind_in_set A x = ind_in_set A y \\<longrightarrow> x = y", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; x < c; y \\<in> B; y < c;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "using assms(1) ind_in_set_inj"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  \\<lbrakk>?a \\<in> ?A; ?b \\<in> ?A;\n   ind_in_set ?A ?a = ind_in_set ?A ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; x < c; y \\<in> B; y < c;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "by blast"], ["proof (state)\nthis:\n  inj_on (ind_in_set A) {i \\<in> B. i < c}\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> B; xa < c\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa < ind_in_set A c\n 2. \\<And>xa.\n       \\<lbrakk>ind_in_set A xa < ind_in_set A c; xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa\n                         \\<in> ind_in_set A ` {i \\<in> B. i < c}", "show \"ind_in_set A x < ind_in_set A c\" if \"x \\<in> B\" \"x < c\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A x < ind_in_set A c", "by (meson assms that ind_in_set_mono subsetCE)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> B; ?x < c\\<rbrakk>\n  \\<Longrightarrow> ind_in_set A ?x < ind_in_set A c\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>ind_in_set A xa < ind_in_set A c; xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> ind_in_set A xa\n                         \\<in> ind_in_set A ` {i \\<in> B. i < c}", "show \"ind_in_set A x \\<in> ind_in_set A ` {i \\<in> B. i < c}\" if \"ind_in_set A x < ind_in_set A c\" \"x \\<in> B\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A x \\<in> ind_in_set A ` {i \\<in> B. i < c}", "using that ind_in_set_mono2 assms"], ["proof (prove)\nusing this:\n  ind_in_set A x < ind_in_set A c\n  x \\<in> B\n  \\<lbrakk>?a \\<in> ?A; ?b \\<in> ?A;\n   ind_in_set ?A ?a < ind_in_set ?A ?b\\<rbrakk>\n  \\<Longrightarrow> ?a < ?b\n  B \\<subseteq> A\n  c \\<in> B\n\ngoal (1 subgoal):\n 1. ind_in_set A x \\<in> ind_in_set A ` {i \\<in> B. i < c}", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>ind_in_set A ?x < ind_in_set A c; ?x \\<in> B\\<rbrakk>\n  \\<Longrightarrow> ind_in_set A ?x \\<in> ind_in_set A ` {i \\<in> B. i < c}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_assoc:\n  fixes A B C :: \"nat set\"\n  assumes \"C \\<subseteq> B\" \"B \\<subseteq> A\"\n  shows \"ind_in_set (ind_in_set A ` B) ` (ind_in_set A ` C) = ind_in_set B ` C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C", "have \"x \\<in> ind_in_set (ind_in_set A ` B) ` (ind_in_set A ` C)\" if x: \"x \\<in> ind_in_set B ` C\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "obtain c where c: \"c \\<in> C\" and x_eq: \"x = card {i \\<in> B. i < c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> C; x = card {i \\<in> B. i < c}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x"], ["proof (prove)\nusing this:\n  x \\<in> ind_in_set B ` C\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> C; x = card {i \\<in> B. i < c}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: ind_in_set_def)"], ["proof (state)\nthis:\n  c \\<in> C\n  x = card {i \\<in> B. i < c}\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "have \"card {i \\<in> B. i < c} = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> B. i < c} =\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "apply (rule bij_betw_same_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ?f {i \\<in> B. i < c}\n     {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "using c assms"], ["proof (prove)\nusing this:\n  c \\<in> C\n  C \\<subseteq> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. bij_betw ?f {i \\<in> B. i < c}\n     {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "by (auto intro: ind_in_set_bij_betw)"], ["proof (state)\nthis:\n  card {i \\<in> B. i < c} =\n  card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "then"], ["proof (chain)\npicking this:\n  card {i \\<in> B. i < c} =\n  card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "have \"ind_in_set (ind_in_set A ` B) (ind_in_set A c) = x\""], ["proof (prove)\nusing this:\n  card {i \\<in> B. i < c} =\n  card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\n\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) (ind_in_set A c) = x", "apply (subst ind_in_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> B. i < c} =\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c} \\<Longrightarrow>\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c} = x", "using x_eq"], ["proof (prove)\nusing this:\n  x = card {i \\<in> B. i < c}\n\ngoal (1 subgoal):\n 1. card {i \\<in> B. i < c} =\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c} \\<Longrightarrow>\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c} = x", "by auto"], ["proof (state)\nthis:\n  ind_in_set (ind_in_set A ` B) (ind_in_set A c) = x\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "then"], ["proof (chain)\npicking this:\n  ind_in_set (ind_in_set A ` B) (ind_in_set A c) = x", "show ?thesis"], ["proof (prove)\nusing this:\n  ind_in_set (ind_in_set A ` B) (ind_in_set A c) = x\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "using \\<open>c \\<in> C\\<close>"], ["proof (prove)\nusing this:\n  ind_in_set (ind_in_set A ` B) (ind_in_set A c) = x\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C", "by blast"], ["proof (state)\nthis:\n  x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> ind_in_set B ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C\n\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C", "moreover"], ["proof (state)\nthis:\n  ?x \\<in> ind_in_set B ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C\n\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C", "have \"x \\<in> ind_in_set B ` C\" if x: \"x \\<in> ind_in_set (ind_in_set A ` B) ` (ind_in_set A ` C)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "obtain c where c: \"c \\<in> C\" and x_eq: \"x = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> C;\n         x = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x"], ["proof (prove)\nusing this:\n  x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> C;\n         x = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: ind_in_set_def)"], ["proof (state)\nthis:\n  c \\<in> C\n  x = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "have \"card {i \\<in> B. i < c} = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> B. i < c} =\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "apply (rule bij_betw_same_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ?f {i \\<in> B. i < c}\n     {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "using c assms"], ["proof (prove)\nusing this:\n  c \\<in> C\n  C \\<subseteq> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. bij_betw ?f {i \\<in> B. i < c}\n     {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "by (auto intro: ind_in_set_bij_betw)"], ["proof (state)\nthis:\n  card {i \\<in> B. i < c} =\n  card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "then"], ["proof (chain)\npicking this:\n  card {i \\<in> B. i < c} =\n  card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}", "have \"ind_in_set B c = x\""], ["proof (prove)\nusing this:\n  card {i \\<in> B. i < c} =\n  card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\n\ngoal (1 subgoal):\n 1. ind_in_set B c = x", "apply (subst ind_in_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> B. i < c} =\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c} \\<Longrightarrow>\n    card {i \\<in> B. i < c} = x", "using x_eq"], ["proof (prove)\nusing this:\n  x = card {i \\<in> ind_in_set A ` B. i < ind_in_set A c}\n\ngoal (1 subgoal):\n 1. card {i \\<in> B. i < c} =\n    card {i \\<in> ind_in_set A ` B. i < ind_in_set A c} \\<Longrightarrow>\n    card {i \\<in> B. i < c} = x", "by auto"], ["proof (state)\nthis:\n  ind_in_set B c = x\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "then"], ["proof (chain)\npicking this:\n  ind_in_set B c = x", "show ?thesis"], ["proof (prove)\nusing this:\n  ind_in_set B c = x\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "using \\<open>c \\<in> C\\<close>"], ["proof (prove)\nusing this:\n  ind_in_set B c = x\n  c \\<in> C\n\ngoal (1 subgoal):\n 1. x \\<in> ind_in_set B ` C", "by blast"], ["proof (state)\nthis:\n  x \\<in> ind_in_set B ` C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> ind_in_set (ind_in_set A ` B) `\n           ind_in_set A ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set B ` C\n\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C", "ultimately"], ["proof (chain)\npicking this:\n  ?x \\<in> ind_in_set B ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C\n  ?x \\<in> ind_in_set (ind_in_set A ` B) `\n           ind_in_set A ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set B ` C", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> ind_in_set B ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C\n  ?x \\<in> ind_in_set (ind_in_set A ` B) `\n           ind_in_set A ` C \\<Longrightarrow>\n  ?x \\<in> ind_in_set B ` C\n\ngoal (1 subgoal):\n 1. ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C", "by auto"], ["proof (state)\nthis:\n  ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C = ind_in_set B ` C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_reencode_eq3:\n  fixes A B C :: \"nat set\"\n  assumes \"C \\<subseteq> B\" \"B \\<subseteq> A\"\n  shows \"nths (nths xs (ind_in_set A ` B)) (ind_in_set B ` C) = nths xs (ind_in_set A ` C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set A ` B)) (ind_in_set B ` C) =\n    nths xs (ind_in_set A ` C)", "apply (subst ind_in_set_assoc[OF assms, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set A ` B))\n     (ind_in_set (ind_in_set A ` B) ` ind_in_set A ` C) =\n    nths xs (ind_in_set A ` C)", "apply (rule nths_reencode_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` C \\<subseteq> ind_in_set A ` B", "using assms"], ["proof (prove)\nusing this:\n  C \\<subseteq> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. ind_in_set A ` C \\<subseteq> ind_in_set A ` B", "by blast"], ["", "lemma nths_assoc_three_A:\n  fixes A B C :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    and \"(A \\<union> B) \\<inter> C = {}\"\n  shows \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B))) (ind_in_set (A \\<union> B) ` A)\n       = nths xs (ind_in_set (A \\<union> B \\<union> C) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` A) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` A)", "apply (rule nths_reencode_eq3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. A \\<subseteq> A \\<union> B\n 2. A \\<union> B \\<subseteq> A \\<union> B \\<union> C", "by auto"], ["", "lemma nths_assoc_three_B:\n  fixes A B C :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    and \"(A \\<union> B) \\<inter> C = {}\"\n  shows \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B))) (ind_in_set (A \\<union> B) ` B)\n       = nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C))) (ind_in_set (B \\<union> C) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B)", "have \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B))) (ind_in_set (A \\<union> B) ` B) = nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)", "using nths_assoc_three_A[of B A C xs] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>B \\<inter> A = {}; (B \\<union> A) \\<inter> C = {}\\<rbrakk>\n  \\<Longrightarrow> nths\n                     (nths xs\n                       (ind_in_set (B \\<union> A \\<union> C) `\n                        (B \\<union> A)))\n                     (ind_in_set (B \\<union> A) ` B) =\n                    nths xs (ind_in_set (B \\<union> A \\<union> C) ` B)\n  A \\<inter> B = {}\n  (A \\<union> B) \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)", "by (simp add: inf_commute sup_commute)"], ["proof (state)\nthis:\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n   (ind_in_set (A \\<union> B) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B)", "moreover"], ["proof (state)\nthis:\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n   (ind_in_set (A \\<union> B) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B)", "have \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C))) (ind_in_set (B \\<union> C) ` B) = nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)", "using nths_assoc_three_A[of B C A xs] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>B \\<inter> C = {}; (B \\<union> C) \\<inter> A = {}\\<rbrakk>\n  \\<Longrightarrow> nths\n                     (nths xs\n                       (ind_in_set (B \\<union> C \\<union> A) `\n                        (B \\<union> C)))\n                     (ind_in_set (B \\<union> C) ` B) =\n                    nths xs (ind_in_set (B \\<union> C \\<union> A) ` B)\n  A \\<inter> B = {}\n  (A \\<union> B) \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)", "by (smt Un_empty inf_commute inf_sup_distrib2 sup_assoc sup_commute)"], ["proof (state)\nthis:\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n   (ind_in_set (B \\<union> C) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B)", "ultimately"], ["proof (chain)\npicking this:\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n   (ind_in_set (A \\<union> B) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n   (ind_in_set (B \\<union> C) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n   (ind_in_set (A \\<union> B) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n   (ind_in_set (B \\<union> C) ` B) =\n  nths xs (ind_in_set (A \\<union> B \\<union> C) ` B)\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n     (ind_in_set (A \\<union> B) ` B) =\n    nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` B)", "by auto"], ["proof (state)\nthis:\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (A \\<union> B)))\n   (ind_in_set (A \\<union> B) ` B) =\n  nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n   (ind_in_set (B \\<union> C) ` B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_assoc_three_C:\n  fixes A B C :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    and \"(A \\<union> B) \\<inter> C = {}\"\n  shows \"nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C))) (ind_in_set (B \\<union> C) ` C)\n    = nths xs (ind_in_set (A \\<union> B \\<union> C) ` C) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` C) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` C)", "using nths_assoc_three_A[of C B A xs] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>C \\<inter> B = {}; (C \\<union> B) \\<inter> A = {}\\<rbrakk>\n  \\<Longrightarrow> nths\n                     (nths xs\n                       (ind_in_set (C \\<union> B \\<union> A) `\n                        (C \\<union> B)))\n                     (ind_in_set (C \\<union> B) ` C) =\n                    nths xs (ind_in_set (C \\<union> B \\<union> A) ` C)\n  A \\<inter> B = {}\n  (A \\<union> B) \\<inter> C = {}\n\ngoal (1 subgoal):\n 1. nths (nths xs (ind_in_set (A \\<union> B \\<union> C) ` (B \\<union> C)))\n     (ind_in_set (B \\<union> C) ` C) =\n    nths xs (ind_in_set (A \\<union> B \\<union> C) ` C)", "by (smt Un_empty inf_commute inf_sup_distrib2 sup_assoc sup_commute)"], ["", "lemma valid_index_ind_in_set:\n  assumes \"is \\<lhd> nths dims A\" \"B \\<subseteq> A\"\n  shows \"nths is (ind_in_set A ` B) \\<lhd> nths dims B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths is (ind_in_set A ` B) \\<lhd> nths dims B", "apply (subst nths_reencode_eq[OF assms(2), symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths is (ind_in_set A ` B) \\<lhd> nths (nths dims A) (ind_in_set A ` B)", "apply (rule valid_index_nths)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is \\<lhd> nths dims A", "by (rule assms(1))"], ["", "lemma ind_in_set_id:\n  fixes A :: \"nat set\"\n  assumes \"finite A\"\n  shows \"ind_in_set A ` A = {0..< card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A ` A = {0..<card A}", "unfolding ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. card {i \\<in> A. i < x}) ` A = {0..<card A}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa. xa \\<in> A \\<Longrightarrow> card {i \\<in> A. i < xa} < card A\n 2. \\<And>x.\n       x < card A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa_ \\<in> A \\<Longrightarrow> card {i \\<in> A. i < xa_} < card A", "using assms lt_set_card_lt"], ["proof (prove)\nusing this:\n  finite A\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> card {y \\<in> ?A. y < ?x} < card ?A\n\ngoal (1 subgoal):\n 1. xa_ \\<in> A \\<Longrightarrow> card {i \\<in> A. i < xa_} < card A", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < card A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < card A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < card A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "assume x: \"x < card A\""], ["proof (state)\nthis:\n  x < card A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < card A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "have *: \"card {i \\<in> A. i < pick A x} = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < pick A x} = x", "apply (rule card_pick_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < card A", "by (rule x)"], ["proof (state)\nthis:\n  card {i \\<in> A. i < pick A x} = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < card A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "show \"x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "apply (subst *[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < pick A x}\n    \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A", "apply (rule imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pick A x \\<in> A", "apply (rule pick_in_set_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < card A", "by (rule x)"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. card {i \\<in> A. i < x}) ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_complement_ind_in_set:\n  fixes A B :: \"nat set\"\n  assumes \"A \\<inter> B = {}\"\n    \"card (A \\<union> B) = length xs\"\n  shows \"nths xs (- ind_in_set (A \\<union> B) ` A) = nths xs (ind_in_set (A \\<union> B) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs (- ind_in_set (A \\<union> B) ` A) =\n    nths xs (ind_in_set (A \\<union> B) ` B)", "apply (rule nths_split_complement_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ind_in_set (A \\<union> B) ` B \\<inter> ind_in_set (A \\<union> B) ` A =\n    {}\n 2. {0..<length xs}\n    \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union>\n                ind_in_set (A \\<union> B) ` A", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set (A \\<union> B) ` B \\<inter> ind_in_set (A \\<union> B) ` A =\n    {}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>xa \\<in> B;\n        ind_in_set (A \\<union> B) xa = ind_in_set (A \\<union> B) xb;\n        xb \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "using assms(1) ind_in_set_inj"], ["proof (prove)\nusing this:\n  A \\<inter> B = {}\n  \\<lbrakk>?a \\<in> ?A; ?b \\<in> ?A;\n   ind_in_set ?A ?a = ind_in_set ?A ?b\\<rbrakk>\n  \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>xa \\<in> B;\n        ind_in_set (A \\<union> B) xa = ind_in_set (A \\<union> B) xb;\n        xb \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis disjoint_iff_not_equal subsetCE sup_ge1 sup_ge2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length xs}\n    \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union>\n                ind_in_set (A \\<union> B) ` A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {0..<length xs}\n    \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union>\n                ind_in_set (A \\<union> B) ` A", "have *: \"ind_in_set (A \\<union> B) ` B \\<union> ind_in_set (A \\<union> B) ` A = ind_in_set (A \\<union> B) ` (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set (A \\<union> B) ` B \\<union> ind_in_set (A \\<union> B) ` A =\n    ind_in_set (A \\<union> B) ` (A \\<union> B)", "by auto"], ["proof (state)\nthis:\n  ind_in_set (A \\<union> B) ` B \\<union> ind_in_set (A \\<union> B) ` A =\n  ind_in_set (A \\<union> B) ` (A \\<union> B)\n\ngoal (1 subgoal):\n 1. {0..<length xs}\n    \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union>\n                ind_in_set (A \\<union> B) ` A", "show \"{0..<length xs} \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union> ind_in_set (A \\<union> B) ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<length xs}\n    \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union>\n                ind_in_set (A \\<union> B) ` A", "apply (auto simp add: * assms(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < length xs \\<Longrightarrow>\n       x \\<in> ind_in_set (A \\<union> B) ` (A \\<union> B)", "using ind_in_set_id"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> ind_in_set ?A ` ?A = {0..<card ?A}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x < length xs \\<Longrightarrow>\n       x \\<in> ind_in_set (A \\<union> B) ` (A \\<union> B)", "by (metis assms(2) atLeastLessThan_iff card.infinite not_le_imp_less not_less_zero)"], ["proof (state)\nthis:\n  {0..<length xs}\n  \\<subseteq> ind_in_set (A \\<union> B) ` B \\<union>\n              ind_in_set (A \\<union> B) ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_inj':\n  fixes A B :: \"nat set\"\n  assumes \"B \\<subseteq> A\"\n  shows \"inj_on (ind_in_set A) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set A) B", "proof (rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume x: \"x \\<in> B\" and y: \"y \\<in> B\" and eq: \"ind_in_set A x = ind_in_set A y\""], ["proof (state)\nthis:\n  x \\<in> B\n  y \\<in> B\n  ind_in_set A x = ind_in_set A y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have x': \"x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A", "using x assms"], ["proof (prove)\nusing this:\n  x \\<in> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by auto"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have y': \"y \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> A", "using y assms"], ["proof (prove)\nusing this:\n  y \\<in> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by auto"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        ind_in_set A x = ind_in_set A y\\<rbrakk>\n       \\<Longrightarrow> x = y", "show \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "by (rule ind_in_set_inj[OF x' y' eq])"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ind_in_set_less:\n  fixes x :: nat and A :: \"nat set\"\n  assumes \"finite A\" \"x \\<in> A\"\n  shows \"ind_in_set A x < card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set A x < card A", "unfolding ind_in_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i \\<in> A. i < x} < card A", "apply (rule psubset_card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite A\n 2. {i \\<in> A. i < x} \\<subset> A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. finite A\n 2. {i \\<in> A. i < x} \\<subset> A", "by auto"], ["", "lemma ptensor_mat_assoc:\n  assumes \"vars1 \\<inter> vars2 = {}\"\n    and \"(vars1 \\<union> vars2) \\<inter> vars3 = {}\"\n    and \"vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..< length dims}\"\n  shows \"ptensor_mat dims (vars1 \\<union> vars2) vars3 (ptensor_mat dims vars1 vars2 m1 m2) m3 =\n         ptensor_mat dims vars1 (vars2 \\<union> vars3) m1 (ptensor_mat dims vars2 vars3 m2 m3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2.ptensor_mat dims (vars1 \\<union> vars2) vars3\n     (partial_state2.ptensor_mat dims vars1 vars2 m1 m2) m3 =\n    partial_state2.ptensor_mat dims vars1 (vars2 \\<union> vars3) m1\n     (partial_state2.ptensor_mat dims vars2 vars3 m2 m3)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.ptensor_mat dims (vars1 \\<union> vars2) vars3\n     (partial_state2.ptensor_mat dims vars1 vars2 m1 m2) m3 =\n    partial_state2.ptensor_mat dims vars1 (vars2 \\<union> vars3) m1\n     (partial_state2.ptensor_mat dims vars2 vars3 m2 m3)", "interpret a: partial_state2 dims vars1 vars2"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars1 vars2", "by (unfold_locales, rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.ptensor_mat dims (vars1 \\<union> vars2) vars3\n     (a.ptensor_mat m1 m2) m3 =\n    partial_state2.ptensor_mat dims vars1 (vars2 \\<union> vars3) m1\n     (partial_state2.ptensor_mat dims vars2 vars3 m2 m3)", "interpret b: partial_state2 dims \"vars1 \\<union> vars2\" vars3"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 (vars1 \\<union> vars2) vars3", "by (unfold_locales, rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    partial_state2.ptensor_mat dims vars1 (vars2 \\<union> vars3) m1\n     (partial_state2.ptensor_mat dims vars2 vars3 m2 m3)", "interpret c: partial_state2 dims vars2 vars3"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars2 vars3", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars3 = {}", "using assms(2)"], ["proof (prove)\nusing this:\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars3 = {}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    partial_state2.ptensor_mat dims vars1 (vars2 \\<union> vars3) m1\n     (c.ptensor_mat m2 m3)", "interpret d: partial_state2 dims vars1 \"vars2 \\<union> vars3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars1 (vars2 \\<union> vars3)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have uassoc: \"vars1 \\<union> (vars2 \\<union> vars3) = vars1 \\<union> vars2 \\<union> vars3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<union> (vars2 \\<union> vars3) =\n    vars1 \\<union> vars2 \\<union> vars3", "by auto"], ["proof (state)\nthis:\n  vars1 \\<union> (vars2 \\<union> vars3) =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have **: \"{i. i < length dims \\<and> (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)} = vars1 \\<union> vars2 \\<union> vars3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length dims \\<and>\n        (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)} =\n    vars1 \\<union> vars2 \\<union> vars3", "using assms(3)"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. {i. i < length dims \\<and>\n        (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)} =\n    vars1 \\<union> vars2 \\<union> vars3", "by auto"], ["proof (state)\nthis:\n  {i. i < length dims \\<and>\n      (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)} =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have finite_union: \"finite (vars1 \\<union> vars2 \\<union> vars3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vars1 \\<union> vars2 \\<union> vars3)", "using assms(3)"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. finite (vars1 \\<union> vars2 \\<union> vars3)", "using subset_eq_atLeast0_lessThan_finite"], ["proof (prove)\nusing this:\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n  ?N \\<subseteq> {0..<?n} \\<Longrightarrow> finite ?N\n\ngoal (1 subgoal):\n 1. finite (vars1 \\<union> vars2 \\<union> vars3)", "by blast"], ["proof (state)\nthis:\n  finite (vars1 \\<union> vars2 \\<union> vars3)\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m1eq: \"digit_encode a.dims0 (digit_decode b.dims1 (nths (digit_encode b.dims0 i) b.vars1')) \n    = nths (digit_encode b.dims0 i) b.vars1'\" if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode a.dims0\n     (digit_decode b.dims1 (nths (digit_encode b.dims0 i) b.vars1')) =\n    nths (digit_encode b.dims0 i) b.vars1'", "unfolding a.dims0_def a.vars0_def b.dims1_def b.dims0_def b.vars0_def b.vars1'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode (nths dims (vars1 \\<union> vars2))\n     (digit_decode (nths dims (vars1 \\<union> vars2))\n       (nths\n         (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n         (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n          (vars1 \\<union> vars2)))) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "apply (subst digit_encode_decode)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) \\<lhd>\n    nths dims (vars1 \\<union> vars2)\n 2. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "apply (rule valid_index_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i \\<lhd>\n    nths dims (vars1 \\<union> vars2 \\<union> vars3)\n 2. vars1 \\<union> vars2 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3\n 3. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "apply (rule digit_encode_valid_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n 2. vars1 \\<union> vars2 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3\n 3. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "using that"], ["proof (prove)\nusing this:\n  i < state_sig.d b.dims0\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n 2. vars1 \\<union> vars2 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3\n 3. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "unfolding state_sig.d_def b.dims0_def b.vars0_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n 2. vars1 \\<union> vars2 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3\n 3. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  digit_encode a.dims0\n   (digit_decode b.dims1 (nths (digit_encode b.dims0 ?i1) b.vars1')) =\n  nths (digit_encode b.dims0 ?i1) b.vars1'\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m1index: \"partial_state.encode1 a.dims0 a.vars1' (partial_state.encode1 b.dims0 b.vars1' i) \n    = partial_state.encode1 d.dims0 d.vars1' i\" if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 a.dims0 a.vars1'\n     (partial_state.encode1 b.dims0 b.vars1' i) =\n    partial_state.encode1 d.dims0 d.vars1' i", "unfolding partial_state.encode1_def partial_state.dims1_def a.nths_vars1' d.nths_vars1' b.nths_vars1'"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode d.dims1\n     (nths\n       (digit_encode a.dims0\n         (digit_decode b.dims1 (nths (digit_encode b.dims0 i) b.vars1')))\n       a.vars1') =\n    digit_decode d.dims1 (nths (digit_encode d.dims0 i) d.vars1')", "apply (rule arg_cong[where f=\"digit_decode d.dims1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (digit_encode a.dims0\n       (digit_decode b.dims1 (nths (digit_encode b.dims0 i) b.vars1')))\n     a.vars1' =\n    nths (digit_encode d.dims0 i) d.vars1'", "apply (subst m1eq[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (digit_encode b.dims0 i) b.vars1') a.vars1' =\n    nths (digit_encode d.dims0 i) d.vars1'", "unfolding a.vars0_def a.vars1'_def b.dims0_def b.vars0_def b.vars1'_def d.dims0_def d.vars0_def d.vars1'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "using nths_assoc_three_A[OF assms(1-2)]"], ["proof (prove)\nusing this:\n  nths\n   (nths ?xs\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)))\n   (ind_in_set (vars1 \\<union> vars2) ` vars1) =\n  nths ?xs (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars1)\n\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "using uassoc"], ["proof (prove)\nusing this:\n  nths\n   (nths ?xs\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)))\n   (ind_in_set (vars1 \\<union> vars2) ` vars1) =\n  nths ?xs (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars1)\n  vars1 \\<union> (vars2 \\<union> vars3) =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  partial_state.encode1 a.dims0 a.vars1'\n   (partial_state.encode1 b.dims0 b.vars1' ?i1) =\n  partial_state.encode1 d.dims0 d.vars1' ?i1\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m2eq1: \"digit_encode a.dims0 (digit_decode (nths b.dims0 b.vars1') (nths (digit_encode b.dims0 i) b.vars1'))\n    = nths (digit_encode b.dims0 i) b.vars1'\"\n    if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode a.dims0\n     (digit_decode (nths b.dims0 b.vars1')\n       (nths (digit_encode b.dims0 i) b.vars1')) =\n    nths (digit_encode b.dims0 i) b.vars1'", "unfolding a.dims0_def a.vars0_def b.nths_vars1' b.dims1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode (nths dims (vars1 \\<union> vars2))\n     (digit_decode (nths dims (vars1 \\<union> vars2))\n       (nths (digit_encode b.dims0 i) b.vars1')) =\n    nths (digit_encode b.dims0 i) b.vars1'", "apply (subst digit_encode_decode)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths (digit_encode b.dims0 i) b.vars1' \\<lhd>\n    nths dims (vars1 \\<union> vars2)\n 2. nths (digit_encode b.dims0 i) b.vars1' =\n    nths (digit_encode b.dims0 i) b.vars1'", "unfolding b.vars1'_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths (digit_encode b.dims0 i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2)) \\<lhd>\n    nths dims (vars1 \\<union> vars2)\n 2. nths (digit_encode b.dims0 i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2)) =\n    nths (digit_encode b.dims0 i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2))", "apply (rule valid_index_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. digit_encode b.dims0 i \\<lhd> nths dims b.vars0\n 2. vars1 \\<union> vars2 \\<subseteq> b.vars0\n 3. nths (digit_encode b.dims0 i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2)) =\n    nths (digit_encode b.dims0 i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2))", "unfolding b.dims0_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. digit_encode (nths dims b.vars0) i \\<lhd> nths dims b.vars0\n 2. vars1 \\<union> vars2 \\<subseteq> b.vars0\n 3. nths (digit_encode (nths dims b.vars0) i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims b.vars0) i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2))", "apply (rule digit_encode_valid_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. i < prod_list (nths dims b.vars0)\n 2. vars1 \\<union> vars2 \\<subseteq> b.vars0\n 3. nths (digit_encode (nths dims b.vars0) i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims b.vars0) i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2))", "using that"], ["proof (prove)\nusing this:\n  i < state_sig.d b.dims0\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims b.vars0)\n 2. vars1 \\<union> vars2 \\<subseteq> b.vars0\n 3. nths (digit_encode (nths dims b.vars0) i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims b.vars0) i)\n     (ind_in_set b.vars0 ` (vars1 \\<union> vars2))", "unfolding state_sig.d_def b.dims0_def b.vars0_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n 2. vars1 \\<union> vars2 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3\n 3. nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2))", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  digit_encode a.dims0\n   (digit_decode (nths b.dims0 b.vars1')\n     (nths (digit_encode b.dims0 ?i1) b.vars1')) =\n  nths (digit_encode b.dims0 ?i1) b.vars1'\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m2eq2: \"digit_encode c.dims0 (digit_decode (nths d.dims0 (- d.vars1')) (nths (digit_encode d.dims0 i) (- d.vars1')))\n    = nths (digit_encode d.dims0 i) (- d.vars1')\"\n    if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode c.dims0\n     (digit_decode (nths d.dims0 (- d.vars1'))\n       (nths (digit_encode d.dims0 i) (- d.vars1'))) =\n    nths (digit_encode d.dims0 i) (- d.vars1')", "unfolding c.dims0_def c.vars0_def d.nths_vars2' d.dims2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode (nths dims (vars2 \\<union> vars3))\n     (digit_decode (nths dims (vars2 \\<union> vars3))\n       (nths (digit_encode d.dims0 i) (- d.vars1'))) =\n    nths (digit_encode d.dims0 i) (- d.vars1')", "apply (subst digit_encode_decode)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths (digit_encode d.dims0 i) (- d.vars1') \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 2. nths (digit_encode d.dims0 i) (- d.vars1') =\n    nths (digit_encode d.dims0 i) (- d.vars1')", "unfolding d.vars1'_def d.vars0_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 2. nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (4 subgoals):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}\n 2. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length (digit_encode d.dims0 i)\n 3. nths (digit_encode d.dims0 i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n      (vars2 \\<union> vars3)) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 4. nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length (digit_encode d.dims0 i)\n 2. nths (digit_encode d.dims0 i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n      (vars2 \\<union> vars3)) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 3. nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length (digit_encode d.dims0 i)", "apply (auto simp only: length_digit_encode d.dims0_def d.vars0_def length_nths)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    card\n     {i. i < length dims \\<and>\n         i \\<in> vars1 \\<union> (vars2 \\<union> vars3)}", "by (auto simp add: ** uassoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths (digit_encode d.dims0 i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n      (vars2 \\<union> vars3)) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 2. nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (rule valid_index_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. digit_encode d.dims0 i \\<lhd>\n    nths dims (vars1 \\<union> (vars2 \\<union> vars3))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths (digit_encode d.dims0 i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "unfolding d.dims0_def d.vars0_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n     i \\<lhd>\n    nths dims (vars1 \\<union> (vars2 \\<union> vars3))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (rule digit_encode_valid_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "using that"], ["proof (prove)\nusing this:\n  i < state_sig.d b.dims0\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "unfolding state_sig.d_def b.dims0_def b.vars0_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "using uassoc"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n  vars1 \\<union> (vars2 \\<union> vars3) =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  digit_encode c.dims0\n   (digit_decode (nths d.dims0 (- d.vars1'))\n     (nths (digit_encode d.dims0 ?i1) (- d.vars1'))) =\n  nths (digit_encode d.dims0 ?i1) (- d.vars1')\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m2index: \"partial_state.encode2 a.dims0 a.vars1' (partial_state.encode1 b.dims0 b.vars1' i) =\n    partial_state.encode1 c.dims0 c.vars1' (partial_state.encode2 d.dims0 d.vars1' i)\"\n    if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 a.dims0 a.vars1'\n     (partial_state.encode1 b.dims0 b.vars1' i) =\n    partial_state.encode1 c.dims0 c.vars1'\n     (partial_state.encode2 d.dims0 d.vars1' i)", "unfolding partial_state.encode2_def partial_state.encode1_def\n      partial_state.dims2_def a.nths_vars2' partial_state.dims1_def c.nths_vars1'\n      a.dims2_def c.dims1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode (nths dims vars2)\n     (nths\n       (digit_encode a.dims0\n         (digit_decode (nths b.dims0 b.vars1')\n           (nths (digit_encode b.dims0 i) b.vars1')))\n       (- a.vars1')) =\n    digit_decode (nths dims vars2)\n     (nths\n       (digit_encode c.dims0\n         (digit_decode (nths d.dims0 (- d.vars1'))\n           (nths (digit_encode d.dims0 i) (- d.vars1'))))\n       c.vars1')", "apply (rule arg_cong[where f=\"digit_decode (nths dims vars2)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (digit_encode a.dims0\n       (digit_decode (nths b.dims0 b.vars1')\n         (nths (digit_encode b.dims0 i) b.vars1')))\n     (- a.vars1') =\n    nths\n     (digit_encode c.dims0\n       (digit_decode (nths d.dims0 (- d.vars1'))\n         (nths (digit_encode d.dims0 i) (- d.vars1'))))\n     c.vars1'", "apply (subst m2eq1[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (digit_encode b.dims0 i) b.vars1') (- a.vars1') =\n    nths\n     (digit_encode c.dims0\n       (digit_decode (nths d.dims0 (- d.vars1'))\n         (nths (digit_encode d.dims0 i) (- d.vars1'))))\n     c.vars1'", "apply (subst m2eq2[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (digit_encode b.dims0 i) b.vars1') (- a.vars1') =\n    nths (nths (digit_encode d.dims0 i) (- d.vars1')) c.vars1'", "unfolding b.dims0_def b.vars0_def b.vars1'_def a.vars1'_def a.vars0_def\n      d.dims0_def d.vars0_def d.vars1'_def c.vars1'_def c.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (- ind_in_set (vars1 \\<union> vars2) ` vars1) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. vars1 \\<inter> vars2 = {}\n 2. card (vars1 \\<union> vars2) =\n    length\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n 3. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> vars2 = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> vars2 = {}", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (vars1 \\<union> vars2) =\n    length\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n 2. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> vars2) =\n    length\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))", "apply (auto simp only: length_nths length_digit_encode)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> vars2) =\n    card\n     {i. i < card\n              {i. i < length dims \\<and>\n                  i \\<in> vars1 \\<union> vars2 \\<union> vars3} \\<and>\n         i \\<in> ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n                 (vars1 \\<union> vars2)}", "apply (rule bij_betw_same_card[where f=\"ind_in_set (vars1 \\<union> vars2 \\<union> vars3)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars1 \\<union> vars2)\n     {i. i < card\n              {i. i < length dims \\<and>\n                  i \\<in> vars1 \\<union> vars2 \\<union> vars3} \\<and>\n         i \\<in> ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n                 (vars1 \\<union> vars2)}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars1 \\<union> vars2) \\<and>\n    ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n    (vars1 \\<union> vars2) =\n    {i. i < card\n             {i. i < length dims \\<and>\n                 i \\<in> vars1 \\<union> vars2 \\<union> vars3} \\<and>\n        i \\<in> ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n                (vars1 \\<union> vars2)}", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj_on (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars1 \\<union> vars2)\n 2. ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n    (vars1 \\<union> vars2) =\n    {i. i < card\n             {i. i < length dims \\<and>\n                 i \\<in> vars1 \\<union> vars2 \\<union> vars3} \\<and>\n        i \\<in> ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n                (vars1 \\<union> vars2)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars1 \\<union> vars2)", "apply (rule ind_in_set_inj')"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<union> vars2 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n    (vars1 \\<union> vars2) =\n    {i. i < card\n             {i. i < length dims \\<and>\n                 i \\<in> vars1 \\<union> vars2 \\<union> vars3} \\<and>\n        i \\<in> ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n                (vars1 \\<union> vars2)}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> vars1 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}\n 2. \\<And>xa.\n       xa \\<in> vars2 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}", "using finite_union"], ["proof (prove)\nusing this:\n  finite (vars1 \\<union> vars2 \\<union> vars3)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> vars1 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}\n 2. \\<And>xa.\n       xa \\<in> vars2 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}", "by (auto simp add: ** intro: ind_in_set_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}\n 2. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n 3. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n 2. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)", "apply (auto simp only: length_digit_encode length_nths)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    card\n     {i. i < length dims \\<and>\n         i \\<in> vars1 \\<union> (vars2 \\<union> vars3)}", "by (auto simp add: ** uassoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "using nths_assoc_three_B[OF assms(1-2)] uassoc"], ["proof (prove)\nusing this:\n  nths\n   (nths ?xs\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars1 \\<union> vars2)))\n   (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n  nths\n   (nths ?xs\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars2 \\<union> vars3)))\n   (ind_in_set (vars2 \\<union> vars3) ` vars2)\n  vars1 \\<union> (vars2 \\<union> vars3) =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n       (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2)))\n     (ind_in_set (vars1 \\<union> vars2) ` vars2) =\n    nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars2)", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  partial_state.encode2 a.dims0 a.vars1'\n   (partial_state.encode1 b.dims0 b.vars1' ?i1) =\n  partial_state.encode1 c.dims0 c.vars1'\n   (partial_state.encode2 d.dims0 d.vars1' ?i1)\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m3eq: \"digit_encode c.dims0 (digit_decode d.dims2 (nths (digit_encode d.dims0 i) (- d.vars1')))\n    = nths (digit_encode d.dims0 i) (- d.vars1')\" if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode c.dims0\n     (digit_decode d.dims2 (nths (digit_encode d.dims0 i) (- d.vars1'))) =\n    nths (digit_encode d.dims0 i) (- d.vars1')", "unfolding c.dims0_def c.vars0_def d.dims2_def d.dims0_def d.vars1'_def d.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_encode (nths dims (vars2 \\<union> vars3))\n     (digit_decode (nths dims (vars2 \\<union> vars3))\n       (nths\n         (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n           i)\n         (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1))) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (subst digit_encode_decode)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 2. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (4 subgoals):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}\n 2. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n      (vars2 \\<union> vars3)) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 4. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n 2. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n      (vars2 \\<union> vars3)) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)", "apply (auto simp only: length_digit_encode length_nths)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    card\n     {i. i < length dims \\<and>\n         i \\<in> vars1 \\<union> (vars2 \\<union> vars3)}", "by (auto simp add: ** uassoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n      (vars2 \\<union> vars3)) \\<lhd>\n    nths dims (vars2 \\<union> vars3)\n 2. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (rule valid_index_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n     i \\<lhd>\n    nths dims (vars1 \\<union> (vars2 \\<union> vars3))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "apply (rule digit_encode_valid_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "using that"], ["proof (prove)\nusing this:\n  i < state_sig.d b.dims0\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "unfolding state_sig.d_def b.dims0_def b.vars0_def"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "using uassoc"], ["proof (prove)\nusing this:\n  i < prod_list (nths dims (vars1 \\<union> vars2 \\<union> vars3))\n  vars1 \\<union> (vars2 \\<union> vars3) =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (3 subgoals):\n 1. i < prod_list (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> (vars2 \\<union> vars3)\n 3. nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1) =\n    nths\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n     (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1)", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  digit_encode c.dims0\n   (digit_decode d.dims2 (nths (digit_encode d.dims0 ?i1) (- d.vars1'))) =\n  nths (digit_encode d.dims0 ?i1) (- d.vars1')\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "have m3index: \"partial_state.encode2 c.dims0 c.vars1' (partial_state.encode2 d.dims0 d.vars1' i) =\n    partial_state.encode2 b.dims0 b.vars1' i\"\n    if \"i < state_sig.d b.dims0\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 c.dims0 c.vars1'\n     (partial_state.encode2 d.dims0 d.vars1' i) =\n    partial_state.encode2 b.dims0 b.vars1' i", "unfolding partial_state.encode2_def partial_state.dims2_def c.nths_vars2' d.nths_vars2' b.nths_vars2'"], ["proof (prove)\ngoal (1 subgoal):\n 1. digit_decode c.dims2\n     (nths\n       (digit_encode c.dims0\n         (digit_decode d.dims2\n           (nths (digit_encode d.dims0 i) (- d.vars1'))))\n       (- c.vars1')) =\n    digit_decode c.dims2 (nths (digit_encode b.dims0 i) (- b.vars1'))", "apply (rule arg_cong[where f=\"digit_decode c.dims2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (digit_encode c.dims0\n       (digit_decode d.dims2 (nths (digit_encode d.dims0 i) (- d.vars1'))))\n     (- c.vars1') =\n    nths (digit_encode b.dims0 i) (- b.vars1')", "apply (subst m3eq[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (nths (digit_encode d.dims0 i) (- d.vars1')) (- c.vars1') =\n    nths (digit_encode b.dims0 i) (- b.vars1')", "unfolding d.dims0_def d.vars0_def d.vars1'_def c.vars1'_def b.dims0_def b.vars1'_def b.vars0_def c.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (- ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) ` vars1))\n     (- ind_in_set (vars2 \\<union> vars3) ` vars2) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}\n 2. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n 3. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (- ind_in_set (vars2 \\<union> vars3) ` vars2) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n 2. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (- ind_in_set (vars2 \\<union> vars3) ` vars2) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)", "apply (auto simp only: length_digit_encode length_nths)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> (vars2 \\<union> vars3)) =\n    card\n     {i. i < length dims \\<and>\n         i \\<in> vars1 \\<union> (vars2 \\<union> vars3)}", "by (auto simp add: ** uassoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (- ind_in_set (vars2 \\<union> vars3) ` vars2) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. vars2 \\<inter> vars3 = {}\n 2. card (vars2 \\<union> vars3) =\n    length\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n 3. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars3 = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars3 = {}", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (vars2 \\<union> vars3) =\n    length\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n 2. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars2 \\<union> vars3) =\n    length\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))", "apply (auto simp only: length_nths length_digit_encode)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars2 \\<union> vars3) =\n    card\n     {i. i < card\n              {i. i < length dims \\<and>\n                  i \\<in> vars1 \\<union> (vars2 \\<union> vars3)} \\<and>\n         i \\<in> ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n                 (vars2 \\<union> vars3)}", "apply (rule bij_betw_same_card[where f=\"ind_in_set (vars1 \\<union> vars2 \\<union> vars3)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars2 \\<union> vars3)\n     {i. i < card\n              {i. i < length dims \\<and>\n                  i \\<in> vars1 \\<union> (vars2 \\<union> vars3)} \\<and>\n         i \\<in> ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n                 (vars2 \\<union> vars3)}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars2 \\<union> vars3) \\<and>\n    ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n    (vars2 \\<union> vars3) =\n    {i. i < card\n             {i. i < length dims \\<and>\n                 i \\<in> vars1 \\<union> (vars2 \\<union> vars3)} \\<and>\n        i \\<in> ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n                (vars2 \\<union> vars3)}", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj_on (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars2 \\<union> vars3)\n 2. ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n    (vars2 \\<union> vars3) =\n    {i. i < card\n             {i. i < length dims \\<and>\n                 i \\<in> vars1 \\<union> (vars2 \\<union> vars3)} \\<and>\n        i \\<in> ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n                (vars2 \\<union> vars3)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (ind_in_set (vars1 \\<union> vars2 \\<union> vars3))\n     (vars2 \\<union> vars3)", "apply (rule ind_in_set_inj')"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<union> vars3 \\<subseteq> vars1 \\<union> vars2 \\<union> vars3", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n    (vars2 \\<union> vars3) =\n    {i. i < card\n             {i. i < length dims \\<and>\n                 i \\<in> vars1 \\<union> (vars2 \\<union> vars3)} \\<and>\n        i \\<in> ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n                (vars2 \\<union> vars3)}", "apply (auto simp add: uassoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> vars2 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}\n 2. \\<And>xa.\n       xa \\<in> vars3 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}", "using finite_union"], ["proof (prove)\nusing this:\n  finite (vars1 \\<union> vars2 \\<union> vars3)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> vars2 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}\n 2. \\<And>xa.\n       xa \\<in> vars3 \\<Longrightarrow>\n       ind_in_set (vars1 \\<union> vars2 \\<union> vars3) xa\n       < card\n          {i. i < length dims \\<and>\n              (i \\<in> vars1 \\<or> i \\<in> vars2 \\<or> i \\<in> vars3)}", "by (auto simp add: ** intro: ind_in_set_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (- ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n        (vars1 \\<union> vars2))", "apply (subst nths_complement_ind_in_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (vars1 \\<union> vars2) \\<inter> vars3 = {}\n 2. card (vars1 \\<union> vars2 \\<union> vars3) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n 3. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars3)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vars1 \\<union> vars2) \\<inter> vars3 = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. (vars1 \\<union> vars2) \\<inter> vars3 = {}", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (vars1 \\<union> vars2 \\<union> vars3) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n 2. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars3)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> vars2 \\<union> vars3) =\n    length\n     (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)", "apply (auto simp only: length_nths length_digit_encode)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars1 \\<union> vars2 \\<union> vars3) =\n    card\n     {i. i < length dims \\<and> i \\<in> vars1 \\<union> vars2 \\<union> vars3}", "by (auto simp add: ** uassoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars3)", "using nths_assoc_three_C[OF assms(1-2)] uassoc"], ["proof (prove)\nusing this:\n  nths\n   (nths ?xs\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) `\n      (vars2 \\<union> vars3)))\n   (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n  nths ?xs (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars3)\n  vars1 \\<union> (vars2 \\<union> vars3) =\n  vars1 \\<union> vars2 \\<union> vars3\n\ngoal (1 subgoal):\n 1. nths\n     (nths\n       (digit_encode (nths dims (vars1 \\<union> (vars2 \\<union> vars3))) i)\n       (ind_in_set (vars1 \\<union> (vars2 \\<union> vars3)) `\n        (vars2 \\<union> vars3)))\n     (ind_in_set (vars2 \\<union> vars3) ` vars3) =\n    nths (digit_encode (nths dims (vars1 \\<union> vars2 \\<union> vars3)) i)\n     (ind_in_set (vars1 \\<union> vars2 \\<union> vars3) ` vars3)", "by auto"], ["proof (state)\nthis:\n  ?i1 < state_sig.d b.dims0 \\<Longrightarrow>\n  partial_state.encode2 c.dims0 c.vars1'\n   (partial_state.encode2 d.dims0 d.vars1' ?i1) =\n  partial_state.encode2 b.dims0 b.vars1' ?i1\n\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n    d.ptensor_mat m1 (c.ptensor_mat m2 m3)", "unfolding a.ptensor_mat_def b.ptensor_mat_def c.ptensor_mat_def d.ptensor_mat_def partial_state.tensor_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (state_sig.d b.dims0) (state_sig.d b.dims0)\n     (\\<lambda>(i, j).\n         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n          (\\<lambda>(i, j).\n              m1 $$\n              (partial_state.encode1 a.dims0 a.vars1' i,\n               partial_state.encode1 a.dims0 a.vars1' j) *\n              m2 $$\n              (partial_state.encode2 a.dims0 a.vars1' i,\n               partial_state.encode2 a.dims0 a.vars1' j)) $$\n         (partial_state.encode1 b.dims0 b.vars1' i,\n          partial_state.encode1 b.dims0 b.vars1' j) *\n         m3 $$\n         (partial_state.encode2 b.dims0 b.vars1' i,\n          partial_state.encode2 b.dims0 b.vars1' j)) =\n    mat (state_sig.d d.dims0) (state_sig.d d.dims0)\n     (\\<lambda>(i, j).\n         m1 $$\n         (partial_state.encode1 d.dims0 d.vars1' i,\n          partial_state.encode1 d.dims0 d.vars1' j) *\n         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n          (\\<lambda>(i, j).\n              m2 $$\n              (partial_state.encode1 c.dims0 c.vars1' i,\n               partial_state.encode1 c.dims0 c.vars1' j) *\n              m3 $$\n              (partial_state.encode2 c.dims0 c.vars1' i,\n               partial_state.encode2 c.dims0 c.vars1' j)) $$\n         (partial_state.encode2 d.dims0 d.vars1' i,\n          partial_state.encode2 d.dims0 d.vars1' j))", "apply (rule cong_mat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. state_sig.d b.dims0 = state_sig.d d.dims0\n 2. state_sig.d b.dims0 = state_sig.d d.dims0\n 3. \\<And>i j.\n       \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n       \\<Longrightarrow> (case (i, j) of\n                          (i, j) \\<Rightarrow>\n                            mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                             (\\<lambda>(i, j).\n                                 m1 $$\n                                 (partial_state.encode1 a.dims0 a.vars1' i,\n                                  partial_state.encode1 a.dims0 a.vars1'\n                                   j) *\n                                 m2 $$\n                                 (partial_state.encode2 a.dims0 a.vars1' i,\n                                  partial_state.encode2 a.dims0 a.vars1'\n                                   j)) $$\n                            (partial_state.encode1 b.dims0 b.vars1' i,\n                             partial_state.encode1 b.dims0 b.vars1' j) *\n                            m3 $$\n                            (partial_state.encode2 b.dims0 b.vars1' i,\n                             partial_state.encode2 b.dims0 b.vars1' j)) =\n                         (case (i, j) of\n                          (i, j) \\<Rightarrow>\n                            m1 $$\n                            (partial_state.encode1 d.dims0 d.vars1' i,\n                             partial_state.encode1 d.dims0 d.vars1' j) *\n                            mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                             (\\<lambda>(i, j).\n                                 m2 $$\n                                 (partial_state.encode1 c.dims0 c.vars1' i,\n                                  partial_state.encode1 c.dims0 c.vars1'\n                                   j) *\n                                 m3 $$\n                                 (partial_state.encode2 c.dims0 c.vars1' i,\n                                  partial_state.encode2 c.dims0 c.vars1'\n                                   j)) $$\n                            (partial_state.encode2 d.dims0 d.vars1' i,\n                             partial_state.encode2 d.dims0 d.vars1' j))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d b.dims0 = state_sig.d d.dims0", "unfolding b.dims0_def d.dims0_def b.vars0_def d.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d (nths dims (vars1 \\<union> vars2 \\<union> vars3)) =\n    state_sig.d (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))", "apply (subgoal_tac \"vars1 \\<union> vars2 \\<union> vars3 = vars1 \\<union> (vars2 \\<union> vars3)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. vars1 \\<union> vars2 \\<union> vars3 =\n    vars1 \\<union> (vars2 \\<union> vars3) \\<Longrightarrow>\n    state_sig.d (nths dims (vars1 \\<union> vars2 \\<union> vars3)) =\n    state_sig.d (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars1 \\<union> vars2 \\<union> vars3 =\n    vars1 \\<union> (vars2 \\<union> vars3)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. state_sig.d b.dims0 = state_sig.d d.dims0\n 2. \\<And>i j.\n       \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n       \\<Longrightarrow> (case (i, j) of\n                          (i, j) \\<Rightarrow>\n                            mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                             (\\<lambda>(i, j).\n                                 m1 $$\n                                 (partial_state.encode1 a.dims0 a.vars1' i,\n                                  partial_state.encode1 a.dims0 a.vars1'\n                                   j) *\n                                 m2 $$\n                                 (partial_state.encode2 a.dims0 a.vars1' i,\n                                  partial_state.encode2 a.dims0 a.vars1'\n                                   j)) $$\n                            (partial_state.encode1 b.dims0 b.vars1' i,\n                             partial_state.encode1 b.dims0 b.vars1' j) *\n                            m3 $$\n                            (partial_state.encode2 b.dims0 b.vars1' i,\n                             partial_state.encode2 b.dims0 b.vars1' j)) =\n                         (case (i, j) of\n                          (i, j) \\<Rightarrow>\n                            m1 $$\n                            (partial_state.encode1 d.dims0 d.vars1' i,\n                             partial_state.encode1 d.dims0 d.vars1' j) *\n                            mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                             (\\<lambda>(i, j).\n                                 m2 $$\n                                 (partial_state.encode1 c.dims0 c.vars1' i,\n                                  partial_state.encode1 c.dims0 c.vars1'\n                                   j) *\n                                 m3 $$\n                                 (partial_state.encode2 c.dims0 c.vars1' i,\n                                  partial_state.encode2 c.dims0 c.vars1'\n                                   j)) $$\n                            (partial_state.encode2 d.dims0 d.vars1' i,\n                             partial_state.encode2 d.dims0 d.vars1' j))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d b.dims0 = state_sig.d d.dims0", "unfolding b.dims0_def d.dims0_def b.vars0_def d.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_sig.d (nths dims (vars1 \\<union> vars2 \\<union> vars3)) =\n    state_sig.d (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))", "apply (subgoal_tac \"vars1 \\<union> vars2 \\<union> vars3 = vars1 \\<union> (vars2 \\<union> vars3)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. vars1 \\<union> vars2 \\<union> vars3 =\n    vars1 \\<union> (vars2 \\<union> vars3) \\<Longrightarrow>\n    state_sig.d (nths dims (vars1 \\<union> vars2 \\<union> vars3)) =\n    state_sig.d (nths dims (vars1 \\<union> (vars2 \\<union> vars3)))\n 2. vars1 \\<union> vars2 \\<union> vars3 =\n    vars1 \\<union> (vars2 \\<union> vars3)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n       \\<Longrightarrow> (case (i, j) of\n                          (i, j) \\<Rightarrow>\n                            mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                             (\\<lambda>(i, j).\n                                 m1 $$\n                                 (partial_state.encode1 a.dims0 a.vars1' i,\n                                  partial_state.encode1 a.dims0 a.vars1'\n                                   j) *\n                                 m2 $$\n                                 (partial_state.encode2 a.dims0 a.vars1' i,\n                                  partial_state.encode2 a.dims0 a.vars1'\n                                   j)) $$\n                            (partial_state.encode1 b.dims0 b.vars1' i,\n                             partial_state.encode1 b.dims0 b.vars1' j) *\n                            m3 $$\n                            (partial_state.encode2 b.dims0 b.vars1' i,\n                             partial_state.encode2 b.dims0 b.vars1' j)) =\n                         (case (i, j) of\n                          (i, j) \\<Rightarrow>\n                            m1 $$\n                            (partial_state.encode1 d.dims0 d.vars1' i,\n                             partial_state.encode1 d.dims0 d.vars1' j) *\n                            mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                             (\\<lambda>(i, j).\n                                 m2 $$\n                                 (partial_state.encode1 c.dims0 c.vars1' i,\n                                  partial_state.encode1 c.dims0 c.vars1'\n                                   j) *\n                                 m3 $$\n                                 (partial_state.encode2 c.dims0 c.vars1' i,\n                                  partial_state.encode2 c.dims0 c.vars1'\n                                   j)) $$\n                            (partial_state.encode2 d.dims0 d.vars1' i,\n                             partial_state.encode2 d.dims0 d.vars1' j))", "subgoal for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "assume lti: \"i < state_sig.d b.dims0\" and ltj: \"j < state_sig.d b.dims0\""], ["proof (state)\nthis:\n  i < state_sig.d b.dims0\n  j < state_sig.d b.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have lti': \"i < state_sig.d d.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < state_sig.d d.dims0", "using \\<open>state_sig.d b.dims0 = state_sig.d d.dims0\\<close> lti"], ["proof (prove)\nusing this:\n  state_sig.d b.dims0 = state_sig.d d.dims0\n  i < state_sig.d b.dims0\n\ngoal (1 subgoal):\n 1. i < state_sig.d d.dims0", "by auto"], ["proof (state)\nthis:\n  i < state_sig.d d.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have ltj': \"j < state_sig.d d.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < state_sig.d d.dims0", "using \\<open>state_sig.d b.dims0 = state_sig.d d.dims0\\<close> ltj"], ["proof (prove)\nusing this:\n  state_sig.d b.dims0 = state_sig.d d.dims0\n  j < state_sig.d b.dims0\n\ngoal (1 subgoal):\n 1. j < state_sig.d d.dims0", "by auto"], ["proof (state)\nthis:\n  j < state_sig.d d.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have eq1: \"partial_state.d2 d.dims0 d.vars1' = state_sig.d c.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.d2 d.dims0 d.vars1' = state_sig.d c.dims0", "unfolding partial_state.d2_def partial_state.dims2_def d.nths_vars2'\n          d.dims2_def state_sig.d_def c.dims0_def c.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths dims (vars2 \\<union> vars3)) =\n    prod_list (nths dims (vars2 \\<union> vars3))", "by auto"], ["proof (state)\nthis:\n  partial_state.d2 d.dims0 d.vars1' = state_sig.d c.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have eq2: \"partial_state.d1 b.dims0 b.vars1' = state_sig.d a.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.d1 b.dims0 b.vars1' = state_sig.d a.dims0", "unfolding partial_state.d1_def partial_state.dims1_def b.nths_vars1'\n          b.dims1_def state_sig.d_def a.dims0_def a.vars0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (nths dims (vars1 \\<union> vars2)) =\n    prod_list (nths dims (vars1 \\<union> vars2))", "by auto"], ["proof (state)\nthis:\n  partial_state.d1 b.dims0 b.vars1' = state_sig.d a.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have lt1: \"partial_state.encode2 d.dims0 d.vars1' i < state_sig.d c.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 d.dims0 d.vars1' i < state_sig.d c.dims0", "using partial_state.encode2_lt[OF lti', where vars=d.vars1'] eq1"], ["proof (prove)\nusing this:\n  partial_state.encode2 d.dims0 d.vars1' i\n  < partial_state.d2 d.dims0 d.vars1'\n  partial_state.d2 d.dims0 d.vars1' = state_sig.d c.dims0\n\ngoal (1 subgoal):\n 1. partial_state.encode2 d.dims0 d.vars1' i < state_sig.d c.dims0", "by auto"], ["proof (state)\nthis:\n  partial_state.encode2 d.dims0 d.vars1' i < state_sig.d c.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have lt2: \"partial_state.encode2 d.dims0 d.vars1' j < state_sig.d c.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode2 d.dims0 d.vars1' j < state_sig.d c.dims0", "using partial_state.encode2_lt[OF ltj', where vars=d.vars1'] eq1"], ["proof (prove)\nusing this:\n  partial_state.encode2 d.dims0 d.vars1' j\n  < partial_state.d2 d.dims0 d.vars1'\n  partial_state.d2 d.dims0 d.vars1' = state_sig.d c.dims0\n\ngoal (1 subgoal):\n 1. partial_state.encode2 d.dims0 d.vars1' j < state_sig.d c.dims0", "by auto"], ["proof (state)\nthis:\n  partial_state.encode2 d.dims0 d.vars1' j < state_sig.d c.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have lt3: \"partial_state.encode1 b.dims0 b.vars1' i < state_sig.d a.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 b.dims0 b.vars1' i < state_sig.d a.dims0", "using partial_state.encode1_lt[OF lti, where vars=b.vars1'] eq2"], ["proof (prove)\nusing this:\n  partial_state.encode1 b.dims0 b.vars1' i\n  < partial_state.d1 b.dims0 b.vars1'\n  partial_state.d1 b.dims0 b.vars1' = state_sig.d a.dims0\n\ngoal (1 subgoal):\n 1. partial_state.encode1 b.dims0 b.vars1' i < state_sig.d a.dims0", "by auto"], ["proof (state)\nthis:\n  partial_state.encode1 b.dims0 b.vars1' i < state_sig.d a.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "have lt4: \"partial_state.encode1 b.dims0 b.vars1' j < state_sig.d a.dims0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state.encode1 b.dims0 b.vars1' j < state_sig.d a.dims0", "using partial_state.encode1_lt[OF ltj, where vars=b.vars1'] eq2"], ["proof (prove)\nusing this:\n  partial_state.encode1 b.dims0 b.vars1' j\n  < partial_state.d1 b.dims0 b.vars1'\n  partial_state.d1 b.dims0 b.vars1' = state_sig.d a.dims0\n\ngoal (1 subgoal):\n 1. partial_state.encode1 b.dims0 b.vars1' j < state_sig.d a.dims0", "by auto"], ["proof (state)\nthis:\n  partial_state.encode1 b.dims0 b.vars1' j < state_sig.d a.dims0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < state_sig.d b.dims0; j < state_sig.d b.dims0\\<rbrakk>\n    \\<Longrightarrow> (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n                          (\\<lambda>(i, j).\n                              m1 $$\n                              (partial_state.encode1 a.dims0 a.vars1' i,\n                               partial_state.encode1 a.dims0 a.vars1' j) *\n                              m2 $$\n                              (partial_state.encode2 a.dims0 a.vars1' i,\n                               partial_state.encode2 a.dims0 a.vars1' j)) $$\n                         (partial_state.encode1 b.dims0 b.vars1' i,\n                          partial_state.encode1 b.dims0 b.vars1' j) *\n                         m3 $$\n                         (partial_state.encode2 b.dims0 b.vars1' i,\n                          partial_state.encode2 b.dims0 b.vars1' j)) =\n                      (case (i, j) of\n                       (i, j) \\<Rightarrow>\n                         m1 $$\n                         (partial_state.encode1 d.dims0 d.vars1' i,\n                          partial_state.encode1 d.dims0 d.vars1' j) *\n                         mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n                          (\\<lambda>(i, j).\n                              m2 $$\n                              (partial_state.encode1 c.dims0 c.vars1' i,\n                               partial_state.encode1 c.dims0 c.vars1' j) *\n                              m3 $$\n                              (partial_state.encode2 c.dims0 c.vars1' i,\n                               partial_state.encode2 c.dims0 c.vars1' j)) $$\n                         (partial_state.encode2 d.dims0 d.vars1' i,\n                          partial_state.encode2 d.dims0 d.vars1' j))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (i, j) of\n     (i, j) \\<Rightarrow>\n       mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n        (\\<lambda>(i, j).\n            m1 $$\n            (partial_state.encode1 a.dims0 a.vars1' i,\n             partial_state.encode1 a.dims0 a.vars1' j) *\n            m2 $$\n            (partial_state.encode2 a.dims0 a.vars1' i,\n             partial_state.encode2 a.dims0 a.vars1' j)) $$\n       (partial_state.encode1 b.dims0 b.vars1' i,\n        partial_state.encode1 b.dims0 b.vars1' j) *\n       m3 $$\n       (partial_state.encode2 b.dims0 b.vars1' i,\n        partial_state.encode2 b.dims0 b.vars1' j)) =\n    (case (i, j) of\n     (i, j) \\<Rightarrow>\n       m1 $$\n       (partial_state.encode1 d.dims0 d.vars1' i,\n        partial_state.encode1 d.dims0 d.vars1' j) *\n       mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n        (\\<lambda>(i, j).\n            m2 $$\n            (partial_state.encode1 c.dims0 c.vars1' i,\n             partial_state.encode1 c.dims0 c.vars1' j) *\n            m3 $$\n            (partial_state.encode2 c.dims0 c.vars1' i,\n             partial_state.encode2 c.dims0 c.vars1' j)) $$\n       (partial_state.encode2 d.dims0 d.vars1' i,\n        partial_state.encode2 d.dims0 d.vars1' j))", "apply (auto simp add: lt1 lt2 lt3 lt4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 $$\n    (partial_state.encode1 a.dims0 a.vars1'\n      (partial_state.encode1 b.dims0 b.vars1' i),\n     partial_state.encode1 a.dims0 a.vars1'\n      (partial_state.encode1 b.dims0 b.vars1' j)) *\n    m2 $$\n    (partial_state.encode2 a.dims0 a.vars1'\n      (partial_state.encode1 b.dims0 b.vars1' i),\n     partial_state.encode2 a.dims0 a.vars1'\n      (partial_state.encode1 b.dims0 b.vars1' j)) *\n    m3 $$\n    (partial_state.encode2 b.dims0 b.vars1' i,\n     partial_state.encode2 b.dims0 b.vars1' j) =\n    m1 $$\n    (partial_state.encode1 d.dims0 d.vars1' i,\n     partial_state.encode1 d.dims0 d.vars1' j) *\n    (m2 $$\n     (partial_state.encode1 c.dims0 c.vars1'\n       (partial_state.encode2 d.dims0 d.vars1' i),\n      partial_state.encode1 c.dims0 c.vars1'\n       (partial_state.encode2 d.dims0 d.vars1' j)) *\n     m3 $$\n     (partial_state.encode2 c.dims0 c.vars1'\n       (partial_state.encode2 d.dims0 d.vars1' i),\n      partial_state.encode2 c.dims0 c.vars1'\n       (partial_state.encode2 d.dims0 d.vars1' j)))", "apply (simp only: m1index[OF lti] m1index[OF ltj] m2index[OF lti] m2index[OF ltj] m3index[OF lti] m3index[OF ltj])"], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 $$\n    (partial_state.encode1 d.dims0 d.vars1' i,\n     partial_state.encode1 d.dims0 d.vars1' j) *\n    m2 $$\n    (partial_state.encode1 c.dims0 c.vars1'\n      (partial_state.encode2 d.dims0 d.vars1' i),\n     partial_state.encode1 c.dims0 c.vars1'\n      (partial_state.encode2 d.dims0 d.vars1' j)) *\n    m3 $$\n    (partial_state.encode2 b.dims0 b.vars1' i,\n     partial_state.encode2 b.dims0 b.vars1' j) =\n    m1 $$\n    (partial_state.encode1 d.dims0 d.vars1' i,\n     partial_state.encode1 d.dims0 d.vars1' j) *\n    (m2 $$\n     (partial_state.encode1 c.dims0 c.vars1'\n       (partial_state.encode2 d.dims0 d.vars1' i),\n      partial_state.encode1 c.dims0 c.vars1'\n       (partial_state.encode2 d.dims0 d.vars1' j)) *\n     m3 $$\n     (partial_state.encode2 b.dims0 b.vars1' i,\n      partial_state.encode2 b.dims0 b.vars1' j))", "by auto"], ["proof (state)\nthis:\n  (case (i, j) of\n   (i, j) \\<Rightarrow>\n     mat (state_sig.d a.dims0) (state_sig.d a.dims0)\n      (\\<lambda>(i, j).\n          m1 $$\n          (partial_state.encode1 a.dims0 a.vars1' i,\n           partial_state.encode1 a.dims0 a.vars1' j) *\n          m2 $$\n          (partial_state.encode2 a.dims0 a.vars1' i,\n           partial_state.encode2 a.dims0 a.vars1' j)) $$\n     (partial_state.encode1 b.dims0 b.vars1' i,\n      partial_state.encode1 b.dims0 b.vars1' j) *\n     m3 $$\n     (partial_state.encode2 b.dims0 b.vars1' i,\n      partial_state.encode2 b.dims0 b.vars1' j)) =\n  (case (i, j) of\n   (i, j) \\<Rightarrow>\n     m1 $$\n     (partial_state.encode1 d.dims0 d.vars1' i,\n      partial_state.encode1 d.dims0 d.vars1' j) *\n     mat (state_sig.d c.dims0) (state_sig.d c.dims0)\n      (\\<lambda>(i, j).\n          m2 $$\n          (partial_state.encode1 c.dims0 c.vars1' i,\n           partial_state.encode1 c.dims0 c.vars1' j) *\n          m3 $$\n          (partial_state.encode2 c.dims0 c.vars1' i,\n           partial_state.encode2 c.dims0 c.vars1' j)) $$\n     (partial_state.encode2 d.dims0 d.vars1' i,\n      partial_state.encode2 d.dims0 d.vars1' j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  b.ptensor_mat (a.ptensor_mat m1 m2) m3 =\n  d.ptensor_mat m1 (c.ptensor_mat m2 m3)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Some simple consequences of associativity\\<close>"], ["", "lemma pmat_extension_assoc:\n  assumes \"vars1 \\<inter> vars2 = {}\"\n    and \"(vars1 \\<union> vars2) \\<inter> vars3 = {}\"\n    and \"vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..< length dims}\"\n  shows \"pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n         pmat_extension dims (vars1 \\<union> vars2) vars3 (pmat_extension dims vars1 vars2 m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2.pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n    partial_state2.pmat_extension dims (vars1 \\<union> vars2) vars3\n     (partial_state2.pmat_extension dims vars1 vars2 m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n    partial_state2.pmat_extension dims (vars1 \\<union> vars2) vars3\n     (partial_state2.pmat_extension dims vars1 vars2 m)", "interpret a: partial_state2 dims vars1 vars2"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars1 vars2", "by (unfold_locales, rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n    partial_state2.pmat_extension dims (vars1 \\<union> vars2) vars3\n     (a.pmat_extension m)", "interpret b: partial_state2 dims \"vars1 \\<union> vars2\" vars3"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 (vars1 \\<union> vars2) vars3", "by (unfold_locales, rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n    b.pmat_extension (a.pmat_extension m)", "interpret c: partial_state2 dims vars2 vars3"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars2 vars3", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars3 = {}", "using assms(2)"], ["proof (prove)\nusing this:\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n\ngoal (1 subgoal):\n 1. vars2 \\<inter> vars3 = {}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. partial_state2.pmat_extension dims vars1 (vars2 \\<union> vars3) m =\n    b.pmat_extension (a.pmat_extension m)", "interpret d: partial_state2 dims vars1 \"vars2 \\<union> vars3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_state2 vars1 (vars2 \\<union> vars3)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "using assms"], ["proof (prove)\nusing this:\n  vars1 \\<inter> vars2 = {}\n  (vars1 \\<union> vars2) \\<inter> vars3 = {}\n  vars1 \\<union> vars2 \\<union> vars3 \\<subseteq> {0..<length dims}\n\ngoal (1 subgoal):\n 1. vars1 \\<inter> (vars2 \\<union> vars3) = {}", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. d.pmat_extension m = b.pmat_extension (a.pmat_extension m)", "have \"a.d2 = c.d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a.d2 = c.d1", "by (simp add: c.d1_def a.d2_def c.dims1_def a.dims2_def)"], ["proof (state)\nthis:\n  a.d2 = c.d1\n\ngoal (1 subgoal):\n 1. d.pmat_extension m = b.pmat_extension (a.pmat_extension m)", "have \"c.d0 = d.d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c.d0 = d.d2", "by (simp add: c.d0_def d.d2_def c.dims0_def d.dims2_def c.vars0_def)"], ["proof (state)\nthis:\n  c.d0 = d.d2\n\ngoal (1 subgoal):\n 1. d.pmat_extension m = b.pmat_extension (a.pmat_extension m)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. d.pmat_extension m = b.pmat_extension (a.pmat_extension m)", "unfolding a.pmat_extension_def b.pmat_extension_def d.pmat_extension_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. d.ptensor_mat m (1\\<^sub>m d.d2) =\n    b.ptensor_mat (a.ptensor_mat m (1\\<^sub>m a.d2)) (1\\<^sub>m c.d2)", "apply (simp add: ptensor_mat_assoc[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. d.ptensor_mat m (1\\<^sub>m d.d2) =\n    d.ptensor_mat m (c.ptensor_mat (1\\<^sub>m a.d2) (1\\<^sub>m c.d2))", "apply (simp add: \\<open>a.d2 = c.d1\\<close> c.ptensor_mat_id)"], ["proof (prove)\ngoal (1 subgoal):\n 1. d.ptensor_mat m (1\\<^sub>m d.d2) = d.ptensor_mat m (1\\<^sub>m c.d0)", "by (simp add: \\<open>c.d0 = d.d2\\<close>)"], ["proof (state)\nthis:\n  d.pmat_extension m = b.pmat_extension (a.pmat_extension m)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Commands on subset of variables\\<close>"], ["", "context state_sig\nbegin"], ["", "definition Utrans_P :: \"nat set \\<Rightarrow> complex mat \\<Rightarrow> com\" where\n  \"Utrans_P vars U = Utrans (mat_extension dims vars U)\""], ["", "lemma well_com_Utrans_P:\n  assumes \"U \\<in> carrier_mat (prod_list (nths dims vars)) (prod_list (nths dims vars))\"\n    and \"unitary U\"\n  shows \"well_com (Utrans_P vars U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_com (Utrans_P vars U)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. well_com (Utrans_P vars U)", "have 1: \"mat_extension dims vars U \\<in> carrier_mat d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_extension dims vars U \\<in> carrier_mat d d", "by (rule partial_state.mat_extension_carrier)"], ["proof (state)\nthis:\n  mat_extension dims vars U \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. well_com (Utrans_P vars U)", "have 2: \"unitary (mat_extension dims vars U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (mat_extension dims vars U)", "apply (rule partial_state.mat_extension_unitary)"], ["proof (prove)\ngoal (2 subgoals):\n 1. U \\<in> carrier_mat (partial_state.d1 dims vars)\n             (partial_state.d1 dims vars)\n 2. unitary U", "unfolding partial_state.d1_def partial_state.dims1_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. U \\<in> carrier_mat (prod_list (nths dims vars))\n             (prod_list (nths dims vars))\n 2. unitary U", "using assms"], ["proof (prove)\nusing this:\n  U \\<in> carrier_mat (prod_list (nths dims vars))\n           (prod_list (nths dims vars))\n  unitary U\n\ngoal (2 subgoals):\n 1. U \\<in> carrier_mat (prod_list (nths dims vars))\n             (prod_list (nths dims vars))\n 2. unitary U", "by auto"], ["proof (state)\nthis:\n  unitary (mat_extension dims vars U)\n\ngoal (1 subgoal):\n 1. well_com (Utrans_P vars U)", "show \"well_com (Utrans_P vars U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_com (Utrans_P vars U)", "using 1 2 Utrans_P_def"], ["proof (prove)\nusing this:\n  mat_extension dims vars U \\<in> carrier_mat d d\n  unitary (mat_extension dims vars U)\n  Utrans_P ?vars ?U = Utrans (mat_extension dims ?vars ?U)\n\ngoal (1 subgoal):\n 1. well_com (Utrans_P vars U)", "by auto"], ["proof (state)\nthis:\n  well_com (Utrans_P vars U)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition Measure_P :: \"nat set \\<Rightarrow> nat \\<Rightarrow> (nat \\<Rightarrow> complex mat) \\<Rightarrow> com list \\<Rightarrow> com\" where\n  \"Measure_P vars n Ps Cs = Measure n (\\<lambda>n. mat_extension dims vars (Ps n)) Cs\""], ["", "definition While_P :: \"nat set \\<Rightarrow> complex mat \\<Rightarrow> complex mat \\<Rightarrow> com \\<Rightarrow> com\" where\n  \"While_P vars M0 M1 C = While (\\<lambda>n.\n    if n = 0 then mat_extension dims vars M0\n    else if n = 1 then mat_extension dims vars M1\n    else undefined) C\""], ["", "end"], ["", "end"]]}