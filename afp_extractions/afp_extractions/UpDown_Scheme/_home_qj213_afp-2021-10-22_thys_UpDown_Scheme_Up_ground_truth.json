{"file_name": "/home/qj213/afp-2021-10-22/thys/UpDown_Scheme/Up.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UpDown_Scheme", "problem_names": ["lemma up'_inplace:\n  assumes p'_in: \"p' \\<notin> grid p ds\" and \"d \\<in> ds\"\n  shows \"snd (up' d l p \\<alpha>) p' = \\<alpha> p'\"", "lemma up'_fl_fr:\n      \"\\<lbrakk> d < length p ; p = (child p_r right d) ; p = (child p_l left d) \\<rbrakk>\n       \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n              (\\<Sum> p' \\<in> lgrid p {d} (lm + level p). (\\<alpha> p') * l2_\\<phi> (p' ! d) (p_r ! d),\n               \\<Sum> p' \\<in> lgrid p {d} (lm + level p). (\\<alpha> p') * l2_\\<phi> (p' ! d) (p_l ! d))\"", "lemma up'_\\<beta>:\n  \"\\<lbrakk> d < length b ; l + level b = lm ; b \\<in> sparsegrid' dm ; p \\<in> sparsegrid' dm \\<rbrakk>\n   \\<Longrightarrow>\n   (snd (up' d l b \\<alpha>)) p =\n     (if p \\<in> lgrid b {d} lm\n      then \\<Sum> p' \\<in> (lgrid p {d} lm) - {p}. \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n      else \\<alpha> p)\"\n  (is \"\\<lbrakk> _ ; _ ; _ ; _ \\<rbrakk> \\<Longrightarrow> (?goal l b p \\<alpha>)\")", "lemma up:\n  assumes \"d < dm\" and \"p \\<in> sparsegrid dm lm\"\n  shows \"(up dm lm d \\<alpha>) p = (\\<Sum> p' \\<in> (lgrid p {d} lm) - {p}. \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))\""], "translations": [["", "lemma up'_inplace:\n  assumes p'_in: \"p' \\<notin> grid p ds\" and \"d \\<in> ds\"\n  shows \"snd (up' d l p \\<alpha>) p' = \\<alpha> p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (up' d l p \\<alpha>) p' = \\<alpha> p'", "using p'_in"], ["proof (prove)\nusing this:\n  p' \\<notin> grid p ds\n\ngoal (1 subgoal):\n 1. snd (up' d l p \\<alpha>) p' = \\<alpha> p'", "proof (induct l arbitrary: p \\<alpha>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "case (Suc l)"], ["proof (state)\nthis:\n  p' \\<notin> grid ?p ds \\<Longrightarrow>\n  snd (up' d l ?p ?\\<alpha>) p' = ?\\<alpha> p'\n  p' \\<notin> grid p ds\n\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "let \"?ch dir\" = \"child p dir d\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "let \"?up dir \\<alpha>\" = \"up' d l (?ch dir) \\<alpha>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "let \"?upl\" = \"snd (?up left \\<alpha>)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "from contrapos_nn[OF \\<open>p' \\<notin> grid p ds\\<close> grid_child[OF \\<open>d \\<in> ds\\<close>]]"], ["proof (chain)\npicking this:\n  (?P \\<Longrightarrow>\n   p' \\<in> grid (child p ?dir1 d) ds) \\<Longrightarrow>\n  \\<not> ?P", "have left: \"p' \\<notin> grid (?ch left) ds\" and\n       right: \"p' \\<notin> grid (?ch right) ds\""], ["proof (prove)\nusing this:\n  (?P \\<Longrightarrow>\n   p' \\<in> grid (child p ?dir1 d) ds) \\<Longrightarrow>\n  \\<not> ?P\n\ngoal (1 subgoal):\n 1. p' \\<notin> grid (child p left d) ds &&&\n    p' \\<notin> grid (child p right d) ds", "by auto"], ["proof (state)\nthis:\n  p' \\<notin> grid (child p left d) ds\n  p' \\<notin> grid (child p right d) ds\n\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "have \"p \\<noteq> p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> p'", "using grid.Start Suc.prems"], ["proof (prove)\nusing this:\n  ?b \\<in> grid ?b ?ds\n  p' \\<notin> grid p ds\n\ngoal (1 subgoal):\n 1. p \\<noteq> p'", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> p'\n\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'\n 2. \\<And>l p \\<alpha>.\n       \\<lbrakk>\\<And>p \\<alpha>.\n                   p' \\<notin> grid p ds \\<Longrightarrow>\n                   snd (up' d l p \\<alpha>) p' = \\<alpha> p';\n        p' \\<notin> grid p ds\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "with Suc.hyps[OF left, of \\<alpha>] Suc.hyps[OF right, of ?upl]"], ["proof (chain)\npicking this:\n  snd (up' d l (child p left d) \\<alpha>) p' = \\<alpha> p'\n  snd (up' d l (child p right d) (snd (up' d l (child p left d) \\<alpha>)))\n   p' =\n  snd (up' d l (child p left d) \\<alpha>) p'\n  p \\<noteq> p'", "show ?case"], ["proof (prove)\nusing this:\n  snd (up' d l (child p left d) \\<alpha>) p' = \\<alpha> p'\n  snd (up' d l (child p right d) (snd (up' d l (child p left d) \\<alpha>)))\n   p' =\n  snd (up' d l (child p left d) \\<alpha>) p'\n  p \\<noteq> p'\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'", "by (cases \"?up left \\<alpha>\", cases \"?up right ?upl\", auto simp add: Let_def)"], ["proof (state)\nthis:\n  snd (up' d (Suc l) p \\<alpha>) p' = \\<alpha> p'\n\ngoal (1 subgoal):\n 1. \\<And>p \\<alpha>.\n       p' \\<notin> grid p ds \\<Longrightarrow>\n       snd (up' d 0 p \\<alpha>) p' = \\<alpha> p'", "qed auto"], ["", "lemma up'_fl_fr:\n      \"\\<lbrakk> d < length p ; p = (child p_r right d) ; p = (child p_l left d) \\<rbrakk>\n       \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n              (\\<Sum> p' \\<in> lgrid p {d} (lm + level p). (\\<alpha> p') * l2_\\<phi> (p' ! d) (p_r ! d),\n               \\<Sum> p' \\<in> lgrid p {d} (lm + level p). (\\<alpha> p') * l2_\\<phi> (p' ! d) (p_l ! d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d < length p; p = child p_r right d;\n     p = child p_l left d\\<rbrakk>\n    \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                      (\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n                         \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                       \\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n                         \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "proof (induct lm arbitrary: p p_l p_r \\<alpha>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "case (Suc lm)"], ["proof (state)\nthis:\n  \\<lbrakk>d < length ?p; ?p = child ?p_r right d;\n   ?p = child ?p_l left d\\<rbrakk>\n  \\<Longrightarrow> fst (up' d lm ?p ?\\<alpha>) =\n                    (\\<Sum>p'\\<in>lgrid ?p {d} (lm + level ?p).\n                       ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p_r ! d),\n                     \\<Sum>p'\\<in>lgrid ?p {d} (lm + level ?p).\n                       ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p_l ! d))\n  d < length p\n  p = child p_r right d\n  p = child p_l left d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "note \\<open>d < length p\\<close>[simp]"], ["proof (state)\nthis:\n  d < length p\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "from child_ex_neighbour"], ["proof (chain)\npicking this:\n  \\<exists>b'. child ?b ?dir ?d = child b' (Grid_Point.inv ?dir) ?d", "obtain pc_r pc_l\n    where pc_r_def: \"child p right d = child pc_r (inv right) d\"\n    and pc_l_def: \"child p left d = child pc_l (inv left) d\""], ["proof (prove)\nusing this:\n  \\<exists>b'. child ?b ?dir ?d = child b' (Grid_Point.inv ?dir) ?d\n\ngoal (1 subgoal):\n 1. (\\<And>pc_r pc_l.\n        \\<lbrakk>child p right d = child pc_r (Grid_Point.inv right) d;\n         child p left d = child pc_l (Grid_Point.inv left) d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  child p right d = child pc_r (Grid_Point.inv right) d\n  child p left d = child pc_l (Grid_Point.inv left) d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "define pc where \"pc dir = (case dir of right \\<Rightarrow> pc_r | left \\<Rightarrow> pc_l)\" for dir"], ["proof (state)\nthis:\n  pc ?dir =\n  (case ?dir of left \\<Rightarrow> pc_l | right \\<Rightarrow> pc_r)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "{"], ["proof (state)\nthis:\n  pc ?dir =\n  (case ?dir of left \\<Rightarrow> pc_l | right \\<Rightarrow> pc_r)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "fix dir"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "have \"child p (inv dir) d = child (pc (inv dir)) dir d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. child p (Grid_Point.inv dir) d = child (pc (Grid_Point.inv dir)) dir d", "by (cases dir, auto simp add: pc_def pc_r_def pc_l_def)"], ["proof (state)\nthis:\n  child p (Grid_Point.inv dir) d = child (pc (Grid_Point.inv dir)) dir d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "}"], ["proof (state)\nthis:\n  child p (Grid_Point.inv ?dir2) d =\n  child (pc (Grid_Point.inv ?dir2)) ?dir2 d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "note pc_child = this"], ["proof (state)\nthis:\n  child p (Grid_Point.inv ?dir2) d =\n  child (pc (Grid_Point.inv ?dir2)) ?dir2 d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "{"], ["proof (state)\nthis:\n  child p (Grid_Point.inv ?dir2) d =\n  child (pc (Grid_Point.inv ?dir2)) ?dir2 d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "fix dir"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "have \"child p dir d = child (pc dir) (inv dir) d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. child p dir d = child (pc dir) (Grid_Point.inv dir) d", "by (cases dir, auto simp add: pc_def pc_r_def pc_l_def)"], ["proof (state)\nthis:\n  child p dir d = child (pc dir) (Grid_Point.inv dir) d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "}"], ["proof (state)\nthis:\n  child p ?dir2 d = child (pc ?dir2) (Grid_Point.inv ?dir2) d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "note pc_child_inv = this"], ["proof (state)\nthis:\n  child p ?dir2 d = child (pc ?dir2) (Grid_Point.inv ?dir2) d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"!! dir. length (child p dir d) = length (child (pc dir) (inv dir) d)\""], ["proof (prove)\nusing this:\n  child p ?dir2 d = child (pc ?dir2) (Grid_Point.inv ?dir2) d\n\ngoal (1 subgoal):\n 1. \\<And>dir.\n       length (child p dir d) =\n       length (child (pc dir) (Grid_Point.inv dir) d)", "by auto"], ["proof (state)\nthis:\n  length (child p ?dir d) = length (child (pc ?dir) (Grid_Point.inv ?dir) d)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"!! dir. length p = length (pc dir)\""], ["proof (prove)\nusing this:\n  length (child p ?dir d) = length (child (pc ?dir) (Grid_Point.inv ?dir) d)\n\ngoal (1 subgoal):\n 1. \\<And>dir. length p = length (pc dir)", "by auto"], ["proof (state)\nthis:\n  length p = length (pc ?dir)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence [simp]: \"!! dir. d < length (pc dir)\""], ["proof (prove)\nusing this:\n  length p = length (pc ?dir)\n\ngoal (1 subgoal):\n 1. \\<And>dir. d < length (pc dir)", "by auto"], ["proof (state)\nthis:\n  d < length (pc ?dir)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?l = \"\\<lambda>s. lm + level s\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?C = \"\\<lambda>p p'. (\\<alpha> p) * l2_\\<phi> (p ! d) (p' ! d)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?sum' = \"\\<lambda>s p''. \\<Sum> p' \\<in> lgrid s {d} (Suc lm + level p). ?C p' p''\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?sum = \"\\<lambda>s dir p. \\<Sum> p' \\<in> lgrid (child s dir d) {d} (?l (child s dir d)). ?C p' p\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?ch = \"\\<lambda>dir. child p dir d\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?f = \"\\<lambda>dir. ?sum p dir (pc dir)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?fm = \"\\<lambda>dir. ?sum p dir p\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?result = \"(?fm left + ?fm right + (\\<alpha> p) / 2 ^ (lv p d) / 2) / 2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "let ?up = \"\\<lambda>lm p \\<alpha>. up' d lm p \\<alpha>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "define \\<beta>l where \"\\<beta>l = snd (?up lm (?ch left) \\<alpha>)\""], ["proof (state)\nthis:\n  \\<beta>l = snd (up' d lm (child p left d) \\<alpha>)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "define \\<beta>r where \"\\<beta>r = snd (?up lm (?ch right) \\<beta>l)\""], ["proof (state)\nthis:\n  \\<beta>r = snd (up' d lm (child p right d) \\<beta>l)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "define p_d where \"p_d dir = (case dir of right \\<Rightarrow> p_r | left \\<Rightarrow> p_l)\" for dir"], ["proof (state)\nthis:\n  p_d ?dir = (case ?dir of left \\<Rightarrow> p_l | right \\<Rightarrow> p_r)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "have p_d_child: \"p = child (p_d dir) dir d\" for dir"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = child (p_d dir) dir d", "using Suc.prems p_d_def"], ["proof (prove)\nusing this:\n  d < length p\n  p = child p_r right d\n  p = child p_l left d\n  p_d ?dir = (case ?dir of left \\<Rightarrow> p_l | right \\<Rightarrow> p_r)\n\ngoal (1 subgoal):\n 1. p = child (p_d dir) dir d", "by (cases dir) auto"], ["proof (state)\nthis:\n  p = child (p_d ?dir) ?dir d\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"\\<And> dir. length p = length (child (p_d dir) dir d)\""], ["proof (prove)\nusing this:\n  p = child (p_d ?dir) ?dir d\n\ngoal (1 subgoal):\n 1. \\<And>dir. length p = length (child (p_d dir) dir d)", "by auto"], ["proof (state)\nthis:\n  length p = length (child (p_d ?dir) ?dir d)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"\\<And> dir. d < length (p_d dir)\""], ["proof (prove)\nusing this:\n  length p = length (child (p_d ?dir) ?dir d)\n\ngoal (1 subgoal):\n 1. \\<And>dir. d < length (p_d dir)", "by auto"], ["proof (state)\nthis:\n  d < length (p_d ?dir)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "{"], ["proof (state)\nthis:\n  d < length (p_d ?dir)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "fix dir"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "fix p'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "assume \"p' \\<in> lgrid (?ch (inv dir)) {d} (?l (?ch (inv dir))) \""], ["proof (state)\nthis:\n  p' \\<in> lgrid (child p (Grid_Point.inv dir) d) {d}\n            (lm + level (child p (Grid_Point.inv dir) d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"?C p' (pc (inv dir)) + (?C p' p) / 2 = ?C p' (p_d dir)\""], ["proof (prove)\nusing this:\n  p' \\<in> lgrid (child p (Grid_Point.inv dir) d) {d}\n            (lm + level (child p (Grid_Point.inv dir) d))\n\ngoal (1 subgoal):\n 1. \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d) +\n    \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) / 2 =\n    \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)", "using l2_zigzag[OF _ p_d_child[of dir] _ pc_child[of dir]]"], ["proof (prove)\nusing this:\n  p' \\<in> lgrid (child p (Grid_Point.inv dir) d) {d}\n            (lm + level (child p (Grid_Point.inv dir) d))\n  \\<lbrakk>d < length p;\n   ?p' \\<in> grid (child p (Grid_Point.inv dir) d) {d}\\<rbrakk>\n  \\<Longrightarrow> l2_\\<phi> (?p' ! d) (p_d dir ! d) =\n                    l2_\\<phi> (?p' ! d) (pc (Grid_Point.inv dir) ! d) +\n                    l2_\\<phi> (?p' ! d) (p ! d) / 2\n\ngoal (1 subgoal):\n 1. \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d) +\n    \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) / 2 =\n    \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)", "by (cases dir) (auto simp add: algebra_simps)"], ["proof (state)\nthis:\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d) +\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) / 2 =\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "}"], ["proof (state)\nthis:\n  ?p'2\n  \\<in> lgrid (child p (Grid_Point.inv dir) d) {d}\n         (lm + level (child p (Grid_Point.inv dir) d)) \\<Longrightarrow>\n  \\<alpha> ?p'2 * l2_\\<phi> (?p'2 ! d) (pc (Grid_Point.inv dir) ! d) +\n  \\<alpha> ?p'2 * l2_\\<phi> (?p'2 ! d) (p ! d) / 2 =\n  \\<alpha> ?p'2 * l2_\\<phi> (?p'2 ! d) (p_d dir ! d)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence inv_dir_sum: \"?sum p (inv dir) (pc (inv dir)) + (?sum p (inv dir) p) / 2\n      = ?sum p (inv dir) (p_d dir)\""], ["proof (prove)\nusing this:\n  ?p'2\n  \\<in> lgrid (child p (Grid_Point.inv dir) d) {d}\n         (lm + level (child p (Grid_Point.inv dir) d)) \\<Longrightarrow>\n  \\<alpha> ?p'2 * l2_\\<phi> (?p'2 ! d) (pc (Grid_Point.inv dir) ! d) +\n  \\<alpha> ?p'2 * l2_\\<phi> (?p'2 ! d) (p ! d) / 2 =\n  \\<alpha> ?p'2 * l2_\\<phi> (?p'2 ! d) (p_d dir ! d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 =\n    (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))", "by (auto simp add: sum.distrib[symmetric] sum_divide_distrib)"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "have \"?sum p dir p / 2 = ?sum p dir (p_d dir)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 =\n    (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))", "using l2_down2[OF _ _ \\<open>p = child (p_d dir) dir d\\<close>]"], ["proof (prove)\nusing this:\n  \\<lbrakk>d < length p; ?pc \\<in> grid (child p dir d) {d}\\<rbrakk>\n  \\<Longrightarrow> l2_\\<phi> (?pc ! d) (p ! d) / 2 =\n                    l2_\\<phi> (?pc ! d) (p_d dir ! d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 =\n    (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))", "by (force intro!: sum.cong simp add: sum_divide_distrib)"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "have \"?C p (p_d dir) = (\\<alpha> p) / 2 ^ (lv p d) / 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> p * l2_\\<phi> (p ! d) (p_d dir ! d) =\n    \\<alpha> p / 2 ^ lv p d / 4", "using l2_child[OF \\<open>d < length (p_d dir)\\<close>, of p dir \"{d}\"] p_d_child[of dir]\n      \\<open>d < length (p_d dir)\\<close> child_lv child_ix grid.Start[of p \"{d}\"]"], ["proof (prove)\nusing this:\n  p \\<in> grid (child (p_d dir) dir d) {d} \\<Longrightarrow>\n  l2_\\<phi> (p ! d) (p_d dir ! d) =\n  (1 -\n   real_of_int (Grid_Point.sgn dir) *\n   (real_of_int (ix p d) / 2 ^ (lv p d - lv (p_d dir) d) -\n    real_of_int (ix (p_d dir) d))) /\n  2 ^ (lv p d + 1)\n  p = child (p_d dir) dir d\n  d < length (p_d dir)\n  ?d < length ?p \\<Longrightarrow> lv (child ?p ?dir ?d) ?d = lv ?p ?d + 1\n  ?d < length ?p \\<Longrightarrow>\n  ix (child ?p ?dir ?d) ?d = 2 * ix ?p ?d + Grid_Point.sgn ?dir\n  p \\<in> grid p {d}\n\ngoal (1 subgoal):\n 1. \\<alpha> p * l2_\\<phi> (p ! d) (p_d dir ! d) =\n    \\<alpha> p / 2 ^ lv p d / 4", "by (cases dir) (auto simp add: add_divide_distrib field_simps)"], ["proof (state)\nthis:\n  \\<alpha> p * l2_\\<phi> (p ! d) (p_d dir ! d) = \\<alpha> p / 2 ^ lv p d / 4\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n  \\<alpha> p * l2_\\<phi> (p ! d) (p_d dir ! d) = \\<alpha> p / 2 ^ lv p d / 4", "have \"?sum' p (p_d dir) =\n      ?sum p (inv dir) (pc (inv dir)) +\n      (?sum p (inv dir) p) / 2 + ?sum p dir p / 2 + (\\<alpha> p) / 2 ^ (lv p d) / 4\""], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n  \\<alpha> p * l2_\\<phi> (p ! d) (p_d dir ! d) = \\<alpha> p / 2 ^ lv p d / 4\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)) =\n    (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 +\n    (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 +\n    \\<alpha> p / 2 ^ lv p d / 4", "using lgrid_sum[where b=p] and child_level and inv_dir_sum"], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n  \\<alpha> p * l2_\\<phi> (p ! d) (p_d dir ! d) = \\<alpha> p / 2 ^ lv p d / 4\n  \\<lbrakk>?d < length p; level p < ?lm\\<rbrakk>\n  \\<Longrightarrow> sum ?F (lgrid p {?d} ?lm) =\n                    sum ?F (lgrid (child p left ?d) {?d} ?lm) +\n                    sum ?F (lgrid (child p right ?d) {?d} ?lm) +\n                    ?F p\n  ?d < length ?p \\<Longrightarrow> level (child ?p ?dir ?d) = level ?p + 1\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)) =\n    (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 +\n    (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n    2 +\n    \\<alpha> p / 2 ^ lv p d / 4", "by (cases dir) auto"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)) =\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 +\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 +\n  \\<alpha> p / 2 ^ lv p d / 4\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"?sum p (inv dir) (pc (inv dir)) + ?result = ?sum' p (p_d dir)\""], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d)) =\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 +\n  (\\<Sum>p'\\<in>lgrid (child p dir d) {d} (lm + level (child p dir d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) /\n  2 +\n  \\<alpha> p / 2 ^ lv p d / 4\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                   (lm + level (child p (Grid_Point.inv dir) d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n    ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n        \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n     (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                    (lm + level (child p right d)).\n        \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n     \\<alpha> p / 2 ^ lv p d / 2) /\n    2 =\n    (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))", "by (cases dir) auto"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv dir) d) {d}\n                 (lm + level (child p (Grid_Point.inv dir) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv dir) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d dir ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "}"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv ?dir2) d) {d}\n                 (lm + level (child p (Grid_Point.inv ?dir2) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv ?dir2) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d ?dir2 ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "note this[of left] this[of right]"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv left) d) {d}\n                 (lm + level (child p (Grid_Point.inv left) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv left) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d left ! d))\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv right) d) {d}\n                 (lm + level (child p (Grid_Point.inv right) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv right) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d right ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv left) d) {d}\n                 (lm + level (child p (Grid_Point.inv left) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv left) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d left ! d))\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv right) d) {d}\n                 (lm + level (child p (Grid_Point.inv right) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv right) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d right ! d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "note eq = up'_inplace[OF grid_not_child[OF \\<open>d < length p\\<close>], of d \"{d}\" lm]"], ["proof (state)\nthis:\n  d \\<in> {d} \\<Longrightarrow>\n  snd (up' d lm (child p ?dir1 d) ?\\<alpha>) p = ?\\<alpha> p\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "{"], ["proof (state)\nthis:\n  d \\<in> {d} \\<Longrightarrow>\n  snd (up' d lm (child p ?dir1 d) ?\\<alpha>) p = ?\\<alpha> p\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "fix p'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "assume \"p' \\<in> lgrid (?ch right) {d} (lm + level (?ch right))\""], ["proof (state)\nthis:\n  p' \\<in> lgrid (child p right d) {d} (lm + level (child p right d))\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "with grid_disjunct[of d p] up'_inplace[of p' \"?ch left\" \"{d}\" d lm \\<alpha>] \\<beta>l_def"], ["proof (chain)\npicking this:\n  d < length p \\<Longrightarrow>\n  grid (child p left d) ?ds \\<inter> grid (child p right d) ?ds = {}\n  \\<lbrakk>p' \\<notin> grid (child p left d) {d}; d \\<in> {d}\\<rbrakk>\n  \\<Longrightarrow> snd (up' d lm (child p left d) \\<alpha>) p' =\n                    \\<alpha> p'\n  \\<beta>l = snd (up' d lm (child p left d) \\<alpha>)\n  p' \\<in> lgrid (child p right d) {d} (lm + level (child p right d))", "have \"\\<beta>l p' = \\<alpha> p'\""], ["proof (prove)\nusing this:\n  d < length p \\<Longrightarrow>\n  grid (child p left d) ?ds \\<inter> grid (child p right d) ?ds = {}\n  \\<lbrakk>p' \\<notin> grid (child p left d) {d}; d \\<in> {d}\\<rbrakk>\n  \\<Longrightarrow> snd (up' d lm (child p left d) \\<alpha>) p' =\n                    \\<alpha> p'\n  \\<beta>l = snd (up' d lm (child p left d) \\<alpha>)\n  p' \\<in> lgrid (child p right d) {d} (lm + level (child p right d))\n\ngoal (1 subgoal):\n 1. \\<beta>l p' = \\<alpha> p'", "by auto"], ["proof (state)\nthis:\n  \\<beta>l p' = \\<alpha> p'\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "}"], ["proof (state)\nthis:\n  ?p'2\n  \\<in> lgrid (child p right d) {d}\n         (lm + level (child p right d)) \\<Longrightarrow>\n  \\<beta>l ?p'2 = \\<alpha> ?p'2\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "hence \"fst (?up (Suc lm) p \\<alpha>) = (?f left + ?result, ?f right + ?result)\""], ["proof (prove)\nusing this:\n  ?p'2\n  \\<in> lgrid (child p right d) {d}\n         (lm + level (child p right d)) \\<Longrightarrow>\n  \\<beta>l ?p'2 = \\<alpha> ?p'2\n\ngoal (1 subgoal):\n 1. fst (up' d (Suc lm) p \\<alpha>) =\n    ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n        \\<alpha> p' * l2_\\<phi> (p' ! d) (pc left ! d)) +\n     ((\\<Sum>p'\\<in>lgrid (child p left d) {d}\n                     (lm + level (child p left d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                     (lm + level (child p right d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      \\<alpha> p / 2 ^ lv p d / 2) /\n     2,\n     (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                    (lm + level (child p right d)).\n        \\<alpha> p' * l2_\\<phi> (p' ! d) (pc right ! d)) +\n     ((\\<Sum>p'\\<in>lgrid (child p left d) {d}\n                     (lm + level (child p left d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                     (lm + level (child p right d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      \\<alpha> p / 2 ^ lv p d / 2) /\n     2)", "using \\<beta>l_def pc_child_inv[of left] pc_child_inv[of right]\n      Suc.hyps[of \"?ch left\" \"pc left\" p \\<alpha>] eq[of left \\<alpha>]\n      Suc.hyps[of \"?ch right\" p \"pc right\" \\<beta>l] eq[of right \\<beta>l]"], ["proof (prove)\nusing this:\n  ?p'2\n  \\<in> lgrid (child p right d) {d}\n         (lm + level (child p right d)) \\<Longrightarrow>\n  \\<beta>l ?p'2 = \\<alpha> ?p'2\n  \\<beta>l = snd (up' d lm (child p left d) \\<alpha>)\n  child p left d = child (pc left) (Grid_Point.inv left) d\n  child p right d = child (pc right) (Grid_Point.inv right) d\n  \\<lbrakk>d < length (child p left d);\n   child p left d = child (pc left) right d;\n   child p left d = child p left d\\<rbrakk>\n  \\<Longrightarrow> fst (up' d lm (child p left d) \\<alpha>) =\n                    (\\<Sum>p'\\<in>lgrid (child p left d) {d}\n                                   (lm + level (child p left d)).\n                       \\<alpha> p' * l2_\\<phi> (p' ! d) (pc left ! d),\n                     \\<Sum>p'\\<in>lgrid (child p left d) {d}\n                                   (lm + level (child p left d)).\n                       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))\n  d \\<in> {d} \\<Longrightarrow>\n  snd (up' d lm (child p left d) \\<alpha>) p = \\<alpha> p\n  \\<lbrakk>d < length (child p right d); child p right d = child p right d;\n   child p right d = child (pc right) left d\\<rbrakk>\n  \\<Longrightarrow> fst (up' d lm (child p right d) \\<beta>l) =\n                    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                                   (lm + level (child p right d)).\n                       \\<beta>l p' * l2_\\<phi> (p' ! d) (p ! d),\n                     \\<Sum>p'\\<in>lgrid (child p right d) {d}\n                                   (lm + level (child p right d)).\n                       \\<beta>l p' * l2_\\<phi> (p' ! d) (pc right ! d))\n  d \\<in> {d} \\<Longrightarrow>\n  snd (up' d lm (child p right d) \\<beta>l) p = \\<beta>l p\n\ngoal (1 subgoal):\n 1. fst (up' d (Suc lm) p \\<alpha>) =\n    ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n        \\<alpha> p' * l2_\\<phi> (p' ! d) (pc left ! d)) +\n     ((\\<Sum>p'\\<in>lgrid (child p left d) {d}\n                     (lm + level (child p left d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                     (lm + level (child p right d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      \\<alpha> p / 2 ^ lv p d / 2) /\n     2,\n     (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                    (lm + level (child p right d)).\n        \\<alpha> p' * l2_\\<phi> (p' ! d) (pc right ! d)) +\n     ((\\<Sum>p'\\<in>lgrid (child p left d) {d}\n                     (lm + level (child p left d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                     (lm + level (child p right d)).\n         \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n      \\<alpha> p / 2 ^ lv p d / 2) /\n     2)", "by (cases \"?up lm (?ch left) \\<alpha>\", cases \"?up lm (?ch right) \\<beta>l\") (simp add: Let_def)"], ["proof (state)\nthis:\n  fst (up' d (Suc lm) p \\<alpha>) =\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (pc left ! d)) +\n   ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                   (lm + level (child p right d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    \\<alpha> p / 2 ^ lv p d / 2) /\n   2,\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (pc right ! d)) +\n   ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                   (lm + level (child p right d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    \\<alpha> p / 2 ^ lv p d / 2) /\n   2)\n\ngoal (2 subgoals):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n 2. \\<And>lm p p_l p_r \\<alpha>.\n       \\<lbrakk>\\<And>p p_l p_r \\<alpha>.\n                   \\<lbrakk>d < length p; p = child p_r right d;\n                    p = child p_l left d\\<rbrakk>\n                   \\<Longrightarrow> fst (up' d lm p \\<alpha>) =\n                                     (\\<Sum>p'\n      \\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n\\<Sum>p'\\<in>lgrid p {d} (lm + level p).\n  \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d));\n        d < length p; p = child p_r right d; p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d (Suc lm) p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv left) d) {d}\n                 (lm + level (child p (Grid_Point.inv left) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv left) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d left ! d))\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv right) d) {d}\n                 (lm + level (child p (Grid_Point.inv right) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv right) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d right ! d))\n  fst (up' d (Suc lm) p \\<alpha>) =\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (pc left ! d)) +\n   ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                   (lm + level (child p right d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    \\<alpha> p / 2 ^ lv p d / 2) /\n   2,\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (pc right ! d)) +\n   ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                   (lm + level (child p right d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    \\<alpha> p / 2 ^ lv p d / 2) /\n   2)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv left) d) {d}\n                 (lm + level (child p (Grid_Point.inv left) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv left) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d left ! d))\n  (\\<Sum>p'\\<in>lgrid (child p (Grid_Point.inv right) d) {d}\n                 (lm + level (child p (Grid_Point.inv right) d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (pc (Grid_Point.inv right) ! d)) +\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n   \\<alpha> p / 2 ^ lv p d / 2) /\n  2 =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_d right ! d))\n  fst (up' d (Suc lm) p \\<alpha>) =\n  ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (pc left ! d)) +\n   ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                   (lm + level (child p right d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    \\<alpha> p / 2 ^ lv p d / 2) /\n   2,\n   (\\<Sum>p'\\<in>lgrid (child p right d) {d} (lm + level (child p right d)).\n      \\<alpha> p' * l2_\\<phi> (p' ! d) (pc right ! d)) +\n   ((\\<Sum>p'\\<in>lgrid (child p left d) {d} (lm + level (child p left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child p right d) {d}\n                   (lm + level (child p right d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) +\n    \\<alpha> p / 2 ^ lv p d / 2) /\n   2)\n\ngoal (1 subgoal):\n 1. fst (up' d (Suc lm) p \\<alpha>) =\n    (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n     \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "by (auto simp add: p_d_def)"], ["proof (state)\nthis:\n  fst (up' d (Suc lm) p \\<alpha>) =\n  (\\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n   \\<Sum>p'\\<in>lgrid p {d} (Suc lm + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n\ngoal (1 subgoal):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "case 0"], ["proof (state)\nthis:\n  d < length p\n  p = child p_r right d\n  p = child p_l left d\n\ngoal (1 subgoal):\n 1. \\<And>p p_l p_r \\<alpha>.\n       \\<lbrakk>d < length p; p = child p_r right d;\n        p = child p_l left d\\<rbrakk>\n       \\<Longrightarrow> fst (up' d 0 p \\<alpha>) =\n                         (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n                          \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n                            \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (up' d 0 p \\<alpha>) =\n    (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n     \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))", "by simp"], ["proof (state)\nthis:\n  fst (up' d 0 p \\<alpha>) =\n  (\\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n   \\<Sum>p'\\<in>lgrid p {d} (0 + level p).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p_l ! d))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma up'_\\<beta>:\n  \"\\<lbrakk> d < length b ; l + level b = lm ; b \\<in> sparsegrid' dm ; p \\<in> sparsegrid' dm \\<rbrakk>\n   \\<Longrightarrow>\n   (snd (up' d l b \\<alpha>)) p =\n     (if p \\<in> lgrid b {d} lm\n      then \\<Sum> p' \\<in> (lgrid p {d} lm) - {p}. \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n      else \\<alpha> p)\"\n  (is \"\\<lbrakk> _ ; _ ; _ ; _ \\<rbrakk> \\<Longrightarrow> (?goal l b p \\<alpha>)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d < length b; l + level b = lm; b \\<in> sparsegrid' dm;\n     p \\<in> sparsegrid' dm\\<rbrakk>\n    \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                      (if p \\<in> lgrid b {d} lm\n                       then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                              \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                       else \\<alpha> p)", "proof (induct l arbitrary: b p \\<alpha>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>d < length ?b; l + level ?b = lm; ?b \\<in> sparsegrid' dm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l ?b ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid ?b {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)\n  d < length b\n  Suc l + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "let ?l = \"child b left d\" and ?r = \"child b right d\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "obtain p_l where p_l_def: \"?r = child p_l left d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p_l.\n        child b right d = child p_l left d \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using child_ex_neighbour[where dir=right]"], ["proof (prove)\nusing this:\n  \\<exists>b'. child ?b right ?d = child b' (Grid_Point.inv right) ?d\n\ngoal (1 subgoal):\n 1. (\\<And>p_l.\n        child b right d = child p_l left d \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  child b right d = child p_l left d\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "obtain p_r where p_r_def: \"?l = child p_r right d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p_r.\n        child b left d = child p_r right d \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using child_ex_neighbour[where dir=left]"], ["proof (prove)\nusing this:\n  \\<exists>b'. child ?b left ?d = child b' (Grid_Point.inv left) ?d\n\ngoal (1 subgoal):\n 1. (\\<And>p_r.\n        child b left d = child p_r right d \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  child b left d = child p_r right d\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "let ?ul = \"up' d l ?l \\<alpha>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "let ?ur = \"up' d l ?r (snd ?ul)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "let \"?C p'\" = \"\\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "let \"?s s\" = \"\\<Sum> p' \\<in> (lgrid s {d} lm). ?C p'\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "from \\<open>b \\<in> sparsegrid' dm\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> sparsegrid' dm", "have \"length b = dm\""], ["proof (prove)\nusing this:\n  b \\<in> sparsegrid' dm\n\ngoal (1 subgoal):\n 1. length b = dm", "unfolding sparsegrid'_def start_def"], ["proof (prove)\nusing this:\n  b \\<in> grid (replicate dm (0, 1)) {0..<dm}\n\ngoal (1 subgoal):\n 1. length b = dm", "by auto"], ["proof (state)\nthis:\n  length b = dm\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "hence \"d < dm\""], ["proof (prove)\nusing this:\n  length b = dm\n\ngoal (1 subgoal):\n 1. d < dm", "using \\<open>d < length b\\<close>"], ["proof (prove)\nusing this:\n  length b = dm\n  d < length b\n\ngoal (1 subgoal):\n 1. d < dm", "by auto"], ["proof (state)\nthis:\n  d < dm\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "{"], ["proof (state)\nthis:\n  d < dm\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "fix p'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "assume \"p' \\<in> grid ?r {d}\""], ["proof (state)\nthis:\n  p' \\<in> grid (child b right d) {d}\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "hence \"p' \\<notin> grid ?l {d}\""], ["proof (prove)\nusing this:\n  p' \\<in> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. p' \\<notin> grid (child b left d) {d}", "using grid_disjunct[OF \\<open>d < length b\\<close>]"], ["proof (prove)\nusing this:\n  p' \\<in> grid (child b right d) {d}\n  grid (child b left d) ?ds \\<inter> grid (child b right d) ?ds = {}\n\ngoal (1 subgoal):\n 1. p' \\<notin> grid (child b left d) {d}", "by auto"], ["proof (state)\nthis:\n  p' \\<notin> grid (child b left d) {d}\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "hence \"snd ?ul p' = \\<alpha> p'\""], ["proof (prove)\nusing this:\n  p' \\<notin> grid (child b left d) {d}\n\ngoal (1 subgoal):\n 1. snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'", "using up'_inplace"], ["proof (prove)\nusing this:\n  p' \\<notin> grid (child b left d) {d}\n  \\<lbrakk>?p' \\<notin> grid ?p ?ds; ?d \\<in> ?ds\\<rbrakk>\n  \\<Longrightarrow> snd (up' ?d ?l ?p ?\\<alpha>) ?p' = ?\\<alpha> ?p'\n\ngoal (1 subgoal):\n 1. snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'", "by auto"], ["proof (state)\nthis:\n  snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "}"], ["proof (state)\nthis:\n  ?p'2 \\<in> grid (child b right d) {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "note eq = this"], ["proof (state)\nthis:\n  ?p'2 \\<in> grid (child b right d) {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n\ngoal (2 subgoals):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)\n 2. \\<And>l b p \\<alpha>.\n       \\<lbrakk>\\<And>b p \\<alpha>.\n                   \\<lbrakk>d < length b; l + level b = lm;\n                    b \\<in> sparsegrid' dm; p \\<in> sparsegrid' dm\\<rbrakk>\n                   \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                                     (if p \\<in> lgrid b {d} lm\nthen \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\nelse \\<alpha> p);\n        d < length b; Suc l + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d (Suc l) b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "show \"?goal (Suc l) b p \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "proof (cases \"p = b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "case True"], ["proof (state)\nthis:\n  p = b\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "let \"?C p'\" = \"\\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)\""], ["proof (state)\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "let \"?s s\" = \"\\<Sum> p' \\<in> (lgrid s {d} lm). ?C p'\""], ["proof (state)\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "have \"d < length ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d < length (child b left d)", "using \\<open>d < length b\\<close>"], ["proof (prove)\nusing this:\n  d < length b\n\ngoal (1 subgoal):\n 1. d < length (child b left d)", "by auto"], ["proof (state)\nthis:\n  d < length (child b left d)\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "from up'_fl_fr[OF this p_r_def]"], ["proof (chain)\npicking this:\n  child b left d = child ?p_l left d \\<Longrightarrow>\n  fst (up' d ?lm (child b left d) ?\\<alpha>) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} (?lm + level (child b left d)).\n     ?\\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n   \\<Sum>p'\\<in>lgrid (child b left d) {d} (?lm + level (child b left d)).\n     ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p_l ! d))", "have fml: \"snd (fst ?ul) = (\\<Sum> p' \\<in> lgrid ?l {d} (l + level ?l). ?C p')\""], ["proof (prove)\nusing this:\n  child b left d = child ?p_l left d \\<Longrightarrow>\n  fst (up' d ?lm (child b left d) ?\\<alpha>) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} (?lm + level (child b left d)).\n     ?\\<alpha> p' * l2_\\<phi> (p' ! d) (p_r ! d),\n   \\<Sum>p'\\<in>lgrid (child b left d) {d} (?lm + level (child b left d)).\n     ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p_l ! d))\n\ngoal (1 subgoal):\n 1. snd (fst (up' d l (child b left d) \\<alpha>)) =\n    (\\<Sum>p'\\<in>lgrid (child b left d) {d} (l + level (child b left d)).\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))", "by simp"], ["proof (state)\nthis:\n  snd (fst (up' d l (child b left d) \\<alpha>)) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} (l + level (child b left d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "have \"d < length ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d < length (child b right d)", "using \\<open>d < length b\\<close>"], ["proof (prove)\nusing this:\n  d < length b\n\ngoal (1 subgoal):\n 1. d < length (child b right d)", "by auto"], ["proof (state)\nthis:\n  d < length (child b right d)\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "from up'_fl_fr[OF this _ p_l_def, where \\<alpha>=\"snd ?ul\"]"], ["proof (chain)\npicking this:\n  child b right d = child ?p_r right d \\<Longrightarrow>\n  fst (up' d ?lm (child b right d)\n        (snd (up' d l (child b left d) \\<alpha>))) =\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} (?lm + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (?p_r ! d),\n   \\<Sum>p'\\<in>lgrid (child b right d) {d} (?lm + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (p_l ! d))", "have fmr: \"fst (fst ?ur) = (\\<Sum> p' \\<in> lgrid ?r {d} (l + level ?r).\n                                ((snd ?ul) p') * l2_\\<phi> (p' ! d) (b ! d))\""], ["proof (prove)\nusing this:\n  child b right d = child ?p_r right d \\<Longrightarrow>\n  fst (up' d ?lm (child b right d)\n        (snd (up' d l (child b left d) \\<alpha>))) =\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} (?lm + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (?p_r ! d),\n   \\<Sum>p'\\<in>lgrid (child b right d) {d} (?lm + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (p_l ! d))\n\ngoal (1 subgoal):\n 1. fst (fst (up' d l (child b right d)\n               (snd (up' d l (child b left d) \\<alpha>)))) =\n    (\\<Sum>p'\\<in>lgrid (child b right d) {d} (l + level (child b right d)).\n       snd (up' d l (child b left d) \\<alpha>) p' *\n       l2_\\<phi> (p' ! d) (b ! d))", "by simp"], ["proof (state)\nthis:\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>)))) =\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} (l + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (b ! d))\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "have \"level b < lm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. level b < lm", "using \\<open>Suc l + level b = lm\\<close>"], ["proof (prove)\nusing this:\n  Suc l + level b = lm\n\ngoal (1 subgoal):\n 1. level b < lm", "by auto"], ["proof (state)\nthis:\n  level b < lm\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "hence \"{ b } \\<subseteq> lgrid b {d} lm\""], ["proof (prove)\nusing this:\n  level b < lm\n\ngoal (1 subgoal):\n 1. {b} \\<subseteq> lgrid b {d} lm", "unfolding lgrid_def"], ["proof (prove)\nusing this:\n  level b < lm\n\ngoal (1 subgoal):\n 1. {b} \\<subseteq> {p \\<in> grid b {d}. level p < lm}", "by auto"], ["proof (state)\nthis:\n  {b} \\<subseteq> lgrid b {d} lm\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "from sum_diff[OF lgrid_finite this]"], ["proof (chain)\npicking this:\n  sum ?f (lgrid b {d} lm - {b}) = sum ?f (lgrid b {d} lm) - sum ?f {b}", "have \"(\\<Sum> p' \\<in> (lgrid b {d} lm) - {b}. ?C p') = ?s b - ?C b\""], ["proof (prove)\nusing this:\n  sum ?f (lgrid b {d} lm - {b}) = sum ?f (lgrid b {d} lm) - sum ?f {b}\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid b {d} lm - {b}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n    (\\<Sum>p'\\<in>lgrid b {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n    \\<alpha> b * l2_\\<phi> (b ! d) (b ! d)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid b {d} lm - {b}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  (\\<Sum>p'\\<in>lgrid b {d} lm. \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n  \\<alpha> b * l2_\\<phi> (b ! d) (b ! d)\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "also"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid b {d} lm - {b}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  (\\<Sum>p'\\<in>lgrid b {d} lm. \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n  \\<alpha> b * l2_\\<phi> (b ! d) (b ! d)\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "have \"\\<dots> = ?s ?l + ?s ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid b {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n    \\<alpha> b * l2_\\<phi> (b ! d) (b ! d) =\n    (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))", "using lgrid_sum and \\<open>level b < lm\\<close> and \\<open>d < length b\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?d < length ?b; level ?b < ?lm\\<rbrakk>\n  \\<Longrightarrow> sum ?F (lgrid ?b {?d} ?lm) =\n                    sum ?F (lgrid (child ?b left ?d) {?d} ?lm) +\n                    sum ?F (lgrid (child ?b right ?d) {?d} ?lm) +\n                    ?F ?b\n  level b < lm\n  d < length b\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid b {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n    \\<alpha> b * l2_\\<phi> (b ! d) (b ! d) =\n    (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid b {d} lm. \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n  \\<alpha> b * l2_\\<phi> (b ! d) (b ! d) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "also"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid b {d} lm. \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) -\n  \\<alpha> b * l2_\\<phi> (b ! d) (b ! d) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "have \"\\<dots> = snd (fst ?ul) + fst (fst ?ur)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n    snd (fst (up' d l (child b left d) \\<alpha>)) +\n    fst (fst (up' d l (child b right d)\n               (snd (up' d l (child b left d) \\<alpha>))))", "using fml and fmr\n      and \\<open>Suc l + level b = lm\\<close> and child_level[OF \\<open>d < length b\\<close>]"], ["proof (prove)\nusing this:\n  snd (fst (up' d l (child b left d) \\<alpha>)) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} (l + level (child b left d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>)))) =\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} (l + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (b ! d))\n  Suc l + level b = lm\n  level (child b ?dir d) = level b + 1\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n    snd (fst (up' d l (child b left d) \\<alpha>)) +\n    fst (fst (up' d l (child b right d)\n               (snd (up' d l (child b left d) \\<alpha>))))", "using eq"], ["proof (prove)\nusing this:\n  snd (fst (up' d l (child b left d) \\<alpha>)) =\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} (l + level (child b left d)).\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>)))) =\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} (l + level (child b right d)).\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (b ! d))\n  Suc l + level b = lm\n  level (child b ?dir d) = level b + 1\n  ?p'2 \\<in> grid (child b right d) {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n    (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n    snd (fst (up' d l (child b left d) \\<alpha>)) +\n    fst (fst (up' d l (child b right d)\n               (snd (up' d l (child b left d) \\<alpha>))))", "unfolding True lgrid_def"], ["proof (prove)\nusing this:\n  snd (fst (up' d l (child b left d) \\<alpha>)) =\n  (\\<Sum>p'\\<in>{p \\<in> grid (child b left d) {d}.\n                 level p < l + level (child b left d)}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d))\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>)))) =\n  (\\<Sum>p'\\<in>{p \\<in> grid (child b right d) {d}.\n                 level p < l + level (child b right d)}.\n     snd (up' d l (child b left d) \\<alpha>) p' *\n     l2_\\<phi> (p' ! d) (b ! d))\n  Suc l + level b = lm\n  level (child b ?dir d) = level b + 1\n  ?p'2 \\<in> grid (child b right d) {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>{p \\<in> grid (child b left d) {d}. level p < lm}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n    (\\<Sum>p'\\<in>{p \\<in> grid (child b right d) {d}. level p < lm}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n    snd (fst (up' d l (child b left d) \\<alpha>)) +\n    fst (fst (up' d l (child b right d)\n               (snd (up' d l (child b left d) \\<alpha>))))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>p'\\<in>lgrid (child b left d) {d} lm.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) +\n  (\\<Sum>p'\\<in>lgrid (child b right d) {d} lm.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  snd (fst (up' d l (child b left d) \\<alpha>)) +\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>))))\n\ngoal (2 subgoals):\n 1. p = b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>p'\\<in>lgrid b {d} lm - {b}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  snd (fst (up' d l (child b left d) \\<alpha>)) +\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>))))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>lgrid b {d} lm - {b}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  snd (fst (up' d l (child b left d) \\<alpha>)) +\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>))))\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "unfolding up'.simps Let_def and fun_upd_def lgrid_def"], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>{p \\<in> grid b {d}. level p < lm} - {b}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  snd (fst (up' d l (child b left d) \\<alpha>)) +\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>))))\n\ngoal (1 subgoal):\n 1. snd (case up' d l (child b left d) \\<alpha> of\n         (x, xa) \\<Rightarrow>\n           (case x of\n            (f\\<^sub>l, f\\<^sub>m\\<^sub>l) \\<Rightarrow>\n              \\<lambda>\\<alpha>.\n                 case up' d l (child b right d) \\<alpha> of\n                 (x, xa) \\<Rightarrow>\n                   (case x of\n                    (f\\<^sub>m\\<^sub>r, f\\<^sub>r) \\<Rightarrow>\n                      \\<lambda>\\<alpha>.\n                         ((f\\<^sub>l +\n                           (f\\<^sub>m\\<^sub>l + f\\<^sub>m\\<^sub>r +\n                            \\<alpha> b / 2 ^ lv b d / 2) /\n                           2,\n                           f\\<^sub>r +\n                           (f\\<^sub>m\\<^sub>l + f\\<^sub>m\\<^sub>r +\n                            \\<alpha> b / 2 ^ lv b d / 2) /\n                           2),\n                          \\<lambda>x.\n                             if x = b\n                             then f\\<^sub>m\\<^sub>l + f\\<^sub>m\\<^sub>r\n                             else \\<alpha> x))\n                    xa)\n            xa)\n     p =\n    (if p \\<in> {p \\<in> grid b {d}. level p < lm}\n     then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>p = b\\<close> and \\<open>level b < lm\\<close>"], ["proof (prove)\nusing this:\n  (\\<Sum>p'\\<in>{p \\<in> grid b {d}. level p < lm} - {b}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (b ! d)) =\n  snd (fst (up' d l (child b left d) \\<alpha>)) +\n  fst (fst (up' d l (child b right d)\n             (snd (up' d l (child b left d) \\<alpha>))))\n  p = b\n  level b < lm\n\ngoal (1 subgoal):\n 1. snd (case up' d l (child b left d) \\<alpha> of\n         (x, xa) \\<Rightarrow>\n           (case x of\n            (f\\<^sub>l, f\\<^sub>m\\<^sub>l) \\<Rightarrow>\n              \\<lambda>\\<alpha>.\n                 case up' d l (child b right d) \\<alpha> of\n                 (x, xa) \\<Rightarrow>\n                   (case x of\n                    (f\\<^sub>m\\<^sub>r, f\\<^sub>r) \\<Rightarrow>\n                      \\<lambda>\\<alpha>.\n                         ((f\\<^sub>l +\n                           (f\\<^sub>m\\<^sub>l + f\\<^sub>m\\<^sub>r +\n                            \\<alpha> b / 2 ^ lv b d / 2) /\n                           2,\n                           f\\<^sub>r +\n                           (f\\<^sub>m\\<^sub>l + f\\<^sub>m\\<^sub>r +\n                            \\<alpha> b / 2 ^ lv b d / 2) /\n                           2),\n                          \\<lambda>x.\n                             if x = b\n                             then f\\<^sub>m\\<^sub>l + f\\<^sub>m\\<^sub>r\n                             else \\<alpha> x))\n                    xa)\n            xa)\n     p =\n    (if p \\<in> {p \\<in> grid b {d}. level p < lm}\n     then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "by (cases ?ul, cases ?ur, auto)"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> b\n\ngoal (1 subgoal):\n 1. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "have \"?r \\<in> sparsegrid' dm\" and \"?l \\<in> sparsegrid' dm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. child b right d \\<in> sparsegrid' dm &&&\n    child b left d \\<in> sparsegrid' dm", "using \\<open>b \\<in> sparsegrid' dm\\<close> and \\<open>d < dm\\<close>"], ["proof (prove)\nusing this:\n  b \\<in> sparsegrid' dm\n  d < dm\n\ngoal (1 subgoal):\n 1. child b right d \\<in> sparsegrid' dm &&&\n    child b left d \\<in> sparsegrid' dm", "unfolding sparsegrid'_def"], ["proof (prove)\nusing this:\n  b \\<in> grid (start dm) {0..<dm}\n  d < dm\n\ngoal (1 subgoal):\n 1. child b right d \\<in> grid (start dm) {0..<dm} &&&\n    child b left d \\<in> grid (start dm) {0..<dm}", "by auto"], ["proof (state)\nthis:\n  child b right d \\<in> sparsegrid' dm\n  child b left d \\<in> sparsegrid' dm\n\ngoal (1 subgoal):\n 1. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "from Suc.hyps[OF _ _ this(1)] Suc.hyps[OF _ _ this(2)]"], ["proof (chain)\npicking this:\n  \\<lbrakk>d < length (child b right d); l + level (child b right d) = lm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l (child b right d) ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid (child b right d) {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)\n  \\<lbrakk>d < length (child b left d); l + level (child b left d) = lm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l (child b left d) ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid (child b left d) {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)", "have \"?goal l ?l p \\<alpha>\" and \"?goal l ?r p (snd ?ul)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>d < length (child b right d); l + level (child b right d) = lm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l (child b right d) ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid (child b right d) {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)\n  \\<lbrakk>d < length (child b left d); l + level (child b left d) = lm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l (child b left d) ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid (child b left d) {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)\n\ngoal (1 subgoal):\n 1. snd (up' d l (child b left d) \\<alpha>) p =\n    (if p \\<in> lgrid (child b left d) {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p) &&&\n    snd (up' d l (child b right d)\n          (snd (up' d l (child b left d) \\<alpha>)))\n     p =\n    (if p \\<in> lgrid (child b right d) {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            snd (up' d l (child b left d) \\<alpha>) p' *\n            l2_\\<phi> (p' ! d) (p ! d)\n     else snd (up' d l (child b left d) \\<alpha>) p)", "using \\<open>d < length b\\<close> and \\<open>Suc l + level b = lm\\<close> and \\<open>p \\<in> sparsegrid' dm\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>d < length (child b right d); l + level (child b right d) = lm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l (child b right d) ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid (child b right d) {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)\n  \\<lbrakk>d < length (child b left d); l + level (child b left d) = lm;\n   ?p \\<in> sparsegrid' dm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d l (child b left d) ?\\<alpha>) ?p =\n                    (if ?p \\<in> lgrid (child b left d) {d} lm\n                     then \\<Sum>p'\\<in>lgrid ?p {d} lm - {?p}.\n                            ?\\<alpha> p' * l2_\\<phi> (p' ! d) (?p ! d)\n                     else ?\\<alpha> ?p)\n  d < length b\n  Suc l + level b = lm\n  p \\<in> sparsegrid' dm\n\ngoal (1 subgoal):\n 1. snd (up' d l (child b left d) \\<alpha>) p =\n    (if p \\<in> lgrid (child b left d) {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p) &&&\n    snd (up' d l (child b right d)\n          (snd (up' d l (child b left d) \\<alpha>)))\n     p =\n    (if p \\<in> lgrid (child b right d) {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            snd (up' d l (child b left d) \\<alpha>) p' *\n            l2_\\<phi> (p' ! d) (p ! d)\n     else snd (up' d l (child b left d) \\<alpha>) p)", "by auto"], ["proof (state)\nthis:\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> b \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "proof (cases \"p \\<in> lgrid b {d} lm\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "case True"], ["proof (state)\nthis:\n  p \\<in> lgrid b {d} lm\n\ngoal (2 subgoals):\n 1. p \\<in> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "hence \"level p < lm\" and \"p \\<in> grid b {d}\""], ["proof (prove)\nusing this:\n  p \\<in> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. level p < lm &&& p \\<in> grid b {d}", "unfolding lgrid_def"], ["proof (prove)\nusing this:\n  p \\<in> {p \\<in> grid b {d}. level p < lm}\n\ngoal (1 subgoal):\n 1. level p < lm &&& p \\<in> grid b {d}", "by auto"], ["proof (state)\nthis:\n  level p < lm\n  p \\<in> grid b {d}\n\ngoal (2 subgoals):\n 1. p \\<in> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "hence \"p \\<in> grid ?l {d} \\<or> p \\<in> grid ?r {d}\""], ["proof (prove)\nusing this:\n  level p < lm\n  p \\<in> grid b {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b left d) {d} \\<or>\n    p \\<in> grid (child b right d) {d}", "unfolding grid_partition[of b]"], ["proof (prove)\nusing this:\n  level p < lm\n  p \\<in> {b} \\<union> grid (child b left d) {d} \\<union>\n          grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b left d) {d} \\<or>\n    p \\<in> grid (child b right d) {d}", "using \\<open>p \\<noteq> b\\<close>"], ["proof (prove)\nusing this:\n  level p < lm\n  p \\<in> {b} \\<union> grid (child b left d) {d} \\<union>\n          grid (child b right d) {d}\n  p \\<noteq> b\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b left d) {d} \\<or>\n    p \\<in> grid (child b right d) {d}", "by auto"], ["proof (state)\nthis:\n  p \\<in> grid (child b left d) {d} \\<or> p \\<in> grid (child b right d) {d}\n\ngoal (2 subgoals):\n 1. p \\<in> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> grid (child b left d) {d} \\<or> p \\<in> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> grid (child b left d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "assume \"p \\<in> grid (child b left d) {d}\""], ["proof (state)\nthis:\n  p \\<in> grid (child b left d) {d}\n\ngoal (2 subgoals):\n 1. p \\<in> grid (child b left d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "hence \"p \\<notin> grid (child b right d) {d}\""], ["proof (prove)\nusing this:\n  p \\<in> grid (child b left d) {d}\n\ngoal (1 subgoal):\n 1. p \\<notin> grid (child b right d) {d}", "using grid_disjunct[OF \\<open>d < length b\\<close>]"], ["proof (prove)\nusing this:\n  p \\<in> grid (child b left d) {d}\n  grid (child b left d) ?ds \\<inter> grid (child b right d) ?ds = {}\n\ngoal (1 subgoal):\n 1. p \\<notin> grid (child b right d) {d}", "by auto"], ["proof (state)\nthis:\n  p \\<notin> grid (child b right d) {d}\n\ngoal (2 subgoals):\n 1. p \\<in> grid (child b left d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)\n 2. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>?goal l ?l p \\<alpha>\\<close> and \\<open>?goal l ?r p (snd ?ul)\\<close>"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b right d) {d}\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>p \\<noteq> b\\<close> \\<open>p \\<in> lgrid b {d} lm\\<close>"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b right d) {d}\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n  p \\<noteq> b\n  p \\<in> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "unfolding lgrid_def grid_partition[of b]"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b right d) {d}\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> {p \\<in> grid (child b left d) {d}. level p < lm}\n   then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> {p \\<in> grid (child b right d) {d}. level p < lm}\n   then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n  p \\<noteq> b\n  p \\<in> {p \\<in> {b} \\<union> grid (child b left d) {d} \\<union>\n                   grid (child b right d) {d}.\n           level p < lm}\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> {p \\<in> {b} \\<union> grid (child b left d) {d} \\<union>\n                         grid (child b right d) {d}.\n                 level p < lm}\n     then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "by (cases ?ul, cases ?ur, auto simp add: Let_def)"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "assume *: \"p \\<in> grid (child b right d) {d}\""], ["proof (state)\nthis:\n  p \\<in> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "hence \"p \\<notin> grid (child b left d) {d}\""], ["proof (prove)\nusing this:\n  p \\<in> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. p \\<notin> grid (child b left d) {d}", "using grid_disjunct[OF \\<open>d < length b\\<close>]"], ["proof (prove)\nusing this:\n  p \\<in> grid (child b right d) {d}\n  grid (child b left d) ?ds \\<inter> grid (child b right d) ?ds = {}\n\ngoal (1 subgoal):\n 1. p \\<notin> grid (child b left d) {d}", "by auto"], ["proof (state)\nthis:\n  p \\<notin> grid (child b left d) {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "moreover"], ["proof (state)\nthis:\n  p \\<notin> grid (child b left d) {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "{"], ["proof (state)\nthis:\n  p \\<notin> grid (child b left d) {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "fix p'"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "assume \"p' \\<in> grid p {d}\""], ["proof (state)\nthis:\n  p' \\<in> grid p {d}\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "from grid_transitive[OF this *] eq[of p']"], ["proof (chain)\npicking this:\n  \\<lbrakk>{d} \\<subseteq> ?ds''; {d} \\<subseteq> ?ds''\\<rbrakk>\n  \\<Longrightarrow> p' \\<in> grid (child b right d) ?ds''\n  p' \\<in> grid (child b right d) {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'", "have \"snd ?ul p' = \\<alpha> p'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>{d} \\<subseteq> ?ds''; {d} \\<subseteq> ?ds''\\<rbrakk>\n  \\<Longrightarrow> p' \\<in> grid (child b right d) ?ds''\n  p' \\<in> grid (child b right d) {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'\n\ngoal (1 subgoal):\n 1. snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'", "by simp"], ["proof (state)\nthis:\n  snd (up' d l (child b left d) \\<alpha>) p' = \\<alpha> p'\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "}"], ["proof (state)\nthis:\n  ?p'2 \\<in> grid p {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n\ngoal (1 subgoal):\n 1. p \\<in> grid (child b right d) {d} \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "ultimately"], ["proof (chain)\npicking this:\n  p \\<notin> grid (child b left d) {d}\n  ?p'2 \\<in> grid p {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b left d) {d}\n  ?p'2 \\<in> grid p {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>?goal l ?l p \\<alpha>\\<close> and \\<open>?goal l ?r p (snd ?ul)\\<close>"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b left d) {d}\n  ?p'2 \\<in> grid p {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>p \\<noteq> b\\<close> \\<open>p \\<in> lgrid b {d} lm\\<close> *"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b left d) {d}\n  ?p'2 \\<in> grid p {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n  p \\<noteq> b\n  p \\<in> lgrid b {d} lm\n  p \\<in> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "unfolding lgrid_def"], ["proof (prove)\nusing this:\n  p \\<notin> grid (child b left d) {d}\n  ?p'2 \\<in> grid p {d} \\<Longrightarrow>\n  snd (up' d l (child b left d) \\<alpha>) ?p'2 = \\<alpha> ?p'2\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> {p \\<in> grid (child b left d) {d}. level p < lm}\n   then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> {p \\<in> grid (child b right d) {d}. level p < lm}\n   then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n  p \\<noteq> b\n  p \\<in> {p \\<in> grid b {d}. level p < lm}\n  p \\<in> grid (child b right d) {d}\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> {p \\<in> grid b {d}. level p < lm}\n     then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "by (cases ?ul, cases ?ur, auto simp add: Let_def)"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal (1 subgoal):\n 1. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "case False"], ["proof (state)\nthis:\n  p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "then"], ["proof (chain)\npicking this:\n  p \\<notin> lgrid b {d} lm", "have \"p \\<notin> lgrid ?l {d} lm\" and \"p \\<notin> lgrid ?r {d} lm\""], ["proof (prove)\nusing this:\n  p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. p \\<notin> lgrid (child b left d) {d} lm &&&\n    p \\<notin> lgrid (child b right d) {d} lm", "unfolding lgrid_def and grid_partition[where p=b]"], ["proof (prove)\nusing this:\n  p \\<notin> {p \\<in> {b} \\<union> grid (child b left d) {d} \\<union>\n                      grid (child b right d) {d}.\n              level p < lm}\n\ngoal (1 subgoal):\n 1. p \\<notin> {p \\<in> grid (child b left d) {d}. level p < lm} &&&\n    p \\<notin> {p \\<in> grid (child b right d) {d}. level p < lm}", "by auto"], ["proof (state)\nthis:\n  p \\<notin> lgrid (child b left d) {d} lm\n  p \\<notin> lgrid (child b right d) {d} lm\n\ngoal (1 subgoal):\n 1. p \\<notin> lgrid b {d} lm \\<Longrightarrow>\n    snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "with False"], ["proof (chain)\npicking this:\n  p \\<notin> lgrid b {d} lm\n  p \\<notin> lgrid (child b left d) {d} lm\n  p \\<notin> lgrid (child b right d) {d} lm", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> lgrid b {d} lm\n  p \\<notin> lgrid (child b left d) {d} lm\n  p \\<notin> lgrid (child b right d) {d} lm\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>?goal l ?l p \\<alpha>\\<close> and \\<open>?goal l ?r p (snd ?ul)\\<close>"], ["proof (prove)\nusing this:\n  p \\<notin> lgrid b {d} lm\n  p \\<notin> lgrid (child b left d) {d} lm\n  p \\<notin> lgrid (child b right d) {d} lm\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "using \\<open>p \\<noteq> b\\<close> \\<open>p \\<notin> lgrid b {d} lm\\<close>"], ["proof (prove)\nusing this:\n  p \\<notin> lgrid b {d} lm\n  p \\<notin> lgrid (child b left d) {d} lm\n  p \\<notin> lgrid (child b right d) {d} lm\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> lgrid (child b left d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> lgrid (child b right d) {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n  p \\<noteq> b\n  p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "unfolding lgrid_def"], ["proof (prove)\nusing this:\n  p \\<notin> {p \\<in> grid b {d}. level p < lm}\n  p \\<notin> {p \\<in> grid (child b left d) {d}. level p < lm}\n  p \\<notin> {p \\<in> grid (child b right d) {d}. level p < lm}\n  snd (up' d l (child b left d) \\<alpha>) p =\n  (if p \\<in> {p \\<in> grid (child b left d) {d}. level p < lm}\n   then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n  snd (up' d l (child b right d) (snd (up' d l (child b left d) \\<alpha>)))\n   p =\n  (if p \\<in> {p \\<in> grid (child b right d) {d}. level p < lm}\n   then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n          snd (up' d l (child b left d) \\<alpha>) p' *\n          l2_\\<phi> (p' ! d) (p ! d)\n   else snd (up' d l (child b left d) \\<alpha>) p)\n  p \\<noteq> b\n  p \\<notin> {p \\<in> grid b {d}. level p < lm}\n\ngoal (1 subgoal):\n 1. snd (up' d (Suc l) b \\<alpha>) p =\n    (if p \\<in> {p \\<in> grid b {d}. level p < lm}\n     then \\<Sum>p'\\<in>{p \\<in> grid p {d}. level p < lm} - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "by (cases ?ul, cases ?ur, auto simp add: Let_def)"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (up' d (Suc l) b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal (1 subgoal):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "case 0"], ["proof (state)\nthis:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n\ngoal (1 subgoal):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "then"], ["proof (chain)\npicking this:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm", "have \"lgrid b {d} lm = {}\""], ["proof (prove)\nusing this:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n\ngoal (1 subgoal):\n 1. lgrid b {d} lm = {}", "using lgrid_empty'[where p=b and lm=lm and ds=\"{d}\"]"], ["proof (prove)\nusing this:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n  lm \\<le> level b \\<Longrightarrow> lgrid b {d} lm = {}\n\ngoal (1 subgoal):\n 1. lgrid b {d} lm = {}", "by auto"], ["proof (state)\nthis:\n  lgrid b {d} lm = {}\n\ngoal (1 subgoal):\n 1. \\<And>b p \\<alpha>.\n       \\<lbrakk>d < length b; 0 + level b = lm; b \\<in> sparsegrid' dm;\n        p \\<in> sparsegrid' dm\\<rbrakk>\n       \\<Longrightarrow> snd (up' d 0 b \\<alpha>) p =\n                         (if p \\<in> lgrid b {d} lm\n                          then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n                                 \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n                          else \\<alpha> p)", "with 0"], ["proof (chain)\npicking this:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n  lgrid b {d} lm = {}", "show ?case"], ["proof (prove)\nusing this:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n  lgrid b {d} lm = {}\n\ngoal (1 subgoal):\n 1. snd (up' d 0 b \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "unfolding up'.simps"], ["proof (prove)\nusing this:\n  d < length b\n  0 + level b = lm\n  b \\<in> sparsegrid' dm\n  p \\<in> sparsegrid' dm\n  lgrid b {d} lm = {}\n\ngoal (1 subgoal):\n 1. snd ((0, 0), \\<alpha>) p =\n    (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p)", "by auto"], ["proof (state)\nthis:\n  snd (up' d 0 b \\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else \\<alpha> p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma up:\n  assumes \"d < dm\" and \"p \\<in> sparsegrid dm lm\"\n  shows \"(up dm lm d \\<alpha>) p = (\\<Sum> p' \\<in> (lgrid p {d} lm) - {p}. \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "let ?S = \"\\<lambda> x p p'. if p' \\<in> grid p {d} - {p} then x * l2_\\<phi> (p'!d) (p!d) else 0\""], ["proof (state)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "let ?F = \"\\<lambda> d lm p \\<alpha>. snd (up' d lm p \\<alpha>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "fix p b"], ["proof (state)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "assume \"p \\<in> grid b {d}\""], ["proof (state)\nthis:\n  p \\<in> grid b {d}\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "from grid_transitive[OF _ this subset_refl subset_refl]"], ["proof (chain)\npicking this:\n  ?a \\<in> grid p {d} \\<Longrightarrow> ?a \\<in> grid b {d}", "have \"lgrid b {d} lm \\<inter> (grid p {d} - {p}) = lgrid p {d} lm - {p}\""], ["proof (prove)\nusing this:\n  ?a \\<in> grid p {d} \\<Longrightarrow> ?a \\<in> grid b {d}\n\ngoal (1 subgoal):\n 1. lgrid b {d} lm \\<inter> (grid p {d} - {p}) = lgrid p {d} lm - {p}", "unfolding lgrid_def"], ["proof (prove)\nusing this:\n  ?a \\<in> grid p {d} \\<Longrightarrow> ?a \\<in> grid b {d}\n\ngoal (1 subgoal):\n 1. {p \\<in> grid b {d}. level p < lm} \\<inter> (grid p {d} - {p}) =\n    {p \\<in> grid p {d}. level p < lm} - {p}", "by auto"], ["proof (state)\nthis:\n  lgrid b {d} lm \\<inter> (grid p {d} - {p}) = lgrid p {d} lm - {p}\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "}"], ["proof (state)\nthis:\n  ?pa2 \\<in> grid ?b2 {d} \\<Longrightarrow>\n  lgrid ?b2 {d} lm \\<inter> (grid ?pa2 {d} - {?pa2}) =\n  lgrid ?pa2 {d} lm - {?pa2}\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "note lgrid_eq = this"], ["proof (state)\nthis:\n  ?pa2 \\<in> grid ?b2 {d} \\<Longrightarrow>\n  lgrid ?b2 {d} lm \\<inter> (grid ?pa2 {d} - {?pa2}) =\n  lgrid ?pa2 {d} lm - {?pa2}\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "{"], ["proof (state)\nthis:\n  ?pa2 \\<in> grid ?b2 {d} \\<Longrightarrow>\n  lgrid ?b2 {d} lm \\<inter> (grid ?pa2 {d} - {?pa2}) =\n  lgrid ?pa2 {d} lm - {?pa2}\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "fix l b p \\<alpha>"], ["proof (state)\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "assume b: \"b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm\""], ["proof (state)\nthis:\n  b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "hence \"b \\<in> sparsegrid' dm\" and \"d < length b\""], ["proof (prove)\nusing this:\n  b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm\n\ngoal (1 subgoal):\n 1. b \\<in> sparsegrid' dm &&& d < length b", "using sparsegrid'_start \\<open>d < dm\\<close>"], ["proof (prove)\nusing this:\n  b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm\n  ?b \\<in> grid (start ?dm) ?ds \\<Longrightarrow> ?b \\<in> sparsegrid' ?dm\n  d < dm\n\ngoal (1 subgoal):\n 1. b \\<in> sparsegrid' dm &&& d < length b", "by auto"], ["proof (state)\nthis:\n  b \\<in> sparsegrid' dm\n  d < length b\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "assume l: \"l + level b = lm\" and p: \"p \\<in> sparsegrid dm lm\""], ["proof (state)\nthis:\n  l + level b = lm\n  p \\<in> sparsegrid dm lm\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "note sparsegridE[OF p]"], ["proof (state)\nthis:\n  p \\<in> sparsegrid' dm\n  level p < lm\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "note up' = up'_\\<beta>[OF \\<open>d < length b\\<close> l \\<open>b \\<in> sparsegrid' dm\\<close> \\<open>p \\<in> sparsegrid' dm\\<close>]"], ["proof (state)\nthis:\n  snd (up' d l b ?\\<alpha>) p =\n  (if p \\<in> lgrid b {d} lm\n   then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n          ?\\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n   else ?\\<alpha> p)\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "have \"?F d l b \\<alpha> p =\n          (if b = base {d} p then (\\<Sum>p'\\<in>lgrid b {d} lm. ?S (\\<alpha> p') p p') else \\<alpha> p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "proof (cases \"b = base {d} p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b = base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)\n 2. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "case True"], ["proof (state)\nthis:\n  b = base {d} p\n\ngoal (2 subgoals):\n 1. b = base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)\n 2. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "with baseE(2)[OF \\<open>p \\<in> sparsegrid' dm\\<close>] \\<open>level p < lm\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> grid (base ?ds p) ?ds\n  level p < lm\n  b = base {d} p", "have \"p \\<in> lgrid b {d} lm\" and \"p \\<in> grid b {d}\""], ["proof (prove)\nusing this:\n  p \\<in> grid (base ?ds p) ?ds\n  level p < lm\n  b = base {d} p\n\ngoal (1 subgoal):\n 1. p \\<in> lgrid b {d} lm &&& p \\<in> grid b {d}", "by auto"], ["proof (state)\nthis:\n  p \\<in> lgrid b {d} lm\n  p \\<in> grid b {d}\n\ngoal (2 subgoals):\n 1. b = base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)\n 2. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "using lgrid_eq[OF \\<open>p \\<in> grid b {d}\\<close>]"], ["proof (prove)\nusing this:\n  lgrid b {d} lm \\<inter> (grid p {d} - {p}) = lgrid p {d} lm - {p}\n\ngoal (1 subgoal):\n 1. snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "unfolding up' if_P[OF True] if_P[OF \\<open>p \\<in> lgrid b {d} lm\\<close>]"], ["proof (prove)\nusing this:\n  lgrid b {d} lm \\<inter> (grid p {d} - {p}) = lgrid p {d} lm - {p}\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)) =\n    (\\<Sum>p'\\<in>lgrid b {d} lm.\n       if p' \\<in> grid p {d} - {p}\n       then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0)", "by (intro sum.mono_neutral_cong_left lgrid_finite) auto"], ["proof (state)\nthis:\n  snd (up' d l b \\<alpha>) p =\n  (if b = base {d} p\n   then \\<Sum>p'\\<in>lgrid b {d} lm.\n          if p' \\<in> grid p {d} - {p}\n          then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n   else \\<alpha> p)\n\ngoal (1 subgoal):\n 1. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "case False"], ["proof (state)\nthis:\n  b \\<noteq> base {d} p\n\ngoal (1 subgoal):\n 1. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "moreover"], ["proof (state)\nthis:\n  b \\<noteq> base {d} p\n\ngoal (1 subgoal):\n 1. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "have \"p \\<notin> lgrid b {d} lm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> lgrid b {d} lm", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> p \\<notin> lgrid b {d} lm \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. \\<not> p \\<notin> lgrid b {d} lm \\<Longrightarrow> False", "hence \"base {d} p = b\""], ["proof (prove)\nusing this:\n  \\<not> p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. base {d} p = b", "using b"], ["proof (prove)\nusing this:\n  \\<not> p \\<notin> lgrid b {d} lm\n  b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm\n\ngoal (1 subgoal):\n 1. base {d} p = b", "by (auto intro!: baseI)"], ["proof (state)\nthis:\n  base {d} p = b\n\ngoal (1 subgoal):\n 1. \\<not> p \\<notin> lgrid b {d} lm \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  base {d} p = b\n\ngoal (1 subgoal):\n 1. False", "using False"], ["proof (prove)\nusing this:\n  base {d} p = b\n  b \\<noteq> base {d} p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. b \\<noteq> base {d} p \\<Longrightarrow>\n    snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "ultimately"], ["proof (chain)\npicking this:\n  b \\<noteq> base {d} p\n  p \\<notin> lgrid b {d} lm", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<noteq> base {d} p\n  p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. snd (up' d l b \\<alpha>) p =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "unfolding up'"], ["proof (prove)\nusing this:\n  b \\<noteq> base {d} p\n  p \\<notin> lgrid b {d} lm\n\ngoal (1 subgoal):\n 1. (if p \\<in> lgrid b {d} lm\n     then \\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n            \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d)\n     else \\<alpha> p) =\n    (if b = base {d} p\n     then \\<Sum>p'\\<in>lgrid b {d} lm.\n            if p' \\<in> grid p {d} - {p}\n            then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n     else \\<alpha> p)", "by auto"], ["proof (state)\nthis:\n  snd (up' d l b \\<alpha>) p =\n  (if b = base {d} p\n   then \\<Sum>p'\\<in>lgrid b {d} lm.\n          if p' \\<in> grid p {d} - {p}\n          then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n   else \\<alpha> p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (up' d l b \\<alpha>) p =\n  (if b = base {d} p\n   then \\<Sum>p'\\<in>lgrid b {d} lm.\n          if p' \\<in> grid p {d} - {p}\n          then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0\n   else \\<alpha> p)\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?b2 \\<in> lgrid (start dm) ({0..<dm} - {d}) lm;\n   ?l2 + level ?b2 = lm; ?pa2 \\<in> sparsegrid dm lm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d ?l2 ?b2 ?\\<alpha>'2) ?pa2 =\n                    (if ?b2 = base {d} ?pa2\n                     then \\<Sum>p'\\<in>lgrid ?b2 {d} lm.\n                            if p' \\<in> grid ?pa2 {d} - {?pa2}\n                            then ?\\<alpha>'2 p' *\n                                 l2_\\<phi> (p' ! d) (?pa2 ! d)\n                            else 0\n                     else ?\\<alpha>'2 ?pa2)\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "with lift[where F = ?F, OF \\<open>d < dm\\<close> \\<open>p \\<in> sparsegrid dm lm\\<close>]"], ["proof (chain)\npicking this:\n  (\\<And>l b p \\<alpha>.\n      \\<lbrakk>b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm;\n       l + level b = lm; p \\<in> sparsegrid dm lm\\<rbrakk>\n      \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                        (if b = base {d} p\n                         then \\<Sum>p'\\<in>lgrid b {d} lm.\n                                ?S (\\<alpha> p') p p'\n                         else \\<alpha> p)) \\<Longrightarrow>\n  lift (\\<lambda>d lm p \\<alpha>. snd (up' d lm p \\<alpha>)) dm lm d\n   ?\\<alpha> p =\n  (\\<Sum>p'\\<in>lgrid (base {d} p) {d} lm. ?S (?\\<alpha> p') p p')\n  \\<lbrakk>?b2 \\<in> lgrid (start dm) ({0..<dm} - {d}) lm;\n   ?l2 + level ?b2 = lm; ?pa2 \\<in> sparsegrid dm lm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d ?l2 ?b2 ?\\<alpha>'2) ?pa2 =\n                    (if ?b2 = base {d} ?pa2\n                     then \\<Sum>p'\\<in>lgrid ?b2 {d} lm.\n                            if p' \\<in> grid ?pa2 {d} - {?pa2}\n                            then ?\\<alpha>'2 p' *\n                                 l2_\\<phi> (p' ! d) (?pa2 ! d)\n                            else 0\n                     else ?\\<alpha>'2 ?pa2)", "have lift_eq: \"lift ?F dm lm d \\<alpha> p =\n         (\\<Sum>p'\\<in>lgrid (base {d} p) {d} lm. ?S (\\<alpha> p') p p')\""], ["proof (prove)\nusing this:\n  (\\<And>l b p \\<alpha>.\n      \\<lbrakk>b \\<in> lgrid (start dm) ({0..<dm} - {d}) lm;\n       l + level b = lm; p \\<in> sparsegrid dm lm\\<rbrakk>\n      \\<Longrightarrow> snd (up' d l b \\<alpha>) p =\n                        (if b = base {d} p\n                         then \\<Sum>p'\\<in>lgrid b {d} lm.\n                                ?S (\\<alpha> p') p p'\n                         else \\<alpha> p)) \\<Longrightarrow>\n  lift (\\<lambda>d lm p \\<alpha>. snd (up' d lm p \\<alpha>)) dm lm d\n   ?\\<alpha> p =\n  (\\<Sum>p'\\<in>lgrid (base {d} p) {d} lm. ?S (?\\<alpha> p') p p')\n  \\<lbrakk>?b2 \\<in> lgrid (start dm) ({0..<dm} - {d}) lm;\n   ?l2 + level ?b2 = lm; ?pa2 \\<in> sparsegrid dm lm\\<rbrakk>\n  \\<Longrightarrow> snd (up' d ?l2 ?b2 ?\\<alpha>'2) ?pa2 =\n                    (if ?b2 = base {d} ?pa2\n                     then \\<Sum>p'\\<in>lgrid ?b2 {d} lm.\n                            if p' \\<in> grid ?pa2 {d} - {?pa2}\n                            then ?\\<alpha>'2 p' *\n                                 l2_\\<phi> (p' ! d) (?pa2 ! d)\n                            else 0\n                     else ?\\<alpha>'2 ?pa2)\n\ngoal (1 subgoal):\n 1. lift (\\<lambda>d lm p \\<alpha>. snd (up' d lm p \\<alpha>)) dm lm d\n     \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid (base {d} p) {d} lm.\n       if p' \\<in> grid p {d} - {p}\n       then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0)", "by auto"], ["proof (state)\nthis:\n  lift (\\<lambda>d lm p \\<alpha>. snd (up' d lm p \\<alpha>)) dm lm d\n   \\<alpha> p =\n  (\\<Sum>p'\\<in>lgrid (base {d} p) {d} lm.\n     if p' \\<in> grid p {d} - {p}\n     then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0)\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "from lgrid_eq[OF baseE(2)[OF sparsegrid_subset[OF \\<open>p \\<in> sparsegrid dm lm\\<close>]]]"], ["proof (chain)\npicking this:\n  lgrid (base {d} p) {d} lm \\<inter> (grid p {d} - {p}) =\n  lgrid p {d} lm - {p}", "show ?thesis"], ["proof (prove)\nusing this:\n  lgrid (base {d} p) {d} lm \\<inter> (grid p {d} - {p}) =\n  lgrid p {d} lm - {p}\n\ngoal (1 subgoal):\n 1. up dm lm d \\<alpha> p =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "unfolding up_def lift_eq"], ["proof (prove)\nusing this:\n  lgrid (base {d} p) {d} lm \\<inter> (grid p {d} - {p}) =\n  lgrid p {d} lm - {p}\n\ngoal (1 subgoal):\n 1. (\\<Sum>p'\\<in>lgrid (base {d} p) {d} lm.\n       if p' \\<in> grid p {d} - {p}\n       then \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d) else 0) =\n    (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n       \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))", "by (intro sum.mono_neutral_cong_right lgrid_finite) auto"], ["proof (state)\nthis:\n  up dm lm d \\<alpha> p =\n  (\\<Sum>p'\\<in>lgrid p {d} lm - {p}.\n     \\<alpha> p' * l2_\\<phi> (p' ! d) (p ! d))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}