{"file_name": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice/Social_Decision_Schemes.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice", "problem_names": ["lemma lottery_prob_alts_superset: \n  assumes \"p \\<in> lotteries\" \"alts \\<subseteq> A\"\n  shows   \"lottery_prob p A = 1\"", "lemma lottery_prob_alts: \"p \\<in> lotteries \\<Longrightarrow> lottery_prob p alts = 1\"", "lemma anonymity_prefs_from_table:\n  assumes \"prefs_from_table_wf agents alts xs\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"sds (prefs_from_table xs) = sds (prefs_from_table ys)\"", "lemma anonymity_prefs_from_table_aux:\n  assumes \"R1 = prefs_from_table xs\" \"prefs_from_table_wf agents alts xs\"\n  assumes \"R2 = prefs_from_table ys\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"sds R1 = sds R2\"", "lemma neutral':\n  assumes \"\\<sigma> permutes alts\"\n  assumes \"is_pref_profile R\"\n  assumes \"a \\<in> alts\"\n  shows   \"pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a\"", "lemma sds_anonymous_neutral:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\"\n  shows   \"sds R1 = map_pmf \\<sigma> (sds R2)\"", "lemma sds_anonymous_neutral':\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\"\n  shows   \"pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x\"", "lemma sds_automorphism:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R\"\n  assumes eq: \"image_mset (map ((`) \\<sigma>)) (anonymous_profile R) = anonymous_profile R\"\n  shows   \"map_pmf \\<sigma> (sds R) = sds R\"", "lemma an_sds_automorphism_aux:\n  assumes wf: \"prefs_from_table_wf agents alts yss\" \"R \\<equiv> prefs_from_table yss\"\n  assumes an: \"an_sds agents alts sds\"\n  assumes eq: \"mset (map ((map ((`) (permutation_of_list xs))) \\<circ> snd) yss) = mset (map snd yss)\"\n  assumes perm: \"set (map fst xs) \\<subseteq> alts\" \"set (map snd xs) = set (map fst xs)\" \n                \"distinct (map fst xs)\" \n      and x: \"x \\<in> alts\" \"y = permutation_of_list xs x\"\n  shows   \"pmf (sds R) x = pmf (sds R) y\"", "lemma ex_post_efficient':\n  assumes \"is_pref_profile R\" \"y \\<succ>[Pareto(R)] x\"\n  shows   \"pmf (sds R) x = 0\"", "lemma ex_post_efficient'':\n  assumes \"is_pref_profile R\" \"i \\<in> agents\"  \"\\<forall>i\\<in>agents. y \\<succeq>[R i] x\" \"\\<not>y \\<preceq>[R i] x\"\n  shows   \"pmf (sds R) x = 0\"", "lemma SD_efficient':\n  assumes \"is_pref_profile R\" \"q \\<in> lotteries\"\n  assumes \"\\<And>i. i \\<in> agents \\<Longrightarrow> q \\<succeq>[SD(R i)] sds R\" \"i \\<in> agents\" \"q \\<succ>[SD(R i)] sds R\"\n  shows   P", "lemma SD_inefficient_support:\n  assumes A: \"A \\<noteq> {}\" \"A \\<subseteq> alts\" and inefficient: \"\\<not>SD_efficient R (pmf_of_set A)\" \n  assumes wf: \"is_pref_profile R\" \n  shows   \"\\<exists>x\\<in>A. pmf (sds R) x = 0\"", "lemma SD_inefficient_support':\n  assumes wf: \"is_pref_profile R\" \n  assumes A: \"A \\<noteq> {}\" \"A \\<subseteq> alts\" and \n     wit: \"p \\<in> lotteries\" \"\\<forall>i\\<in>agents. p \\<succeq>[SD(R i)] pmf_of_set A\" \"i \\<in> agents\" \n          \"\\<not>p \\<preceq>[SD(R i)] pmf_of_set A\"\n  shows   \"\\<exists>x\\<in>A. pmf (sds R) x = 0\"", "lemma strongly_strategyproof_profileI [intro]:\n  assumes \"is_pref_profile R\" \"total_preorder_on alts Ri'\" \"i \\<in> agents\"\n  assumes \"\\<And>x. x \\<in> alts \\<Longrightarrow> lottery_prob (sds (R(i := Ri'))) (preferred_alts (R i) x)\n                               \\<le> lottery_prob (sds R) (preferred_alts (R i) x)\"\n  shows \"strongly_strategyproof_profile R i Ri'\"", "lemma strongly_strategyproof_imp_not_manipulable:\n  assumes \"strongly_strategyproof_profile R i Ri'\"\n  shows   \"\\<not>manipulable_profile R i Ri'\""], "translations": [["", "lemma lottery_prob_alts_superset: \n  assumes \"p \\<in> lotteries\" \"alts \\<subseteq> A\"\n  shows   \"lottery_prob p A = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lottery_prob p A = 1", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> lotteries\n  alts \\<subseteq> A\n\ngoal (1 subgoal):\n 1. lottery_prob p A = 1", "by (subst measure_pmf.prob_eq_1) (auto simp: AE_measure_pmf_iff lotteries_on_def)"], ["", "lemma lottery_prob_alts: \"p \\<in> lotteries \\<Longrightarrow> lottery_prob p alts = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> lotteries \\<Longrightarrow> lottery_prob p alts = 1", "by (rule lottery_prob_alts_superset) simp_all"], ["", "end"], ["", "text \\<open>\n  In the context of an election, a preference profile is a function that \n  assigns to each agent her preference relation (which is a total preorder)\n\\<close>"], ["", "subsection \\<open>Social Decision Schemes\\<close>"], ["", "text \\<open>\n  In the context of an election, a Social Decision Scheme (SDS) is a function that \n  maps preference profiles to lotteries on the alternatives.\n\\<close>"], ["", "locale social_decision_scheme = election agents alts \n  for agents :: \"'agent set\" and alts :: \"'alt set\" +\n  fixes sds :: \"('agent, 'alt) pref_profile \\<Rightarrow> 'alt lottery\"\n  assumes sds_wf: \"is_pref_profile R \\<Longrightarrow> sds R \\<in> lotteries\""], ["", "subsection \\<open>Anonymity\\<close>"], ["", "text \\<open>\n  An SDS is anonymous if permuting the agents in the input does not change the result.\n\\<close>"], ["", "locale anonymous_sds = social_decision_scheme agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  assumes anonymous: \"\\<pi> permutes agents \\<Longrightarrow> is_pref_profile R \\<Longrightarrow> sds (R \\<circ> \\<pi>) = sds R\" \nbegin"], ["", "lemma anonymity_prefs_from_table:\n  assumes \"prefs_from_table_wf agents alts xs\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"sds (prefs_from_table xs) = sds (prefs_from_table ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sds (prefs_from_table xs) = sds (prefs_from_table ys)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sds (prefs_from_table xs) = sds (prefs_from_table ys)", "from prefs_from_table_agent_permutation[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "guess \\<pi>"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\n\ngoal (1 subgoal):\n 1. sds (prefs_from_table xs) = sds (prefs_from_table ys)", "with anonymous[of \\<pi>, of \"prefs_from_table xs\"] assms(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<pi> permutes agents;\n   is_pref_profile (prefs_from_table xs)\\<rbrakk>\n  \\<Longrightarrow> sds (prefs_from_table xs \\<circ> \\<pi>) =\n                    sds (prefs_from_table xs)\n  prefs_from_table_wf agents alts xs\n  \\<pi> permutes agents\n  prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<pi> permutes agents;\n   is_pref_profile (prefs_from_table xs)\\<rbrakk>\n  \\<Longrightarrow> sds (prefs_from_table xs \\<circ> \\<pi>) =\n                    sds (prefs_from_table xs)\n  prefs_from_table_wf agents alts xs\n  \\<pi> permutes agents\n  prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\n\ngoal (1 subgoal):\n 1. sds (prefs_from_table xs) = sds (prefs_from_table ys)", "by (simp add: pref_profile_from_tableI)"], ["proof (state)\nthis:\n  sds (prefs_from_table xs) = sds (prefs_from_table ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\nbegin"], ["", "qualified"], ["", "lemma anonymity_prefs_from_table_aux:\n  assumes \"R1 = prefs_from_table xs\" \"prefs_from_table_wf agents alts xs\"\n  assumes \"R2 = prefs_from_table ys\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"sds R1 = sds R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sds R1 = sds R2", "unfolding assms(1,3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sds (prefs_from_table xs) = sds (prefs_from_table ys)", "by (rule anonymity_prefs_from_table) (simp_all add: assms del: mset_map)"], ["", "end"], ["", "end"], ["", "subsection \\<open>Neutrality\\<close>"], ["", "text \\<open>\n  An SDS is neutral if permuting the alternatives in the input does not change the\n  result, modulo the equivalent permutation in the output lottery.\n\\<close>"], ["", "locale neutral_sds = social_decision_scheme agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  assumes neutral: \"\\<sigma> permutes alts \\<Longrightarrow> is_pref_profile R \\<Longrightarrow> \n                        sds (permute_profile \\<sigma> R) = map_pmf \\<sigma> (sds R)\"\nbegin"], ["", "text \\<open>\n  Alternative formulation of neutrality that shows that our definition is \n  equivalent to that in the paper.\n\\<close>"], ["", "lemma neutral':\n  assumes \"\\<sigma> permutes alts\"\n  assumes \"is_pref_profile R\"\n  assumes \"a \\<in> alts\"\n  shows   \"pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "from assms"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts", "have A: \"set_pmf (sds R) \\<subseteq> alts\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts\n\ngoal (1 subgoal):\n 1. set_pmf (sds R) \\<subseteq> alts", "using sds_wf"], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts\n  is_pref_profile ?R \\<Longrightarrow> sds ?R \\<in> lotteries\n\ngoal (1 subgoal):\n 1. set_pmf (sds R) \\<subseteq> alts", "by (simp add: lotteries_on_def)"], ["proof (state)\nthis:\n  set_pmf (sds R) \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "from assms(1,2)"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  is_pref_profile R", "have \"pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (map_pmf \\<sigma> (sds R)) (\\<sigma> a)\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) =\n    pmf (map_pmf \\<sigma> (sds R)) (\\<sigma> a)", "by (subst neutral) simp_all"], ["proof (state)\nthis:\n  pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) =\n  pmf (map_pmf \\<sigma> (sds R)) (\\<sigma> a)\n\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "also"], ["proof (state)\nthis:\n  pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) =\n  pmf (map_pmf \\<sigma> (sds R)) (\\<sigma> a)\n\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "from assms"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts", "have \"\\<dots> = pmf (sds R) a\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts\n\ngoal (1 subgoal):\n 1. pmf (map_pmf \\<sigma> (sds R)) (\\<sigma> a) = pmf (sds R) a", "by (intro pmf_map_inj') (simp_all add: permutes_inj)"], ["proof (state)\nthis:\n  pmf (map_pmf \\<sigma> (sds R)) (\\<sigma> a) = pmf (sds R) a\n\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "finally"], ["proof (chain)\npicking this:\n  pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a\n\ngoal (1 subgoal):\n 1. pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a", "."], ["proof (state)\nthis:\n  pmf (sds (permute_profile \\<sigma> R)) (\\<sigma> a) = pmf (sds R) a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale an_sds = \n  anonymous_sds agents alts sds + neutral_sds agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds\nbegin"], ["", "lemma sds_anonymous_neutral:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\"\n  shows   \"sds R1 = map_pmf \\<sigma> (sds R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "interpret R1: pref_profile_wf agents alts R1"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R1", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "interpret R2: pref_profile_wf agents alts R2"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R2", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "from perm"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts", "have wf': \"is_pref_profile (permute_profile \\<sigma> R2)\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. is_pref_profile (permute_profile \\<sigma> R2)", "by (rule R2.wf_permute_alts)"], ["proof (state)\nthis:\n  is_pref_profile (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "from eq perm"], ["proof (chain)\npicking this:\n  anonymous_profile R1 =\n  image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\n  \\<sigma> permutes alts", "have \"anonymous_profile R1 = anonymous_profile (permute_profile \\<sigma> R2)\""], ["proof (prove)\nusing this:\n  anonymous_profile R1 =\n  image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\n  \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. anonymous_profile R1 = anonymous_profile (permute_profile \\<sigma> R2)", "by (simp add: R2.anonymous_profile_permute)"], ["proof (state)\nthis:\n  anonymous_profile R1 = anonymous_profile (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "from anonymous_profile_agent_permutation[OF this wf(1) wf']"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite agents;\n   \\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain \\<pi> where \"\\<pi> permutes agents\" \"permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite agents;\n   \\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<lbrakk>\\<pi> permutes agents;\n         permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "have \"sds (permute_profile \\<sigma> R2 \\<circ> \\<pi>) = sds (permute_profile \\<sigma> R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sds (permute_profile \\<sigma> R2 \\<circ> \\<pi>) =\n    sds (permute_profile \\<sigma> R2)", "by (rule anonymous) fact+"], ["proof (state)\nthis:\n  sds (permute_profile \\<sigma> R2 \\<circ> \\<pi>) =\n  sds (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "also"], ["proof (state)\nthis:\n  sds (permute_profile \\<sigma> R2 \\<circ> \\<pi>) =\n  sds (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "have \"\\<dots> = map_pmf \\<sigma> (sds R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sds (permute_profile \\<sigma> R2) = map_pmf \\<sigma> (sds R2)", "by (rule neutral) fact+"], ["proof (state)\nthis:\n  sds (permute_profile \\<sigma> R2) = map_pmf \\<sigma> (sds R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "also"], ["proof (state)\nthis:\n  sds (permute_profile \\<sigma> R2) = map_pmf \\<sigma> (sds R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "have \"permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1", "by fact"], ["proof (state)\nthis:\n  permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "finally"], ["proof (chain)\npicking this:\n  sds R1 = map_pmf \\<sigma> (sds R2)", "show ?thesis"], ["proof (prove)\nusing this:\n  sds R1 = map_pmf \\<sigma> (sds R2)\n\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "."], ["proof (state)\nthis:\n  sds R1 = map_pmf \\<sigma> (sds R2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sds_anonymous_neutral':\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\"\n  shows   \"pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "have \"sds R1 = map_pmf \\<sigma> (sds R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sds R1 = map_pmf \\<sigma> (sds R2)", "by (intro sds_anonymous_neutral) fact+"], ["proof (state)\nthis:\n  sds R1 = map_pmf \\<sigma> (sds R2)\n\ngoal (1 subgoal):\n 1. pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "also"], ["proof (state)\nthis:\n  sds R1 = map_pmf \\<sigma> (sds R2)\n\ngoal (1 subgoal):\n 1. pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "have \"pmf \\<dots> (\\<sigma> x) = pmf (sds R2) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (map_pmf \\<sigma> (sds R2)) (\\<sigma> x) = pmf (sds R2) x", "by (intro pmf_map_inj' permutes_inj[OF perm])"], ["proof (state)\nthis:\n  pmf (map_pmf \\<sigma> (sds R2)) (\\<sigma> x) = pmf (sds R2) x\n\ngoal (1 subgoal):\n 1. pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "finally"], ["proof (chain)\npicking this:\n  pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x\n\ngoal (1 subgoal):\n 1. pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x", "."], ["proof (state)\nthis:\n  pmf (sds R1) (\\<sigma> x) = pmf (sds R2) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sds_automorphism:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R\"\n  assumes eq: \"image_mset (map ((`) \\<sigma>)) (anonymous_profile R) = anonymous_profile R\"\n  shows   \"map_pmf \\<sigma> (sds R) = sds R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_pmf \\<sigma> (sds R) = sds R", "using sds_anonymous_neutral[OF perm wf wf eq [symmetric]]"], ["proof (prove)\nusing this:\n  sds R = map_pmf \\<sigma> (sds R)\n\ngoal (1 subgoal):\n 1. map_pmf \\<sigma> (sds R) = sds R", ".."], ["", "end"], ["", "lemma an_sds_automorphism_aux:\n  assumes wf: \"prefs_from_table_wf agents alts yss\" \"R \\<equiv> prefs_from_table yss\"\n  assumes an: \"an_sds agents alts sds\"\n  assumes eq: \"mset (map ((map ((`) (permutation_of_list xs))) \\<circ> snd) yss) = mset (map snd yss)\"\n  assumes perm: \"set (map fst xs) \\<subseteq> alts\" \"set (map snd xs) = set (map fst xs)\" \n                \"distinct (map fst xs)\" \n      and x: \"x \\<in> alts\" \"y = permutation_of_list xs x\"\n  shows   \"pmf (sds R) x = pmf (sds R) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "note perm = list_permutesI[OF perm]"], ["proof (state)\nthis:\n  list_permutes xs alts\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "let ?\\<sigma> = \"permutation_of_list xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "note perm' = permutation_of_list_permutes [OF perm]"], ["proof (state)\nthis:\n  permutation_of_list xs permutes alts\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "from wf"], ["proof (chain)\npicking this:\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss", "have wf': \"pref_profile_wf agents alts R\""], ["proof (prove)\nusing this:\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "by (simp add: pref_profile_from_tableI)"], ["proof (state)\nthis:\n  pref_profile_wf agents alts R\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "then"], ["proof (chain)\npicking this:\n  pref_profile_wf agents alts R", "interpret R: pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  pref_profile_wf agents alts R\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "from perm'"], ["proof (chain)\npicking this:\n  permutation_of_list xs permutes alts", "interpret R': pref_profile_wf agents alts \"permute_profile ?\\<sigma> R\""], ["proof (prove)\nusing this:\n  permutation_of_list xs permutes alts\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts (permute_profile (permutation_of_list xs) R)", "by (simp add: R.wf_permute_alts)"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "from an"], ["proof (chain)\npicking this:\n  an_sds agents alts sds", "interpret an_sds agents alts sds"], ["proof (prove)\nusing this:\n  an_sds agents alts sds\n\ngoal (1 subgoal):\n 1. an_sds agents alts sds", "."], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "from eq wf"], ["proof (chain)\npicking this:\n  mset (map (map ((`) (permutation_of_list xs)) \\<circ> snd) yss) =\n  mset (map snd yss)\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss", "have eq': \"image_mset (map ((`) ?\\<sigma>)) (anonymous_profile R) = anonymous_profile R\""], ["proof (prove)\nusing this:\n  mset (map (map ((`) (permutation_of_list xs)) \\<circ> snd) yss) =\n  mset (map snd yss)\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss\n\ngoal (1 subgoal):\n 1. image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n    anonymous_profile R", "by (simp add: anonymise_prefs_from_table mset_map multiset.map_comp)"], ["proof (state)\nthis:\n  image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n  anonymous_profile R\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "from perm' x"], ["proof (chain)\npicking this:\n  permutation_of_list xs permutes alts\n  x \\<in> alts\n  y = permutation_of_list xs x", "have \"pmf (sds R) x = pmf (map_pmf ?\\<sigma> (sds R)) (?\\<sigma> x)\""], ["proof (prove)\nusing this:\n  permutation_of_list xs permutes alts\n  x \\<in> alts\n  y = permutation_of_list xs x\n\ngoal (1 subgoal):\n 1. pmf (sds R) x =\n    pmf (map_pmf (permutation_of_list xs) (sds R))\n     (permutation_of_list xs x)", "by (simp add: pmf_map_inj' permutes_inj)"], ["proof (state)\nthis:\n  pmf (sds R) x =\n  pmf (map_pmf (permutation_of_list xs) (sds R)) (permutation_of_list xs x)\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "also"], ["proof (state)\nthis:\n  pmf (sds R) x =\n  pmf (map_pmf (permutation_of_list xs) (sds R)) (permutation_of_list xs x)\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "from eq' x wf' perm'"], ["proof (chain)\npicking this:\n  image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n  anonymous_profile R\n  x \\<in> alts\n  y = permutation_of_list xs x\n  is_pref_profile R\n  permutation_of_list xs permutes alts", "have \"map_pmf ?\\<sigma> (sds R) = sds R\""], ["proof (prove)\nusing this:\n  image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n  anonymous_profile R\n  x \\<in> alts\n  y = permutation_of_list xs x\n  is_pref_profile R\n  permutation_of_list xs permutes alts\n\ngoal (1 subgoal):\n 1. map_pmf (permutation_of_list xs) (sds R) = sds R", "by (intro sds_automorphism) \n       (simp_all add: R.anonymous_profile_permute pref_profile_from_tableI)"], ["proof (state)\nthis:\n  map_pmf (permutation_of_list xs) (sds R) = sds R\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "finally"], ["proof (chain)\npicking this:\n  pmf (sds R) x = pmf (sds R) (permutation_of_list xs x)", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf (sds R) x = pmf (sds R) (permutation_of_list xs x)\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "using x"], ["proof (prove)\nusing this:\n  pmf (sds R) x = pmf (sds R) (permutation_of_list xs x)\n  x \\<in> alts\n  y = permutation_of_list xs x\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = pmf (sds R) y", "by simp"], ["proof (state)\nthis:\n  pmf (sds R) x = pmf (sds R) y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Ex-post efficiency\\<close>"], ["", "locale ex_post_efficient_sds = social_decision_scheme agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  assumes ex_post_efficient: \n    \"is_pref_profile R \\<Longrightarrow> set_pmf (sds R) \\<inter> pareto_losers R = {}\"\nbegin"], ["", "lemma ex_post_efficient':\n  assumes \"is_pref_profile R\" \"y \\<succ>[Pareto(R)] x\"\n  shows   \"pmf (sds R) x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (sds R) x = 0", "using ex_post_efficient[of R] assms"], ["proof (prove)\nusing this:\n  is_pref_profile R \\<Longrightarrow>\n  set_pmf (sds R) \\<inter> pareto_losers R = {}\n  is_pref_profile R\n  x \\<prec>[Pareto R] y\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = 0", "by (auto simp: set_pmf_eq pareto_losers_def)"], ["", "lemma ex_post_efficient'':\n  assumes \"is_pref_profile R\" \"i \\<in> agents\"  \"\\<forall>i\\<in>agents. y \\<succeq>[R i] x\" \"\\<not>y \\<preceq>[R i] x\"\n  shows   \"pmf (sds R) x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (sds R) x = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = 0", "from assms(1)"], ["proof (chain)\npicking this:\n  is_pref_profile R", "interpret pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (sds R) x = 0", "from assms(2-)"], ["proof (chain)\npicking this:\n  i \\<in> agents\n  \\<forall>i\\<in>agents. R i x y\n  \\<not> R i y x", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  \\<forall>i\\<in>agents. R i x y\n  \\<not> R i y x\n\ngoal (1 subgoal):\n 1. pmf (sds R) x = 0", "by (intro ex_post_efficient'[OF assms(1), of _ y])\n       (auto simp: Pareto_iff strongly_preferred_def)"], ["proof (state)\nthis:\n  pmf (sds R) x = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>SD efficiency\\<close>"], ["", "text \\<open>\n  An SDS is SD-efficient if it returns an SD-efficient lottery for every \n  preference profile, i.e. if the SDS outputs a lottery, it is never the case \n  that there is another lottery that is weakly preferred by all agents an \n  strictly preferred by at least one agent.\n\\<close>"], ["", "locale sd_efficient_sds = social_decision_scheme agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  assumes SD_efficient: \"is_pref_profile R \\<Longrightarrow> SD_efficient R (sds R)\"\nbegin"], ["", "text \\<open>\n  An alternative formulation of SD-efficiency that is somewhat more convenient to use.\n\\<close>"], ["", "lemma SD_efficient':\n  assumes \"is_pref_profile R\" \"q \\<in> lotteries\"\n  assumes \"\\<And>i. i \\<in> agents \\<Longrightarrow> q \\<succeq>[SD(R i)] sds R\" \"i \\<in> agents\" \"q \\<succ>[SD(R i)] sds R\"\n  shows   P"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. P", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using SD_efficient[of R] sds_wf[OF assms(1)] assms"], ["proof (prove)\nusing this:\n  is_pref_profile R \\<Longrightarrow> SD_efficient R (sds R)\n  sds R \\<in> lotteries\n  is_pref_profile R\n  q \\<in> lotteries\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) (sds R) q\n  i \\<in> agents\n  sds R \\<prec>[SD (R i)] q\n\ngoal (1 subgoal):\n 1. P", "unfolding SD_efficient_def'"], ["proof (prove)\nusing this:\n  is_pref_profile R \\<Longrightarrow>\n  \\<not> (\\<exists>q\\<in>lotteries.\n             (\\<forall>i\\<in>agents. SD (R i) (sds R) q) \\<and>\n             (\\<exists>i\\<in>agents. sds R \\<prec>[SD (R i)] q))\n  sds R \\<in> lotteries\n  is_pref_profile R\n  q \\<in> lotteries\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) (sds R) q\n  i \\<in> agents\n  sds R \\<prec>[SD (R i)] q\n\ngoal (1 subgoal):\n 1. P", "by blast"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Any SD-efficient SDS is also ex-post efficient.\n\\<close>"], ["", "sublocale ex_post_efficient_sds"], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_post_efficient_sds agents alts sds", "proof unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (sds R) \\<inter> pareto_losers R = {}", "fix R :: \"('agent, 'alt) pref_profile\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (sds R) \\<inter> pareto_losers R = {}", "assume R_wf: \"is_pref_profile R\""], ["proof (state)\nthis:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (sds R) \\<inter> pareto_losers R = {}", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (sds R) \\<inter> pareto_losers R = {}", "from R_wf"], ["proof (chain)\npicking this:\n  is_pref_profile R", "show \"set_pmf (sds R) \\<inter> pareto_losers R = {}\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. set_pmf (sds R) \\<inter> pareto_losers R = {}", "by (intro SD_efficient_no_pareto_loser SD_efficient sds_wf)"], ["proof (state)\nthis:\n  set_pmf (sds R) \\<inter> pareto_losers R = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The following rule can be used to derive facts from inefficient supports:\n  If a set of alternatives is an inefficient support, at least one of the \n  alternatives in it must receive probability 0.\n\\<close>"], ["", "lemma SD_inefficient_support:\n  assumes A: \"A \\<noteq> {}\" \"A \\<subseteq> alts\" and inefficient: \"\\<not>SD_efficient R (pmf_of_set A)\" \n  assumes wf: \"is_pref_profile R\" \n  shows   \"\\<exists>x\\<in>A. pmf (sds R) x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. pmf (sds R) x = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "assume \"\\<not>(\\<exists>x\\<in>A. pmf (sds R) x = 0)\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "with A"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0)", "have \"set_pmf (pmf_of_set A) \\<subseteq> set_pmf (sds R)\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0)\n\ngoal (1 subgoal):\n 1. set_pmf (pmf_of_set A) \\<subseteq> set_pmf (sds R)", "by (subst set_pmf_of_set) (auto simp: set_pmf_eq intro: finite_subset[OF _ finite_alts])"], ["proof (state)\nthis:\n  set_pmf (pmf_of_set A) \\<subseteq> set_pmf (sds R)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "from inefficient and this"], ["proof (chain)\npicking this:\n  \\<not> SD_efficient R (pmf_of_set A)\n  set_pmf (pmf_of_set A) \\<subseteq> set_pmf (sds R)", "have \"\\<not>SD_efficient R (sds R)\""], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R (pmf_of_set A)\n  set_pmf (pmf_of_set A) \\<subseteq> set_pmf (sds R)\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R (sds R)", "by (rule SD_inefficient_support_subset) (simp add: wf sds_wf)"], ["proof (state)\nthis:\n  \\<not> SD_efficient R (sds R)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> SD_efficient R (sds R)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "from SD_efficient wf"], ["proof (chain)\npicking this:\n  is_pref_profile ?R \\<Longrightarrow> SD_efficient ?R (sds ?R)\n  is_pref_profile R", "have \"SD_efficient R (sds R)\""], ["proof (prove)\nusing this:\n  is_pref_profile ?R \\<Longrightarrow> SD_efficient ?R (sds ?R)\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. SD_efficient R (sds R)", "."], ["proof (state)\nthis:\n  SD_efficient R (sds R)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>A. pmf (sds R) x = 0) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> SD_efficient R (sds R)\n  SD_efficient R (sds R)", "show False"], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R (sds R)\n  SD_efficient R (sds R)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SD_inefficient_support':\n  assumes wf: \"is_pref_profile R\" \n  assumes A: \"A \\<noteq> {}\" \"A \\<subseteq> alts\" and \n     wit: \"p \\<in> lotteries\" \"\\<forall>i\\<in>agents. p \\<succeq>[SD(R i)] pmf_of_set A\" \"i \\<in> agents\" \n          \"\\<not>p \\<preceq>[SD(R i)] pmf_of_set A\"\n  shows   \"\\<exists>x\\<in>A. pmf (sds R) x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. pmf (sds R) x = 0", "proof (rule SD_inefficient_support)"], ["proof (state)\ngoal (4 subgoals):\n 1. A \\<noteq> {}\n 2. A \\<subseteq> alts\n 3. \\<not> SD_efficient R (pmf_of_set A)\n 4. is_pref_profile R", "from wf"], ["proof (chain)\npicking this:\n  is_pref_profile R", "interpret pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile R", "."], ["proof (state)\ngoal (4 subgoals):\n 1. A \\<noteq> {}\n 2. A \\<subseteq> alts\n 3. \\<not> SD_efficient R (pmf_of_set A)\n 4. is_pref_profile R", "from wit"], ["proof (chain)\npicking this:\n  p \\<in> lotteries\n  \\<forall>i\\<in>agents. SD (R i) (pmf_of_set A) p\n  i \\<in> agents\n  \\<not> SD (R i) p (pmf_of_set A)", "show \"\\<not>SD_efficient R (pmf_of_set A)\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries\n  \\<forall>i\\<in>agents. SD (R i) (pmf_of_set A) p\n  i \\<in> agents\n  \\<not> SD (R i) p (pmf_of_set A)\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R (pmf_of_set A)", "by (intro SD_inefficientI') (auto intro!: bexI[of _ i] simp: strongly_preferred_def)"], ["proof (state)\nthis:\n  \\<not> SD_efficient R (pmf_of_set A)\n\ngoal (3 subgoals):\n 1. A \\<noteq> {}\n 2. A \\<subseteq> alts\n 3. is_pref_profile R", "qed fact+"], ["", "end"], ["", "subsection \\<open>Weak strategyproofness\\<close>"], ["", "context social_decision_scheme\nbegin"], ["", "text \\<open>\n  The SDS is said to be manipulable for a particular preference profile,\n  a particular agent, and a particular alternative preference ordering for that agent\n  if the lottery obtained if the agent submits the alternative preferences strictly \n  SD-dominates that obtained if the original preferences are submitted.\n  (SD-dominated w.r.t. the original preferences)\n\\<close>"], ["", "definition manipulable_profile \n    :: \"('agent, 'alt) pref_profile \\<Rightarrow> 'agent \\<Rightarrow> 'alt relation \\<Rightarrow> bool\" where \n  \"manipulable_profile R i Ri' \\<longleftrightarrow> sds (R(i := Ri')) \\<succ>[SD (R i)] sds R\""], ["", "end"], ["", "text \\<open>\n  An SDS is weakly strategyproof (or just strategyproof) if it is not manipulable \n  for any combination of preference profiles, agents, and alternative preference relations.\n\\<close>"], ["", "locale strategyproof_sds = social_decision_scheme agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  assumes strategyproof: \n    \"is_pref_profile R \\<Longrightarrow> i \\<in> agents \\<Longrightarrow> total_preorder_on alts Ri' \\<Longrightarrow>\n         \\<not>manipulable_profile R i Ri'\""], ["", "subsection \\<open>Strong strategyproofness\\<close>"], ["", "context social_decision_scheme\nbegin"], ["", "text \\<open>\n  The SDS is said to be strongly strategyproof for a particular preference profile, \n  a particular agent, and a particular alternative preference ordering for that agent\n  if the lottery obtained if the agent submits the alternative preferences is\n  SD-dominated by the one obtained if the original preferences are submitted.\n  (SD-dominated w.r.t. the original preferences)\n  \n  In other words: the SDS is strategyproof w.r.t the preference profile $R$ and \n  the agent $i$ and the alternative preference relation $R_i'$ if the lottery for \n  obtained for $R$ is at least as good for $i$ as the lottery obtained when $i$ \n  misrepresents her preferences as $R_i'$.\n\\<close>"], ["", "definition strongly_strategyproof_profile \n    :: \"('agent, 'alt) pref_profile \\<Rightarrow> 'agent \\<Rightarrow> 'alt relation \\<Rightarrow> bool\" where\n  \"strongly_strategyproof_profile R i Ri' \\<longleftrightarrow> sds R \\<succeq>[SD (R i)] sds (R(i := Ri'))\""], ["", "lemma strongly_strategyproof_profileI [intro]:\n  assumes \"is_pref_profile R\" \"total_preorder_on alts Ri'\" \"i \\<in> agents\"\n  assumes \"\\<And>x. x \\<in> alts \\<Longrightarrow> lottery_prob (sds (R(i := Ri'))) (preferred_alts (R i) x)\n                               \\<le> lottery_prob (sds R) (preferred_alts (R i) x)\"\n  shows \"strongly_strategyproof_profile R i Ri'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_strategyproof_profile R i Ri'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_strategyproof_profile R i Ri'", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_strategyproof_profile R i Ri'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_strategyproof_profile R i Ri'", "unfolding strongly_strategyproof_profile_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SD (R i) (sds (R(i := Ri'))) (sds R)", "by rule (auto intro!: sds_wf assms pref_profile_wf.wf_update)"], ["proof (state)\nthis:\n  strongly_strategyproof_profile R i Ri'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strongly_strategyproof_imp_not_manipulable:\n  assumes \"strongly_strategyproof_profile R i Ri'\"\n  shows   \"\\<not>manipulable_profile R i Ri'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> manipulable_profile R i Ri'", "using assms"], ["proof (prove)\nusing this:\n  strongly_strategyproof_profile R i Ri'\n\ngoal (1 subgoal):\n 1. \\<not> manipulable_profile R i Ri'", "unfolding strongly_strategyproof_profile_def manipulable_profile_def"], ["proof (prove)\nusing this:\n  SD (R i) (sds (R(i := Ri'))) (sds R)\n\ngoal (1 subgoal):\n 1. \\<not> sds R \\<prec>[SD (R i)] sds (R(i := Ri'))", "by (auto simp: strongly_preferred_def)"], ["", "end"], ["", "text \\<open>\n  An SDS is strongly strategyproof if it is strongly strategyproof for all combinations\n  of preference profiles, agents, and alternative preference relations.\n\\<close>"], ["", "locale strongly_strategyproof_sds = social_decision_scheme agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  assumes strongly_strategyproof: \n    \"is_pref_profile R \\<Longrightarrow> i \\<in> agents \\<Longrightarrow> total_preorder_on alts Ri' \\<Longrightarrow>\n         strongly_strategyproof_profile R i Ri'\"\nbegin"], ["", "text \\<open>\n  Any SDS that is strongly strategyproof is also weakly strategyproof.\n\\<close>"], ["", "sublocale strategyproof_sds"], ["proof (prove)\ngoal (1 subgoal):\n 1. strategyproof_sds agents alts sds", "by unfold_locales\n     (simp add: strongly_strategyproof_imp_not_manipulable strongly_strategyproof)"], ["", "end"], ["", "locale strategyproof_an_sds =\n  strategyproof_sds agents alts sds + an_sds agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds"], ["", "end"]]}