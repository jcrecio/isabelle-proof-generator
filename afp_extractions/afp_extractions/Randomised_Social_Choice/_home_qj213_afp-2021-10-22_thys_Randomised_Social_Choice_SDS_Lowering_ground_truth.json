{"file_name": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice/SDS_Lowering.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice", "problem_names": ["lemma lift_pref_profile_wf:\n  assumes \"pref_profile_wf agents alts R\"\n  assumes \"agents \\<subseteq> agents'\" \"alts \\<subseteq> alts'\" \"finite alts'\"\n  defines \"R' \\<equiv> lift_pref_profile agents alts agents' alts' R\"\n  shows   \"pref_profile_wf agents' alts' R'\"", "lemma lift_pref_profile_permute_agents:\n  assumes \"\\<pi> permutes agents\" \"agents \\<subseteq> agents'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) = \n             lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>\"", "lemma lift_pref_profile_permute_alts:\n  assumes \"\\<sigma> permutes alts\" \"alts \\<subseteq> alts'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (permute_profile \\<sigma> R) = \n             permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)\"", "lemma lotteries_on_subset: \"A \\<subseteq> B \\<Longrightarrow> p \\<in> lotteries_on A \\<Longrightarrow> p \\<in> lotteries_on B\"", "lemma lottery_prob_carrier: \"p \\<in> lotteries_on A \\<Longrightarrow> measure_pmf.prob p A = 1\"", "lemma lift_pref_profile_strict_iff:\n  \"x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y \\<longleftrightarrow>\n     i \\<in> agents \\<and> ((y \\<in> alts \\<and> x \\<in> alts' - alts) \\<or> x \\<prec>[R i] y)\"", "lemma preferred_alts_lift_pref_profile: \n  assumes i: \"i \\<in> agents'\" and x: \"x \\<in> alts'\"\n  shows   \"preferred_alts (R' i) x = \n             (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x else alts')\"", "lemma lift_pref_profile_Pareto_iff:\n  \"x \\<preceq>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<or> x \\<preceq>[Pareto(R)] y)\"", "lemma lift_pref_profile_Pareto_strict_iff:\n  \"x \\<prec>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<and> y \\<in> alts \\<or> x \\<prec>[Pareto(R)] y)\"", "lemma pareto_losers_lift_pref_profile:\n  shows   \"pareto_losers R' = pareto_losers R \\<union> (alts' - alts)\"", "lemma lift_SD_iff_agent:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" and i: \"i \\<in> agents\"\n  shows   \"p \\<preceq>[SD(R' i)] q \\<longleftrightarrow> p \\<preceq>[SD(R i)] q\"", "lemma lift_SD_iff_nonagent:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" and i: \"i \\<in> agents' - agents\"\n  shows   \"p \\<preceq>[SD(R' i)] q\"", "lemmas lift_SD_iff = lift_SD_iff_agent lift_SD_iff_nonagent", "lemma lift_SD_iff':\n  \"p \\<in> lotteries_on alts \\<Longrightarrow> q \\<in> lotteries_on alts \\<Longrightarrow> i \\<in> agents' \\<Longrightarrow>\n     p \\<preceq>[SD(R' i)] q \\<longleftrightarrow> i \\<notin> agents \\<or> p \\<preceq>[SD(R i)] q\"", "lemma lift_SD_strict_iff:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" and i: \"i \\<in> agents\"\n  shows   \"p \\<prec>[SD(R' i)] q \\<longleftrightarrow> p \\<prec>[SD(R i)] q\"", "lemma lift_Pareto_SD_iff:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\"\n  shows   \"p \\<preceq>[Pareto(SD \\<circ> R')] q \\<longleftrightarrow> p \\<preceq>[Pareto(SD \\<circ> R)] q\"", "lemma lift_Pareto_SD_strict_iff:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\"\n  shows   \"p \\<prec>[Pareto(SD \\<circ> R')] q \\<longleftrightarrow> p \\<prec>[Pareto(SD \\<circ> R)] q\"", "lemma lift_SD_efficient_iff:\n  assumes p: \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R' p \\<longleftrightarrow> SD_efficient R p\"", "lemma finite_agents' [simp]: \"finite agents'\"", "lemma finite_alts' [simp]: \"finite alts'\"", "lemma lift_wf [simp, intro]: \n  \"pref_profile_wf agents' alts' R \\<Longrightarrow> is_pref_profile (lift R)\"", "lemma preferred_alts_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> i \\<in> agents \\<Longrightarrow> x \\<in> alts \\<Longrightarrow>\n     preferred_alts (lift R i) x = \n       (if i \\<in> agents' \\<and> x \\<in> alts' then preferred_alts (R i) x else alts)\"", "lemma pareto_losers_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\"", "lemma lowered_lotteries: \"lowered.lotteries \\<subseteq> lotteries\"", "lemma lowered_in_lotteries [simp]: \"lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<in> lotteries\""], "translations": [["", "lemma lift_pref_profile_wf:\n  assumes \"pref_profile_wf agents alts R\"\n  assumes \"agents \\<subseteq> agents'\" \"alts \\<subseteq> alts'\" \"finite alts'\"\n  defines \"R' \\<equiv> lift_pref_profile agents alts agents' alts' R\"\n  shows   \"pref_profile_wf agents' alts' R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "from assms"], ["proof (chain)\npicking this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R", "interpret R: pref_profile_wf agents alts"], ["proof (prove)\nusing this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "have \"finite_total_preorder_on alts' (R' i)\" \n    if i: \"i \\<in> agents'\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts' (R' i)", "proof (cases \"i \\<in> agents\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow> finite_total_preorder_on alts' (R' i)\n 2. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "case True"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow> finite_total_preorder_on alts' (R' i)\n 2. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow> finite_total_preorder_on alts' (R' i)\n 2. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "from True assms"], ["proof (chain)\npicking this:\n  i \\<in> agents\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts' (R' i)", "by unfold_locales (auto simp: lift_pref_profile_def dest: total intro: trans)"], ["proof (state)\nthis:\n  finite_total_preorder_on alts' (R' i)\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "case False"], ["proof (state)\nthis:\n  i \\<notin> agents\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "with assms i"], ["proof (chain)\npicking this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n  i \\<in> agents'\n  i \\<notin> agents", "show ?thesis"], ["proof (prove)\nusing this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n  i \\<in> agents'\n  i \\<notin> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts' (R' i)", "by unfold_locales (simp_all add: lift_pref_profile_def)"], ["proof (state)\nthis:\n  finite_total_preorder_on alts' (R' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "moreover"], ["proof (state)\nthis:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "have \"R' i = (\\<lambda>_ _. False)\" if \"i \\<notin> agents'\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. R' i = (\\<lambda>_ _. False)", "unfolding lift_pref_profile_def R'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (\\<lambda>_ _. False)", "using that"], ["proof (prove)\nusing this:\n  i \\<notin> agents'\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (\\<lambda>_ _. False)", "by simp"], ["proof (state)\nthis:\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "ultimately"], ["proof (chain)\npicking this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "unfolding pref_profile_wf_def"], ["proof (prove)\nusing this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n\ngoal (1 subgoal):\n 1. (agents' \\<noteq> {} \\<and> alts' \\<noteq> {}) \\<and>\n    (\\<forall>i.\n        i \\<in> agents' \\<longrightarrow>\n        finite_total_preorder_on alts' (R' i)) \\<and>\n    (\\<forall>i x y. i \\<notin> agents' \\<longrightarrow> \\<not> R' i x y)", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n\ngoal (1 subgoal):\n 1. (agents' \\<noteq> {} \\<and> alts' \\<noteq> {}) \\<and>\n    (\\<forall>i.\n        i \\<in> agents' \\<longrightarrow>\n        finite_total_preorder_on alts' (R' i)) \\<and>\n    (\\<forall>i x y. i \\<notin> agents' \\<longrightarrow> \\<not> R' i x y)", "by auto"], ["proof (state)\nthis:\n  pref_profile_wf agents' alts' R'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_pref_profile_permute_agents:\n  assumes \"\\<pi> permutes agents\" \"agents \\<subseteq> agents'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) = \n             lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) =\n    lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>", "using assms permutes_subset[OF assms]"], ["proof (prove)\nusing this:\n  \\<pi> permutes agents\n  agents \\<subseteq> agents'\n  \\<pi> permutes agents'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) =\n    lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>", "by (auto simp add: lift_pref_profile_def o_def permutes_in_image)"], ["", "lemma lift_pref_profile_permute_alts:\n  assumes \"\\<sigma> permutes alts\" \"alts \\<subseteq> alts'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (permute_profile \\<sigma> R) = \n             permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "from assms"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  alts \\<subseteq> alts'", "have inv: \"inv \\<sigma> permutes alts\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  alts \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. inv \\<sigma> permutes alts", "by (intro permutes_inv)"], ["proof (state)\nthis:\n  inv \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "from this assms(2)"], ["proof (chain)\npicking this:\n  inv \\<sigma> permutes alts\n  alts \\<subseteq> alts'", "have \"inv \\<sigma> permutes alts'\""], ["proof (prove)\nusing this:\n  inv \\<sigma> permutes alts\n  alts \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. inv \\<sigma> permutes alts'", "by (rule permutes_subset)"], ["proof (state)\nthis:\n  inv \\<sigma> permutes alts'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "with inv"], ["proof (chain)\npicking this:\n  inv \\<sigma> permutes alts\n  inv \\<sigma> permutes alts'", "show ?thesis"], ["proof (prove)\nusing this:\n  inv \\<sigma> permutes alts\n  inv \\<sigma> permutes alts'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "using assms permutes_inj[OF \\<open>inv \\<sigma> permutes alts\\<close>]"], ["proof (prove)\nusing this:\n  inv \\<sigma> permutes alts\n  inv \\<sigma> permutes alts'\n  \\<sigma> permutes alts\n  alts \\<subseteq> alts'\n  inj (inv \\<sigma>)\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "by (fastforce simp add: lift_pref_profile_def permutes_in_image\n          permute_profile_def fun_eq_iff dest: injD)"], ["proof (state)\nthis:\n  lift_pref_profile agents alts agents' alts' (permute_profile \\<sigma> R) =\n  permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lotteries_on_subset: \"A \\<subseteq> B \\<Longrightarrow> p \\<in> lotteries_on A \\<Longrightarrow> p \\<in> lotteries_on B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; p \\<in> lotteries_on A\\<rbrakk>\n    \\<Longrightarrow> p \\<in> lotteries_on B", "unfolding lotteries_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; p \\<in> {p. set_pmf p \\<subseteq> A}\\<rbrakk>\n    \\<Longrightarrow> p \\<in> {p. set_pmf p \\<subseteq> B}", "by blast"], ["", "lemma lottery_prob_carrier: \"p \\<in> lotteries_on A \\<Longrightarrow> measure_pmf.prob p A = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> lotteries_on A \\<Longrightarrow> measure_pmf.prob p A = 1", "by (auto simp: measure_pmf.prob_eq_1 lotteries_on_def AE_measure_pmf_iff)"], ["", "context\n  fixes agents alts R agents' alts' R'\n  assumes R_wf: \"pref_profile_wf agents alts R\"\n  assumes election: \"agents \\<subseteq> agents'\" \"alts \\<subseteq> alts'\" \"alts \\<noteq> {}\" \"agents \\<noteq> {}\" \"finite alts'\"\n  defines \"R' \\<equiv> lift_pref_profile agents alts agents' alts' R\"\nbegin"], ["", "interpretation R: pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "by fact"], ["", "interpretation R': pref_profile_wf agents' alts' R'"], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "using election R_wf"], ["proof (prove)\nusing this:\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  pref_profile_wf agents alts R\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "by (simp add: R'_def lift_pref_profile_wf)"], ["", "lemma lift_pref_profile_strict_iff:\n  \"x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y \\<longleftrightarrow>\n     i \\<in> agents \\<and> ((y \\<in> alts \\<and> x \\<in> alts' - alts) \\<or> x \\<prec>[R i] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "proof (cases \"i \\<in> agents\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n 2. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "case True"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n 2. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n 2. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "using not_outside election"], ["proof (prove)\nusing this:\n  R i ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  R i ?x ?y \\<Longrightarrow> ?y \\<in> alts\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "by (auto simp: lift_pref_profile_def strongly_preferred_def)"], ["proof (state)\nthis:\n  x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n  (i \\<in> agents \\<and>\n   (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "qed (simp_all add: lift_pref_profile_def strongly_preferred_def)"], ["", "lemma preferred_alts_lift_pref_profile: \n  assumes i: \"i \\<in> agents'\" and x: \"x \\<in> alts'\"\n  shows   \"preferred_alts (R' i) x = \n             (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x else alts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "proof (cases \"i \\<in> agents\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')\n 2. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "assume i: \"i \\<in> agents\""], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')\n 2. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret Ri: total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')\n 2. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "using i x election Ri.not_outside"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  x \\<in> alts'\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  R i ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  R i ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "by (auto simp: preferred_alts_def R'_def lift_pref_profile_def Ri.refl)"], ["proof (state)\nthis:\n  preferred_alts (R' i) x =\n  (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n   else alts')\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "qed (auto simp: preferred_alts_def R'_def lift_pref_profile_def i x)"], ["", "lemma lift_pref_profile_Pareto_iff:\n  \"x \\<preceq>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<or> x \\<preceq>[Pareto(R)] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "from R.nonempty_agents"], ["proof (chain)\npicking this:\n  agents \\<noteq> {}", "obtain i where i: \"i \\<in> agents\""], ["proof (prove)\nusing this:\n  agents \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>i. i \\<in> agents \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret Ri: finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "unfolding R'.Pareto_iff R.Pareto_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>agents'. R' i x y) =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<or> (\\<forall>i\\<in>agents. R i x y)))", "unfolding R'_def lift_pref_profile_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>agents'.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<or> (\\<forall>i\\<in>agents. R i x y)))", "using election i"], ["proof (prove)\nusing this:\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>agents'.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<or> (\\<forall>i\\<in>agents. R i x y)))", "by (auto simp: preorder_on.refl[OF R.in_dom] \n      simp del: R.nonempty_alts R.nonempty_agents  intro: Ri.not_outside)"], ["proof (state)\nthis:\n  Pareto R' x y =\n  (x \\<in> alts' \\<and>\n   y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_pref_profile_Pareto_strict_iff:\n  \"x \\<prec>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<and> y \\<in> alts \\<or> x \\<prec>[Pareto(R)] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<prec>[Pareto R'] y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<and> y \\<in> alts \\<or> x \\<prec>[Pareto R] y))", "by (auto simp: strongly_preferred_def lift_pref_profile_Pareto_iff R.Pareto.not_outside)"], ["", "lemma pareto_losers_lift_pref_profile:\n  shows   \"pareto_losers R' = pareto_losers R \\<union> (alts' - alts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "have A: \"x \\<in> alts\" \"y \\<in> alts\" if \"x \\<prec>[Pareto(R)] y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> alts &&& y \\<in> alts", "using that R.Pareto.not_outside"], ["proof (prove)\nusing this:\n  x \\<prec>[Pareto R] y\n  Pareto R ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  Pareto R ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts &&& y \\<in> alts", "unfolding strongly_preferred_def"], ["proof (prove)\nusing this:\n  Pareto R x y \\<and> \\<not> Pareto R y x\n  Pareto R ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  Pareto R ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts &&& y \\<in> alts", "by auto"], ["proof (state)\nthis:\n  ?x \\<prec>[Pareto R] ?y \\<Longrightarrow> ?x \\<in> alts\n  ?x \\<prec>[Pareto R] ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "have B: \"x \\<in> alts'\" if \"x \\<in> alts\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> alts'", "using election that"], ["proof (prove)\nusing this:\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts'", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> alts \\<Longrightarrow> ?x \\<in> alts'\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "from R.nonempty_alts"], ["proof (chain)\npicking this:\n  alts \\<noteq> {}", "obtain x where x: \"x \\<in> alts\""], ["proof (prove)\nusing this:\n  alts \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> alts \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "unfolding pareto_losers_def lift_pref_profile_Pareto_strict_iff [abs_def]"], ["proof (prove)\nusing this:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. {x. \\<exists>y.\n           x \\<in> alts' \\<and>\n           y \\<in> alts' \\<and>\n           (x \\<notin> alts \\<and> y \\<in> alts \\<or>\n            x \\<prec>[Pareto R] y)} =\n    {x. Ex (strongly_preferred x (Pareto R))} \\<union> (alts' - alts)", "by (auto dest: A B)"], ["proof (state)\nthis:\n  pareto_losers R' = pareto_losers R \\<union> (alts' - alts)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\nbegin"], ["", "private"], ["", "lemma lift_SD_iff_agent:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" and i: \"i \\<in> agents\"\n  shows   \"p \\<preceq>[SD(R' i)] q \\<longleftrightarrow> p \\<preceq>[SD(R i)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "from i"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret Ri: preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. Order_Predicates.preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "from i election"], ["proof (chain)\npicking this:\n  i \\<in> agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'", "have i': \"i \\<in> agents'\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. i \\<in> agents'", "by blast"], ["proof (state)\nthis:\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents'", "interpret R'i: preorder_on alts' \"R' i\""], ["proof (prove)\nusing this:\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. Order_Predicates.preorder_on alts' (R' i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "from assms election"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'", "have \"p \\<in> lotteries_on alts'\" \"q \\<in> lotteries_on alts'\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. p \\<in> lotteries_on alts' &&& q \\<in> lotteries_on alts'", "by (auto intro: lotteries_on_subset)"], ["proof (state)\nthis:\n  p \\<in> lotteries_on alts'\n  q \\<in> lotteries_on alts'\n\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "with assms election i'"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  i \\<in> agents'\n  p \\<in> lotteries_on alts'\n  q \\<in> lotteries_on alts'", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  i \\<in> agents'\n  p \\<in> lotteries_on alts'\n  q \\<in> lotteries_on alts'\n\ngoal (1 subgoal):\n 1. SD (R' i) p q = SD (R i) p q", "by (auto simp: Ri.SD_preorder R'i.SD_preorder \n          preferred_alts_lift_pref_profile lottery_prob_carrier)"], ["proof (state)\nthis:\n  SD (R' i) p q = SD (R i) p q\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma lift_SD_iff_nonagent:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" and i: \"i \\<in> agents' - agents\"\n  shows   \"p \\<preceq>[SD(R' i)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD (R' i) p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R' i) p q", "from i election"], ["proof (chain)\npicking this:\n  i \\<in> agents' - agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'", "have i': \"i \\<in> agents'\""], ["proof (prove)\nusing this:\n  i \\<in> agents' - agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. i \\<in> agents'", "by blast"], ["proof (state)\nthis:\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. SD (R' i) p q", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents'", "interpret R'i: preorder_on alts' \"R' i\""], ["proof (prove)\nusing this:\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. Order_Predicates.preorder_on alts' (R' i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R' i) p q", "from assms election"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents' - agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'", "have \"p \\<in> lotteries_on alts'\" \"q \\<in> lotteries_on alts'\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents' - agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. p \\<in> lotteries_on alts' &&& q \\<in> lotteries_on alts'", "by (auto intro: lotteries_on_subset)"], ["proof (state)\nthis:\n  p \\<in> lotteries_on alts'\n  q \\<in> lotteries_on alts'\n\ngoal (1 subgoal):\n 1. SD (R' i) p q", "with assms election i'"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents' - agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  i \\<in> agents'\n  p \\<in> lotteries_on alts'\n  q \\<in> lotteries_on alts'", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents' - agents\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  i \\<in> agents'\n  p \\<in> lotteries_on alts'\n  q \\<in> lotteries_on alts'\n\ngoal (1 subgoal):\n 1. SD (R' i) p q", "by (auto simp: R'i.SD_preorder preferred_alts_lift_pref_profile lottery_prob_carrier)"], ["proof (state)\nthis:\n  SD (R' i) p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas lift_SD_iff = lift_SD_iff_agent lift_SD_iff_nonagent"], ["", "lemma lift_SD_iff':\n  \"p \\<in> lotteries_on alts \\<Longrightarrow> q \\<in> lotteries_on alts \\<Longrightarrow> i \\<in> agents' \\<Longrightarrow>\n     p \\<preceq>[SD(R' i)] q \\<longleftrightarrow> i \\<notin> agents \\<or> p \\<preceq>[SD(R i)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> lotteries_on alts; q \\<in> lotteries_on alts;\n     i \\<in> agents'\\<rbrakk>\n    \\<Longrightarrow> SD (R' i) p q = (i \\<notin> agents \\<or> SD (R i) p q)", "by (cases \"i \\<in> agents\") (simp_all add: lift_SD_iff)"], ["", "end"], ["", "lemma lift_SD_strict_iff:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" and i: \"i \\<in> agents\"\n  shows   \"p \\<prec>[SD(R' i)] q \\<longleftrightarrow> p \\<prec>[SD(R i)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>[SD (R' i)] q = p \\<prec>[SD (R i)] q", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. p \\<prec>[SD (R' i)] q = p \\<prec>[SD (R i)] q", "by (simp add: strongly_preferred_def lift_SD_iff)"], ["", "lemma lift_Pareto_SD_iff:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\"\n  shows   \"p \\<preceq>[Pareto(SD \\<circ> R')] q \\<longleftrightarrow> p \\<preceq>[Pareto(SD \\<circ> R)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R') p q = Pareto (SD \\<circ> R) p q", "using assms election"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R') p q = Pareto (SD \\<circ> R) p q", "by (auto simp: R.SD.Pareto_iff R'.SD.Pareto_iff lift_SD_iff')"], ["", "lemma lift_Pareto_SD_strict_iff:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\"\n  shows   \"p \\<prec>[Pareto(SD \\<circ> R')] q \\<longleftrightarrow> p \\<prec>[Pareto(SD \\<circ> R)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q = p \\<prec>[Pareto (SD \\<circ> R)] q", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q = p \\<prec>[Pareto (SD \\<circ> R)] q", "by (simp add: strongly_preferred_def lift_Pareto_SD_iff)"], ["", "lemma lift_SD_efficient_iff:\n  assumes p: \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R' p \\<longleftrightarrow> SD_efficient R p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD_efficient R' p = SD_efficient R p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. SD_efficient R' p \\<Longrightarrow> SD_efficient R p\n 2. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "assume eff: \"SD_efficient R' p\""], ["proof (state)\nthis:\n  SD_efficient R' p\n\ngoal (2 subgoals):\n 1. SD_efficient R' p \\<Longrightarrow> SD_efficient R p\n 2. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "have \"\\<not>(q \\<succ>[Pareto(SD \\<circ> R)] p)\" if q: \"q \\<in> lotteries_on alts\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R)] q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R)] q", "from q election"], ["proof (chain)\npicking this:\n  q \\<in> lotteries_on alts\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'", "have q': \"q \\<in> lotteries_on alts'\""], ["proof (prove)\nusing this:\n  q \\<in> lotteries_on alts\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. q \\<in> lotteries_on alts'", "by (blast intro: lotteries_on_subset)"], ["proof (state)\nthis:\n  q \\<in> lotteries_on alts'\n\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R)] q", "with eff"], ["proof (chain)\npicking this:\n  SD_efficient R' p\n  q \\<in> lotteries_on alts'", "have \"\\<not>(q \\<succ>[Pareto(SD \\<circ> R')] p)\""], ["proof (prove)\nusing this:\n  SD_efficient R' p\n  q \\<in> lotteries_on alts'\n\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R')] q", "by (simp add: R'.SD_efficient_def)"], ["proof (state)\nthis:\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R')] q\n\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R)] q", "with p q"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R')] q", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R')] q\n\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R)] q", "by (simp add: lift_Pareto_SD_strict_iff)"], ["proof (state)\nthis:\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R)] q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?q \\<in> lotteries_on alts \\<Longrightarrow>\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R)] ?q\n\ngoal (2 subgoals):\n 1. SD_efficient R' p \\<Longrightarrow> SD_efficient R p\n 2. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "thus \"SD_efficient R p\""], ["proof (prove)\nusing this:\n  ?q \\<in> lotteries_on alts \\<Longrightarrow>\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R)] ?q\n\ngoal (1 subgoal):\n 1. SD_efficient R p", "by (simp add: R.SD_efficient_def)"], ["proof (state)\nthis:\n  SD_efficient R p\n\ngoal (1 subgoal):\n 1. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "assume eff: \"SD_efficient R p\""], ["proof (state)\nthis:\n  SD_efficient R p\n\ngoal (1 subgoal):\n 1. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "have \"\\<not>(q \\<succ>[Pareto(SD \\<circ> R')] p)\" if q: \"q \\<in> lotteries_on alts'\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p \\<prec>[Pareto (SD \\<circ> R')] q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "assume less: \"q \\<succ>[Pareto(SD \\<circ> R')] p\""], ["proof (state)\nthis:\n  p \\<prec>[Pareto (SD \\<circ> R')] q\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "from R'.SD_efficient_lottery_exists[OF q]"], ["proof (chain)\npicking this:\n  (\\<And>qa.\n      \\<lbrakk>qa \\<in> lotteries_on alts'; Pareto (SD \\<circ> R') q qa;\n       SD_efficient R' qa\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "guess q'"], ["proof (prove)\nusing this:\n  (\\<And>qa.\n      \\<lbrakk>qa \\<in> lotteries_on alts'; Pareto (SD \\<circ> R') q qa;\n       SD_efficient R' qa\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  q' \\<in> lotteries_on alts'\n  Pareto (SD \\<circ> R') q q'\n  SD_efficient R' q'\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "note q' = this"], ["proof (state)\nthis:\n  q' \\<in> lotteries_on alts'\n  Pareto (SD \\<circ> R') q q'\n  SD_efficient R' q'\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "have \"x \\<notin> set_pmf q'\" if x: \"x \\<in> alts' - alts\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set_pmf q'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set_pmf q'", "from x"], ["proof (chain)\npicking this:\n  x \\<in> alts' - alts", "have \"x \\<in> pareto_losers R'\""], ["proof (prove)\nusing this:\n  x \\<in> alts' - alts\n\ngoal (1 subgoal):\n 1. x \\<in> pareto_losers R'", "by (simp add: pareto_losers_lift_pref_profile)"], ["proof (state)\nthis:\n  x \\<in> pareto_losers R'\n\ngoal (1 subgoal):\n 1. x \\<notin> set_pmf q'", "with R'.SD_efficient_no_pareto_loser[OF q'(3,1)]"], ["proof (chain)\npicking this:\n  set_pmf q' \\<inter> pareto_losers R' = {}\n  x \\<in> pareto_losers R'", "show \"x \\<notin> set_pmf q'\""], ["proof (prove)\nusing this:\n  set_pmf q' \\<inter> pareto_losers R' = {}\n  x \\<in> pareto_losers R'\n\ngoal (1 subgoal):\n 1. x \\<notin> set_pmf q'", "by blast"], ["proof (state)\nthis:\n  x \\<notin> set_pmf q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> alts' - alts \\<Longrightarrow> ?x \\<notin> set_pmf q'\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "with q'"], ["proof (chain)\npicking this:\n  q' \\<in> lotteries_on alts'\n  Pareto (SD \\<circ> R') q q'\n  SD_efficient R' q'\n  ?x \\<in> alts' - alts \\<Longrightarrow> ?x \\<notin> set_pmf q'", "have \"q' \\<in> lotteries_on alts\""], ["proof (prove)\nusing this:\n  q' \\<in> lotteries_on alts'\n  Pareto (SD \\<circ> R') q q'\n  SD_efficient R' q'\n  ?x \\<in> alts' - alts \\<Longrightarrow> ?x \\<notin> set_pmf q'\n\ngoal (1 subgoal):\n 1. q' \\<in> lotteries_on alts", "by (auto simp: lotteries_on_def)"], ["proof (state)\nthis:\n  q' \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  q' \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "from q' less"], ["proof (chain)\npicking this:\n  q' \\<in> lotteries_on alts'\n  Pareto (SD \\<circ> R') q q'\n  SD_efficient R' q'\n  p \\<prec>[Pareto (SD \\<circ> R')] q", "have \"q' \\<succ>[Pareto(SD \\<circ> R')] p\""], ["proof (prove)\nusing this:\n  q' \\<in> lotteries_on alts'\n  Pareto (SD \\<circ> R') q q'\n  SD_efficient R' q'\n  p \\<prec>[Pareto (SD \\<circ> R')] q\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q'", "by (auto intro: R'.SD.Pareto.strict_weak_trans)"], ["proof (state)\nthis:\n  p \\<prec>[Pareto (SD \\<circ> R')] q'\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "with \\<open>q' \\<in> lotteries_on alts\\<close> p"], ["proof (chain)\npicking this:\n  q' \\<in> lotteries_on alts\n  p \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R')] q'", "have \"q' \\<succ>[Pareto(SD \\<circ> R)] p\""], ["proof (prove)\nusing this:\n  q' \\<in> lotteries_on alts\n  p \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R')] q'\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R)] q'", "by (subst (asm) lift_Pareto_SD_strict_iff)"], ["proof (state)\nthis:\n  p \\<prec>[Pareto (SD \\<circ> R)] q'\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  q' \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q'", "have \"\\<not>SD_efficient R p\""], ["proof (prove)\nusing this:\n  q' \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q'\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "by (auto simp: R.SD_efficient_def)"], ["proof (state)\nthis:\n  \\<not> SD_efficient R p\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R')] q \\<Longrightarrow> False", "with eff"], ["proof (chain)\npicking this:\n  SD_efficient R p\n  \\<not> SD_efficient R p", "show False"], ["proof (prove)\nusing this:\n  SD_efficient R p\n  \\<not> SD_efficient R p\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?q \\<in> lotteries_on alts' \\<Longrightarrow>\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R')] ?q\n\ngoal (1 subgoal):\n 1. SD_efficient R p \\<Longrightarrow> SD_efficient R' p", "thus \"SD_efficient R' p\""], ["proof (prove)\nusing this:\n  ?q \\<in> lotteries_on alts' \\<Longrightarrow>\n  \\<not> p \\<prec>[Pareto (SD \\<circ> R')] ?q\n\ngoal (1 subgoal):\n 1. SD_efficient R' p", "by (simp add: R'.SD_efficient_def)"], ["proof (state)\nthis:\n  SD_efficient R' p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale sds_lowering = \n  ex_post_efficient_sds agents alts sds\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds +\n  fixes agents' alts' \n  assumes agents'_subset: \"agents' \\<subseteq> agents\" and alts'_subset: \"alts' \\<subseteq> alts\"\n      and agents'_nonempty [simp]: \"agents' \\<noteq> {}\" and alts'_nonempty [simp]: \"alts' \\<noteq> {}\"\nbegin"], ["", "lemma finite_agents' [simp]: \"finite agents'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite agents'", "using agents'_subset finite_agents"], ["proof (prove)\nusing this:\n  agents' \\<subseteq> agents\n  finite agents\n\ngoal (1 subgoal):\n 1. finite agents'", "by (rule finite_subset)"], ["", "lemma finite_alts' [simp]: \"finite alts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite alts'", "using alts'_subset finite_alts"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n  finite alts\n\ngoal (1 subgoal):\n 1. finite alts'", "by (rule finite_subset)"], ["", "abbreviation lift :: \"('agent, 'alt) pref_profile \\<Rightarrow> ('agent, 'alt) pref_profile\" where\n  \"lift \\<equiv> lift_pref_profile agents' alts' agents alts\""], ["", "definition lowered :: \"('agent, 'alt) pref_profile \\<Rightarrow> 'alt lottery\" where\n  \"lowered = sds \\<circ> lift\""], ["", "lemma lift_wf [simp, intro]: \n  \"pref_profile_wf agents' alts' R \\<Longrightarrow> is_pref_profile (lift R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R \\<Longrightarrow>\n    is_pref_profile (lift R)", "using alts'_subset agents'_subset"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R \\<Longrightarrow>\n    is_pref_profile (lift R)", "by (intro lift_pref_profile_wf) simp_all"], ["", "sublocale lowered: election agents' alts'"], ["proof (prove)\ngoal (1 subgoal):\n 1. election agents' alts'", "by unfold_locales simp_all"], ["", "lemma preferred_alts_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> i \\<in> agents \\<Longrightarrow> x \\<in> alts \\<Longrightarrow>\n     preferred_alts (lift R i) x = \n       (if i \\<in> agents' \\<and> x \\<in> alts' then preferred_alts (R i) x else alts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents;\n     x \\<in> alts\\<rbrakk>\n    \\<Longrightarrow> preferred_alts (lift R i) x =\n                      (if i \\<in> agents' \\<and> x \\<in> alts'\n                       then preferred_alts (R i) x else alts)", "using alts'_subset agents'_subset"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents;\n     x \\<in> alts\\<rbrakk>\n    \\<Longrightarrow> preferred_alts (lift R i) x =\n                      (if i \\<in> agents' \\<and> x \\<in> alts'\n                       then preferred_alts (R i) x else alts)", "by (intro preferred_alts_lift_pref_profile) simp_all"], ["", "lemma pareto_losers_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R \\<Longrightarrow>\n    pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')", "using agents'_subset alts'_subset"], ["proof (prove)\nusing this:\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R \\<Longrightarrow>\n    pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')", "by (intro pareto_losers_lift_pref_profile) simp_all"], ["", "lemma lowered_lotteries: \"lowered.lotteries \\<subseteq> lotteries\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.lotteries \\<subseteq> lotteries", "unfolding lotteries_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. set_pmf p \\<subseteq> alts'}\n    \\<subseteq> {p. set_pmf p \\<subseteq> alts}", "using alts'_subset"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. {p. set_pmf p \\<subseteq> alts'}\n    \\<subseteq> {p. set_pmf p \\<subseteq> alts}", "by blast"], ["", "sublocale lowered: social_decision_scheme agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. social_decision_scheme agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<in> lowered.lotteries", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<in> lowered.lotteries", "assume R_wf: \"pref_profile_wf agents' alts' R\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<in> lowered.lotteries", "from R_wf"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R", "have R'_wf: \"pref_profile_wf agents alts (lift R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by (rule lift_wf)"], ["proof (state)\nthis:\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<in> lowered.lotteries", "show \"lowered R \\<in> lowered.lotteries\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered R \\<in> lowered.lotteries", "unfolding lotteries_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered R \\<in> {p. set_pmf p \\<subseteq> alts'}", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "assume \"x \\<in> set_pmf (lowered R)\""], ["proof (state)\nthis:\n  x \\<in> set_pmf (lowered R)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "hence x: \"x \\<in> set_pmf (sds (lift R))\""], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (lowered R)\n\ngoal (1 subgoal):\n 1. x \\<in> set_pmf (sds (lift R))", "by (simp add: lowered_def)"], ["proof (state)\nthis:\n  x \\<in> set_pmf (sds (lift R))\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "with ex_post_efficient[OF R'_wf]"], ["proof (chain)\npicking this:\n  set_pmf (sds (lift R)) \\<inter> pareto_losers (lift R) = {}\n  x \\<in> set_pmf (sds (lift R))", "have \"x \\<notin> pareto_losers (lift R)\""], ["proof (prove)\nusing this:\n  set_pmf (sds (lift R)) \\<inter> pareto_losers (lift R) = {}\n  x \\<in> set_pmf (sds (lift R))\n\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers (lift R)", "by blast"], ["proof (state)\nthis:\n  x \\<notin> pareto_losers (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "with pareto_losers_lift[OF R_wf]"], ["proof (chain)\npicking this:\n  pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\n  x \\<notin> pareto_losers (lift R)", "have \"x \\<notin> alts - alts'\""], ["proof (prove)\nusing this:\n  pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\n  x \\<notin> pareto_losers (lift R)\n\ngoal (1 subgoal):\n 1. x \\<notin> alts - alts'", "by blast"], ["proof (state)\nthis:\n  x \\<notin> alts - alts'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "moreover"], ["proof (state)\nthis:\n  x \\<notin> alts - alts'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set_pmf (sds (lift R))", "have \"x \\<in> alts\""], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (sds (lift R))\n\ngoal (1 subgoal):\n 1. x \\<in> alts", "using sds_wf[OF R'_wf]"], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (sds (lift R))\n  sds (lift R) \\<in> lotteries\n\ngoal (1 subgoal):\n 1. x \\<in> alts", "by (auto simp: lotteries_on_def)"], ["proof (state)\nthis:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set_pmf (lowered R) \\<Longrightarrow> x \\<in> alts'", "ultimately"], ["proof (chain)\npicking this:\n  x \\<notin> alts - alts'\n  x \\<in> alts", "show \"x \\<in> alts'\""], ["proof (prove)\nusing this:\n  x \\<notin> alts - alts'\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts'", "by simp"], ["proof (state)\nthis:\n  x \\<in> alts'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lowered R \\<in> lowered.lotteries\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale ex_post_efficient_sds agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_post_efficient_sds agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "assume R_wf: \"lowered.is_pref_profile R\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "hence \"is_pref_profile (lift R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by simp"], ["proof (state)\nthis:\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "have \"set_pmf (lowered R) \\<inter> pareto_losers (lift R) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (lowered R) \\<inter> pareto_losers (lift R) = {}", "unfolding lowered_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (sds (lift R)) \\<inter> pareto_losers (lift R) = {}", "by (intro ex_post_efficient lift_wf R_wf)"], ["proof (state)\nthis:\n  set_pmf (lowered R) \\<inter> pareto_losers (lift R) = {}\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "also"], ["proof (state)\nthis:\n  set_pmf (lowered R) \\<inter> pareto_losers (lift R) = {}\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "have \"pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')", "by (intro pareto_losers_lift R_wf)"], ["proof (state)\nthis:\n  pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       set_pmf (lowered R) \\<inter> pareto_losers R = {}", "finally"], ["proof (chain)\npicking this:\n  set_pmf (lowered R) \\<inter> (pareto_losers R \\<union> (alts - alts')) =\n  {}", "show \"set_pmf (lowered R) \\<inter> pareto_losers R = {}\""], ["proof (prove)\nusing this:\n  set_pmf (lowered R) \\<inter> (pareto_losers R \\<union> (alts - alts')) =\n  {}\n\ngoal (1 subgoal):\n 1. set_pmf (lowered R) \\<inter> pareto_losers R = {}", "by blast"], ["proof (state)\nthis:\n  set_pmf (lowered R) \\<inter> pareto_losers R = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lowered_in_lotteries [simp]: \"lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<in> lotteries\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<in> lotteries", "using lowered.sds_wf[of R] lowered_lotteries"], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R \\<Longrightarrow>\n  lowered R \\<in> lowered.lotteries\n  lowered.lotteries \\<subseteq> lotteries\n\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<in> lotteries", "by blast"], ["", "end"], ["", "locale sds_lowering_anonymous =\n  anonymous_sds agents alts sds +\n  sds_lowering agents alts sds agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds agents' alts'\nbegin"], ["", "sublocale lowered: anonymous_sds agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. anonymous_sds agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "fix \\<pi> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "assume perm: \"\\<pi> permutes agents'\" and R_wf: \"lowered.is_pref_profile R\""], ["proof (state)\nthis:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "from perm"], ["proof (chain)\npicking this:\n  \\<pi> permutes agents'", "have \"lift (R \\<circ> \\<pi>) = lift R \\<circ> \\<pi>\""], ["proof (prove)\nusing this:\n  \\<pi> permutes agents'\n\ngoal (1 subgoal):\n 1. lift (R \\<circ> \\<pi>) = lift R \\<circ> \\<pi>", "using agents'_subset"], ["proof (prove)\nusing this:\n  \\<pi> permutes agents'\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. lift (R \\<circ> \\<pi>) = lift R \\<circ> \\<pi>", "by (rule lift_pref_profile_permute_agents)"], ["proof (state)\nthis:\n  lift (R \\<circ> \\<pi>) = lift R \\<circ> \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "hence \"sds (lift (R \\<circ> \\<pi>)) = sds (lift R \\<circ> \\<pi>)\""], ["proof (prove)\nusing this:\n  lift (R \\<circ> \\<pi>) = lift R \\<circ> \\<pi>\n\ngoal (1 subgoal):\n 1. sds (lift (R \\<circ> \\<pi>)) = sds (lift R \\<circ> \\<pi>)", "by simp"], ["proof (state)\nthis:\n  sds (lift (R \\<circ> \\<pi>)) = sds (lift R \\<circ> \\<pi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "also"], ["proof (state)\nthis:\n  sds (lift (R \\<circ> \\<pi>)) = sds (lift R \\<circ> \\<pi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "from perm R_wf"], ["proof (chain)\npicking this:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R", "have \"\\<pi> permutes agents\" \"is_pref_profile (lift R)\""], ["proof (prove)\nusing this:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<pi> permutes agents &&& is_pref_profile (lift R)", "using agents'_subset"], ["proof (prove)\nusing this:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. \\<pi> permutes agents &&& is_pref_profile (lift R)", "by (auto dest: permutes_subset)"], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "from anonymous[OF this]"], ["proof (chain)\npicking this:\n  sds (lift R \\<circ> \\<pi>) = sds (lift R)", "have \"sds (lift R \\<circ> \\<pi>) = sds (lift R)\""], ["proof (prove)\nusing this:\n  sds (lift R \\<circ> \\<pi>) = sds (lift R)\n\ngoal (1 subgoal):\n 1. sds (lift R \\<circ> \\<pi>) = sds (lift R)", "by (simp add: lowered_def)"], ["proof (state)\nthis:\n  sds (lift R \\<circ> \\<pi>) = sds (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "finally"], ["proof (chain)\npicking this:\n  sds (lift (R \\<circ> \\<pi>)) = sds (lift R)", "show \"lowered (R \\<circ> \\<pi>) = lowered R\""], ["proof (prove)\nusing this:\n  sds (lift (R \\<circ> \\<pi>)) = sds (lift R)\n\ngoal (1 subgoal):\n 1. lowered (R \\<circ> \\<pi>) = lowered R", "unfolding lowered_def o_def"], ["proof (prove)\nusing this:\n  sds (lift (\\<lambda>x. R (\\<pi> x))) = sds (lift R)\n\ngoal (1 subgoal):\n 1. sds (lift (\\<lambda>x. R (\\<pi> x))) = sds (lift R)", "."], ["proof (state)\nthis:\n  lowered (R \\<circ> \\<pi>) = lowered R\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale sds_lowering_neutral =\n  neutral_sds agents alts sds +\n  sds_lowering agents alts sds agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds agents' alts'\nbegin"], ["", "sublocale lowered: neutral_sds agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. neutral_sds agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "fix \\<sigma> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "assume perm: \"\\<sigma> permutes alts'\" and R_wf: \"lowered.is_pref_profile R\""], ["proof (state)\nthis:\n  \\<sigma> permutes alts'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "from perm alts'_subset"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts'\n  alts' \\<subseteq> alts", "have \"lift (permute_profile \\<sigma> R) = permute_profile \\<sigma> (lift R)\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts'\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. lift (permute_profile \\<sigma> R) = permute_profile \\<sigma> (lift R)", "by (rule lift_pref_profile_permute_alts)"], ["proof (state)\nthis:\n  lift (permute_profile \\<sigma> R) = permute_profile \\<sigma> (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "hence \"sds (lift (permute_profile \\<sigma> R)) = sds (permute_profile \\<sigma> (lift R))\""], ["proof (prove)\nusing this:\n  lift (permute_profile \\<sigma> R) = permute_profile \\<sigma> (lift R)\n\ngoal (1 subgoal):\n 1. sds (lift (permute_profile \\<sigma> R)) =\n    sds (permute_profile \\<sigma> (lift R))", "by simp"], ["proof (state)\nthis:\n  sds (lift (permute_profile \\<sigma> R)) =\n  sds (permute_profile \\<sigma> (lift R))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "also"], ["proof (state)\nthis:\n  sds (lift (permute_profile \\<sigma> R)) =\n  sds (permute_profile \\<sigma> (lift R))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "from R_wf perm"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R\n  \\<sigma> permutes alts'", "have \"is_pref_profile (lift R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n  \\<sigma> permutes alts'\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by simp"], ["proof (state)\nthis:\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "with perm alts'_subset"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts'\n  alts' \\<subseteq> alts\n  is_pref_profile (lift R)", "have \"sds (permute_profile \\<sigma> (lift R)) = map_pmf \\<sigma> (sds (lift R))\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts'\n  alts' \\<subseteq> alts\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. sds (permute_profile \\<sigma> (lift R)) =\n    map_pmf \\<sigma> (sds (lift R))", "by (intro neutral) (auto intro: permutes_subset)"], ["proof (state)\nthis:\n  sds (permute_profile \\<sigma> (lift R)) = map_pmf \\<sigma> (sds (lift R))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (lowered R)", "finally"], ["proof (chain)\npicking this:\n  sds (lift (permute_profile \\<sigma> R)) = map_pmf \\<sigma> (sds (lift R))", "show \"lowered (permute_profile \\<sigma> R) = map_pmf \\<sigma> (lowered R)\""], ["proof (prove)\nusing this:\n  sds (lift (permute_profile \\<sigma> R)) = map_pmf \\<sigma> (sds (lift R))\n\ngoal (1 subgoal):\n 1. lowered (permute_profile \\<sigma> R) = map_pmf \\<sigma> (lowered R)", "by (simp add: lowered_def o_def)"], ["proof (state)\nthis:\n  lowered (permute_profile \\<sigma> R) = map_pmf \\<sigma> (lowered R)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale sds_lowering_sd_efficient =\n  sd_efficient_sds agents alts sds +\n  sds_lowering agents alts sds agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds agents' alts'\nbegin"], ["", "sublocale sd_efficient_sds agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_efficient_sds agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       SD_efficient R (lowered R)", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       SD_efficient R (lowered R)", "assume R_wf: \"lowered.is_pref_profile R\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       SD_efficient R (lowered R)", "interpret R: pref_profile_wf agents' alts' R"], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       SD_efficient R (lowered R)", "from R_wf agents'_subset alts'_subset"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts", "show \"SD_efficient R (lowered R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. SD_efficient R (lowered R)", "unfolding lowered_def o_def"], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. SD_efficient R (sds (lift R))", "by (subst lift_SD_efficient_iff [symmetric])\n       (insert SD_efficient R_wf lowered.sds_wf[OF R_wf], auto simp: lowered_def)"], ["proof (state)\nthis:\n  SD_efficient R (lowered R)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale sds_lowering_strategyproof =\n  strategyproof_sds agents alts sds +\n  sds_lowering agents alts sds agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and sds agents' alts'\nbegin"], ["", "sublocale strategyproof_sds agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. strategyproof_sds agents' alts' lowered", "proof (unfold_locales, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "fix R i Ri'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "assume R_wf: \"lowered.is_pref_profile R\" and i: \"i \\<in> agents'\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "assume Ri': \"total_preorder_on alts' Ri'\""], ["proof (state)\nthis:\n  total_preorder_on alts' Ri'\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "assume manipulable: \"lowered.manipulable_profile R i Ri'\""], ["proof (state)\nthis:\n  lowered.manipulable_profile R i Ri'\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "from i agents'_subset"], ["proof (chain)\npicking this:\n  i \\<in> agents'\n  agents' \\<subseteq> agents", "have i': \"i \\<in> agents\""], ["proof (prove)\nusing this:\n  i \\<in> agents'\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. i \\<in> agents", "by blast"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "interpret R: pref_profile_wf agents' alts' R"], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "from R_wf"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R", "interpret liftR: pref_profile_wf agents alts \"lift R\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "define lift_Ri'\n    where \"lift_Ri' x y \\<longleftrightarrow> x \\<in> alts \\<and> y \\<in> alts \\<and> (x = y \\<or> x \\<notin> alts' \\<or> (y \\<in> alts' \\<and> Ri' x y))\"\n    for x y"], ["proof (state)\nthis:\n  lift_Ri' ?x ?y =\n  (?x \\<in> alts \\<and>\n   ?y \\<in> alts \\<and>\n   (?x = ?y \\<or> ?x \\<notin> alts' \\<or> ?y \\<in> alts' \\<and> Ri' ?x ?y))\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "define S where \"S = (lift R)(i := lift_Ri')\""], ["proof (state)\nthis:\n  S = (lift R)(i := lift_Ri')\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "from Ri'"], ["proof (chain)\npicking this:\n  total_preorder_on alts' Ri'", "interpret Ri': total_preorder_on alts' Ri'"], ["proof (prove)\nusing this:\n  total_preorder_on alts' Ri'\n\ngoal (1 subgoal):\n 1. total_preorder_on alts' Ri'", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "have wf_lift_Ri': \"total_preorder_on alts lift_Ri'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts lift_Ri'", "using Ri'.total"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> alts'; ?y \\<in> alts'\\<rbrakk>\n  \\<Longrightarrow> Ri' ?x ?y \\<or> Ri' ?y ?x\n\ngoal (1 subgoal):\n 1. total_preorder_on alts lift_Ri'", "by unfold_locales (auto simp: lift_Ri'_def intro: Ri'.trans)"], ["proof (state)\nthis:\n  total_preorder_on alts lift_Ri'\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "from agents'_subset i"], ["proof (chain)\npicking this:\n  agents' \\<subseteq> agents\n  i \\<in> agents'", "have S_altdef: \"S = lift (R(i := Ri'))\""], ["proof (prove)\nusing this:\n  agents' \\<subseteq> agents\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. S = lift (R(i := Ri'))", "by (auto simp: fun_eq_iff lift_pref_profile_def lift_Ri'_def S_def)"], ["proof (state)\nthis:\n  S = lift (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "have \"lowered (R(i := Ri')) \\<in> lowered.lotteries\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered (R(i := Ri')) \\<in> lowered.lotteries", "by (intro lowered.sds_wf R.wf_update i Ri')"], ["proof (state)\nthis:\n  lowered (R(i := Ri')) \\<in> lowered.lotteries\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "hence sds_S_wf: \"sds S \\<in> lowered.lotteries\""], ["proof (prove)\nusing this:\n  lowered (R(i := Ri')) \\<in> lowered.lotteries\n\ngoal (1 subgoal):\n 1. sds S \\<in> lowered.lotteries", "by (simp add: S_altdef lowered_def)"], ["proof (state)\nthis:\n  sds S \\<in> lowered.lotteries\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "from manipulable"], ["proof (chain)\npicking this:\n  lowered.manipulable_profile R i Ri'", "have \"lowered R \\<prec>[SD (R i)] sds (lift (R(i := Ri')))\""], ["proof (prove)\nusing this:\n  lowered.manipulable_profile R i Ri'\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[SD (R i)] sds (lift (R(i := Ri')))", "unfolding lowered.manipulable_profile_def"], ["proof (prove)\nusing this:\n  lowered R \\<prec>[SD (R i)] lowered (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[SD (R i)] sds (lift (R(i := Ri')))", "by (simp add: lowered_def)"], ["proof (state)\nthis:\n  lowered R \\<prec>[SD (R i)] sds (lift (R(i := Ri')))\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lowered R \\<prec>[SD (R i)] sds (lift (R(i := Ri')))\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "note S_altdef [symmetric]"], ["proof (state)\nthis:\n  lift (R(i := Ri')) = S\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lowered R \\<prec>[SD (R i)] sds S", "have \"lowered R \\<prec>[SD (lift R i)] sds S\""], ["proof (prove)\nusing this:\n  lowered R \\<prec>[SD (R i)] sds S\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[SD (lift R i)] sds S", "using R_wf i lowered.sds_wf[OF R_wf] sds_S_wf"], ["proof (prove)\nusing this:\n  lowered R \\<prec>[SD (R i)] sds S\n  lowered.is_pref_profile R\n  i \\<in> agents'\n  lowered R \\<in> lowered.lotteries\n  sds S \\<in> lowered.lotteries\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[SD (lift R i)] sds S", "by (subst lift_SD_strict_iff) (simp_all add: agents'_subset alts'_subset)"], ["proof (state)\nthis:\n  lowered R \\<prec>[SD (lift R i)] sds S\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"manipulable_profile (lift R) i lift_Ri'\""], ["proof (prove)\nusing this:\n  lowered R \\<prec>[SD (lift R i)] sds S\n\ngoal (1 subgoal):\n 1. manipulable_profile (lift R) i lift_Ri'", "by (simp add: manipulable_profile_def lowered_def S_def)"], ["proof (state)\nthis:\n  manipulable_profile (lift R) i lift_Ri'\n\ngoal (1 subgoal):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents';\n        total_preorder_on alts' Ri';\n        lowered.manipulable_profile R i Ri'\\<rbrakk>\n       \\<Longrightarrow> False", "with strategyproof[OF lift_wf[OF R_wf] i' wf_lift_Ri']"], ["proof (chain)\npicking this:\n  \\<not> manipulable_profile (lift R) i lift_Ri'\n  manipulable_profile (lift R) i lift_Ri'", "show False"], ["proof (prove)\nusing this:\n  \\<not> manipulable_profile (lift R) i lift_Ri'\n  manipulable_profile (lift R) i lift_Ri'\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale sds_lowering_anonymous_neutral_sdeff_stratproof =\n  sds_lowering_anonymous + sds_lowering_neutral + \n  sds_lowering_sd_efficient + sds_lowering_strategyproof"], ["", "end"]]}