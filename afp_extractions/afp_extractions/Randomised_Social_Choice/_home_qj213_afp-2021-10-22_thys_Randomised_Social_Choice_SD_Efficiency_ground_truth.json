{"file_name": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice/SD_Efficiency.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice", "problem_names": ["lemma SD_inefficient_support_subset:\n  assumes inefficient: \"\\<not>SD_efficient R p'\"\n  assumes support: \"set_pmf p' \\<subseteq> set_pmf p\"\n  assumes lotteries: \"p \\<in> lotteries_on alts\"\n  shows   \"\\<not>SD_efficient R p\"", "lemma SD_efficient_support_subset:\n  assumes \"SD_efficient R p\" \"set_pmf p' \\<subseteq> set_pmf p\" \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R p'\"", "lemma SD_efficient_same_support:\n  assumes \"set_pmf p = set_pmf p'\" \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R p \\<longleftrightarrow> SD_efficient R p'\"", "lemma SD_efficient_iff:\n  assumes \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R p \\<longleftrightarrow> SD_efficient R (pmf_of_set (set_pmf p))\"", "lemma SD_efficient_no_pareto_loser:\n  assumes efficient: \"SD_efficient R p\" and p_wf: \"p \\<in> lotteries_on alts\"\n  shows   \"set_pmf p \\<inter> pareto_losers R = {}\"", "lemma improve_lottery_support_subset:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" \"q \\<succ>[Pareto(SD \\<circ> R)] p\"\n          \"set_pmf p = set_pmf q\"\n  obtains r where \"r \\<in> lotteries_on alts\" \"r \\<succeq>[Pareto(SD \\<circ> R)] q\" \"set_pmf r \\<subset> set_pmf p\"", "lemma improve_lottery:\n  assumes \"\\<not>SD_efficient R q\"\n  defines \"r \\<equiv> improve_lottery q\"\n  shows   \"r \\<in> lotteries_on alts\" \"r \\<succ>[Pareto(SD\\<circ>R)] q\"\n          \"\\<And>r'. r' \\<in> lotteries_on alts \\<Longrightarrow> r' \\<succ>[Pareto(SD\\<circ>R)] q \\<Longrightarrow> \\<not>(set_pmf r' \\<subset> set_pmf r)\"", "lemma sd_chain_None_propagate:\n  \"m \\<ge> n \\<Longrightarrow> sd_chain n = None \\<Longrightarrow> sd_chain m = None\"", "lemma sd_chain_Some_propagate:\n  \"m \\<ge> n \\<Longrightarrow> sd_chain m = Some q \\<Longrightarrow> \\<exists>q'. sd_chain n = Some q'\"", "lemma sd_chain_NoneD:\n  \"sd_chain n = None \\<Longrightarrow> \\<exists>n p. sd_chain n = Some p \\<and> SD_efficient R p\"", "lemma sd_chain_lottery: \"sd_chain n = Some q \\<Longrightarrow> q \\<in> lotteries_on alts\"", "lemma sd_chain_Suc:\n  assumes \"sd_chain m = Some q\"\n  assumes \"sd_chain (Suc m) = Some r\"\n  shows   \"q \\<prec>[Pareto(SD\\<circ>R)] r\"", "lemma sd_chain_strictly_preferred:\n  assumes \"m < n\"\n  assumes \"sd_chain m = Some q\"\n  assumes \"sd_chain n = Some s\"\n  shows   \"q \\<prec>[Pareto(SD\\<circ>R)] s\"", "lemma sd_chain_preferred:\n  assumes \"m \\<le> n\"\n  assumes \"sd_chain m = Some q\"\n  assumes \"sd_chain n = Some s\"\n  shows   \"q \\<preceq>[Pareto(SD\\<circ>R)] s\"", "lemma SD_efficient_lottery_exists: \n  obtains q where \"q \\<in> lotteries_on alts\" \"q \\<succeq>[Pareto(SD\\<circ>R)] p\" \"SD_efficient R q\"", "lemma \n  assumes \"p \\<in> lotteries_on alts\"\n  shows   \"\\<exists>q\\<in>lotteries_on alts. q \\<succeq>[Pareto(SD\\<circ>R)] p \\<and> SD_efficient R q\""], "translations": [["", "lemma SD_inefficient_support_subset:\n  assumes inefficient: \"\\<not>SD_efficient R p'\"\n  assumes support: \"set_pmf p' \\<subseteq> set_pmf p\"\n  assumes lotteries: \"p \\<in> lotteries_on alts\"\n  shows   \"\\<not>SD_efficient R p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from assms"], ["proof (chain)\npicking this:\n  \\<not> SD_efficient R p'\n  set_pmf p' \\<subseteq> set_pmf p\n  p \\<in> lotteries_on alts", "have p'_wf: \"p' \\<in> lotteries_on alts\""], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R p'\n  set_pmf p' \\<subseteq> set_pmf p\n  p \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. p' \\<in> lotteries_on alts", "by (simp add: lotteries_on_def)"], ["proof (state)\nthis:\n  p' \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from inefficient"], ["proof (chain)\npicking this:\n  \\<not> SD_efficient R p'", "obtain q' i where q': \"q' \\<in> lotteries_on alts\" \"i \\<in> agents\"\n    \"\\<And>i. i \\<in> agents \\<Longrightarrow> q' \\<succeq>[SD(R i)] p'\" \"q' \\<succ>[SD(R i)] p'\""], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R p'\n\ngoal (1 subgoal):\n 1. (\\<And>q' i.\n        \\<lbrakk>q' \\<in> lotteries_on alts; i \\<in> agents;\n         \\<And>i. i \\<in> agents \\<Longrightarrow> SD (R i) p' q';\n         p' \\<prec>[SD (R i)] q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding SD_efficient_def'"], ["proof (prove)\nusing this:\n  \\<not> \\<not> (\\<exists>q\\<in>lotteries_on alts.\n                    (\\<forall>i\\<in>agents. SD (R i) p' q) \\<and>\n                    (\\<exists>i\\<in>agents. p' \\<prec>[SD (R i)] q))\n\ngoal (1 subgoal):\n 1. (\\<And>q' i.\n        \\<lbrakk>q' \\<in> lotteries_on alts; i \\<in> agents;\n         \\<And>i. i \\<in> agents \\<Longrightarrow> SD (R i) p' q';\n         p' \\<prec>[SD (R i)] q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q' \\<in> lotteries_on alts\n  i \\<in> agents\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p' q'\n  p' \\<prec>[SD (R i)] q'\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "have subset: \"{x. pmf p' x > pmf q' x} \\<subseteq> set_pmf p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. pmf q' x < pmf p' x} \\<subseteq> set_pmf p'", "by (auto simp: set_pmf_eq)"], ["proof (state)\nthis:\n  {x. pmf q' x < pmf p' x} \\<subseteq> set_pmf p'\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "also"], ["proof (state)\nthis:\n  {x. pmf q' x < pmf p' x} \\<subseteq> set_pmf p'\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "have \"\\<dots> \\<subseteq> set_pmf p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf p' \\<subseteq> set_pmf p", "by fact"], ["proof (state)\nthis:\n  set_pmf p' \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "also"], ["proof (state)\nthis:\n  set_pmf p' \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "have \"\\<dots> \\<subseteq> alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf p \\<subseteq> alts", "using lotteries"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. set_pmf p \\<subseteq> alts", "by (simp add: lotteries_on_def)"], ["proof (state)\nthis:\n  set_pmf p \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "finally"], ["proof (chain)\npicking this:\n  {x. pmf q' x < pmf p' x} \\<subseteq> alts", "have finite: \"finite {x. pmf p' x > pmf q' x}\""], ["proof (prove)\nusing this:\n  {x. pmf q' x < pmf p' x} \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. finite {x. pmf q' x < pmf p' x}", "using finite_alts"], ["proof (prove)\nusing this:\n  {x. pmf q' x < pmf p' x} \\<subseteq> alts\n  finite alts\n\ngoal (1 subgoal):\n 1. finite {x. pmf q' x < pmf p' x}", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite {x. pmf q' x < pmf p' x}\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "define \\<epsilon> where \"\\<epsilon> = Min (insert 1 {pmf p x / (pmf p' x - pmf q' x) |x. pmf p' x > pmf q' x})\""], ["proof (state)\nthis:\n  \\<epsilon> =\n  Min (insert 1 {pmf p x / (pmf p' x - pmf q' x) |x. pmf q' x < pmf p' x})\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "define supp where \"supp = set_pmf p \\<union> set_pmf q'\""], ["proof (state)\nthis:\n  supp = set_pmf p \\<union> set_pmf q'\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from lotteries finite_alts q'(1)"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  finite alts\n  q' \\<in> lotteries_on alts", "have finite_supp: \"finite supp\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  finite alts\n  q' \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. finite supp", "by (auto simp: lotteries_on_def supp_def dest: finite_subset)"], ["proof (state)\nthis:\n  finite supp\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from support"], ["proof (chain)\npicking this:\n  set_pmf p' \\<subseteq> set_pmf p", "have [simp]: \"pmf p x = 0\" \"pmf p' x = 0\" \"pmf q' x = 0\" if \"x \\<notin> supp\" for x"], ["proof (prove)\nusing this:\n  set_pmf p' \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. pmf p x = 0 &&& pmf p' x = 0 &&& pmf q' x = 0", "using that"], ["proof (prove)\nusing this:\n  set_pmf p' \\<subseteq> set_pmf p\n  x \\<notin> supp\n\ngoal (1 subgoal):\n 1. pmf p x = 0 &&& pmf p' x = 0 &&& pmf q' x = 0", "by (auto simp: supp_def set_pmf_eq)"], ["proof (state)\nthis:\n  ?x \\<notin> supp \\<Longrightarrow> pmf p ?x = 0\n  ?x \\<notin> supp \\<Longrightarrow> pmf p' ?x = 0\n  ?x \\<notin> supp \\<Longrightarrow> pmf q' ?x = 0\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from finite support subset"], ["proof (chain)\npicking this:\n  finite {x. pmf q' x < pmf p' x}\n  set_pmf p' \\<subseteq> set_pmf p\n  {x. pmf q' x < pmf p' x} \\<subseteq> set_pmf p'", "have \\<epsilon>: \"\\<epsilon> > 0\""], ["proof (prove)\nusing this:\n  finite {x. pmf q' x < pmf p' x}\n  set_pmf p' \\<subseteq> set_pmf p\n  {x. pmf q' x < pmf p' x} \\<subseteq> set_pmf p'\n\ngoal (1 subgoal):\n 1. 0 < \\<epsilon>", "unfolding \\<epsilon>_def"], ["proof (prove)\nusing this:\n  finite {x. pmf q' x < pmf p' x}\n  set_pmf p' \\<subseteq> set_pmf p\n  {x. pmf q' x < pmf p' x} \\<subseteq> set_pmf p'\n\ngoal (1 subgoal):\n 1. 0 < Min (insert 1\n              {pmf p x / (pmf p' x - pmf q' x) |x. pmf q' x < pmf p' x})", "by (auto simp: field_simps set_pmf_eq')"], ["proof (state)\nthis:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "have nonneg: \"pmf p x + \\<epsilon> * (pmf q' x - pmf p' x) \\<ge> 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "proof (cases \"pmf p' x > pmf q' x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)\n 2. \\<not> pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "case True"], ["proof (state)\nthis:\n  pmf q' x < pmf p' x\n\ngoal (2 subgoals):\n 1. pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)\n 2. \\<not> pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "with finite"], ["proof (chain)\npicking this:\n  finite {x. pmf q' x < pmf p' x}\n  pmf q' x < pmf p' x", "have \"\\<epsilon> \\<le> pmf p x / (pmf p' x - pmf q' x)\""], ["proof (prove)\nusing this:\n  finite {x. pmf q' x < pmf p' x}\n  pmf q' x < pmf p' x\n\ngoal (1 subgoal):\n 1. \\<epsilon> \\<le> pmf p x / (pmf p' x - pmf q' x)", "unfolding \\<epsilon>_def"], ["proof (prove)\nusing this:\n  finite {x. pmf q' x < pmf p' x}\n  pmf q' x < pmf p' x\n\ngoal (1 subgoal):\n 1. Min (insert 1 {pmf p x / (pmf p' x - pmf q' x) |x. pmf q' x < pmf p' x})\n    \\<le> pmf p x / (pmf p' x - pmf q' x)", "by (intro Min_le) auto"], ["proof (state)\nthis:\n  \\<epsilon> \\<le> pmf p x / (pmf p' x - pmf q' x)\n\ngoal (2 subgoals):\n 1. pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)\n 2. \\<not> pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "with True"], ["proof (chain)\npicking this:\n  pmf q' x < pmf p' x\n  \\<epsilon> \\<le> pmf p x / (pmf p' x - pmf q' x)", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf q' x < pmf p' x\n  \\<epsilon> \\<le> pmf p x / (pmf p' x - pmf q' x)\n\ngoal (1 subgoal):\n 1. 0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)\n\ngoal (1 subgoal):\n 1. \\<not> pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "case False"], ["proof (state)\nthis:\n  \\<not> pmf q' x < pmf p' x\n\ngoal (1 subgoal):\n 1. \\<not> pmf q' x < pmf p' x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "with pmf_nonneg[of p x] \\<epsilon>"], ["proof (chain)\npicking this:\n  0 \\<le> pmf p x\n  0 < \\<epsilon>\n  \\<not> pmf q' x < pmf p' x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> pmf p x\n  0 < \\<epsilon>\n  \\<not> pmf q' x < pmf p' x\n\ngoal (1 subgoal):\n 1. 0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "define q where \"q = embed_pmf (\\<lambda>x. pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\""], ["proof (state)\nthis:\n  q = embed_pmf (\\<lambda>x. pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "have \"(\\<integral>\\<^sup>+ x. ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)) \\<partial>count_space UNIV) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\n                       \\<partial>count_space UNIV =\n    1", "proof (subst nn_integral_count_space')"], ["proof (state)\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A.\n       ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n    1", "have \"(\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) = \n            ennreal ((\\<Sum>x\\<in>supp. pmf p x) + \\<epsilon> * ((\\<Sum>x\\<in>supp. pmf q' x) - (\\<Sum>x\\<in>supp. pmf p' x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>supp.\n       ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n    ennreal\n     (sum (pmf p) supp +\n      \\<epsilon> * (sum (pmf q') supp - sum (pmf p') supp))", "by (subst sum_ennreal[OF nonneg], rule ennreal_cong)\n        (auto simp: sum_subtractf ring_distribs sum.distrib sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>supp.\n     ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n  ennreal\n   (sum (pmf p) supp + \\<epsilon> * (sum (pmf q') supp - sum (pmf p') supp))\n\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A.\n       ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>supp.\n     ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n  ennreal\n   (sum (pmf p) supp + \\<epsilon> * (sum (pmf q') supp - sum (pmf p') supp))\n\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A.\n       ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n    1", "from finite_supp support"], ["proof (chain)\npicking this:\n  finite supp\n  set_pmf p' \\<subseteq> set_pmf p", "have \"\\<dots> = 1\""], ["proof (prove)\nusing this:\n  finite supp\n  set_pmf p' \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. ennreal\n     (sum (pmf p) supp +\n      \\<epsilon> * (sum (pmf q') supp - sum (pmf p') supp)) =\n    1", "by (subst (1 2 3) sum_pmf_eq_1) (auto simp: supp_def)"], ["proof (state)\nthis:\n  ennreal\n   (sum (pmf p) supp +\n    \\<epsilon> * (sum (pmf q') supp - sum (pmf p') supp)) =\n  1\n\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A.\n       ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n    1", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>supp.\n     ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n  1", "show \"(\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) = 1\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>supp.\n     ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n  1\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>supp.\n       ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n    1", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>supp.\n     ennreal (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))) =\n  1\n\ngoal (3 subgoals):\n 1. finite supp\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> supp\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)) =\n                         0\n 3. supp \\<subseteq> UNIV", "qed (insert nonneg finite_supp, simp_all)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "with nonneg"], ["proof (chain)\npicking this:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\n                     \\<partial>count_space UNIV =\n  1", "have pmf_q: \"pmf q x = pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)\" for x"], ["proof (prove)\nusing this:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. pmf q x = pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "unfolding q_def"], ["proof (prove)\nusing this:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q' x - pmf p' x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. pmf (embed_pmf\n          (\\<lambda>x. pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)))\n     x =\n    pmf p x + \\<epsilon> * (pmf q' x - pmf p' x)", "by (intro pmf_embed_pmf) simp_all"], ["proof (state)\nthis:\n  pmf q ?x = pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "with support"], ["proof (chain)\npicking this:\n  set_pmf p' \\<subseteq> set_pmf p\n  pmf q ?x = pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)", "have support_q: \"set_pmf q \\<subseteq> supp\""], ["proof (prove)\nusing this:\n  set_pmf p' \\<subseteq> set_pmf p\n  pmf q ?x = pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n\ngoal (1 subgoal):\n 1. set_pmf q \\<subseteq> supp", "unfolding supp_def"], ["proof (prove)\nusing this:\n  set_pmf p' \\<subseteq> set_pmf p\n  pmf q ?x = pmf p ?x + \\<epsilon> * (pmf q' ?x - pmf p' ?x)\n\ngoal (1 subgoal):\n 1. set_pmf q \\<subseteq> set_pmf p \\<union> set_pmf q'", "by (auto simp: set_pmf_eq)"], ["proof (state)\nthis:\n  set_pmf q \\<subseteq> supp\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "with lotteries support q'(1)"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  set_pmf p' \\<subseteq> set_pmf p\n  q' \\<in> lotteries_on alts\n  set_pmf q \\<subseteq> supp", "have q_wf: \"q \\<in> lotteries_on alts\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  set_pmf p' \\<subseteq> set_pmf p\n  q' \\<in> lotteries_on alts\n  set_pmf q \\<subseteq> supp\n\ngoal (1 subgoal):\n 1. q \\<in> lotteries_on alts", "by (auto simp add: lotteries_on_def supp_def)"], ["proof (state)\nthis:\n  q \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from support_q support"], ["proof (chain)\npicking this:\n  set_pmf q \\<subseteq> supp\n  set_pmf p' \\<subseteq> set_pmf p", "have expected_utility:\n    \"measure_pmf.expectation q u = measure_pmf.expectation p u + \n         \\<epsilon> * (measure_pmf.expectation q' u - measure_pmf.expectation p' u)\" for u"], ["proof (prove)\nusing this:\n  set_pmf q \\<subseteq> supp\n  set_pmf p' \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation q u =\n    measure_pmf.expectation p u +\n    \\<epsilon> *\n    (measure_pmf.expectation q' u - measure_pmf.expectation p' u)", "by (subst (1 2 3 4) integral_measure_pmf[OF finite_supp])\n       (auto simp: pmf_q supp_def sum.distrib sum_distrib_left \n                   sum_distrib_right sum_subtractf algebra_simps)"], ["proof (state)\nthis:\n  measure_pmf.expectation q ?u =\n  measure_pmf.expectation p ?u +\n  \\<epsilon> *\n  (measure_pmf.expectation q' ?u - measure_pmf.expectation p' ?u)\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "have \"q \\<succeq>[SD(R i)] p\" if i: \"i \\<in> agents\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. SD (R i) p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R i) p q", "from i"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. SD (R i) p q", "from i lotteries q'(1) q'(3)[OF i] q_wf p'_wf \\<epsilon>"], ["proof (chain)\npicking this:\n  i \\<in> agents\n  p \\<in> lotteries_on alts\n  q' \\<in> lotteries_on alts\n  SD (R i) p' q'\n  q \\<in> lotteries_on alts\n  p' \\<in> lotteries_on alts\n  0 < \\<epsilon>", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  p \\<in> lotteries_on alts\n  q' \\<in> lotteries_on alts\n  SD (R i) p' q'\n  q \\<in> lotteries_on alts\n  p' \\<in> lotteries_on alts\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. SD (R i) p q", "by (fastforce simp: SD_iff_expected_utilities_le expected_utility)"], ["proof (state)\nthis:\n  SD (R i) p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p q\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "moreover"], ["proof (state)\nthis:\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p q\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from \\<open>i \\<in> agents\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "from lotteries q'(1,4) q_wf p'_wf \\<epsilon>"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q' \\<in> lotteries_on alts\n  p' \\<prec>[SD (R i)] q'\n  q \\<in> lotteries_on alts\n  p' \\<in> lotteries_on alts\n  0 < \\<epsilon>", "have \"q \\<succ>[SD(R i)] p\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q' \\<in> lotteries_on alts\n  p' \\<prec>[SD (R i)] q'\n  q \\<in> lotteries_on alts\n  p' \\<in> lotteries_on alts\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. p \\<prec>[SD (R i)] q", "by (force simp: SD_iff_expected_utilities_le expected_utility not_le strongly_preferred_def)"], ["proof (state)\nthis:\n  p \\<prec>[SD (R i)] q\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "ultimately"], ["proof (chain)\npicking this:\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p q\n  p \\<prec>[SD (R i)] q", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p q\n  p \\<prec>[SD (R i)] q\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "using q_wf \\<open>i \\<in> agents\\<close>"], ["proof (prove)\nusing this:\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p q\n  p \\<prec>[SD (R i)] q\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. \\<not> SD_efficient R p", "unfolding SD_efficient_def'"], ["proof (prove)\nusing this:\n  ?i \\<in> agents \\<Longrightarrow> SD (R ?i) p q\n  p \\<prec>[SD (R i)] q\n  q \\<in> lotteries_on alts\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>q\\<in>lotteries_on alts.\n                      (\\<forall>i\\<in>agents. SD (R i) p q) \\<and>\n                      (\\<exists>i\\<in>agents. p \\<prec>[SD (R i)] q))", "by blast"], ["proof (state)\nthis:\n  \\<not> SD_efficient R p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SD_efficient_support_subset:\n  assumes \"SD_efficient R p\" \"set_pmf p' \\<subseteq> set_pmf p\" \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD_efficient R p'", "using SD_inefficient_support_subset[OF _ assms(2,3)] assms(1)"], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R p' \\<Longrightarrow> \\<not> SD_efficient R p\n  SD_efficient R p\n\ngoal (1 subgoal):\n 1. SD_efficient R p'", "by blast"], ["", "lemma SD_efficient_same_support:\n  assumes \"set_pmf p = set_pmf p'\" \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R p \\<longleftrightarrow> SD_efficient R p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD_efficient R p = SD_efficient R p'", "using SD_inefficient_support_subset[of p p'] SD_inefficient_support_subset[of p' p] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> SD_efficient R p; set_pmf p \\<subseteq> set_pmf p';\n   p' \\<in> lotteries_on alts\\<rbrakk>\n  \\<Longrightarrow> \\<not> SD_efficient R p'\n  \\<lbrakk>\\<not> SD_efficient R p'; set_pmf p' \\<subseteq> set_pmf p;\n   p \\<in> lotteries_on alts\\<rbrakk>\n  \\<Longrightarrow> \\<not> SD_efficient R p\n  set_pmf p = set_pmf p'\n  p \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. SD_efficient R p = SD_efficient R p'", "by (auto simp: lotteries_on_def)"], ["", "lemma SD_efficient_iff:\n  assumes \"p \\<in> lotteries_on alts\"\n  shows   \"SD_efficient R p \\<longleftrightarrow> SD_efficient R (pmf_of_set (set_pmf p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD_efficient R p = SD_efficient R (pmf_of_set (set_pmf p))", "using assms finite_alts"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  finite alts\n\ngoal (1 subgoal):\n 1. SD_efficient R p = SD_efficient R (pmf_of_set (set_pmf p))", "by (intro SD_efficient_same_support)\n     (simp, subst set_pmf_of_set,\n      auto simp: set_pmf_not_empty lotteries_on_def intro: finite_subset[OF _ finite_alts])"], ["", "lemma SD_efficient_no_pareto_loser:\n  assumes efficient: \"SD_efficient R p\" and p_wf: \"p \\<in> lotteries_on alts\"\n  shows   \"set_pmf p \\<inter> pareto_losers R = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf p \\<inter> pareto_losers R = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_pmf p \\<inter> pareto_losers R = {}", "have \"x \\<notin> pareto_losers R\" if x: \"x \\<in> set_pmf p\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set_pmf p", "have \"set_pmf (return_pmf x) \\<subseteq> set_pmf p\""], ["proof (prove)\nusing this:\n  x \\<in> set_pmf p\n\ngoal (1 subgoal):\n 1. set_pmf (return_pmf x) \\<subseteq> set_pmf p", "by auto"], ["proof (state)\nthis:\n  set_pmf (return_pmf x) \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "from efficient this p_wf"], ["proof (chain)\npicking this:\n  SD_efficient R p\n  set_pmf (return_pmf x) \\<subseteq> set_pmf p\n  p \\<in> lotteries_on alts", "have \"SD_efficient R (return_pmf x)\""], ["proof (prove)\nusing this:\n  SD_efficient R p\n  set_pmf (return_pmf x) \\<subseteq> set_pmf p\n  p \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. SD_efficient R (return_pmf x)", "by (rule SD_efficient_support_subset)"], ["proof (state)\nthis:\n  SD_efficient R (return_pmf x)\n\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "moreover"], ["proof (state)\nthis:\n  SD_efficient R (return_pmf x)\n\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "from assms x"], ["proof (chain)\npicking this:\n  SD_efficient R p\n  p \\<in> lotteries_on alts\n  x \\<in> set_pmf p", "have \"x \\<in> alts\""], ["proof (prove)\nusing this:\n  SD_efficient R p\n  p \\<in> lotteries_on alts\n  x \\<in> set_pmf p\n\ngoal (1 subgoal):\n 1. x \\<in> alts", "by (auto simp: lotteries_on_def)"], ["proof (state)\nthis:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "ultimately"], ["proof (chain)\npicking this:\n  SD_efficient R (return_pmf x)\n  x \\<in> alts", "show \"x \\<notin> pareto_losers R\""], ["proof (prove)\nusing this:\n  SD_efficient R (return_pmf x)\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<notin> pareto_losers R", "by (simp add: SD_efficient_singleton_iff)"], ["proof (state)\nthis:\n  x \\<notin> pareto_losers R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> set_pmf p \\<Longrightarrow> ?x \\<notin> pareto_losers R\n\ngoal (1 subgoal):\n 1. set_pmf p \\<inter> pareto_losers R = {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> set_pmf p \\<Longrightarrow> ?x \\<notin> pareto_losers R\n\ngoal (1 subgoal):\n 1. set_pmf p \\<inter> pareto_losers R = {}", "by blast"], ["proof (state)\nthis:\n  set_pmf p \\<inter> pareto_losers R = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Given two lotteries with the same support where one is strictly Pareto-SD-preferred to \n  the other, one can construct a third lottery that is weakly Pareto-SD-preferred to the \n  better lottery (and therefore strictly Pareto-SD-preferred to the worse lottery) and\n  whose support is a strict subset of the original supports.\n\\<close>"], ["", "lemma improve_lottery_support_subset:\n  assumes \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\" \"q \\<succ>[Pareto(SD \\<circ> R)] p\"\n          \"set_pmf p = set_pmf q\"\n  obtains r where \"r \\<in> lotteries_on alts\" \"r \\<succeq>[Pareto(SD \\<circ> R)] q\" \"set_pmf r \\<subset> set_pmf p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have subset: \"{x. pmf p x > pmf q x} \\<subseteq> set_pmf p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. pmf q x < pmf p x} \\<subseteq> set_pmf p", "by (auto simp: set_pmf_eq)"], ["proof (state)\nthis:\n  {x. pmf q x < pmf p x} \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  {x. pmf q x < pmf p x} \\<subseteq> set_pmf p\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> \\<subseteq> alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf p \\<subseteq> alts", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf p \\<subseteq> alts", "by (simp add: lotteries_on_def)"], ["proof (state)\nthis:\n  set_pmf p \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  {x. pmf q x < pmf p x} \\<subseteq> alts", "have finite: \"finite {x. pmf p x > pmf q x}\""], ["proof (prove)\nusing this:\n  {x. pmf q x < pmf p x} \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. finite {x. pmf q x < pmf p x}", "using finite_alts"], ["proof (prove)\nusing this:\n  {x. pmf q x < pmf p x} \\<subseteq> alts\n  finite alts\n\ngoal (1 subgoal):\n 1. finite {x. pmf q x < pmf p x}", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite {x. pmf q x < pmf p x}\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q", "have \"q \\<noteq> p\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n\ngoal (1 subgoal):\n 1. q \\<noteq> p", "by (auto simp: strongly_preferred_def)"], ["proof (state)\nthis:\n  q \\<noteq> p\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence ex_less: \"\\<exists>x. pmf p x > pmf q x\""], ["proof (prove)\nusing this:\n  q \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<exists>x. pmf q x < pmf p x", "by (rule pmf_neq_exists_less)"], ["proof (state)\nthis:\n  \\<exists>x. pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define \\<epsilon> where \"\\<epsilon> = Min {pmf p x / (pmf p x - pmf q x) |x. pmf p x > pmf q x}\""], ["proof (state)\nthis:\n  \\<epsilon> = Min {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define supp where \"supp = set_pmf p\""], ["proof (state)\nthis:\n  supp = set_pmf p\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms finite_alts"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  finite alts", "have finite_supp: \"finite supp\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  finite alts\n\ngoal (1 subgoal):\n 1. finite supp", "by (auto simp: lotteries_on_def supp_def dest: finite_subset)"], ["proof (state)\nthis:\n  finite supp\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q", "have [simp]: \"pmf p x = 0\" \"pmf q x = 0\" if \"x \\<notin> supp\" for x"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n\ngoal (1 subgoal):\n 1. pmf p x = 0 &&& pmf q x = 0", "using that"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  x \\<notin> supp\n\ngoal (1 subgoal):\n 1. pmf p x = 0 &&& pmf q x = 0", "by (auto simp: supp_def set_pmf_eq)"], ["proof (state)\nthis:\n  ?x \\<notin> supp \\<Longrightarrow> pmf p ?x = 0\n  ?x \\<notin> supp \\<Longrightarrow> pmf q ?x = 0\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finite subset ex_less"], ["proof (chain)\npicking this:\n  finite {x. pmf q x < pmf p x}\n  {x. pmf q x < pmf p x} \\<subseteq> set_pmf p\n  \\<exists>x. pmf q x < pmf p x", "have \\<epsilon>: \"\\<epsilon> \\<ge> 1\""], ["proof (prove)\nusing this:\n  finite {x. pmf q x < pmf p x}\n  {x. pmf q x < pmf p x} \\<subseteq> set_pmf p\n  \\<exists>x. pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. 1 \\<le> \\<epsilon>", "unfolding \\<epsilon>_def"], ["proof (prove)\nusing this:\n  finite {x. pmf q x < pmf p x}\n  {x. pmf q x < pmf p x} \\<subseteq> set_pmf p\n  \\<exists>x. pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. 1 \\<le> Min {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}", "by (intro Min.boundedI) (auto simp: field_simps pmf_nonneg)"], ["proof (state)\nthis:\n  1 \\<le> \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have nonneg: \"pmf p x + \\<epsilon> * (pmf q x - pmf p x) \\<ge> 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "proof (cases \"pmf p x > pmf q x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)\n 2. \\<not> pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "case True"], ["proof (state)\nthis:\n  pmf q x < pmf p x\n\ngoal (2 subgoals):\n 1. pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)\n 2. \\<not> pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "with finite"], ["proof (chain)\npicking this:\n  finite {x. pmf q x < pmf p x}\n  pmf q x < pmf p x", "have \"\\<epsilon> \\<le> pmf p x / (pmf p x - pmf q x)\""], ["proof (prove)\nusing this:\n  finite {x. pmf q x < pmf p x}\n  pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. \\<epsilon> \\<le> pmf p x / (pmf p x - pmf q x)", "unfolding \\<epsilon>_def"], ["proof (prove)\nusing this:\n  finite {x. pmf q x < pmf p x}\n  pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. Min {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}\n    \\<le> pmf p x / (pmf p x - pmf q x)", "by (intro Min_le) auto"], ["proof (state)\nthis:\n  \\<epsilon> \\<le> pmf p x / (pmf p x - pmf q x)\n\ngoal (2 subgoals):\n 1. pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)\n 2. \\<not> pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "with True"], ["proof (chain)\npicking this:\n  pmf q x < pmf p x\n  \\<epsilon> \\<le> pmf p x / (pmf p x - pmf q x)", "show ?thesis"], ["proof (prove)\nusing this:\n  pmf q x < pmf p x\n  \\<epsilon> \\<le> pmf p x / (pmf p x - pmf q x)\n\ngoal (1 subgoal):\n 1. 0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)\n\ngoal (1 subgoal):\n 1. \\<not> pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "case False"], ["proof (state)\nthis:\n  \\<not> pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. \\<not> pmf q x < pmf p x \\<Longrightarrow>\n    0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "with pmf_nonneg[of p x] \\<epsilon>"], ["proof (chain)\npicking this:\n  0 \\<le> pmf p x\n  1 \\<le> \\<epsilon>\n  \\<not> pmf q x < pmf p x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> pmf p x\n  1 \\<le> \\<epsilon>\n  \\<not> pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. 0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> pmf p x + \\<epsilon> * (pmf q x - pmf p x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define r where \"r = embed_pmf (\\<lambda>x. pmf p x + \\<epsilon> * (pmf q x - pmf p x))\""], ["proof (state)\nthis:\n  r = embed_pmf (\\<lambda>x. pmf p x + \\<epsilon> * (pmf q x - pmf p x))\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"(\\<integral>\\<^sup>+ x. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x)) \\<partial>count_space UNIV) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal\n                            (pmf p x + \\<epsilon> * (pmf q x - pmf p x))\n                       \\<partial>count_space UNIV =\n    1", "proof (subst nn_integral_count_space')"], ["proof (state)\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n    1", "have \"(\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) = \n            ennreal ((\\<Sum>x\\<in>supp. pmf p x) + \\<epsilon> * ((\\<Sum>x\\<in>supp. pmf q x) - (\\<Sum>x\\<in>supp. pmf p x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>supp.\n       ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n    ennreal\n     (sum (pmf p) supp + \\<epsilon> * (sum (pmf q) supp - sum (pmf p) supp))", "by (subst sum_ennreal[OF nonneg], rule ennreal_cong)\n        (auto simp: sum_subtractf ring_distribs sum.distrib sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n  ennreal\n   (sum (pmf p) supp + \\<epsilon> * (sum (pmf q) supp - sum (pmf p) supp))\n\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n    1", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n  ennreal\n   (sum (pmf p) supp + \\<epsilon> * (sum (pmf q) supp - sum (pmf p) supp))\n\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n    1", "from finite_supp"], ["proof (chain)\npicking this:\n  finite supp", "have \"\\<dots> = 1\""], ["proof (prove)\nusing this:\n  finite supp\n\ngoal (1 subgoal):\n 1. ennreal\n     (sum (pmf p) supp +\n      \\<epsilon> * (sum (pmf q) supp - sum (pmf p) supp)) =\n    1", "by (subst (1 2 3) sum_pmf_eq_1) (auto simp: supp_def assms)"], ["proof (state)\nthis:\n  ennreal\n   (sum (pmf p) supp + \\<epsilon> * (sum (pmf q) supp - sum (pmf p) supp)) =\n  1\n\ngoal (4 subgoals):\n 1. finite ?A\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> ?A\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x)) =\n                         0\n 3. ?A \\<subseteq> UNIV\n 4. (\\<Sum>x\\<in>?A. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n    1", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n  1", "show \"(\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) = 1\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n  1\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>supp.\n       ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n    1", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>supp. ennreal (pmf p x + \\<epsilon> * (pmf q x - pmf p x))) =\n  1\n\ngoal (3 subgoals):\n 1. finite supp\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; x \\<notin> supp\\<rbrakk>\n       \\<Longrightarrow> ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x)) =\n                         0\n 3. supp \\<subseteq> UNIV", "qed (insert nonneg finite_supp, simp_all)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with nonneg"], ["proof (chain)\npicking this:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x))\n                     \\<partial>count_space UNIV =\n  1", "have pmf_r: \"pmf r x = pmf p x + \\<epsilon> * (pmf q x - pmf p x)\" for x"], ["proof (prove)\nusing this:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. pmf r x = pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "unfolding r_def"], ["proof (prove)\nusing this:\n  0 \\<le> pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n  \\<integral>\\<^sup>+ x. ennreal\n                          (pmf p x + \\<epsilon> * (pmf q x - pmf p x))\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. pmf (embed_pmf (\\<lambda>x. pmf p x + \\<epsilon> * (pmf q x - pmf p x)))\n     x =\n    pmf p x + \\<epsilon> * (pmf q x - pmf p x)", "by (intro pmf_embed_pmf) simp_all"], ["proof (state)\nthis:\n  pmf r ?x = pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  pmf r ?x = pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)", "have \"set_pmf r \\<subseteq> supp\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  pmf r ?x = pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n\ngoal (1 subgoal):\n 1. set_pmf r \\<subseteq> supp", "unfolding supp_def"], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  pmf r ?x = pmf p ?x + \\<epsilon> * (pmf q ?x - pmf p ?x)\n\ngoal (1 subgoal):\n 1. set_pmf r \\<subseteq> set_pmf p", "by (auto simp: set_pmf_eq)"], ["proof (state)\nthis:\n  set_pmf r \\<subseteq> supp\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finite ex_less"], ["proof (chain)\npicking this:\n  finite {x. pmf q x < pmf p x}\n  \\<exists>x. pmf q x < pmf p x", "have \"\\<epsilon> \\<in> {pmf p x / (pmf p x - pmf q x) |x. pmf p x > pmf q x}\""], ["proof (prove)\nusing this:\n  finite {x. pmf q x < pmf p x}\n  \\<exists>x. pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. \\<epsilon> \\<in> {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}", "unfolding \\<epsilon>_def"], ["proof (prove)\nusing this:\n  finite {x. pmf q x < pmf p x}\n  \\<exists>x. pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. Min {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}\n    \\<in> {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}", "by (intro Min_in) auto"], ["proof (state)\nthis:\n  \\<epsilon> \\<in> {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<epsilon> \\<in> {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}", "obtain x where \"\\<epsilon> = pmf p x / (pmf p x - pmf q x)\" \"pmf p x > pmf q x\""], ["proof (prove)\nusing this:\n  \\<epsilon> \\<in> {pmf p x / (pmf p x - pmf q x) |x. pmf q x < pmf p x}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>\\<epsilon> = pmf p x / (pmf p x - pmf q x);\n         pmf q x < pmf p x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<epsilon> = pmf p x / (pmf p x - pmf q x)\n  pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"pmf r x = 0\""], ["proof (prove)\nusing this:\n  \\<epsilon> = pmf p x / (pmf p x - pmf q x)\n  pmf q x < pmf p x\n\ngoal (1 subgoal):\n 1. pmf r x = 0", "by (simp add: pmf_r field_simps)"], ["proof (state)\nthis:\n  pmf r x = 0\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  pmf r x = 0\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>pmf p x > pmf q x\\<close> pmf_nonneg[of q x]"], ["proof (chain)\npicking this:\n  pmf q x < pmf p x\n  0 \\<le> pmf q x", "have \"pmf p x > 0\""], ["proof (prove)\nusing this:\n  pmf q x < pmf p x\n  0 \\<le> pmf q x\n\ngoal (1 subgoal):\n 1. 0 < pmf p x", "by linarith"], ["proof (state)\nthis:\n  0 < pmf p x\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  pmf r x = 0\n  0 < pmf p x", "have \"x \\<in> set_pmf p - set_pmf r\""], ["proof (prove)\nusing this:\n  pmf r x = 0\n  0 < pmf p x\n\ngoal (1 subgoal):\n 1. x \\<in> set_pmf p - set_pmf r", "by (auto simp: set_pmf_iff)"], ["proof (state)\nthis:\n  x \\<in> set_pmf p - set_pmf r\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>set_pmf r \\<subseteq> supp\\<close>"], ["proof (chain)\npicking this:\n  set_pmf r \\<subseteq> supp\n  x \\<in> set_pmf p - set_pmf r", "have support_r: \"set_pmf r \\<subset> set_pmf p\""], ["proof (prove)\nusing this:\n  set_pmf r \\<subseteq> supp\n  x \\<in> set_pmf p - set_pmf r\n\ngoal (1 subgoal):\n 1. set_pmf r \\<subset> set_pmf p", "unfolding supp_def"], ["proof (prove)\nusing this:\n  set_pmf r \\<subseteq> set_pmf p\n  x \\<in> set_pmf p - set_pmf r\n\ngoal (1 subgoal):\n 1. set_pmf r \\<subset> set_pmf p", "by blast"], ["proof (state)\nthis:\n  set_pmf r \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this assms"], ["proof (chain)\npicking this:\n  set_pmf r \\<subset> set_pmf p\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q", "have r_wf: \"r \\<in> lotteries_on alts\""], ["proof (prove)\nusing this:\n  set_pmf r \\<subset> set_pmf p\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n\ngoal (1 subgoal):\n 1. r \\<in> lotteries_on alts", "by (simp add: lotteries_on_def)"], ["proof (state)\nthis:\n  r \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"r \\<succeq>[Pareto(SD\\<circ>R)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R) q r", "unfolding SD.Pareto_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>agents. (SD \\<circ> R) i q r", "unfolding o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>agents. SD (R i) q r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> agents \\<Longrightarrow> SD (R i) q r", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> agents \\<Longrightarrow> SD (R i) q r", "assume i: \"i \\<in> agents\""], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> agents \\<Longrightarrow> SD (R i) q r", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> agents \\<Longrightarrow> SD (R i) q r", "show \"r \\<succeq>[SD(R i)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SD (R i) q r", "proof (subst SD_iff_expected_utilities_le; safe?)"], ["proof (state)\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "fix u"], ["proof (state)\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "assume u: \"is_vnm_utility u\""], ["proof (state)\nthis:\n  is_vnm_utility u\n\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "from support_r"], ["proof (chain)\npicking this:\n  set_pmf r \\<subset> set_pmf p", "have expected_utility_r:\n        \"measure_pmf.expectation r u = measure_pmf.expectation p u + \n             \\<epsilon> * (measure_pmf.expectation q u - measure_pmf.expectation p u)\""], ["proof (prove)\nusing this:\n  set_pmf r \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation r u =\n    measure_pmf.expectation p u +\n    \\<epsilon> * (measure_pmf.expectation q u - measure_pmf.expectation p u)", "by (subst (1 2 3 4) integral_measure_pmf[OF finite_supp])\n           (auto simp: supp_def assms pmf_r sum.distrib sum_distrib_left\n            sum_distrib_right sum_subtractf algebra_simps)"], ["proof (state)\nthis:\n  measure_pmf.expectation r u =\n  measure_pmf.expectation p u +\n  \\<epsilon> * (measure_pmf.expectation q u - measure_pmf.expectation p u)\n\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "from assms i"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  i \\<in> agents", "have \"q \\<succeq>[SD(R i)] p\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. SD (R i) p q", "by (simp add: SD.Pareto_strict_iff)"], ["proof (state)\nthis:\n  SD (R i) p q\n\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "with assms u"], ["proof (chain)\npicking this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  is_vnm_utility u\n  SD (R i) p q", "have \"measure_pmf.expectation q u \\<ge> measure_pmf.expectation p u\""], ["proof (prove)\nusing this:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n  set_pmf p = set_pmf q\n  is_vnm_utility u\n  SD (R i) p q\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation p u \\<le> measure_pmf.expectation q u", "by (simp add: SD_iff_expected_utilities_le r_wf)"], ["proof (state)\nthis:\n  measure_pmf.expectation p u \\<le> measure_pmf.expectation q u\n\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "hence \"(\\<epsilon> - 1) * measure_pmf.expectation p u \\<le> (\\<epsilon> - 1) * measure_pmf.expectation q u\""], ["proof (prove)\nusing this:\n  measure_pmf.expectation p u \\<le> measure_pmf.expectation q u\n\ngoal (1 subgoal):\n 1. (\\<epsilon> - 1) * measure_pmf.expectation p u\n    \\<le> (\\<epsilon> - 1) * measure_pmf.expectation q u", "using \\<epsilon>"], ["proof (prove)\nusing this:\n  measure_pmf.expectation p u \\<le> measure_pmf.expectation q u\n  1 \\<le> \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<epsilon> - 1) * measure_pmf.expectation p u\n    \\<le> (\\<epsilon> - 1) * measure_pmf.expectation q u", "by (intro mult_left_mono) simp_all"], ["proof (state)\nthis:\n  (\\<epsilon> - 1) * measure_pmf.expectation p u\n  \\<le> (\\<epsilon> - 1) * measure_pmf.expectation q u\n\ngoal (3 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts\n 3. \\<And>u.\n       is_vnm_utility u \\<Longrightarrow>\n       measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "thus \"measure_pmf.expectation q u \\<le> measure_pmf.expectation r u\""], ["proof (prove)\nusing this:\n  (\\<epsilon> - 1) * measure_pmf.expectation p u\n  \\<le> (\\<epsilon> - 1) * measure_pmf.expectation q u\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation q u \\<le> measure_pmf.expectation r u", "by (simp add: algebra_simps expected_utility_r)"], ["proof (state)\nthis:\n  measure_pmf.expectation q u \\<le> measure_pmf.expectation r u\n\ngoal (2 subgoals):\n 1. q \\<in> lotteries_on alts\n 2. r \\<in> lotteries_on alts", "qed fact+"], ["proof (state)\nthis:\n  SD (R i) q r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Pareto (SD \\<circ> R) q r\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n         set_pmf r \\<subset> set_pmf p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from that[OF r_wf this support_r]"], ["proof (chain)\npicking this:\n  thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Existence of SD-efficient lotteries\\<close>"], ["", "text \\<open>\n  In this section, we will show that any lottery can be `improved' to an SD-efficient lottery,\n  i.e. for any lottery, there exists an SD-efficient lottery that is weakly SD-preferred to \n  the original one by all agents.\n\\<close>"], ["", "context\n  fixes p :: \"'alt lottery\"\n  assumes lott: \"p \\<in> lotteries_on alts\"\nbegin"], ["", "private"], ["", "definition improve_lottery :: \"'alt lottery \\<Rightarrow> 'alt lottery\" where\n  \"improve_lottery q = (let A = {r\\<in>lotteries_on alts. r \\<succ>[Pareto(SD\\<circ>R)] q} in\n     (SOME r. r \\<in> A \\<and> \\<not>(\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r)))\""], ["", "private"], ["", "lemma improve_lottery:\n  assumes \"\\<not>SD_efficient R q\"\n  defines \"r \\<equiv> improve_lottery q\"\n  shows   \"r \\<in> lotteries_on alts\" \"r \\<succ>[Pareto(SD\\<circ>R)] q\"\n          \"\\<And>r'. r' \\<in> lotteries_on alts \\<Longrightarrow> r' \\<succ>[Pareto(SD\\<circ>R)] q \\<Longrightarrow> \\<not>(set_pmf r' \\<subset> set_pmf r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> lotteries_on alts &&&\n    q \\<prec>[Pareto (SD \\<circ> R)] r &&&\n    (\\<And>r'.\n        \\<lbrakk>r' \\<in> lotteries_on alts;\n         q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n        \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "define A where \"A = {r\\<in>lotteries_on alts. r \\<succ>[Pareto(SD\\<circ>R)] q}\""], ["proof (state)\nthis:\n  A = {r \\<in> lotteries_on alts. q \\<prec>[Pareto (SD \\<circ> R)] r}\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "have subset_alts: \"X \\<subseteq> alts\" if \"X \\<in> set_pmf`A\" for X"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> alts", "using that"], ["proof (prove)\nusing this:\n  X \\<in> set_pmf ` A\n\ngoal (1 subgoal):\n 1. X \\<subseteq> alts", "by (auto simp: A_def lotteries_on_def)"], ["proof (state)\nthis:\n  ?X \\<in> set_pmf ` A \\<Longrightarrow> ?X \\<subseteq> alts\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "have r_altdef: \"r = (SOME r. r \\<in> A \\<and> \\<not>(\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r =\n    (SOME r.\n        r \\<in> A \\<and>\n        \\<not> (\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r))", "unfolding r_def improve_lottery_def Let_def A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME r.\n        r \\<in> {r \\<in> lotteries_on alts.\n                 q \\<prec>[Pareto (SD \\<circ> R)] r} \\<and>\n        \\<not> (\\<exists>r'\\<in>{r \\<in> lotteries_on alts.\n                                 q \\<prec>[Pareto (SD \\<circ> R)] r}.\n                   set_pmf r' \\<subset> set_pmf r)) =\n    (SOME r.\n        r \\<in> {r \\<in> lotteries_on alts.\n                 q \\<prec>[Pareto (SD \\<circ> R)] r} \\<and>\n        \\<not> (\\<exists>r'\\<in>{r \\<in> lotteries_on alts.\n                                 q \\<prec>[Pareto (SD \\<circ> R)] r}.\n                   set_pmf r' \\<subset> set_pmf r))", "by simp"], ["proof (state)\nthis:\n  r =\n  (SOME r.\n      r \\<in> A \\<and>\n      \\<not> (\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r))\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "from assms"], ["proof (chain)\npicking this:\n  \\<not> SD_efficient R q\n  r \\<equiv> improve_lottery q", "have nonempty: \"A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R q\n  r \\<equiv> improve_lottery q\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by (auto simp: A_def SD_efficient_def)"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "hence nonempty': \"set_pmf`A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set_pmf ` A \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  set_pmf ` A \\<noteq> {}\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "have \"set_pmf ` A \\<subseteq> Pow alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf ` A \\<subseteq> Pow alts", "by (auto simp: A_def lotteries_on_def)"], ["proof (state)\nthis:\n  set_pmf ` A \\<subseteq> Pow alts\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "from finite_alts"], ["proof (chain)\npicking this:\n  finite alts", "have wf: \"wf {(X,Y). X \\<subset> Y \\<and> Y \\<subseteq> alts}\""], ["proof (prove)\nusing this:\n  finite alts\n\ngoal (1 subgoal):\n 1. wf {(X, Y). X \\<subset> Y \\<and> Y \\<subseteq> alts}", "by (rule finite_subset_wf)"], ["proof (state)\nthis:\n  wf {(X, Y). X \\<subset> Y \\<and> Y \\<subseteq> alts}\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "obtain X \n    where \"X \\<in> set_pmf`A\" \"\\<And>Y. Y \\<subset> X \\<and> X \\<subseteq> alts \\<Longrightarrow> Y \\<notin> set_pmf ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>X \\<in> set_pmf ` A;\n         \\<And>Y.\n            Y \\<subset> X \\<and> X \\<subseteq> alts \\<Longrightarrow>\n            Y \\<notin> set_pmf ` A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min'[OF wf nonempty']) simp_all"], ["proof (state)\nthis:\n  X \\<in> set_pmf ` A\n  ?Y \\<subset> X \\<and> X \\<subseteq> alts \\<Longrightarrow>\n  ?Y \\<notin> set_pmf ` A\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "hence \"\\<exists>r. r \\<in> A \\<and> \\<not>(\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r)\""], ["proof (prove)\nusing this:\n  X \\<in> set_pmf ` A\n  ?Y \\<subset> X \\<and> X \\<subseteq> alts \\<Longrightarrow>\n  ?Y \\<notin> set_pmf ` A\n\ngoal (1 subgoal):\n 1. \\<exists>r.\n       r \\<in> A \\<and>\n       \\<not> (\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r)", "by (auto simp: subset_alts[of X])"], ["proof (state)\nthis:\n  \\<exists>r.\n     r \\<in> A \\<and>\n     \\<not> (\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r)\n\ngoal (3 subgoals):\n 1. r \\<in> lotteries_on alts\n 2. q \\<prec>[Pareto (SD \\<circ> R)] r\n 3. \\<And>r'.\n       \\<lbrakk>r' \\<in> lotteries_on alts;\n        q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n       \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r", "from someI_ex[OF this, folded r_altdef]"], ["proof (chain)\npicking this:\n  r \\<in> A \\<and>\n  \\<not> (\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r)", "show \"r \\<in> lotteries_on alts\" \"r \\<succ>[Pareto(SD\\<circ>R)] q\"\n          \"\\<And>r'. r' \\<in> lotteries_on alts \\<Longrightarrow> r' \\<succ>[Pareto(SD\\<circ>R)] q \\<Longrightarrow> \\<not>(set_pmf r' \\<subset> set_pmf r)\""], ["proof (prove)\nusing this:\n  r \\<in> A \\<and>\n  \\<not> (\\<exists>r'\\<in>A. set_pmf r' \\<subset> set_pmf r)\n\ngoal (1 subgoal):\n 1. r \\<in> lotteries_on alts &&&\n    q \\<prec>[Pareto (SD \\<circ> R)] r &&&\n    (\\<And>r'.\n        \\<lbrakk>r' \\<in> lotteries_on alts;\n         q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n        \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r)", "unfolding A_def"], ["proof (prove)\nusing this:\n  r \\<in> {r \\<in> lotteries_on alts.\n           q \\<prec>[Pareto (SD \\<circ> R)] r} \\<and>\n  \\<not> (\\<exists>r'\\<in>{r \\<in> lotteries_on alts.\n                           q \\<prec>[Pareto (SD \\<circ> R)] r}.\n             set_pmf r' \\<subset> set_pmf r)\n\ngoal (1 subgoal):\n 1. r \\<in> lotteries_on alts &&&\n    q \\<prec>[Pareto (SD \\<circ> R)] r &&&\n    (\\<And>r'.\n        \\<lbrakk>r' \\<in> lotteries_on alts;\n         q \\<prec>[Pareto (SD \\<circ> R)] r'\\<rbrakk>\n        \\<Longrightarrow> \\<not> set_pmf r' \\<subset> set_pmf r)", "by blast+"], ["proof (state)\nthis:\n  r \\<in> lotteries_on alts\n  q \\<prec>[Pareto (SD \\<circ> R)] r\n  \\<lbrakk>?r' \\<in> lotteries_on alts;\n   q \\<prec>[Pareto (SD \\<circ> R)] ?r'\\<rbrakk>\n  \\<Longrightarrow> \\<not> set_pmf ?r' \\<subset> set_pmf r\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "fun sd_chain :: \"nat \\<Rightarrow> 'alt lottery option\" where\n  \"sd_chain 0 = Some p\"\n| \"sd_chain (Suc n) = \n     (case sd_chain n of\n        None \\<Rightarrow> None\n      | Some p \\<Rightarrow> if SD_efficient R p then None else Some (improve_lottery p))\""], ["", "private"], ["", "lemma sd_chain_None_propagate:\n  \"m \\<ge> n \\<Longrightarrow> sd_chain n = None \\<Longrightarrow> sd_chain m = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; sd_chain n = None\\<rbrakk>\n    \\<Longrightarrow> sd_chain m = None", "by (induction rule: inc_induct) simp_all"], ["", "private"], ["", "lemma sd_chain_Some_propagate:\n  \"m \\<ge> n \\<Longrightarrow> sd_chain m = Some q \\<Longrightarrow> \\<exists>q'. sd_chain n = Some q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; sd_chain m = Some q\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q'. sd_chain n = Some q'", "by (cases \"sd_chain n\") (auto simp: sd_chain_None_propagate)"], ["", "private"], ["", "lemma sd_chain_NoneD:\n  \"sd_chain n = None \\<Longrightarrow> \\<exists>n p. sd_chain n = Some p \\<and> SD_efficient R p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_chain n = None \\<Longrightarrow>\n    \\<exists>n p. sd_chain n = Some p \\<and> SD_efficient R p", "by (induction n) (auto split: option.splits if_splits)"], ["", "private"], ["", "lemma sd_chain_lottery: \"sd_chain n = Some q \\<Longrightarrow> q \\<in> lotteries_on alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_chain n = Some q \\<Longrightarrow> q \\<in> lotteries_on alts", "by (induction n) (insert lott, auto split: option.splits if_splits simp: improve_lottery)"], ["", "private"], ["", "lemma sd_chain_Suc:\n  assumes \"sd_chain m = Some q\"\n  assumes \"sd_chain (Suc m) = Some r\"\n  shows   \"q \\<prec>[Pareto(SD\\<circ>R)] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] r", "using assms"], ["proof (prove)\nusing this:\n  sd_chain m = Some q\n  sd_chain (Suc m) = Some r\n\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] r", "by (auto split: if_splits simp: improve_lottery)"], ["", "private"], ["", "lemma sd_chain_strictly_preferred:\n  assumes \"m < n\"\n  assumes \"sd_chain m = Some q\"\n  assumes \"sd_chain n = Some s\"\n  shows   \"q \\<prec>[Pareto(SD\\<circ>R)] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] s", "using assms"], ["proof (prove)\nusing this:\n  m < n\n  sd_chain m = Some q\n  sd_chain n = Some s\n\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] s", "proof (induction arbitrary: q rule: strict_inc_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>n = Suc i; sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s\n 2. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "case (base k q)"], ["proof (state)\nthis:\n  n = Suc k\n  sd_chain k = Some q\n  sd_chain n = Some s\n\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>n = Suc i; sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s\n 2. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "with sd_chain_Suc[of k q s]"], ["proof (chain)\npicking this:\n  \\<lbrakk>sd_chain k = Some q; sd_chain (Suc k) = Some s\\<rbrakk>\n  \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s\n  n = Suc k\n  sd_chain k = Some q\n  sd_chain n = Some s", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>sd_chain k = Some q; sd_chain (Suc k) = Some s\\<rbrakk>\n  \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s\n  n = Suc k\n  sd_chain k = Some q\n  sd_chain n = Some s\n\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] s", "by (simp del: sd_chain.simps add: o_def)"], ["proof (state)\nthis:\n  q \\<prec>[Pareto (SD \\<circ> R)] s\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "case (step k q)"], ["proof (state)\nthis:\n  k < n\n  \\<lbrakk>sd_chain (Suc k) = Some ?q; sd_chain n = Some s\\<rbrakk>\n  \\<Longrightarrow> ?q \\<prec>[Pareto (SD \\<circ> R)] s\n  sd_chain k = Some q\n  sd_chain n = Some s\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "from step.hyps"], ["proof (chain)\npicking this:\n  k < n", "have \"Suc k \\<le> n\""], ["proof (prove)\nusing this:\n  k < n\n\ngoal (1 subgoal):\n 1. Suc k \\<le> n", "by simp"], ["proof (state)\nthis:\n  Suc k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "from sd_chain_Some_propagate[OF this, of s] step.prems"], ["proof (chain)\npicking this:\n  sd_chain n = Some s \\<Longrightarrow>\n  \\<exists>q'. sd_chain (Suc k) = Some q'\n  sd_chain k = Some q\n  sd_chain n = Some s", "obtain r \n    where r: \"sd_chain (Suc k) = Some r\""], ["proof (prove)\nusing this:\n  sd_chain n = Some s \\<Longrightarrow>\n  \\<exists>q'. sd_chain (Suc k) = Some q'\n  sd_chain k = Some q\n  sd_chain n = Some s\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        sd_chain (Suc k) = Some r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: sd_chain.simps)"], ["proof (state)\nthis:\n  sd_chain (Suc k) = Some r\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "with step.prems"], ["proof (chain)\npicking this:\n  sd_chain k = Some q\n  sd_chain n = Some s\n  sd_chain (Suc k) = Some r", "have \"q \\<prec>[Pareto (SD \\<circ> R)] r\""], ["proof (prove)\nusing this:\n  sd_chain k = Some q\n  sd_chain n = Some s\n  sd_chain (Suc k) = Some r\n\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] r", "by (intro sd_chain_Suc)"], ["proof (state)\nthis:\n  q \\<prec>[Pareto (SD \\<circ> R)] r\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "moreover"], ["proof (state)\nthis:\n  q \\<prec>[Pareto (SD \\<circ> R)] r\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "from r step.prems"], ["proof (chain)\npicking this:\n  sd_chain (Suc k) = Some r\n  sd_chain k = Some q\n  sd_chain n = Some s", "have \"r \\<prec>[Pareto (SD \\<circ> R)] s\""], ["proof (prove)\nusing this:\n  sd_chain (Suc k) = Some r\n  sd_chain k = Some q\n  sd_chain n = Some s\n\ngoal (1 subgoal):\n 1. r \\<prec>[Pareto (SD \\<circ> R)] s", "by (intro step.IH) simp_all"], ["proof (state)\nthis:\n  r \\<prec>[Pareto (SD \\<circ> R)] s\n\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>i < n;\n        \\<And>q.\n           \\<lbrakk>sd_chain (Suc i) = Some q; sd_chain n = Some s\\<rbrakk>\n           \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s;\n        sd_chain i = Some q; sd_chain n = Some s\\<rbrakk>\n       \\<Longrightarrow> q \\<prec>[Pareto (SD \\<circ> R)] s", "ultimately"], ["proof (chain)\npicking this:\n  q \\<prec>[Pareto (SD \\<circ> R)] r\n  r \\<prec>[Pareto (SD \\<circ> R)] s", "show ?case"], ["proof (prove)\nusing this:\n  q \\<prec>[Pareto (SD \\<circ> R)] r\n  r \\<prec>[Pareto (SD \\<circ> R)] s\n\ngoal (1 subgoal):\n 1. q \\<prec>[Pareto (SD \\<circ> R)] s", "by (rule SD.Pareto.strict_trans)"], ["proof (state)\nthis:\n  q \\<prec>[Pareto (SD \\<circ> R)] s\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma sd_chain_preferred:\n  assumes \"m \\<le> n\"\n  assumes \"sd_chain m = Some q\"\n  assumes \"sd_chain n = Some s\"\n  shows   \"q \\<preceq>[Pareto(SD\\<circ>R)] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R) q s", "proof (cases \"m < n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s\n 2. \\<not> m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s", "case True"], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s\n 2. \\<not> m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s", "from sd_chain_strictly_preferred[OF this assms(2,3)]"], ["proof (chain)\npicking this:\n  q \\<prec>[Pareto (SD \\<circ> R)] s", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<prec>[Pareto (SD \\<circ> R)] s\n\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R) q s", "by (simp add: strongly_preferred_def)"], ["proof (state)\nthis:\n  Pareto (SD \\<circ> R) q s\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s", "case False"], ["proof (state)\nthis:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow> Pareto (SD \\<circ> R) q s", "with assms"], ["proof (chain)\npicking this:\n  m \\<le> n\n  sd_chain m = Some q\n  sd_chain n = Some s\n  \\<not> m < n", "show ?thesis"], ["proof (prove)\nusing this:\n  m \\<le> n\n  sd_chain m = Some q\n  sd_chain n = Some s\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R) q s", "by (auto intro: SD.Pareto.refl sd_chain_lottery)"], ["proof (state)\nthis:\n  Pareto (SD \\<circ> R) q s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SD_efficient_lottery_exists: \n  obtains q where \"q \\<in> lotteries_on alts\" \"q \\<succeq>[Pareto(SD\\<circ>R)] p\" \"SD_efficient R q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> lotteries_on alts; Pareto (SD \\<circ> R) p q;\n         SD_efficient R q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> lotteries_on alts; Pareto (SD \\<circ> R) p q;\n         SD_efficient R q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "consider \"\\<exists>n. sd_chain n = None\" | \"\\<forall>n. \\<exists>q. sd_chain n = Some q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. sd_chain n = None \\<Longrightarrow> thesis;\n     \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using option.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = None \\<Longrightarrow> ?P;\n   \\<And>x2. ?y = Some x2 \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. sd_chain n = None \\<Longrightarrow> thesis;\n     \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n. sd_chain n = None \\<Longrightarrow> ?thesis;\n   \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> lotteries_on alts; Pareto (SD \\<circ> R) p q;\n         SD_efficient R q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>n. sd_chain n = None \\<Longrightarrow> ?thesis;\n   \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "case 1"], ["proof (state)\nthis:\n  \\<exists>n. sd_chain n = None\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "define m where \"m = (LEAST m. sd_chain m = None)\""], ["proof (state)\nthis:\n  m = (LEAST m. sd_chain m = None)\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "define k where \"k = m - 1\""], ["proof (state)\nthis:\n  k = m - 1\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from LeastI_ex[OF 1]"], ["proof (chain)\npicking this:\n  sd_chain (LEAST n. sd_chain n = None) = None", "have m: \"sd_chain m = None\""], ["proof (prove)\nusing this:\n  sd_chain (LEAST n. sd_chain n = None) = None\n\ngoal (1 subgoal):\n 1. sd_chain m = None", "by (simp add: m_def)"], ["proof (state)\nthis:\n  sd_chain m = None\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from m"], ["proof (chain)\npicking this:\n  sd_chain m = None", "have nz: \"m \\<noteq> 0\""], ["proof (prove)\nusing this:\n  sd_chain m = None\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "by (intro notI) simp_all"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from nz"], ["proof (chain)\npicking this:\n  m \\<noteq> 0", "have m_altdef: \"m = Suc k\""], ["proof (prove)\nusing this:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. m = Suc k", "by (simp add: k_def)"], ["proof (state)\nthis:\n  m = Suc k\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from nz Least_le[of \"\\<lambda>m. sd_chain m = None\" \"m - 1\", folded m_def]"], ["proof (chain)\npicking this:\n  m \\<noteq> 0\n  sd_chain (m - 1) = None \\<Longrightarrow> m \\<le> m - 1", "obtain q where q: \"sd_chain k = Some q\""], ["proof (prove)\nusing this:\n  m \\<noteq> 0\n  sd_chain (m - 1) = None \\<Longrightarrow> m \\<le> m - 1\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        sd_chain k = Some q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"sd_chain (m - 1)\") (auto simp: k_def)"], ["proof (state)\nthis:\n  sd_chain k = Some q\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from sd_chain_preferred[OF _ sd_chain.simps(1) this]"], ["proof (chain)\npicking this:\n  0 \\<le> k \\<Longrightarrow> Pareto (SD \\<circ> R) p q", "have \"q \\<succeq>[Pareto(SD\\<circ>R)] p\""], ["proof (prove)\nusing this:\n  0 \\<le> k \\<Longrightarrow> Pareto (SD \\<circ> R) p q\n\ngoal (1 subgoal):\n 1. Pareto (SD \\<circ> R) p q", "by simp"], ["proof (state)\nthis:\n  Pareto (SD \\<circ> R) p q\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  Pareto (SD \\<circ> R) p q\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from q"], ["proof (chain)\npicking this:\n  sd_chain k = Some q", "have \"q \\<in> lotteries_on alts\""], ["proof (prove)\nusing this:\n  sd_chain k = Some q\n\ngoal (1 subgoal):\n 1. q \\<in> lotteries_on alts", "by (simp add: sd_chain_lottery)"], ["proof (state)\nthis:\n  q \\<in> lotteries_on alts\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  q \\<in> lotteries_on alts\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from q m"], ["proof (chain)\npicking this:\n  sd_chain k = Some q\n  sd_chain m = None", "have \"SD_efficient R q\""], ["proof (prove)\nusing this:\n  sd_chain k = Some q\n  sd_chain m = None\n\ngoal (1 subgoal):\n 1. SD_efficient R q", "by (auto split: if_splits simp: m_altdef)"], ["proof (state)\nthis:\n  SD_efficient R q\n\ngoal (2 subgoals):\n 1. \\<exists>n. sd_chain n = None \\<Longrightarrow> thesis\n 2. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  Pareto (SD \\<circ> R) p q\n  q \\<in> lotteries_on alts\n  SD_efficient R q", "show ?thesis"], ["proof (prove)\nusing this:\n  Pareto (SD \\<circ> R) p q\n  q \\<in> lotteries_on alts\n  SD_efficient R q\n\ngoal (1 subgoal):\n 1. thesis", "using that[of q]"], ["proof (prove)\nusing this:\n  Pareto (SD \\<circ> R) p q\n  q \\<in> lotteries_on alts\n  SD_efficient R q\n  \\<lbrakk>q \\<in> lotteries_on alts; Pareto (SD \\<circ> R) p q;\n   SD_efficient R q\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "case 2"], ["proof (state)\nthis:\n  \\<forall>n. \\<exists>q. sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "have \"range (set_pmf \\<circ> the \\<circ> sd_chain) \\<subseteq> Pow alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (set_pmf \\<circ> the \\<circ> sd_chain) \\<subseteq> Pow alts", "unfolding o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>x. set_pmf (the (sd_chain x))) \\<subseteq> Pow alts", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> UNIV; xb \\<in> set_pmf (the (sd_chain xa))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> alts", "fix n x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> UNIV; xb \\<in> set_pmf (the (sd_chain xa))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> alts", "assume A: \"x \\<in> set_pmf (the (sd_chain n))\""], ["proof (state)\nthis:\n  x \\<in> set_pmf (the (sd_chain n))\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> UNIV; xb \\<in> set_pmf (the (sd_chain xa))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> alts", "from 2"], ["proof (chain)\npicking this:\n  \\<forall>n. \\<exists>q. sd_chain n = Some q", "obtain q where \"sd_chain n = Some q\""], ["proof (prove)\nusing this:\n  \\<forall>n. \\<exists>q. sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        sd_chain n = Some q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> UNIV; xb \\<in> set_pmf (the (sd_chain xa))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> alts", "with sd_chain_lottery[of n q]"], ["proof (chain)\npicking this:\n  sd_chain n = Some q \\<Longrightarrow> q \\<in> lotteries_on alts\n  sd_chain n = Some q", "have \"set_pmf (the (sd_chain n)) \\<subseteq> alts\""], ["proof (prove)\nusing this:\n  sd_chain n = Some q \\<Longrightarrow> q \\<in> lotteries_on alts\n  sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. set_pmf (the (sd_chain n)) \\<subseteq> alts", "by (simp add: lotteries_on_def)"], ["proof (state)\nthis:\n  set_pmf (the (sd_chain n)) \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>xa \\<in> UNIV; xb \\<in> set_pmf (the (sd_chain xa))\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> alts", "with A"], ["proof (chain)\npicking this:\n  x \\<in> set_pmf (the (sd_chain n))\n  set_pmf (the (sd_chain n)) \\<subseteq> alts", "show \"x \\<in> alts\""], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (the (sd_chain n))\n  set_pmf (the (sd_chain n)) \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts", "by blast"], ["proof (state)\nthis:\n  x \\<in> alts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range (set_pmf \\<circ> the \\<circ> sd_chain) \\<subseteq> Pow alts\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "hence \"finite (range (set_pmf \\<circ> the \\<circ> sd_chain))\""], ["proof (prove)\nusing this:\n  range (set_pmf \\<circ> the \\<circ> sd_chain) \\<subseteq> Pow alts\n\ngoal (1 subgoal):\n 1. finite (range (set_pmf \\<circ> the \\<circ> sd_chain))", "by (rule finite_subset) simp_all"], ["proof (state)\nthis:\n  finite (range (set_pmf \\<circ> the \\<circ> sd_chain))\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from pigeonhole_infinite[OF infinite_UNIV_nat this]"], ["proof (chain)\npicking this:\n  \\<exists>a0\\<in>UNIV.\n     infinite\n      {a \\<in> UNIV.\n       (set_pmf \\<circ> the \\<circ> sd_chain) a =\n       (set_pmf \\<circ> the \\<circ> sd_chain) a0}", "obtain m where \"infinite {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))}\""], ["proof (prove)\nusing this:\n  \\<exists>a0\\<in>UNIV.\n     infinite\n      {a \\<in> UNIV.\n       (set_pmf \\<circ> the \\<circ> sd_chain) a =\n       (set_pmf \\<circ> the \\<circ> sd_chain) a0}\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        infinite\n         {n. set_pmf (the (sd_chain n)) =\n             set_pmf (the (sd_chain m))} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  infinite {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))}\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "hence \"infinite ({n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} - {k. \\<not>(k > m)})\""], ["proof (prove)\nusing this:\n  infinite {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))}\n\ngoal (1 subgoal):\n 1. infinite\n     ({n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n      {k. \\<not> m < k})", "by (simp add: not_less)"], ["proof (state)\nthis:\n  infinite\n   ({n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n    {k. \\<not> m < k})\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "hence \"({n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} - {k. \\<not>(k > m)}) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  infinite\n   ({n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n    {k. \\<not> m < k})\n\ngoal (1 subgoal):\n 1. {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n    {k. \\<not> m < k} \\<noteq>\n    {}", "by (intro notI) simp_all"], ["proof (state)\nthis:\n  {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n  {k. \\<not> m < k} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n  {k. \\<not> m < k} \\<noteq>\n  {}", "obtain n where mn: \"n > m\" \"set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))\""], ["proof (prove)\nusing this:\n  {n. set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))} -\n  {k. \\<not> m < k} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m < n;\n         set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m < n\n  set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from 2"], ["proof (chain)\npicking this:\n  \\<forall>n. \\<exists>q. sd_chain n = Some q", "obtain p q where pq: \"sd_chain m = Some p\" \"sd_chain n = Some q\""], ["proof (prove)\nusing this:\n  \\<forall>n. \\<exists>q. sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        \\<lbrakk>sd_chain m = Some p; sd_chain n = Some q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  sd_chain m = Some p\n  sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from mn pq"], ["proof (chain)\npicking this:\n  m < n\n  set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))\n  sd_chain m = Some p\n  sd_chain n = Some q", "have supp_eq: \"set_pmf p = set_pmf q\""], ["proof (prove)\nusing this:\n  m < n\n  set_pmf (the (sd_chain n)) = set_pmf (the (sd_chain m))\n  sd_chain m = Some p\n  sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. set_pmf p = set_pmf q", "by simp"], ["proof (state)\nthis:\n  set_pmf p = set_pmf q\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from mn(1) pq"], ["proof (chain)\npicking this:\n  m < n\n  sd_chain m = Some p\n  sd_chain n = Some q", "have less: \"p \\<prec>[Pareto(SD\\<circ>R)] q\""], ["proof (prove)\nusing this:\n  m < n\n  sd_chain m = Some p\n  sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. p \\<prec>[Pareto (SD \\<circ> R)] q", "by (rule sd_chain_strictly_preferred)"], ["proof (state)\nthis:\n  p \\<prec>[Pareto (SD \\<circ> R)] q\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from \\<open>m < n\\<close>"], ["proof (chain)\npicking this:\n  m < n", "have \"n > 0\""], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. 0 < n", "by simp"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "with \\<open>sd_chain n = Some q\\<close> sd_chain.simps(2)[of \"n - 1\"]"], ["proof (chain)\npicking this:\n  sd_chain n = Some q\n  sd_chain (Suc (n - 1)) =\n  (case sd_chain (n - 1) of None \\<Rightarrow> None\n   | Some p \\<Rightarrow>\n       if SD_efficient R p then None else Some (improve_lottery p))\n  0 < n", "obtain r where r: \"\\<not>SD_efficient R r\" \"q = improve_lottery r\""], ["proof (prove)\nusing this:\n  sd_chain n = Some q\n  sd_chain (Suc (n - 1)) =\n  (case sd_chain (n - 1) of None \\<Rightarrow> None\n   | Some p \\<Rightarrow>\n       if SD_efficient R p then None else Some (improve_lottery p))\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>\\<not> SD_efficient R r; q = improve_lottery r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp del: sd_chain.simps split: if_splits option.splits)"], ["proof (state)\nthis:\n  \\<not> SD_efficient R r\n  q = improve_lottery r\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from pq"], ["proof (chain)\npicking this:\n  sd_chain m = Some p\n  sd_chain n = Some q", "have \"p \\<in> lotteries_on alts\" \"q \\<in> lotteries_on alts\""], ["proof (prove)\nusing this:\n  sd_chain m = Some p\n  sd_chain n = Some q\n\ngoal (1 subgoal):\n 1. p \\<in> lotteries_on alts &&& q \\<in> lotteries_on alts", "by (simp_all add: sd_chain_lottery)"], ["proof (state)\nthis:\n  p \\<in> lotteries_on alts\n  q \\<in> lotteries_on alts\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from improve_lottery_support_subset[OF this less supp_eq]"], ["proof (chain)\npicking this:\n  (\\<And>r.\n      \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n       set_pmf r \\<subset> set_pmf p\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "guess s"], ["proof (prove)\nusing this:\n  (\\<And>r.\n      \\<lbrakk>r \\<in> lotteries_on alts; Pareto (SD \\<circ> R) q r;\n       set_pmf r \\<subset> set_pmf p\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  s \\<in> lotteries_on alts\n  Pareto (SD \\<circ> R) q s\n  set_pmf s \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "note s = this"], ["proof (state)\nthis:\n  s \\<in> lotteries_on alts\n  Pareto (SD \\<circ> R) q s\n  set_pmf s \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from improve_lottery(2)[of r] r s"], ["proof (chain)\npicking this:\n  \\<not> SD_efficient R r \\<Longrightarrow>\n  r \\<prec>[Pareto (SD \\<circ> R)] improve_lottery r\n  \\<not> SD_efficient R r\n  q = improve_lottery r\n  s \\<in> lotteries_on alts\n  Pareto (SD \\<circ> R) q s\n  set_pmf s \\<subset> set_pmf p", "have \"s \\<succ>[Pareto(SD\\<circ>R)] r\""], ["proof (prove)\nusing this:\n  \\<not> SD_efficient R r \\<Longrightarrow>\n  r \\<prec>[Pareto (SD \\<circ> R)] improve_lottery r\n  \\<not> SD_efficient R r\n  q = improve_lottery r\n  s \\<in> lotteries_on alts\n  Pareto (SD \\<circ> R) q s\n  set_pmf s \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. r \\<prec>[Pareto (SD \\<circ> R)] s", "by (auto intro: SD.Pareto.strict_weak_trans)"], ["proof (state)\nthis:\n  r \\<prec>[Pareto (SD \\<circ> R)] s\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "from improve_lottery(3)[OF r(1) s(1) this] supp_eq r"], ["proof (chain)\npicking this:\n  \\<not> set_pmf s \\<subset> set_pmf (improve_lottery r)\n  set_pmf p = set_pmf q\n  \\<not> SD_efficient R r\n  q = improve_lottery r", "have \"\\<not>set_pmf s \\<subset> set_pmf p\""], ["proof (prove)\nusing this:\n  \\<not> set_pmf s \\<subset> set_pmf (improve_lottery r)\n  set_pmf p = set_pmf q\n  \\<not> SD_efficient R r\n  q = improve_lottery r\n\ngoal (1 subgoal):\n 1. \\<not> set_pmf s \\<subset> set_pmf p", "by simp"], ["proof (state)\nthis:\n  \\<not> set_pmf s \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>q. sd_chain n = Some q \\<Longrightarrow> thesis", "with s(3)"], ["proof (chain)\npicking this:\n  set_pmf s \\<subset> set_pmf p\n  \\<not> set_pmf s \\<subset> set_pmf p", "show ?thesis"], ["proof (prove)\nusing this:\n  set_pmf s \\<subset> set_pmf p\n  \\<not> set_pmf s \\<subset> set_pmf p\n\ngoal (1 subgoal):\n 1. thesis", "by contradiction"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma \n  assumes \"p \\<in> lotteries_on alts\"\n  shows   \"\\<exists>q\\<in>lotteries_on alts. q \\<succeq>[Pareto(SD\\<circ>R)] p \\<and> SD_efficient R q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>lotteries_on alts.\n       Pareto (SD \\<circ> R) p q \\<and> SD_efficient R q", "using SD_efficient_lottery_exists[OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>q.\n      \\<lbrakk>q \\<in> lotteries_on alts; Pareto (SD \\<circ> R) p q;\n       SD_efficient R q\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>q\\<in>lotteries_on alts.\n       Pareto (SD \\<circ> R) p q \\<and> SD_efficient R q", "by blast"], ["", "end"], ["", "end"]]}