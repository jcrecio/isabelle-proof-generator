{"file_name": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice/Random_Serial_Dictatorship.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Randomised_Social_Choice", "problem_names": ["lemma random_serial_dictatorship_empty [simp]:\n  \"random_serial_dictatorship {} alts R = pmf_of_set alts\"", "lemma random_serial_dictatorship_nonempty:\n  \"finite agents \\<Longrightarrow> agents \\<noteq> {} \\<Longrightarrow> \n    random_serial_dictatorship agents alts R =\n      do {\n        i \\<leftarrow> pmf_of_set agents;\n        random_serial_dictatorship (agents - {i}) (Max_wrt_among (R i) alts) R\n      }\"", "lemma rsd_winners_empty [simp]: \"rsd_winners R alts [] = alts\"", "lemma rsd_winners_Cons [simp]:\n  \"rsd_winners R alts (i # agents) = Max_wrt_among (R i) (rsd_winners R alts agents)\"", "lemma rsd_winners_map [simp]: \n  \"rsd_winners R alts (map f agents) = rsd_winners (R \\<circ> f) alts agents\"", "lemma random_serial_dictatorship_altdef:\n  assumes \"finite agents\"\n  shows   \"random_serial_dictatorship agents alts R =\n             do {\n               agents' \\<leftarrow> pmf_of_set (permutations_of_set agents);\n               pmf_of_set (rsd_winners R alts agents')\n             }\"", "lemma random_serial_dictatorship_foldl:\n  assumes \"finite agents\"\n  shows   \"random_serial_dictatorship agents alts R =\n             do {\n               agents' \\<leftarrow> pmf_of_set (permutations_of_set agents);\n               pmf_of_set (foldl (\\<lambda>alts i. Max_wrt_among (R i) alts) alts agents')\n             }\"", "lemma RSD_pareto_eqclassI:\n  assumes \"A \\<noteq> {}\" \"A \\<subseteq> alts\" \"\\<And>x y. x \\<in> A \\<Longrightarrow> y \\<in> alts \\<Longrightarrow> y \\<in> A \\<longleftrightarrow> (\\<forall>i\\<in>agents. R i x y)\"\n  shows   \"RSD_pareto_eqclass agents alts R A\"", "lemma RSD_pareto_eqclassD:\n  assumes \"RSD_pareto_eqclass agents alts R A\"\n  shows   \"A \\<noteq> {}\" \"A \\<subseteq> alts\" \"\\<And>x y. x \\<in> A \\<Longrightarrow> y \\<in> alts \\<Longrightarrow> y \\<in> A \\<longleftrightarrow> (\\<forall>i\\<in>agents. R i x y)\"", "lemma RSD_pareto_eqclass_indiff_set:\n  assumes \"RSD_pareto_eqclass agents alts R A\" \"i \\<in> agents\" \"x \\<in> A\" \"y \\<in> A\"\n  shows   \"R i x y\"", "lemma RSD_pareto_eqclass_empty [simp, intro!]:\n  \"alts \\<noteq> {} \\<Longrightarrow> RSD_pareto_eqclass {} alts R alts\"", "lemma (in pref_profile_wf) RSD_pareto_eqclass_insert:\n  assumes \"RSD_pareto_eqclass agents' alts R A\" \"finite alts\"\n          \"i \\<in> agents\" \"agents' \\<subseteq> agents\"\n  shows   \"RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)\"", "lemma rsd_winners_subset:\n  assumes \"set agents' \\<subseteq> agents\" \n  shows   \"rsd_winners R alts' agents' \\<subseteq> alts'\"", "lemma rsd_winners_nonempty:\n  assumes finite: \"finite alts\"  and \"alts' \\<noteq> {}\"  \"set agents' \\<subseteq> agents\" \"alts' \\<subseteq> alts\" \n  shows   \"rsd_winners R alts' agents' \\<noteq> {}\"", "lemma rsd_winners_finite: \n  assumes \"set agents' \\<subseteq> agents\" \"finite alts\" \"alts' \\<subseteq> alts\"\n  shows   \"finite (rsd_winners R alts' agents')\"", "lemmas rsd_winners_wf = \n  rsd_winners_subset rsd_winners_nonempty rsd_winners_finite", "lemma RSD_pareto_eqclass_rsd_winners_aux:\n  assumes finite: \"finite alts\" and \"alts \\<noteq> {}\" and \"set agents' \\<subseteq> agents\"\n  shows   \"RSD_pareto_eqclass (set agents') alts R (rsd_winners R alts agents')\"", "lemma RSD_pareto_eqclass_rsd_winners:\n  assumes finite: \"finite alts\" and \"alts \\<noteq> {}\" and \"set agents' = agents\"\n  shows   \"RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\"", "lemma indiff_set_mono: \"indiff_set S A \\<Longrightarrow> B \\<subseteq> A \\<Longrightarrow> B \\<noteq> {} \\<Longrightarrow> indiff_set S B\"", "lemma indiff_set_Max_wrt_among:\n  assumes \"finite carrier\" \"A \\<subseteq> carrier\" \"A \\<noteq> {}\" \"total_preorder_on carrier S\" \n  shows   \"indiff_set S (Max_wrt_among S A)\"", "lemma rsd_winners_manipulation_aux:\n  assumes wf: \"total_preorder_on alts Ri'\"\n      and i: \"i \\<in> agents\" and \"set agents' \\<subseteq> agents\" \"finite agents\" \n      and finite: \"finite alts\" and \"alts \\<noteq> {}\"\n  defines [simp]: \"w' \\<equiv> rsd_winners (R(i := Ri')) alts\" and [simp]: \"w \\<equiv> rsd_winners R alts\"\n  shows   \"w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\"", "lemma rsd_winners_manipulation:\n  assumes wf: \"total_preorder_on alts Ri'\"\n      and i: \"i \\<in> agents\" and \"set agents' = agents\" \"finite agents\" \n      and finite: \"finite alts\" and \"alts \\<noteq> {}\"\n  defines [simp]: \"w' \\<equiv> rsd_winners (R(i := Ri')) alts\" and [simp]: \"w \\<equiv> rsd_winners R alts\"\n  shows   \"\\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. x \\<preceq>[R i] y\"", "lemma random_serial_dictatorship_support:\n  assumes \"finite agents\" \"finite alts\" \"agents' \\<subseteq> agents\" \"alts' \\<noteq> {}\" \"alts' \\<subseteq> alts\"\n  shows   \"set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'\"", "lemma rsd_winners_permute_profile:\n  assumes perm: \"\\<sigma> permutes alts\" and \"set agents' \\<subseteq> agents\" \n  shows   \"rsd_winners (permute_profile \\<sigma> R) alts agents' = \\<sigma> ` rsd_winners R alts agents'\"", "lemma random_serial_dictatorship_singleton:\n  assumes \"finite agents\" \"finite alts\" \"agents' \\<subseteq> agents\" \"x \\<in> alts\"\n  shows   \"random_serial_dictatorship agents' {x} R = return_pmf x\" (is \"?d = _\")", "lemma RSD_extends_RD:\n  assumes wf: \"is_pref_profile R\" and unique: \"has_unique_favorites R\"\n  shows   \"RSD R = RD R\""], "translations": [["", "lemma random_serial_dictatorship_empty [simp]:\n  \"random_serial_dictatorship {} alts R = pmf_of_set alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_serial_dictatorship {} alts R = pmf_of_set alts", "by (simp add: random_serial_dictatorship_def)"], ["", "lemma random_serial_dictatorship_nonempty:\n  \"finite agents \\<Longrightarrow> agents \\<noteq> {} \\<Longrightarrow> \n    random_serial_dictatorship agents alts R =\n      do {\n        i \\<leftarrow> pmf_of_set agents;\n        random_serial_dictatorship (agents - {i}) (Max_wrt_among (R i) alts) R\n      }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite agents; agents \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> random_serial_dictatorship agents alts R =\n                      pmf_of_set agents \\<bind>\n                      (\\<lambda>i.\n                          random_serial_dictatorship (agents - {i})\n                           (Max_wrt_among (R i) alts) R)", "by (simp add: random_serial_dictatorship_def)"], ["", "text \\<open>\n  We define the RSD winners w.r.t. a given set of alternatives and a fixed permutation \n  (i.e. list) of agents. In contrast to the above definition, the RSD winners are \n  determined by traversing the list of agents from right to left.\n    This may seem strange, but it makes induction much easier, since induction over @{term foldr}\n  does not require generalisation over the set of alternatives and is therefore much \n  easier than over @{term foldl}. \n\\<close>"], ["", "definition rsd_winners where\n  \"rsd_winners R alts agents = foldr (\\<lambda>i alts. Max_wrt_among (R i) alts) agents alts\""], ["", "lemma rsd_winners_empty [simp]: \"rsd_winners R alts [] = alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsd_winners R alts [] = alts", "by (simp add: rsd_winners_def)"], ["", "lemma rsd_winners_Cons [simp]:\n  \"rsd_winners R alts (i # agents) = Max_wrt_among (R i) (rsd_winners R alts agents)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsd_winners R alts (i # agents) =\n    Max_wrt_among (R i) (rsd_winners R alts agents)", "by (simp add: rsd_winners_def)"], ["", "lemma rsd_winners_map [simp]: \n  \"rsd_winners R alts (map f agents) = rsd_winners (R \\<circ> f) alts agents\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsd_winners R alts (map f agents) =\n    rsd_winners (R \\<circ> f) alts agents", "by (simp add: rsd_winners_def foldr_map o_def)"], ["", "text \\<open>\n  There is now another alternative definition of RSD in terms of the\n  RSD winners. This will mostly be used for induction.\n\\<close>"], ["", "lemma random_serial_dictatorship_altdef:\n  assumes \"finite agents\"\n  shows   \"random_serial_dictatorship agents alts R =\n             do {\n               agents' \\<leftarrow> pmf_of_set (permutations_of_set agents);\n               pmf_of_set (rsd_winners R alts agents')\n             }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_serial_dictatorship agents alts R =\n    pmf_of_set (permutations_of_set agents) \\<bind>\n    (\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents'))", "by (simp add: random_serial_dictatorship_def \n         fold_bind_random_permutation_foldr assms rsd_winners_def)"], ["", "text \\<open>\n  The following lemma shows that folding from left to right yields the same\n  distribution. This is probably the most commonly used definition in the literature,\n  along with the recursive one.\n\\<close>"], ["", "lemma random_serial_dictatorship_foldl:\n  assumes \"finite agents\"\n  shows   \"random_serial_dictatorship agents alts R =\n             do {\n               agents' \\<leftarrow> pmf_of_set (permutations_of_set agents);\n               pmf_of_set (foldl (\\<lambda>alts i. Max_wrt_among (R i) alts) alts agents')\n             }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. random_serial_dictatorship agents alts R =\n    pmf_of_set (permutations_of_set agents) \\<bind>\n    (\\<lambda>agents'.\n        pmf_of_set\n         (foldl (\\<lambda>alts i. Max_wrt_among (R i) alts) alts agents'))", "by (simp add: random_serial_dictatorship_def fold_bind_random_permutation_foldl assms)"], ["", "subsection \\<open>Auxiliary facts about RSD\\<close>"], ["", "subsubsection \\<open>Pareto-equivalence classes\\<close>"], ["", "text \\<open>\n  First of all, we introduce the auxiliary notion of a Pareto-equivalence class.\n  A non-empty set of alternatives is a Pareto equivalence class if all agents are \n  indifferent between all alternatives in it, and if some alternative @{term \"x::'alt\"} \n  is contained in the set, any other alternative @{term \"y::'alt\"} is contained in it\n  if and only if, to all agents, @{term y} is at least as good as @{term x}.\n    The importance of this notion lies in the fact that the set of RSD winners is always\n  a Pareto-equivalence class, which we will later use to show ex-post efficiency and\n  strategy-proofness.\n\\<close>"], ["", "definition RSD_pareto_eqclass where\n  \"RSD_pareto_eqclass agents alts R A \\<longleftrightarrow>\n     A \\<noteq> {} \\<and> A \\<subseteq> alts \\<and> (\\<forall>x\\<in>A. \\<forall>y\\<in>alts. y \\<in> A \\<longleftrightarrow> (\\<forall>i\\<in>agents. R i x y))\""], ["", "lemma RSD_pareto_eqclassI:\n  assumes \"A \\<noteq> {}\" \"A \\<subseteq> alts\" \"\\<And>x y. x \\<in> A \\<Longrightarrow> y \\<in> alts \\<Longrightarrow> y \\<in> A \\<longleftrightarrow> (\\<forall>i\\<in>agents. R i x y)\"\n  shows   \"RSD_pareto_eqclass agents alts R A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass agents alts R A", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<lbrakk>?x \\<in> A; ?y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (?y \\<in> A) = (\\<forall>i\\<in>agents. R i ?x ?y)\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass agents alts R A", "unfolding RSD_pareto_eqclass_def"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<lbrakk>?x \\<in> A; ?y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (?y \\<in> A) = (\\<forall>i\\<in>agents. R i ?x ?y)\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<and>\n    A \\<subseteq> alts \\<and>\n    (\\<forall>x\\<in>A.\n        \\<forall>y\\<in>alts. (y \\<in> A) = (\\<forall>i\\<in>agents. R i x y))", "by simp_all"], ["", "lemma RSD_pareto_eqclassD:\n  assumes \"RSD_pareto_eqclass agents alts R A\"\n  shows   \"A \\<noteq> {}\" \"A \\<subseteq> alts\" \"\\<And>x y. x \\<in> A \\<Longrightarrow> y \\<in> alts \\<Longrightarrow> y \\<in> A \\<longleftrightarrow> (\\<forall>i\\<in>agents. R i x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} &&&\n    A \\<subseteq> alts &&&\n    (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> alts\\<rbrakk>\n        \\<Longrightarrow> (y \\<in> A) = (\\<forall>i\\<in>agents. R i x y))", "using assms"], ["proof (prove)\nusing this:\n  RSD_pareto_eqclass agents alts R A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} &&&\n    A \\<subseteq> alts &&&\n    (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> alts\\<rbrakk>\n        \\<Longrightarrow> (y \\<in> A) = (\\<forall>i\\<in>agents. R i x y))", "unfolding RSD_pareto_eqclass_def"], ["proof (prove)\nusing this:\n  A \\<noteq> {} \\<and>\n  A \\<subseteq> alts \\<and>\n  (\\<forall>x\\<in>A.\n      \\<forall>y\\<in>alts. (y \\<in> A) = (\\<forall>i\\<in>agents. R i x y))\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} &&&\n    A \\<subseteq> alts &&&\n    (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> alts\\<rbrakk>\n        \\<Longrightarrow> (y \\<in> A) = (\\<forall>i\\<in>agents. R i x y))", "by simp_all"], ["", "lemma RSD_pareto_eqclass_indiff_set:\n  assumes \"RSD_pareto_eqclass agents alts R A\" \"i \\<in> agents\" \"x \\<in> A\" \"y \\<in> A\"\n  shows   \"R i x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R i x y", "using assms"], ["proof (prove)\nusing this:\n  RSD_pareto_eqclass agents alts R A\n  i \\<in> agents\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. R i x y", "unfolding RSD_pareto_eqclass_def"], ["proof (prove)\nusing this:\n  A \\<noteq> {} \\<and>\n  A \\<subseteq> alts \\<and>\n  (\\<forall>x\\<in>A.\n      \\<forall>y\\<in>alts. (y \\<in> A) = (\\<forall>i\\<in>agents. R i x y))\n  i \\<in> agents\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. R i x y", "by blast"], ["", "lemma RSD_pareto_eqclass_empty [simp, intro!]:\n  \"alts \\<noteq> {} \\<Longrightarrow> RSD_pareto_eqclass {} alts R alts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alts \\<noteq> {} \\<Longrightarrow> RSD_pareto_eqclass {} alts R alts", "by (auto intro!: RSD_pareto_eqclassI)"], ["", "lemma (in pref_profile_wf) RSD_pareto_eqclass_insert:\n  assumes \"RSD_pareto_eqclass agents' alts R A\" \"finite alts\"\n          \"i \\<in> agents\" \"agents' \\<subseteq> agents\"\n  shows   \"RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)", "from assms"], ["proof (chain)\npicking this:\n  RSD_pareto_eqclass agents' alts R A\n  finite alts\n  i \\<in> agents\n  agents' \\<subseteq> agents", "interpret total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  RSD_pareto_eqclass agents' alts R A\n  finite alts\n  i \\<in> agents\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)", "proof (intro RSD_pareto_eqclassI Max_wrt_among_nonempty Max_wrt_among_subset, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. A \\<inter> alts \\<noteq> {}\n 2. finite (A \\<inter> alts)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> Max_wrt_among (R i) A; y \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> (y \\<in> Max_wrt_among (R i) A) =\n                         (\\<forall>i\\<in>insert i agents'. R i x y)", "case (3 x y)"], ["proof (state)\nthis:\n  x \\<in> Max_wrt_among (R i) A\n  y \\<in> alts\n\ngoal (3 subgoals):\n 1. A \\<inter> alts \\<noteq> {}\n 2. finite (A \\<inter> alts)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> Max_wrt_among (R i) A; y \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> (y \\<in> Max_wrt_among (R i) A) =\n                         (\\<forall>i\\<in>insert i agents'. R i x y)", "with RSD_pareto_eqclassD[OF assms(1)]"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<lbrakk>?x \\<in> A; ?y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (?y \\<in> A) = (\\<forall>i\\<in>agents'. R i ?x ?y)\n  x \\<in> Max_wrt_among (R i) A\n  y \\<in> alts", "show ?case"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<lbrakk>?x \\<in> A; ?y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (?y \\<in> A) = (\\<forall>i\\<in>agents'. R i ?x ?y)\n  x \\<in> Max_wrt_among (R i) A\n  y \\<in> alts\n\ngoal (1 subgoal):\n 1. (y \\<in> Max_wrt_among (R i) A) =\n    (\\<forall>i\\<in>insert i agents'. R i x y)", "unfolding Max_wrt_among_total_preorder"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  A \\<subseteq> alts\n  \\<lbrakk>?x \\<in> A; ?y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (?y \\<in> A) = (\\<forall>i\\<in>agents'. R i ?x ?y)\n  x \\<in> {x \\<in> alts \\<inter> A. \\<forall>y\\<in>alts \\<inter> A. R i y x}\n  y \\<in> alts\n\ngoal (1 subgoal):\n 1. (y \\<in> {x \\<in> alts \\<inter> A.\n              \\<forall>y\\<in>alts \\<inter> A. R i y x}) =\n    (\\<forall>i\\<in>insert i agents'. R i x y)", "by (blast intro: trans)"], ["proof (state)\nthis:\n  (y \\<in> Max_wrt_among (R i) A) =\n  (\\<forall>i\\<in>insert i agents'. R i x y)\n\ngoal (2 subgoals):\n 1. A \\<inter> alts \\<noteq> {}\n 2. finite (A \\<inter> alts)", "qed (insert RSD_pareto_eqclassD[OF assms(1)] assms(2), \n       simp_all add: Int_absorb1 Int_absorb2 finite_subset)[2]"], ["proof (state)\nthis:\n  RSD_pareto_eqclass (insert i agents') alts R (Max_wrt_among (R i) A)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Facts about RSD winners\\<close>"], ["", "context pref_profile_wf\nbegin"], ["", "text \\<open>\n  Any RSD winner is a valid alternative.  \n\\<close>"], ["", "lemma rsd_winners_subset:\n  assumes \"set agents' \\<subseteq> agents\" \n  shows   \"rsd_winners R alts' agents' \\<subseteq> alts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "assume \"i \\<in> agents\""], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "have \"Max_wrt_among (R i) A \\<subseteq> A\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_wrt_among (R i) A \\<subseteq> A", "using Max_wrt_among_subset"], ["proof (prove)\nusing this:\n  Max_wrt_among (R i) ?A \\<subseteq> alts\n  Max_wrt_among (R i) ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. Max_wrt_among (R i) A \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  Max_wrt_among (R i) ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "}"], ["proof (state)\nthis:\n  ?i3 \\<in> agents \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "note A = this"], ["proof (state)\nthis:\n  ?i3 \\<in> agents \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "from \\<open>set agents' \\<subseteq> agents\\<close>"], ["proof (chain)\npicking this:\n  set agents' \\<subseteq> agents", "show \"rsd_winners R alts' agents' \\<subseteq> alts'\""], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "using A"], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents\n  ?i3 \\<in> agents \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<subseteq> alts'", "by (induction agents') auto"], ["proof (state)\nthis:\n  rsd_winners R alts' agents' \\<subseteq> alts'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  There is always at least one RSD winner.  \n\\<close>"], ["", "lemma rsd_winners_nonempty:\n  assumes finite: \"finite alts\"  and \"alts' \\<noteq> {}\"  \"set agents' \\<subseteq> agents\" \"alts' \\<subseteq> alts\" \n  shows   \"rsd_winners R alts' agents' \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "assume \"i \\<in> agents\""], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "have \"Max_wrt_among (R i) A \\<noteq> {}\" if \"A \\<subseteq> alts\" \"A \\<noteq> {}\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_wrt_among (R i) A \\<noteq> {}", "using that assms"], ["proof (prove)\nusing this:\n  A \\<subseteq> alts\n  A \\<noteq> {}\n  finite alts\n  alts' \\<noteq> {}\n  set agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. Max_wrt_among (R i) A \\<noteq> {}", "by (intro Max_wrt_among_nonempty) (auto simp: Int_absorb)"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R i) ?A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i3 \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "note B = this"], ["proof (state)\nthis:\n  \\<lbrakk>?i3 \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "with \\<open>set agents' \\<subseteq> agents\\<close> \\<open>alts' \\<subseteq> alts\\<close> \\<open>alts' \\<noteq> {}\\<close>"], ["proof (chain)\npicking this:\n  set agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n  alts' \\<noteq> {}\n  \\<lbrakk>?i3 \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<noteq> {}", "show \"rsd_winners R alts' agents' \\<noteq> {}\""], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n  alts' \\<noteq> {}\n  \\<lbrakk>?i3 \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i3) ?A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' agents' \\<noteq> {}", "proof (induction agents')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> agents; alts' \\<subseteq> alts;\n     alts' \\<noteq> {};\n     \\<And>i A.\n        \\<lbrakk>i \\<in> agents; A \\<subseteq> alts; A \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> rsd_winners R alts' [] \\<noteq> {}\n 2. \\<And>a agents'.\n       \\<lbrakk>\\<lbrakk>set agents' \\<subseteq> agents;\n                 alts' \\<subseteq> alts; alts' \\<noteq> {};\n                 \\<And>i A.\n                    \\<lbrakk>i \\<in> agents; A \\<subseteq> alts;\n                     A \\<noteq> {}\\<rbrakk>\n                    \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq>\n{}\\<rbrakk>\n                \\<Longrightarrow> rsd_winners R alts' agents' \\<noteq> {};\n        set (a # agents') \\<subseteq> agents; alts' \\<subseteq> alts;\n        alts' \\<noteq> {};\n        \\<And>i A.\n           \\<lbrakk>i \\<in> agents; A \\<subseteq> alts;\n            A \\<noteq> {}\\<rbrakk>\n           \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> rsd_winners R alts' (a # agents') \\<noteq> {}", "case (Cons i agents')"], ["proof (state)\nthis:\n  \\<lbrakk>set agents' \\<subseteq> agents; alts' \\<subseteq> alts;\n   alts' \\<noteq> {};\n   \\<And>i A.\n      \\<lbrakk>i \\<in> agents; A \\<subseteq> alts; A \\<noteq> {}\\<rbrakk>\n      \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R alts' agents' \\<noteq> {}\n  set (i # agents') \\<subseteq> agents\n  alts' \\<subseteq> alts\n  alts' \\<noteq> {}\n  \\<lbrakk>?i \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i) ?A \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> agents; alts' \\<subseteq> alts;\n     alts' \\<noteq> {};\n     \\<And>i A.\n        \\<lbrakk>i \\<in> agents; A \\<subseteq> alts; A \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> rsd_winners R alts' [] \\<noteq> {}\n 2. \\<And>a agents'.\n       \\<lbrakk>\\<lbrakk>set agents' \\<subseteq> agents;\n                 alts' \\<subseteq> alts; alts' \\<noteq> {};\n                 \\<And>i A.\n                    \\<lbrakk>i \\<in> agents; A \\<subseteq> alts;\n                     A \\<noteq> {}\\<rbrakk>\n                    \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq>\n{}\\<rbrakk>\n                \\<Longrightarrow> rsd_winners R alts' agents' \\<noteq> {};\n        set (a # agents') \\<subseteq> agents; alts' \\<subseteq> alts;\n        alts' \\<noteq> {};\n        \\<And>i A.\n           \\<lbrakk>i \\<in> agents; A \\<subseteq> alts;\n            A \\<noteq> {}\\<rbrakk>\n           \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> rsd_winners R alts' (a # agents') \\<noteq> {}", "with B[of i \"rsd_winners R alts' agents'\"] rsd_winners_subset[of agents' alts'] finite wf"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<in> agents; rsd_winners R alts' agents' \\<subseteq> alts;\n   rsd_winners R alts' agents' \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R i)\n                     (rsd_winners R alts' agents') \\<noteq>\n                    {}\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R alts' agents' \\<subseteq> alts'\n  finite alts\n  wf {(x, y). x < y}\n  \\<lbrakk>set agents' \\<subseteq> agents; alts' \\<subseteq> alts;\n   alts' \\<noteq> {};\n   \\<And>i A.\n      \\<lbrakk>i \\<in> agents; A \\<subseteq> alts; A \\<noteq> {}\\<rbrakk>\n      \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R alts' agents' \\<noteq> {}\n  set (i # agents') \\<subseteq> agents\n  alts' \\<subseteq> alts\n  alts' \\<noteq> {}\n  \\<lbrakk>?i \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i) ?A \\<noteq> {}", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<in> agents; rsd_winners R alts' agents' \\<subseteq> alts;\n   rsd_winners R alts' agents' \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R i)\n                     (rsd_winners R alts' agents') \\<noteq>\n                    {}\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R alts' agents' \\<subseteq> alts'\n  finite alts\n  wf {(x, y). x < y}\n  \\<lbrakk>set agents' \\<subseteq> agents; alts' \\<subseteq> alts;\n   alts' \\<noteq> {};\n   \\<And>i A.\n      \\<lbrakk>i \\<in> agents; A \\<subseteq> alts; A \\<noteq> {}\\<rbrakk>\n      \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R alts' agents' \\<noteq> {}\n  set (i # agents') \\<subseteq> agents\n  alts' \\<subseteq> alts\n  alts' \\<noteq> {}\n  \\<lbrakk>?i \\<in> agents; ?A \\<subseteq> alts; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max_wrt_among (R ?i) ?A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rsd_winners R alts' (i # agents') \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  rsd_winners R alts' (i # agents') \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set [] \\<subseteq> agents; alts' \\<subseteq> alts;\n     alts' \\<noteq> {};\n     \\<And>i A.\n        \\<lbrakk>i \\<in> agents; A \\<subseteq> alts; A \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> Max_wrt_among (R i) A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> rsd_winners R alts' [] \\<noteq> {}", "qed simp"], ["proof (state)\nthis:\n  rsd_winners R alts' agents' \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Obviously, the set of RSD winners is always finite.\n\\<close>"], ["", "lemma rsd_winners_finite: \n  assumes \"set agents' \\<subseteq> agents\" \"finite alts\" \"alts' \\<subseteq> alts\"\n  shows   \"finite (rsd_winners R alts' agents')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (rsd_winners R alts' agents')", "by (rule finite_subset[OF subset_trans[OF rsd_winners_subset]]) fact+"], ["", "lemmas rsd_winners_wf = \n  rsd_winners_subset rsd_winners_nonempty rsd_winners_finite"], ["", "text \\<open>\n  The set of RSD winners is a Pareto-equivalence class.\n\\<close>"], ["", "lemma RSD_pareto_eqclass_rsd_winners_aux:\n  assumes finite: \"finite alts\" and \"alts \\<noteq> {}\" and \"set agents' \\<subseteq> agents\"\n  shows   \"RSD_pareto_eqclass (set agents') alts R (rsd_winners R alts agents')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (set agents') alts R (rsd_winners R alts agents')", "using \\<open>set agents' \\<subseteq> agents\\<close>"], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (set agents') alts R (rsd_winners R alts agents')", "proof (induction agents')"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    RSD_pareto_eqclass (set []) alts R (rsd_winners R alts [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                RSD_pareto_eqclass (set agents') alts R\n                 (rsd_winners R alts agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> RSD_pareto_eqclass (set (a # agents')) alts R\n                          (rsd_winners R alts (a # agents'))", "case (Cons i agents')"], ["proof (state)\nthis:\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  RSD_pareto_eqclass (set agents') alts R (rsd_winners R alts agents')\n  set (i # agents') \\<subseteq> agents\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    RSD_pareto_eqclass (set []) alts R (rsd_winners R alts [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                RSD_pareto_eqclass (set agents') alts R\n                 (rsd_winners R alts agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> RSD_pareto_eqclass (set (a # agents')) alts R\n                          (rsd_winners R alts (a # agents'))", "from Cons.prems"], ["proof (chain)\npicking this:\n  set (i # agents') \\<subseteq> agents", "show ?case"], ["proof (prove)\nusing this:\n  set (i # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (set (i # agents')) alts R\n     (rsd_winners R alts (i # agents'))", "by (simp only: set_simps rsd_winners_Cons,\n        intro RSD_pareto_eqclass_insert[OF Cons.IH finite]) simp_all"], ["proof (state)\nthis:\n  RSD_pareto_eqclass (set (i # agents')) alts R\n   (rsd_winners R alts (i # agents'))\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    RSD_pareto_eqclass (set []) alts R (rsd_winners R alts [])", "qed (insert assms, simp_all)"], ["", "lemma RSD_pareto_eqclass_rsd_winners:\n  assumes finite: \"finite alts\" and \"alts \\<noteq> {}\" and \"set agents' = agents\"\n  shows   \"RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')", "using RSD_pareto_eqclass_rsd_winners_aux[of agents'] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite alts; alts \\<noteq> {};\n   set agents' \\<subseteq> agents\\<rbrakk>\n  \\<Longrightarrow> RSD_pareto_eqclass (set agents') alts R\n                     (rsd_winners R alts agents')\n  finite alts\n  alts \\<noteq> {}\n  set agents' = agents\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')", "by simp"], ["", "text \\<open>\n  For the proof of strategy-proofness, we need to define indifference sets\n  and lift preference relations to sets in a specific way.\n\\<close>"], ["", "context\nbegin"], ["", "text \\<open>\n  An indifference set for a given preference relation is a non-empty set of alternatives \n  such that the agent is indifferent over all of them.\n\\<close>"], ["", "private"], ["", "definition indiff_set where\n  \"indiff_set S A \\<longleftrightarrow> A \\<noteq> {} \\<and> (\\<forall>x\\<in>A. \\<forall>y\\<in>A. S x y)\""], ["", "private"], ["", "lemma indiff_set_mono: \"indiff_set S A \\<Longrightarrow> B \\<subseteq> A \\<Longrightarrow> B \\<noteq> {} \\<Longrightarrow> indiff_set S B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>indiff_set S A; B \\<subseteq> A; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> indiff_set S B", "unfolding indiff_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {} \\<and> (\\<forall>x\\<in>A. Ball A (S x));\n     B \\<subseteq> A; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> B \\<noteq> {} \\<and> (\\<forall>x\\<in>B. Ball B (S x))", "by blast"], ["", "text \\<open>\n  Given an arbitrary set of alternatives @{term A} and an indifference set @{term B},\n  we say that @{term B} is set-preferred over @{term A} w.r.t. the preference \n  relation @{term R} if all (or, equivalently, any) of the alternatives in @{term B} \n  are preferred over all alternatives in @{term A}.\n\\<close>"], ["", "private"], ["", "definition RSD_set_rel where\n  \"RSD_set_rel S A B \\<longleftrightarrow> indiff_set S B \\<and> (\\<forall>x\\<in>A. \\<forall>y\\<in>B. S x y)\""], ["", "text \\<open>\n  The most-preferred alternatives (w.r.t. @{term R}) among any non-empty set of alternatives \n  form an indifference set w.r.t. @{term R}.\n\\<close>"], ["", "private"], ["", "lemma indiff_set_Max_wrt_among:\n  assumes \"finite carrier\" \"A \\<subseteq> carrier\" \"A \\<noteq> {}\" \"total_preorder_on carrier S\" \n  shows   \"indiff_set S (Max_wrt_among S A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indiff_set S (Max_wrt_among S A)", "unfolding indiff_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_wrt_among S A \\<noteq> {} \\<and>\n    (\\<forall>x\\<in>Max_wrt_among S A. Ball (Max_wrt_among S A) (S x))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Max_wrt_among S A \\<noteq> {}\n 2. \\<forall>x\\<in>Max_wrt_among S A. Ball (Max_wrt_among S A) (S x)", "from assms(4)"], ["proof (chain)\npicking this:\n  total_preorder_on carrier S", "interpret total_preorder_on carrier S"], ["proof (prove)\nusing this:\n  total_preorder_on carrier S\n\ngoal (1 subgoal):\n 1. total_preorder_on carrier S", "."], ["proof (state)\ngoal (2 subgoals):\n 1. Max_wrt_among S A \\<noteq> {}\n 2. \\<forall>x\\<in>Max_wrt_among S A. Ball (Max_wrt_among S A) (S x)", "from assms(1-3)"], ["proof (chain)\npicking this:\n  finite carrier\n  A \\<subseteq> carrier\n  A \\<noteq> {}", "show \"Max_wrt_among S A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  finite carrier\n  A \\<subseteq> carrier\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max_wrt_among S A \\<noteq> {}", "by (intro Max_wrt_among_nonempty) auto"], ["proof (state)\nthis:\n  Max_wrt_among S A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Max_wrt_among S A. Ball (Max_wrt_among S A) (S x)", "from assms(1-3)"], ["proof (chain)\npicking this:\n  finite carrier\n  A \\<subseteq> carrier\n  A \\<noteq> {}", "show \"\\<forall>x\\<in>Max_wrt_among S A. \\<forall>y\\<in>Max_wrt_among S A. S x y\""], ["proof (prove)\nusing this:\n  finite carrier\n  A \\<subseteq> carrier\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Max_wrt_among S A.\n       \\<forall>y\\<in>Max_wrt_among S A. S x y", "by (auto simp: indiff_set_def Max_wrt_among_total_preorder)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>Max_wrt_among S A. \\<forall>y\\<in>Max_wrt_among S A. S x y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We now consider the set of RSD winners in the setting of a preference profile @{term R}\n  and a manipulated profile @{term \"R(i := Ri')\"}.\n    This theorem shows that the set of RSD winners in the outcome is either the same\n  in both cases or the outcome for the truthful profile is an indifference set that is\n  set-preferred over the outcome for the manipulated profile.\n\\<close>"], ["", "lemma rsd_winners_manipulation_aux:\n  assumes wf: \"total_preorder_on alts Ri'\"\n      and i: \"i \\<in> agents\" and \"set agents' \\<subseteq> agents\" \"finite agents\" \n      and finite: \"finite alts\" and \"alts \\<noteq> {}\"\n  defines [simp]: \"w' \\<equiv> rsd_winners (R(i := Ri')) alts\" and [simp]: \"w \\<equiv> rsd_winners R alts\"\n  shows   \"w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')", "using \\<open>set agents' \\<subseteq> agents\\<close>"], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')", "proof (induction agents')"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                w' agents' = w agents' \\<or>\n                RSD_set_rel (R i) (w' agents') (w agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> w' (a # agents') = w (a # agents') \\<or>\n                         RSD_set_rel (R i) (w' (a # agents'))\n                          (w (a # agents'))", "case (Cons j agents')"], ["proof (state)\nthis:\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n  set (j # agents') \\<subseteq> agents\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                w' agents' = w agents' \\<or>\n                RSD_set_rel (R i) (w' agents') (w agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> w' (a # agents') = w (a # agents') \\<or>\n                         RSD_set_rel (R i) (w' (a # agents'))\n                          (w (a # agents'))", "from wf i"], ["proof (chain)\npicking this:\n  total_preorder_on alts Ri'\n  i \\<in> agents", "interpret Ri: total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                w' agents' = w agents' \\<or>\n                RSD_set_rel (R i) (w' agents') (w agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> w' (a # agents') = w (a # agents') \\<or>\n                         RSD_set_rel (R i) (w' (a # agents'))\n                          (w (a # agents'))", "from wf Cons.prems"], ["proof (chain)\npicking this:\n  total_preorder_on alts Ri'\n  set (j # agents') \\<subseteq> agents", "interpret Rj: total_preorder_on alts \"R j\""], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  set (j # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R j)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                w' agents' = w agents' \\<or>\n                RSD_set_rel (R i) (w' agents') (w agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> w' (a # agents') = w (a # agents') \\<or>\n                         RSD_set_rel (R i) (w' (a # agents'))\n                          (w (a # agents'))", "from wf"], ["proof (chain)\npicking this:\n  total_preorder_on alts Ri'", "interpret Ri': total_preorder_on alts \"Ri'\""], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n\ngoal (1 subgoal):\n 1. total_preorder_on alts Ri'", "."], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                w' agents' = w agents' \\<or>\n                RSD_set_rel (R i) (w' agents') (w agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> w' (a # agents') = w (a # agents') \\<or>\n                         RSD_set_rel (R i) (w' (a # agents'))\n                          (w (a # agents'))", "from wf assms Cons.prems"], ["proof (chain)\npicking this:\n  total_preorder_on alts Ri'\n  total_preorder_on alts Ri'\n  i \\<in> agents\n  set agents' \\<subseteq> agents\n  finite agents\n  finite alts\n  alts \\<noteq> {}\n  w' \\<equiv> rsd_winners (R(i := Ri')) alts\n  w \\<equiv> rsd_winners R alts\n  set (j # agents') \\<subseteq> agents", "have indiff_set: \"indiff_set (R i) (Max_wrt_among (R i) (rsd_winners R alts agents'))\""], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  total_preorder_on alts Ri'\n  i \\<in> agents\n  set agents' \\<subseteq> agents\n  finite agents\n  finite alts\n  alts \\<noteq> {}\n  w' \\<equiv> rsd_winners (R(i := Ri')) alts\n  w \\<equiv> rsd_winners R alts\n  set (j # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. indiff_set (R i) (Max_wrt_among (R i) (rsd_winners R alts agents'))", "by (intro indiff_set_Max_wrt_among[OF finite] rsd_winners_wf) simp_all"], ["proof (state)\nthis:\n  indiff_set (R i) (Max_wrt_among (R i) (rsd_winners R alts agents'))\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                w' agents' = w agents' \\<or>\n                RSD_set_rel (R i) (w' agents') (w agents');\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> w' (a # agents') = w (a # agents') \\<or>\n                         RSD_set_rel (R i) (w' (a # agents'))\n                          (w (a # agents'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "proof (cases \"j = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "assume j [simp]: \"j = i\""], ["proof (state)\nthis:\n  j = i\n\ngoal (2 subgoals):\n 1. j = i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "from indiff_set Cons"], ["proof (chain)\npicking this:\n  indiff_set (R i) (Max_wrt_among (R i) (rsd_winners R alts agents'))\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n  set (j # agents') \\<subseteq> agents", "have \"RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\""], ["proof (prove)\nusing this:\n  indiff_set (R i) (Max_wrt_among (R i) (rsd_winners R alts agents'))\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n  set (j # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "unfolding RSD_set_rel_def"], ["proof (prove)\nusing this:\n  indiff_set (R i) (Max_wrt_among (R i) (rsd_winners R alts agents'))\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  w' agents' = w agents' \\<or>\n  indiff_set (R i) (w agents') \\<and>\n  (\\<forall>x\\<in>w' agents'. Ball (w agents') (R i x))\n  set (j # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. indiff_set (R i) (w (j # agents')) \\<and>\n    (\\<forall>x\\<in>w' (j # agents'). Ball (w (j # agents')) (R i x))", "by (auto simp: Ri.Max_wrt_among_total_preorder Ri'.Max_wrt_among_total_preorder)"], ["proof (state)\nthis:\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (2 subgoals):\n 1. j = i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "thus ?case"], ["proof (prove)\nusing this:\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (1 subgoal):\n 1. w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", ".."], ["proof (state)\nthis:\n  w' (j # agents') = w (j # agents') \\<or>\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "assume j [simp]: \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "from Cons"], ["proof (chain)\npicking this:\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n  set (j # agents') \\<subseteq> agents", "have \"w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\""], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n  set (j # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')", "by simp"], ["proof (state)\nthis:\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (1 subgoal):\n 1. j \\<noteq> i \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "thus ?case"], ["proof (prove)\nusing this:\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (1 subgoal):\n 1. w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "assume rel: \"RSD_set_rel (R i) (w' agents') (w agents')\""], ["proof (state)\nthis:\n  RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "hence indiff_set: \"indiff_set (R i) (w agents')\""], ["proof (prove)\nusing this:\n  RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (1 subgoal):\n 1. indiff_set (R i) (w agents')", "by (simp add: RSD_set_rel_def)"], ["proof (state)\nthis:\n  indiff_set (R i) (w agents')\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "moreover"], ["proof (state)\nthis:\n  indiff_set (R i) (w agents')\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "from Cons.prems finite \\<open>alts \\<noteq> {}\\<close>"], ["proof (chain)\npicking this:\n  set (j # agents') \\<subseteq> agents\n  finite alts\n  alts \\<noteq> {}", "have \"w agents' \\<subseteq> alts\" \"w agents' \\<noteq> {}\""], ["proof (prove)\nusing this:\n  set (j # agents') \\<subseteq> agents\n  finite alts\n  alts \\<noteq> {}\n\ngoal (1 subgoal):\n 1. w agents' \\<subseteq> alts &&& w agents' \\<noteq> {}", "unfolding w_def"], ["proof (prove)\nusing this:\n  set (j # agents') \\<subseteq> agents\n  finite alts\n  alts \\<noteq> {}\n\ngoal (1 subgoal):\n 1. rsd_winners R alts agents' \\<subseteq> alts &&&\n    rsd_winners R alts agents' \\<noteq> {}", "by (intro rsd_winners_wf; simp)+"], ["proof (state)\nthis:\n  w agents' \\<subseteq> alts\n  w agents' \\<noteq> {}\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "with finite"], ["proof (chain)\npicking this:\n  finite alts\n  w agents' \\<subseteq> alts\n  w agents' \\<noteq> {}", "have \"Max_wrt_among (R j) (w agents') \\<noteq> {}\""], ["proof (prove)\nusing this:\n  finite alts\n  w agents' \\<subseteq> alts\n  w agents' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max_wrt_among (R j) (w agents') \\<noteq> {}", "by (intro Rj.Max_wrt_among_nonempty) auto"], ["proof (state)\nthis:\n  Max_wrt_among (R j) (w agents') \\<noteq> {}\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "ultimately"], ["proof (chain)\npicking this:\n  indiff_set (R i) (w agents')\n  Max_wrt_among (R j) (w agents') \\<noteq> {}", "have \"indiff_set (R i) (w (j # agents'))\""], ["proof (prove)\nusing this:\n  indiff_set (R i) (w agents')\n  Max_wrt_among (R j) (w agents') \\<noteq> {}\n\ngoal (1 subgoal):\n 1. indiff_set (R i) (w (j # agents'))", "by (intro indiff_set_mono[OF indiff_set] Rj.Max_wrt_among_subset)\n           (simp_all add: Rj.Max_wrt_among_subset)"], ["proof (state)\nthis:\n  indiff_set (R i) (w (j # agents'))\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "moreover"], ["proof (state)\nthis:\n  indiff_set (R i) (w (j # agents'))\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "from rel"], ["proof (chain)\npicking this:\n  RSD_set_rel (R i) (w' agents') (w agents')", "have \"\\<forall>x\\<in>w' (j # agents'). \\<forall>y\\<in>w (j # agents'). R i x y\""], ["proof (prove)\nusing this:\n  RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>w' (j # agents'). \\<forall>y\\<in>w (j # agents'). R i x y", "by (auto simp: RSD_set_rel_def Rj.Max_wrt_among_total_preorder)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>w' (j # agents'). \\<forall>y\\<in>w (j # agents'). R i x y\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "ultimately"], ["proof (chain)\npicking this:\n  indiff_set (R i) (w (j # agents'))\n  \\<forall>x\\<in>w' (j # agents'). \\<forall>y\\<in>w (j # agents'). R i x y", "have \"RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\""], ["proof (prove)\nusing this:\n  indiff_set (R i) (w (j # agents'))\n  \\<forall>x\\<in>w' (j # agents'). \\<forall>y\\<in>w (j # agents'). R i x y\n\ngoal (1 subgoal):\n 1. RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "unfolding RSD_set_rel_def"], ["proof (prove)\nusing this:\n  indiff_set (R i) (w (j # agents'))\n  \\<forall>x\\<in>w' (j # agents'). \\<forall>y\\<in>w (j # agents'). R i x y\n\ngoal (1 subgoal):\n 1. indiff_set (R i) (w (j # agents')) \\<and>\n    (\\<forall>x\\<in>w' (j # agents'). Ball (w (j # agents')) (R i x))", ".."], ["proof (state)\nthis:\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "thus ?case"], ["proof (prove)\nusing this:\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (1 subgoal):\n 1. w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", ".."], ["proof (state)\nthis:\n  w' (j # agents') = w (j # agents') \\<or>\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (1 subgoal):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    w' (j # agents') = w (j # agents') \\<or>\n    RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))", "qed simp_all"], ["proof (state)\nthis:\n  w' (j # agents') = w (j # agents') \\<or>\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w' (j # agents') = w (j # agents') \\<or>\n  RSD_set_rel (R i) (w' (j # agents')) (w (j # agents'))\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    w' [] = w [] \\<or> RSD_set_rel (R i) (w' []) (w [])", "qed simp_all"], ["", "text \\<open>\n  The following variant of the previous theorem is slightly easier to use.\n  We eliminate the case where the two outcomes are the same by observing that\n  the original outcome is then also set-preferred to the manipulated one.\n    In essence, this means that no matter what manipulation is done, the \n  original outcome is always set-preferred to the manipulated one.\n\\<close>"], ["", "lemma rsd_winners_manipulation:\n  assumes wf: \"total_preorder_on alts Ri'\"\n      and i: \"i \\<in> agents\" and \"set agents' = agents\" \"finite agents\" \n      and finite: \"finite alts\" and \"alts \\<noteq> {}\"\n  defines [simp]: \"w' \\<equiv> rsd_winners (R(i := Ri')) alts\" and [simp]: \"w \\<equiv> rsd_winners R alts\"\n  shows   \"\\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. x \\<preceq>[R i] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "have \"w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')", "using rsd_winners_manipulation_aux[OF assms(1-2) _ assms(4-6)] assms(3)"], ["proof (prove)\nusing this:\n  set ?agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners (R(i := Ri')) alts ?agents' =\n  rsd_winners R alts ?agents' \\<or>\n  RSD_set_rel (R i) (rsd_winners (R(i := Ri')) alts ?agents')\n   (rsd_winners R alts ?agents')\n  set agents' = agents\n\ngoal (1 subgoal):\n 1. w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')", "by simp"], ["proof (state)\nthis:\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "thus ?thesis"], ["proof (prove)\nusing this:\n  w' agents' = w agents' \\<or> RSD_set_rel (R i) (w' agents') (w agents')\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "assume eq: \"w' agents' = w agents'\""], ["proof (state)\nthis:\n  w' agents' = w agents'\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "from assms"], ["proof (chain)\npicking this:\n  total_preorder_on alts Ri'\n  i \\<in> agents\n  set agents' = agents\n  finite agents\n  finite alts\n  alts \\<noteq> {}\n  w' \\<equiv> rsd_winners (R(i := Ri')) alts\n  w \\<equiv> rsd_winners R alts", "have \"RSD_pareto_eqclass (set agents') alts R (w agents')\""], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  i \\<in> agents\n  set agents' = agents\n  finite agents\n  finite alts\n  alts \\<noteq> {}\n  w' \\<equiv> rsd_winners (R(i := Ri')) alts\n  w \\<equiv> rsd_winners R alts\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (set agents') alts R (w agents')", "unfolding w_def"], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  i \\<in> agents\n  set agents' = agents\n  finite agents\n  finite alts\n  alts \\<noteq> {}\n  w' \\<equiv> rsd_winners (R(i := Ri')) alts\n  rsd_winners R alts \\<equiv> rsd_winners R alts\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass (set agents') alts R (rsd_winners R alts agents')", "by (intro RSD_pareto_eqclass_rsd_winners_aux) simp_all"], ["proof (state)\nthis:\n  RSD_pareto_eqclass (set agents') alts R (w agents')\n\ngoal (2 subgoals):\n 1. w' agents' = w agents' \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y\n 2. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "from RSD_pareto_eqclass_indiff_set[OF this, of i] i eq assms(3)"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<in> set agents'; ?x \\<in> w agents';\n   ?y \\<in> w agents'\\<rbrakk>\n  \\<Longrightarrow> R i ?x ?y\n  i \\<in> agents\n  w' agents' = w agents'\n  set agents' = agents", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<in> set agents'; ?x \\<in> w agents';\n   ?y \\<in> w agents'\\<rbrakk>\n  \\<Longrightarrow> R i ?x ?y\n  i \\<in> agents\n  w' agents' = w agents'\n  set agents' = agents\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y\n\ngoal (1 subgoal):\n 1. RSD_set_rel (R i) (w' agents') (w agents') \\<Longrightarrow>\n    \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y", "qed (auto simp: RSD_set_rel_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>w' agents'. \\<forall>y\\<in>w agents'. R i x y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\n  The lottery that RSD yields is well-defined.\n\\<close>"], ["", "lemma random_serial_dictatorship_support:\n  assumes \"finite agents\" \"finite alts\" \"agents' \\<subseteq> agents\" \"alts' \\<noteq> {}\" \"alts' \\<subseteq> alts\"\n  shows   \"set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'", "from assms"], ["proof (chain)\npicking this:\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  alts' \\<noteq> {}\n  alts' \\<subseteq> alts", "have [simp]: \"finite agents'\""], ["proof (prove)\nusing this:\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  alts' \\<noteq> {}\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. finite agents'", "by (auto intro: finite_subset)"], ["proof (state)\nthis:\n  finite agents'\n\ngoal (1 subgoal):\n 1. set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'", "have A: \"set_pmf (pmf_of_set (rsd_winners R alts' agents'')) \\<subseteq> alts'\"\n    if \"agents'' \\<in> permutations_of_set agents'\" for agents''"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (pmf_of_set (rsd_winners R alts' agents'')) \\<subseteq> alts'", "using that assms rsd_winners_wf[where alts' = alts' and agents' = agents'']"], ["proof (prove)\nusing this:\n  agents'' \\<in> permutations_of_set agents'\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  alts' \\<noteq> {}\n  alts' \\<subseteq> alts\n  set agents'' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R alts' agents'' \\<subseteq> alts'\n  \\<lbrakk>finite alts; alts' \\<noteq> {}; set agents'' \\<subseteq> agents;\n   alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R alts' agents'' \\<noteq> {}\n  \\<lbrakk>set agents'' \\<subseteq> agents; finite alts;\n   alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> finite (rsd_winners R alts' agents'')\n\ngoal (1 subgoal):\n 1. set_pmf (pmf_of_set (rsd_winners R alts' agents'')) \\<subseteq> alts'", "by (auto simp: permutations_of_set_def)"], ["proof (state)\nthis:\n  ?agents'' \\<in> permutations_of_set agents' \\<Longrightarrow>\n  set_pmf (pmf_of_set (rsd_winners R alts' ?agents'')) \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'", "from assms"], ["proof (chain)\npicking this:\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  alts' \\<noteq> {}\n  alts' \\<subseteq> alts", "show ?thesis"], ["proof (prove)\nusing this:\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  alts' \\<noteq> {}\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'", "by (auto dest!: A simp add: random_serial_dictatorship_altdef)"], ["proof (state)\nthis:\n  set_pmf (random_serial_dictatorship agents' alts' R) \\<subseteq> alts'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Permutation of alternatives commutes with RSD winners.\n\\<close>"], ["", "lemma rsd_winners_permute_profile:\n  assumes perm: \"\\<sigma> permutes alts\" and \"set agents' \\<subseteq> agents\" \n  shows   \"rsd_winners (permute_profile \\<sigma> R) alts agents' = \\<sigma> ` rsd_winners R alts agents'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsd_winners (permute_profile \\<sigma> R) alts agents' =\n    \\<sigma> ` rsd_winners R alts agents'", "using \\<open>set agents' \\<subseteq> agents\\<close>"], ["proof (prove)\nusing this:\n  set agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. rsd_winners (permute_profile \\<sigma> R) alts agents' =\n    \\<sigma> ` rsd_winners R alts agents'", "proof (induction agents')"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    rsd_winners (permute_profile \\<sigma> R) alts [] =\n    \\<sigma> ` rsd_winners R alts []\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                rsd_winners (permute_profile \\<sigma> R) alts agents' =\n                \\<sigma> ` rsd_winners R alts agents';\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> rsd_winners (permute_profile \\<sigma> R) alts\n                          (a # agents') =\n                         \\<sigma> ` rsd_winners R alts (a # agents')", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> agents\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> agents \\<Longrightarrow>\n    rsd_winners (permute_profile \\<sigma> R) alts [] =\n    \\<sigma> ` rsd_winners R alts []\n 2. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                rsd_winners (permute_profile \\<sigma> R) alts agents' =\n                \\<sigma> ` rsd_winners R alts agents';\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> rsd_winners (permute_profile \\<sigma> R) alts\n                          (a # agents') =\n                         \\<sigma> ` rsd_winners R alts (a # agents')", "from perm"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts", "show ?case"], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. rsd_winners (permute_profile \\<sigma> R) alts [] =\n    \\<sigma> ` rsd_winners R alts []", "by (simp add: permutes_image)"], ["proof (state)\nthis:\n  rsd_winners (permute_profile \\<sigma> R) alts [] =\n  \\<sigma> ` rsd_winners R alts []\n\ngoal (1 subgoal):\n 1. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                rsd_winners (permute_profile \\<sigma> R) alts agents' =\n                \\<sigma> ` rsd_winners R alts agents';\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> rsd_winners (permute_profile \\<sigma> R) alts\n                          (a # agents') =\n                         \\<sigma> ` rsd_winners R alts (a # agents')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                rsd_winners (permute_profile \\<sigma> R) alts agents' =\n                \\<sigma> ` rsd_winners R alts agents';\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> rsd_winners (permute_profile \\<sigma> R) alts\n                          (a # agents') =\n                         \\<sigma> ` rsd_winners R alts (a # agents')", "case (Cons i agents')"], ["proof (state)\nthis:\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners (permute_profile \\<sigma> R) alts agents' =\n  \\<sigma> ` rsd_winners R alts agents'\n  set (i # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                rsd_winners (permute_profile \\<sigma> R) alts agents' =\n                \\<sigma> ` rsd_winners R alts agents';\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> rsd_winners (permute_profile \\<sigma> R) alts\n                          (a # agents') =\n                         \\<sigma> ` rsd_winners R alts (a # agents')", "from wf Cons"], ["proof (chain)\npicking this:\n  wf {(x, y). x < y}\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners (permute_profile \\<sigma> R) alts agents' =\n  \\<sigma> ` rsd_winners R alts agents'\n  set (i # agents') \\<subseteq> agents", "interpret total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  wf {(x, y). x < y}\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners (permute_profile \\<sigma> R) alts agents' =\n  \\<sigma> ` rsd_winners R alts agents'\n  set (i # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a agents'.\n       \\<lbrakk>set agents' \\<subseteq> agents \\<Longrightarrow>\n                rsd_winners (permute_profile \\<sigma> R) alts agents' =\n                \\<sigma> ` rsd_winners R alts agents';\n        set (a # agents') \\<subseteq> agents\\<rbrakk>\n       \\<Longrightarrow> rsd_winners (permute_profile \\<sigma> R) alts\n                          (a # agents') =\n                         \\<sigma> ` rsd_winners R alts (a # agents')", "from perm Cons"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners (permute_profile \\<sigma> R) alts agents' =\n  \\<sigma> ` rsd_winners R alts agents'\n  set (i # agents') \\<subseteq> agents", "show ?case"], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners (permute_profile \\<sigma> R) alts agents' =\n  \\<sigma> ` rsd_winners R alts agents'\n  set (i # agents') \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. rsd_winners (permute_profile \\<sigma> R) alts (i # agents') =\n    \\<sigma> ` rsd_winners R alts (i # agents')", "by (simp add: permute_profile_map_relation Max_wrt_among_map_relation_bij permutes_bij)"], ["proof (state)\nthis:\n  rsd_winners (permute_profile \\<sigma> R) alts (i # agents') =\n  \\<sigma> ` rsd_winners R alts (i # agents')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma random_serial_dictatorship_singleton:\n  assumes \"finite agents\" \"finite alts\" \"agents' \\<subseteq> agents\" \"x \\<in> alts\"\n  shows   \"random_serial_dictatorship agents' {x} R = return_pmf x\" (is \"?d = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. random_serial_dictatorship agents' {x} R = return_pmf x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. random_serial_dictatorship agents' {x} R = return_pmf x", "from assms"], ["proof (chain)\npicking this:\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  x \\<in> alts", "have \"set_pmf ?d \\<subseteq> {x}\""], ["proof (prove)\nusing this:\n  finite agents\n  finite alts\n  agents' \\<subseteq> agents\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. set_pmf (random_serial_dictatorship agents' {x} R) \\<subseteq> {x}", "by (intro random_serial_dictatorship_support) simp_all"], ["proof (state)\nthis:\n  set_pmf (random_serial_dictatorship agents' {x} R) \\<subseteq> {x}\n\ngoal (1 subgoal):\n 1. random_serial_dictatorship agents' {x} R = return_pmf x", "thus ?thesis"], ["proof (prove)\nusing this:\n  set_pmf (random_serial_dictatorship agents' {x} R) \\<subseteq> {x}\n\ngoal (1 subgoal):\n 1. random_serial_dictatorship agents' {x} R = return_pmf x", "by (simp add: set_pmf_subset_singleton)"], ["proof (state)\nthis:\n  random_serial_dictatorship agents' {x} R = return_pmf x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Proofs of properties\\<close>"], ["", "text \\<open>\n  With all the facts that we have proven about the RSD winners, the hard work is\n  mostly done. We can now simply fix some arbitrary order of the agents, apply the \n  theorems about the RSD winners, and show the properties we want to show without \n  doing much reasoning about probabilities.\n\\<close>"], ["", "context election\nbegin"], ["", "abbreviation \"RSD \\<equiv> random_serial_dictatorship agents alts\""], ["", "subsubsection \\<open>Well-definedness\\<close>"], ["", "sublocale RSD: social_decision_scheme agents alts RSD"], ["proof (prove)\ngoal (1 subgoal):\n 1. social_decision_scheme agents alts RSD", "using pref_profile_wf.random_serial_dictatorship_support[of agents alts]"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_pref_profile ?R; finite agents; finite alts;\n   ?agents' \\<subseteq> agents; ?alts' \\<noteq> {};\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> set_pmf (random_serial_dictatorship ?agents' ?alts' ?R)\n                    \\<subseteq> ?alts'\n\ngoal (1 subgoal):\n 1. social_decision_scheme agents alts RSD", "by unfold_locales (simp_all add: lotteries_on_def)"], ["", "subsubsection \\<open>RD extension\\<close>"], ["", "lemma RSD_extends_RD:\n  assumes wf: \"is_pref_profile R\" and unique: \"has_unique_favorites R\"\n  shows   \"RSD R = RD R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD R = RD R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. RSD R = RD R", "from wf"], ["proof (chain)\npicking this:\n  is_pref_profile R", "interpret pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. RSD R = RD R", "from unique"], ["proof (chain)\npicking this:\n  has_unique_favorites R", "interpret pref_profile_unique_favorites"], ["proof (prove)\nusing this:\n  has_unique_favorites R\n\ngoal (1 subgoal):\n 1. pref_profile_unique_favorites agents alts R", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. RSD R = RD R", "have \"RSD R = pmf_of_set agents \\<bind> \n                  (\\<lambda>i. random_serial_dictatorship (agents - {i}) (favorites R i) R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD R =\n    pmf_of_set agents \\<bind>\n    (\\<lambda>i.\n        random_serial_dictatorship (agents - {i}) (favorites R i) R)", "by (simp add: random_serial_dictatorship_nonempty favorites_altdef Max_wrt_def)"], ["proof (state)\nthis:\n  RSD R =\n  pmf_of_set agents \\<bind>\n  (\\<lambda>i. random_serial_dictatorship (agents - {i}) (favorites R i) R)\n\ngoal (1 subgoal):\n 1. RSD R = RD R", "also"], ["proof (state)\nthis:\n  RSD R =\n  pmf_of_set agents \\<bind>\n  (\\<lambda>i. random_serial_dictatorship (agents - {i}) (favorites R i) R)\n\ngoal (1 subgoal):\n 1. RSD R = RD R", "from assms"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  has_unique_favorites R", "have \"\\<dots> = pmf_of_set agents \\<bind> (\\<lambda>i. return_pmf (favorite R i))\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n  has_unique_favorites R\n\ngoal (1 subgoal):\n 1. pmf_of_set agents \\<bind>\n    (\\<lambda>i.\n        random_serial_dictatorship (agents - {i}) (favorites R i) R) =\n    pmf_of_set agents \\<bind> (\\<lambda>i. return_pmf (favorite R i))", "by (intro bind_pmf_cong refl, subst random_serial_dictatorship_singleton [symmetric])\n       (auto simp: unique_favorites favorite_in_alts)"], ["proof (state)\nthis:\n  pmf_of_set agents \\<bind>\n  (\\<lambda>i.\n      random_serial_dictatorship (agents - {i}) (favorites R i) R) =\n  pmf_of_set agents \\<bind> (\\<lambda>i. return_pmf (favorite R i))\n\ngoal (1 subgoal):\n 1. RSD R = RD R", "also"], ["proof (state)\nthis:\n  pmf_of_set agents \\<bind>\n  (\\<lambda>i.\n      random_serial_dictatorship (agents - {i}) (favorites R i) R) =\n  pmf_of_set agents \\<bind> (\\<lambda>i. return_pmf (favorite R i))\n\ngoal (1 subgoal):\n 1. RSD R = RD R", "from assms"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  has_unique_favorites R", "have \"\\<dots> = RD R\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n  has_unique_favorites R\n\ngoal (1 subgoal):\n 1. pmf_of_set agents \\<bind> (\\<lambda>i. return_pmf (favorite R i)) = RD R", "by (simp add: random_dictatorship_unique_favorites map_pmf_def)"], ["proof (state)\nthis:\n  pmf_of_set agents \\<bind> (\\<lambda>i. return_pmf (favorite R i)) = RD R\n\ngoal (1 subgoal):\n 1. RSD R = RD R", "finally"], ["proof (chain)\npicking this:\n  RSD R = RD R", "show ?thesis"], ["proof (prove)\nusing this:\n  RSD R = RD R\n\ngoal (1 subgoal):\n 1. RSD R = RD R", "."], ["proof (state)\nthis:\n  RSD R = RD R\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Anonymity\\<close>"], ["", "text \\<open>\n  Anonymity is a direct consequence of the fact that we randomise over all\n  permutations in a uniform way.\n\\<close>"], ["", "sublocale RSD: anonymous_sds agents alts RSD"], ["proof (prove)\ngoal (1 subgoal):\n 1. anonymous_sds agents alts RSD", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "fix \\<pi> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "assume perm: \"\\<pi> permutes agents\" and wf: \"is_pref_profile R\""], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "let ?f = \"\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "from perm wf"], ["proof (chain)\npicking this:\n  \\<pi> permutes agents\n  is_pref_profile R", "have \"RSD (R \\<circ> \\<pi>) = map_pmf (map \\<pi>) (pmf_of_set (permutations_of_set agents)) \\<bind> ?f\""], ["proof (prove)\nusing this:\n  \\<pi> permutes agents\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. RSD (R \\<circ> \\<pi>) =\n    map_pmf (map \\<pi>) (pmf_of_set (permutations_of_set agents)) \\<bind>\n    (\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents'))", "by (simp add: random_serial_dictatorship_altdef bind_map_pmf)"], ["proof (state)\nthis:\n  RSD (R \\<circ> \\<pi>) =\n  map_pmf (map \\<pi>) (pmf_of_set (permutations_of_set agents)) \\<bind>\n  (\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents'))\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "also"], ["proof (state)\nthis:\n  RSD (R \\<circ> \\<pi>) =\n  map_pmf (map \\<pi>) (pmf_of_set (permutations_of_set agents)) \\<bind>\n  (\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents'))\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "from perm"], ["proof (chain)\npicking this:\n  \\<pi> permutes agents", "have \"\\<dots> = RSD R\""], ["proof (prove)\nusing this:\n  \\<pi> permutes agents\n\ngoal (1 subgoal):\n 1. map_pmf (map \\<pi>) (pmf_of_set (permutations_of_set agents)) \\<bind>\n    (\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents')) =\n    RSD R", "by (simp add: map_pmf_of_set_inj permutes_inj_on inj_on_mapI\n                  permutations_of_set_image_permutes random_serial_dictatorship_altdef)"], ["proof (state)\nthis:\n  map_pmf (map \\<pi>) (pmf_of_set (permutations_of_set agents)) \\<bind>\n  (\\<lambda>agents'. pmf_of_set (rsd_winners R alts agents')) =\n  RSD R\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (R \\<circ> \\<pi>) = RSD R", "finally"], ["proof (chain)\npicking this:\n  RSD (R \\<circ> \\<pi>) = RSD R", "show \"RSD (R \\<circ> \\<pi>) = RSD R\""], ["proof (prove)\nusing this:\n  RSD (R \\<circ> \\<pi>) = RSD R\n\ngoal (1 subgoal):\n 1. RSD (R \\<circ> \\<pi>) = RSD R", "."], ["proof (state)\nthis:\n  RSD (R \\<circ> \\<pi>) = RSD R\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Neutrality\\<close>"], ["", "text \\<open>\n  Neutrality follows from the fact that the RSD winners of a permuted profile \n  are simply the image of the original RSD winners under the permutation.\n\\<close>"], ["", "sublocale RSD: neutral_sds agents alts RSD"], ["proof (prove)\ngoal (1 subgoal):\n 1. neutral_sds agents alts RSD", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (RSD R)", "fix \\<sigma> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (RSD R)", "assume perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R\""], ["proof (state)\nthis:\n  \\<sigma> permutes alts\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (RSD R)", "from wf"], ["proof (chain)\npicking this:\n  is_pref_profile R", "interpret pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts; is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> RSD (permute_profile \\<sigma> R) =\n                         map_pmf \\<sigma> (RSD R)", "from perm"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts", "show \"RSD (permute_profile \\<sigma> R) = map_pmf \\<sigma> (RSD R)\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. RSD (permute_profile \\<sigma> R) = map_pmf \\<sigma> (RSD R)", "by (auto intro!: bind_pmf_cong dest!: permutations_of_setD(1) \n             simp: random_serial_dictatorship_altdef rsd_winners_permute_profile\n                   map_bind_pmf map_pmf_of_set_inj permutes_inj_on rsd_winners_wf)"], ["proof (state)\nthis:\n  RSD (permute_profile \\<sigma> R) = map_pmf \\<sigma> (RSD R)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Ex-post efficiency\\<close>"], ["", "text \\<open>\n  Ex-post efficiency follows from the fact that the set of RSD winners \n  is a Pareto-equivalence class.\n\\<close>"], ["", "sublocale RSD: ex_post_efficient_sds agents alts RSD"], ["proof (prove)\ngoal (1 subgoal):\n 1. ex_post_efficient_sds agents alts RSD", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "assume wf: \"is_pref_profile R\""], ["proof (state)\nthis:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "then"], ["proof (chain)\npicking this:\n  is_pref_profile R", "interpret pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "assume x: \"x \\<in> set_pmf (RSD R)\" \"x \\<in> pareto_losers R\""], ["proof (state)\nthis:\n  x \\<in> set_pmf (RSD R)\n  x \\<in> pareto_losers R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "from x(2)"], ["proof (chain)\npicking this:\n  x \\<in> pareto_losers R", "obtain y where [simp]: \"y \\<in> alts\" and pareto: \"y \\<succ>[Pareto(R)] x\""], ["proof (prove)\nusing this:\n  x \\<in> pareto_losers R\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> alts; x \\<prec>[Pareto R] y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases rule: pareto_losersE)"], ["proof (state)\nthis:\n  y \\<in> alts\n  x \\<prec>[Pareto R] y\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> set_pmf (RSD R)\n  x \\<in> pareto_losers R", "have [simp]: \"x \\<in> alts\""], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (RSD R)\n  x \\<in> pareto_losers R\n\ngoal (1 subgoal):\n 1. x \\<in> alts", "using pareto_loser_in_alts"], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (RSD R)\n  x \\<in> pareto_losers R\n  ?x \\<in> pareto_losers R \\<Longrightarrow> ?x \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts", "by simp"], ["proof (state)\nthis:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "from x(1)"], ["proof (chain)\npicking this:\n  x \\<in> set_pmf (RSD R)", "obtain agents' where agents': \"set agents' = agents\" and \n        \"x \\<in> set_pmf (pmf_of_set (rsd_winners R alts agents'))\""], ["proof (prove)\nusing this:\n  x \\<in> set_pmf (RSD R)\n\ngoal (1 subgoal):\n 1. (\\<And>agents'.\n        \\<lbrakk>set agents' = agents;\n         x \\<in> set_pmf (pmf_of_set (rsd_winners R alts agents'))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: random_serial_dictatorship_altdef dest: permutations_of_setD)"], ["proof (state)\nthis:\n  set agents' = agents\n  x \\<in> set_pmf (pmf_of_set (rsd_winners R alts agents'))\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "with wf"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  set agents' = agents\n  x \\<in> set_pmf (pmf_of_set (rsd_winners R alts agents'))", "have x': \"x \\<in> rsd_winners R alts agents'\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n  set agents' = agents\n  x \\<in> set_pmf (pmf_of_set (rsd_winners R alts agents'))\n\ngoal (1 subgoal):\n 1. x \\<in> rsd_winners R alts agents'", "using rsd_winners_wf[where alts' = alts and agents' = agents']"], ["proof (prove)\nusing this:\n  is_pref_profile R\n  set agents' = agents\n  x \\<in> set_pmf (pmf_of_set (rsd_winners R alts agents'))\n  set agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R alts agents' \\<subseteq> alts\n  \\<lbrakk>finite alts; alts \\<noteq> {}; set agents' \\<subseteq> agents;\n   alts \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R alts agents' \\<noteq> {}\n  \\<lbrakk>set agents' \\<subseteq> agents; finite alts;\n   alts \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> finite (rsd_winners R alts agents')\n\ngoal (1 subgoal):\n 1. x \\<in> rsd_winners R alts agents'", "by (subst (asm) set_pmf_of_set) (auto simp: permutations_of_setD)"], ["proof (state)\nthis:\n  x \\<in> rsd_winners R alts agents'\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "from wf agents'"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  set agents' = agents", "have \"RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n  set agents' = agents\n\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')", "by (intro RSD_pareto_eqclass_rsd_winners) simp_all"], ["proof (state)\nthis:\n  RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "hence winner_iff: \"y \\<in> rsd_winners R alts agents' \\<longleftrightarrow> (\\<forall>i\\<in>agents. x \\<preceq>[R i] y)\"\n      if \"x \\<in> rsd_winners R alts agents'\" \"y \\<in> alts\" for x y"], ["proof (prove)\nusing this:\n  RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\n\ngoal (1 subgoal):\n 1. (y \\<in> rsd_winners R alts agents') = (\\<forall>i\\<in>agents. R i x y)", "using that"], ["proof (prove)\nusing this:\n  RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\n  x \\<in> rsd_winners R alts agents'\n  y \\<in> alts\n\ngoal (1 subgoal):\n 1. (y \\<in> rsd_winners R alts agents') = (\\<forall>i\\<in>agents. R i x y)", "unfolding RSD_pareto_eqclass_def"], ["proof (prove)\nusing this:\n  rsd_winners R alts agents' \\<noteq> {} \\<and>\n  rsd_winners R alts agents' \\<subseteq> alts \\<and>\n  (\\<forall>x\\<in>rsd_winners R alts agents'.\n      \\<forall>y\\<in>alts.\n         (y \\<in> rsd_winners R alts agents') =\n         (\\<forall>i\\<in>agents. R i x y))\n  x \\<in> rsd_winners R alts agents'\n  y \\<in> alts\n\ngoal (1 subgoal):\n 1. (y \\<in> rsd_winners R alts agents') = (\\<forall>i\\<in>agents. R i x y)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> rsd_winners R alts agents'; ?y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (?y \\<in> rsd_winners R alts agents') =\n                    (\\<forall>i\\<in>agents. R i ?x ?y)\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "from x' pareto winner_iff[of x y] winner_iff[of y x]"], ["proof (chain)\npicking this:\n  x \\<in> rsd_winners R alts agents'\n  x \\<prec>[Pareto R] y\n  \\<lbrakk>x \\<in> rsd_winners R alts agents'; y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (y \\<in> rsd_winners R alts agents') =\n                    (\\<forall>i\\<in>agents. R i x y)\n  \\<lbrakk>y \\<in> rsd_winners R alts agents'; x \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (x \\<in> rsd_winners R alts agents') =\n                    (\\<forall>i\\<in>agents. R i y x)", "have False"], ["proof (prove)\nusing this:\n  x \\<in> rsd_winners R alts agents'\n  x \\<prec>[Pareto R] y\n  \\<lbrakk>x \\<in> rsd_winners R alts agents'; y \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (y \\<in> rsd_winners R alts agents') =\n                    (\\<forall>i\\<in>agents. R i x y)\n  \\<lbrakk>y \\<in> rsd_winners R alts agents'; x \\<in> alts\\<rbrakk>\n  \\<Longrightarrow> (x \\<in> rsd_winners R alts agents') =\n                    (\\<forall>i\\<in>agents. R i y x)\n\ngoal (1 subgoal):\n 1. False", "by (force simp: strongly_preferred_def Pareto_iff)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> set_pmf (RSD R); ?x2 \\<in> pareto_losers R\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       is_pref_profile R \\<Longrightarrow>\n       set_pmf (RSD R) \\<inter> pareto_losers R = {}", "thus \"set_pmf (RSD R) \\<inter> pareto_losers R = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> set_pmf (RSD R); ?x2 \\<in> pareto_losers R\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. set_pmf (RSD R) \\<inter> pareto_losers R = {}", "by blast"], ["proof (state)\nthis:\n  set_pmf (RSD R) \\<inter> pareto_losers R = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Strong strategy-proofness\\<close>"], ["", "text \\<open>\n  Strong strategy-proofness is slightly more difficult to show. We have already shown\n  that the set of RSD winners for the truthful profile is always set-preferred (by the\n  manipulating agent) to the RSD winners for the manipulated profile.\n    This can now be used to show strategy-proofness: We recall that the set of RSD \n  winners is always an indifference class. Therefore, given any fixed alternative @{term \"x::'alt\"}\n  and considering a fixed order of the agents, either all of the RSD winners in the original\n  profile are at least as good as @{term \"x::'alt\"} or none of them are, and, since the original \n  RSD winners are set-preferred to the manipulated ones, none of the RSD winners in the\n  manipulated case are at least as good than @{term \"x::'alt\"} either in that case.\n    This means that for a fixed order of agents, either the probability that the original  \n  outcome is at least as good as @{term \"x::'alt\"} is 1 or the probability that the manipulated\n  outcome is at least as good as @{term \"x::'alt\"} is 0.\n    Therefore, the original lottery is clearly SD-preferred to the manipulated one.\n\\<close>"], ["", "sublocale RSD: strongly_strategyproof_sds agents alts RSD"], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_strategyproof_sds agents alts RSD", "proof (unfold_locales, rule)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "fix R i Ri' x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "assume wf: \"is_pref_profile R\" and i [simp]: \"i \\<in> agents\" and x: \"x \\<in> alts\" and\n         wf': \"total_preorder_on alts Ri'\""], ["proof (state)\nthis:\n  is_pref_profile R\n  i \\<in> agents\n  x \\<in> alts\n  total_preorder_on alts Ri'\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "interpret R: pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "define R' where \"R' = R (i := Ri')\""], ["proof (state)\nthis:\n  R' = R(i := Ri')\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "from wf wf'"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  total_preorder_on alts Ri'", "have \"is_pref_profile R'\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n  total_preorder_on alts Ri'\n\ngoal (1 subgoal):\n 1. is_pref_profile R'", "by (simp add: R'_def R.wf_update)"], ["proof (state)\nthis:\n  is_pref_profile R'\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "then"], ["proof (chain)\npicking this:\n  is_pref_profile R'", "interpret R': pref_profile_wf agents alts R'"], ["proof (prove)\nusing this:\n  is_pref_profile R'\n\ngoal (1 subgoal):\n 1. is_pref_profile R'", "."], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "note wf = wf wf'"], ["proof (state)\nthis:\n  is_pref_profile R\n  total_preorder_on alts Ri'\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "let ?A = \"preferred_alts (R i) x\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "from wf"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  total_preorder_on alts Ri'", "interpret Ri: total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  is_pref_profile R\n  total_preorder_on alts Ri'\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "fix agents'"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "assume agents': \"agents' \\<in> permutations_of_set agents\""], ["proof (state)\nthis:\n  agents' \\<in> permutations_of_set agents\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "from agents'"], ["proof (chain)\npicking this:\n  agents' \\<in> permutations_of_set agents", "have [simp]: \"set agents' = agents\""], ["proof (prove)\nusing this:\n  agents' \\<in> permutations_of_set agents\n\ngoal (1 subgoal):\n 1. set agents' = agents", "by (simp add: permutations_of_set_def)"], ["proof (state)\nthis:\n  set agents' = agents\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "let ?W = \"rsd_winners R alts agents'\" and ?W' = \"rsd_winners R' alts agents'\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "have indiff_set: \"RSD_pareto_eqclass agents alts R ?W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')", "by (rule R.RSD_pareto_eqclass_rsd_winners; simp add: wf)+"], ["proof (state)\nthis:\n  RSD_pareto_eqclass agents alts R (rsd_winners R alts agents')\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "from R.rsd_winners_wf R'.rsd_winners_wf"], ["proof (chain)\npicking this:\n  set ?agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R ?alts' ?agents' \\<subseteq> ?alts'\n  \\<lbrakk>finite alts; ?alts' \\<noteq> {}; set ?agents' \\<subseteq> agents;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R ?alts' ?agents' \\<noteq> {}\n  \\<lbrakk>set ?agents' \\<subseteq> agents; finite alts;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> finite (rsd_winners R ?alts' ?agents')\n  set ?agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R' ?alts' ?agents' \\<subseteq> ?alts'\n  \\<lbrakk>finite alts; ?alts' \\<noteq> {}; set ?agents' \\<subseteq> agents;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R' ?alts' ?agents' \\<noteq> {}\n  \\<lbrakk>set ?agents' \\<subseteq> agents; finite alts;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> finite (rsd_winners R' ?alts' ?agents')", "have winners: \"?W \\<subseteq> alts\" \"?W \\<noteq> {}\" \"finite ?W\" \"?W' \\<subseteq> alts\" \"?W' \\<noteq> {}\" \"finite ?W'\""], ["proof (prove)\nusing this:\n  set ?agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R ?alts' ?agents' \\<subseteq> ?alts'\n  \\<lbrakk>finite alts; ?alts' \\<noteq> {}; set ?agents' \\<subseteq> agents;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R ?alts' ?agents' \\<noteq> {}\n  \\<lbrakk>set ?agents' \\<subseteq> agents; finite alts;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> finite (rsd_winners R ?alts' ?agents')\n  set ?agents' \\<subseteq> agents \\<Longrightarrow>\n  rsd_winners R' ?alts' ?agents' \\<subseteq> ?alts'\n  \\<lbrakk>finite alts; ?alts' \\<noteq> {}; set ?agents' \\<subseteq> agents;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> rsd_winners R' ?alts' ?agents' \\<noteq> {}\n  \\<lbrakk>set ?agents' \\<subseteq> agents; finite alts;\n   ?alts' \\<subseteq> alts\\<rbrakk>\n  \\<Longrightarrow> finite (rsd_winners R' ?alts' ?agents')\n\ngoal (1 subgoal):\n 1. (rsd_winners R alts agents' \\<subseteq> alts &&&\n     rsd_winners R alts agents' \\<noteq> {} &&&\n     finite (rsd_winners R alts agents')) &&&\n    rsd_winners R' alts agents' \\<subseteq> alts &&&\n    rsd_winners R' alts agents' \\<noteq> {} &&&\n    finite (rsd_winners R' alts agents')", "by simp_all"], ["proof (state)\nthis:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "from \\<open>?W \\<noteq> {}\\<close>"], ["proof (chain)\npicking this:\n  rsd_winners R alts agents' \\<noteq> {}", "obtain y where y: \"y \\<in> ?W\""], ["proof (prove)\nusing this:\n  rsd_winners R alts agents' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<in> rsd_winners R alts agents' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y \\<in> rsd_winners R alts agents'\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "with winners"], ["proof (chain)\npicking this:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  y \\<in> rsd_winners R alts agents'", "have [simp]: \"y \\<in> alts\""], ["proof (prove)\nusing this:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  y \\<in> rsd_winners R alts agents'\n\ngoal (1 subgoal):\n 1. y \\<in> alts", "by blast"], ["proof (state)\nthis:\n  y \\<in> alts\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "from wf' i"], ["proof (chain)\npicking this:\n  total_preorder_on alts Ri'\n  i \\<in> agents", "have mono: \"\\<forall>x\\<in>?W'. \\<forall>y\\<in>?W. R i x y\""], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>rsd_winners R' alts agents'.\n       \\<forall>y\\<in>rsd_winners R alts agents'. R i x y", "unfolding R'_def"], ["proof (prove)\nusing this:\n  total_preorder_on alts Ri'\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>rsd_winners (R(i := Ri')) alts agents'.\n       \\<forall>y\\<in>rsd_winners R alts agents'. R i x y", "by (intro R.rsd_winners_manipulation) simp_all"], ["proof (state)\nthis:\n  \\<forall>x\\<in>rsd_winners R' alts agents'.\n     \\<forall>y\\<in>rsd_winners R alts agents'. R i x y\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "have \"lottery_prob (pmf_of_set ?W) ?A \\<ge> lottery_prob (pmf_of_set ?W') ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "proof (cases \"y \\<succeq>[R i] x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)\n 2. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "case True"], ["proof (state)\nthis:\n  R i x y\n\ngoal (2 subgoals):\n 1. R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)\n 2. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "with y RSD_pareto_eqclass_indiff_set[OF indiff_set(1), of i]  winners"], ["proof (chain)\npicking this:\n  y \\<in> rsd_winners R alts agents'\n  \\<lbrakk>i \\<in> agents; ?x \\<in> rsd_winners R alts agents';\n   ?y \\<in> rsd_winners R alts agents'\\<rbrakk>\n  \\<Longrightarrow> R i ?x ?y\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  R i x y", "have \"?W \\<subseteq> preferred_alts (R i) x\""], ["proof (prove)\nusing this:\n  y \\<in> rsd_winners R alts agents'\n  \\<lbrakk>i \\<in> agents; ?x \\<in> rsd_winners R alts agents';\n   ?y \\<in> rsd_winners R alts agents'\\<rbrakk>\n  \\<Longrightarrow> R i ?x ?y\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  R i x y\n\ngoal (1 subgoal):\n 1. rsd_winners R alts agents' \\<subseteq> preferred_alts (R i) x", "by (auto intro: Ri.trans simp: preferred_alts_def)"], ["proof (state)\nthis:\n  rsd_winners R alts agents' \\<subseteq> preferred_alts (R i) x\n\ngoal (2 subgoals):\n 1. R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)\n 2. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "with winners"], ["proof (chain)\npicking this:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  rsd_winners R alts agents' \\<subseteq> preferred_alts (R i) x", "show ?thesis"], ["proof (prove)\nusing this:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  rsd_winners R alts agents' \\<subseteq> preferred_alts (R i) x\n\ngoal (1 subgoal):\n 1. lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "by (subst (2) measure_pmf_of_set) (simp_all add: Int_absorb2)"], ["proof (state)\nthis:\n  lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n   (preferred_alts (R i) x)\n  \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n         (preferred_alts (R i) x)\n\ngoal (1 subgoal):\n 1. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "case False"], ["proof (state)\nthis:\n  \\<not> R i x y\n\ngoal (1 subgoal):\n 1. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "with y mono"], ["proof (chain)\npicking this:\n  y \\<in> rsd_winners R alts agents'\n  \\<forall>x\\<in>rsd_winners R' alts agents'.\n     \\<forall>y\\<in>rsd_winners R alts agents'. R i x y\n  \\<not> R i x y", "have \"?W' \\<inter> preferred_alts (R i) x = {}\""], ["proof (prove)\nusing this:\n  y \\<in> rsd_winners R alts agents'\n  \\<forall>x\\<in>rsd_winners R' alts agents'.\n     \\<forall>y\\<in>rsd_winners R alts agents'. R i x y\n  \\<not> R i x y\n\ngoal (1 subgoal):\n 1. rsd_winners R' alts agents' \\<inter> preferred_alts (R i) x = {}", "by (auto intro: Ri.trans simp: preferred_alts_def)"], ["proof (state)\nthis:\n  rsd_winners R' alts agents' \\<inter> preferred_alts (R i) x = {}\n\ngoal (1 subgoal):\n 1. \\<not> R i x y \\<Longrightarrow>\n    lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "with winners"], ["proof (chain)\npicking this:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  rsd_winners R' alts agents' \\<inter> preferred_alts (R i) x = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  rsd_winners R alts agents' \\<subseteq> alts\n  rsd_winners R alts agents' \\<noteq> {}\n  finite (rsd_winners R alts agents')\n  rsd_winners R' alts agents' \\<subseteq> alts\n  rsd_winners R' alts agents' \\<noteq> {}\n  finite (rsd_winners R' alts agents')\n  rsd_winners R' alts agents' \\<inter> preferred_alts (R i) x = {}\n\ngoal (1 subgoal):\n 1. lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n     (preferred_alts (R i) x)\n    \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n           (preferred_alts (R i) x)", "by (subst (1) measure_pmf_of_set)\n           (simp_all add: Int_absorb2 one_ereal_def measure_nonneg)"], ["proof (state)\nthis:\n  lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n   (preferred_alts (R i) x)\n  \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n         (preferred_alts (R i) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n   (preferred_alts (R i) x)\n  \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n         (preferred_alts (R i) x)\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "hence \"emeasure (measure_pmf (pmf_of_set ?W)) ?A \\<ge> emeasure (measure_pmf (pmf_of_set ?W')) ?A\""], ["proof (prove)\nusing this:\n  lottery_prob (pmf_of_set (rsd_winners R' alts agents'))\n   (preferred_alts (R i) x)\n  \\<le> lottery_prob (pmf_of_set (rsd_winners R alts agents'))\n         (preferred_alts (R i) x)\n\ngoal (1 subgoal):\n 1. emeasure (measure_pmf (pmf_of_set (rsd_winners R' alts agents')))\n     (preferred_alts (R i) x)\n    \\<le> emeasure (measure_pmf (pmf_of_set (rsd_winners R alts agents')))\n           (preferred_alts (R i) x)", "by (simp add: measure_pmf.emeasure_eq_measure)"], ["proof (state)\nthis:\n  emeasure (measure_pmf (pmf_of_set (rsd_winners R' alts agents')))\n   (preferred_alts (R i) x)\n  \\<le> emeasure (measure_pmf (pmf_of_set (rsd_winners R alts agents')))\n         (preferred_alts (R i) x)\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "}"], ["proof (state)\nthis:\n  ?agents'2 \\<in> permutations_of_set agents \\<Longrightarrow>\n  emeasure (measure_pmf (pmf_of_set (rsd_winners R' alts ?agents'2)))\n   (preferred_alts (R i) x)\n  \\<le> emeasure (measure_pmf (pmf_of_set (rsd_winners R alts ?agents'2)))\n         (preferred_alts (R i) x)\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "hence \"emeasure (measure_pmf (RSD R)) ?A \\<ge> emeasure (measure_pmf (RSD R')) ?A\""], ["proof (prove)\nusing this:\n  ?agents'2 \\<in> permutations_of_set agents \\<Longrightarrow>\n  emeasure (measure_pmf (pmf_of_set (rsd_winners R' alts ?agents'2)))\n   (preferred_alts (R i) x)\n  \\<le> emeasure (measure_pmf (pmf_of_set (rsd_winners R alts ?agents'2)))\n         (preferred_alts (R i) x)\n\ngoal (1 subgoal):\n 1. emeasure (measure_pmf (RSD R')) (preferred_alts (R i) x)\n    \\<le> emeasure (measure_pmf (RSD R)) (preferred_alts (R i) x)", "by (auto simp: random_serial_dictatorship_altdef AE_measure_pmf_iff\n             intro!: nn_integral_mono_AE)"], ["proof (state)\nthis:\n  emeasure (measure_pmf (RSD R')) (preferred_alts (R i) x)\n  \\<le> emeasure (measure_pmf (RSD R)) (preferred_alts (R i) x)\n\ngoal (4 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents\n 4. \\<And>R i Ri' x.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'; x \\<in> alts\\<rbrakk>\n       \\<Longrightarrow> lottery_prob (RSD (R(i := Ri')))\n                          (preferred_alts (R i) x)\n                         \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "thus \"lottery_prob (RSD R) ?A \\<ge> lottery_prob (RSD R') ?A\""], ["proof (prove)\nusing this:\n  emeasure (measure_pmf (RSD R')) (preferred_alts (R i) x)\n  \\<le> emeasure (measure_pmf (RSD R)) (preferred_alts (R i) x)\n\ngoal (1 subgoal):\n 1. lottery_prob (RSD R') (preferred_alts (R i) x)\n    \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)", "by (simp add: measure_pmf.emeasure_eq_measure)"], ["proof (state)\nthis:\n  lottery_prob (RSD R') (preferred_alts (R i) x)\n  \\<le> lottery_prob (RSD R) (preferred_alts (R i) x)\n\ngoal (3 subgoals):\n 1. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> is_pref_profile R\n 2. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> total_preorder_on alts Ri'\n 3. \\<And>R i Ri'.\n       \\<lbrakk>is_pref_profile R; i \\<in> agents;\n        total_preorder_on alts Ri'\\<rbrakk>\n       \\<Longrightarrow> i \\<in> agents", "qed"], ["", "end"], ["", "end"]]}