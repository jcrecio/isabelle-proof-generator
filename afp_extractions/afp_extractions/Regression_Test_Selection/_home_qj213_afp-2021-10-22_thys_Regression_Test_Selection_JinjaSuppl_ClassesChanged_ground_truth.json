{"file_name": "/home/qj213/afp-2021-10-22/thys/Regression_Test_Selection/JinjaSuppl/ClassesChanged.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Regression_Test_Selection", "problem_names": ["lemma classes_changed_class_changed[simp]: \"cn \\<in> classes_changed P1 P2 = class_changed P1 P2 cn\"", "lemma classes_changed_self[simp]: \"classes_changed P P = {}\"", "lemma classes_changed_sym: \"classes_changed P P' = classes_changed P' P\"", "lemma classes_changed_class: \"\\<lbrakk> cn \\<notin> classes_changed P P'\\<rbrakk> \\<Longrightarrow> class P cn = class P' cn\"", "lemma classes_changed_class_set: \"\\<lbrakk> S \\<inter> classes_changed P P' = {} \\<rbrakk>\n  \\<Longrightarrow> \\<forall>C \\<in> S. class P C = class P' C\"", "lemma classes_changed_cons_eq:\n \"classes_changed (t # P) P' = (classes_changed P P' - {fst t})\n                     \\<union> (if class_changed [t] P' (fst t) then {fst t} else {})\"", "lemma class_changed_cons:\n \"fst t \\<notin> classes_changed (t#P) (t#P')\"", "lemma classes_changed_cons:\n \"classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\"", "lemma classes_changed_int_Cons:\nassumes \"coll \\<inter> classes_changed P P' = {}\"\nshows \"coll \\<inter> classes_changed (t # P) (t # P') = {}\""], "translations": [["", "lemma classes_changed_class_changed[simp]: \"cn \\<in> classes_changed P1 P2 = class_changed P1 P2 cn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cn \\<in> classes_changed P1 P2) = class_changed P1 P2 cn", "by (simp add: classes_changed_def class_changed_def)"], ["", "lemma classes_changed_self[simp]: \"classes_changed P P = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_changed P P = {}", "by (auto simp: class_changed_def)"], ["", "lemma classes_changed_sym: \"classes_changed P P' = classes_changed P' P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_changed P P' = classes_changed P' P", "by (auto simp: class_changed_def)"], ["", "lemma classes_changed_class: \"\\<lbrakk> cn \\<notin> classes_changed P P'\\<rbrakk> \\<Longrightarrow> class P cn = class P' cn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cn \\<notin> classes_changed P P' \\<Longrightarrow>\n    class P cn = class P' cn", "by (clarsimp simp: class_changed_def)"], ["", "lemma classes_changed_class_set: \"\\<lbrakk> S \\<inter> classes_changed P P' = {} \\<rbrakk>\n  \\<Longrightarrow> \\<forall>C \\<in> S. class P C = class P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<inter> classes_changed P P' = {} \\<Longrightarrow>\n    \\<forall>C\\<in>S. class P C = class P' C", "by (fastforce simp: disjoint_iff_not_equal dest: classes_changed_class)"], ["", "text \"We now relate @{term classes_changed} over two programs to those\n over programs with an added class (such as a test class).\""], ["", "lemma classes_changed_cons_eq:\n \"classes_changed (t # P) P' = (classes_changed P P' - {fst t})\n                     \\<union> (if class_changed [t] P' (fst t) then {fst t} else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_changed (t # P) P' =\n    classes_changed P P' - {fst t} \\<union>\n    (if class_changed [t] P' (fst t) then {fst t} else {})", "by (auto simp: classes_changed_def class_changed_def class_def)"], ["", "lemma class_changed_cons:\n \"fst t \\<notin> classes_changed (t#P) (t#P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed (t # P) (t # P')", "by (simp add: class_changed_def class_def)"], ["", "lemma classes_changed_cons:\n \"classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "proof(cases \"fst t \\<in> classes_changed P P'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst t \\<in> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\n 2. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "case True"], ["proof (state)\nthis:\n  fst t \\<in> classes_changed P P'\n\ngoal (2 subgoals):\n 1. fst t \\<in> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\n 2. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "then"], ["proof (chain)\npicking this:\n  fst t \\<in> classes_changed P P'", "show ?thesis"], ["proof (prove)\nusing this:\n  fst t \\<in> classes_changed P P'\n\ngoal (1 subgoal):\n 1. classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "using class_changed_cons[where t=t and P=P and P'=P']\n    classes_changed_cons_eq[where t=t]"], ["proof (prove)\nusing this:\n  fst t \\<in> classes_changed P P'\n  fst t \\<notin> classes_changed (t # P) (t # P')\n  classes_changed (t # ?P) ?P' =\n  classes_changed ?P ?P' - {fst t} \\<union>\n  (if class_changed [t] ?P' (fst t) then {fst t} else {})\n\ngoal (1 subgoal):\n 1. classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "by (auto simp: class_changed_def class_cons)"], ["proof (state)\nthis:\n  classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\n\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "case False"], ["proof (state)\nthis:\n  fst t \\<notin> classes_changed P P'\n\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "then"], ["proof (chain)\npicking this:\n  fst t \\<notin> classes_changed P P'", "show ?thesis"], ["proof (prove)\nusing this:\n  fst t \\<notin> classes_changed P P'\n\ngoal (1 subgoal):\n 1. classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "using class_changed_cons[where t=t and P=P and P'=P']"], ["proof (prove)\nusing this:\n  fst t \\<notin> classes_changed P P'\n  fst t \\<notin> classes_changed (t # P) (t # P')\n\ngoal (1 subgoal):\n 1. classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}", "by (auto simp: class_changed_def) (metis (no_types, lifting) class_cons)+"], ["proof (state)\nthis:\n  classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_changed_int_Cons:\nassumes \"coll \\<inter> classes_changed P P' = {}\"\nshows \"coll \\<inter> classes_changed (t # P) (t # P') = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coll \\<inter> classes_changed (t # P) (t # P') = {}", "proof(cases \"fst t \\<in> classes_changed P P'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst t \\<in> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}\n 2. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "case True"], ["proof (state)\nthis:\n  fst t \\<in> classes_changed P P'\n\ngoal (2 subgoals):\n 1. fst t \\<in> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}\n 2. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "then"], ["proof (chain)\npicking this:\n  fst t \\<in> classes_changed P P'", "have \"classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}\""], ["proof (prove)\nusing this:\n  fst t \\<in> classes_changed P P'\n\ngoal (1 subgoal):\n 1. classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}", "using classes_changed_cons[where t=t and P=P and P'=P']"], ["proof (prove)\nusing this:\n  fst t \\<in> classes_changed P P'\n  classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\n\ngoal (1 subgoal):\n 1. classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}", "by fastforce"], ["proof (state)\nthis:\n  classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}\n\ngoal (2 subgoals):\n 1. fst t \\<in> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}\n 2. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "then"], ["proof (chain)\npicking this:\n  classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}\n\ngoal (1 subgoal):\n 1. coll \\<inter> classes_changed (t # P) (t # P') = {}", "using assms"], ["proof (prove)\nusing this:\n  classes_changed P P' = classes_changed (t # P) (t # P') \\<union> {fst t}\n  coll \\<inter> classes_changed P P' = {}\n\ngoal (1 subgoal):\n 1. coll \\<inter> classes_changed (t # P) (t # P') = {}", "by simp"], ["proof (state)\nthis:\n  coll \\<inter> classes_changed (t # P) (t # P') = {}\n\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "case False"], ["proof (state)\nthis:\n  fst t \\<notin> classes_changed P P'\n\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "then"], ["proof (chain)\npicking this:\n  fst t \\<notin> classes_changed P P'", "have \"classes_changed P P' = classes_changed (t # P) (t # P')\""], ["proof (prove)\nusing this:\n  fst t \\<notin> classes_changed P P'\n\ngoal (1 subgoal):\n 1. classes_changed P P' = classes_changed (t # P) (t # P')", "using classes_changed_cons[where t=t and P=P and P'=P']"], ["proof (prove)\nusing this:\n  fst t \\<notin> classes_changed P P'\n  classes_changed (t # P) (t # P') = classes_changed P P' - {fst t}\n\ngoal (1 subgoal):\n 1. classes_changed P P' = classes_changed (t # P) (t # P')", "by fastforce"], ["proof (state)\nthis:\n  classes_changed P P' = classes_changed (t # P) (t # P')\n\ngoal (1 subgoal):\n 1. fst t \\<notin> classes_changed P P' \\<Longrightarrow>\n    coll \\<inter> classes_changed (t # P) (t # P') = {}", "then"], ["proof (chain)\npicking this:\n  classes_changed P P' = classes_changed (t # P) (t # P')", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_changed P P' = classes_changed (t # P) (t # P')\n\ngoal (1 subgoal):\n 1. coll \\<inter> classes_changed (t # P) (t # P') = {}", "using assms"], ["proof (prove)\nusing this:\n  classes_changed P P' = classes_changed (t # P) (t # P')\n  coll \\<inter> classes_changed P P' = {}\n\ngoal (1 subgoal):\n 1. coll \\<inter> classes_changed (t # P) (t # P') = {}", "by simp"], ["proof (state)\nthis:\n  coll \\<inter> classes_changed (t # P) (t # P') = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}