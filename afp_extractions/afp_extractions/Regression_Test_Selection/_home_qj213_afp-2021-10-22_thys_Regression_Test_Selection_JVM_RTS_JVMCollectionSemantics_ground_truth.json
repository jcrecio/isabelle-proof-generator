{"file_name": "/home/qj213/afp-2021-10-22/thys/Regression_Test_Selection/JVM_RTS/JVMCollectionSemantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Regression_Test_Selection", "problem_names": ["lemma classes_above_start_state:\nassumes above_xcpts: \"classes_above_xcpts P \\<inter> classes_changed P P' = {}\"\nshows \"start_state P = start_state P'\"", "lemma classes_above_matches_ex_entry:\n \"classes_above P C \\<inter> classes_changed P P' = {}\n  \\<Longrightarrow> matches_ex_entry P C pc xcp = matches_ex_entry P' C pc xcp\"", "lemma classes_above_match_ex_table:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"match_ex_table P C pc es = match_ex_table P' C pc es\"", "lemma classes_above_find_handler:\nassumes \"classes_above P (cname_of h a) \\<inter> classes_changed P P' = {}\"\nshows \"classes_above_frames P frs \\<inter> classes_changed P P' = {}\n  \\<Longrightarrow> find_handler P a h frs sh = find_handler P' a h frs sh\"", "lemma find_handler_classes_above_frames:\n \"find_handler P a h frs sh = (xp',h',frs',sh')\n \\<Longrightarrow> classes_above_frames P frs' \\<subseteq> classes_above_frames P frs\"", "lemma find_handler_pieces:\n \"find_handler P a h frs sh = (xp',h',frs',sh')\n \\<Longrightarrow> h = h' \\<and> sh = sh' \\<and> classes_above_frames P frs' \\<subseteq> classes_above_frames P frs\"", "lemma JVMnaive_csmallD:\n\"(\\<sigma>', cset) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n \\<Longrightarrow> JVMexec_ncollect P \\<sigma> = cset \\<and> \\<sigma>' \\<in> JVMsmall P \\<sigma>\"", "lemma JVMsmart_csmallD:\n\"(\\<sigma>', cset) \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\n \\<Longrightarrow> JVMexec_scollect P \\<sigma> = cset \\<and> \\<sigma>' \\<in> JVMsmall P \\<sigma>\"", "lemma jvm_naive_to_smart_csmall_nstep_last_eq:\n \"\\<lbrakk> (\\<sigma>',cset\\<^sub>n) \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n    (\\<sigma>',cset\\<^sub>n) \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> n;\n    (\\<sigma>',cset\\<^sub>s) \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n' \\<rbrakk>\n  \\<Longrightarrow> n = n'\""], "translations": [["", "lemma classes_above_start_state:\nassumes above_xcpts: \"classes_above_xcpts P \\<inter> classes_changed P P' = {}\"\nshows \"start_state P = start_state P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start_state P = start_state P'", "using assms classes_above_start_heap"], ["proof (prove)\nusing this:\n  classes_above_xcpts P \\<inter> classes_changed P P' = JVMcollect_id\n  classes_above_xcpts ?P \\<inter> classes_changed ?P ?P' =\n  JVMcollect_id \\<Longrightarrow>\n  start_heap ?P = start_heap ?P'\n\ngoal (1 subgoal):\n 1. start_state P = start_state P'", "by(simp add: start_state_def)"], ["", "lemma classes_above_matches_ex_entry:\n \"classes_above P C \\<inter> classes_changed P P' = {}\n  \\<Longrightarrow> matches_ex_entry P C pc xcp = matches_ex_entry P' C pc xcp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    matches_ex_entry P C pc xcp = matches_ex_entry P' C pc xcp", "using classes_above_subcls classes_above_subcls2"], ["proof (prove)\nusing this:\n  \\<lbrakk>classes_above ?P ?C \\<inter> classes_changed ?P ?P' =\n           JVMcollect_id;\n   ?P \\<turnstile> ?C \\<preceq>\\<^sup>* ?C'\\<rbrakk>\n  \\<Longrightarrow> ?P' \\<turnstile> ?C \\<preceq>\\<^sup>* ?C'\n  \\<lbrakk>classes_above ?P ?C \\<inter> classes_changed ?P ?P' =\n           JVMcollect_id;\n   ?P' \\<turnstile> ?C \\<preceq>\\<^sup>* ?C'\\<rbrakk>\n  \\<Longrightarrow> ?P \\<turnstile> ?C \\<preceq>\\<^sup>* ?C'\n\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    matches_ex_entry P C pc xcp = matches_ex_entry P' C pc xcp", "by(auto simp: matches_ex_entry_def)"], ["", "lemma classes_above_match_ex_table:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"match_ex_table P C pc es = match_ex_table P' C pc es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_ex_table P C pc es = match_ex_table P' C pc es", "using classes_above_matches_ex_entry[OF assms]"], ["proof (prove)\nusing this:\n  matches_ex_entry P C ?pc ?xcp = matches_ex_entry P' C ?pc ?xcp\n\ngoal (1 subgoal):\n 1. match_ex_table P C pc es = match_ex_table P' C pc es", "proof(induct es)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>pc xcp.\n        matches_ex_entry P C pc xcp =\n        matches_ex_entry P' C pc xcp) \\<Longrightarrow>\n    match_ex_table P C pc [] = match_ex_table P' C pc []\n 2. \\<And>a es.\n       \\<lbrakk>(\\<And>pc xcp.\n                    matches_ex_entry P C pc xcp =\n                    matches_ex_entry P' C pc xcp) \\<Longrightarrow>\n                match_ex_table P C pc es = match_ex_table P' C pc es;\n        \\<And>pc xcp.\n           matches_ex_entry P C pc xcp =\n           matches_ex_entry P' C pc xcp\\<rbrakk>\n       \\<Longrightarrow> match_ex_table P C pc (a # es) =\n                         match_ex_table P' C pc (a # es)", "qed(auto)"], ["", "lemma classes_above_find_handler:\nassumes \"classes_above P (cname_of h a) \\<inter> classes_changed P P' = {}\"\nshows \"classes_above_frames P frs \\<inter> classes_changed P P' = {}\n  \\<Longrightarrow> find_handler P a h frs sh = find_handler P' a h frs sh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above_frames P frs \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    find_handler P a h frs sh = find_handler P' a h frs sh", "proof(induct frs)"], ["proof (state)\ngoal (2 subgoals):\n 1. classes_above_frames P [] \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    find_handler P a h [] sh = find_handler P' a h [] sh\n 2. \\<And>aa frs.\n       \\<lbrakk>classes_above_frames P frs \\<inter> classes_changed P P' =\n                JVMcollect_id \\<Longrightarrow>\n                find_handler P a h frs sh = find_handler P' a h frs sh;\n        classes_above_frames P (aa # frs) \\<inter> classes_changed P P' =\n        JVMcollect_id\\<rbrakk>\n       \\<Longrightarrow> find_handler P a h (aa # frs) sh =\n                         find_handler P' a h (aa # frs) sh", "case (Cons fr' frs')"], ["proof (state)\nthis:\n  classes_above_frames P frs' \\<inter> classes_changed P P' =\n  JVMcollect_id \\<Longrightarrow>\n  find_handler P a h frs' sh = find_handler P' a h frs' sh\n  classes_above_frames P (fr' # frs') \\<inter> classes_changed P P' =\n  JVMcollect_id\n\ngoal (2 subgoals):\n 1. classes_above_frames P [] \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    find_handler P a h [] sh = find_handler P' a h [] sh\n 2. \\<And>aa frs.\n       \\<lbrakk>classes_above_frames P frs \\<inter> classes_changed P P' =\n                JVMcollect_id \\<Longrightarrow>\n                find_handler P a h frs sh = find_handler P' a h frs sh;\n        classes_above_frames P (aa # frs) \\<inter> classes_changed P P' =\n        JVMcollect_id\\<rbrakk>\n       \\<Longrightarrow> find_handler P a h (aa # frs) sh =\n                         find_handler P' a h (aa # frs) sh", "obtain stk loc C M pc ics where fr': \"fr' = (stk,loc,C,M,pc,ics)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>stk loc C M pc ics.\n        fr' = (stk, loc, C, M, pc, ics) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases fr')"], ["proof (state)\nthis:\n  fr' = (stk, loc, C, M, pc, ics)\n\ngoal (2 subgoals):\n 1. classes_above_frames P [] \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    find_handler P a h [] sh = find_handler P' a h [] sh\n 2. \\<And>aa frs.\n       \\<lbrakk>classes_above_frames P frs \\<inter> classes_changed P P' =\n                JVMcollect_id \\<Longrightarrow>\n                find_handler P a h frs sh = find_handler P' a h frs sh;\n        classes_above_frames P (aa # frs) \\<inter> classes_changed P P' =\n        JVMcollect_id\\<rbrakk>\n       \\<Longrightarrow> find_handler P a h (aa # frs) sh =\n                         find_handler P' a h (aa # frs) sh", "with Cons"], ["proof (chain)\npicking this:\n  classes_above_frames P frs' \\<inter> classes_changed P P' =\n  JVMcollect_id \\<Longrightarrow>\n  find_handler P a h frs' sh = find_handler P' a h frs' sh\n  classes_above_frames P (fr' # frs') \\<inter> classes_changed P P' =\n  JVMcollect_id\n  fr' = (stk, loc, C, M, pc, ics)", "have\n       intC: \"classes_above P C \\<inter> classes_changed P P' = {}\"\n   and int: \"classes_above_frames P frs' \\<inter> classes_changed P P' = {}\""], ["proof (prove)\nusing this:\n  classes_above_frames P frs' \\<inter> classes_changed P P' =\n  JVMcollect_id \\<Longrightarrow>\n  find_handler P a h frs' sh = find_handler P' a h frs' sh\n  classes_above_frames P (fr' # frs') \\<inter> classes_changed P P' =\n  JVMcollect_id\n  fr' = (stk, loc, C, M, pc, ics)\n\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' = JVMcollect_id &&&\n    classes_above_frames P frs' \\<inter> classes_changed P P' =\n    JVMcollect_id", "by auto"], ["proof (state)\nthis:\n  classes_above P C \\<inter> classes_changed P P' = JVMcollect_id\n  classes_above_frames P frs' \\<inter> classes_changed P P' = JVMcollect_id\n\ngoal (2 subgoals):\n 1. classes_above_frames P [] \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    find_handler P a h [] sh = find_handler P' a h [] sh\n 2. \\<And>aa frs.\n       \\<lbrakk>classes_above_frames P frs \\<inter> classes_changed P P' =\n                JVMcollect_id \\<Longrightarrow>\n                find_handler P a h frs sh = find_handler P' a h frs sh;\n        classes_above_frames P (aa # frs) \\<inter> classes_changed P P' =\n        JVMcollect_id\\<rbrakk>\n       \\<Longrightarrow> find_handler P a h (aa # frs) sh =\n                         find_handler P' a h (aa # frs) sh", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h (fr' # frs') sh = find_handler P' a h (fr' # frs') sh", "using Cons fr' int classes_above_method[OF intC]\n    classes_above_match_ex_table[OF assms(1)]"], ["proof (prove)\nusing this:\n  classes_above_frames P frs' \\<inter> classes_changed P P' =\n  JVMcollect_id \\<Longrightarrow>\n  find_handler P a h frs' sh = find_handler P' a h frs' sh\n  classes_above_frames P (fr' # frs') \\<inter> classes_changed P P' =\n  JVMcollect_id\n  fr' = (stk, loc, C, M, pc, ics)\n  classes_above_frames P frs' \\<inter> classes_changed P P' = JVMcollect_id\n  method P C ?M = method P' C ?M\n  match_ex_table P (cname_of h a) ?pc ?es =\n  match_ex_table P' (cname_of h a) ?pc ?es\n\ngoal (1 subgoal):\n 1. find_handler P a h (fr' # frs') sh = find_handler P' a h (fr' # frs') sh", "by(auto split: bool.splits)"], ["proof (state)\nthis:\n  find_handler P a h (fr' # frs') sh = find_handler P' a h (fr' # frs') sh\n\ngoal (1 subgoal):\n 1. classes_above_frames P [] \\<inter> classes_changed P P' =\n    JVMcollect_id \\<Longrightarrow>\n    find_handler P a h [] sh = find_handler P' a h [] sh", "qed(simp)"], ["", "lemma find_handler_classes_above_frames:\n \"find_handler P a h frs sh = (xp',h',frs',sh')\n \\<Longrightarrow> classes_above_frames P frs' \\<subseteq> classes_above_frames P frs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P frs", "proof(induct frs)"], ["proof (state)\ngoal (2 subgoals):\n 1. find_handler P a h [] sh = (xp', h', frs', sh') \\<Longrightarrow>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P []\n 2. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                classes_above_frames P frs'\n                \\<subseteq> classes_above_frames P frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> classes_above_frames P frs'\n                         \\<subseteq> classes_above_frames P (aa # frs)", "case (Cons f1 frs1)"], ["proof (state)\nthis:\n  find_handler P a h frs1 sh = (xp', h', frs', sh') \\<Longrightarrow>\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P frs1\n  find_handler P a h (f1 # frs1) sh = (xp', h', frs', sh')\n\ngoal (2 subgoals):\n 1. find_handler P a h [] sh = (xp', h', frs', sh') \\<Longrightarrow>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P []\n 2. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                classes_above_frames P frs'\n                \\<subseteq> classes_above_frames P frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> classes_above_frames P frs'\n                         \\<subseteq> classes_above_frames P (aa # frs)", "then"], ["proof (chain)\npicking this:\n  find_handler P a h frs1 sh = (xp', h', frs', sh') \\<Longrightarrow>\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P frs1\n  find_handler P a h (f1 # frs1) sh = (xp', h', frs', sh')", "obtain stk loc C M pc ics where f1: \"f1 = (stk,loc,C,M,pc,ics)\""], ["proof (prove)\nusing this:\n  find_handler P a h frs1 sh = (xp', h', frs', sh') \\<Longrightarrow>\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P frs1\n  find_handler P a h (f1 # frs1) sh = (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. (\\<And>stk loc C M pc ics.\n        f1 = (stk, loc, C, M, pc, ics) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases f1)"], ["proof (state)\nthis:\n  f1 = (stk, loc, C, M, pc, ics)\n\ngoal (2 subgoals):\n 1. find_handler P a h [] sh = (xp', h', frs', sh') \\<Longrightarrow>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P []\n 2. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                classes_above_frames P frs'\n                \\<subseteq> classes_above_frames P frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> classes_above_frames P frs'\n                         \\<subseteq> classes_above_frames P (aa # frs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)", "proof(cases \"match_ex_table P (cname_of h a) pc (ex_table_of P C M)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n    None \\<Longrightarrow>\n    classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)\n 2. \\<And>aa.\n       match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n       \\<lfloor>aa\\<rfloor> \\<Longrightarrow>\n       classes_above_frames P frs'\n       \\<subseteq> classes_above_frames P (f1 # frs1)", "case None"], ["proof (state)\nthis:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) = None\n\ngoal (2 subgoals):\n 1. match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n    None \\<Longrightarrow>\n    classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)\n 2. \\<And>aa.\n       match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n       \\<lfloor>aa\\<rfloor> \\<Longrightarrow>\n       classes_above_frames P frs'\n       \\<subseteq> classes_above_frames P (f1 # frs1)", "then"], ["proof (chain)\npicking this:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) = None\n\ngoal (1 subgoal):\n 1. classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)", "using f1 None Cons"], ["proof (prove)\nusing this:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) = None\n  f1 = (stk, loc, C, M, pc, ics)\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) = None\n  find_handler P a h frs1 sh = (xp', h', frs', sh') \\<Longrightarrow>\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P frs1\n  find_handler P a h (f1 # frs1) sh = (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)", "by(auto split: bool.splits list.splits init_call_status.splits)"], ["proof (state)\nthis:\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P (f1 # frs1)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n       \\<lfloor>aa\\<rfloor> \\<Longrightarrow>\n       classes_above_frames P frs'\n       \\<subseteq> classes_above_frames P (f1 # frs1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n       \\<lfloor>aa\\<rfloor> \\<Longrightarrow>\n       classes_above_frames P frs'\n       \\<subseteq> classes_above_frames P (f1 # frs1)", "case (Some a)"], ["proof (state)\nthis:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n  \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n       \\<lfloor>aa\\<rfloor> \\<Longrightarrow>\n       classes_above_frames P frs'\n       \\<subseteq> classes_above_frames P (f1 # frs1)", "then"], ["proof (chain)\npicking this:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n  \\<lfloor>a\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n  \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)", "using f1 Some Cons"], ["proof (prove)\nusing this:\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n  \\<lfloor>a\\<rfloor>\n  f1 = (stk, loc, C, M, pc, ics)\n  match_ex_table P (cname_of h a) pc (ex_table_of P C M) =\n  \\<lfloor>a\\<rfloor>\n  find_handler P a h frs1 sh = (xp', h', frs', sh') \\<Longrightarrow>\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P frs1\n  find_handler P a h (f1 # frs1) sh = (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. classes_above_frames P frs'\n    \\<subseteq> classes_above_frames P (f1 # frs1)", "by auto"], ["proof (state)\nthis:\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P (f1 # frs1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  classes_above_frames P frs' \\<subseteq> classes_above_frames P (f1 # frs1)\n\ngoal (1 subgoal):\n 1. find_handler P a h [] sh = (xp', h', frs', sh') \\<Longrightarrow>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P []", "qed(simp)"], ["", "lemma find_handler_pieces:\n \"find_handler P a h frs sh = (xp',h',frs',sh')\n \\<Longrightarrow> h = h' \\<and> sh = sh' \\<and> classes_above_frames P frs' \\<subseteq> classes_above_frames P frs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n    h = h' \\<and>\n    sh = sh' \\<and>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P frs", "using find_handler_classes_above_frames"], ["proof (prove)\nusing this:\n  find_handler ?P ?a ?h ?frs ?sh =\n  (?xp', ?h', ?frs', ?sh') \\<Longrightarrow>\n  classes_above_frames ?P ?frs' \\<subseteq> classes_above_frames ?P ?frs\n\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n    h = h' \\<and>\n    sh = sh' \\<and>\n    classes_above_frames P frs' \\<subseteq> classes_above_frames P frs", "by(auto dest: find_handler_heap find_handler_sheap)"], ["", "(**************************************)"], ["", "subsection \"Naive RTS algorithm\""], ["", "fun JVMinstr_ncollect ::\n \"[jvm_prog, instr, heap, val list] \\<Rightarrow> cname set\" where\n\"JVMinstr_ncollect P (New C) h stk = classes_above P C\" |\n\"JVMinstr_ncollect P (Getfield F C) h stk =\n  (if (hd stk) = Null then {}\n   else classes_above P (cname_of h (the_Addr (hd stk))))\" |\n\"JVMinstr_ncollect P (Getstatic C F D) h stk = classes_above P C\" |\n\"JVMinstr_ncollect P (Putfield F C) h stk =\n  (if (hd (tl stk)) = Null then {}\n   else classes_above P (cname_of h (the_Addr (hd (tl stk)))))\" |\n\"JVMinstr_ncollect P (Putstatic C F D) h stk = classes_above P C\" |\n\"JVMinstr_ncollect P (Checkcast C) h stk =\n  (if (hd stk) = Null then {}\n   else classes_above P (cname_of h (the_Addr (hd stk))))\" |\n\"JVMinstr_ncollect P (Invoke M n) h stk =\n  (if (stk ! n) = Null then {}\n   else classes_above P (cname_of h (the_Addr (stk ! n))))\" |\n\"JVMinstr_ncollect P (Invokestatic C M n) h stk = classes_above P C\" |\n\"JVMinstr_ncollect P Throw h stk =\n  (if (hd stk) = Null then {}\n   else classes_above P (cname_of h (the_Addr (hd stk))))\" |\n\"JVMinstr_ncollect P _ h stk = {}\""], ["", "fun JVMstep_ncollect ::\n \"[jvm_prog, heap, val list, cname, mname, pc, init_call_status] \\<Rightarrow> cname set\" where\n\"JVMstep_ncollect P h stk C M pc (Calling C' Cs) = classes_above P C'\" |\n\"JVMstep_ncollect P h stk C M pc (Called (C'#Cs))\n = classes_above P C' \\<union> classes_above P (fst(method P C' clinit))\" |\n\"JVMstep_ncollect P h stk C M pc (Throwing Cs a) = classes_above P (cname_of h a)\" |\n\"JVMstep_ncollect P h stk C M pc ics = JVMinstr_ncollect P (instrs_of P C M ! pc) h stk\"\n\n\\<comment> \\<open> naive collection function \\<close>"], ["", "fun JVMexec_ncollect :: \"jvm_prog \\<Rightarrow> jvm_state \\<Rightarrow> cname set\" where\n\"JVMexec_ncollect P (None, h, (stk,loc,C,M,pc,ics)#frs, sh) =\n   (JVMstep_ncollect P h stk C M pc ics\n       \\<union> classes_above P C \\<union> classes_above_frames P frs \\<union> classes_above_xcpts P\n   )\"\n| \"JVMexec_ncollect P _ = {}\""], ["", "(****)"], ["", "fun JVMNaiveCollect :: \"jvm_prog \\<Rightarrow> jvm_state \\<Rightarrow> jvm_state \\<Rightarrow> cname set\" where\n\"JVMNaiveCollect P \\<sigma> \\<sigma>' = JVMexec_ncollect P \\<sigma>\""], ["", "interpretation JVMNaiveCollectionSemantics:\n  CollectionSemantics JVMsmall JVMendset JVMNaiveCollect JVMcombine JVMcollect_id"], ["proof (prove)\ngoal (1 subgoal):\n 1. CollectionSemantics JVMsmall JVMendset JVMcombine JVMcollect_id", "by unfold_locales auto"], ["", "(**************************************)"], ["", "subsection \"Smarter RTS algorithm\""], ["", "fun JVMinstr_scollect ::\n \"[jvm_prog, instr] \\<Rightarrow> cname set\" where\n\"JVMinstr_scollect P (Getstatic C F D)\n = (if \\<not>(\\<exists>t. P \\<turnstile> C has F,Static:t in D) then classes_above P C\n    else classes_between P C D - {D})\" |\n\"JVMinstr_scollect P (Putstatic C F D)\n = (if \\<not>(\\<exists>t. P \\<turnstile> C has F,Static:t in D) then classes_above P C\n    else classes_between P C D - {D})\" |\n\"JVMinstr_scollect P (Invokestatic C M n)\n = (if \\<not>(\\<exists>Ts T m D. P \\<turnstile> C sees M,Static:Ts \\<rightarrow> T = m in D) then classes_above P C\n    else classes_between P C (fst(method P C M)) - {fst(method P C M)})\" |\n\"JVMinstr_scollect P _ = {}\""], ["", "fun JVMstep_scollect ::\n \"[jvm_prog, instr, init_call_status] \\<Rightarrow> cname set\" where\n\"JVMstep_scollect P i (Calling C' Cs) = {C'}\" |\n\"JVMstep_scollect P i (Called (C'#Cs)) = {}\" |\n\"JVMstep_scollect P i (Throwing Cs a) = {}\" |\n\"JVMstep_scollect P i ics = JVMinstr_scollect P i\"\n\n\\<comment> \\<open> smarter collection function \\<close>"], ["", "fun JVMexec_scollect :: \"jvm_prog \\<Rightarrow> jvm_state \\<Rightarrow> cname set\" where\n\"JVMexec_scollect P (None, h, (stk,loc,C,M,pc,ics)#frs, sh) =\n   JVMstep_scollect P (instrs_of P C M ! pc) ics\"\n| \"JVMexec_scollect P _ = {}\""], ["", "(****)"], ["", "fun JVMSmartCollect :: \"jvm_prog \\<Rightarrow> jvm_state \\<Rightarrow> jvm_state \\<Rightarrow> cname set\" where\n\"JVMSmartCollect P \\<sigma> \\<sigma>' = JVMexec_scollect P \\<sigma>\""], ["", "interpretation JVMSmartCollectionSemantics:\n  CollectionSemantics JVMsmall JVMendset JVMSmartCollect JVMcombine JVMcollect_id"], ["proof (prove)\ngoal (1 subgoal):\n 1. CollectionSemantics JVMsmall JVMendset JVMcombine JVMcollect_id", "by unfold_locales"], ["", "(***********************************************)"], ["", "subsection \"A few lemmas using the instantiations\""], ["", "lemma JVMnaive_csmallD:\n\"(\\<sigma>', cset) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n \\<Longrightarrow> JVMexec_ncollect P \\<sigma> = cset \\<and> \\<sigma>' \\<in> JVMsmall P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', cset)\n    \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma> \\<Longrightarrow>\n    JVMexec_ncollect P \\<sigma> = cset \\<and>\n    \\<sigma>' \\<in> JVMsmall P \\<sigma>", "by(simp add: JVMNaiveCollectionSemantics.csmall_def)"], ["", "lemma JVMsmart_csmallD:\n\"(\\<sigma>', cset) \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\n \\<Longrightarrow> JVMexec_scollect P \\<sigma> = cset \\<and> \\<sigma>' \\<in> JVMsmall P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', cset)\n    \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma> \\<Longrightarrow>\n    JVMexec_scollect P \\<sigma> = cset \\<and>\n    \\<sigma>' \\<in> JVMsmall P \\<sigma>", "by(simp add: JVMSmartCollectionSemantics.csmall_def)"], ["", "lemma jvm_naive_to_smart_csmall_nstep_last_eq:\n \"\\<lbrakk> (\\<sigma>',cset\\<^sub>n) \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n    (\\<sigma>',cset\\<^sub>n) \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> n;\n    (\\<sigma>',cset\\<^sub>s) \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n' \\<rbrakk>\n  \\<Longrightarrow> n = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n             \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n     (\\<sigma>', cset\\<^sub>n)\n     \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> n;\n     (\\<sigma>', cset\\<^sub>s)\n     \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\\<rbrakk>\n    \\<Longrightarrow> n = n'", "proof(induct n arbitrary: n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> 0;\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> 0 = n'\n 2. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "case 0"], ["proof (state)\nthis:\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> 0\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n\ngoal (2 subgoals):\n 1. \\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> 0;\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> 0 = n'\n 2. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "have \"\\<sigma>' = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' = \\<sigma>", "using \"0.prems\"(2) JVMNaiveCollectionSemantics.csmall_nstep_base"], ["proof (prove)\nusing this:\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> 0\n  JVMNaiveCollectionSemantics.csmall_nstep ?P ?\\<sigma> 0 =\n  {(?\\<sigma>, JVMcollect_id)}\n\ngoal (1 subgoal):\n 1. \\<sigma>' = \\<sigma>", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' = \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> 0;\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> 0 = n'\n 2. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "then"], ["proof (chain)\npicking this:\n  \\<sigma>' = \\<sigma>", "have endset: \"\\<sigma> \\<in> JVMendset\""], ["proof (prove)\nusing this:\n  \\<sigma>' = \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> JVMendset", "using \"0.prems\"(1) JVMNaiveCollectionSemantics.cbigD"], ["proof (prove)\nusing this:\n  \\<sigma>' = \\<sigma>\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (?\\<sigma>', ?coll')\n  \\<in> JVMNaiveCollectionSemantics.cbig ?P ?\\<sigma> \\<Longrightarrow>\n  \\<exists>n.\n     (?\\<sigma>', ?coll')\n     \\<in> JVMNaiveCollectionSemantics.csmall_nstep ?P ?\\<sigma> n \\<and>\n     ?\\<sigma>' \\<in> JVMendset\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> JVMendset", "by blast"], ["proof (state)\nthis:\n  \\<sigma> \\<in> JVMendset\n\ngoal (2 subgoals):\n 1. \\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> 0;\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> 0 = n'\n 2. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = n'", "proof(cases n')"], ["proof (state)\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> 0 = n'\n 2. \\<And>nat. n' = Suc nat \\<Longrightarrow> 0 = n'", "case Suc"], ["proof (state)\nthis:\n  n' = Suc nat_\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> 0 = n'\n 2. \\<And>nat. n' = Suc nat \\<Longrightarrow> 0 = n'", "then"], ["proof (chain)\npicking this:\n  n' = Suc nat_", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = Suc nat_\n\ngoal (1 subgoal):\n 1. 0 = n'", "using \"0.prems\"(3) JVMSmartCollectionSemantics.csmall_nstep_Suc_nend\n      endset"], ["proof (prove)\nusing this:\n  n' = Suc nat_\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n  ?o'\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep ?P ?\\<sigma>\n         (Suc ?n1.0) \\<Longrightarrow>\n  ?\\<sigma> \\<notin> JVMendset\n  \\<sigma> \\<in> JVMendset\n\ngoal (1 subgoal):\n 1. 0 = n'", "by blast"], ["proof (state)\nthis:\n  0 = n'\n\ngoal (1 subgoal):\n 1. n' = 0 \\<Longrightarrow> 0 = n'", "qed(simp)"], ["proof (state)\nthis:\n  0 = n'\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "case (Suc n1)"], ["proof (state)\nthis:\n  \\<lbrakk>(?\\<sigma>', ?cset\\<^sub>n)\n           \\<in> JVMNaiveCollectionSemantics.cbig P ?\\<sigma>;\n   (?\\<sigma>', ?cset\\<^sub>n)\n   \\<in> JVMNaiveCollectionSemantics.csmall_nstep P ?\\<sigma> n1;\n   (?\\<sigma>', ?cset\\<^sub>s)\n   \\<in> JVMSmartCollectionSemantics.csmall_nstep P ?\\<sigma> ?n'\\<rbrakk>\n  \\<Longrightarrow> n1 = ?n'\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n1)\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?\\<sigma>', ?cset\\<^sub>n)\n           \\<in> JVMNaiveCollectionSemantics.cbig P ?\\<sigma>;\n   (?\\<sigma>', ?cset\\<^sub>n)\n   \\<in> JVMNaiveCollectionSemantics.csmall_nstep P ?\\<sigma> n1;\n   (?\\<sigma>', ?cset\\<^sub>s)\n   \\<in> JVMSmartCollectionSemantics.csmall_nstep P ?\\<sigma> ?n'\\<rbrakk>\n  \\<Longrightarrow> n1 = ?n'\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n1)\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'", "have endset: \"\\<sigma>' \\<in> JVMendset\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?\\<sigma>', ?cset\\<^sub>n)\n           \\<in> JVMNaiveCollectionSemantics.cbig P ?\\<sigma>;\n   (?\\<sigma>', ?cset\\<^sub>n)\n   \\<in> JVMNaiveCollectionSemantics.csmall_nstep P ?\\<sigma> n1;\n   (?\\<sigma>', ?cset\\<^sub>s)\n   \\<in> JVMSmartCollectionSemantics.csmall_nstep P ?\\<sigma> ?n'\\<rbrakk>\n  \\<Longrightarrow> n1 = ?n'\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n1)\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> JVMendset", "using Suc.prems(1) JVMNaiveCollectionSemantics.cbigD"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?\\<sigma>', ?cset\\<^sub>n)\n           \\<in> JVMNaiveCollectionSemantics.cbig P ?\\<sigma>;\n   (?\\<sigma>', ?cset\\<^sub>n)\n   \\<in> JVMNaiveCollectionSemantics.csmall_nstep P ?\\<sigma> n1;\n   (?\\<sigma>', ?cset\\<^sub>s)\n   \\<in> JVMSmartCollectionSemantics.csmall_nstep P ?\\<sigma> ?n'\\<rbrakk>\n  \\<Longrightarrow> n1 = ?n'\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n1)\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n  (\\<sigma>', cset\\<^sub>n)\n  \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>\n  (?\\<sigma>', ?coll')\n  \\<in> JVMNaiveCollectionSemantics.cbig ?P ?\\<sigma> \\<Longrightarrow>\n  \\<exists>n.\n     (?\\<sigma>', ?coll')\n     \\<in> JVMNaiveCollectionSemantics.csmall_nstep ?P ?\\<sigma> n \\<and>\n     ?\\<sigma>' \\<in> JVMendset\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> JVMendset", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> JVMendset\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "have nend: \"\\<sigma> \\<notin> JVMendset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<notin> JVMendset", "using JVMNaiveCollectionSemantics.csmall_nstep_Suc_nend[OF Suc.prems(2)]"], ["proof (prove)\nusing this:\n  \\<sigma> \\<notin> JVMendset\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<notin> JVMendset", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<notin> JVMendset\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "then"], ["proof (chain)\npicking this:\n  \\<sigma> \\<notin> JVMendset", "have neq: \"\\<sigma>' \\<noteq> \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<sigma> \\<notin> JVMendset\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<noteq> \\<sigma>", "using endset"], ["proof (prove)\nusing this:\n  \\<sigma> \\<notin> JVMendset\n  \\<sigma>' \\<in> JVMendset\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<noteq> \\<sigma>", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' \\<noteq> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "obtain \\<sigma>1 cset cset1 where \\<sigma>1: \"(\\<sigma>1,cset1) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\"\n     \"cset\\<^sub>n = cset1 \\<union> cset\" \"(\\<sigma>',cset) \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 cset1 cset.\n        \\<lbrakk>(\\<sigma>1, cset1)\n                 \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>;\n         cset\\<^sub>n = JVMcombine cset1 cset;\n         (\\<sigma>', cset)\n         \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1\n                n1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using JVMNaiveCollectionSemantics.csmall_nstep_SucD[OF Suc.prems(2)]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 coll1.\n     (\\<sigma>1, coll1)\n     \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma> \\<and>\n     (\\<exists>coll.\n         cset\\<^sub>n = JVMcombine coll1 coll \\<and>\n         (\\<sigma>', coll)\n         \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 cset1 cset.\n        \\<lbrakk>(\\<sigma>1, cset1)\n                 \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>;\n         cset\\<^sub>n = JVMcombine cset1 cset;\n         (\\<sigma>', cset)\n         \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1\n                n1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  (\\<sigma>1, cset1) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>n = JVMcombine cset1 cset\n  (\\<sigma>', cset)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "then"], ["proof (chain)\npicking this:\n  (\\<sigma>1, cset1) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>n = JVMcombine cset1 cset\n  (\\<sigma>', cset)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1", "have cbig: \"(\\<sigma>',cset) \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>1\""], ["proof (prove)\nusing this:\n  (\\<sigma>1, cset1) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>n = JVMcombine cset1 cset\n  (\\<sigma>', cset)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1\n\ngoal (1 subgoal):\n 1. (\\<sigma>', cset) \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>1", "using endset"], ["proof (prove)\nusing this:\n  (\\<sigma>1, cset1) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>n = JVMcombine cset1 cset\n  (\\<sigma>', cset)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1\n  \\<sigma>' \\<in> JVMendset\n\ngoal (1 subgoal):\n 1. (\\<sigma>', cset) \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>1", "by(auto simp: JVMNaiveCollectionSemantics.cbig_def)"], ["proof (state)\nthis:\n  (\\<sigma>', cset) \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<And>n n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n       \\<lbrakk>\\<And>n' \\<sigma> \\<sigma>' cset\\<^sub>n cset\\<^sub>s.\n                   \\<lbrakk>(\\<sigma>', cset\\<^sub>n)\n                            \\<in> JVMNaiveCollectionSemantics.cbig P\n                                   \\<sigma>;\n                    (\\<sigma>', cset\\<^sub>n)\n                    \\<in> JVMNaiveCollectionSemantics.csmall_nstep P\n                           \\<sigma> n;\n                    (\\<sigma>', cset\\<^sub>s)\n                    \\<in> JVMSmartCollectionSemantics.csmall_nstep P\n                           \\<sigma> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.cbig P \\<sigma>;\n        (\\<sigma>', cset\\<^sub>n)\n        \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma> (Suc n);\n        (\\<sigma>', cset\\<^sub>s)\n        \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>\n               n'\\<rbrakk>\n       \\<Longrightarrow> Suc n = n'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n1 = n'", "proof(cases n')"], ["proof (state)\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> Suc n1 = n'\n 2. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "case 0"], ["proof (state)\nthis:\n  n' = 0\n\ngoal (2 subgoals):\n 1. n' = 0 \\<Longrightarrow> Suc n1 = n'\n 2. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "then"], ["proof (chain)\npicking this:\n  n' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = 0\n\ngoal (1 subgoal):\n 1. Suc n1 = n'", "using neq Suc.prems(3) JVMSmartCollectionSemantics.csmall_nstep_base"], ["proof (prove)\nusing this:\n  n' = 0\n  \\<sigma>' \\<noteq> \\<sigma>\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n  JVMSmartCollectionSemantics.csmall_nstep ?P ?\\<sigma> 0 =\n  {(?\\<sigma>, JVMcollect_id)}\n\ngoal (1 subgoal):\n 1. Suc n1 = n'", "by blast"], ["proof (state)\nthis:\n  Suc n1 = n'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "case Suc': (Suc n1')"], ["proof (state)\nthis:\n  n' = Suc n1'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "then"], ["proof (chain)\npicking this:\n  n' = Suc n1'", "obtain \\<sigma>1' cset2 cset1' where \\<sigma>1': \"(\\<sigma>1',cset1') \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\"\n      \"cset\\<^sub>s = cset1' \\<union> cset2\" \"(\\<sigma>',cset2) \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1' n1'\""], ["proof (prove)\nusing this:\n  n' = Suc n1'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' cset1' cset2.\n        \\<lbrakk>(\\<sigma>1', cset1')\n                 \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>;\n         cset\\<^sub>s = JVMcombine cset1' cset2;\n         (\\<sigma>', cset2)\n         \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1'\n                n1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using JVMSmartCollectionSemantics.csmall_nstep_SucD[where \\<sigma>=\\<sigma> and \\<sigma>'=\\<sigma>' and coll'=cset\\<^sub>s\n               and n=n1'] Suc.prems(3)"], ["proof (prove)\nusing this:\n  n' = Suc n1'\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep ?P \\<sigma>\n         (Suc n1') \\<Longrightarrow>\n  \\<exists>\\<sigma>1 coll1.\n     (\\<sigma>1, coll1)\n     \\<in> JVMSmartCollectionSemantics.csmall ?P \\<sigma> \\<and>\n     (\\<exists>coll.\n         cset\\<^sub>s = JVMcombine coll1 coll \\<and>\n         (\\<sigma>', coll)\n         \\<in> JVMSmartCollectionSemantics.csmall_nstep ?P \\<sigma>1 n1')\n  (\\<sigma>', cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma> n'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' cset1' cset2.\n        \\<lbrakk>(\\<sigma>1', cset1')\n                 \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>;\n         cset\\<^sub>s = JVMcombine cset1' cset2;\n         (\\<sigma>', cset2)\n         \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1'\n                n1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<sigma>1', cset1') \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>s = JVMcombine cset1' cset2\n  (\\<sigma>', cset2)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1' n1'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "then"], ["proof (chain)\npicking this:\n  (\\<sigma>1', cset1') \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>s = JVMcombine cset1' cset2\n  (\\<sigma>', cset2)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1' n1'", "have \"\\<sigma>1=\\<sigma>1'\""], ["proof (prove)\nusing this:\n  (\\<sigma>1', cset1') \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>s = JVMcombine cset1' cset2\n  (\\<sigma>', cset2)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1' n1'\n\ngoal (1 subgoal):\n 1. \\<sigma>1 = \\<sigma>1'", "using \\<sigma>1 JVMNaiveCollectionSemantics.csmall_def\n      JVMSmartCollectionSemantics.csmall_def"], ["proof (prove)\nusing this:\n  (\\<sigma>1', cset1') \\<in> JVMSmartCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>s = JVMcombine cset1' cset2\n  (\\<sigma>', cset2)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1' n1'\n  (\\<sigma>1, cset1) \\<in> JVMNaiveCollectionSemantics.csmall P \\<sigma>\n  cset\\<^sub>n = JVMcombine cset1 cset\n  (\\<sigma>', cset)\n  \\<in> JVMNaiveCollectionSemantics.csmall_nstep P \\<sigma>1 n1\n  JVMNaiveCollectionSemantics.csmall ?P ?\\<sigma> \\<equiv>\n  {(\\<sigma>', coll).\n   \\<sigma>' \\<in> JVMsmall ?P ?\\<sigma> \\<and>\n   JVMNaiveCollect ?P ?\\<sigma> \\<sigma>' = coll}\n  JVMSmartCollectionSemantics.csmall ?P ?\\<sigma> \\<equiv>\n  {(\\<sigma>', coll).\n   \\<sigma>' \\<in> JVMsmall ?P ?\\<sigma> \\<and>\n   JVMSmartCollect ?P ?\\<sigma> \\<sigma>' = coll}\n\ngoal (1 subgoal):\n 1. \\<sigma>1 = \\<sigma>1'", "by auto"], ["proof (state)\nthis:\n  \\<sigma>1 = \\<sigma>1'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n' = Suc nat \\<Longrightarrow> Suc n1 = n'", "then"], ["proof (chain)\npicking this:\n  \\<sigma>1 = \\<sigma>1'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma>1 = \\<sigma>1'\n\ngoal (1 subgoal):\n 1. Suc n1 = n'", "using Suc.hyps(1)[OF cbig \\<sigma>1(3)] \\<sigma>1'(3) Suc'"], ["proof (prove)\nusing this:\n  \\<sigma>1 = \\<sigma>1'\n  (\\<sigma>', ?cset\\<^sub>s)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1\n         ?n' \\<Longrightarrow>\n  n1 = ?n'\n  (\\<sigma>', cset2)\n  \\<in> JVMSmartCollectionSemantics.csmall_nstep P \\<sigma>1' n1'\n  n' = Suc n1'\n\ngoal (1 subgoal):\n 1. Suc n1 = n'", "by blast"], ["proof (state)\nthis:\n  Suc n1 = n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc n1 = n'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}