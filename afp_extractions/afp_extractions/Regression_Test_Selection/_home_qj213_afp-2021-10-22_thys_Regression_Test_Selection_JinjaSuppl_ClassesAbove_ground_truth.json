{"file_name": "/home/qj213/afp-2021-10-22/thys/Regression_Test_Selection/JinjaSuppl/ClassesAbove.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Regression_Test_Selection", "problem_names": ["lemma classes_above_def2:\n \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> classes_above P C = {C} \\<union> classes_above P D\"", "lemma classes_above_class:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {}; P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk>\n  \\<Longrightarrow> class P C' = class P' C'\"", "lemma classes_above_subset:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"classes_above P C \\<subseteq> classes_above P' C\"", "lemma classes_above_subcls:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {}; P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk>\n   \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* C'\"", "lemma classes_above_subset2:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"classes_above P' C \\<subseteq> classes_above P C\"", "lemma classes_above_subcls2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {}; P' \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk>\n   \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* C'\"", "lemma classes_above_set:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n  \\<Longrightarrow> classes_above P C = classes_above P' C\"", "lemma classes_above_classes_changed_sym:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"classes_above P' C \\<inter> classes_changed P' P = {}\"", "lemma classes_above_sub_classes_between_eq:\n \"P \\<turnstile> C \\<preceq>\\<^sup>* D \\<Longrightarrow> classes_above P C = (classes_between P C D - {D}) \\<union> classes_above P D\"", "lemma classes_above_subcls_subset:\n \"\\<lbrakk> P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk> \\<Longrightarrow> classes_above P C' \\<subseteq> classes_above P C\"", "lemma classes_above_sees_methods:\nassumes int: \"classes_above P C \\<inter> classes_changed P P' = {}\" and ms: \"P \\<turnstile> C sees_methods Mm\"\nshows \"P' \\<turnstile> C sees_methods Mm\"", "lemma classes_above_sees_method:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C' \\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C'\"", "lemma classes_above_sees_method2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C'\"", "lemma classes_above_method:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"method P C M = method P' C M\"", "lemma classes_above_has_fields:\nassumes int: \"classes_above P C \\<inter> classes_changed P P' = {}\" and fs: \"P \\<turnstile> C has_fields FDTs\"\nshows \"P' \\<turnstile> C has_fields FDTs\"", "lemma classes_above_has_fields_dne:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"(\\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs) = (\\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs)\"", "lemma classes_above_has_field:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n    P \\<turnstile> C has F,b:t in C' \\<rbrakk>\n   \\<Longrightarrow> P' \\<turnstile> C has F,b:t in C'\"", "lemma classes_above_has_field2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C has F,b:t in C' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> C has F,b:t in C'\"", "lemma classes_above_sees_field:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n    P \\<turnstile> C sees F,b:t in C' \\<rbrakk>\n   \\<Longrightarrow> P' \\<turnstile> C sees F,b:t in C'\"", "lemma classes_above_sees_field2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C sees F,b:t in C' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> C sees F,b:t in C'\"", "lemma classes_above_field:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"field P C F = field P' C F\"", "lemma classes_above_fields:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"fields P C = fields P' C\"", "lemma classes_above_ifields:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  ifields P C = ifields P' C\"", "lemma classes_above_blank:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  blank P C = blank P' C\"", "lemma classes_above_isfields:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  isfields P C = isfields P' C\"", "lemma classes_above_sblank:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  sblank P C = sblank P' C\"", "lemma classes_above_start_heap:\nassumes \"classes_above_xcpts P \\<inter> classes_changed P P' = {}\"\nshows \"start_heap P = start_heap P'\""], "translations": [["", "lemma classes_above_def2:\n \"P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow> classes_above P C = {C} \\<union> classes_above P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow>\n    classes_above P C = {C} \\<union> classes_above P D", "using subcls1_confluent"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P \\<turnstile> ?a \\<prec>\\<^sup>1 ?b;\n   ?P \\<turnstile> ?a \\<preceq>\\<^sup>* ?c; ?a \\<noteq> ?c\\<rbrakk>\n  \\<Longrightarrow> ?P \\<turnstile> ?b \\<preceq>\\<^sup>* ?c\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sup>1 D \\<Longrightarrow>\n    classes_above P C = {C} \\<union> classes_above P D", "by auto"], ["", "lemma classes_above_class:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {}; P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk>\n  \\<Longrightarrow> class P C' = class P' C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C \\<preceq>\\<^sup>* C'\\<rbrakk>\n    \\<Longrightarrow> class P C' = class P' C'", "by (drule classes_changed_class_set, simp)"], ["", "lemma classes_above_subset:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"classes_above P C \\<subseteq> classes_above P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<subseteq> classes_above P' C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. classes_above P C \\<subseteq> classes_above P' C", "have ind: \"\\<And>x. P \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       P \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       P \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       P \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x", "assume sub: \"P \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       P \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* x", "show \"P' \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* x\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C \\<preceq>\\<^sup>* x", "proof(induct rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. P' \\<turnstile> C \\<preceq>\\<^sup>* C\n 2. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P' \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* z", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. P' \\<turnstile> C \\<preceq>\\<^sup>* C\n 2. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P' \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* z", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P' \\<turnstile> C \\<preceq>\\<^sup>* C", "by simp"], ["proof (state)\nthis:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P' \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P' \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* z", "case (step y z)"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* y\n  P \\<turnstile> y \\<prec>\\<^sup>1 z\n  P' \\<turnstile> C \\<preceq>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P' \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* z", "have \"P' \\<turnstile> y \\<prec>\\<^sup>1 z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' \\<turnstile> y \\<prec>\\<^sup>1 z", "by(rule class_subcls1[OF classes_above_class[OF assms step(1)] step(2)])"], ["proof (state)\nthis:\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P' \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* z", "then"], ["proof (chain)\npicking this:\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z", "show ?case"], ["proof (prove)\nusing this:\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C \\<preceq>\\<^sup>* z", "using step(3)"], ["proof (prove)\nusing this:\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z\n  P' \\<turnstile> C \\<preceq>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C \\<preceq>\\<^sup>* z", "by simp"], ["proof (state)\nthis:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P' \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. classes_above P C \\<subseteq> classes_above P' C", "with classes_changed_class_set[OF assms]"], ["proof (chain)\npicking this:\n  \\<forall>C\\<in>classes_above P C. class P C = class P' C\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P' \\<turnstile> C \\<preceq>\\<^sup>* ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>classes_above P C. class P C = class P' C\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P' \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. classes_above P C \\<subseteq> classes_above P' C", "by clarsimp"], ["proof (state)\nthis:\n  classes_above P C \\<subseteq> classes_above P' C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_subcls:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {}; P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk>\n   \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C \\<preceq>\\<^sup>* C'\\<rbrakk>\n    \\<Longrightarrow> P' \\<turnstile> C \\<preceq>\\<^sup>* C'", "by (fastforce dest: classes_above_subset)"], ["", "lemma classes_above_subset2:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"classes_above P' C \\<subseteq> classes_above P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P' C \\<subseteq> classes_above P C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. classes_above P' C \\<subseteq> classes_above P C", "have ind: \"\\<And>x. P' \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* x", "assume sub: \"P' \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (state)\nthis:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       P' \\<turnstile> C \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* x", "then"], ["proof (chain)\npicking this:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* x", "show \"P \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (prove)\nusing this:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* x\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* x", "proof(induct rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* C\n 2. \\<And>y z.\n       \\<lbrakk>P' \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P' \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* z", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* C\n 2. \\<And>y z.\n       \\<lbrakk>P' \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P' \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* z", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* C", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P' \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P' \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P' \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P' \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* z", "case (step y z)"], ["proof (state)\nthis:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* y\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z\n  P \\<turnstile> C \\<preceq>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P' \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P' \\<turnstile> y \\<prec>\\<^sup>1 z;\n        P \\<turnstile> C \\<preceq>\\<^sup>* y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* z", "with class_subcls1 classes_above_class[OF assms] rtrancl_into_rtrancl"], ["proof (chain)\npicking this:\n  \\<lbrakk>class ?P ?y = class ?P' ?y;\n   ?P \\<turnstile> ?y \\<prec>\\<^sup>1 ?z\\<rbrakk>\n  \\<Longrightarrow> ?P' \\<turnstile> ?y \\<prec>\\<^sup>1 ?z\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?C' \\<Longrightarrow>\n  class P ?C' = class P' ?C'\n  \\<lbrakk>(?a, ?b) \\<in> ?r\\<^sup>*; (?b, ?c) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> (?a, ?c) \\<in> ?r\\<^sup>*\n  P' \\<turnstile> C \\<preceq>\\<^sup>* y\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z\n  P \\<turnstile> C \\<preceq>\\<^sup>* y", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>class ?P ?y = class ?P' ?y;\n   ?P \\<turnstile> ?y \\<prec>\\<^sup>1 ?z\\<rbrakk>\n  \\<Longrightarrow> ?P' \\<turnstile> ?y \\<prec>\\<^sup>1 ?z\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?C' \\<Longrightarrow>\n  class P ?C' = class P' ?C'\n  \\<lbrakk>(?a, ?b) \\<in> ?r\\<^sup>*; (?b, ?c) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> (?a, ?c) \\<in> ?r\\<^sup>*\n  P' \\<turnstile> C \\<preceq>\\<^sup>* y\n  P' \\<turnstile> y \\<prec>\\<^sup>1 z\n  P \\<turnstile> C \\<preceq>\\<^sup>* y\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* z", "by metis"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' \\<turnstile> C \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. classes_above P' C \\<subseteq> classes_above P C", "with classes_changed_class_set[OF assms]"], ["proof (chain)\npicking this:\n  \\<forall>C\\<in>classes_above P C. class P C = class P' C\n  P' \\<turnstile> C \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>classes_above P C. class P C = class P' C\n  P' \\<turnstile> C \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. classes_above P' C \\<subseteq> classes_above P C", "by clarsimp"], ["proof (state)\nthis:\n  classes_above P' C \\<subseteq> classes_above P C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_subcls2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {}; P' \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk>\n   \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C \\<preceq>\\<^sup>* C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* C'", "by (fastforce dest: classes_above_subset2)"], ["", "lemma classes_above_set:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n  \\<Longrightarrow> classes_above P C = classes_above P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' = {} \\<Longrightarrow>\n    classes_above P C = classes_above P' C", "by(fastforce dest: classes_above_subset classes_above_subset2)"], ["", "lemma classes_above_classes_changed_sym:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"classes_above P' C \\<inter> classes_changed P' P = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P' C \\<inter> classes_changed P' P = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. classes_above P' C \\<inter> classes_changed P' P = {}", "have \"classes_above P C = classes_above P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C = classes_above P' C", "by(rule classes_above_set[OF assms])"], ["proof (state)\nthis:\n  classes_above P C = classes_above P' C\n\ngoal (1 subgoal):\n 1. classes_above P' C \\<inter> classes_changed P' P = {}", "with classes_changed_sym[where P=P] assms"], ["proof (chain)\npicking this:\n  classes_changed P ?P' = classes_changed ?P' P\n  classes_above P C \\<inter> classes_changed P P' = {}\n  classes_above P C = classes_above P' C", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_changed P ?P' = classes_changed ?P' P\n  classes_above P C \\<inter> classes_changed P P' = {}\n  classes_above P C = classes_above P' C\n\ngoal (1 subgoal):\n 1. classes_above P' C \\<inter> classes_changed P' P = {}", "by simp"], ["proof (state)\nthis:\n  classes_above P' C \\<inter> classes_changed P' P = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_sub_classes_between_eq:\n \"P \\<turnstile> C \\<preceq>\\<^sup>* D \\<Longrightarrow> classes_above P C = (classes_between P C D - {D}) \\<union> classes_above P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* D \\<Longrightarrow>\n    classes_above P C =\n    classes_between P C D - {D} \\<union> classes_above P D", "using subcls_confluent"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P \\<turnstile> ?C \\<preceq>\\<^sup>* ?C';\n   ?P \\<turnstile> ?C \\<preceq>\\<^sup>* ?C''\\<rbrakk>\n  \\<Longrightarrow> ?P \\<turnstile> ?C' \\<preceq>\\<^sup>* ?C'' \\<or>\n                    ?P \\<turnstile> ?C'' \\<preceq>\\<^sup>* ?C'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* D \\<Longrightarrow>\n    classes_above P C =\n    classes_between P C D - {D} \\<union> classes_above P D", "by auto"], ["", "lemma classes_above_subcls_subset:\n \"\\<lbrakk> P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<rbrakk> \\<Longrightarrow> classes_above P C' \\<subseteq> classes_above P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* C' \\<Longrightarrow>\n    classes_above P C' \\<subseteq> classes_above P C", "by auto"], ["", "(************************************************************)"], ["", "subsection \"Methods\""], ["", "lemma classes_above_sees_methods:\nassumes int: \"classes_above P C \\<inter> classes_changed P P' = {}\" and ms: \"P \\<turnstile> C sees_methods Mm\"\nshows \"P' \\<turnstile> C sees_methods Mm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm", "have cls: \"\\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'", "by(rule classes_changed_class_set[OF int])"], ["proof (state)\nthis:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm", "have \"\\<And>C Mm. P \\<turnstile> C sees_methods Mm \\<Longrightarrow>\n               \\<forall>C'\\<in>classes_above P C. class P C' = class P' C' \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm", "fix C Mm"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm", "assume \"P \\<turnstile> C sees_methods Mm\" and \"\\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\""], ["proof (state)\nthis:\n  P \\<turnstile> C sees_methods Mm\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C sees_methods Mm\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'", "show \"P' \\<turnstile> C sees_methods Mm\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees_methods Mm\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm", "proof(induct rule: Methods.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D fs ms Mm.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms;\n        \\<forall>C'\\<in>classes_above P Object.\n           class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> Object sees_methods Mm\n 2. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "case Obj: (sees_methods_Object D fs ms Mm)"], ["proof (state)\nthis:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms Mm.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms;\n        \\<forall>C'\\<in>classes_above P Object.\n           class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> Object sees_methods Mm\n 2. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "with cls"], ["proof (chain)\npicking this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'", "have \"class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>\""], ["proof (prove)\nusing this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms Mm.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms;\n        \\<forall>C'\\<in>classes_above P Object.\n           class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> Object sees_methods Mm\n 2. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "with Obj"], ["proof (chain)\npicking this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n  class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>", "show ?case"], ["proof (prove)\nusing this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  Mm = map_option (\\<lambda>m. (m, Object)) \\<circ> map_of ms\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n  class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> Object sees_methods Mm", "by(auto intro!: sees_methods_Object)"], ["proof (state)\nthis:\n  P' \\<turnstile> Object sees_methods Mm\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "case rec: (sees_methods_rec C D fs ms Mm Mm')"], ["proof (state)\nthis:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D sees_methods Mm\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D sees_methods Mm\n  Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms)\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "then"], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D sees_methods Mm\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D sees_methods Mm\n  Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms)\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'", "have \"P \\<turnstile> C \\<preceq>\\<^sup>* D\""], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D sees_methods Mm\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D sees_methods Mm\n  Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms)\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* D", "by (simp add: r_into_rtrancl[OF subcls1I])"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* D\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "with converse_rtrancl_into_rtrancl"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a, ?b) \\<in> ?r; (?b, ?c) \\<in> ?r\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> (?a, ?c) \\<in> ?r\\<^sup>*\n  P \\<turnstile> C \\<preceq>\\<^sup>* D", "have \"\\<And>x. P \\<turnstile> D \\<preceq>\\<^sup>* x \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?b) \\<in> ?r; (?b, ?c) \\<in> ?r\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> (?a, ?c) \\<in> ?r\\<^sup>*\n  P \\<turnstile> C \\<preceq>\\<^sup>* D\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       P \\<turnstile> D \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* x", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "with rec.prems(1)"], ["proof (chain)\npicking this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  P \\<turnstile> D \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x", "have \"\\<forall>C'\\<in>classes_above P D. class P C' = class P' C'\""], ["proof (prove)\nusing this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  P \\<turnstile> D \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. \\<forall>C'\\<in>classes_above P D. class P C' = class P' C'", "by simp"], ["proof (state)\nthis:\n  \\<forall>C'\\<in>classes_above P D. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms Mm Mm'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D sees_methods Mm;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D sees_methods Mm;\n        Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms);\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C sees_methods Mm'", "with rec"], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D sees_methods Mm\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D sees_methods Mm\n  Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms)\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<forall>C'\\<in>classes_above P D. class P C' = class P' C'", "show ?case"], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D sees_methods Mm\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D sees_methods Mm\n  Mm' = Mm ++ (map_option (\\<lambda>m. (m, C)) \\<circ> map_of ms)\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<forall>C'\\<in>classes_above P D. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm'", "by(auto intro: sees_methods_rec)"], ["proof (state)\nthis:\n  P' \\<turnstile> C sees_methods Mm'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' \\<turnstile> C sees_methods Mm\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>P \\<turnstile> ?C sees_methods ?Mm;\n   \\<forall>C'\\<in>classes_above P ?C. class P C' = class P' C'\\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> ?C sees_methods ?Mm\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm", "with ms cls"], ["proof (chain)\npicking this:\n  P \\<turnstile> C sees_methods Mm\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<lbrakk>P \\<turnstile> ?C sees_methods ?Mm;\n   \\<forall>C'\\<in>classes_above P ?C. class P C' = class P' C'\\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> ?C sees_methods ?Mm", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees_methods Mm\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<lbrakk>P \\<turnstile> ?C sees_methods ?Mm;\n   \\<forall>C'\\<in>classes_above P ?C. class P C' = class P' C'\\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> ?C sees_methods ?Mm\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C sees_methods Mm", "by simp"], ["proof (state)\nthis:\n  P' \\<turnstile> C sees_methods Mm\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_sees_method:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C' \\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C'\\<rbrakk>\n    \\<Longrightarrow> P' \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C'", "by (auto dest: classes_above_sees_methods simp: Method_def)"], ["", "lemma classes_above_sees_method2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> C sees M,b: Ts\\<rightarrow>T = m in C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C'", "by (auto dest: classes_above_classes_changed_sym intro: classes_above_sees_method)"], ["", "lemma classes_above_method:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"method P C M = method P' C M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. method P C M = method P' C M", "proof(cases \"\\<exists>Ts T m D b. P \\<turnstile> C sees M,b :  Ts\\<rightarrow>T = m in D\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M\n 2. \\<nexists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M", "case True"], ["proof (state)\nthis:\n  \\<exists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (2 subgoals):\n 1. \\<exists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M\n 2. \\<nexists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<exists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<exists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. method P C M = method P' C M", "by (auto dest: classes_above_sees_method)"], ["proof (state)\nthis:\n  method P C M = method P' C M\n\ngoal (1 subgoal):\n 1. \\<nexists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M", "case False"], ["proof (state)\nthis:\n  \\<nexists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. \\<nexists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<nexists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D", "have \"\\<not>(\\<exists>Ts T m D b. P' \\<turnstile> C sees M,b :  Ts\\<rightarrow>T = m in D)\""], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<nexists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. \\<nexists>Ts T m D b.\n       P' \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D", "by (auto dest: classes_above_sees_method2)"], ["proof (state)\nthis:\n  \\<nexists>Ts T m D b.\n     P' \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. \\<nexists>Ts T m D b.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    method P C M = method P' C M", "with False"], ["proof (chain)\npicking this:\n  \\<nexists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n  \\<nexists>Ts T m D b.\n     P' \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>Ts T m D b.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n  \\<nexists>Ts T m D b.\n     P' \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. method P C M = method P' C M", "by(simp add: method_def)"], ["proof (state)\nthis:\n  method P C M = method P' C M\n\ngoal:\nNo subgoals!", "qed"], ["", "(*********************************************)"], ["", "subsection \"Fields\""], ["", "lemma classes_above_has_fields:\nassumes int: \"classes_above P C \\<inter> classes_changed P P' = {}\" and fs: \"P \\<turnstile> C has_fields FDTs\"\nshows \"P' \\<turnstile> C has_fields FDTs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs", "have cls: \"\\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'", "by(rule classes_changed_class_set[OF int])"], ["proof (state)\nthis:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs", "have \"\\<And>C Mm. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n               \\<forall>C'\\<in>classes_above P C. class P C' = class P' C' \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs", "fix C Mm"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs", "assume \"P \\<turnstile> C has_fields FDTs\" and \"\\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\""], ["proof (state)\nthis:\n  P \\<turnstile> C has_fields FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. \\<And>C Mm.\n       \\<lbrakk>P \\<turnstile> C has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C has_fields FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'", "show \"P' \\<turnstile> C has_fields FDTs\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C has_fields FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs", "proof(induct rule: Fields.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'\n 2. \\<And>D fs ms FDTs.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs;\n        \\<forall>C'\\<in>classes_above P Object.\n           class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> Object has_fields FDTs", "case Obj: (has_fields_Object D fs ms FDTs)"], ["proof (state)\nthis:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n\ngoal (2 subgoals):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'\n 2. \\<And>D fs ms FDTs.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs;\n        \\<forall>C'\\<in>classes_above P Object.\n           class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> Object has_fields FDTs", "with cls"], ["proof (chain)\npicking this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'", "have \"class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>\""], ["proof (prove)\nusing this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'\n 2. \\<And>D fs ms FDTs.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs;\n        \\<forall>C'\\<in>classes_above P Object.\n           class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> Object has_fields FDTs", "with Obj"], ["proof (chain)\npicking this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n  class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>", "show ?case"], ["proof (prove)\nusing this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs\n  \\<forall>C'\\<in>classes_above P Object. class P C' = class P' C'\n  class P' Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> Object has_fields FDTs", "by(auto intro!: has_fields_Object)"], ["proof (state)\nthis:\n  P' \\<turnstile> Object has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'", "case rec: (has_fields_rec C D fs ms FDTs FDTs')"], ["proof (state)\nthis:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D has_fields FDTs\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D has_fields FDTs\n  FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'", "then"], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D has_fields FDTs\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D has_fields FDTs\n  FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'", "have \"P \\<turnstile> C \\<preceq>\\<^sup>* D\""], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D has_fields FDTs\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D has_fields FDTs\n  FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* D", "by (simp add: r_into_rtrancl[OF subcls1I])"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* D\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'", "with converse_rtrancl_into_rtrancl"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a, ?b) \\<in> ?r; (?b, ?c) \\<in> ?r\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> (?a, ?c) \\<in> ?r\\<^sup>*\n  P \\<turnstile> C \\<preceq>\\<^sup>* D", "have \"\\<And>x. P \\<turnstile> D \\<preceq>\\<^sup>* x \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?b) \\<in> ?r; (?b, ?c) \\<in> ?r\\<^sup>*\\<rbrakk>\n  \\<Longrightarrow> (?a, ?c) \\<in> ?r\\<^sup>*\n  P \\<turnstile> C \\<preceq>\\<^sup>* D\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       P \\<turnstile> D \\<preceq>\\<^sup>* x \\<Longrightarrow>\n       P \\<turnstile> C \\<preceq>\\<^sup>* x", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> D \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'", "with rec.prems(1)"], ["proof (chain)\npicking this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  P \\<turnstile> D \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x", "have \"\\<forall>x. P \\<turnstile> D \\<preceq>\\<^sup>* x \\<longrightarrow> class P x = class P' x\""], ["proof (prove)\nusing this:\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  P \\<turnstile> D \\<preceq>\\<^sup>* ?x \\<Longrightarrow>\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       P \\<turnstile> D \\<preceq>\\<^sup>* x \\<longrightarrow>\n       class P x = class P' x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x.\n     P \\<turnstile> D \\<preceq>\\<^sup>* x \\<longrightarrow>\n     class P x = class P' x\n\ngoal (1 subgoal):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<forall>C'\\<in>classes_above P D.\n           class P C' = class P' C' \\<Longrightarrow>\n        P' \\<turnstile> D has_fields FDTs;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\\<rbrakk>\n       \\<Longrightarrow> P' \\<turnstile> C has_fields FDTs'", "with rec"], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D has_fields FDTs\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D has_fields FDTs\n  FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<forall>x.\n     P \\<turnstile> D \\<preceq>\\<^sup>* x \\<longrightarrow>\n     class P x = class P' x", "show ?case"], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  C \\<noteq> Object\n  P \\<turnstile> D has_fields FDTs\n  \\<forall>C'\\<in>classes_above P D.\n     class P C' = class P' C' \\<Longrightarrow>\n  P' \\<turnstile> D has_fields FDTs\n  FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<forall>x.\n     P \\<turnstile> D \\<preceq>\\<^sup>* x \\<longrightarrow>\n     class P x = class P' x\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs'", "by(auto intro: has_fields_rec)"], ["proof (state)\nthis:\n  P' \\<turnstile> C has_fields FDTs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P' \\<turnstile> C has_fields FDTs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>P \\<turnstile> ?C has_fields FDTs;\n   \\<forall>C'\\<in>classes_above P ?C. class P C' = class P' C'\\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> ?C has_fields FDTs\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs", "with fs cls"], ["proof (chain)\npicking this:\n  P \\<turnstile> C has_fields FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<lbrakk>P \\<turnstile> ?C has_fields FDTs;\n   \\<forall>C'\\<in>classes_above P ?C. class P C' = class P' C'\\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> ?C has_fields FDTs", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C has_fields FDTs\n  \\<forall>C'\\<in>classes_above P C. class P C' = class P' C'\n  \\<lbrakk>P \\<turnstile> ?C has_fields FDTs;\n   \\<forall>C'\\<in>classes_above P ?C. class P C' = class P' C'\\<rbrakk>\n  \\<Longrightarrow> P' \\<turnstile> ?C has_fields FDTs\n\ngoal (1 subgoal):\n 1. P' \\<turnstile> C has_fields FDTs", "by simp"], ["proof (state)\nthis:\n  P' \\<turnstile> C has_fields FDTs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_has_fields_dne:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"(\\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs) = (\\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs) =\n    (\\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs)", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\n 2. \\<forall>FDTs.\n       \\<not> P' \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "assume asm: \"\\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs\""], ["proof (state)\nthis:\n  \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs\n\ngoal (2 subgoals):\n 1. \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\n 2. \\<forall>FDTs.\n       \\<not> P' \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "from assms classes_changed_sym[where P=P] classes_above_set[OF assms]"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  classes_changed P ?P' = classes_changed ?P' P\n  classes_above P C = classes_above P' C", "have int': \"classes_above P' C \\<inter> classes_changed P' P = {}\""], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  classes_changed P ?P' = classes_changed ?P' P\n  classes_above P C = classes_above P' C\n\ngoal (1 subgoal):\n 1. classes_above P' C \\<inter> classes_changed P' P = {}", "by simp"], ["proof (state)\nthis:\n  classes_above P' C \\<inter> classes_changed P' P = {}\n\ngoal (2 subgoals):\n 1. \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\n 2. \\<forall>FDTs.\n       \\<not> P' \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "from asm classes_above_has_fields[OF int']"], ["proof (chain)\npicking this:\n  \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs\n  P' \\<turnstile> C has_fields ?FDTs \\<Longrightarrow>\n  P \\<turnstile> C has_fields ?FDTs", "show \"\\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\""], ["proof (prove)\nusing this:\n  \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs\n  P' \\<turnstile> C has_fields ?FDTs \\<Longrightarrow>\n  P \\<turnstile> C has_fields ?FDTs\n\ngoal (1 subgoal):\n 1. \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs", "by auto"], ["proof (state)\nthis:\n  \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<forall>FDTs.\n       \\<not> P' \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>FDTs.\n       \\<not> P' \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "assume \"\\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\""], ["proof (state)\nthis:\n  \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<forall>FDTs.\n       \\<not> P' \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs", "show \"\\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs\""], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<forall>FDTs. \\<not> P' \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs", "by(auto dest: classes_above_has_fields)"], ["proof (state)\nthis:\n  \\<forall>FDTs. \\<not> P \\<turnstile> C has_fields FDTs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_has_field:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n    P \\<turnstile> C has F,b:t in C' \\<rbrakk>\n   \\<Longrightarrow> P' \\<turnstile> C has F,b:t in C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C has F,b:t in C'\\<rbrakk>\n    \\<Longrightarrow> P' \\<turnstile> C has F,b:t in C'", "by(auto dest: classes_above_has_fields simp: has_field_def)"], ["", "lemma classes_above_has_field2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C has F,b:t in C' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> C has F,b:t in C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C has F,b:t in C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C has F,b:t in C'", "by(auto intro: classes_above_has_field dest: classes_above_classes_changed_sym)"], ["", "lemma classes_above_sees_field:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n    P \\<turnstile> C sees F,b:t in C' \\<rbrakk>\n   \\<Longrightarrow> P' \\<turnstile> C sees F,b:t in C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P \\<turnstile> C sees F,b:t in C'\\<rbrakk>\n    \\<Longrightarrow> P' \\<turnstile> C sees F,b:t in C'", "by(auto dest: classes_above_has_fields simp: sees_field_def)"], ["", "lemma classes_above_sees_field2:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C sees F,b:t in C' \\<rbrakk>\n  \\<Longrightarrow> P \\<turnstile> C sees F,b:t in C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>classes_above P C \\<inter> classes_changed P P' = {};\n     P' \\<turnstile> C sees F,b:t in C'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> C sees F,b:t in C'", "by (auto intro: classes_above_sees_field dest: classes_above_classes_changed_sym)"], ["", "lemma classes_above_field:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"field P C F = field P' C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. field P C F = field P' C F", "proof(cases \"\\<exists>T D b. P \\<turnstile> C sees F,b : T in D\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F\n 2. \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F", "case True"], ["proof (state)\nthis:\n  \\<exists>T D b. P \\<turnstile> C sees F,b:T in D\n\ngoal (2 subgoals):\n 1. \\<exists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F\n 2. \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<exists>T D b. P \\<turnstile> C sees F,b:T in D", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<exists>T D b. P \\<turnstile> C sees F,b:T in D\n\ngoal (1 subgoal):\n 1. field P C F = field P' C F", "by (auto dest: classes_above_sees_field)"], ["proof (state)\nthis:\n  field P C F = field P' C F\n\ngoal (1 subgoal):\n 1. \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F", "case False"], ["proof (state)\nthis:\n  \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D\n\ngoal (1 subgoal):\n 1. \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D", "have \"\\<not>(\\<exists>T D b. P' \\<turnstile> C sees F,b : T in D)\""], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D\n\ngoal (1 subgoal):\n 1. \\<nexists>T D b. P' \\<turnstile> C sees F,b:T in D", "by (auto dest: classes_above_sees_field2)"], ["proof (state)\nthis:\n  \\<nexists>T D b. P' \\<turnstile> C sees F,b:T in D\n\ngoal (1 subgoal):\n 1. \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D \\<Longrightarrow>\n    field P C F = field P' C F", "with False"], ["proof (chain)\npicking this:\n  \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D\n  \\<nexists>T D b. P' \\<turnstile> C sees F,b:T in D", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>T D b. P \\<turnstile> C sees F,b:T in D\n  \\<nexists>T D b. P' \\<turnstile> C sees F,b:T in D\n\ngoal (1 subgoal):\n 1. field P C F = field P' C F", "by(simp add: field_def)"], ["proof (state)\nthis:\n  field P C F = field P' C F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_fields:\nassumes \"classes_above P C \\<inter> classes_changed P P' = {}\"\nshows \"fields P C = fields P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fields P C = fields P' C", "proof(cases \"\\<exists>FDTs. P \\<turnstile> C has_fields FDTs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C\n 2. \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C", "case True"], ["proof (state)\nthis:\n  \\<exists>FDTs. P \\<turnstile> C has_fields FDTs\n\ngoal (2 subgoals):\n 1. \\<exists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C\n 2. \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<exists>FDTs. P \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. fields P C = fields P' C", "by(auto dest: classes_above_has_fields)"], ["proof (state)\nthis:\n  fields P C = fields P' C\n\ngoal (1 subgoal):\n 1. \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C", "case False"], ["proof (state)\nthis:\n  \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    fields P C = fields P' C", "with assms"], ["proof (chain)\npicking this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs", "show ?thesis"], ["proof (prove)\nusing this:\n  classes_above P C \\<inter> classes_changed P P' = {}\n  \\<nexists>FDTs. P \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. fields P C = fields P' C", "by (auto dest: classes_above_has_fields_dne simp: fields_def)"], ["proof (state)\nthis:\n  fields P C = fields P' C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma classes_above_ifields:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  ifields P C = ifields P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' = {} \\<Longrightarrow>\n    ifields P C = ifields P' C", "by (simp add: ifields_def classes_above_fields)"], ["", "lemma classes_above_blank:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  blank P C = blank P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' = {} \\<Longrightarrow>\n    blank P C = blank P' C", "by (simp add: blank_def classes_above_ifields)"], ["", "lemma classes_above_isfields:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  isfields P C = isfields P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' = {} \\<Longrightarrow>\n    isfields P C = isfields P' C", "by (simp add: isfields_def classes_above_fields)"], ["", "lemma classes_above_sblank:\n \"\\<lbrakk> classes_above P C \\<inter> classes_changed P P' = {} \\<rbrakk>\n \\<Longrightarrow>\n  sblank P C = sblank P' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. classes_above P C \\<inter> classes_changed P P' = {} \\<Longrightarrow>\n    sblank P C = sblank P' C", "by (simp add: sblank_def classes_above_isfields)"], ["", "(******************************************)"], ["", "subsection \"Other\""], ["", "lemma classes_above_start_heap:\nassumes \"classes_above_xcpts P \\<inter> classes_changed P P' = {}\"\nshows \"start_heap P = start_heap P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start_heap P = start_heap P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. start_heap P = start_heap P'", "from assms"], ["proof (chain)\npicking this:\n  classes_above_xcpts P \\<inter> classes_changed P P' = {}", "have \"\\<forall>C \\<in> sys_xcpts. blank P C = blank P' C\""], ["proof (prove)\nusing this:\n  classes_above_xcpts P \\<inter> classes_changed P P' = {}\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>sys_xcpts. blank P C = blank P' C", "by (auto intro: classes_above_blank)"], ["proof (state)\nthis:\n  \\<forall>C\\<in>sys_xcpts. blank P C = blank P' C\n\ngoal (1 subgoal):\n 1. start_heap P = start_heap P'", "then"], ["proof (chain)\npicking this:\n  \\<forall>C\\<in>sys_xcpts. blank P C = blank P' C", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>sys_xcpts. blank P C = blank P' C\n\ngoal (1 subgoal):\n 1. start_heap P = start_heap P'", "by(simp add: start_heap_def)"], ["proof (state)\nthis:\n  start_heap P = start_heap P'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}