{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference/EFSM_Dot.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference", "problem_names": ["lemma gexp2dot_aux_code [code]: \"guards2dot_aux l = map gexp2dot l\"", "lemma updates2dot_aux_code [code]:\n  \"updates2dot_aux l = map (\\<lambda>(r, u). (vname2dot (R r))+STR '' := ''+(aexp2dot u)) l\""], "translations": [["", "lemma gexp2dot_aux_code [code]: \"guards2dot_aux l = map gexp2dot l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. guards2dot_aux l = map gexp2dot l", "by (induct l, simp_all)"], ["", "primrec updates2dot_aux :: \"update_function list \\<Rightarrow> String.literal list\" where\n  \"updates2dot_aux [] = []\" |\n  \"updates2dot_aux (h#t) = ((vname2dot (R (fst h)))+STR '' := ''+(aexp2dot (snd h)))#(updates2dot_aux t)\""], ["", "lemma updates2dot_aux_code [code]:\n  \"updates2dot_aux l = map (\\<lambda>(r, u). (vname2dot (R r))+STR '' := ''+(aexp2dot u)) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. updates2dot_aux l =\n    map (\\<lambda>(r, u). vname2dot (R r) + STR '' := '' + aexp2dot u) l", "by (induct l, auto)"], ["", "primrec outputs2dot :: \"output_function list \\<Rightarrow> nat \\<Rightarrow> String.literal list\" where\n  \"outputs2dot [] _ = []\" |\n  \"outputs2dot (h#t) n = ((STR ''o<sub>''+(show_nat n))+STR ''</sub> := ''+(aexp2dot h))#(outputs2dot t (n+1))\""], ["", "fun updates2dot :: \"update_function list \\<Rightarrow> String.literal\" where\n  \"updates2dot [] = (STR '''')\" |\n  \"updates2dot a = STR ''&#91;''+(join (updates2dot_aux a) STR '', '')+STR ''&#93;''\""], ["", "fun guards2dot :: \"vname gexp list \\<Rightarrow> String.literal\" where\n  \"guards2dot [] = (STR '''')\" |\n  \"guards2dot a = STR ''&#91;''+(join (guards2dot_aux a) STR '', '')+STR ''&#93;''\""], ["", "definition latter2dot :: \"transition \\<Rightarrow> String.literal\" where\n  \"latter2dot t = (let l = (join (outputs2dot (Outputs t) 1) STR '', '')+(updates2dot (Updates t)) in (if l = (STR '''') then (STR '''') else STR ''/''+l))\""], ["", "definition transition2dot :: \"transition \\<Rightarrow> String.literal\" where\n  \"transition2dot t = (Label t)+STR '':''+(show_nat (Arity t))+(guards2dot (Guards t))+(latter2dot t)\""], ["", "definition efsm2dot :: \"transition_matrix \\<Rightarrow> String.literal\" where\n  \"efsm2dot e = STR ''digraph EFSM{''+newline+\n                STR ''  graph [rankdir=''+quote+(STR ''LR'')+quote+STR '', fontname=''+quote+STR ''Latin Modern Math''+quote+STR ''];''+newline+\n                STR ''  node [color=''+quote+(STR ''black'')+quote+STR '', fillcolor=''+quote+(STR ''white'')+quote+STR '', shape=''+quote+(STR ''circle'')+quote+STR '', style=''+quote+(STR ''filled'')+quote+STR '', fontname=''+quote+STR ''Latin Modern Math''+quote+STR ''];''+newline+\n                STR ''  edge [fontname=''+quote+STR ''Latin Modern Math''+quote+STR ''];''+newline+newline+\n                  STR ''  s0[fillcolor=''+quote+STR ''gray''+quote+STR '', label=<s<sub>0</sub>>];''+newline+\n                  (join (map (\\<lambda>s. STR ''  s''+show_nat s+STR ''[label=<s<sub>'' +show_nat s+ STR ''</sub>>];'') (sorted_list_of_fset (EFSM.S e - {|0|}))) (newline))+newline+newline+\n                  (join ((map (\\<lambda>((from, to), t). STR ''  s''+(show_nat from)+STR ''->s''+(show_nat to)+STR ''[label=<<i>''+(transition2dot t)+STR ''</i>>];'') (sorted_list_of_fset e))) newline)+newline+\n                STR ''}''\""], ["", "definition iefsm2dot :: \"iEFSM \\<Rightarrow> String.literal\" where\n  \"iefsm2dot e = STR ''digraph EFSM{''+newline+\n                 STR ''  graph [rankdir=''+quote+(STR ''LR'')+quote+STR '', fontname=''+quote+STR ''Latin Modern Math''+quote+STR ''];''+newline+\n                 STR ''  node [color=''+quote+(STR ''black'')+quote+STR '', fillcolor=''+quote+(STR ''white'')+quote+STR '', shape=''+quote+(STR ''circle'')+quote+STR '', style=''+quote+(STR ''filled'')+quote+STR '', fontname=''+quote+STR ''Latin Modern Math''+quote+STR ''];''+newline+\n                 STR ''  edge [fontname=''+quote+STR ''Latin Modern Math''+quote+STR ''];''+newline+newline+\n                  STR ''  s0[fillcolor=''+quote+STR ''gray''+quote+STR '', label=<s<sub>0</sub>>];''+newline+\n                  (join (map (\\<lambda>s. STR ''  s''+show_nat s+STR ''[label=<s<sub>'' +show_nat s+ STR ''</sub>>];'') (sorted_list_of_fset (S e - {|0|}))) (newline))+newline+newline+\n                  (join ((map (\\<lambda>(uid, (from, to), t). STR ''  s''+(show_nat from)+STR ''->s''+(show_nat to)+STR ''[label=<<i> [''+show_nats (sort uid)+STR '']''+(transition2dot t)+STR ''</i>>];'') (sorted_list_of_fset e))) newline)+newline+\n                STR ''}''\""], ["", "abbreviation newline_str :: string where\n  \"newline_str \\<equiv> ''\\010''\""], ["", "abbreviation quote_str :: string where\n  \"quote_str \\<equiv> ''0x22''\""], ["", "end"]]}