{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference/heuristics/Group_By.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference", "problem_names": ["lemma \"(group_by f xs = []) = (xs = [])\"", "lemma not_empty_group_by_drop: \"\\<forall>x \\<in> set (group_by f (drop l xs)). x \\<noteq> []\"", "lemma no_empty_groups: \"\\<forall>x\\<in>set (group_by f xs). x \\<noteq> []\"", "lemma \"(drop (length (takeWhile f l)) l) = dropWhile f l\"", "lemma takeWhile_dropWhile: \"takeWhile f l @ dropWhile f l = l' \\<Longrightarrow> l' = l\"", "lemma append_pref: \"l' = l'' \\<Longrightarrow> (l@l' = l@l'')\"", "lemma dropWhile_drop: \"\\<exists>x. dropWhile f l = drop x l\"", "lemma group_by_drop_foldr: \"drop x l = foldr (@) (group_by f (drop x l)) []\"", "lemma group_by_inverse: \"foldr (@) (group_by f l) [] = l\""], "translations": [["", "lemma \"(group_by f xs = []) = (xs = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (group_by f xs = []) = (xs = [])", "by (induct xs, auto simp add: Let_def)"], ["", "lemma not_empty_group_by_drop: \"\\<forall>x \\<in> set (group_by f (drop l xs)). x \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (group_by f (drop l xs)). x \\<noteq> []", "by (induct xs arbitrary: l, auto simp add: drop_Cons' Let_def)"], ["", "lemma no_empty_groups: \"\\<forall>x\\<in>set (group_by f xs). x \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (group_by f xs). x \\<noteq> []", "by (metis not_empty_group_by_drop empty_iff empty_set group_by.elims list.distinct(1) set_ConsD)"], ["", "lemma \"(drop (length (takeWhile f l)) l) = dropWhile f l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length (takeWhile f l)) l = dropWhile f l", "by (simp add: dropWhile_eq_drop)"], ["", "lemma takeWhile_dropWhile: \"takeWhile f l @ dropWhile f l = l' \\<Longrightarrow> l' = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. takeWhile f l @ dropWhile f l = l' \\<Longrightarrow> l' = l", "by simp"], ["", "lemma append_pref: \"l' = l'' \\<Longrightarrow> (l@l' = l@l'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l' = l'' \\<Longrightarrow> l @ l' = l @ l''", "by simp"], ["", "lemma dropWhile_drop: \"\\<exists>x. dropWhile f l = drop x l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. dropWhile f l = drop x l", "using dropWhile_eq_drop"], ["proof (prove)\nusing this:\n  dropWhile ?P ?xs = drop (length (takeWhile ?P ?xs)) ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>x. dropWhile f l = drop x l", "by blast"], ["", "lemma group_by_drop_foldr: \"drop x l = foldr (@) (group_by f (drop x l)) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop x l = foldr (@) (group_by f (drop x l)) []", "proof (induct l arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. drop x [] = foldr (@) (group_by f (drop x [])) []\n 2. \\<And>a l x.\n       (\\<And>x.\n           drop x l =\n           foldr (@) (group_by f (drop x l)) []) \\<Longrightarrow>\n       drop x (a # l) = foldr (@) (group_by f (drop x (a # l))) []", "case (Cons a l)"], ["proof (state)\nthis:\n  drop ?x l = foldr (@) (group_by f (drop ?x l)) []\n\ngoal (2 subgoals):\n 1. \\<And>x. drop x [] = foldr (@) (group_by f (drop x [])) []\n 2. \\<And>a l x.\n       (\\<And>x.\n           drop x l =\n           foldr (@) (group_by f (drop x l)) []) \\<Longrightarrow>\n       drop x (a # l) = foldr (@) (group_by f (drop x (a # l))) []", "then"], ["proof (chain)\npicking this:\n  drop ?x l = foldr (@) (group_by f (drop ?x l)) []", "show ?case"], ["proof (prove)\nusing this:\n  drop ?x l = foldr (@) (group_by f (drop ?x l)) []\n\ngoal (1 subgoal):\n 1. drop x (a # l) = foldr (@) (group_by f (drop x (a # l))) []", "apply (simp add: drop_Cons' Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        drop x l = foldr (@) (group_by f (drop x l)) []) \\<Longrightarrow>\n    x = 0 \\<longrightarrow>\n    l = takeWhile (f a) l @ drop (length (takeWhile (f a) l)) l", "by (metis append_take_drop_id takeWhile_eq_take)"], ["proof (state)\nthis:\n  drop x (a # l) = foldr (@) (group_by f (drop x (a # l))) []\n\ngoal (1 subgoal):\n 1. \\<And>x. drop x [] = foldr (@) (group_by f (drop x [])) []", "qed auto"], ["", "lemma group_by_inverse: \"foldr (@) (group_by f l) [] = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (@) (group_by f l) [] = l", "proof(induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. foldr (@) (group_by f []) [] = []\n 2. \\<And>a l.\n       foldr (@) (group_by f l) [] = l \\<Longrightarrow>\n       foldr (@) (group_by f (a # l)) [] = a # l", "case (Cons a l)"], ["proof (state)\nthis:\n  foldr (@) (group_by f l) [] = l\n\ngoal (2 subgoals):\n 1. foldr (@) (group_by f []) [] = []\n 2. \\<And>a l.\n       foldr (@) (group_by f l) [] = l \\<Longrightarrow>\n       foldr (@) (group_by f (a # l)) [] = a # l", "then"], ["proof (chain)\npicking this:\n  foldr (@) (group_by f l) [] = l", "show ?case"], ["proof (prove)\nusing this:\n  foldr (@) (group_by f l) [] = l\n\ngoal (1 subgoal):\n 1. foldr (@) (group_by f (a # l)) [] = a # l", "apply (simp add: Let_def dropWhile_eq_drop[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (@) (group_by f l) [] = l \\<Longrightarrow>\n    takeWhile (f a) l @ foldr (@) (group_by f (dropWhile (f a) l)) [] = l", "apply (rule takeWhile_dropWhile[of \"f a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (@) (group_by f l) [] = l \\<Longrightarrow>\n    takeWhile (f a) l @ dropWhile (f a) l =\n    takeWhile (f a) l @ foldr (@) (group_by f (dropWhile (f a) l)) []", "apply (rule append_pref)"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (@) (group_by f l) [] = l \\<Longrightarrow>\n    dropWhile (f a) l = foldr (@) (group_by f (dropWhile (f a) l)) []", "apply (insert dropWhile_drop[of \"f a\" l])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>foldr (@) (group_by f l) [] = l;\n     \\<exists>x. dropWhile (f a) l = drop x l\\<rbrakk>\n    \\<Longrightarrow> dropWhile (f a) l =\n                      foldr (@) (group_by f (dropWhile (f a) l)) []", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>foldr (@) (group_by f l) [] = l;\n        dropWhile (f a) l = drop x l\\<rbrakk>\n       \\<Longrightarrow> dropWhile (f a) l =\n                         foldr (@) (group_by f (dropWhile (f a) l)) []", "by (simp add: group_by_drop_foldr)"], ["proof (state)\nthis:\n  foldr (@) (group_by f (a # l)) [] = a # l\n\ngoal (1 subgoal):\n 1. foldr (@) (group_by f []) [] = []", "qed auto"], ["", "end"]]}