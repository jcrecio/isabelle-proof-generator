{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference/heuristics/Distinguishing_Guards.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference", "problem_names": ["lemma distinguishing_guard_subsumption:\n\"Label t1 = Label t2 \\<Longrightarrow>\n Arity t1 = Arity t2 \\<Longrightarrow>\n Outputs t1 = Outputs t2 \\<Longrightarrow>\n Updates t1 = Updates t2 \\<Longrightarrow>\n can_still_take_ctx e1 e2 s1 s2 t1 t2 \\<Longrightarrow>\n recognises e1 p \\<Longrightarrow>\n visits s1 e1 0 <> p \\<Longrightarrow>\n obtains s2 c e2 0 <> p \\<Longrightarrow>\n subsumes t1 c t2\"", "lemma can_still_take_direct_subsumption:\n  \"can_still_take e1 e2 s1 s2 t1 t2 \\<Longrightarrow>\n  directly_subsumes e1 e2 s1 s2 t1 t2\""], "translations": [["", "lemma distinguishing_guard_subsumption:\n\"Label t1 = Label t2 \\<Longrightarrow>\n Arity t1 = Arity t2 \\<Longrightarrow>\n Outputs t1 = Outputs t2 \\<Longrightarrow>\n Updates t1 = Updates t2 \\<Longrightarrow>\n can_still_take_ctx e1 e2 s1 s2 t1 t2 \\<Longrightarrow>\n recognises e1 p \\<Longrightarrow>\n visits s1 e1 0 <> p \\<Longrightarrow>\n obtains s2 c e2 0 <> p \\<Longrightarrow>\n subsumes t1 c t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Label t1 = Label t2; Arity t1 = Arity t2;\n     Outputs t1 = Outputs t2; Updates t1 = Updates t2;\n     can_still_take_ctx e1 e2 s1 s2 t1 t2; recognises e1 p;\n     visits s1 e1 0 <> p; obtains s2 c e2 0 <> p\\<rbrakk>\n    \\<Longrightarrow> subsumes t1 c t2", "apply (simp add: subsumes_def can_still_take_ctx_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Label t1 = Label t2; Arity t1 = Arity t2;\n     Outputs t1 = Outputs t2; Updates t1 = Updates t2;\n     \\<forall>t.\n        recognises e1 t \\<and>\n        visits s1 e1 0 <> t \\<and>\n        recognises e2 t \\<and> visits s2 e2 0 <> t \\<longrightarrow>\n        (\\<forall>a.\n            obtains s2 a e2 0 <> t \\<and>\n            (\\<forall>i.\n                can_take_transition t2 i a \\<longrightarrow>\n                can_take_transition t1 i a));\n     recognises e1 p; visits s1 e1 0 <> p; obtains s2 c e2 0 <> p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         can_take_transition t2 i c \\<longrightarrow>\n                         can_take_transition t1 i c", "apply (erule_tac x=p in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Label t1 = Label t2; Arity t1 = Arity t2;\n     Outputs t1 = Outputs t2; Updates t1 = Updates t2; recognises e1 p;\n     visits s1 e1 0 <> p; obtains s2 c e2 0 <> p;\n     recognises e1 p \\<and>\n     visits s1 e1 0 <> p \\<and>\n     recognises e2 p \\<and> visits s2 e2 0 <> p \\<longrightarrow>\n     (\\<forall>a.\n         obtains s2 a e2 0 <> p \\<and>\n         (\\<forall>i.\n             can_take_transition t2 i a \\<longrightarrow>\n             can_take_transition t1 i a))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         can_take_transition t2 i c \\<longrightarrow>\n                         can_take_transition t1 i c", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Label t1 = Label t2; Arity t1 = Arity t2;\n     Outputs t1 = Outputs t2; Updates t1 = Updates t2; recognises e1 p;\n     visits s1 e1 0 <> p; obtains s2 c e2 0 <> p;\n     recognises e2 p \\<and> visits s2 e2 0 <> p \\<longrightarrow>\n     (\\<forall>a.\n         obtains s2 a e2 0 <> p \\<and>\n         (\\<forall>i.\n             can_take_transition t2 i a \\<longrightarrow>\n             can_take_transition t1 i a))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i.\n                         can_take_transition t2 i c \\<longrightarrow>\n                         can_take_transition t1 i c", "by (simp add: obtains_recognises obtains_visits)"], ["", "definition \"recognises_and_visits_both a b s s' = (\n  \\<exists>p c1 c2. obtains s c1 a 0 <> p \\<and> obtains s' c2 b 0 <> p)\""], ["", "definition \"can_still_take e1 e2 s1 s2 t1 t2 = (\n  Label t1 = Label t2 \\<and>\n  Arity t1 = Arity t2 \\<and>\n  Outputs t1 = Outputs t2 \\<and>\n  Updates t1 = Updates t2 \\<and>\n  can_still_take_ctx e1 e2 s1 s2 t1 t2 \\<and>\n  recognises_and_visits_both e1 e2 s1 s2)\""], ["", "lemma can_still_take_direct_subsumption:\n  \"can_still_take e1 e2 s1 s2 t1 t2 \\<Longrightarrow>\n  directly_subsumes e1 e2 s1 s2 t1 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_still_take e1 e2 s1 s2 t1 t2 \\<Longrightarrow>\n    directly_subsumes e1 e2 s1 s2 t1 t2", "apply (simp add: directly_subsumes_def can_still_take_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Label t1 = Label t2 \\<and>\n    Arity t1 = Arity t2 \\<and>\n    Outputs t1 = Outputs t2 \\<and>\n    Updates t1 = Updates t2 \\<and>\n    can_still_take_ctx e1 e2 s1 s2 t1 t2 \\<and>\n    recognises_and_visits_both e1 e2 s1 s2 \\<Longrightarrow>\n    \\<forall>c1 c2.\n       (\\<exists>t.\n           obtains s1 c1 e1 0 <> t \\<and>\n           obtains s2 c2 e2 0 <> t) \\<longrightarrow>\n       subsumes t1 c2 t2", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c1.\n       Label t1 = Label t2 \\<and>\n       Arity t1 = Arity t2 \\<and>\n       Outputs t1 = Outputs t2 \\<and>\n       Updates t1 = Updates t2 \\<and>\n       can_still_take_ctx e1 e2 s1 s2 t1 t2 \\<and>\n       recognises_and_visits_both e1 e2 s1 s2 \\<Longrightarrow>\n       \\<forall>c2.\n          (\\<exists>t.\n              obtains s1 c1 e1 0 <> t \\<and>\n              obtains s2 c2 e2 0 <> t) \\<longrightarrow>\n          subsumes t1 c2 t2", "by (meson distinguishing_guard_subsumption obtains_visits obtains_recognises recognises_and_visits_both_def)"], ["", "end"]]}