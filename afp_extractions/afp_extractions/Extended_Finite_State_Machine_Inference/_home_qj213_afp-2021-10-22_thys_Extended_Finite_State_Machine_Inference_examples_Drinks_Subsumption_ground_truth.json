{"file_name": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference/examples/Drinks_Subsumption.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Extended_Finite_State_Machine_Inference", "problem_names": ["lemma stop_at_3: \"\\<not>obtains 1 c drinks2 3 r t\"", "lemma no_1_2: \"\\<not>obtains 1 c drinks2 2 r t\"", "lemma no_change_1_1: \"obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r\"", "lemma obtains_1: \"obtains 1 c drinks2 0 <> t \\<Longrightarrow> c $ 2 = Some (Num 0)\"", "lemma obtains_1_1_2:\n  \"obtains 1 c1 drinks2 1 r t \\<Longrightarrow>\n   obtains 1 c2 drinks 1 r t \\<Longrightarrow>\n   c1 = r \\<and> c2 = r\"", "lemma obtains_1_c2:\n  \"obtains 1 c1 drinks2 0 <> t \\<Longrightarrow> obtains 1 c2 drinks 0 <> t \\<Longrightarrow> c2 $ 2 = Some (Num 0)\"", "lemma directly_subsumes: \"directly_subsumes drinks2 drinks 1 1 vend_fail vend_nothing\"", "lemma directly_subsumes_flip: \"directly_subsumes drinks2 drinks 1 1 vend_nothing vend_fail\""], "translations": [["", "lemma stop_at_3: \"\\<not>obtains 1 c drinks2 3 r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> obtains 1 c drinks2 3 r t", "proof(induct t arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r. \\<not> obtains 1 c drinks2 3 r []\n 2. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 3 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 3 r (a # t)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>r. \\<not> obtains 1 c drinks2 3 r []\n 2. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 3 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 3 r (a # t)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> obtains 1 c drinks2 3 r []", "by (simp add: obtains_base)"], ["proof (state)\nthis:\n  \\<not> obtains 1 c drinks2 3 r []\n\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 3 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 3 r (a # t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 3 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 3 r (a # t)", "case (Cons a t)"], ["proof (state)\nthis:\n  \\<not> obtains 1 c drinks2 3 ?r t\n\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 3 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 3 r (a # t)", "then"], ["proof (chain)\npicking this:\n  \\<not> obtains 1 c drinks2 3 ?r t", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 c drinks2 3 ?r t\n\ngoal (1 subgoal):\n 1. \\<not> obtains 1 c drinks2 3 r (a # t)", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 3 r t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<not> obtains 1 c drinks2 3 r (a # t)", "apply (simp add: obtains_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 3 r t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x|\\<in>|possible_steps drinks2 3 r aa b.\n                            \\<not> (case x of\n                                    (s'', T) \\<Rightarrow>\nobtains 1 c drinks2 s'' (evaluate_updates T b r) t)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b aaa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 3 r t; a = (aa, b);\n        (aaa, ba) |\\<in>| possible_steps drinks2 3 r aa b;\n        obtains 1 c drinks2 aaa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: in_possible_steps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 3 r t;\n        a = (Label ba, b);\n        ((3, aa), ba) |\\<in>| drinks2 \\<and> can_take_transition ba b r;\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> False", "by (simp add: drinks2_def)"], ["proof (state)\nthis:\n  \\<not> obtains 1 c drinks2 3 r (a # t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_1_2: \"\\<not>obtains 1 c drinks2 2 r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> obtains 1 c drinks2 2 r t", "proof(induct t arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r. \\<not> obtains 1 c drinks2 2 r []\n 2. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 2 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 2 r (a # t)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>r. \\<not> obtains 1 c drinks2 2 r []\n 2. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 2 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 2 r (a # t)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> obtains 1 c drinks2 2 r []", "by (simp add: obtains_base)"], ["proof (state)\nthis:\n  \\<not> obtains 1 c drinks2 2 r []\n\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 2 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 2 r (a # t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 2 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 2 r (a # t)", "case (Cons a t)"], ["proof (state)\nthis:\n  \\<not> obtains 1 c drinks2 2 ?r t\n\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       (\\<And>r. \\<not> obtains 1 c drinks2 2 r t) \\<Longrightarrow>\n       \\<not> obtains 1 c drinks2 2 r (a # t)", "then"], ["proof (chain)\npicking this:\n  \\<not> obtains 1 c drinks2 2 ?r t", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 c drinks2 2 ?r t\n\ngoal (1 subgoal):\n 1. \\<not> obtains 1 c drinks2 2 r (a # t)", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<not> obtains 1 c drinks2 2 r (a # t)", "apply (simp add: obtains_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x|\\<in>|possible_steps drinks2 2 r aa b.\n                            \\<not> (case x of\n                                    (s'', T) \\<Rightarrow>\nobtains 1 c drinks2 s'' (evaluate_updates T b r) t)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b aaa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t; a = (aa, b);\n        (aaa, ba) |\\<in>| possible_steps drinks2 2 r aa b;\n        obtains 1 c drinks2 aaa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: in_possible_steps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        ((2, aa), ba) |\\<in>| drinks2 \\<and> can_take_transition ba b r;\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: drinks2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r.\n                   \\<not> obtains 1 c\n                           {|((0, 1), select), ((1, 1), vend_nothing),\n                             ((1, 2), coin), ((2, 2), coin),\n                             ((2, 2), vend_fail), ((2, 3), vend)|}\n                           2 r t;\n        a = (Label ba, b);\n        (aa = 2 \\<and> ba = coin \\<or>\n         aa = 2 \\<and> ba = vend_fail \\<or> aa = 3 \\<and> ba = vend) \\<and>\n        can_take_transition ba b r;\n        obtains 1 c\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         aa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r.\n                   \\<not> obtains 1 c\n                           {|((0, 1), select), ((1, 1), vend_nothing),\n                             ((1, 2), coin), ((2, 2), coin),\n                             ((2, 2), vend_fail), ((2, 3), vend)|}\n                           2 r t;\n        a = (Label ba, b);\n        obtains 1 c\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         aa (evaluate_updates ba b r) t;\n        aa = 2 \\<and> ba = coin \\<or>\n        aa = 2 \\<and> ba = vend_fail \\<or> aa = 3 \\<and> ba = vend;\n        can_take_transition ba b r\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: drinks2_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        aa = 2 \\<and> ba = coin \\<or>\n        aa = 2 \\<and> ba = vend_fail \\<or> aa = 3 \\<and> ba = vend;\n        can_take_transition ba b r\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 2 \\<and> ba = coin\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r;\n        aa = 2 \\<and> ba = vend_fail \\<or> aa = 3 \\<and> ba = vend\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r;\n        aa = 2 \\<and> ba = vend_fail \\<or> aa = 3 \\<and> ba = vend\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 2 \\<and> ba = vend_fail\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 3 \\<and> ba = vend\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>\\<And>r. \\<not> obtains 1 c drinks2 2 r t;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 3 \\<and> ba = vend\\<rbrakk>\n       \\<Longrightarrow> False", "by (simp add: stop_at_3)"], ["proof (state)\nthis:\n  \\<not> obtains 1 c drinks2 2 r (a # t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_change_1_1: \"obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r", "proof(induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. obtains 1 c drinks2 1 r [] \\<Longrightarrow> c = r\n 2. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        obtains 1 c drinks2 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c = r", "case Nil"], ["proof (state)\nthis:\n  obtains 1 c drinks2 1 r []\n\ngoal (2 subgoals):\n 1. obtains 1 c drinks2 1 r [] \\<Longrightarrow> c = r\n 2. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        obtains 1 c drinks2 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c = r", "then"], ["proof (chain)\npicking this:\n  obtains 1 c drinks2 1 r []", "show ?case"], ["proof (prove)\nusing this:\n  obtains 1 c drinks2 1 r []\n\ngoal (1 subgoal):\n 1. c = r", "by (simp add: obtains_base)"], ["proof (state)\nthis:\n  c = r\n\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        obtains 1 c drinks2 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c = r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        obtains 1 c drinks2 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c = r", "case (Cons a t)"], ["proof (state)\nthis:\n  obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r\n  obtains 1 c drinks2 1 r (a # t)\n\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        obtains 1 c drinks2 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c = r", "then"], ["proof (chain)\npicking this:\n  obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r\n  obtains 1 c drinks2 1 r (a # t)", "show ?case"], ["proof (prove)\nusing this:\n  obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r\n  obtains 1 c drinks2 1 r (a # t)\n\ngoal (1 subgoal):\n 1. c = r", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        obtains 1 c drinks2 1 r (a # t); a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply (simp add: obtains_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        \\<exists>(s'', T)|\\<in>|possible_steps drinks2 1 r aa b.\n           obtains 1 c drinks2 s'' (evaluate_updates T b r) t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b ab ba.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        a = (aa, b); (ab, ba) |\\<in>| possible_steps drinks2 1 r aa b;\n        obtains 1 c drinks2 ab (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply (simp add: in_possible_steps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        a = (Label ba, b);\n        ((1, aa), ba) |\\<in>| drinks2 \\<and> can_take_transition ba b r;\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply (simp add: drinks2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c\n                 {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n                   ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n                 1 r t \\<Longrightarrow>\n                c = r;\n        a = (Label ba, b);\n        (aa = 1 \\<and> ba = vend_nothing \\<or>\n         aa = 2 \\<and> ba = coin) \\<and>\n        can_take_transition ba b r;\n        obtains 1 c\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         aa (evaluate_updates ba b r) t\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c\n                 {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n                   ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n                 1 r t \\<Longrightarrow>\n                c = r;\n        a = (Label ba, b);\n        obtains 1 c\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         aa (evaluate_updates ba b r) t;\n        aa = 1 \\<and> ba = vend_nothing \\<or> aa = 2 \\<and> ba = coin;\n        can_take_transition ba b r\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply (simp add: drinks2_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        aa = 1 \\<and> ba = vend_nothing \\<or> aa = 2 \\<and> ba = coin;\n        can_take_transition ba b r\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 1 \\<and> ba = vend_nothing\\<rbrakk>\n       \\<Longrightarrow> c = r\n 2. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 2 \\<and> ba = coin\\<rbrakk>\n       \\<Longrightarrow> c = r", "apply (simp add: vend_nothing_def apply_updates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c drinks2 1 r t \\<Longrightarrow> c = r;\n        a = (Label ba, b);\n        obtains 1 c drinks2 aa (evaluate_updates ba b r) t;\n        can_take_transition ba b r; aa = 2 \\<and> ba = coin\\<rbrakk>\n       \\<Longrightarrow> c = r", "by (simp add: no_1_2)"], ["proof (state)\nthis:\n  c = r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtains_1: \"obtains 1 c drinks2 0 <> t \\<Longrightarrow> c $ 2 = Some (Num 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obtains 1 c drinks2 0 <> t \\<Longrightarrow> c $ 2 = Some (Num 0)", "proof(induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. obtains 1 c drinks2 0 <> [] \\<Longrightarrow> c $ 2 = Some (Num 0)\n 2. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        obtains 1 c drinks2 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "case Nil"], ["proof (state)\nthis:\n  obtains 1 c drinks2 0 <> []\n\ngoal (2 subgoals):\n 1. obtains 1 c drinks2 0 <> [] \\<Longrightarrow> c $ 2 = Some (Num 0)\n 2. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        obtains 1 c drinks2 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "then"], ["proof (chain)\npicking this:\n  obtains 1 c drinks2 0 <> []", "show ?case"], ["proof (prove)\nusing this:\n  obtains 1 c drinks2 0 <> []\n\ngoal (1 subgoal):\n 1. c $ 2 = Some (Num 0)", "by (simp add: obtains_base)"], ["proof (state)\nthis:\n  c $ 2 = Some (Num 0)\n\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        obtains 1 c drinks2 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        obtains 1 c drinks2 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "case (Cons a t)"], ["proof (state)\nthis:\n  obtains 1 c drinks2 0 <> t \\<Longrightarrow> c $ 2 = Some (Num 0)\n  obtains 1 c drinks2 0 <> (a # t)\n\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        obtains 1 c drinks2 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "then"], ["proof (chain)\npicking this:\n  obtains 1 c drinks2 0 <> t \\<Longrightarrow> c $ 2 = Some (Num 0)\n  obtains 1 c drinks2 0 <> (a # t)", "show ?case"], ["proof (prove)\nusing this:\n  obtains 1 c drinks2 0 <> t \\<Longrightarrow> c $ 2 = Some (Num 0)\n  obtains 1 c drinks2 0 <> (a # t)\n\ngoal (1 subgoal):\n 1. c $ 2 = Some (Num 0)", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        obtains 1 c drinks2 0 <> (a # t); a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "apply (simp add: obtains_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        \\<exists>(s'', T)|\\<in>|possible_steps drinks2 0 <> aa b.\n           obtains 1 c drinks2 s'' (evaluate_updates T b <>) t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b ab ba.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        a = (aa, b); (ab, ba) |\\<in>| possible_steps drinks2 0 <> aa b;\n        obtains 1 c drinks2 ab (evaluate_updates ba b <>) t\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "apply (simp add: in_possible_steps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        a = (Label ba, b);\n        ((0, aa), ba) |\\<in>| drinks2 \\<and> can_take_transition ba b <>;\n        obtains 1 c drinks2 aa (evaluate_updates ba b <>) t\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "apply (simp add: drinks2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>obtains 1 c\n                 {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n                   ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n                 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        a = (Label select, b); can_take_transition select b <>;\n        obtains 1 c\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         1 (evaluate_updates select b <>) t\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "apply (simp add: drinks2_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        a = (Label select, b); can_take_transition select b <>;\n        obtains 1 c drinks2 1 (evaluate_updates select b <>) t\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "apply (simp add: select_def can_take apply_updates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        a = (STR ''select'', b); length b = 1;\n        obtains 1 c drinks2 1 <1 $:= Some (b ! 0), 2 $:= Some (Num 0)>\n         t\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "using no_change_1_1"], ["proof (prove)\nusing this:\n  obtains 1 ?c drinks2 1 ?r ?t \\<Longrightarrow> ?c = ?r\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>obtains 1 c drinks2 0 <> t \\<Longrightarrow>\n                c $ 2 = Some (Num 0);\n        a = (STR ''select'', b); length b = 1;\n        obtains 1 c drinks2 1 <1 $:= Some (b ! 0), 2 $:= Some (Num 0)>\n         t\\<rbrakk>\n       \\<Longrightarrow> c $ 2 = Some (Num 0)", "by fastforce"], ["proof (state)\nthis:\n  c $ 2 = Some (Num 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtains_1_1_2:\n  \"obtains 1 c1 drinks2 1 r t \\<Longrightarrow>\n   obtains 1 c2 drinks 1 r t \\<Longrightarrow>\n   c1 = r \\<and> c2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obtains 1 c1 drinks2 1 r t; obtains 1 c2 drinks 1 r t\\<rbrakk>\n    \\<Longrightarrow> c1 = r \\<and> c2 = r", "proof(induct t arbitrary: r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>obtains 1 c1 drinks2 1 r [];\n        obtains 1 c2 drinks 1 r []\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r\n 2. \\<And>a t r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        obtains 1 c1 drinks2 1 r (a # t);\n        obtains 1 c2 drinks 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "case Nil"], ["proof (state)\nthis:\n  obtains 1 c1 drinks2 1 r []\n  obtains 1 c2 drinks 1 r []\n\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>obtains 1 c1 drinks2 1 r [];\n        obtains 1 c2 drinks 1 r []\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r\n 2. \\<And>a t r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        obtains 1 c1 drinks2 1 r (a # t);\n        obtains 1 c2 drinks 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "then"], ["proof (chain)\npicking this:\n  obtains 1 c1 drinks2 1 r []\n  obtains 1 c2 drinks 1 r []", "show ?case"], ["proof (prove)\nusing this:\n  obtains 1 c1 drinks2 1 r []\n  obtains 1 c2 drinks 1 r []\n\ngoal (1 subgoal):\n 1. c1 = r \\<and> c2 = r", "by (simp add: obtains_base)"], ["proof (state)\nthis:\n  c1 = r \\<and> c2 = r\n\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        obtains 1 c1 drinks2 1 r (a # t);\n        obtains 1 c2 drinks 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        obtains 1 c1 drinks2 1 r (a # t);\n        obtains 1 c2 drinks 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "case (Cons a t)"], ["proof (state)\nthis:\n  \\<lbrakk>obtains 1 c1 drinks2 1 ?r t; obtains 1 c2 drinks 1 ?r t\\<rbrakk>\n  \\<Longrightarrow> c1 = ?r \\<and> c2 = ?r\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 c2 drinks 1 r (a # t)\n\ngoal (1 subgoal):\n 1. \\<And>a t r.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        obtains 1 c1 drinks2 1 r (a # t);\n        obtains 1 c2 drinks 1 r (a # t)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>obtains 1 c1 drinks2 1 ?r t; obtains 1 c2 drinks 1 ?r t\\<rbrakk>\n  \\<Longrightarrow> c1 = ?r \\<and> c2 = ?r\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 c2 drinks 1 r (a # t)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>obtains 1 c1 drinks2 1 ?r t; obtains 1 c2 drinks 1 ?r t\\<rbrakk>\n  \\<Longrightarrow> c1 = ?r \\<and> c2 = ?r\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 c2 drinks 1 r (a # t)\n\ngoal (1 subgoal):\n 1. c1 = r \\<and> c2 = r", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        obtains 1 c1 drinks2 1 r (a # t); obtains 1 c2 drinks 1 r (a # t);\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply (simp add: obtains_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        \\<exists>(s'', T)|\\<in>|possible_steps drinks2 1 r aa b.\n           obtains 1 c1 drinks2 s'' (evaluate_updates T b r) t;\n        \\<exists>(s'', T)|\\<in>|possible_steps drinks 1 r aa b.\n           obtains 1 c2 drinks s'' (evaluate_updates T b r) t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b aaa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (aa, b); (aaa, ba) |\\<in>| possible_steps drinks2 1 r aa b;\n        obtains 1 c1 drinks2 aaa (evaluate_updates ba b r) t;\n        (ab, bb) |\\<in>| possible_steps drinks 1 r aa b;\n        obtains 1 c2 drinks ab (evaluate_updates bb b r) t\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply (simp add: in_possible_steps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label ba, b);\n        ((1, aa), ba) |\\<in>| drinks2 \\<and> can_take_transition ba b r;\n        obtains 1 c1 drinks2 aa (evaluate_updates ba b r) t;\n        ((1, ab), bb) |\\<in>| drinks \\<and>\n        Label bb = Label ba \\<and> can_take_transition bb b r;\n        obtains 1 c2 drinks ab (evaluate_updates bb b r) t\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply (simp add: drinks2_def drinks_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1\n                             {|((0, 1), select), ((1, 1), vend_nothing),\n                               ((1, 2), coin), ((2, 2), coin),\n                               ((2, 2), vend_fail), ((2, 3), vend)|}\n                             1 r t;\n                    obtains 1 c2\n                     {|((0, 1), select), ((1, 1), coin),\n                       ((1, 1), vend_fail), ((1, 2), vend)|}\n                     1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label ba, b);\n        (aa = 1 \\<and> ba = vend_nothing \\<or>\n         aa = 2 \\<and> ba = coin) \\<and>\n        can_take_transition ba b r;\n        obtains 1 c1\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         aa (evaluate_updates ba b r) t;\n        (ab = 1 \\<and> bb = coin \\<or>\n         ab = 1 \\<and> bb = vend_fail \\<or> ab = 2 \\<and> bb = vend) \\<and>\n        Label bb = Label ba \\<and> can_take_transition bb b r;\n        obtains 1 c2\n         {|((0, 1), select), ((1, 1), coin), ((1, 1), vend_fail),\n           ((1, 2), vend)|}\n         ab (evaluate_updates bb b r) t\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1\n                             {|((0, 1), select), ((1, 1), vend_nothing),\n                               ((1, 2), coin), ((2, 2), coin),\n                               ((2, 2), vend_fail), ((2, 3), vend)|}\n                             1 r t;\n                    obtains 1 c2\n                     {|((0, 1), select), ((1, 1), coin),\n                       ((1, 1), vend_fail), ((1, 2), vend)|}\n                     1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label ba, b);\n        obtains 1 c1\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         aa (evaluate_updates ba b r) t;\n        obtains 1 c2\n         {|((0, 1), select), ((1, 1), coin), ((1, 1), vend_fail),\n           ((1, 2), vend)|}\n         ab (evaluate_updates bb b r) t;\n        aa = 1 \\<and> ba = vend_nothing \\<or> aa = 2 \\<and> ba = coin;\n        can_take_transition ba b r;\n        ab = 1 \\<and> bb = coin \\<or>\n        ab = 1 \\<and> bb = vend_fail \\<or> ab = 2 \\<and> bb = vend;\n        Label bb = Label ba; can_take_transition bb b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply (simp add: drinks2_def[symmetric] drinks_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label ba, b);\n        obtains 1 c1 drinks2 aa (evaluate_updates ba b r) t;\n        obtains 1 c2 drinks ab (evaluate_updates bb b r) t;\n        aa = 1 \\<and> ba = vend_nothing \\<or> aa = 2 \\<and> ba = coin;\n        can_take_transition ba b r;\n        ab = 1 \\<and> bb = coin \\<or>\n        ab = 1 \\<and> bb = vend_fail \\<or> ab = 2 \\<and> bb = vend;\n        Label bb = Label ba; can_take_transition bb b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r \\<and> c2 = r", "apply safe"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition vend_nothing b r;\n        Label coin = Label vend_nothing;\n        can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition vend_nothing b r;\n        Label coin = Label vend_nothing;\n        can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 9. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 10. \\<And>b aa ba ab bb.\n        \\<lbrakk>\\<And>r.\n                    \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                     obtains 1 c2 drinks 1 r t\\<rbrakk>\n                    \\<Longrightarrow> c1 = r \\<and> c2 = r;\n         a = (Label coin, b);\n         obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n         obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n         can_take_transition coin b r; Label vend_fail = Label coin;\n         can_take_transition vend_fail b r\\<rbrakk>\n        \\<Longrightarrow> c2 = r\nA total of 12 subgoals...", "using Cons.prems(1) no_change_1_1"], ["proof (prove)\nusing this:\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 ?c drinks2 1 ?r ?t \\<Longrightarrow> ?c = ?r\n\ngoal (12 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition vend_nothing b r;\n        Label coin = Label vend_nothing;\n        can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition vend_nothing b r;\n        Label coin = Label vend_nothing;\n        can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 9. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 10. \\<And>b aa ba ab bb.\n        \\<lbrakk>\\<And>r.\n                    \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                     obtains 1 c2 drinks 1 r t\\<rbrakk>\n                    \\<Longrightarrow> c1 = r \\<and> c2 = r;\n         a = (Label coin, b);\n         obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n         obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n         can_take_transition coin b r; Label vend_fail = Label coin;\n         can_take_transition vend_fail b r\\<rbrakk>\n        \\<Longrightarrow> c2 = r\nA total of 12 subgoals...", "apply blast"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition vend_nothing b r;\n        Label coin = Label vend_nothing;\n        can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 9. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 10. \\<And>b aa ba ab bb.\n        \\<lbrakk>\\<And>r.\n                    \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                     obtains 1 c2 drinks 1 r t\\<rbrakk>\n                    \\<Longrightarrow> c1 = r \\<and> c2 = r;\n         a = (Label coin, b);\n         obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n         obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n         can_take_transition coin b r; Label vend = Label coin;\n         can_take_transition vend b r\\<rbrakk>\n        \\<Longrightarrow> c1 = r\nA total of 11 subgoals...", "apply (simp add: coin_def vend_nothing_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 9. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 10. \\<And>b aa ba ab bb.\n        \\<lbrakk>\\<And>r.\n                    \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                     obtains 1 c2 drinks 1 r t\\<rbrakk>\n                    \\<Longrightarrow> c1 = r \\<and> c2 = r;\n         a = (Label coin, b);\n         obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n         obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n         can_take_transition coin b r; Label vend = Label coin;\n         can_take_transition vend b r\\<rbrakk>\n        \\<Longrightarrow> c2 = r", "using Cons.prems(1) no_change_1_1"], ["proof (prove)\nusing this:\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 ?c drinks2 1 ?r ?t \\<Longrightarrow> ?c = ?r\n\ngoal (10 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 9. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 10. \\<And>b aa ba ab bb.\n        \\<lbrakk>\\<And>r.\n                    \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                     obtains 1 c2 drinks 1 r t\\<rbrakk>\n                    \\<Longrightarrow> c1 = r \\<and> c2 = r;\n         a = (Label coin, b);\n         obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n         obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n         can_take_transition coin b r; Label vend = Label coin;\n         can_take_transition vend b r\\<rbrakk>\n        \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend_fail = Label vend_nothing;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 9. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply (simp add: vend_fail_def vend_nothing_def apply_updates_def)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using Cons.prems(1) no_change_1_1"], ["proof (prove)\nusing this:\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 ?c drinks2 1 ?r ?t \\<Longrightarrow> ?c = ?r\n\ngoal (8 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 8. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label vend_nothing, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates vend_nothing b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition vend_nothing b r;\n        Label vend = Label vend_nothing;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 7. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply (metis drinks_rejects_future numeral_eq_one_iff obtains.cases obtains_recognises semiring_norm(85))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using no_1_2"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 ?c drinks2 2 ?r ?t\n\ngoal (6 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 6. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using no_1_2"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 ?c drinks2 2 ?r ?t\n\ngoal (5 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates coin b r) t;\n        can_take_transition coin b r; can_take_transition coin b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 5. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using Cons.prems(1) no_change_1_1"], ["proof (prove)\nusing this:\n  obtains 1 c1 drinks2 1 r (a # t)\n  obtains 1 ?c drinks2 1 ?r ?t \\<Longrightarrow> ?c = ?r\n\ngoal (4 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 4. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using no_1_2"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 ?c drinks2 2 ?r ?t\n\ngoal (3 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 1 (evaluate_updates vend_fail b r) t;\n        can_take_transition coin b r; Label vend_fail = Label coin;\n        can_take_transition vend_fail b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 3. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using no_1_2"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 ?c drinks2 2 ?r ?t\n\ngoal (2 subgoals):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c1 = r\n 2. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "using no_1_2"], ["proof (prove)\nusing this:\n  \\<not> obtains 1 ?c drinks2 2 ?r ?t\n\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<And>r.\n                   \\<lbrakk>obtains 1 c1 drinks2 1 r t;\n                    obtains 1 c2 drinks 1 r t\\<rbrakk>\n                   \\<Longrightarrow> c1 = r \\<and> c2 = r;\n        a = (Label coin, b);\n        obtains 1 c1 drinks2 2 (evaluate_updates coin b r) t;\n        obtains 1 c2 drinks 2 (evaluate_updates vend b r) t;\n        can_take_transition coin b r; Label vend = Label coin;\n        can_take_transition vend b r\\<rbrakk>\n       \\<Longrightarrow> c2 = r", "by blast"], ["proof (state)\nthis:\n  c1 = r \\<and> c2 = r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtains_1_c2:\n  \"obtains 1 c1 drinks2 0 <> t \\<Longrightarrow> obtains 1 c2 drinks 0 <> t \\<Longrightarrow> c2 $ 2 = Some (Num 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n     obtains 1 c2 drinks 0 <> t\\<rbrakk>\n    \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "proof(induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>obtains 1 c1 drinks2 0 <> [];\n     obtains 1 c2 drinks 0 <> []\\<rbrakk>\n    \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n 2. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        obtains 1 c1 drinks2 0 <> (a # t);\n        obtains 1 c2 drinks 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "case Nil"], ["proof (state)\nthis:\n  obtains 1 c1 drinks2 0 <> []\n  obtains 1 c2 drinks 0 <> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>obtains 1 c1 drinks2 0 <> [];\n     obtains 1 c2 drinks 0 <> []\\<rbrakk>\n    \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n 2. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        obtains 1 c1 drinks2 0 <> (a # t);\n        obtains 1 c2 drinks 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "then"], ["proof (chain)\npicking this:\n  obtains 1 c1 drinks2 0 <> []\n  obtains 1 c2 drinks 0 <> []", "show ?case"], ["proof (prove)\nusing this:\n  obtains 1 c1 drinks2 0 <> []\n  obtains 1 c2 drinks 0 <> []\n\ngoal (1 subgoal):\n 1. c2 $ 2 = Some (Num 0)", "by (simp add: obtains_base)"], ["proof (state)\nthis:\n  c2 $ 2 = Some (Num 0)\n\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        obtains 1 c1 drinks2 0 <> (a # t);\n        obtains 1 c2 drinks 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        obtains 1 c1 drinks2 0 <> (a # t);\n        obtains 1 c2 drinks 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "case (Cons a t)"], ["proof (state)\nthis:\n  \\<lbrakk>obtains 1 c1 drinks2 0 <> t; obtains 1 c2 drinks 0 <> t\\<rbrakk>\n  \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n  obtains 1 c1 drinks2 0 <> (a # t)\n  obtains 1 c2 drinks 0 <> (a # t)\n\ngoal (1 subgoal):\n 1. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        obtains 1 c1 drinks2 0 <> (a # t);\n        obtains 1 c2 drinks 0 <> (a # t)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>obtains 1 c1 drinks2 0 <> t; obtains 1 c2 drinks 0 <> t\\<rbrakk>\n  \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n  obtains 1 c1 drinks2 0 <> (a # t)\n  obtains 1 c2 drinks 0 <> (a # t)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>obtains 1 c1 drinks2 0 <> t; obtains 1 c2 drinks 0 <> t\\<rbrakk>\n  \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n  obtains 1 c1 drinks2 0 <> (a # t)\n  obtains 1 c2 drinks 0 <> (a # t)\n\ngoal (1 subgoal):\n 1. c2 $ 2 = Some (Num 0)", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        obtains 1 c1 drinks2 0 <> (a # t); obtains 1 c2 drinks 0 <> (a # t);\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply (simp add: obtains_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        \\<exists>(s'', T)|\\<in>|possible_steps drinks2 0 <> aa b.\n           obtains 1 c1 drinks2 s'' (evaluate_updates T b <>) t;\n        \\<exists>(s'', T)|\\<in>|possible_steps drinks 0 <> aa b.\n           obtains 1 c2 drinks s'' (evaluate_updates T b <>) t;\n        a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b aaa ba ab bb.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (aa, b); (aaa, ba) |\\<in>| possible_steps drinks2 0 <> aa b;\n        obtains 1 c1 drinks2 aaa (evaluate_updates ba b <>) t;\n        (ab, bb) |\\<in>| possible_steps drinks 0 <> aa b;\n        obtains 1 c2 drinks ab (evaluate_updates bb b <>) t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply (simp add: in_possible_steps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa ba ab bb.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (Label ba, b);\n        ((0, aa), ba) |\\<in>| drinks2 \\<and> can_take_transition ba b <>;\n        obtains 1 c1 drinks2 aa (evaluate_updates ba b <>) t;\n        ((0, ab), bb) |\\<in>| drinks \\<and>\n        Label bb = Label ba \\<and> can_take_transition bb b <>;\n        obtains 1 c2 drinks ab (evaluate_updates bb b <>) t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply (simp add: drinks2_def drinks_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b aa.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1\n                          {|((0, 1), select), ((1, 1), vend_nothing),\n                            ((1, 2), coin), ((2, 2), coin),\n                            ((2, 2), vend_fail), ((2, 3), vend)|}\n                          0 <> t;\n                 obtains 1 c2\n                  {|((0, 1), select), ((1, 1), coin), ((1, 1), vend_fail),\n                    ((1, 2), vend)|}\n                  0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (Label select, b); aa = 1;\n        obtains 1 c1\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         1 (evaluate_updates select b <>) t;\n        can_take_transition select b <>;\n        obtains 1 c2\n         {|((0, 1), select), ((1, 1), coin), ((1, 1), vend_fail),\n           ((1, 2), vend)|}\n         1 (evaluate_updates select b <>) t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1\n                          {|((0, 1), select), ((1, 1), vend_nothing),\n                            ((1, 2), coin), ((2, 2), coin),\n                            ((2, 2), vend_fail), ((2, 3), vend)|}\n                          0 <> t;\n                 obtains 1 c2\n                  {|((0, 1), select), ((1, 1), coin), ((1, 1), vend_fail),\n                    ((1, 2), vend)|}\n                  0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (Label select, b);\n        obtains 1 c1\n         {|((0, 1), select), ((1, 1), vend_nothing), ((1, 2), coin),\n           ((2, 2), coin), ((2, 2), vend_fail), ((2, 3), vend)|}\n         1 (evaluate_updates select b <>) t;\n        can_take_transition select b <>;\n        obtains 1 c2\n         {|((0, 1), select), ((1, 1), coin), ((1, 1), vend_fail),\n           ((1, 2), vend)|}\n         1 (evaluate_updates select b <>) t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply (simp add: drinks2_def[symmetric] drinks_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (Label select, b);\n        obtains 1 c1 drinks2 1 (evaluate_updates select b <>) t;\n        can_take_transition select b <>;\n        obtains 1 c2 drinks 1 (evaluate_updates select b <>) t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "apply (simp add: select_def can_take apply_updates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (STR ''select'', b);\n        obtains 1 c1 drinks2 1 <1 $:= Some (b ! 0), 2 $:= Some (Num 0)> t;\n        length b = 1;\n        obtains 1 c2 drinks 1 <1 $:= Some (b ! 0), 2 $:= Some (Num 0)>\n         t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "using obtains_1_1_2"], ["proof (prove)\nusing this:\n  \\<lbrakk>obtains 1 ?c1.0 drinks2 1 ?r ?t;\n   obtains 1 ?c2.0 drinks 1 ?r ?t\\<rbrakk>\n  \\<Longrightarrow> ?c1.0 = ?r \\<and> ?c2.0 = ?r\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n                 obtains 1 c2 drinks 0 <> t\\<rbrakk>\n                \\<Longrightarrow> c2 $ 2 = Some (Num 0);\n        a = (STR ''select'', b);\n        obtains 1 c1 drinks2 1 <1 $:= Some (b ! 0), 2 $:= Some (Num 0)> t;\n        length b = 1;\n        obtains 1 c2 drinks 1 <1 $:= Some (b ! 0), 2 $:= Some (Num 0)>\n         t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)", "by fastforce"], ["proof (state)\nthis:\n  c2 $ 2 = Some (Num 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma directly_subsumes: \"directly_subsumes drinks2 drinks 1 1 vend_fail vend_nothing\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directly_subsumes drinks2 drinks 1 1 vend_fail vend_nothing", "apply (rule direct_subsumption[of _ _ _ _ \"\\<lambda>c2. c2 $ 2 = Some (Num 0)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t c1 c2.\n       \\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n        obtains 1 c2 drinks 0 <> t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       subsumes vend_fail c vend_nothing", "apply (simp add: obtains_1_c2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       subsumes vend_fail c vend_nothing", "apply (rule subsumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       Label vend_nothing = Label vend_fail \\<and>\n       Arity vend_nothing = Arity vend_fail\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_nothing i c \\<longrightarrow>\n          can_take_transition vend_fail i c\n 3. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_nothing i c \\<longrightarrow>\n          evaluate_outputs vend_nothing i c = evaluate_outputs vend_fail i c\n 4. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_fail) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_nothing) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "apply (simp add: vend_fail_def vend_nothing_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_nothing i c \\<longrightarrow>\n          can_take_transition vend_fail i c\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_nothing i c \\<longrightarrow>\n          evaluate_outputs vend_nothing i c = evaluate_outputs vend_fail i c\n 3. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_fail) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_nothing) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "apply (simp add: vend_fail_def vend_nothing_def can_take value_gt_true)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_nothing i c \\<longrightarrow>\n          evaluate_outputs vend_nothing i c = evaluate_outputs vend_fail i c\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_fail) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_nothing) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "apply (simp add: vend_fail_def vend_nothing_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_fail) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_nothing) (Guards vend_nothing)\n           (Updates vend_nothing) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "by (simp add: posterior_separate_def vend_fail_def vend_nothing_def)"], ["", "lemma directly_subsumes_flip: \"directly_subsumes drinks2 drinks 1 1 vend_nothing vend_fail\""], ["proof (prove)\ngoal (1 subgoal):\n 1. directly_subsumes drinks2 drinks 1 1 vend_nothing vend_fail", "apply (rule direct_subsumption[of _ _ _ _ \"\\<lambda>c2. c2 $ 2 = Some (Num 0)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t c1 c2.\n       \\<lbrakk>obtains 1 c1 drinks2 0 <> t;\n        obtains 1 c2 drinks 0 <> t\\<rbrakk>\n       \\<Longrightarrow> c2 $ 2 = Some (Num 0)\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       subsumes vend_nothing c vend_fail", "apply (simp add: obtains_1_c2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       subsumes vend_nothing c vend_fail", "apply (rule subsumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       Label vend_fail = Label vend_nothing \\<and>\n       Arity vend_fail = Arity vend_nothing\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_fail i c \\<longrightarrow>\n          can_take_transition vend_nothing i c\n 3. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_fail i c \\<longrightarrow>\n          evaluate_outputs vend_fail i c = evaluate_outputs vend_nothing i c\n 4. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_nothing) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_fail) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "apply (simp add: vend_fail_def vend_nothing_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_fail i c \\<longrightarrow>\n          can_take_transition vend_nothing i c\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_fail i c \\<longrightarrow>\n          evaluate_outputs vend_fail i c = evaluate_outputs vend_nothing i c\n 3. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_nothing) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_fail) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "apply (simp add: vend_fail_def vend_nothing_def can_take value_gt_true)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>i.\n          can_take_transition vend_fail i c \\<longrightarrow>\n          evaluate_outputs vend_fail i c = evaluate_outputs vend_nothing i c\n 2. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_nothing) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_fail) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "apply (simp add: vend_fail_def vend_nothing_def can_take value_gt_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c $ 2 = Some (Num 0) \\<Longrightarrow>\n       \\<forall>p1 p2 i.\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_nothing) i c =\n          Some p2 \\<longrightarrow>\n          posterior_separate (Arity vend_fail) (Guards vend_fail)\n           (Updates vend_fail) i c =\n          Some p1 \\<longrightarrow>\n          (\\<forall>P r'.\n              p1 $ r' = None \\<or>\n              (P (p2 $ r') \\<longrightarrow> P (p1 $ r')))", "by (simp add: posterior_separate_def vend_fail_def vend_nothing_def)"], ["", "end"]]}