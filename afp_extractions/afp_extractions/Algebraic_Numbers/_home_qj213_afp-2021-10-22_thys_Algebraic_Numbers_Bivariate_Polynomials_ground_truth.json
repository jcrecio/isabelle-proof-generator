{"file_name": "/home/qj213/afp-2021-10-22/thys/Algebraic_Numbers/Bivariate_Polynomials.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Algebraic_Numbers", "problem_names": ["lemma poly2_by_map: \"poly2 p x = poly (map_poly (\\<lambda>c. poly c x) p)\"", "lemma poly2_const[simp]: \"poly2 [:[:a:]:] x y = a\"", "lemma poly2_smult[simp,hom_distribs]: \"poly2 (smult a p) x y = poly a x * poly2 p x y\"", "lemma poly2_pCons[simp,hom_distribs]: \"poly2 (pCons a p) x y = poly a x + y * poly2 p x y\"", "lemma poly2_monom: \"poly2 (monom a n) x y = poly a x * y ^ n\"", "lemma poly_poly_as_poly2: \"poly2 p x (poly q x) = poly (poly p q) x\"", "lemma poly2_ext:\n  fixes p q :: \"'a :: {ring_char_0,idom} poly poly\"\n  assumes \"\\<And>x y. poly2 p x y = poly2 q x y\" shows \"p = q\"", "lemma coeff_lift2_lift: \"coeff_lift2 = coeff_lift \\<circ> coeff_lift\"", "lemma degree_poly_lift[simp]: \"degree (poly_lift p) = degree p\"", "lemma poly_lift_0[simp]: \"poly_lift 0 = 0\"", "lemma poly_lift_0_iff[simp]: \"poly_lift p = 0 \\<longleftrightarrow> p = 0\"", "lemma poly_lift_pCons[simp]:\n  \"poly_lift (pCons a p) = pCons [:a:] (poly_lift p)\"", "lemma coeff_poly_lift[simp]:\n  fixes p:: \"'a :: comm_monoid_add poly\"\n  shows \"coeff (poly_lift p) i = coeff_lift (coeff p i)\"", "lemma pcompose_conv_poly: \"pcompose p q = poly (poly_lift p) q\"", "lemma (in comm_monoid_add_hom) map_poly_hom_coeff_lift[simp, hom_distribs]:\n  \"map_poly hom (coeff_lift a) = coeff_lift (hom a)\"", "lemma (in comm_ring_hom) map_poly_coeff_lift_hom:\n  \"map_poly (coeff_lift \\<circ> hom) p = map_poly (map_poly hom) (map_poly coeff_lift p)\"", "lemma poly_poly_lift[simp]:\n  fixes p :: \"'a :: comm_semiring_0 poly\"\n  shows \"poly (poly_lift p) [:x:] = [: poly p x :]\"", "lemma degree_poly_lift2[simp]:\n  \"degree (poly_lift2 p) = degree p\"", "lemma poly_lift2_0[simp]: \"poly_lift2 0 = 0\"", "lemma poly_lift2_0_iff[simp]: \"poly_lift2 p = 0 \\<longleftrightarrow> p = 0\"", "lemma poly_lift2_pCons[simp]:\n  \"poly_lift2 (pCons a p) = pCons [:[:a:]:] (poly_lift2 p)\"", "lemma poly_lift2_lift: \"poly_lift2 = poly_lift \\<circ> poly_lift\" (is \"?l = ?r\")", "lemma poly2_poly_lift[simp]: \"poly2 (poly_lift p) x y = poly p y\"", "lemma poly_lift2_nonzero:\n  assumes \"p \\<noteq> 0\" shows \"poly_lift2 p \\<noteq> 0\"", "lemma poly_y_x_fix_y_deg:\n  assumes ydeg: \"\\<forall>i\\<le>degree p. degree (coeff p i) \\<le> d\"\n  shows \"poly_y_x p = (\\<Sum>i\\<le>degree p. \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)\"\n    (is \"_ = sum (\\<lambda>i. sum (?f i) _) _\")", "lemma poly_y_x_fixed_deg:\n  fixes p :: \"'a :: comm_monoid_add poly poly\"\n  defines \"d \\<equiv> Max { degree (coeff p i) | i. i \\<le> degree p }\" \n  shows \"poly_y_x p = (\\<Sum>i\\<le>degree p. \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)\"", "lemma poly_y_x_swapped:\n  fixes p :: \"'a :: comm_monoid_add poly poly\"\n  defines \"d \\<equiv> Max { degree (coeff p i) | i. i \\<le> degree p }\" \n  shows \"poly_y_x p = (\\<Sum>j\\<le>d. \\<Sum>i\\<le>degree p. monom (monom (coeff (coeff p i) j) i) j)\"", "lemma poly2_poly_y_x[simp]: \"poly2 (poly_y_x p) x y = poly2 p y x\"", "lemma poly_monom_mult:\n  fixes p :: \"'a :: comm_semiring_1\"\n  shows \"poly (monom p i * q ^ j) y = poly (monom p j * [:y:] ^ i) (poly q y)\"", "lemma poly_poly_y_x:\n  fixes p :: \"'a :: comm_semiring_1 poly poly\"\n  shows \"poly (poly (poly_y_x p) q) y = poly (poly p [:y:]) (poly q y)\"", "lemma map_poly_sum_commute:\n  assumes \"h 0 = 0\" \"\\<forall>p q. h (p + q) = h p + h q\"\n  shows \"sum (\\<lambda>i. map_poly h (f i)) S = map_poly h (sum f S)\"", "lemma poly_y_x_const: \"poly_y_x [:p:] = poly_lift p\" (is \"?l = ?r\")", "lemma poly_y_x_pCons:\n  shows \"poly_y_x (pCons a p) = poly_lift a + map_poly (pCons 0) (poly_y_x p)\"", "lemma poly_y_x_pCons_0: \"poly_y_x (pCons 0 p) = map_poly (pCons 0) (poly_y_x p)\"", "lemma poly_y_x_map_poly_pCons_0: \"poly_y_x (map_poly (pCons 0) p) = pCons 0 (poly_y_x p)\"", "lemma poly_y_x_poly_lift:\n  fixes p :: \"'a :: comm_monoid_add poly\"\n  shows \"poly_y_x (poly_lift p) = [:p:]\"", "lemma poly_y_x_id[simp]:\n  fixes p:: \"'a :: comm_monoid_add poly poly\"\n  shows \"poly_y_x (poly_y_x p) = p\"", "lemma inv_poly_y_x[simp]: \"Hilbert_Choice.inv poly_y_x = poly_y_x\"", "lemma pCons_as_add:\n  fixes p :: \"'a :: comm_semiring_1 poly\"\n  shows \"pCons a p = [:a:] + monom 1 1 * p\"", "lemma mult_pCons_0: \"(*) (pCons 0 1) = pCons 0\"", "lemma pCons_0_as_mult:(*TODO: Move *)\n  shows \"pCons (0 :: 'a :: comm_semiring_1)  = (\\<lambda>p. pCons 0 1 * p)\"", "lemma map_poly_pCons_0_as_mult:\n  fixes p :: \"'a :: comm_semiring_1 poly poly\"\n  shows \"map_poly (pCons 0) p = [:pCons 0 1:] * p\"", "lemma poly_y_x_monom:\n  fixes a :: \"'a :: comm_semiring_1 poly\"\n  shows \"poly_y_x (monom a n) = smult (monom 1 n) (poly_lift a)\"", "lemma poly_y_x_smult:\n  fixes c :: \"'a :: comm_semiring_1 poly\"\n  shows \"poly_y_x (smult c p) = poly_lift c * poly_y_x p\" (is \"?l = ?r\")", "lemma Max_degree_coeff_pCons:\n  \"Max { degree (coeff (pCons a p) i) | i. i \\<le> degree (pCons a p)} =\n   max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})\"", "lemma degree_poly_y_x:\n  fixes p :: \"'a :: comm_ring_1 poly poly\"\n  assumes \"p \\<noteq> 0\"\n  shows \"degree (poly_y_x p) = Max { degree (coeff p i) | i. i \\<le> degree p }\"\n    (is \"_ = ?d p\")"], "translations": [["", "lemma poly2_by_map: \"poly2 p x = poly (map_poly (\\<lambda>c. poly c x) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 p x = poly (map_poly (\\<lambda>c. poly c x) p)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa. poly2 p x xa = poly (map_poly (\\<lambda>c. poly c x) p) xa", "unfolding poly2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       poly (poly p [:xa:]) x = poly (map_poly (\\<lambda>c. poly c x) p) xa", "by (induct p; simp)"], ["", "lemma poly2_const[simp]: \"poly2 [:[:a:]:] x y = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 [:[:a:]:] x y = a", "by (simp add: poly2_def)"], ["", "lemma poly2_smult[simp,hom_distribs]: \"poly2 (smult a p) x y = poly a x * poly2 p x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (smult a p) x y = poly a x * poly2 p x y", "by (simp add: poly2_def)"], ["", "interpretation poly2_hom: comm_semiring_hom \"\\<lambda>p. poly2 p x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_semiring_hom (\\<lambda>p. poly2 p x y)", "by (unfold_locales; simp add: poly2_def)"], ["", "interpretation poly2_hom: comm_ring_hom \"\\<lambda>p. poly2 p x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_ring_hom (\\<lambda>p. poly2 p x y)", ".."], ["", "interpretation poly2_hom: idom_hom \"\\<lambda>p. poly2 p x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idom_hom (\\<lambda>p. poly2 p x y)", ".."], ["", "lemma poly2_pCons[simp,hom_distribs]: \"poly2 (pCons a p) x y = poly a x + y * poly2 p x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (pCons a p) x y = poly a x + y * poly2 p x y", "by (simp add: poly2_def)"], ["", "lemma poly2_monom: \"poly2 (monom a n) x y = poly a x * y ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (monom a n) x y = poly a x * y ^ n", "by (auto simp: poly_monom poly2_def)"], ["", "lemma poly_poly_as_poly2: \"poly2 p x (poly q x) = poly (poly p q) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 p x (poly q x) = poly (poly p q) x", "by (induct p; simp add:poly2_def)"], ["", "text \\<open>The following lemma is an extension rule for bivariate polynomials.\\<close>"], ["", "lemma poly2_ext:\n  fixes p q :: \"'a :: {ring_char_0,idom} poly poly\"\n  assumes \"\\<And>x y. poly2 p x y = poly2 q x y\" shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "proof(intro poly_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. poly (poly p x) xa = poly (poly q x) xa", "fix r x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. poly (poly p x) xa = poly (poly q x) xa", "show \"poly (poly p r) x = poly (poly q r) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly p r) x = poly (poly q r) x", "unfolding poly_poly_as_poly2[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 p x (poly r x) = poly2 q x (poly r x)", "using assms"], ["proof (prove)\nusing this:\n  poly2 p ?x ?y = poly2 q ?x ?y\n\ngoal (1 subgoal):\n 1. poly2 p x (poly r x) = poly2 q x (poly r x)", "by auto"], ["proof (state)\nthis:\n  poly (poly p r) x = poly (poly q r) x\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation (input) \"coeff_lift2 == \\<lambda>a. [:[: a :]:]\""], ["", "lemma coeff_lift2_lift: \"coeff_lift2 = coeff_lift \\<circ> coeff_lift\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. [:[:a:]:]) =\n    (\\<lambda>a. [:a:]) \\<circ> (\\<lambda>a. [:a:])", "by auto"], ["", "definition \"poly_lift = map_poly coeff_lift\""], ["", "definition \"poly_lift2 = map_poly coeff_lift2\""], ["", "lemma degree_poly_lift[simp]: \"degree (poly_lift p) = degree p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift p) = degree p", "unfolding poly_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly (\\<lambda>a. [:a:]) p) = degree p", "by(rule degree_map_poly; auto)"], ["", "lemma poly_lift_0[simp]: \"poly_lift 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift 0 = 0", "unfolding poly_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly (\\<lambda>a. [:a:]) 0 = 0", "by simp"], ["", "lemma poly_lift_0_iff[simp]: \"poly_lift p = 0 \\<longleftrightarrow> p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (poly_lift p = 0) = (p = 0)", "unfolding poly_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_poly (\\<lambda>a. [:a:]) p = 0) = (p = 0)", "by(induct p;simp)"], ["", "lemma poly_lift_pCons[simp]:\n  \"poly_lift (pCons a p) = pCons [:a:] (poly_lift p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift (pCons a p) = pCons [:a:] (poly_lift p)", "unfolding poly_lift_def map_poly_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a = (0::'a) \\<and> p = 0 then 0\n     else pCons [:a:] (map_poly (\\<lambda>a. [:a:]) p)) =\n    pCons [:a:] (map_poly (\\<lambda>a. [:a:]) p)", "by simp"], ["", "lemma coeff_poly_lift[simp]:\n  fixes p:: \"'a :: comm_monoid_add poly\"\n  shows \"coeff (poly_lift p) i = coeff_lift (coeff p i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (poly_lift p) i = [:coeff p i:]", "unfolding poly_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (map_poly (\\<lambda>a. [:a:]) p) i = [:coeff p i:]", "by simp"], ["", "lemma pcompose_conv_poly: \"pcompose p q = poly (poly_lift p) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<circ>\\<^sub>p q = poly (poly_lift p) q", "by (induction p) auto"], ["", "interpretation poly_lift_hom: inj_comm_monoid_add_hom poly_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_comm_monoid_add_hom poly_lift", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_comm_monoid_add_hom poly_lift", "interpret map_poly_inj_comm_monoid_add_hom coeff_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_comm_monoid_add_hom (\\<lambda>a. [:a:])", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inj_comm_monoid_add_hom poly_lift", "show \"inj_comm_monoid_add_hom poly_lift\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_comm_monoid_add_hom poly_lift", "by (unfold_locales, auto simp: poly_lift_def hom_distribs)"], ["proof (state)\nthis:\n  inj_comm_monoid_add_hom poly_lift\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation poly_lift_hom: inj_comm_semiring_hom poly_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_comm_semiring_hom poly_lift", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_comm_semiring_hom poly_lift", "interpret map_poly_inj_comm_semiring_hom coeff_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_comm_semiring_hom (\\<lambda>a. [:a:])", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inj_comm_semiring_hom poly_lift", "show \"inj_comm_semiring_hom poly_lift\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_comm_semiring_hom poly_lift", "by (unfold_locales, auto simp add: poly_lift_def hom_distribs)"], ["proof (state)\nthis:\n  inj_comm_semiring_hom poly_lift\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation poly_lift_hom: inj_comm_ring_hom poly_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_comm_ring_hom poly_lift", ".."], ["", "interpretation poly_lift_hom: inj_idom_hom poly_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_idom_hom poly_lift", ".."], ["", "lemma (in comm_monoid_add_hom) map_poly_hom_coeff_lift[simp, hom_distribs]:\n  \"map_poly hom (coeff_lift a) = coeff_lift (hom a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly hom [:a:] = [:hom a:]", "by (cases \"a=0\";simp)"], ["", "lemma (in comm_ring_hom) map_poly_coeff_lift_hom:\n  \"map_poly (coeff_lift \\<circ> hom) p = map_poly (map_poly hom) (map_poly coeff_lift p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) p =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) p)", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) 0 =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) 0)\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) p =\n        map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) p)\\<rbrakk>\n       \\<Longrightarrow> map_poly ((\\<lambda>a. [:a:]) \\<circ> hom)\n                          (pCons a p) =\n                         map_poly (map_poly hom)\n                          (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "case (pCons a p)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a) \\<or> p \\<noteq> 0\n  map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) p =\n  map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) p)\n\ngoal (2 subgoals):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) 0 =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) 0)\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) p =\n        map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) p)\\<rbrakk>\n       \\<Longrightarrow> map_poly ((\\<lambda>a. [:a:]) \\<circ> hom)\n                          (pCons a p) =\n                         map_poly (map_poly hom)\n                          (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "proof(cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))\n 2. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "case True"], ["proof (state)\nthis:\n  a = (0::'a)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))\n 2. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "hence \"poly_lift p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a = (0::'a)\n\ngoal (1 subgoal):\n 1. poly_lift p \\<noteq> 0", "using pCons(1)"], ["proof (prove)\nusing this:\n  a = (0::'a)\n  a \\<noteq> (0::'a) \\<or> p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. poly_lift p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  poly_lift p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))\n 2. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "thus ?thesis"], ["proof (prove)\nusing this:\n  poly_lift p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "unfolding map_poly_pCons[OF pCons(1)]"], ["proof (prove)\nusing this:\n  poly_lift p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. pCons (((\\<lambda>a. [:a:]) \\<circ> hom) a)\n     (map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) p) =\n    map_poly (map_poly hom) (pCons [:a:] (map_poly (\\<lambda>a. [:a:]) p))", "unfolding pCons(2) True"], ["proof (prove)\nusing this:\n  poly_lift p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. pCons (((\\<lambda>a. [:a:]) \\<circ> hom) (0::'a))\n     (map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) p)) =\n    map_poly (map_poly hom)\n     (pCons [:0::'a:] (map_poly (\\<lambda>a. [:a:]) p))", "by simp"], ["proof (state)\nthis:\n  map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n  map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "case False"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "hence \"coeff_lift a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. [:a:] \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  [:a:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) \\<Longrightarrow>\n    map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "thus ?thesis"], ["proof (prove)\nusing this:\n  [:a:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))", "unfolding map_poly_pCons[OF pCons(1)]"], ["proof (prove)\nusing this:\n  [:a:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. pCons (((\\<lambda>a. [:a:]) \\<circ> hom) a)\n     (map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) p) =\n    map_poly (map_poly hom) (pCons [:a:] (map_poly (\\<lambda>a. [:a:]) p))", "unfolding pCons(2)"], ["proof (prove)\nusing this:\n  [:a:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. pCons (((\\<lambda>a. [:a:]) \\<circ> hom) a)\n     (map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) p)) =\n    map_poly (map_poly hom) (pCons [:a:] (map_poly (\\<lambda>a. [:a:]) p))", "by simp"], ["proof (state)\nthis:\n  map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n  map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) (pCons a p) =\n  map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) (pCons a p))\n\ngoal (1 subgoal):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> hom) 0 =\n    map_poly (map_poly hom) (map_poly (\\<lambda>a. [:a:]) 0)", "qed auto"], ["", "lemma poly_poly_lift[simp]:\n  fixes p :: \"'a :: comm_semiring_0 poly\"\n  shows \"poly (poly_lift p) [:x:] = [: poly p x :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly_lift p) [:x:] = [:poly p x:]", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. poly (poly_lift 0) [:x:] = [:poly 0 x:]\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        poly (poly_lift p) [:x:] = [:poly p x:]\\<rbrakk>\n       \\<Longrightarrow> poly (poly_lift (pCons a p)) [:x:] =\n                         [:poly (pCons a p) x:]", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. poly (poly_lift 0) [:x:] = [:poly 0 x:]\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        poly (poly_lift p) [:x:] = [:poly p x:]\\<rbrakk>\n       \\<Longrightarrow> poly (poly_lift (pCons a p)) [:x:] =\n                         [:poly (pCons a p) x:]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly_lift 0) [:x:] = [:poly 0 x:]", "by simp"], ["proof (state)\nthis:\n  poly (poly_lift 0) [:x:] = [:poly 0 x:]\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        poly (poly_lift p) [:x:] = [:poly p x:]\\<rbrakk>\n       \\<Longrightarrow> poly (poly_lift (pCons a p)) [:x:] =\n                         [:poly (pCons a p) x:]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        poly (poly_lift p) [:x:] = [:poly p x:]\\<rbrakk>\n       \\<Longrightarrow> poly (poly_lift (pCons a p)) [:x:] =\n                         [:poly (pCons a p) x:]", "case (pCons a p)"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a) \\<or> p \\<noteq> 0\n  poly (poly_lift p) [:x:] = [:poly p x:]\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        poly (poly_lift p) [:x:] = [:poly p x:]\\<rbrakk>\n       \\<Longrightarrow> poly (poly_lift (pCons a p)) [:x:] =\n                         [:poly (pCons a p) x:]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly_lift (pCons a p)) [:x:] = [:poly (pCons a p) x:]", "unfolding poly_lift_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (pCons [:a:] (poly_lift p)) [:x:] = [:poly (pCons a p) x:]", "unfolding poly_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] + [:x:] * poly (poly_lift p) [:x:] = [:a + x * poly p x:]", "unfolding pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] + [:x:] * [:poly p x:] = [:a + x * poly p x:]", "apply (subst mult.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:a:] + [:poly p x:] * [:x:] = [:a + x * poly p x:]", "by auto"], ["proof (state)\nthis:\n  poly (poly_lift (pCons a p)) [:x:] = [:poly (pCons a p) x:]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma degree_poly_lift2[simp]:\n  \"degree (poly_lift2 p) = degree p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift2 p) = degree p", "unfolding poly_lift2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly (\\<lambda>a. [:[:a:]:]) p) = degree p", "by (induct p; auto)"], ["", "lemma poly_lift2_0[simp]: \"poly_lift2 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift2 0 = 0", "unfolding poly_lift2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly (\\<lambda>a. [:[:a:]:]) 0 = 0", "by simp"], ["", "lemma poly_lift2_0_iff[simp]: \"poly_lift2 p = 0 \\<longleftrightarrow> p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (poly_lift2 p = 0) = (p = 0)", "unfolding poly_lift2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_poly (\\<lambda>a. [:[:a:]:]) p = 0) = (p = 0)", "by(induct p;simp)"], ["", "lemma poly_lift2_pCons[simp]:\n  \"poly_lift2 (pCons a p) = pCons [:[:a:]:] (poly_lift2 p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift2 (pCons a p) = pCons [:[:a:]:] (poly_lift2 p)", "unfolding poly_lift2_def map_poly_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a = (0::'a) \\<and> p = 0 then 0\n     else pCons [:[:a:]:] (map_poly (\\<lambda>a. [:[:a:]:]) p)) =\n    pCons [:[:a:]:] (map_poly (\\<lambda>a. [:[:a:]:]) p)", "by simp"], ["", "lemma poly_lift2_lift: \"poly_lift2 = poly_lift \\<circ> poly_lift\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift2 = poly_lift \\<circ> poly_lift", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. poly_lift2 x = (poly_lift \\<circ> poly_lift) x", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. poly_lift2 x = (poly_lift \\<circ> poly_lift) x", "show \"?l p = ?r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift2 p = (poly_lift \\<circ> poly_lift) p", "unfolding poly_lift2_def coeff_lift2_lift poly_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly ((\\<lambda>a. [:a:]) \\<circ> (\\<lambda>a. [:a:])) p =\n    (map_poly (\\<lambda>a. [:a:]) \\<circ> map_poly (\\<lambda>a. [:a:])) p", "by (induct p; auto)"], ["proof (state)\nthis:\n  poly_lift2 p = (poly_lift \\<circ> poly_lift) p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly2_poly_lift[simp]: \"poly2 (poly_lift p) x y = poly p y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (poly_lift p) x y = poly p y", "by (induct p;simp)"], ["", "lemma poly_lift2_nonzero:\n  assumes \"p \\<noteq> 0\" shows \"poly_lift2 p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift2 p \\<noteq> 0", "unfolding poly_lift2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly (\\<lambda>a. [:[:a:]:]) p \\<noteq> 0", "apply (subst map_poly_zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>c. [:[:c:]:] = 0 \\<longrightarrow> c = (0::'a)\n 2. p \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<forall>c. [:[:c:]:] = 0 \\<longrightarrow> c = (0::'a)\n 2. p \\<noteq> 0", "by auto"], ["", "subsubsection \\<open>Swapping the Order of Variables\\<close>"], ["", "definition\n  \"poly_y_x p \\<equiv> \\<Sum>i\\<le>degree p. \\<Sum>j\\<le>degree (coeff p i). monom (monom (coeff (coeff p i) j) i) j\""], ["", "lemma poly_y_x_fix_y_deg:\n  assumes ydeg: \"\\<forall>i\\<le>degree p. degree (coeff p i) \\<le> d\"\n  shows \"poly_y_x p = (\\<Sum>i\\<le>degree p. \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)\"\n    (is \"_ = sum (\\<lambda>i. sum (?f i) _) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x p =\n    (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)", "unfolding poly_y_x_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>degree (coeff p i).\n           monom (monom (coeff (coeff p i) j) i) j) =\n    (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)", "apply (rule sum.cong,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..degree p} \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "unfolding atMost_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "assume i: \"i \\<le> degree p\""], ["proof (state)\nthis:\n  i \\<le> degree p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "let ?d = \"degree (coeff p i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "have \"{..d} = {..?d} \\<union> {Suc ?d .. d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..d} = {..degree (coeff p i)} \\<union> {Suc (degree (coeff p i))..d}", "using ydeg[rule_format, OF i]"], ["proof (prove)\nusing this:\n  degree (coeff p i) \\<le> d\n\ngoal (1 subgoal):\n 1. {..d} = {..degree (coeff p i)} \\<union> {Suc (degree (coeff p i))..d}", "by auto"], ["proof (state)\nthis:\n  {..d} = {..degree (coeff p i)} \\<union> {Suc (degree (coeff p i))..d}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "also"], ["proof (state)\nthis:\n  {..d} = {..degree (coeff p i)} \\<union> {Suc (degree (coeff p i))..d}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "have \"sum (?f i) ... = sum (?f i) {..?d} + sum (?f i) {Suc ?d .. d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<in>{..degree (coeff p i)} \\<union>\n                 {Suc (degree (coeff p i))..d}.\n       monom (monom (coeff (coeff p i) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        monom (monom (coeff (coeff p i) j) i) j) +\n    (\\<Sum>j = Suc (degree (coeff p i))..d.\n        monom (monom (coeff (coeff p i) j) i) j)", "by(rule sum.union_disjoint,auto)"], ["proof (state)\nthis:\n  (\\<Sum>j\\<in>{..degree (coeff p i)} \\<union>\n               {Suc (degree (coeff p i))..d}.\n     monom (monom (coeff (coeff p i) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      monom (monom (coeff (coeff p i) j) i) j) +\n  (\\<Sum>j = Suc (degree (coeff p i))..d.\n      monom (monom (coeff (coeff p i) j) i) j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "also"], ["proof (state)\nthis:\n  (\\<Sum>j\\<in>{..degree (coeff p i)} \\<union>\n               {Suc (degree (coeff p i))..d}.\n     monom (monom (coeff (coeff p i) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      monom (monom (coeff (coeff p i) j) i) j) +\n  (\\<Sum>j = Suc (degree (coeff p i))..d.\n      monom (monom (coeff (coeff p i) j) i) j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "{"], ["proof (state)\nthis:\n  (\\<Sum>j\\<in>{..degree (coeff p i)} \\<union>\n               {Suc (degree (coeff p i))..d}.\n     monom (monom (coeff (coeff p i) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      monom (monom (coeff (coeff p i) j) i) j) +\n  (\\<Sum>j = Suc (degree (coeff p i))..d.\n      monom (monom (coeff (coeff p i) j) i) j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "assume j: \"j \\<in> { Suc ?d .. d }\""], ["proof (state)\nthis:\n  j \\<in> {Suc (degree (coeff p i))..d}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "have \"coeff (coeff p i) j = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (coeff p i) j = (0::'a)", "apply (rule coeff_eq_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (coeff p i) < j", "using j"], ["proof (prove)\nusing this:\n  j \\<in> {Suc (degree (coeff p i))..d}\n\ngoal (1 subgoal):\n 1. degree (coeff p i) < j", "by auto"], ["proof (state)\nthis:\n  coeff (coeff p i) j = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "hence \"?f i j = 0\""], ["proof (prove)\nusing this:\n  coeff (coeff p i) j = (0::'a)\n\ngoal (1 subgoal):\n 1. monom (monom (coeff (coeff p i) j) i) j = 0", "by auto"], ["proof (state)\nthis:\n  monom (monom (coeff (coeff p i) j) i) j = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "}"], ["proof (state)\nthis:\n  ?j2 \\<in> {Suc (degree (coeff p i))..d} \\<Longrightarrow>\n  monom (monom (coeff (coeff p i) ?j2) i) ?j2 = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "hence \"sum (?f i) {Suc ?d .. d} = 0\""], ["proof (prove)\nusing this:\n  ?j2 \\<in> {Suc (degree (coeff p i))..d} \\<Longrightarrow>\n  monom (monom (coeff (coeff p i) ?j2) i) ?j2 = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = Suc (degree (coeff p i))..d.\n        monom (monom (coeff (coeff p i) j) i) j) =\n    0", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>j = Suc (degree (coeff p i))..d.\n      monom (monom (coeff (coeff p i) j) i) j) =\n  0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> degree p \\<Longrightarrow>\n       (\\<Sum>j\\<le>degree (coeff p x).\n           monom (monom (coeff (coeff p x) j) x) j) =\n       (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p x) j) x) j)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      monom (monom (coeff (coeff p i) j) i) j) +\n  0", "show \"sum (?f i) {..?d} = sum (?f i) {..d}\""], ["proof (prove)\nusing this:\n  (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      monom (monom (coeff (coeff p i) j) i) j) +\n  0\n\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree (coeff p i).\n        monom (monom (coeff (coeff p i) j) i) j) =\n    (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>j\\<le>degree (coeff p i).\n      monom (monom (coeff (coeff p i) j) i) j) =\n  (\\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_y_x_fixed_deg:\n  fixes p :: \"'a :: comm_monoid_add poly poly\"\n  defines \"d \\<equiv> Max { degree (coeff p i) | i. i \\<le> degree p }\" \n  shows \"poly_y_x p = (\\<Sum>i\\<le>degree p. \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x p =\n    (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)", "apply (rule poly_y_x_fix_y_deg, intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<le> degree p \\<Longrightarrow> degree (coeff p i) \\<le> d", "unfolding d_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> degree p \\<Longrightarrow>\n       degree (coeff p i)\n       \\<le> Max {degree (coeff p i) |i. i \\<le> degree p}", "by (subst Max_ge,auto)"], ["", "lemma poly_y_x_swapped:\n  fixes p :: \"'a :: comm_monoid_add poly poly\"\n  defines \"d \\<equiv> Max { degree (coeff p i) | i. i \\<le> degree p }\" \n  shows \"poly_y_x p = (\\<Sum>j\\<le>d. \\<Sum>i\\<le>degree p. monom (monom (coeff (coeff p i) j) i) j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x p =\n    (\\<Sum>j\\<le>d.\n        \\<Sum>i\\<le>degree p. monom (monom (coeff (coeff p i) j) i) j)", "using poly_y_x_fixed_deg[of p, folded d_def] sum.swap"], ["proof (prove)\nusing this:\n  poly_y_x p =\n  (\\<Sum>i\\<le>degree p.\n      \\<Sum>j\\<le>d. monom (monom (coeff (coeff p i) j) i) j)\n  (\\<Sum>i\\<in>?A. sum (?g i) ?B) = (\\<Sum>j\\<in>?B. \\<Sum>i\\<in>?A. ?g i j)\n\ngoal (1 subgoal):\n 1. poly_y_x p =\n    (\\<Sum>j\\<le>d.\n        \\<Sum>i\\<le>degree p. monom (monom (coeff (coeff p i) j) i) j)", "by auto"], ["", "lemma poly2_poly_y_x[simp]: \"poly2 (poly_y_x p) x y = poly2 p y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (poly_y_x p) x y = poly2 p y x", "using [[unfold_abs_def = false]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (poly_y_x p) x y = poly2 p y x", "apply(subst(3) poly_as_sum_of_monoms[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (poly_y_x p) x y =\n    poly2 (\\<Sum>i\\<le>degree p. monom (coeff p i) i) y x", "apply(subst poly_as_sum_of_monoms[symmetric,of \"coeff p _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2 (poly_y_x p) x y =\n    poly2\n     (\\<Sum>i\\<le>degree p.\n         monom\n          (\\<Sum>ia\\<le>degree (coeff p i). monom (coeff (coeff p i) ia) ia)\n          i)\n     y x", "unfolding poly_y_x_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>degree (coeff p i).\n            monom (monom (coeff (coeff p i) j) i) j)\n     x y =\n    poly2\n     (\\<Sum>i\\<le>degree p.\n         monom\n          (\\<Sum>ia\\<le>degree (coeff p i). monom (coeff (coeff p i) ia) ia)\n          i)\n     y x", "unfolding coeff_sum monom_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly2\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>degree (coeff p i).\n            monom (monom (coeff (coeff p i) j) i) j)\n     x y =\n    poly2\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>x\\<le>degree (coeff p i).\n            monom (monom (coeff (coeff p i) x) x) i)\n     y x", "unfolding poly2_hom.hom_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>xa\\<le>degree p.\n        \\<Sum>xb\\<le>degree (coeff p xa).\n           poly2 (monom (monom (coeff (coeff p xa) xb) xa) xb) x y) =\n    (\\<Sum>xa\\<le>degree p.\n        \\<Sum>xb\\<le>degree (coeff p xa).\n           poly2 (monom (monom (coeff (coeff p xa) xb) xb) xa) y x)", "apply(rule sum.cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {..degree p} \\<Longrightarrow>\n       (\\<Sum>xb\\<le>degree (coeff p xa).\n           poly2 (monom (monom (coeff (coeff p xa) xb) xa) xb) x y) =\n       (\\<Sum>xb\\<le>degree (coeff p xa).\n           poly2 (monom (monom (coeff (coeff p xa) xb) xb) xa) y x)", "apply(rule sum.cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> {..degree p};\n        xaa \\<in> {..degree (coeff p xa)}\\<rbrakk>\n       \\<Longrightarrow> poly2\n                          (monom (monom (coeff (coeff p xa) xaa) xa) xaa) x\n                          y =\n                         poly2\n                          (monom (monom (coeff (coeff p xa) xaa) xaa) xa) y\n                          x", "unfolding poly2_monom poly_monom"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> {..degree p};\n        xaa \\<in> {..degree (coeff p xa)}\\<rbrakk>\n       \\<Longrightarrow> coeff (coeff p xa) xaa * x ^ xa * y ^ xaa =\n                         coeff (coeff p xa) xaa * y ^ xaa * x ^ xa", "unfolding mult.assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> {..degree p};\n        xaa \\<in> {..degree (coeff p xa)}\\<rbrakk>\n       \\<Longrightarrow> coeff (coeff p xa) xaa * (x ^ xa * y ^ xaa) =\n                         coeff (coeff p xa) xaa * (y ^ xaa * x ^ xa)", "unfolding mult.commute"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>xa \\<in> {..degree p};\n        xaa \\<in> {..degree (coeff p xa)}\\<rbrakk>\n       \\<Longrightarrow> coeff (coeff p xa) xaa * (x ^ xa * y ^ xaa) =\n                         coeff (coeff p xa) xaa * (x ^ xa * y ^ xaa)", ".."], ["", "context begin"], ["", "private"], ["", "lemma poly_monom_mult:\n  fixes p :: \"'a :: comm_semiring_1\"\n  shows \"poly (monom p i * q ^ j) y = poly (monom p j * [:y:] ^ i) (poly q y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (monom p i * q ^ j) y = poly (monom p j * [:y:] ^ i) (poly q y)", "unfolding poly_hom.hom_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (monom p i) y * poly (q ^ j) y =\n    poly (monom p j) (poly q y) * poly ([:y:] ^ i) (poly q y)", "unfolding poly_monom"], ["proof (prove)\ngoal (1 subgoal):\n 1. p * y ^ i * poly (q ^ j) y =\n    p * poly q y ^ j * poly ([:y:] ^ i) (poly q y)", "apply(subst mult.assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p * (y ^ i * poly (q ^ j) y) =\n    p * poly q y ^ j * poly ([:y:] ^ i) (poly q y)", "apply(subst(2) mult.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p * (poly (q ^ j) y * y ^ i) =\n    p * poly q y ^ j * poly ([:y:] ^ i) (poly q y)", "by (auto simp: mult.assoc)"], ["", "lemma poly_poly_y_x:\n  fixes p :: \"'a :: comm_semiring_1 poly poly\"\n  shows \"poly (poly (poly_y_x p) q) y = poly (poly p [:y:]) (poly q y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly (poly_y_x p) q) y = poly (poly p [:y:]) (poly q y)", "apply(subst(5) poly_as_sum_of_monoms[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly (poly_y_x p) q) y =\n    poly (poly (\\<Sum>i\\<le>degree p. monom (coeff p i) i) [:y:]) (poly q y)", "apply(subst poly_as_sum_of_monoms[symmetric,of \"coeff p _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly (poly (poly_y_x p) q) y =\n    poly\n     (poly\n       (\\<Sum>i\\<le>degree p.\n           monom\n            (\\<Sum>ia\\<le>degree (coeff p i).\n                monom (coeff (coeff p i) ia) ia)\n            i)\n       [:y:])\n     (poly q y)", "unfolding poly_y_x_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly\n     (poly\n       (\\<Sum>i\\<le>degree p.\n           \\<Sum>j\\<le>degree (coeff p i).\n              monom (monom (coeff (coeff p i) j) i) j)\n       q)\n     y =\n    poly\n     (poly\n       (\\<Sum>i\\<le>degree p.\n           monom\n            (\\<Sum>ia\\<le>degree (coeff p i).\n                monom (coeff (coeff p i) ia) ia)\n            i)\n       [:y:])\n     (poly q y)", "unfolding coeff_sum monom_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly\n     (poly\n       (\\<Sum>i\\<le>degree p.\n           \\<Sum>j\\<le>degree (coeff p i).\n              monom (monom (coeff (coeff p i) j) i) j)\n       q)\n     y =\n    poly\n     (poly\n       (\\<Sum>i\\<le>degree p.\n           \\<Sum>x\\<le>degree (coeff p i).\n              monom (monom (coeff (coeff p i) x) x) i)\n       [:y:])\n     (poly q y)", "unfolding poly_hom.hom_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>degree p.\n        \\<Sum>xa\\<le>degree (coeff p x).\n           poly (poly (monom (monom (coeff (coeff p x) xa) x) xa) q) y) =\n    (\\<Sum>x\\<le>degree p.\n        \\<Sum>xa\\<le>degree (coeff p x).\n           poly (poly (monom (monom (coeff (coeff p x) xa) xa) x) [:y:])\n            (poly q y))", "apply(rule sum.cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {..degree p} \\<Longrightarrow>\n       (\\<Sum>xa\\<le>degree (coeff p x).\n           poly (poly (monom (monom (coeff (coeff p x) xa) x) xa) q) y) =\n       (\\<Sum>xa\\<le>degree (coeff p x).\n           poly (poly (monom (monom (coeff (coeff p x) xa) xa) x) [:y:])\n            (poly q y))", "apply(rule sum.cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {..degree p};\n        xa \\<in> {..degree (coeff p x)}\\<rbrakk>\n       \\<Longrightarrow> poly\n                          (poly (monom (monom (coeff (coeff p x) xa) x) xa)\n                            q)\n                          y =\n                         poly\n                          (poly (monom (monom (coeff (coeff p x) xa) xa) x)\n                            [:y:])\n                          (poly q y)", "unfolding atMost_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<le> degree p; xa \\<le> degree (coeff p x)\\<rbrakk>\n       \\<Longrightarrow> poly\n                          (poly (monom (monom (coeff (coeff p x) xa) x) xa)\n                            q)\n                          y =\n                         poly\n                          (poly (monom (monom (coeff (coeff p x) xa) xa) x)\n                            [:y:])\n                          (poly q y)", "unfolding poly2_monom poly_monom"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<le> degree p; xa \\<le> degree (coeff p x)\\<rbrakk>\n       \\<Longrightarrow> poly (monom (coeff (coeff p x) xa) x * q ^ xa) y =\n                         poly (monom (coeff (coeff p x) xa) xa * [:y:] ^ x)\n                          (poly q y)", "apply(subst poly_monom_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<le> degree p; xa \\<le> degree (coeff p x)\\<rbrakk>\n       \\<Longrightarrow> poly (monom (coeff (coeff p x) xa) xa * [:y:] ^ x)\n                          (poly q y) =\n                         poly (monom (coeff (coeff p x) xa) xa * [:y:] ^ x)\n                          (poly q y)", ".."], ["", "end"], ["", "interpretation poly_y_x_hom: zero_hom poly_y_x"], ["proof (prove)\ngoal (1 subgoal):\n 1. zero_hom poly_y_x", "by (unfold_locales, auto simp: poly_y_x_def)"], ["", "interpretation poly_y_x_hom: one_hom poly_y_x"], ["proof (prove)\ngoal (1 subgoal):\n 1. one_hom poly_y_x", "by (unfold_locales, auto simp: poly_y_x_def monom_0)"], ["", "lemma map_poly_sum_commute:\n  assumes \"h 0 = 0\" \"\\<forall>p q. h (p + q) = h p + h q\"\n  shows \"sum (\\<lambda>i. map_poly h (f i)) S = map_poly h (sum f S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>S. map_poly h (f i)) = map_poly h (sum f S)", "apply(induct S rule: infinite_finite_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A.\n       infinite A \\<Longrightarrow>\n       (\\<Sum>i\\<in>A. map_poly h (f i)) = map_poly h (sum f A)\n 2. (\\<Sum>i\\<in>{}. map_poly h (f i)) = map_poly h (sum f {})\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum>i\\<in>F. map_poly h (f i)) = map_poly h (sum f F)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<in>insert x F. map_poly h (f i)) =\n                         map_poly h (sum f (insert x F))", "using map_poly_add[OF assms]"], ["proof (prove)\nusing this:\n  map_poly h (?p + ?q) = map_poly h ?p + map_poly h ?q\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       infinite A \\<Longrightarrow>\n       (\\<Sum>i\\<in>A. map_poly h (f i)) = map_poly h (sum f A)\n 2. (\\<Sum>i\\<in>{}. map_poly h (f i)) = map_poly h (sum f {})\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum>i\\<in>F. map_poly h (f i)) = map_poly h (sum f F)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i\\<in>insert x F. map_poly h (f i)) =\n                         map_poly h (sum f (insert x F))", "by auto"], ["", "lemma poly_y_x_const: \"poly_y_x [:p:] = poly_lift p\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "have \"?l = (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j)", "unfolding poly_y_x_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree [:p:].\n        \\<Sum>j\\<le>degree (coeff [:p:] i).\n           monom (monom (coeff (coeff [:p:] i) j) i) j) =\n    (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j)", "by (simp add: monom_0)"], ["proof (state)\nthis:\n  poly_y_x [:p:] = (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j)\n\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "also"], ["proof (state)\nthis:\n  poly_y_x [:p:] = (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j)\n\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "have \"... = poly_lift (\\<Sum>x\\<le>degree p. monom (coeff p x) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j) =\n    poly_lift (\\<Sum>x\\<le>degree p. monom (coeff p x) x)", "unfolding poly_lift_hom.hom_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j) =\n    (\\<Sum>x\\<le>degree p. poly_lift (monom (coeff p x) x))", "unfolding poly_lift_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j) =\n    (\\<Sum>x\\<le>degree p.\n        map_poly (\\<lambda>a. [:a:]) (monom (coeff p x) x))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j) =\n  poly_lift (\\<Sum>x\\<le>degree p. monom (coeff p x) x)\n\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "also"], ["proof (state)\nthis:\n  (\\<Sum>j\\<le>degree p. monom [:coeff p j:] j) =\n  poly_lift (\\<Sum>x\\<le>degree p. monom (coeff p x) x)\n\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "have \"... = poly_lift p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift (\\<Sum>x\\<le>degree p. monom (coeff p x) x) = poly_lift p", "unfolding poly_as_sum_of_monoms"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift p = poly_lift p", ".."], ["proof (state)\nthis:\n  poly_lift (\\<Sum>x\\<le>degree p. monom (coeff p x) x) = poly_lift p\n\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "finally"], ["proof (chain)\npicking this:\n  poly_y_x [:p:] = poly_lift p", "show ?thesis"], ["proof (prove)\nusing this:\n  poly_y_x [:p:] = poly_lift p\n\ngoal (1 subgoal):\n 1. poly_y_x [:p:] = poly_lift p", "."], ["proof (state)\nthis:\n  poly_y_x [:p:] = poly_lift p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_y_x_pCons:\n  shows \"poly_y_x (pCons a p) = poly_lift a + map_poly (pCons 0) (poly_y_x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "proof(cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "interpret ml: map_poly_comm_monoid_add_hom \"coeff_lift\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (\\<lambda>a. [:a:])", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "interpret mc: map_poly_comm_monoid_add_hom \"pCons 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (pCons (0::'c))", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "interpret mm: map_poly_comm_monoid_add_hom \"\\<lambda>x. monom x i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (\\<lambda>x. monom x i)", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "(* I know this is a worst kind of a proof... *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(subst(1) poly_y_x_fixed_deg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree (pCons a p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> degree (pCons a p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold degree_pCons_eq[OF False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(subst(2) atLeast0AtMost[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(subst atLeastAtMost_insertL[OF le0,symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>insert 0 {Suc 0..Suc (degree p)}.\n       \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                        i \\<le> Suc (degree p)}.\n          monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(subst sum.insert,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                      i \\<le> Suc (degree p)}.\n        monom (monom (coeff (coeff (pCons a p) 0) j) 0) j) +\n    (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold coeff_pCons_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                      i \\<le> Suc (degree p)}.\n        monom (monom (coeff a j) 0) j) +\n    (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold monom_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                      i \\<le> Suc (degree p)}.\n        monom [:coeff a j:] j) +\n    (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(fold coeff_lift_hom.map_poly_hom_monom poly_lift_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                      i \\<le> Suc (degree p)}.\n        poly_lift (monom (coeff a j) j)) +\n    (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(fold poly_lift_hom.hom_sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift\n     (\\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                       i \\<le> Suc (degree p)}.\n         monom (coeff a j) j) +\n    (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(subst poly_as_sum_of_monoms', subst Max_ge,simp,simp,force,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift a +\n    (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "apply(rule cong[of \"\\<lambda>x. poly_lift a + x\", OF refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = Suc 0..Suc (degree p).\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply(simp only: image_Suc_atLeastAtMost [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>Suc ` {0..degree p}.\n       \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                        i \\<le> Suc (degree p)}.\n          monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold atLeast0AtMost)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>Suc ` {..degree p}.\n       \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                        i \\<le> Suc (degree p)}.\n          monom (monom (coeff (coeff (pCons a p) i) j) i) j) =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply(subst sum.reindex,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((\\<lambda>i.\n             \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                              i \\<le> Suc (degree p)}.\n                monom (monom (coeff (coeff (pCons a p) i) j) i) j) \\<circ>\n         Suc)\n     {..degree p} =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>degree p.\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff (pCons a p) (Suc x)) j) (Suc x)) j) =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold coeff_pCons_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>degree p.\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (monom (coeff (coeff p x) j) (Suc x)) j) =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply(unfold monom_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<le>degree p.\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (pCons (0::'a) (monom (coeff (coeff p x) j) x)) j) =\n    map_poly (pCons (0::'a)) (poly_y_x p)", "apply (subst poly_y_x_fix_y_deg[of _ \"Max {degree (coeff (pCons a p) i) | i. i \\<le> Suc (degree p)}\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>i\\<le>degree p.\n       degree (coeff p i)\n       \\<le> Max {degree (coeff (pCons a p) i) |i. i \\<le> Suc (degree p)}\n 2. (\\<Sum>x\\<le>degree p.\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (pCons (0::'a) (monom (coeff (coeff p x) j) x)) j) =\n    map_poly (pCons (0::'a))\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                          i \\<le> Suc (degree p)}.\n            monom (monom (coeff (coeff p i) j) i) j)", "apply (intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<le> degree p \\<Longrightarrow>\n       degree (coeff p i)\n       \\<le> Max {degree (coeff (pCons a p) i) |i. i \\<le> Suc (degree p)}\n 2. (\\<Sum>x\\<le>degree p.\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (pCons (0::'a) (monom (coeff (coeff p x) j) x)) j) =\n    map_poly (pCons (0::'a))\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                          i \\<le> Suc (degree p)}.\n            monom (monom (coeff (coeff p i) j) i) j)", "apply (rule Max.coboundedI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       i \\<le> degree p \\<Longrightarrow>\n       finite {degree (coeff (pCons a p) i) |i. i \\<le> Suc (degree p)}\n 2. \\<And>i.\n       i \\<le> degree p \\<Longrightarrow>\n       degree (coeff p i)\n       \\<in> {degree (coeff (pCons a p) i) |i. i \\<le> Suc (degree p)}\n 3. (\\<Sum>x\\<le>degree p.\n        \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                         i \\<le> Suc (degree p)}.\n           monom (pCons (0::'a) (monom (coeff (coeff p x) j) x)) j) =\n    map_poly (pCons (0::'a))\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>Max {degree (coeff (pCons a p) i) |i.\n                          i \\<le> Suc (degree p)}.\n            monom (monom (coeff (coeff p i) j) i) j)", "by (auto simp: hom_distribs intro: exI[of _ \"Suc _\"])"], ["proof (state)\nthis:\n  poly_y_x (pCons a p) = poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "}"], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<Longrightarrow>\n  poly_y_x (pCons a p) = poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)", "by (simp add: True poly_y_x_const)"], ["proof (state)\nthis:\n  poly_y_x (pCons a p) = poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_y_x_pCons_0: \"poly_y_x (pCons 0 p) = map_poly (pCons 0) (poly_y_x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "proof(cases \"p=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "interpret mc: map_poly_comm_monoid_add_hom \"pCons 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (pCons (0::'b))", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "interpret mm: map_poly_comm_monoid_add_hom \"\\<lambda>x. monom x i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (\\<lambda>x. monom x i)", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "from False"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "apply (unfold poly_y_x_def degree_pCons_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i\\<le>Suc (degree p).\n        \\<Sum>j\\<le>degree (coeff (pCons 0 p) i).\n           monom (monom (coeff (coeff (pCons 0 p) i) j) i) j) =\n    map_poly (pCons (0::'a))\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>degree (coeff p i).\n            monom (monom (coeff (coeff p i) j) i) j)", "apply (unfold sum.atMost_Suc_shift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (coeff (pCons 0 p) 0).\n        monom (monom (coeff (coeff (pCons 0 p) 0) j) 0) j) +\n    (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>degree (coeff (pCons 0 p) (Suc i)).\n           monom (monom (coeff (coeff (pCons 0 p) (Suc i)) j) (Suc i)) j) =\n    map_poly (pCons (0::'a))\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>degree (coeff p i).\n            monom (monom (coeff (coeff p i) j) i) j)", "by (simp add: hom_distribs monom_Suc)"], ["proof (state)\nthis:\n  poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow>\n    poly_y_x (pCons 0 p) = map_poly (pCons (0::'a)) (poly_y_x p)", "qed simp"], ["", "lemma poly_y_x_map_poly_pCons_0: \"poly_y_x (map_poly (pCons 0) p) = pCons 0 (poly_y_x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)", "let ?l = \"\\<lambda>i j. monom (monom (coeff (pCons 0 (coeff p i)) j) i) j\""], ["proof (state)\ngoal (1 subgoal):\n 1. poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)", "let ?r = \"\\<lambda>i j. pCons 0 (monom (monom (coeff (coeff p i) j) i) j)\""], ["proof (state)\ngoal (1 subgoal):\n 1. poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)", "have *: \"(\\<Sum>j\\<le>degree (pCons 0 (coeff p i)). ?l i j) = (\\<Sum>j\\<le>degree (coeff p i). ?r i j)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "proof(cases \"coeff p i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. coeff p i = 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))\n 2. coeff p i \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "case True"], ["proof (state)\nthis:\n  coeff p i = 0\n\ngoal (2 subgoals):\n 1. coeff p i = 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))\n 2. coeff p i \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "then"], ["proof (chain)\npicking this:\n  coeff p i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  coeff p i = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n      monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      pCons 0 (monom (monom (coeff (coeff p i) j) i) j))\n\ngoal (1 subgoal):\n 1. coeff p i \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. coeff p i \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "case False"], ["proof (state)\nthis:\n  coeff p i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff p i \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "apply (unfold degree_pCons_eq[OF False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j\\<le>Suc (degree (coeff p i)).\n        monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "apply (unfold sum.atMost_Suc_shift,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia\\<le>degree (coeff p i).\n        monom (monom (coeff (coeff p i) ia) i) (Suc ia)) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        pCons 0 (monom (monom (coeff (coeff p i) j) i) j))", "apply (fold monom_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia\\<le>degree (coeff p i).\n        monom (monom (coeff (coeff p i) ia) i) (Suc ia)) =\n    (\\<Sum>j\\<le>degree (coeff p i).\n        monom (monom (coeff (coeff p i) j) i) (Suc j))", ".."], ["proof (state)\nthis:\n  (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n      monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n  (\\<Sum>j\\<le>degree (coeff p i).\n      pCons 0 (monom (monom (coeff (coeff p i) j) i) j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>j\\<le>degree (pCons (0::'a) (coeff p ?i)).\n      monom (monom (coeff (pCons (0::'a) (coeff p ?i)) j) ?i) j) =\n  (\\<Sum>j\\<le>degree (coeff p ?i).\n      pCons 0 (monom (monom (coeff (coeff p ?i) j) ?i) j))\n\ngoal (1 subgoal):\n 1. poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)", "apply (unfold poly_y_x_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree (map_poly (pCons (0::'a)) p).\n        \\<Sum>j\\<le>degree (coeff (map_poly (pCons (0::'a)) p) i).\n           monom (monom (coeff (coeff (map_poly (pCons (0::'a)) p) i) j) i)\n            j) =\n    pCons 0\n     (\\<Sum>i\\<le>degree p.\n         \\<Sum>j\\<le>degree (coeff p i).\n            monom (monom (coeff (coeff p i) j) i) j)", "apply (unfold hom_distribs pCons_0_hom.degree_map_poly_hom pCons_0_hom.coeff_map_poly_hom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>degree (pCons (0::'a) (coeff p i)).\n           monom (monom (coeff (pCons (0::'a) (coeff p i)) j) i) j) =\n    (\\<Sum>x\\<le>degree p.\n        \\<Sum>xa\\<le>degree (coeff p x).\n           pCons 0 (monom (monom (coeff (coeff p x) xa) x) xa))", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree p.\n        \\<Sum>j\\<le>degree (coeff p i).\n           pCons 0 (monom (monom (coeff (coeff p i) j) i) j)) =\n    (\\<Sum>x\\<le>degree p.\n        \\<Sum>xa\\<le>degree (coeff p x).\n           pCons 0 (monom (monom (coeff (coeff p x) xa) x) xa))", ".."], ["proof (state)\nthis:\n  poly_y_x (map_poly (pCons (0::'a)) p) = pCons 0 (poly_y_x p)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation poly_y_x_hom: comm_monoid_add_hom \"poly_y_x :: 'a :: comm_monoid_add poly poly \\<Rightarrow> _\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_hom poly_y_x", "proof (unfold_locales)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. poly_y_x (x + y) = poly_y_x x + poly_y_x y", "fix p q :: \"'a poly poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. poly_y_x (x + y) = poly_y_x x + poly_y_x y", "show \"poly_y_x (p + q) = poly_y_x p + poly_y_x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (p + q) = poly_y_x p + poly_y_x q", "proof (induct p arbitrary:q)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q. poly_y_x (0 + q) = poly_y_x 0 + poly_y_x q\n 2. \\<And>a p q.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        \\<And>q. poly_y_x (p + q) = poly_y_x p + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + q) =\n                         poly_y_x (pCons a p) + poly_y_x q", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>q. poly_y_x (0 + q) = poly_y_x 0 + poly_y_x q\n 2. \\<And>a p q.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        \\<And>q. poly_y_x (p + q) = poly_y_x p + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + q) =\n                         poly_y_x (pCons a p) + poly_y_x q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (0 + q) = poly_y_x 0 + poly_y_x q", "by simp"], ["proof (state)\nthis:\n  poly_y_x (0 + q) = poly_y_x 0 + poly_y_x q\n\ngoal (1 subgoal):\n 1. \\<And>a p q.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        \\<And>q. poly_y_x (p + q) = poly_y_x p + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + q) =\n                         poly_y_x (pCons a p) + poly_y_x q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p q.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        \\<And>q. poly_y_x (p + q) = poly_y_x p + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + q) =\n                         poly_y_x (pCons a p) + poly_y_x q", "case p: (pCons a p)"], ["proof (state)\nthis:\n  a \\<noteq> 0 \\<or> p \\<noteq> 0\n  poly_y_x (p + ?q) = poly_y_x p + poly_y_x ?q\n\ngoal (1 subgoal):\n 1. \\<And>a p q.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        \\<And>q. poly_y_x (p + q) = poly_y_x p + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + q) =\n                         poly_y_x (pCons a p) + poly_y_x q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p + q) = poly_y_x (pCons a p) + poly_y_x q", "proof (induct q)"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_y_x (pCons a p + 0) = poly_y_x (pCons a p) + poly_y_x 0\n 2. \\<And>aa q.\n       \\<lbrakk>aa \\<noteq> 0 \\<or> q \\<noteq> 0;\n        poly_y_x (pCons a p + q) =\n        poly_y_x (pCons a p) + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + pCons aa q) =\n                         poly_y_x (pCons a p) + poly_y_x (pCons aa q)", "case q: (pCons b q)"], ["proof (state)\nthis:\n  b \\<noteq> 0 \\<or> q \\<noteq> 0\n  poly_y_x (pCons a p + q) = poly_y_x (pCons a p) + poly_y_x q\n\ngoal (2 subgoals):\n 1. poly_y_x (pCons a p + 0) = poly_y_x (pCons a p) + poly_y_x 0\n 2. \\<And>aa q.\n       \\<lbrakk>aa \\<noteq> 0 \\<or> q \\<noteq> 0;\n        poly_y_x (pCons a p + q) =\n        poly_y_x (pCons a p) + poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p + pCons aa q) =\n                         poly_y_x (pCons a p) + poly_y_x (pCons aa q)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p + pCons b q) =\n    poly_y_x (pCons a p) + poly_y_x (pCons b q)", "apply (unfold add_pCons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons (a + b) (p + q)) =\n    poly_y_x (pCons a p) + poly_y_x (pCons b q)", "apply (unfold poly_y_x_pCons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift (a + b) + map_poly (pCons (0::'a)) (poly_y_x (p + q)) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p) +\n    (poly_lift b + map_poly (pCons (0::'a)) (poly_y_x q))", "apply (unfold p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift (a + b) + map_poly (pCons (0::'a)) (poly_y_x p + poly_y_x q) =\n    poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p) +\n    (poly_lift b + map_poly (pCons (0::'a)) (poly_y_x q))", "by (simp add: poly_y_x_const ac_simps hom_distribs)"], ["proof (state)\nthis:\n  poly_y_x (pCons a p + pCons b q) =\n  poly_y_x (pCons a p) + poly_y_x (pCons b q)\n\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p + 0) = poly_y_x (pCons a p) + poly_y_x 0", "qed auto"], ["proof (state)\nthis:\n  poly_y_x (pCons a p + q) = poly_y_x (pCons a p) + poly_y_x q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  poly_y_x (p + q) = poly_y_x p + poly_y_x q\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>@{const poly_y_x} is bijective.\\<close>"], ["", "lemma poly_y_x_poly_lift:\n  fixes p :: \"'a :: comm_monoid_add poly\"\n  shows \"poly_y_x (poly_lift p) = [:p:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (poly_lift p) = [:p:]", "apply(subst poly_y_x_fix_y_deg[of _ 0],force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree (poly_lift p).\n        \\<Sum>j\\<le>0.\n           monom (monom (coeff (coeff (poly_lift p) i) j) i) j) =\n    [:p:]", "apply(subst(10) poly_as_sum_of_monoms[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree (poly_lift p).\n        \\<Sum>j\\<le>0.\n           monom (monom (coeff (coeff (poly_lift p) i) j) i) j) =\n    [:\\<Sum>i\\<le>degree p. monom (coeff p i) i:]", "by (auto simp add: monom_sum monom_0 hom_distribs)"], ["", "lemma poly_y_x_id[simp]:\n  fixes p:: \"'a :: comm_monoid_add poly poly\"\n  shows \"poly_y_x (poly_y_x p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (poly_y_x p) = p", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_y_x (poly_y_x 0) = 0\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. poly_y_x (poly_y_x 0) = 0\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (poly_y_x 0) = 0", "by simp"], ["proof (state)\nthis:\n  poly_y_x (poly_y_x 0) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "case (pCons a p)"], ["proof (state)\nthis:\n  a \\<noteq> 0 \\<or> p \\<noteq> 0\n  poly_y_x (poly_y_x p) = p\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "interpret mm: map_poly_comm_monoid_add_hom \"\\<lambda>x. monom x i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (\\<lambda>x. monom x i)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "interpret mc: map_poly_comm_monoid_add_hom \"pCons 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom (pCons (0::'d))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "have pCons_as_add: \"pCons a p = [:a:] + pCons 0 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pCons a p = [:a:] + pCons 0 p", "by simp"], ["proof (state)\nthis:\n  pCons a p = [:a:] + pCons 0 p\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (poly_y_x p) = p\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (poly_y_x (pCons a p)) = pCons a p", "from pCons"], ["proof (chain)\npicking this:\n  a \\<noteq> 0 \\<or> p \\<noteq> 0\n  poly_y_x (poly_y_x p) = p", "show ?case"], ["proof (prove)\nusing this:\n  a \\<noteq> 0 \\<or> p \\<noteq> 0\n  poly_y_x (poly_y_x p) = p\n\ngoal (1 subgoal):\n 1. poly_y_x (poly_y_x (pCons a p)) = pCons a p", "apply (unfold pCons_as_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n     poly_y_x (poly_y_x p) = p\\<rbrakk>\n    \\<Longrightarrow> poly_y_x (poly_y_x ([:a:] + pCons 0 p)) =\n                      [:a:] + pCons 0 p", "by (simp add: poly_y_x_pCons poly_y_x_poly_lift poly_y_x_map_poly_pCons_0 hom_distribs)"], ["proof (state)\nthis:\n  poly_y_x (poly_y_x (pCons a p)) = pCons a p\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation poly_y_x_hom:\n  bijective \"poly_y_x :: 'a :: comm_monoid_add poly poly \\<Rightarrow> _\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bijective poly_y_x", "by(unfold bijective_eq_bij, auto intro!:o_bij[of poly_y_x])"], ["", "lemma inv_poly_y_x[simp]: \"Hilbert_Choice.inv poly_y_x = poly_y_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv poly_y_x = poly_y_x", "by auto"], ["", "interpretation poly_y_x_hom: comm_monoid_add_isom poly_y_x"], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_isom poly_y_x", "by (unfold_locales, auto)"], ["", "lemma pCons_as_add:\n  fixes p :: \"'a :: comm_semiring_1 poly\"\n  shows \"pCons a p = [:a:] + monom 1 1 * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pCons a p = [:a:] + monom (1::'a) 1 * p", "by (auto simp: monom_Suc)"], ["", "lemma mult_pCons_0: \"(*) (pCons 0 1) = pCons 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (*) (pCons (0::'a) 1) = pCons (0::'a)", "by auto"], ["", "lemma pCons_0_as_mult:(*TODO: Move *)\n  shows \"pCons (0 :: 'a :: comm_semiring_1)  = (\\<lambda>p. pCons 0 1 * p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pCons (0::'a) = (*) (pCons (0::'a) 1)", "by auto"], ["", "lemma map_poly_pCons_0_as_mult:\n  fixes p :: \"'a :: comm_semiring_1 poly poly\"\n  shows \"map_poly (pCons 0) p = [:pCons 0 1:] * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly (pCons (0::'a)) p = [:pCons (0::'a) 1:] * p", "apply (subst(1) pCons_0_as_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly ((*) (pCons (0::'a) 1)) p = [:pCons (0::'a) 1:] * p", "apply (fold smult_as_map_poly)"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (pCons (0::'a) 1) p = [:pCons (0::'a) 1:] * p", "by simp"], ["", "lemma poly_y_x_monom:\n  fixes a :: \"'a :: comm_semiring_1 poly\"\n  shows \"poly_y_x (monom a n) = smult (monom 1 n) (poly_lift a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "proof (cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "case True"], ["proof (state)\nthis:\n  a = 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "then"], ["proof (chain)\npicking this:\n  a = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  a = 0\n\ngoal (1 subgoal):\n 1. poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "by simp"], ["proof (state)\nthis:\n  poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "case False"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "interpret map_poly_comm_monoid_add_hom \"\\<lambda>x. c * x\" for c :: \"'a poly\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_monoid_add_hom ((*) c)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "from False"], ["proof (chain)\npicking this:\n  a \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)", "apply (unfold poly_y_x_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i\\<le>degree (monom a n).\n        \\<Sum>j\\<le>degree (coeff (monom a n) i).\n           monom (monom (coeff (coeff (monom a n) i) j) i) j) =\n    smult (monom (1::'a) n) (poly_lift a)", "apply (unfold degree_monom_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i\\<le>n.\n        \\<Sum>j\\<le>degree (coeff (monom a n) i).\n           monom (monom (coeff (coeff (monom a n) i) j) i) j) =\n    smult (monom (1::'a) n) (poly_lift a)", "apply (subst(2) lessThan_Suc_atMost[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i<Suc n.\n        \\<Sum>j\\<le>degree (coeff (monom a n) i).\n           monom (monom (coeff (coeff (monom a n) i) j) i) j) =\n    smult (monom (1::'a) n) (poly_lift a)", "apply (unfold sum.lessThan_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>i<n.\n        \\<Sum>j\\<le>degree (coeff (monom a n) i).\n           monom (monom (coeff (coeff (monom a n) i) j) i) j) +\n    (\\<Sum>j\\<le>degree (coeff (monom a n) n).\n        monom (monom (coeff (coeff (monom a n) n) j) n) j) =\n    smult (monom (1::'a) n) (poly_lift a)", "apply (subst sum.neutral,force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    0 +\n    (\\<Sum>j\\<le>degree (coeff (monom a n) n).\n        monom (monom (coeff (coeff (monom a n) n) j) n) j) =\n    smult (monom (1::'a) n) (poly_lift a)", "apply (subst(14) poly_as_sum_of_monoms[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    0 +\n    (\\<Sum>j\\<le>degree (coeff (monom a n) n).\n        monom (monom (coeff (coeff (monom a n) n) j) n) j) =\n    smult (monom (1::'a) n)\n     (\\<Sum>i\\<le>degree (poly_lift a). monom (coeff (poly_lift a) i) i)", "apply (unfold smult_as_map_poly)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    0 +\n    (\\<Sum>j\\<le>degree (coeff (monom a n) n).\n        monom (monom (coeff (coeff (monom a n) n) j) n) j) =\n    map_poly ((*) (monom (1::'a) n))\n     (\\<Sum>i\\<le>degree (poly_lift a). monom (coeff (poly_lift a) i) i)", "by (auto simp: monom_altdef[unfolded x_as_monom x_pow_n,symmetric] hom_distribs)"], ["proof (state)\nthis:\n  poly_y_x (monom a n) = smult (monom (1::'a) n) (poly_lift a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_y_x_smult:\n  fixes c :: \"'a :: comm_semiring_1 poly\"\n  shows \"poly_y_x (smult c p) = poly_lift c * poly_y_x p\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "have \"smult c p = (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult c p = (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i)", "by (metis (no_types, lifting) degree_smult_le poly_as_sum_of_monoms' sum.cong)"], ["proof (state)\nthis:\n  smult c p = (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i)\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "also"], ["proof (state)\nthis:\n  smult c p = (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i)\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "have \"... = (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i) =\n    (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i) =\n  (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i)\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>degree p. monom (coeff (smult c p) i) i) =\n  (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i)\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "have \"poly_y_x ... = poly_lift c * (\\<Sum>i\\<le>degree p. smult (monom 1 i) (poly_lift (coeff p i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i) =\n    poly_lift c *\n    (\\<Sum>i\\<le>degree p. smult (monom (1::'a) i) (poly_lift (coeff p i)))", "by (simp add: poly_y_x_monom hom_distribs)"], ["proof (state)\nthis:\n  poly_y_x (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i) =\n  poly_lift c *\n  (\\<Sum>i\\<le>degree p. smult (monom (1::'a) i) (poly_lift (coeff p i)))\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "also"], ["proof (state)\nthis:\n  poly_y_x (\\<Sum>i\\<le>degree p. monom (c * coeff p i) i) =\n  poly_lift c *\n  (\\<Sum>i\\<le>degree p. smult (monom (1::'a) i) (poly_lift (coeff p i)))\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "have \"... = poly_lift c * poly_y_x (\\<Sum>i\\<le>degree p. monom (coeff p i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift c *\n    (\\<Sum>i\\<le>degree p.\n        smult (monom (1::'a) i) (poly_lift (coeff p i))) =\n    poly_lift c * poly_y_x (\\<Sum>i\\<le>degree p. monom (coeff p i) i)", "by (simp add: poly_y_x_monom hom_distribs)"], ["proof (state)\nthis:\n  poly_lift c *\n  (\\<Sum>i\\<le>degree p. smult (monom (1::'a) i) (poly_lift (coeff p i))) =\n  poly_lift c * poly_y_x (\\<Sum>i\\<le>degree p. monom (coeff p i) i)\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "finally"], ["proof (chain)\npicking this:\n  poly_y_x (smult c p) =\n  poly_lift c * poly_y_x (\\<Sum>i\\<le>degree p. monom (coeff p i) i)", "show ?thesis"], ["proof (prove)\nusing this:\n  poly_y_x (smult c p) =\n  poly_lift c * poly_y_x (\\<Sum>i\\<le>degree p. monom (coeff p i) i)\n\ngoal (1 subgoal):\n 1. poly_y_x (smult c p) = poly_lift c * poly_y_x p", "by (simp add: poly_as_sum_of_monoms)"], ["proof (state)\nthis:\n  poly_y_x (smult c p) = poly_lift c * poly_y_x p\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation poly_y_x_hom:\n  comm_semiring_isom \"poly_y_x :: 'a :: comm_semiring_1 poly poly \\<Rightarrow> _\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_semiring_isom poly_y_x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. poly_y_x (x * y) = poly_y_x x * poly_y_x y", "fix p q :: \"'a poly poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. poly_y_x (x * y) = poly_y_x x * poly_y_x y", "show \"poly_y_x (p * q) = poly_y_x p * poly_y_x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (p * q) = poly_y_x p * poly_y_x q", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. poly_y_x (0 * q) = poly_y_x 0 * poly_y_x q\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (p * q) = poly_y_x p * poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p * q) =\n                         poly_y_x (pCons a p) * poly_y_x q", "case (pCons a p)"], ["proof (state)\nthis:\n  a \\<noteq> 0 \\<or> p \\<noteq> 0\n  poly_y_x (p * q) = poly_y_x p * poly_y_x q\n\ngoal (2 subgoals):\n 1. poly_y_x (0 * q) = poly_y_x 0 * poly_y_x q\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        poly_y_x (p * q) = poly_y_x p * poly_y_x q\\<rbrakk>\n       \\<Longrightarrow> poly_y_x (pCons a p * q) =\n                         poly_y_x (pCons a p) * poly_y_x q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (pCons a p * q) = poly_y_x (pCons a p) * poly_y_x q", "apply (unfold mult_pCons_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (smult a q + pCons 0 (p * q)) =\n    poly_y_x (pCons a p) * poly_y_x q", "apply (unfold hom_distribs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_y_x (smult a q) + poly_y_x (pCons 0 (p * q)) =\n    poly_y_x (pCons a p) * poly_y_x q", "apply (unfold poly_y_x_smult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift a * poly_y_x q + poly_y_x (pCons 0 (p * q)) =\n    poly_y_x (pCons a p) * poly_y_x q", "apply (unfold poly_y_x_pCons_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift a * poly_y_x q + map_poly (pCons (0::'a)) (poly_y_x (p * q)) =\n    poly_y_x (pCons a p) * poly_y_x q", "apply (unfold pCons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_lift a * poly_y_x q +\n    map_poly (pCons (0::'a)) (poly_y_x p * poly_y_x q) =\n    poly_y_x (pCons a p) * poly_y_x q", "by (simp add: poly_y_x_pCons map_poly_pCons_0_as_mult field_simps)"], ["proof (state)\nthis:\n  poly_y_x (pCons a p * q) = poly_y_x (pCons a p) * poly_y_x q\n\ngoal (1 subgoal):\n 1. poly_y_x (0 * q) = poly_y_x 0 * poly_y_x q", "qed simp"], ["proof (state)\nthis:\n  poly_y_x (p * q) = poly_y_x p * poly_y_x q\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation poly_y_x_hom: comm_ring_isom \"poly_y_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_ring_isom poly_y_x", ".."], ["", "interpretation poly_y_x_hom: idom_isom \"poly_y_x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idom_isom poly_y_x", ".."], ["", "lemma Max_degree_coeff_pCons:\n  \"Max { degree (coeff (pCons a p) i) | i. i \\<le> degree (pCons a p)} =\n   max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "unfolding degree_pCons_eq[OF False]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {degree (coeff (pCons a p) i) |i. i \\<le> Suc (degree p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "unfolding image_Collect[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX i\\<in>{i. i \\<le> Suc (degree p)}. degree (coeff (pCons a p) i)) =\n    max (degree a) (MAX x\\<in>{x. x \\<le> degree p}. degree (coeff p x))", "unfolding atMost_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX i\\<in>{..Suc (degree p)}. degree (coeff (pCons a p) i)) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "apply(subst(1) atLeast0AtMost[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX i\\<in>{0..Suc (degree p)}. degree (coeff (pCons a p) i)) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "unfolding atLeastAtMost_insertL[OF le0,symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX i\\<in>insert 0 {Suc 0..Suc (degree p)}.\n        degree (coeff (pCons a p) i)) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "unfolding image_insert"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert (degree (coeff (pCons a p) 0))\n          ((\\<lambda>i. degree (coeff (pCons a p) i)) `\n           {Suc 0..Suc (degree p)})) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "apply(subst Max_insert,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (degree (coeff (pCons a p) 0))\n     (MAX i\\<in>{Suc 0..Suc (degree p)}. degree (coeff (pCons a p) i)) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "unfolding image_Suc_atLeastAtMost [symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (degree (coeff (pCons a p) 0))\n     (MAX i\\<in>Suc ` {0..degree p}. degree (coeff (pCons a p) i)) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "unfolding image_image"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (degree (coeff (pCons a p) 0))\n     (MAX x\\<in>{0..degree p}. degree (coeff (pCons a p) (Suc x))) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "unfolding atLeast0AtMost"], ["proof (prove)\ngoal (1 subgoal):\n 1. max (degree (coeff (pCons a p) 0))\n     (MAX x\\<in>{..degree p}. degree (coeff (pCons a p) (Suc x))) =\n    max (degree a) (MAX x\\<in>{..degree p}. degree (coeff p x))", "by simp"], ["proof (state)\nthis:\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n  max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow>\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)} =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "qed simp"], ["", "lemma degree_poly_y_x:\n  fixes p :: \"'a :: comm_ring_1 poly poly\"\n  assumes \"p \\<noteq> 0\"\n  shows \"degree (poly_y_x p) = Max { degree (coeff p i) | i. i \\<le> degree p }\"\n    (is \"_ = ?d p\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p}", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p}", "proof(induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x 0) = Max {degree (coeff 0 i) |i. i \\<le> degree 0}\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        p \\<noteq> 0 \\<Longrightarrow>\n        degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p};\n        pCons a p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> degree (poly_y_x (pCons a p)) =\n                         Max {degree (coeff (pCons a p) i) |i.\n                              i \\<le> degree (pCons a p)}", "interpret rhm: map_poly_comm_ring_hom coeff_lift"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_comm_ring_hom (\\<lambda>a. [:a:])", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x 0) = Max {degree (coeff 0 i) |i. i \\<le> degree 0}\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        p \\<noteq> 0 \\<Longrightarrow>\n        degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p};\n        pCons a p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> degree (poly_y_x (pCons a p)) =\n                         Max {degree (coeff (pCons a p) i) |i.\n                              i \\<le> degree (pCons a p)}", "let ?f = \"\\<lambda>p i j. monom (monom (coeff (coeff p i) j) i) j\""], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x 0) = Max {degree (coeff 0 i) |i. i \\<le> degree 0}\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        p \\<noteq> 0 \\<Longrightarrow>\n        degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p};\n        pCons a p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> degree (poly_y_x (pCons a p)) =\n                         Max {degree (coeff (pCons a p) i) |i.\n                              i \\<le> degree (pCons a p)}", "case (pCons a p)"], ["proof (state)\nthis:\n  a \\<noteq> 0 \\<or> p \\<noteq> 0\n  p \\<noteq> 0 \\<Longrightarrow>\n  degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p}\n  pCons a p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x 0) = Max {degree (coeff 0 i) |i. i \\<le> degree 0}\n 2. \\<And>a p.\n       \\<lbrakk>a \\<noteq> 0 \\<or> p \\<noteq> 0;\n        p \\<noteq> 0 \\<Longrightarrow>\n        degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p};\n        pCons a p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> degree (poly_y_x (pCons a p)) =\n                         Max {degree (coeff (pCons a p) i) |i.\n                              i \\<le> degree (pCons a p)}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "proof(cases \"p=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding True"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x [:a:]) =\n    Max {degree (coeff [:a:] i) |i. i \\<le> degree [:a:]}", "unfolding poly_y_x_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x 0)) =\n    Max {degree (coeff [:a:] i) |i. i \\<le> degree [:a:]}", "by auto"], ["proof (state)\nthis:\n  degree (poly_y_x (pCons a p)) =\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "note IH = pCons(2)[OF False]"], ["proof (state)\nthis:\n  degree (poly_y_x p) = Max {degree (coeff p i) |i. i \\<le> degree p}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "let ?a = \"poly_lift a\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "let ?p = \"map_poly (pCons 0) (poly_y_x p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "proof(cases rule:linorder_cases[of \"degree ?a\" \"degree ?p\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. degree (poly_lift a)\n    < degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 3. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "case less"], ["proof (state)\nthis:\n  degree (poly_lift a) < degree (map_poly (pCons (0::'a)) (poly_y_x p))\n\ngoal (3 subgoals):\n 1. degree (poly_lift a)\n    < degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 3. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "have dle: \"degree a \\<le> degree (poly_y_x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a \\<le> degree (poly_y_x p)", "apply(rule le_trans[OF less_imp_le[OF less[simplified]]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x p) \\<le> degree (poly_y_x p)", "using degree_map_poly_le"], ["proof (prove)\nusing this:\n  degree (map_poly ?f ?p) \\<le> degree ?p\n\ngoal (1 subgoal):\n 1. degree (poly_y_x p) \\<le> degree (poly_y_x p)", "by auto"], ["proof (state)\nthis:\n  degree a \\<le> degree (poly_y_x p)\n\ngoal (3 subgoals):\n 1. degree (poly_lift a)\n    < degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 3. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding poly_y_x_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding degree_add_eq_right[OF less]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding Max_degree_coeff_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p)) =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "unfolding IH[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p)) =\n    max (degree a) (degree (poly_y_x p))", "unfolding max_absorb2[OF dle]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p)) = degree (poly_y_x p)", "apply (rule degree_map_poly)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (pCons (0::'a) (lead_coeff (poly_y_x p)) = 0) = (poly_y_x p = 0)", "by auto"], ["proof (state)\nthis:\n  degree (poly_y_x (pCons a p)) =\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n\ngoal (2 subgoals):\n 1. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "case equal"], ["proof (state)\nthis:\n  degree (poly_lift a) = degree (map_poly (pCons (0::'a)) (poly_y_x p))\n\ngoal (2 subgoals):\n 1. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "have dega: \"degree ?a = degree a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a) = degree a", "by auto"], ["proof (state)\nthis:\n  degree (poly_lift a) = degree a\n\ngoal (2 subgoals):\n 1. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "have degp: \"degree (poly_y_x p) = degree a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x p) = degree a", "using equal[unfolded dega]"], ["proof (prove)\nusing this:\n  degree a = degree (map_poly (pCons (0::'a)) (poly_y_x p))\n\ngoal (1 subgoal):\n 1. degree (poly_y_x p) = degree a", "using degree_map_poly[of \"pCons 0\" \"poly_y_x p\"]"], ["proof (prove)\nusing this:\n  degree a = degree (map_poly (pCons (0::'a)) (poly_y_x p))\n  (pCons (0::'a) (lead_coeff (poly_y_x p)) = 0) =\n  (poly_y_x p = 0) \\<Longrightarrow>\n  degree (map_poly (pCons (0::'a)) (poly_y_x p)) = degree (poly_y_x p)\n\ngoal (1 subgoal):\n 1. degree (poly_y_x p) = degree a", "by auto"], ["proof (state)\nthis:\n  degree (poly_y_x p) = degree a\n\ngoal (2 subgoals):\n 1. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "have *: \"degree (?a + ?p) = degree a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "proof(cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "case True"], ["proof (state)\nthis:\n  a = 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a\n 2. a \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "using equal"], ["proof (prove)\nusing this:\n  degree (poly_lift a) = degree (map_poly (pCons (0::'a)) (poly_y_x p))\n\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "unfolding True"], ["proof (prove)\nusing this:\n  degree (poly_lift 0) = degree (map_poly (pCons (0::'a)) (poly_y_x p))\n\ngoal (1 subgoal):\n 1. degree (poly_lift 0 + map_poly (pCons (0::'a)) (poly_y_x p)) = degree 0", "by auto"], ["proof (state)\nthis:\n  degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "case False"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a", "apply(rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p))\n    \\<le> degree a\n 2. degree a\n    \\<le> degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p))", "apply(rule degree_add_le, simp, fold equal, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a\n    \\<le> degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p))", "apply(rule le_degree)"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p))\n     (degree a) \\<noteq>\n    0", "unfolding coeff_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (poly_lift a) (degree a) +\n    coeff (map_poly (pCons (0::'a)) (poly_y_x p)) (degree a) \\<noteq>\n    0", "using False"], ["proof (prove)\nusing this:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff (poly_lift a) (degree a) +\n    coeff (map_poly (pCons (0::'a)) (poly_y_x p)) (degree a) \\<noteq>\n    0", "by auto"], ["proof (state)\nthis:\n  degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) = degree a\n\ngoal (2 subgoals):\n 1. degree (poly_lift a) =\n    degree (map_poly (pCons (0::'a)) (poly_y_x p)) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n 2. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding poly_y_x_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding Max_degree_coeff_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "unfolding IH[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a = max (degree a) (degree (poly_y_x p))", "unfolding degp"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree a = max (degree a) (degree a)", "by auto"], ["proof (state)\nthis:\n  degree (poly_y_x (pCons a p)) =\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "case greater"], ["proof (state)\nthis:\n  degree (map_poly (pCons (0::'a)) (poly_y_x p)) < degree (poly_lift a)\n\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "have dge: \"degree a \\<ge> degree (poly_y_x p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x p) \\<le> degree a", "apply(rule le_trans[OF _ less_imp_le[OF greater[simplified]]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x p) \\<le> degree (poly_y_x p)", "by auto"], ["proof (state)\nthis:\n  degree (poly_y_x p) \\<le> degree a\n\ngoal (1 subgoal):\n 1. degree (map_poly (pCons (0::'a)) (poly_y_x p))\n    < degree (poly_lift a) \\<Longrightarrow>\n    degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_y_x (pCons a p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding poly_y_x_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a + map_poly (pCons (0::'a)) (poly_y_x p)) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding degree_add_eq_left[OF greater]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a) =\n    Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}", "unfolding Max_degree_coeff_pCons"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a) =\n    max (degree a) (Max {degree (coeff p x) |x. x \\<le> degree p})", "unfolding IH[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a) = max (degree a) (degree (poly_y_x p))", "unfolding max_absorb1[OF dge]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (poly_lift a) = degree a", "by simp"], ["proof (state)\nthis:\n  degree (poly_y_x (pCons a p)) =\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree (poly_y_x (pCons a p)) =\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree (poly_y_x (pCons a p)) =\n  Max {degree (coeff (pCons a p) i) |i. i \\<le> degree (pCons a p)}\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    degree (poly_y_x 0) = Max {degree (coeff 0 i) |i. i \\<le> degree 0}", "qed auto"], ["", "end"]]}