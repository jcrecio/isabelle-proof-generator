{"file_name": "/home/qj213/afp-2021-10-22/thys/WHATandWHERE_Security/WHATWHERE_Security.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WHATandWHERE_Security", "problem_names": ["lemma d_equal_trans:\n\"\\<lbrakk> m =\\<^bsub>d\\<^esub> m'; m' =\\<^bsub>d\\<^esub> m'' \\<rbrakk> \\<Longrightarrow> m =\\<^bsub>d\\<^esub> m''\"", "lemma strongdlHPPB_aux: \n \"\\<And>V V' m1 m1' m2 p i \\<alpha>. \\<lbrakk> Strong_dlHPP_Bisimulation d PP R;\n  i < length V; (V,V') \\<in> R; \n  \\<langle>V!i,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle>; m1 \\<sim>\\<^bsub>d,(htchLocSet PP)\\<^esub> m1' \\<rbrakk>\n \\<Longrightarrow> (\\<exists>p' \\<alpha>' m2'. \\<langle>V'!i,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>'\\<rhd> \\<langle>p',m2'\\<rangle>\n  \\<and> stepResultsinR p p' R \\<and> (\\<alpha>,\\<alpha>') \\<in> R \\<and> \n  (dhequality_alternative d PP (pp (V!i)) m2 m2'))\"", "lemma strongdlHPPB_NDCIDCaux:\n\"\\<And>V V' i. \\<lbrakk>Strong_dlHPP_Bisimulation d PP R;\n  (V,V') \\<in> R; i < length V \\<rbrakk>\n        \\<Longrightarrow> (NDC d (V!i) \\<or> IDC d (V!i) (htchLoc (pp (V!i))))\"", "lemma WHATWHERE_empty:\n\"WHATWHERE_Secure []\""], "translations": [["", "lemma d_equal_trans:\n\"\\<lbrakk> m =\\<^bsub>d\\<^esub> m'; m' =\\<^bsub>d\\<^esub> m'' \\<rbrakk> \\<Longrightarrow> m =\\<^bsub>d\\<^esub> m''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m =\\<^bsub>d\\<^esub> m'; m' =\\<^bsub>d\\<^esub> m''\\<rbrakk>\n    \\<Longrightarrow> m =\\<^bsub>d\\<^esub> m''", "by (simp add: d_equal_def)"], ["", "abbreviation SRabbr :: \"('exp, 'id, 'val, 'com) TLSteps_curry\"\n(\"(1\\<langle>_,/_\\<rangle>) \\<rightarrow>\\<lhd>_\\<rhd>/ (1\\<langle>_,/_\\<rangle>)\" [0,0,0,0,0] 81)\nwhere\n\"\\<langle>c,m\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m'\\<rangle> \\<equiv> ((c,m),\\<alpha>,(p,m')) \\<in> SR\"\n\n\n\\<comment> \\<open>function for obtaining the unique memory (state) after one step for a command and a memory (state)\\<close>"], ["", "definition NextMem :: \"'com \\<Rightarrow> ('id, 'val) State \\<Rightarrow> ('id, 'val) State\"\n( \"\\<lbrakk>_\\<rbrakk>'(_')\" )\nwhere\n\"\\<lbrakk>c\\<rbrakk>(m) \\<equiv> (THE m'. (\\<exists>p \\<alpha>. \\<langle>c,m\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m'\\<rangle>))\"\n\n\\<comment> \\<open>function getting all escape hatches for some location\\<close>"], ["", "definition htchLoc :: \"nat \\<Rightarrow> ('d, 'exp) Hatches\"\nwhere\n\"htchLoc \\<iota> \\<equiv> {(d,e). (d,e,\\<iota>) \\<in> lH}\"\n\n\\<comment> \\<open>function for getting all escape hatches for some set of locations\\<close>"], ["", "definition htchLocSet :: \"nat set \\<Rightarrow> ('d, 'exp) Hatches\"\nwhere\n\"htchLocSet PP \\<equiv> \\<Union>{h. (\\<exists>\\<iota> \\<in> PP. h = htchLoc \\<iota>)}\"\n\n\\<comment> \\<open>predicate for (d,H)-equality\\<close>"], ["", "definition dH_equal :: \"'d \\<Rightarrow> ('d, 'exp) Hatches\n  \\<Rightarrow> ('id, 'val) State \\<Rightarrow> ('id, 'val) State \\<Rightarrow> bool\"\nwhere\n\"dH_equal d H m m' \\<equiv> (m =\\<^bsub>d\\<^esub> m' \\<and> \n  (\\<forall>(d',e) \\<in> H. (d' \\<le> d \\<longrightarrow> (E e m = E e m'))))\""], ["", "abbreviation dH_equal' :: \"('id, 'val) State \\<Rightarrow> 'd \\<Rightarrow> ('d, 'exp) Hatches\n  \\<Rightarrow> ('id, 'val) State \\<Rightarrow> bool\"\n( \"(_ \\<sim>\\<^bsub>_,_\\<^esub> _)\" )\nwhere\n\"m \\<sim>\\<^bsub>d,H\\<^esub> m' \\<equiv> dH_equal d H m m'\"\n\n\\<comment> \\<open>predicate indicating that a command is not a d-declassification command\\<close>"], ["", "definition NDC :: \"'d \\<Rightarrow> 'com \\<Rightarrow> bool\"\nwhere\n\"NDC d c \\<equiv> (\\<forall>m m'. m =\\<^bsub>d\\<^esub> m' \\<longrightarrow> \\<lbrakk>c\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>c\\<rbrakk>(m'))\"\n\n\\<comment> \\<open>predicate indicating an 'immediate d-declassification command' for a set of escape hatches\\<close>"], ["", "definition IDC :: \"'d \\<Rightarrow> 'com \\<Rightarrow> ('d, 'exp) Hatches \\<Rightarrow> bool\"\nwhere\n\"IDC d c H \\<equiv> (\\<exists>m m'. m =\\<^bsub>d\\<^esub> m' \\<and> \n  (\\<not> \\<lbrakk>c\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>c\\<rbrakk>(m')))\n  \\<and> (\\<forall>m m'. m \\<sim>\\<^bsub>d,H\\<^esub> m' \\<longrightarrow> \\<lbrakk>c\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>c\\<rbrakk>(m') )\""], ["", "definition stepResultsinR :: \"'com ProgramState \\<Rightarrow> 'com ProgramState \n  \\<Rightarrow> 'com Bisimulation_type \\<Rightarrow> bool\"\nwhere\n\"stepResultsinR p p' R \\<equiv> (p = None \\<and> p' = None) \\<or> \n  (\\<exists>c c'. (p = Some c \\<and> p' = Some c' \\<and> ([c],[c']) \\<in> R))\""], ["", "definition dhequality_alternative ::  \"'d \\<Rightarrow> nat set \\<Rightarrow> nat \n  \\<Rightarrow> ('id, 'val) State \\<Rightarrow> ('id, 'val) State \\<Rightarrow> bool\"\nwhere\n\"dhequality_alternative d PP \\<iota> m m' \\<equiv> m \\<sim>\\<^bsub>d,(htchLocSet PP)\\<^esub> m' \\<or>\n            (\\<not> (htchLoc \\<iota>) \\<subseteq> (htchLocSet PP))\""], ["", "definition Strong_dlHPP_Bisimulation :: \"'d \\<Rightarrow> nat set \n  \\<Rightarrow> 'com Bisimulation_type \\<Rightarrow> bool\"\nwhere\n\"Strong_dlHPP_Bisimulation d PP R \\<equiv> \n  (sym R) \\<and> (trans R) \\<and>\n  (\\<forall>(V,V') \\<in> R. length V = length V') \\<and>\n  (\\<forall>(V,V') \\<in> R. \\<forall>i < length V. \n    ((NDC d (V!i)) \\<or> \n     (IDC d (V!i) (htchLoc (pp (V!i)))))) \\<and>\n  (\\<forall>(V,V') \\<in> R. \\<forall>i < length V. \\<forall>m1 m1' m2 \\<alpha> p.\n    ( \\<langle>V!i,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle> \\<and> m1 \\<sim>\\<^bsub>d,(htchLocSet PP)\\<^esub> m1')\n    \\<longrightarrow> (\\<exists>p' \\<alpha>' m2'. ( \\<langle>V'!i,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>'\\<rhd> \\<langle>p',m2'\\<rangle> \\<and>\n        (stepResultsinR p p' R) \\<and> (\\<alpha>,\\<alpha>') \\<in> R \\<and> \n        (dhequality_alternative d PP (pp (V!i)) m2 m2'))))\"\n\n\n\\<comment> \\<open>predicate to define when a program is strongly secure\\<close>"], ["", "definition WHATWHERE_Secure :: \"'com list \\<Rightarrow> bool\"\nwhere\n\"WHATWHERE_Secure V \\<equiv> (\\<forall>d PP. \n  (\\<exists>R. Strong_dlHPP_Bisimulation d PP R \\<and> (V,V) \\<in> R))\"\n\n\n\\<comment> \\<open>auxiliary lemma to obtain central strong (d,lH,PP)-Bisimulation property as Lemma\n in meta logic (allows instantiating all the variables manually if necessary)\\<close>"], ["", "lemma strongdlHPPB_aux: \n \"\\<And>V V' m1 m1' m2 p i \\<alpha>. \\<lbrakk> Strong_dlHPP_Bisimulation d PP R;\n  i < length V; (V,V') \\<in> R; \n  \\<langle>V!i,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle>; m1 \\<sim>\\<^bsub>d,(htchLocSet PP)\\<^esub> m1' \\<rbrakk>\n \\<Longrightarrow> (\\<exists>p' \\<alpha>' m2'. \\<langle>V'!i,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>'\\<rhd> \\<langle>p',m2'\\<rangle>\n  \\<and> stepResultsinR p p' R \\<and> (\\<alpha>,\\<alpha>') \\<in> R \\<and> \n  (dhequality_alternative d PP (pp (V!i)) m2 m2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V V' m1 m1' m2 p i \\<alpha>.\n       \\<lbrakk>Strong_dlHPP_Bisimulation d PP R; i < length V;\n        (V, V') \\<in> R;\n        \\<langle>V ! i,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n        \\<langle>p,m2\\<rangle>;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' \\<alpha>' m2'.\n                            \\<langle>V' ! i,\n                             m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>'\\<rhd>\n                            \\<langle>p',m2'\\<rangle> \\<and>\n                            stepResultsinR p p' R \\<and>\n                            (\\<alpha>, \\<alpha>') \\<in> R \\<and>\n                            dhequality_alternative d PP (pp (V ! i)) m2 m2'", "by (simp add: Strong_dlHPP_Bisimulation_def, fastforce)\n\n\\<comment> \\<open>auxiliary lemma to obtain 'NDC or IDC' from strong (d,lH,PP)-Bisimulation as lemma\n  in meta logic allowing instantiation of the variables\\<close>"], ["", "lemma strongdlHPPB_NDCIDCaux:\n\"\\<And>V V' i. \\<lbrakk>Strong_dlHPP_Bisimulation d PP R;\n  (V,V') \\<in> R; i < length V \\<rbrakk>\n        \\<Longrightarrow> (NDC d (V!i) \\<or> IDC d (V!i) (htchLoc (pp (V!i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V V' i.\n       \\<lbrakk>Strong_dlHPP_Bisimulation d PP R; (V, V') \\<in> R;\n        i < length V\\<rbrakk>\n       \\<Longrightarrow> NDC d (V ! i) \\<or>\n                         IDC d (V ! i) (htchLoc (pp (V ! i)))", "by (simp add: Strong_dlHPP_Bisimulation_def, auto)"], ["", "lemma WHATWHERE_empty:\n\"WHATWHERE_Secure []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHATWHERE_Secure []", "by (simp add: WHATWHERE_Secure_def, auto,\n  rule_tac x=\"{([],[])}\" in exI,\n  simp add: Strong_dlHPP_Bisimulation_def sym_def trans_def)"], ["", "end"], ["", "end"]]}