{"file_name": "/home/qj213/afp-2021-10-22/thys/WHATandWHERE_Security/Type_System_example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WHATandWHERE_Security", "problem_names": ["lemma ExprTypable_with_smallerd_implies_dH_indistinguishable:\n  \"\\<lbrakk> H \\<turnstile>\\<^bsub>\\<E>\\<^esub> e : d'; d' \\<le> d \\<rbrakk> \\<Longrightarrow> e \\<equiv>\\<^bsub>d,H\\<^esub> e\"", "lemma substexp_substmem:\n\"ExprEval e'<Var x\\\\e> m = ExprEval e' (m(x := ExprEval e m))\n  \\<and> ExprEvalL (SubstL elist (Var x) e) m\n  = ExprEvalL elist (m(x := ExprEval e m))\"", "lemma SubstClosure_implications:\n\"\\<lbrakk> SubstClosure x e; m \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> m'; \n  \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m') \\<rbrakk>\n  \\<Longrightarrow> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\""], "translations": [["", "lemma ExprTypable_with_smallerd_implies_dH_indistinguishable:\n  \"\\<lbrakk> H \\<turnstile>\\<^bsub>\\<E>\\<^esub> e : d'; d' \\<le> d \\<rbrakk> \\<Longrightarrow> e \\<equiv>\\<^bsub>d,H\\<^esub> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile>\\<^bsub>\\<E>\\<^esub> e : d'; d' \\<le> d\\<rbrakk>\n    \\<Longrightarrow> e \\<equiv>\\<^bsub>d,H\\<^esub> e", "proof (induct rule: ExprSecTyping.induct, \n    simp_all add: WHATWHERE_Secure_Programs.dH_indistinguishable_def \n    WHATWHERE.dH_equal_def WHATWHERE.d_equal_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "fix dl arglist f m1 m2 d' d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume main: \"\\<forall>i < length arglist.\n    (H \\<turnstile>\\<^bsub>\\<E>\\<^esub> (arglist!i) : (dl!i)) \\<and> (dl!i \\<le> d \\<longrightarrow>\n    (\\<forall>m1 m2. (\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x) \\<and>\n    (\\<forall>(d',e)\\<in>H. d' \\<le> d \\<longrightarrow> ExprEval e m1 = ExprEval e m2) \\<longrightarrow>\n    ExprEval (arglist!i) m1 = ExprEval (arglist!i) m2)) \\<and> dl!i \\<le> d'\""], ["proof (state)\nthis:\n  \\<forall>i<length arglist.\n     H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     (dl ! i \\<le> d \\<longrightarrow>\n      (\\<forall>m1 m2.\n          (\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x) \\<and>\n          (\\<forall>(d', e)\\<in>H.\n              d' \\<le> d \\<longrightarrow>\n              ExprEval e m1 = ExprEval e m2) \\<longrightarrow>\n          ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2)) \\<and>\n     dl ! i \\<le> d'\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume smaller: \"d' \\<le> d\""], ["proof (state)\nthis:\n  d' \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume eqeval: \"\\<forall>(d',e) \\<in> H. d' \\<le> d \\<longrightarrow> ExprEval e m1 = ExprEval e m2\""], ["proof (state)\nthis:\n  \\<forall>(d', e)\\<in>H.\n     d' \\<le> d \\<longrightarrow> ExprEval e m1 = ExprEval e m2\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume eqstate: \"\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\""], ["proof (state)\nthis:\n  \\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "from main smaller"], ["proof (chain)\npicking this:\n  \\<forall>i<length arglist.\n     H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     (dl ! i \\<le> d \\<longrightarrow>\n      (\\<forall>m1 m2.\n          (\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x) \\<and>\n          (\\<forall>(d', e)\\<in>H.\n              d' \\<le> d \\<longrightarrow>\n              ExprEval e m1 = ExprEval e m2) \\<longrightarrow>\n          ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2)) \\<and>\n     dl ! i \\<le> d'\n  d' \\<le> d", "have irangesubst:\n    \"\\<forall>i < length arglist. dl!i \\<le> d\""], ["proof (prove)\nusing this:\n  \\<forall>i<length arglist.\n     H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     (dl ! i \\<le> d \\<longrightarrow>\n      (\\<forall>m1 m2.\n          (\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x) \\<and>\n          (\\<forall>(d', e)\\<in>H.\n              d' \\<le> d \\<longrightarrow>\n              ExprEval e m1 = ExprEval e m2) \\<longrightarrow>\n          ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2)) \\<and>\n     dl ! i \\<le> d'\n  d' \\<le> d\n\ngoal (1 subgoal):\n 1. \\<forall>i<length arglist. dl ! i \\<le> d", "by (metis order_trans)"], ["proof (state)\nthis:\n  \\<forall>i<length arglist. dl ! i \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "with eqstate eqeval main"], ["proof (chain)\npicking this:\n  \\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\n  \\<forall>(d', e)\\<in>H.\n     d' \\<le> d \\<longrightarrow> ExprEval e m1 = ExprEval e m2\n  \\<forall>i<length arglist.\n     H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     (dl ! i \\<le> d \\<longrightarrow>\n      (\\<forall>m1 m2.\n          (\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x) \\<and>\n          (\\<forall>(d', e)\\<in>H.\n              d' \\<le> d \\<longrightarrow>\n              ExprEval e m1 = ExprEval e m2) \\<longrightarrow>\n          ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2)) \\<and>\n     dl ! i \\<le> d'\n  \\<forall>i<length arglist. dl ! i \\<le> d", "have \n    \"\\<forall>i < length arglist. ExprEval (arglist!i) m1 \n       = ExprEval (arglist!i) m2\""], ["proof (prove)\nusing this:\n  \\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\n  \\<forall>(d', e)\\<in>H.\n     d' \\<le> d \\<longrightarrow> ExprEval e m1 = ExprEval e m2\n  \\<forall>i<length arglist.\n     H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     (dl ! i \\<le> d \\<longrightarrow>\n      (\\<forall>m1 m2.\n          (\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x) \\<and>\n          (\\<forall>(d', e)\\<in>H.\n              d' \\<le> d \\<longrightarrow>\n              ExprEval e m1 = ExprEval e m2) \\<longrightarrow>\n          ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2)) \\<and>\n     dl ! i \\<le> d'\n  \\<forall>i<length arglist. dl ! i \\<le> d\n\ngoal (1 subgoal):\n 1. \\<forall>i<length arglist.\n       ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2", "by force"], ["proof (state)\nthis:\n  \\<forall>i<length arglist.\n     ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "hence substmap: \"(ExprEvalL arglist m1) = (ExprEvalL arglist m2)\""], ["proof (prove)\nusing this:\n  \\<forall>i<length arglist.\n     ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2\n\ngoal (1 subgoal):\n 1. ExprEvalL arglist m1 = ExprEvalL arglist m2", "by (induct arglist, auto, force)"], ["proof (state)\nthis:\n  ExprEvalL arglist m1 = ExprEvalL arglist m2\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl da f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   H \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n                i : dl ! i \\<and>\n                   (dl ! i \\<le> d \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<and>\n                        (\\<forall>x\\<in>H.\n                            case x of\n                            (d', e) \\<Rightarrow>\n                              d' \\<le> d \\<longrightarrow>\n                              ExprEval e m =\n                              ExprEval e m') \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m')) \\<and>\n                   dl ! i \\<le> da;\n        da \\<le> d; \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x;\n        \\<forall>x\\<in>H.\n           case x of\n           (d', e) \\<Rightarrow>\n             d' \\<le> d \\<longrightarrow>\n             ExprEval e m = ExprEval e m'\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "show \"f (ExprEvalL arglist m1) = f (ExprEvalL arglist m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (ExprEvalL arglist m1) = f (ExprEvalL arglist m2)", "by (subst substmap, auto)"], ["proof (state)\nthis:\n  f (ExprEvalL arglist m1) = f (ExprEvalL arglist m2)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>auxiliary lemma about substitutions in expressions and in memories\\<close>"], ["", "lemma substexp_substmem:\n\"ExprEval e'<Var x\\\\e> m = ExprEval e' (m(x := ExprEval e m))\n  \\<and> ExprEvalL (SubstL elist (Var x) e) m\n  = ExprEvalL elist (m(x := ExprEval e m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ExprEval e'<Var x\\e> m = ExprEval e' (m(x := ExprEval e m)) \\<and>\n    ExprEvalL (SubstL elist (Var x) e) m =\n    ExprEvalL elist (m(x := ExprEval e m))", "by (induct_tac e' and elist rule: ExprEval.induct ExprEvalL.induct, simp_all)\n\n\n\\<comment> \\<open>another auxiliary lemma for locale interpretation (lemma 8 in original paper)\\<close>"], ["", "lemma SubstClosure_implications:\n\"\\<lbrakk> SubstClosure x e; m \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> m'; \n  \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m') \\<rbrakk>\n  \\<Longrightarrow> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "fix m1 m1'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "assume substclosure: \"SubstClosure x e\""], ["proof (state)\nthis:\n  SubstClosure x e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "assume dequalm2: \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\""], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "assume dhequalm1: \"m1 \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> m1'\""], ["proof (state)\nthis:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from MWLs_semantics.nextmem_exists_and_unique"], ["proof (chain)\npicking this:\n  \\<exists>m' p \\<alpha>.\n     ((?c, ?m), \\<alpha>, p, m')\n     \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap \\<and>\n     (\\<forall>m''.\n         (\\<exists>p \\<alpha>.\n             ((?c, ?m), \\<alpha>, p, m'')\n             \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap) \\<longrightarrow>\n         m'' = m')", "obtain m2 where m1step:\n    \"(\\<exists>p \\<alpha>. \\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle>) \n    \\<and> (\\<forall>m''. (\\<exists>p \\<alpha>. \\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m''\\<rangle>) \\<longrightarrow> m'' = m2)\""], ["proof (prove)\nusing this:\n  \\<exists>m' p \\<alpha>.\n     ((?c, ?m), \\<alpha>, p, m')\n     \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap \\<and>\n     (\\<forall>m''.\n         (\\<exists>p \\<alpha>.\n             ((?c, ?m), \\<alpha>, p, m'')\n             \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap) \\<longrightarrow>\n         m'' = m')\n\ngoal (1 subgoal):\n 1. (\\<And>m2.\n        (\\<exists>p \\<alpha>.\n            \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n             m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n            \\<langle>p,m2\\<rangle>) \\<and>\n        (\\<forall>m''.\n            (\\<exists>p \\<alpha>.\n                \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n                 m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n                \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n            m'' = m2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "hence m2_is_next: \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\""], ["proof (prove)\nusing this:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2", "by (simp add: WHATWHERE.NextMem_def, auto)"], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from m1step MWLs_semantics.MWLsSteps_det.assign\n     [of \"ExprEval\" \"e\" \"m1\" _ \"x\" \"\\<iota>\" \"BMap\"]"], ["proof (chain)\npicking this:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2)\n  ExprEval e m1 = ?v \\<Longrightarrow>\n  \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n   m1\\<rangle> \\<rightarrow>\\<lhd>[]\\<rhd>\n  \\<langle>None,m1(x := ?v)\\<rangle>", "have m2eq: \"m2 = m1(x := (ExprEval e m1))\""], ["proof (prove)\nusing this:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2)\n  ExprEval e m1 = ?v \\<Longrightarrow>\n  \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n   m1\\<rangle> \\<rightarrow>\\<lhd>[]\\<rhd>\n  \\<langle>None,m1(x := ?v)\\<rangle>\n\ngoal (1 subgoal):\n 1. m2 = m1(x := ExprEval e m1)", "by auto"], ["proof (state)\nthis:\n  m2 = m1(x := ExprEval e m1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from MWLs_semantics.nextmem_exists_and_unique"], ["proof (chain)\npicking this:\n  \\<exists>m' p \\<alpha>.\n     ((?c, ?m), \\<alpha>, p, m')\n     \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap \\<and>\n     (\\<forall>m''.\n         (\\<exists>p \\<alpha>.\n             ((?c, ?m), \\<alpha>, p, m'')\n             \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap) \\<longrightarrow>\n         m'' = m')", "obtain m2' where m1'step:\n    \"(\\<exists>p \\<alpha>. \\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2'\\<rangle>) \n    \\<and> (\\<forall>m''. (\\<exists>p \\<alpha>. \\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m''\\<rangle>) \\<longrightarrow> m'' = m2')\""], ["proof (prove)\nusing this:\n  \\<exists>m' p \\<alpha>.\n     ((?c, ?m), \\<alpha>, p, m')\n     \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap \\<and>\n     (\\<forall>m''.\n         (\\<exists>p \\<alpha>.\n             ((?c, ?m), \\<alpha>, p, m'')\n             \\<in> MWLs_semantics.MWLsSteps_det ?E ?BMap) \\<longrightarrow>\n         m'' = m')\n\ngoal (1 subgoal):\n 1. (\\<And>m2'.\n        (\\<exists>p \\<alpha>.\n            \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n             m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n            \\<langle>p,m2'\\<rangle>) \\<and>\n        (\\<forall>m''.\n            (\\<exists>p \\<alpha>.\n                \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n                 m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n                \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n            m'' = m2') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2'\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "hence m2'_is_next: \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\""], ["proof (prove)\nusing this:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2'\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'", "by (simp add: WHATWHERE.NextMem_def, auto)"], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from m1'step MWLs_semantics.MWLsSteps_det.assign\n     [of \"ExprEval\" \"e\" \"m1'\" _ \"x\" \"\\<iota>\" \"BMap\"]"], ["proof (chain)\npicking this:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2'\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2')\n  ExprEval e m1' = ?v \\<Longrightarrow>\n  \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n   m1'\\<rangle> \\<rightarrow>\\<lhd>[]\\<rhd>\n  \\<langle>None,m1'(x := ?v)\\<rangle>", "have m2'eq: \"m2' = m1'(x := (ExprEval e m1'))\""], ["proof (prove)\nusing this:\n  (\\<exists>p \\<alpha>.\n      \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n       m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n      \\<langle>p,m2'\\<rangle>) \\<and>\n  (\\<forall>m''.\n      (\\<exists>p \\<alpha>.\n          \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n           m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd>\n          \\<langle>p,m''\\<rangle>) \\<longrightarrow>\n      m'' = m2')\n  ExprEval e m1' = ?v \\<Longrightarrow>\n  \\<langle>x:=\\<^bsub>\\<iota>\\<^esub> e,\n   m1'\\<rangle> \\<rightarrow>\\<lhd>[]\\<rhd>\n  \\<langle>None,m1'(x := ?v)\\<rangle>\n\ngoal (1 subgoal):\n 1. m2' = m1'(x := ExprEval e m1')", "by auto"], ["proof (state)\nthis:\n  m2' = m1'(x := ExprEval e m1')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from m2eq substexp_substmem"], ["proof (chain)\npicking this:\n  m2 = m1(x := ExprEval e m1)\n  ExprEval ?e'<Var ?x\\?e> ?m =\n  ExprEval ?e' (?m(?x := ExprEval ?e ?m)) \\<and>\n  ExprEvalL (SubstL ?elist (Var ?x) ?e) ?m =\n  ExprEvalL ?elist (?m(?x := ExprEval ?e ?m))", "have substeval1: \"\\<forall>e'. ExprEval (e'<Var x\\\\e>) m1 = ExprEval e' m2\""], ["proof (prove)\nusing this:\n  m2 = m1(x := ExprEval e m1)\n  ExprEval ?e'<Var ?x\\?e> ?m =\n  ExprEval ?e' (?m(?x := ExprEval ?e ?m)) \\<and>\n  ExprEvalL (SubstL ?elist (Var ?x) ?e) ?m =\n  ExprEvalL ?elist (?m(?x := ExprEval ?e ?m))\n\ngoal (1 subgoal):\n 1. \\<forall>e'. ExprEval e'<Var x\\e> m1 = ExprEval e' m2", "by force"], ["proof (state)\nthis:\n  \\<forall>e'. ExprEval e'<Var x\\e> m1 = ExprEval e' m2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from m2'eq substexp_substmem"], ["proof (chain)\npicking this:\n  m2' = m1'(x := ExprEval e m1')\n  ExprEval ?e'<Var ?x\\?e> ?m =\n  ExprEval ?e' (?m(?x := ExprEval ?e ?m)) \\<and>\n  ExprEvalL (SubstL ?elist (Var ?x) ?e) ?m =\n  ExprEvalL ?elist (?m(?x := ExprEval ?e ?m))", "have substeval2: \"\\<forall>e'. ExprEval e'<Var x\\\\e> m1' = ExprEval e' m2'\""], ["proof (prove)\nusing this:\n  m2' = m1'(x := ExprEval e m1')\n  ExprEval ?e'<Var ?x\\?e> ?m =\n  ExprEval ?e' (?m(?x := ExprEval ?e ?m)) \\<and>\n  ExprEvalL (SubstL ?elist (Var ?x) ?e) ?m =\n  ExprEvalL ?elist (?m(?x := ExprEval ?e ?m))\n\ngoal (1 subgoal):\n 1. \\<forall>e'. ExprEval e'<Var x\\e> m1' = ExprEval e' m2'", "by force"], ["proof (state)\nthis:\n  \\<forall>e'. ExprEval e'<Var x\\e> m1' = ExprEval e' m2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from substclosure"], ["proof (chain)\npicking this:\n  SubstClosure x e", "have \n    \"\\<forall>(d',e') \\<in> htchLoc \\<iota>'. (d',e'<Var x\\\\e>) \\<in> (htchLoc \\<iota>')\""], ["proof (prove)\nusing this:\n  SubstClosure x e\n\ngoal (1 subgoal):\n 1. \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n       (d', e'<Var x\\e>) \\<in> htchLoc \\<iota>'", "by (simp add: SubstClosure_def WHATWHERE.htchLoc_def, auto)"], ["proof (state)\nthis:\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     (d', e'<Var x\\e>) \\<in> htchLoc \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "with dhequalm1"], ["proof (chain)\npicking this:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m1'\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     (d', e'<Var x\\e>) \\<in> htchLoc \\<iota>'", "have \n    \"\\<forall>(d',e') \\<in> htchLoc \\<iota>'. \n    d' \\<le> d \\<longrightarrow> ExprEval e'<Var x\\\\e> m1 = ExprEval e'<Var x\\\\e> m1'\""], ["proof (prove)\nusing this:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m1'\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     (d', e'<Var x\\e>) \\<in> htchLoc \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n       d' \\<le> d \\<longrightarrow>\n       ExprEval e'<Var x\\e> m1 = ExprEval e'<Var x\\e> m1'", "by (simp add: WHATWHERE.dH_equal_def, auto)"], ["proof (state)\nthis:\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     d' \\<le> d \\<longrightarrow>\n     ExprEval e'<Var x\\e> m1 = ExprEval e'<Var x\\e> m1'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "with substeval1 substeval2"], ["proof (chain)\npicking this:\n  \\<forall>e'. ExprEval e'<Var x\\e> m1 = ExprEval e' m2\n  \\<forall>e'. ExprEval e'<Var x\\e> m1' = ExprEval e' m2'\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     d' \\<le> d \\<longrightarrow>\n     ExprEval e'<Var x\\e> m1 = ExprEval e'<Var x\\e> m1'", "have \n    \"\\<forall>(d',e') \\<in> htchLoc \\<iota>'.\n    d' \\<le> d \\<longrightarrow> ExprEval e' m2 = ExprEval e' m2'\""], ["proof (prove)\nusing this:\n  \\<forall>e'. ExprEval e'<Var x\\e> m1 = ExprEval e' m2\n  \\<forall>e'. ExprEval e'<Var x\\e> m1' = ExprEval e' m2'\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     d' \\<le> d \\<longrightarrow>\n     ExprEval e'<Var x\\e> m1 = ExprEval e'<Var x\\e> m1'\n\ngoal (1 subgoal):\n 1. \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n       d' \\<le> d \\<longrightarrow> ExprEval e' m2 = ExprEval e' m2'", "by auto"], ["proof (state)\nthis:\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     d' \\<le> d \\<longrightarrow> ExprEval e' m2 = ExprEval e' m2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>SubstClosure x e;\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m';\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\\<rbrakk>\n    \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n             \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "with dequalm2 m2_is_next m2'_is_next"], ["proof (chain)\npicking this:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     d' \\<le> d \\<longrightarrow> ExprEval e' m2 = ExprEval e' m2'", "show \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\n  \\<forall>(d', e')\\<in>htchLoc \\<iota>'.\n     d' \\<le> d \\<longrightarrow> ExprEval e' m2 = ExprEval e' m2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLoc\n                                  \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')", "by (simp add: WHATWHERE.dH_equal_def)"], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLoc\n                                \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>interpretation of the abstract type system using the above definitions for the side conditions\\<close>"], ["", "interpretation Type_System_example: Type_System ExprEval BMap DA lH\n  synAssignSC synWhileSC synIfSC"], ["proof (prove)\ngoal (1 subgoal):\n 1. Type_System ExprEval BMap DA lH synAssignSC synWhileSC synIfSC", "by (unfold_locales, auto,\n  metis ExprTypable_with_smallerd_implies_dH_indistinguishable \n  synAssignSC_def,\n  metis SubstClosure_implications synAssignSC_def, \n  simp add: synWhileSC_def,\n  metis ExprTypable_with_smallerd_implies_dH_indistinguishable \n  WHATWHERE_Secure_Programs.empH_implies_dHindistinguishable_eq_dindistinguishable, \n  simp add: synIfSC_def,\n  metis ExprTypable_with_smallerd_implies_dH_indistinguishable \n  WHATWHERE_Secure_Programs.empH_implies_dHindistinguishable_eq_dindistinguishable)"], ["", "end"]]}