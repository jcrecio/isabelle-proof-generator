{"file_name": "/home/qj213/afp-2021-10-22/thys/WHATandWHERE_Security/WHATWHERE_Secure_Skip_Assign.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WHATandWHERE_Security", "problem_names": ["lemma d_indistinguishable_sym:\n\"e \\<equiv>\\<^bsub>d\\<^esub> e' \\<Longrightarrow> e' \\<equiv>\\<^bsub>d\\<^esub> e\"", "lemma d_indistinguishable_trans:\n\"\\<lbrakk> e \\<equiv>\\<^bsub>d\\<^esub> e'; e' \\<equiv>\\<^bsub>d\\<^esub> e'' \\<rbrakk> \\<Longrightarrow> e \\<equiv>\\<^bsub>d\\<^esub> e''\"", "lemma empH_implies_dHindistinguishable_eq_dindistinguishable:\n\"(e \\<equiv>\\<^bsub>d,{}\\<^esub> e') = (e \\<equiv>\\<^bsub>d\\<^esub> e')\"", "theorem WHATWHERE_Secure_Skip:\n\"WHATWHERE_Secure [skip\\<^bsub>\\<iota>\\<^esub>]\"", "lemma semAssignSC_aux: \n  assumes dhind: \"e \\<equiv>\\<^bsub>DA x,(htchLoc \\<iota>)\\<^esub> e\"\n  shows \"NDC d (x :=\\<^bsub>\\<iota>\\<^esub> e) \\<or> IDC d (x :=\\<^bsub>\\<iota>\\<^esub> e) (htchLoc (pp (x:=\\<^bsub>\\<iota>\\<^esub> e)))\"", "theorem WHATWHERE_Secure_Assign:\n  assumes dhind: \"e \\<equiv>\\<^bsub>DA x,(htchLoc \\<iota>)\\<^esub> e\"\n  assumes dheq_imp: \"\\<forall>m m' d \\<iota>'. (m \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> m' \\<and> \n  \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m'))\n  \\<longrightarrow> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\" \n  shows \"WHATWHERE_Secure [x :=\\<^bsub>\\<iota>\\<^esub> e]\""], "translations": [["", "lemma d_indistinguishable_sym:\n\"e \\<equiv>\\<^bsub>d\\<^esub> e' \\<Longrightarrow> e' \\<equiv>\\<^bsub>d\\<^esub> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<equiv>\\<^bsub>d\\<^esub> e' \\<Longrightarrow>\n    e' \\<equiv>\\<^bsub>d\\<^esub> e", "by (simp add: d_indistinguishable_def d_equal_def, metis)\n\n\\<comment> \\<open>transitivity of d-indistinguishable\\<close>"], ["", "lemma d_indistinguishable_trans:\n\"\\<lbrakk> e \\<equiv>\\<^bsub>d\\<^esub> e'; e' \\<equiv>\\<^bsub>d\\<^esub> e'' \\<rbrakk> \\<Longrightarrow> e \\<equiv>\\<^bsub>d\\<^esub> e''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e \\<equiv>\\<^bsub>d\\<^esub> e';\n     e' \\<equiv>\\<^bsub>d\\<^esub> e''\\<rbrakk>\n    \\<Longrightarrow> e \\<equiv>\\<^bsub>d\\<^esub> e''", "by (simp add: d_indistinguishable_def d_equal_def, metis)\n\n\n\\<comment> \\<open>predicate for dH-indistinguishable\\<close>"], ["", "definition dH_indistinguishable :: \"'d \\<Rightarrow> ('d, 'exp) Hatches \n  \\<Rightarrow> 'exp \\<Rightarrow> 'exp \\<Rightarrow> bool\"\nwhere\n\"dH_indistinguishable d H e1 e2 \\<equiv> (\\<forall>m m'. m \\<sim>\\<^bsub>d,H\\<^esub> m' \n  \\<longrightarrow> (E e1 m = E e2 m'))\""], ["", "abbreviation dH_indistinguishable' :: \"'exp \\<Rightarrow> 'd \n  \\<Rightarrow> ('d, 'exp) Hatches \\<Rightarrow> 'exp \\<Rightarrow> bool\" \n( \"(_ \\<equiv>\\<^bsub>_,_\\<^esub> _)\" )\nwhere\n\"e1 \\<equiv>\\<^bsub>d,H\\<^esub> e2 \\<equiv> dH_indistinguishable d H e1 e2\""], ["", "lemma empH_implies_dHindistinguishable_eq_dindistinguishable:\n\"(e \\<equiv>\\<^bsub>d,{}\\<^esub> e') = (e \\<equiv>\\<^bsub>d\\<^esub> e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<equiv>\\<^bsub>d,{}\\<^esub> e' = e \\<equiv>\\<^bsub>d\\<^esub> e'", "by (simp add: d_indistinguishable_def dH_indistinguishable_def \n  dH_equal_def d_equal_def)"], ["", "theorem WHATWHERE_Secure_Skip:\n\"WHATWHERE_Secure [skip\\<^bsub>\\<iota>\\<^esub>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHATWHERE_Secure [skip\\<^bsub>\\<iota>\\<^esub>]", "proof (simp add: WHATWHERE_Secure_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>])\n          \\<in> R", "fix d PP"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>])\n          \\<in> R", "define R where \"R = {(V::('exp,'id) MWLsCom list,V'::('exp,'id) MWLsCom list). \n    V = V' \\<and> (V = [] \\<or> V = [skip\\<^bsub>\\<iota>\\<^esub>])}\""], ["proof (state)\nthis:\n  R =\n  {(V, V'). V = V' \\<and> (V = [] \\<or> V = [skip\\<^bsub>\\<iota>\\<^esub>])}\n\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>])\n          \\<in> R", "have inR: \"([skip\\<^bsub>\\<iota>\\<^esub>],[skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R", "by (simp add: R_def)"], ["proof (state)\nthis:\n  ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>])\n          \\<in> R", "have \"SdlHPPB d PP R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SdlHPPB d PP R", "proof (simp add: Strong_dlHPP_Bisimulation_def R_def sym_def trans_def\n      NDC_def NextMem_def, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> IDC d (skip\\<^bsub>\\<iota>\\<^esub>)\n                        (htchLoc \\<iota>);\n        m =\\<^bsub>d\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> THE m'.\n                            \\<exists>p \\<alpha>.\n                               SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m\n                                \\<alpha> p\n                                m' =\\<^bsub>d\\<^esub> THE m'a.\n                   \\<exists>p \\<alpha>.\n                      SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m' \\<alpha> p m'a\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "fix m1 m1'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> IDC d (skip\\<^bsub>\\<iota>\\<^esub>)\n                        (htchLoc \\<iota>);\n        m =\\<^bsub>d\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> THE m'.\n                            \\<exists>p \\<alpha>.\n                               SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m\n                                \\<alpha> p\n                                m' =\\<^bsub>d\\<^esub> THE m'a.\n                   \\<exists>p \\<alpha>.\n                      SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m' \\<alpha> p m'a\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "assume dequal: \"m1 =\\<^bsub>d\\<^esub> m1'\""], ["proof (state)\nthis:\n  m1 =\\<^bsub>d\\<^esub> m1'\n\ngoal (2 subgoals):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> IDC d (skip\\<^bsub>\\<iota>\\<^esub>)\n                        (htchLoc \\<iota>);\n        m =\\<^bsub>d\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> THE m'.\n                            \\<exists>p \\<alpha>.\n                               SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m\n                                \\<alpha> p\n                                m' =\\<^bsub>d\\<^esub> THE m'a.\n                   \\<exists>p \\<alpha>.\n                      SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m' \\<alpha> p m'a\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "have nextm1: \"(THE m2. (\\<exists>p \\<alpha>. \\<langle>skip\\<^bsub>\\<iota>\\<^esub>,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle>)) = m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE m2.\n        \\<exists>p \\<alpha>.\n           SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2) =\n    m1", "by (insert MWLsSteps_det.simps[of \"skip\\<^bsub>\\<iota>\\<^esub>\" \"m1\"], \n          force)"], ["proof (state)\nthis:\n  (THE m2.\n      \\<exists>p \\<alpha>.\n         SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2) =\n  m1\n\ngoal (2 subgoals):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> IDC d (skip\\<^bsub>\\<iota>\\<^esub>)\n                        (htchLoc \\<iota>);\n        m =\\<^bsub>d\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> THE m'.\n                            \\<exists>p \\<alpha>.\n                               SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m\n                                \\<alpha> p\n                                m' =\\<^bsub>d\\<^esub> THE m'a.\n                   \\<exists>p \\<alpha>.\n                      SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m' \\<alpha> p m'a\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "have nextm1': \n        \"(THE m2'. (\\<exists>p \\<alpha>. \\<langle>skip\\<^bsub>\\<iota>\\<^esub>,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2'\\<rangle>)) = m1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE m2'.\n        \\<exists>p \\<alpha>.\n           SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p m2') =\n    m1'", "by (insert MWLsSteps_det.simps[of \"skip\\<^bsub>\\<iota>\\<^esub>\" \"m1'\"], \n          force)"], ["proof (state)\nthis:\n  (THE m2'.\n      \\<exists>p \\<alpha>.\n         SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p m2') =\n  m1'\n\ngoal (2 subgoals):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> IDC d (skip\\<^bsub>\\<iota>\\<^esub>)\n                        (htchLoc \\<iota>);\n        m =\\<^bsub>d\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> THE m'.\n                            \\<exists>p \\<alpha>.\n                               SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m\n                                \\<alpha> p\n                                m' =\\<^bsub>d\\<^esub> THE m'a.\n                   \\<exists>p \\<alpha>.\n                      SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m' \\<alpha> p m'a\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with dequal nextm1"], ["proof (chain)\npicking this:\n  m1 =\\<^bsub>d\\<^esub> m1'\n  (THE m2.\n      \\<exists>p \\<alpha>.\n         SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2) =\n  m1\n  (THE m2'.\n      \\<exists>p \\<alpha>.\n         SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p m2') =\n  m1'", "show \n        \"THE m2. \\<exists>p \\<alpha>. \\<langle>skip\\<^bsub>\\<iota>\\<^esub>,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle> =\\<^bsub>d\\<^esub>\n        THE m2'. \\<exists>p \\<alpha>. \\<langle>skip\\<^bsub>\\<iota>\\<^esub>,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2'\\<rangle>\""], ["proof (prove)\nusing this:\n  m1 =\\<^bsub>d\\<^esub> m1'\n  (THE m2.\n      \\<exists>p \\<alpha>.\n         SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2) =\n  m1\n  (THE m2'.\n      \\<exists>p \\<alpha>.\n         SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p m2') =\n  m1'\n\ngoal (1 subgoal):\n 1. THE m2.\n       \\<exists>p \\<alpha>.\n          SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p\n           m2 =\\<^bsub>d\\<^esub> THE m2'.\n                                    \\<exists>p \\<alpha>.\n SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p m2'", "by auto"], ["proof (state)\nthis:\n  THE m2.\n     \\<exists>p \\<alpha>.\n        SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p\n         m2 =\\<^bsub>d\\<^esub> THE m2'.\n                                  \\<exists>p \\<alpha>.\n                                     SRabbr (skip\\<^bsub>\\<iota>\\<^esub>)\nm1' \\<alpha> p m2'\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "fix p m1 m1' m2 \\<alpha>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "assume dequal: \"m1 \\<sim>\\<^bsub>d,(htchLocSet PP)\\<^esub> m1'\""], ["proof (state)\nthis:\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "assume skipstep: \"\\<langle>skip\\<^bsub>\\<iota>\\<^esub>,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle>\""], ["proof (state)\nthis:\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with  MWLsSteps_det.simps[of \"skip\\<^bsub>\\<iota>\\<^esub>\" \"m1\" \"\\<alpha>\" \"p\" \"m2\"]"], ["proof (chain)\npicking this:\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2 =\n  ((\\<exists>\\<iota>' m.\n       skip\\<^bsub>\\<iota>\\<^esub> = skip\\<^bsub>\\<iota>'\\<^esub> \\<and>\n       m1 = m \\<and> \\<alpha> = [] \\<and> p = None \\<and> m2 = m) \\<or>\n   (\\<exists>e m v x \\<iota>'.\n       skip\\<^bsub>\\<iota>\\<^esub> = x:=\\<^bsub>\\<iota>'\\<^esub> e \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = None \\<and> m2 = m(x := v) \\<and> E e m = v) \\<or>\n   (\\<exists>c1 m \\<alpha>' m' c2.\n       skip\\<^bsub>\\<iota>\\<^esub> = c1;c2 \\<and>\n       m1 = m \\<and>\n       \\<alpha> = \\<alpha>' \\<and>\n       p = Some c2 \\<and>\n       m2 = m' \\<and> SRabbr c1 m \\<alpha>' None m') \\<or>\n   (\\<exists>c1 m \\<alpha>' c1' m' c2.\n       skip\\<^bsub>\\<iota>\\<^esub> = c1;c2 \\<and>\n       m1 = m \\<and>\n       \\<alpha> = \\<alpha>' \\<and>\n       p = Some (c1';c2) \\<and>\n       m2 = m' \\<and> SRabbr c1 m \\<alpha>' (Some c1') m') \\<or>\n   (\\<exists>b m \\<iota>' c1 c2.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       if\\<^bsub>\\<iota>'\\<^esub> b then c1 else c2 fi \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = Some c1 \\<and> m2 = m \\<and> BMap (E b m) = True) \\<or>\n   (\\<exists>b m \\<iota>' c1 c2.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       if\\<^bsub>\\<iota>'\\<^esub> b then c1 else c2 fi \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = Some c2 \\<and> m2 = m \\<and> BMap (E b m) = False) \\<or>\n   (\\<exists>b m \\<iota>' c.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       while\\<^bsub>\\<iota>'\\<^esub> b do c od \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = Some (c;while\\<^bsub>\\<iota>'\\<^esub> b do c od) \\<and>\n       m2 = m \\<and> BMap (E b m) = True) \\<or>\n   (\\<exists>b m \\<iota>' c.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       while\\<^bsub>\\<iota>'\\<^esub> b do c od \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = None \\<and> m2 = m \\<and> BMap (E b m) = False) \\<or>\n   (\\<exists>\\<iota>' V m.\n       skip\\<^bsub>\\<iota>\\<^esub> = spawn\\<^bsub>\\<iota>'\\<^esub> V \\<and>\n       m1 = m \\<and> \\<alpha> = V \\<and> p = None \\<and> m2 = m))\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2", "have aux: \"p = None \\<and> m2 = m1 \\<and> \\<alpha> = []\""], ["proof (prove)\nusing this:\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2 =\n  ((\\<exists>\\<iota>' m.\n       skip\\<^bsub>\\<iota>\\<^esub> = skip\\<^bsub>\\<iota>'\\<^esub> \\<and>\n       m1 = m \\<and> \\<alpha> = [] \\<and> p = None \\<and> m2 = m) \\<or>\n   (\\<exists>e m v x \\<iota>'.\n       skip\\<^bsub>\\<iota>\\<^esub> = x:=\\<^bsub>\\<iota>'\\<^esub> e \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = None \\<and> m2 = m(x := v) \\<and> E e m = v) \\<or>\n   (\\<exists>c1 m \\<alpha>' m' c2.\n       skip\\<^bsub>\\<iota>\\<^esub> = c1;c2 \\<and>\n       m1 = m \\<and>\n       \\<alpha> = \\<alpha>' \\<and>\n       p = Some c2 \\<and>\n       m2 = m' \\<and> SRabbr c1 m \\<alpha>' None m') \\<or>\n   (\\<exists>c1 m \\<alpha>' c1' m' c2.\n       skip\\<^bsub>\\<iota>\\<^esub> = c1;c2 \\<and>\n       m1 = m \\<and>\n       \\<alpha> = \\<alpha>' \\<and>\n       p = Some (c1';c2) \\<and>\n       m2 = m' \\<and> SRabbr c1 m \\<alpha>' (Some c1') m') \\<or>\n   (\\<exists>b m \\<iota>' c1 c2.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       if\\<^bsub>\\<iota>'\\<^esub> b then c1 else c2 fi \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = Some c1 \\<and> m2 = m \\<and> BMap (E b m) = True) \\<or>\n   (\\<exists>b m \\<iota>' c1 c2.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       if\\<^bsub>\\<iota>'\\<^esub> b then c1 else c2 fi \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = Some c2 \\<and> m2 = m \\<and> BMap (E b m) = False) \\<or>\n   (\\<exists>b m \\<iota>' c.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       while\\<^bsub>\\<iota>'\\<^esub> b do c od \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = Some (c;while\\<^bsub>\\<iota>'\\<^esub> b do c od) \\<and>\n       m2 = m \\<and> BMap (E b m) = True) \\<or>\n   (\\<exists>b m \\<iota>' c.\n       skip\\<^bsub>\\<iota>\\<^esub> =\n       while\\<^bsub>\\<iota>'\\<^esub> b do c od \\<and>\n       m1 = m \\<and>\n       \\<alpha> = [] \\<and>\n       p = None \\<and> m2 = m \\<and> BMap (E b m) = False) \\<or>\n   (\\<exists>\\<iota>' V m.\n       skip\\<^bsub>\\<iota>\\<^esub> = spawn\\<^bsub>\\<iota>'\\<^esub> V \\<and>\n       m1 = m \\<and> \\<alpha> = V \\<and> p = None \\<and> m2 = m))\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2\n\ngoal (1 subgoal):\n 1. p = None \\<and> m2 = m1 \\<and> \\<alpha> = []", "by auto"], ["proof (state)\nthis:\n  p = None \\<and> m2 = m1 \\<and> \\<alpha> = []\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with dequal skipstep MWLsSteps_det.skip"], ["proof (chain)\npicking this:\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2\n  SRabbr (skip\\<^bsub>?\\<iota>\\<^esub>) ?m [] None ?m\n  p = None \\<and> m2 = m1 \\<and> \\<alpha> = []", "show \"\\<exists>p' m2'.\n         \\<langle>skip\\<^bsub>\\<iota>\\<^esub>,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p',m2'\\<rangle> \\<and>\n         stepResultsinR p p' {(V, V'). V = V' \\<and> \n         (V = [] \\<or> V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n         (\\<alpha> = [] \\<or> \\<alpha> = [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n         dhequality_alternative d PP \\<iota> m2 m2'\""], ["proof (prove)\nusing this:\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n  SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1 \\<alpha> p m2\n  SRabbr (skip\\<^bsub>?\\<iota>\\<^esub>) ?m [] None ?m\n  p = None \\<and> m2 = m1 \\<and> \\<alpha> = []\n\ngoal (1 subgoal):\n 1. \\<exists>p' m2'.\n       SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p' m2' \\<and>\n       stepResultsinR p p'\n        {(V, V').\n         V = V' \\<and>\n         (V = [] \\<or> V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n       (\\<alpha> = [] \\<or> \\<alpha> = [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n       dhequality_alternative d PP \\<iota> m2 m2'", "by (simp add: stepResultsinR_def dhequality_alternative_def, \n           fastforce)"], ["proof (state)\nthis:\n  \\<exists>p' m2'.\n     SRabbr (skip\\<^bsub>\\<iota>\\<^esub>) m1' \\<alpha> p' m2' \\<and>\n     stepResultsinR p p'\n      {(V, V').\n       V = V' \\<and>\n       (V = [] \\<or> V = [skip\\<^bsub>\\<iota>\\<^esub>])} \\<and>\n     (\\<alpha> = [] \\<or> \\<alpha> = [skip\\<^bsub>\\<iota>\\<^esub>]) \\<and>\n     dhequality_alternative d PP \\<iota> m2 m2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SdlHPPB d PP R\n\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>])\n          \\<in> R", "with inR"], ["proof (chain)\npicking this:\n  ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R\n  SdlHPPB d PP R", "show \"\\<exists>R. SdlHPPB d PP R \\<and> ([skip\\<^bsub>\\<iota>\\<^esub>],[skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R\""], ["proof (prove)\nusing this:\n  ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R\n  SdlHPPB d PP R\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       SdlHPPB d PP R \\<and>\n       ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>])\n       \\<in> R", "by auto"], ["proof (state)\nthis:\n  \\<exists>R.\n     SdlHPPB d PP R \\<and>\n     ([skip\\<^bsub>\\<iota>\\<^esub>], [skip\\<^bsub>\\<iota>\\<^esub>]) \\<in> R\n\ngoal:\nNo subgoals!", "qed\n \n\n\\<comment> \\<open>auxiliary lemma for assign side condition (lemma 9 in original paper)\\<close>"], ["", "lemma semAssignSC_aux: \n  assumes dhind: \"e \\<equiv>\\<^bsub>DA x,(htchLoc \\<iota>)\\<^esub> e\"\n  shows \"NDC d (x :=\\<^bsub>\\<iota>\\<^esub> e) \\<or> IDC d (x :=\\<^bsub>\\<iota>\\<^esub> e) (htchLoc (pp (x:=\\<^bsub>\\<iota>\\<^esub> e)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e) \\<or>\n    IDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)\n     (htchLoc (pp (x:=\\<^bsub>\\<iota>\\<^esub> e)))", "proof (simp add: IDC_def, auto, simp add: NDC_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "fix m1 m1'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "assume dhequal: \"m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m1'\""], ["proof (state)\nthis:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "hence dequal: \"m1 =\\<^bsub>d\\<^esub> m1'\""], ["proof (prove)\nusing this:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. m1 =\\<^bsub>d\\<^esub> m1'", "by (simp add: dH_equal_def)"], ["proof (state)\nthis:\n  m1 =\\<^bsub>d\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "obtain v where veq: \"E e m1 = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v. E e m1 = v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  E e m1 = v\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "hence m2eq: \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m1(x := v)\""], ["proof (prove)\nusing this:\n  E e m1 = v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m1(x := v)", "by (simp add: NextMem_def,\n      insert MWLsSteps_det.simps[of \"x :=\\<^bsub>\\<iota>\\<^esub> e\" \"m1\"],\n      force)"], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m1(x := v)\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "obtain v' where v'eq: \"E e m1' = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'. E e m1' = v' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  E e m1' = v'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "hence m2'eq: \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m1'(x := v')\""], ["proof (prove)\nusing this:\n  E e m1' = v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m1'(x := v')", "by (simp add: NextMem_def,\n      insert MWLsSteps_det.simps[of \"x :=\\<^bsub>\\<iota>\\<^esub> e\" \"m1'\"],\n      force)"], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m1'(x := v')\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "from dhequal"], ["proof (chain)\npicking this:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m1'", "have shiftdomain: \n    \"DA x \\<le> d \\<Longrightarrow> m1 \\<sim>\\<^bsub>DA x,(htchLoc \\<iota>)\\<^esub> m1'\""], ["proof (prove)\nusing this:\n  m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. DA x \\<le> d \\<Longrightarrow>\n    m1 \\<sim>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> m1'", "by (simp add: dH_equal_def d_equal_def htchLoc_def)"], ["proof (state)\nthis:\n  DA x \\<le> d \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "with veq v'eq dhind"], ["proof (chain)\npicking this:\n  E e m1 = v\n  E e m1' = v'\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  DA x \\<le> d \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> m1'", "have \"(DA x) \\<le> d \\<Longrightarrow> v = v'\""], ["proof (prove)\nusing this:\n  E e m1 = v\n  E e m1' = v'\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  DA x \\<le> d \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. DA x \\<le> d \\<Longrightarrow> v = v'", "by (simp add: dH_indistinguishable_def)"], ["proof (state)\nthis:\n  DA x \\<le> d \\<Longrightarrow> v = v'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<not> NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e);\n        m \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m'\\<rbrakk>\n       \\<Longrightarrow> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')", "with dequal m2eq m2'eq"], ["proof (chain)\npicking this:\n  m1 =\\<^bsub>d\\<^esub> m1'\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m1(x := v)\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m1'(x := v')\n  DA x \\<le> d \\<Longrightarrow> v = v'", "show \"\\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\""], ["proof (prove)\nusing this:\n  m1 =\\<^bsub>d\\<^esub> m1'\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m1(x := v)\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m1'(x := v')\n  DA x \\<le> d \\<Longrightarrow> v = v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')", "by (simp add: d_equal_def)"], ["proof (state)\nthis:\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem WHATWHERE_Secure_Assign:\n  assumes dhind: \"e \\<equiv>\\<^bsub>DA x,(htchLoc \\<iota>)\\<^esub> e\"\n  assumes dheq_imp: \"\\<forall>m m' d \\<iota>'. (m \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> m' \\<and> \n  \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m'))\n  \\<longrightarrow> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,(htchLoc \\<iota>')\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\" \n  shows \"WHATWHERE_Secure [x :=\\<^bsub>\\<iota>\\<^esub> e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHATWHERE_Secure [x:=\\<^bsub>\\<iota>\\<^esub> e]", "proof (simp add: WHATWHERE_Secure_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n          \\<in> R", "fix d PP"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n          \\<in> R", "define R where \"R = {(V::('exp,'id) MWLsCom list,V'::('exp,'id) MWLsCom list). \n    V = V' \\<and> (V = [] \\<or> V = [x :=\\<^bsub>\\<iota>\\<^esub> e])}\""], ["proof (state)\nthis:\n  R =\n  {(V, V'). V = V' \\<and> (V = [] \\<or> V = [x:=\\<^bsub>\\<iota>\\<^esub> e])}\n\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n          \\<in> R", "have inR: \"([x :=\\<^bsub>\\<iota>\\<^esub> e],[x :=\\<^bsub>\\<iota>\\<^esub> e]) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<in> R", "by (simp add: R_def)"], ["proof (state)\nthis:\n  ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n          \\<in> R", "have \"SdlHPPB d PP R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SdlHPPB d PP R", "proof (simp add: Strong_dlHPP_Bisimulation_def R_def \n        sym_def trans_def, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> IDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)\n            (htchLoc \\<iota>) \\<Longrightarrow>\n    NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "assume notIDC: \"\\<not> IDC d (x :=\\<^bsub>\\<iota>\\<^esub> e) (htchLoc \\<iota>)\""], ["proof (state)\nthis:\n  \\<not> IDC d (x:=\\<^bsub>\\<iota>\\<^esub> e) (htchLoc \\<iota>)\n\ngoal (2 subgoals):\n 1. \\<not> IDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)\n            (htchLoc \\<iota>) \\<Longrightarrow>\n    NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)\n 2. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with dhind semAssignSC_aux"], ["proof (chain)\npicking this:\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  ?e \\<equiv>\\<^bsub>DA ?x,htchLoc ?\\<iota>\\<^esub> ?e \\<Longrightarrow>\n  NDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e) \\<or>\n  IDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)\n   (htchLoc (pp (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)))\n  \\<not> IDC d (x:=\\<^bsub>\\<iota>\\<^esub> e) (htchLoc \\<iota>)", "show \"NDC d (x :=\\<^bsub>\\<iota>\\<^esub> e)\""], ["proof (prove)\nusing this:\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  ?e \\<equiv>\\<^bsub>DA ?x,htchLoc ?\\<iota>\\<^esub> ?e \\<Longrightarrow>\n  NDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e) \\<or>\n  IDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)\n   (htchLoc (pp (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)))\n  \\<not> IDC d (x:=\\<^bsub>\\<iota>\\<^esub> e) (htchLoc \\<iota>)\n\ngoal (1 subgoal):\n 1. NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)", "by force"], ["proof (state)\nthis:\n  NDC d (x:=\\<^bsub>\\<iota>\\<^esub> e)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "fix m1 m1' m2 p \\<alpha>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "assume assignstep: \"\\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p,m2\\<rangle>\""], ["proof (state)\nthis:\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "assume dhequal: \"m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\""], ["proof (state)\nthis:\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "from assignstep"], ["proof (chain)\npicking this:\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2", "have nextm1: \n        \"p = None \\<and> \\<alpha> = [] \\<and> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\""], ["proof (prove)\nusing this:\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2\n\ngoal (1 subgoal):\n 1. p = None \\<and>\n    \\<alpha> = [] \\<and>\n    \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2", "by (simp add: NextMem_def, \n          insert MWLsSteps_det.simps[of \"x :=\\<^bsub>\\<iota>\\<^esub> e\" \"m1\"], force)"], ["proof (state)\nthis:\n  p = None \\<and>\n  \\<alpha> = [] \\<and>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "obtain m2' where nextm1': \n        \"\\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1'\\<rangle> \\<rightarrow>\\<lhd>[]\\<rhd> \\<langle>None,m2'\\<rangle> \\<and> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m2'.\n        SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1' [] None m2' \\<and>\n        \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') =\n        m2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: NextMem_def, \n          insert MWLsSteps_det.simps[of \"x :=\\<^bsub>\\<iota>\\<^esub> e\" \"m1'\"], force)"], ["proof (state)\nthis:\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1' [] None m2' \\<and>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "from dhequal"], ["proof (chain)\npicking this:\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'", "have dhequal_\\<iota>: \"\\<And>\\<iota>. htchLoc \\<iota> \\<subseteq> htchLocSet PP \n        \\<Longrightarrow> m1 \\<sim>\\<^bsub>d,(htchLoc \\<iota>)\\<^esub> m1'\""], ["proof (prove)\nusing this:\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n       m1 \\<sim>\\<^bsub>d,htchLoc \\<iota>\\<^esub> m1'", "by (simp add: dH_equal_def, auto)"], ["proof (state)\nthis:\n  htchLoc ?\\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>d,htchLoc ?\\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with dhind semAssignSC_aux"], ["proof (chain)\npicking this:\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  ?e \\<equiv>\\<^bsub>DA ?x,htchLoc ?\\<iota>\\<^esub> ?e \\<Longrightarrow>\n  NDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e) \\<or>\n  IDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)\n   (htchLoc (pp (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)))\n  htchLoc ?\\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>d,htchLoc ?\\<iota>\\<^esub> m1'", "have \"htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow> \n        \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\""], ["proof (prove)\nusing this:\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  ?e \\<equiv>\\<^bsub>DA ?x,htchLoc ?\\<iota>\\<^esub> ?e \\<Longrightarrow>\n  NDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e) \\<or>\n  IDC ?d (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)\n   (htchLoc (pp (?x:=\\<^bsub>?\\<iota>\\<^esub> ?e)))\n  htchLoc ?\\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>d,htchLoc ?\\<iota>\\<^esub> m1'\n\ngoal (1 subgoal):\n 1. htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n    \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')", "by (simp add: NDC_def IDC_def dH_equal_def, fastforce)"], ["proof (state)\nthis:\n  htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with dhind dheq_imp dhequal_\\<iota>"], ["proof (chain)\npicking this:\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  \\<forall>m m' d \\<iota>'.\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m' \\<and>\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m') \\<longrightarrow>\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n                                  \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\n  htchLoc ?\\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>d,htchLoc ?\\<iota>\\<^esub> m1'\n  htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')", "have \"htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow> \n        \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,(htchLocSet PP)\\<^esub> \\<lbrakk>x :=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\""], ["proof (prove)\nusing this:\n  e \\<equiv>\\<^bsub>DA x,htchLoc \\<iota>\\<^esub> e\n  \\<forall>m m' d \\<iota>'.\n     m \\<sim>\\<^bsub>d,htchLoc \\<iota>'\\<^esub> m' \\<and>\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m') \\<longrightarrow>\n     \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m) \\<sim>\\<^bsub>d,htchLoc\n                                  \\<iota>'\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m')\n  htchLoc ?\\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  m1 \\<sim>\\<^bsub>d,htchLoc ?\\<iota>\\<^esub> m1'\n  htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) =\\<^bsub>d\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal (1 subgoal):\n 1. htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n    \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLocSet\n                                  PP\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')", "by (simp add: htchLocSet_def dH_equal_def, blast)"], ["proof (state)\nthis:\n  htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLocSet\n                                PP\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal (1 subgoal):\n 1. \\<And>m1 m1' m2 \\<alpha> p.\n       \\<lbrakk>SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2;\n        m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p' m2'.\n                            SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1'\n                             \\<alpha> p' m2' \\<and>\n                            stepResultsinR p p'\n                             {(V, V').\n                              V = V' \\<and>\n                              (V = [] \\<or>\n                               V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n                            (\\<alpha> = [] \\<or>\n                             \\<alpha> =\n                             [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n                            dhequality_alternative d PP \\<iota> m2 m2'", "with nextm1 nextm1' assignstep dhequal"], ["proof (chain)\npicking this:\n  p = None \\<and>\n  \\<alpha> = [] \\<and>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1' [] None m2' \\<and>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n  htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLocSet\n                                PP\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')", "show \"\\<exists>p' m2'.\n        \\<langle>x :=\\<^bsub>\\<iota>\\<^esub> e,m1'\\<rangle> \\<rightarrow>\\<lhd>\\<alpha>\\<rhd> \\<langle>p',m2'\\<rangle> \\<and>\n        stepResultsinR p p' {(V, V'). V = V' \\<and> (V = [] \\<or> V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n        (\\<alpha> = [] \\<or> \\<alpha> = [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and> dhequality_alternative d PP \\<iota> m2 m2'\""], ["proof (prove)\nusing this:\n  p = None \\<and>\n  \\<alpha> = [] \\<and>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) = m2\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1' [] None m2' \\<and>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1') = m2'\n  SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1 \\<alpha> p m2\n  m1 \\<sim>\\<^bsub>d,htchLocSet PP\\<^esub> m1'\n  htchLoc \\<iota> \\<subseteq> htchLocSet PP \\<Longrightarrow>\n  \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1) \\<sim>\\<^bsub>d,htchLocSet\n                                PP\\<^esub> \\<lbrakk>x:=\\<^bsub>\\<iota>\\<^esub> e\\<rbrakk>(m1')\n\ngoal (1 subgoal):\n 1. \\<exists>p' m2'.\n       SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1' \\<alpha> p' m2' \\<and>\n       stepResultsinR p p'\n        {(V, V').\n         V = V' \\<and>\n         (V = [] \\<or> V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n       (\\<alpha> = [] \\<or>\n        \\<alpha> = [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n       dhequality_alternative d PP \\<iota> m2 m2'", "by (auto simp add: stepResultsinR_def dhequality_alternative_def)"], ["proof (state)\nthis:\n  \\<exists>p' m2'.\n     SRabbr (x:=\\<^bsub>\\<iota>\\<^esub> e) m1' \\<alpha> p' m2' \\<and>\n     stepResultsinR p p'\n      {(V, V').\n       V = V' \\<and>\n       (V = [] \\<or> V = [x:=\\<^bsub>\\<iota>\\<^esub> e])} \\<and>\n     (\\<alpha> = [] \\<or> \\<alpha> = [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<and>\n     dhequality_alternative d PP \\<iota> m2 m2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SdlHPPB d PP R\n\ngoal (1 subgoal):\n 1. \\<And>d PP.\n       \\<exists>R.\n          SdlHPPB d PP R \\<and>\n          ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n          \\<in> R", "with inR"], ["proof (chain)\npicking this:\n  ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<in> R\n  SdlHPPB d PP R", "show \"\\<exists>R. SdlHPPB d PP R \\<and> ([x:=\\<^bsub>\\<iota>\\<^esub> e],[x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<in> R\""], ["proof (prove)\nusing this:\n  ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e]) \\<in> R\n  SdlHPPB d PP R\n\ngoal (1 subgoal):\n 1. \\<exists>R.\n       SdlHPPB d PP R \\<and>\n       ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n       \\<in> R", "by auto"], ["proof (state)\nthis:\n  \\<exists>R.\n     SdlHPPB d PP R \\<and>\n     ([x:=\\<^bsub>\\<iota>\\<^esub> e], [x:=\\<^bsub>\\<iota>\\<^esub> e])\n     \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}