{"file_name": "/home/qj213/afp-2021-10-22/thys/SATSolverVerification/MoreList.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SATSolverVerification", "problem_names": ["lemma listEqualsButlastAppendLast: \n  assumes \"list \\<noteq> []\"\n  shows \"list = (butlast list) @ [last list]\"", "lemma lastListInList [simp]: \n  assumes \"list \\<noteq> []\"\n  shows \"last list \\<in> set list\"", "lemma butlastIsSubset: \n  shows \"set (butlast list) \\<subseteq> set list\"", "lemma setListIsSetButlastAndLast: \n  shows \"set list \\<subseteq> set (butlast list) \\<union> {last list}\"", "lemma butlastAppend: \n  shows \"butlast (list1 @ list2) = (if list2 = [] then butlast list1 else (list1 @ butlast list2))\"", "lemma removeAll_multiset:\n  assumes \"distinct a\" \"x \\<in> set a\"\n  shows \"mset a = {#x#} + mset (removeAll x a)\"", "lemma removeAll_map:\n  assumes \"\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\"\n  shows \"removeAll (f x) (map f a) = map f (removeAll x a)\"", "lemma uniqDistinct:\n\"uniq l = distinct l\"", "lemma uniqAppend: \n  assumes \"uniq (l1 @ l2)\" \n  shows \"uniq l1\" \"uniq l2\"", "lemma uniqAppendIff: \n  \"uniq (l1 @ l2) = (uniq l1 \\<and> uniq l2 \\<and> set l1 \\<inter> set l2 = {})\" (is \"?lhs = ?rhs\")", "lemma uniqAppendElement: \n  assumes \"uniq l\" \n  shows \"e \\<notin> set l = uniq (l @ [e])\"", "lemma uniqImpliesNotLastMemButlast:\n  assumes \"uniq l\"\n  shows \"last l \\<notin> set (butlast l)\"", "lemma uniqButlastNotUniqListImpliesLastMemButlast: \n  assumes \"uniq (butlast l)\" \"\\<not> uniq l\" \n  shows \"last l \\<in> set (butlast l)\"", "lemma uniqRemdups:\n  shows \"uniq (remdups x)\"", "lemma uniqHeadTailSet:\n  assumes \"uniq l\"\n  shows \"set (tl l) = (set l) - {hd l}\"", "lemma uniqLengthEqCardSet:\nassumes \"uniq l\"\nshows \"length l = card (set l)\"", "lemma lengthGtOneTwoDistinctElements:\nassumes \n  \"uniq l\" \"length l > 1\" \"l \\<noteq> []\"\nshows\n  \"\\<exists> a1 a2. a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2\"", "lemma firstPosEqualZero:\n  shows \"(firstPos a (m # M') = 0) = (a = m)\"", "lemma firstPosLeLength: \n  assumes \"a \\<in> set l\"\n  shows \"firstPos a l < length l\"", "lemma firstPosAppend: \n  assumes \"a \\<in> set l\" \n  shows \"firstPos a l = firstPos a (l @ l')\"", "lemma firstPosAppendNonMemberFirstMemberSecond: \n  assumes \"a \\<notin> set l1\" and  \"a \\<in> set l2\"\n  shows \"firstPos a (l1 @ l2) = length l1 + firstPos a l2\"", "lemma firstPosDomainForElements: \n  shows \"(0 \\<le> firstPos a l \\<and> firstPos a l < length l) = (a \\<in> set l)\" (is \"?lhs = ?rhs\")", "lemma firstPosEqual: \n  assumes \"a \\<in> set l\" and \"b \\<in> set l\" \n  shows \"(firstPos a l = firstPos b l) = (a = b)\" (is \"?lhs = ?rhs\")", "lemma firstPosLast:\n  assumes \"l \\<noteq> []\" \"uniq l\"\n  shows \"(firstPos x l = length l - 1) = (x = last l)\"", "lemma noElementsPrecedesFirstElement: \n  assumes \"a \\<noteq> b\"\n  shows \"\\<not> precedes a b (b # list)\"", "lemma lastPrecedesNoElement:\nassumes \"uniq l\"\nshows \"\\<not>(\\<exists> a. a \\<noteq> last l \\<and> precedes (last l) a l)\"", "lemma precedesAppend: \n  assumes \"precedes a b l\" \n  shows \"precedes a b (l @ l')\"", "lemma precedesMemberHeadMemberTail: \n  assumes \"a \\<in> set l1\" and \"b \\<notin> set l1\" and \"b \\<in> set l2\"\n  shows \"precedes a b (l1 @ l2)\"", "lemma precedesReflexivity: \n  assumes \"a \\<in> set l\"\n  shows \"precedes a a l\"", "lemma precedesTransitivity: \n  assumes \n  \"precedes a b l\" and \"precedes b c l\" \n  shows \n  \"precedes a c l\"", "lemma precedesAntisymmetry: \n  assumes\n  \"a \\<in> set l\" and \"b \\<in> set l\" and\n  \"precedes a b l\" and \"precedes b a l\"\n  shows\n  \"a = b\"", "lemma precedesTotalOrder: \n  assumes \"a \\<in> set l\" and \"b \\<in> set l\"\n  shows \"a=b \\<or> precedes a b l \\<or> precedes b a l\"", "lemma precedesMap:\n  assumes \"precedes a b list\" and \"\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\"\n  shows \"precedes (f a) (f b) (map f list)\"", "lemma precedesFilter: \n  assumes \"precedes a b list\" and \"f a\" and \"f b\"\n  shows \"precedes a b (filter f list)\"", "lemma transPrecedesOrder: \n  \"trans (precedesOrder list)\"", "lemma wellFoundedPrecedesOrder:\n  shows \"wf (precedesOrder list)\"", "lemma prefixIsSubset:\n  assumes \"isPrefix p l\"\n  shows \"set p \\<subseteq> set l\"", "lemma uniqListImpliesUniqPrefix:\nassumes \"isPrefix p l\" and \"uniq l\"\nshows \"uniq p\"", "lemma firstPosPrefixElement: \n  assumes \"isPrefix p l\" and \"a \\<in> set p\"\n  shows \"firstPos a p = firstPos a l\"", "lemma laterInPrefixRetainsPrecedes: \n  assumes \n  \"isPrefix p l\" and \"precedes a b l\" and \"b \\<in> set p\"\n  shows \n  \"precedes a b p\"", "lemma [simp]: \n  shows \"list_diff [] y = []\"", "lemma [simp]: \n  shows \"list_diff (x # xs) y = (if x \\<in> set y then list_diff xs y else x # list_diff xs y)\"", "lemma listDiffIff:\n  shows \"(x \\<in> set a \\<and> x \\<notin> set b) = (x \\<in> set (list_diff a b))\"", "lemma listDiffDoubleRemoveAll: \n  assumes \"x \\<in> set a\"\n  shows \"list_diff b a = list_diff b (x # a)\"", "lemma removeAllListDiff[simp]:\n  shows \"removeAll x (list_diff a b) = list_diff (removeAll x a) b\"", "lemma listDiffRemoveAllNonMember:\n  assumes \"x \\<notin> set a\"\n  shows \"list_diff a b = list_diff a (removeAll x b)\"", "lemma listDiffMap: \n  assumes \"\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\"\n  shows \"map f (list_diff a b) = list_diff (map f a) (map f b)\"", "lemma remdupsRemoveAllCommute[simp]:\n  shows \"remdups (removeAll a list) = removeAll a (remdups list)\"", "lemma remdupsAppend: \n  shows \"remdups (a @ b) = remdups (list_diff a b) @ remdups b\"", "lemma remdupsAppendSet: \n  shows \"set (remdups (a @ b)) = set (remdups a @ remdups (list_diff b a))\"", "lemma remdupsAppendMultiSet: \n  shows \"mset (remdups (a @ b)) = mset (remdups a @ remdups (list_diff b a))\"", "lemma remdupsListDiff:\n\"remdups (list_diff a b) = list_diff (remdups a) (remdups b)\"", "lemma multisetEmptyLeI:\n  \"multiset_le {#} a r\"", "lemma multisetUnionLessMono2:\nshows\n  \"trans r \\<Longrightarrow> (b1, b2) \\<in> mult r \\<Longrightarrow> (a + b1, a + b2) \\<in> mult r\"", "lemma multisetUnionLessMono1:\nshows\n  \"trans r \\<Longrightarrow> (a1, a2) \\<in> mult r \\<Longrightarrow> (a1 + b, a2 + b) \\<in> mult r\"", "lemma multisetUnionLeMono2:\nassumes\n  \"trans r\"\n  \"multiset_le b1 b2 r\"\nshows\n  \"multiset_le (a + b1) (a + b2) r\"", "lemma multisetUnionLeMono1:\nassumes\n  \"trans r\"\n  \"multiset_le a1 a2 r\"\nshows\n  \"multiset_le (a1 + b) (a2 + b) r\"", "lemma multisetLeTrans:\nassumes\n  \"trans r\"\n  \"multiset_le x y r\"\n  \"multiset_le y z r\"\nshows\n  \"multiset_le x z r\"", "lemma multisetUnionLeMono:\nassumes\n  \"trans r\"\n  \"multiset_le a1 a2 r\"\n  \"multiset_le b1 b2 r\"\nshows\n  \"multiset_le (a1 + b1) (a2 + b2) r\"", "lemma multisetLeListDiff:\nassumes\n  \"trans r\"\nshows \n  \"multiset_le (mset (list_diff a b)) (mset a) r\"", "lemma FullLevi: \n  shows \"(x @ y = z @ w) = \n                (x = z \\<and> y = w \\<or> \n                (\\<exists> t. z @ t = x \\<and> t @ y = w) \\<or> \n                (\\<exists> t. x @ t = z \\<and> t @ w = y))\" (is \"?lhs = ?rhs\")", "lemma SimpleLevi:\n  shows \"(p @ s = a # list) = \n             ( p = [] \\<and> s = a # list \\<or> \n              (\\<exists> t. p = a # t \\<and> t @ s = list))\"", "lemma lengthOneCharacterisation:\n  shows \"(length l = 1) = (l = [hd l])\"", "lemma lengthOneImpliesOnlyElement:\n  assumes \"length l = 1\" and \"a : set l\"\n  shows \"\\<forall> a'. a' : set l \\<longrightarrow> a' = a\""], "translations": [["", "lemma listEqualsButlastAppendLast: \n  assumes \"list \\<noteq> []\"\n  shows \"list = (butlast list) @ [last list]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list = butlast list @ [last list]", "using assms"], ["proof (prove)\nusing this:\n  list \\<noteq> []\n\ngoal (1 subgoal):\n 1. list = butlast list @ [last list]", "by (induct list) auto"], ["", "lemma lastListInList [simp]: \n  assumes \"list \\<noteq> []\"\n  shows \"last list \\<in> set list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last list \\<in> set list", "using assms"], ["proof (prove)\nusing this:\n  list \\<noteq> []\n\ngoal (1 subgoal):\n 1. last list \\<in> set list", "by (induct list) auto"], ["", "lemma butlastIsSubset: \n  shows \"set (butlast list) \\<subseteq> set list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (butlast list) \\<subseteq> set list", "by (induct list) (auto split: if_split_asm)"], ["", "lemma setListIsSetButlastAndLast: \n  shows \"set list \\<subseteq> set (butlast list) \\<union> {last list}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set list \\<subseteq> set (butlast list) \\<union> {last list}", "by (induct list) auto"], ["", "lemma butlastAppend: \n  shows \"butlast (list1 @ list2) = (if list2 = [] then butlast list1 else (list1 @ butlast list2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast (list1 @ list2) =\n    (if list2 = [] then butlast list1 else list1 @ butlast list2)", "by (induct list1) auto"], ["", "(*********************************************************)\n(*                   removeAll                           *)\n(*********************************************************)"], ["", "subsection\\<open>@{term removeAll} - element removal\\<close>"], ["", "lemma removeAll_multiset:\n  assumes \"distinct a\" \"x \\<in> set a\"\n  shows \"mset a = {#x#} + mset (removeAll x a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset a = {#x#} + mset (removeAll x a)", "using assms"], ["proof (prove)\nusing this:\n  distinct a\n  x \\<in> set a\n\ngoal (1 subgoal):\n 1. mset a = {#x#} + mset (removeAll x a)", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct []; x \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> mset [] = {#x#} + mset (removeAll x [])\n 2. \\<And>a1 a2.\n       \\<lbrakk>\\<lbrakk>distinct a2; x \\<in> set a2\\<rbrakk>\n                \\<Longrightarrow> mset a2 = {#x#} + mset (removeAll x a2);\n        distinct (a1 # a2); x \\<in> set (a1 # a2)\\<rbrakk>\n       \\<Longrightarrow> mset (a1 # a2) =\n                         {#x#} + mset (removeAll x (a1 # a2))", "case (Cons y a')"], ["proof (state)\nthis:\n  \\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n  \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a')\n  distinct (y # a')\n  x \\<in> set (y # a')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct []; x \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> mset [] = {#x#} + mset (removeAll x [])\n 2. \\<And>a1 a2.\n       \\<lbrakk>\\<lbrakk>distinct a2; x \\<in> set a2\\<rbrakk>\n                \\<Longrightarrow> mset a2 = {#x#} + mset (removeAll x a2);\n        distinct (a1 # a2); x \\<in> set (a1 # a2)\\<rbrakk>\n       \\<Longrightarrow> mset (a1 # a2) =\n                         {#x#} + mset (removeAll x (a1 # a2))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n  \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a')\n  distinct (y # a')\n  x \\<in> set (y # a')\n\ngoal (1 subgoal):\n 1. mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x = y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n 2. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x = y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n 2. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "with \\<open>distinct (y # a')\\<close> \\<open>x \\<in> set (y # a')\\<close>"], ["proof (chain)\npicking this:\n  distinct (y # a')\n  x \\<in> set (y # a')\n  x = y", "have \"\\<not>  x \\<in> set a'\""], ["proof (prove)\nusing this:\n  distinct (y # a')\n  x \\<in> set (y # a')\n  x = y\n\ngoal (1 subgoal):\n 1. x \\<notin> set a'", "by auto"], ["proof (state)\nthis:\n  x \\<notin> set a'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x = y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n 2. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "hence \"removeAll x a' = a'\""], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. removeAll x a' = a'", "by (rule removeAll_id)"], ["proof (state)\nthis:\n  removeAll x a' = a'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x = y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n 2. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "with \\<open>x = y\\<close>"], ["proof (chain)\npicking this:\n  x = y\n  removeAll x a' = a'", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y\n  removeAll x a' = a'\n\ngoal (1 subgoal):\n 1. mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "by (simp add: union_commute)"], ["proof (state)\nthis:\n  mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "with \\<open>x \\<in> set (y # a')\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> set (y # a')\n  x \\<noteq> y", "have \"x \\<in> set a'\""], ["proof (prove)\nusing this:\n  x \\<in> set (y # a')\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<in> set a'", "by simp"], ["proof (state)\nthis:\n  x \\<in> set a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "with \\<open>distinct (y # a')\\<close>"], ["proof (chain)\npicking this:\n  distinct (y # a')\n  x \\<in> set a'", "have \"x \\<noteq> y\" \"distinct a'\""], ["proof (prove)\nusing this:\n  distinct (y # a')\n  x \\<in> set a'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y &&& distinct a'", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> y\n  distinct a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "hence \"mset a' = {#x#} + mset (removeAll x a')\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  distinct a'\n\ngoal (1 subgoal):\n 1. mset a' = {#x#} + mset (removeAll x a')", "using \\<open>x \\<in> set a'\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  distinct a'\n  x \\<in> set a'\n\ngoal (1 subgoal):\n 1. mset a' = {#x#} + mset (removeAll x a')", "using Cons(1)"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  distinct a'\n  x \\<in> set a'\n  \\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n  \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a')\n\ngoal (1 subgoal):\n 1. mset a' = {#x#} + mset (removeAll x a')", "by simp"], ["proof (state)\nthis:\n  mset a' = {#x#} + mset (removeAll x a')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>distinct a'; x \\<in> set a'\\<rbrakk>\n             \\<Longrightarrow> mset a' = {#x#} + mset (removeAll x a');\n     distinct (y # a'); x \\<in> set (y # a'); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  mset a' = {#x#} + mset (removeAll x a')\n\ngoal (1 subgoal):\n 1. mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "using \\<open>x \\<noteq> y\\<close>"], ["proof (prove)\nusing this:\n  mset a' = {#x#} + mset (removeAll x a')\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. mset (y # a') = {#x#} + mset (removeAll x (y # a'))", "by (simp add: union_assoc)"], ["proof (state)\nthis:\n  mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (y # a') = {#x#} + mset (removeAll x (y # a'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct []; x \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> mset [] = {#x#} + mset (removeAll x [])", "qed simp"], ["", "lemma removeAll_map:\n  assumes \"\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\"\n  shows \"removeAll (f x) (map f a) = map f (removeAll x a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. removeAll (f x) (map f a) = map f (removeAll x a)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (1 subgoal):\n 1. removeAll (f x) (map f a) = map f (removeAll x a)", "by (induct a arbitrary: x) auto"], ["", "(*********************************************************)\n(*                   uniq                                *)\n(*********************************************************)"], ["", "subsection\\<open>@{term uniq} - no duplicate elements.\\<close>"], ["", "text\\<open>@{term \"(uniq list)\"} holds iff there are no repeated elements\nin a list.  Obsolete: same as @{term \"distinct\"} in {\\em List.thy}.\\<close>"], ["", "primrec uniq :: \"'a list => bool\"\nwhere\n\"uniq [] = True\" |\n\"uniq (h#t) = (h \\<notin> set t \\<and> uniq t)\""], ["", "lemma uniqDistinct:\n\"uniq l = distinct l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniq l = distinct l", "by (induct l) auto"], ["", "lemma uniqAppend: \n  assumes \"uniq (l1 @ l2)\" \n  shows \"uniq l1\" \"uniq l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniq l1 &&& uniq l2", "using assms"], ["proof (prove)\nusing this:\n  uniq (l1 @ l2)\n\ngoal (1 subgoal):\n 1. uniq l1 &&& uniq l2", "by (induct l1) auto"], ["", "lemma uniqAppendIff: \n  \"uniq (l1 @ l2) = (uniq l1 \\<and> uniq l2 \\<and> set l1 \\<inter> set l2 = {})\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. uniq (l1 @ l2) =\n    (uniq l1 \\<and> uniq l2 \\<and> set l1 \\<inter> set l2 = {})", "by (induct l1) auto"], ["", "lemma uniqAppendElement: \n  assumes \"uniq l\" \n  shows \"e \\<notin> set l = uniq (l @ [e])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<notin> set l) = uniq (l @ [e])", "using assms"], ["proof (prove)\nusing this:\n  uniq l\n\ngoal (1 subgoal):\n 1. (e \\<notin> set l) = uniq (l @ [e])", "by (induct l) (auto split: if_split_asm)"], ["", "lemma uniqImpliesNotLastMemButlast:\n  assumes \"uniq l\"\n  shows \"last l \\<notin> set (butlast l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last l \\<notin> set (butlast l)", "proof (cases \"l = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> last l \\<notin> set (butlast l)\n 2. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "case True"], ["proof (state)\nthis:\n  l = []\n\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> last l \\<notin> set (butlast l)\n 2. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "thus ?thesis"], ["proof (prove)\nusing this:\n  l = []\n\ngoal (1 subgoal):\n 1. last l \\<notin> set (butlast l)", "using assms"], ["proof (prove)\nusing this:\n  l = []\n  uniq l\n\ngoal (1 subgoal):\n 1. last l \\<notin> set (butlast l)", "by simp"], ["proof (state)\nthis:\n  last l \\<notin> set (butlast l)\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "case False"], ["proof (state)\nthis:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "hence \"l = butlast l @ [last l]\""], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l = butlast l @ [last l]", "by (rule listEqualsButlastAppendLast)"], ["proof (state)\nthis:\n  l = butlast l @ [last l]\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "moreover"], ["proof (state)\nthis:\n  l = butlast l @ [last l]\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "with \\<open>uniq l\\<close>"], ["proof (chain)\npicking this:\n  uniq l\n  l = butlast l @ [last l]", "have \"uniq (butlast l)\""], ["proof (prove)\nusing this:\n  uniq l\n  l = butlast l @ [last l]\n\ngoal (1 subgoal):\n 1. uniq (butlast l)", "using uniqAppend[of \"butlast l\" \"[last l]\"]"], ["proof (prove)\nusing this:\n  uniq l\n  l = butlast l @ [last l]\n  uniq (butlast l @ [last l]) \\<Longrightarrow> uniq (butlast l)\n  uniq (butlast l @ [last l]) \\<Longrightarrow> uniq [last l]\n\ngoal (1 subgoal):\n 1. uniq (butlast l)", "by simp"], ["proof (state)\nthis:\n  uniq (butlast l)\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<notin> set (butlast l)", "ultimately"], ["proof (chain)\npicking this:\n  l = butlast l @ [last l]\n  uniq (butlast l)", "show ?thesis"], ["proof (prove)\nusing this:\n  l = butlast l @ [last l]\n  uniq (butlast l)\n\ngoal (1 subgoal):\n 1. last l \\<notin> set (butlast l)", "using assms"], ["proof (prove)\nusing this:\n  l = butlast l @ [last l]\n  uniq (butlast l)\n  uniq l\n\ngoal (1 subgoal):\n 1. last l \\<notin> set (butlast l)", "using uniqAppendElement[of \"butlast l\" \"last l\"]"], ["proof (prove)\nusing this:\n  l = butlast l @ [last l]\n  uniq (butlast l)\n  uniq l\n  uniq (butlast l) \\<Longrightarrow>\n  (last l \\<notin> set (butlast l)) = uniq (butlast l @ [last l])\n\ngoal (1 subgoal):\n 1. last l \\<notin> set (butlast l)", "by simp"], ["proof (state)\nthis:\n  last l \\<notin> set (butlast l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniqButlastNotUniqListImpliesLastMemButlast: \n  assumes \"uniq (butlast l)\" \"\\<not> uniq l\" \n  shows \"last l \\<in> set (butlast l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last l \\<in> set (butlast l)", "proof (cases \"l = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> last l \\<in> set (butlast l)\n 2. l \\<noteq> [] \\<Longrightarrow> last l \\<in> set (butlast l)", "case True"], ["proof (state)\nthis:\n  l = []\n\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow> last l \\<in> set (butlast l)\n 2. l \\<noteq> [] \\<Longrightarrow> last l \\<in> set (butlast l)", "thus ?thesis"], ["proof (prove)\nusing this:\n  l = []\n\ngoal (1 subgoal):\n 1. last l \\<in> set (butlast l)", "using assms"], ["proof (prove)\nusing this:\n  l = []\n  uniq (butlast l)\n  \\<not> uniq l\n\ngoal (1 subgoal):\n 1. last l \\<in> set (butlast l)", "by auto"], ["proof (state)\nthis:\n  last l \\<in> set (butlast l)\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<in> set (butlast l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<in> set (butlast l)", "case False"], ["proof (state)\nthis:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<in> set (butlast l)", "hence \"l = butlast l @ [(last l)]\""], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l = butlast l @ [last l]", "by (rule listEqualsButlastAppendLast)"], ["proof (state)\nthis:\n  l = butlast l @ [last l]\n\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> last l \\<in> set (butlast l)", "thus ?thesis"], ["proof (prove)\nusing this:\n  l = butlast l @ [last l]\n\ngoal (1 subgoal):\n 1. last l \\<in> set (butlast l)", "using assms"], ["proof (prove)\nusing this:\n  l = butlast l @ [last l]\n  uniq (butlast l)\n  \\<not> uniq l\n\ngoal (1 subgoal):\n 1. last l \\<in> set (butlast l)", "using uniqAppendElement[of \"butlast l\" \"last l\"]"], ["proof (prove)\nusing this:\n  l = butlast l @ [last l]\n  uniq (butlast l)\n  \\<not> uniq l\n  uniq (butlast l) \\<Longrightarrow>\n  (last l \\<notin> set (butlast l)) = uniq (butlast l @ [last l])\n\ngoal (1 subgoal):\n 1. last l \\<in> set (butlast l)", "by auto"], ["proof (state)\nthis:\n  last l \\<in> set (butlast l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniqRemdups:\n  shows \"uniq (remdups x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniq (remdups x)", "by (induct x) auto"], ["", "lemma uniqHeadTailSet:\n  assumes \"uniq l\"\n  shows \"set (tl l) = (set l) - {hd l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (tl l) = set l - {hd l}", "using assms"], ["proof (prove)\nusing this:\n  uniq l\n\ngoal (1 subgoal):\n 1. set (tl l) = set l - {hd l}", "by (induct l) auto"], ["", "lemma uniqLengthEqCardSet:\nassumes \"uniq l\"\nshows \"length l = card (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length l = card (set l)", "using assms"], ["proof (prove)\nusing this:\n  uniq l\n\ngoal (1 subgoal):\n 1. length l = card (set l)", "by (induct l) auto"], ["", "lemma lengthGtOneTwoDistinctElements:\nassumes \n  \"uniq l\" \"length l > 1\" \"l \\<noteq> []\"\nshows\n  \"\\<exists> a1 a2. a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "let ?a1 = \"l ! 0\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "let ?a2 = \"l ! 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "have \"?a1 \\<in> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l ! 0 \\<in> set l", "using nth_mem[of \"0\" \"l\"]"], ["proof (prove)\nusing this:\n  0 < length l \\<Longrightarrow> l ! 0 \\<in> set l\n\ngoal (1 subgoal):\n 1. l ! 0 \\<in> set l", "using assms"], ["proof (prove)\nusing this:\n  0 < length l \\<Longrightarrow> l ! 0 \\<in> set l\n  uniq l\n  1 < length l\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l ! 0 \\<in> set l", "by simp"], ["proof (state)\nthis:\n  l ! 0 \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "moreover"], ["proof (state)\nthis:\n  l ! 0 \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "have \"?a2 \\<in> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l ! 1 \\<in> set l", "using nth_mem[of \"1\" \"l\"]"], ["proof (prove)\nusing this:\n  1 < length l \\<Longrightarrow> l ! 1 \\<in> set l\n\ngoal (1 subgoal):\n 1. l ! 1 \\<in> set l", "using assms"], ["proof (prove)\nusing this:\n  1 < length l \\<Longrightarrow> l ! 1 \\<in> set l\n  uniq l\n  1 < length l\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l ! 1 \\<in> set l", "by simp"], ["proof (state)\nthis:\n  l ! 1 \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "moreover"], ["proof (state)\nthis:\n  l ! 1 \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "have \"?a1 \\<noteq> ?a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l ! 0 \\<noteq> l ! 1", "using nth_eq_iff_index_eq[of \"l\" \"0\" \"1\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct l; 0 < length l; 1 < length l\\<rbrakk>\n  \\<Longrightarrow> (l ! 0 = l ! 1) = (0 = 1)\n\ngoal (1 subgoal):\n 1. l ! 0 \\<noteq> l ! 1", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct l; 0 < length l; 1 < length l\\<rbrakk>\n  \\<Longrightarrow> (l ! 0 = l ! 1) = (0 = 1)\n  uniq l\n  1 < length l\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. l ! 0 \\<noteq> l ! 1", "by (auto simp add: uniqDistinct)"], ["proof (state)\nthis:\n  l ! 0 \\<noteq> l ! 1\n\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "ultimately"], ["proof (chain)\npicking this:\n  l ! 0 \\<in> set l\n  l ! 1 \\<in> set l\n  l ! 0 \\<noteq> l ! 1", "show ?thesis"], ["proof (prove)\nusing this:\n  l ! 0 \\<in> set l\n  l ! 1 \\<in> set l\n  l ! 0 \\<noteq> l ! 1\n\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2", "by auto"], ["proof (state)\nthis:\n  \\<exists>a1 a2. a1 \\<in> set l \\<and> a2 \\<in> set l \\<and> a1 \\<noteq> a2\n\ngoal:\nNo subgoals!", "qed"], ["", "(*********************************************************)\n(*                   firstPos                            *)\n(*********************************************************)"], ["", "subsection \\<open>@{term firstPos} - first position of an element\\<close>"], ["", "text\\<open>@{term \"firstPos\"} returns the zero-based index of the first\n  occurrence of an element int a list, or the length of the list if the\n  element does not occur.\\<close>"], ["", "primrec firstPos :: \"'a => 'a list => nat\"\nwhere\n\"firstPos a [] = 0\" |\n\"firstPos a (h # t) = (if a = h then 0 else 1 + (firstPos a t))\""], ["", "lemma firstPosEqualZero:\n  shows \"(firstPos a (m # M') = 0) = (a = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (firstPos a (m # M') = 0) = (a = m)", "by (induct M') auto"], ["", "lemma firstPosLeLength: \n  assumes \"a \\<in> set l\"\n  shows \"firstPos a l < length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. firstPos a l < length l", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set l\n\ngoal (1 subgoal):\n 1. firstPos a l < length l", "by (induct l) auto"], ["", "lemma firstPosAppend: \n  assumes \"a \\<in> set l\" \n  shows \"firstPos a l = firstPos a (l @ l')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. firstPos a l = firstPos a (l @ l')", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set l\n\ngoal (1 subgoal):\n 1. firstPos a l = firstPos a (l @ l')", "by (induct l) auto"], ["", "lemma firstPosAppendNonMemberFirstMemberSecond: \n  assumes \"a \\<notin> set l1\" and  \"a \\<in> set l2\"\n  shows \"firstPos a (l1 @ l2) = length l1 + firstPos a l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. firstPos a (l1 @ l2) = length l1 + firstPos a l2", "using assms"], ["proof (prove)\nusing this:\n  a \\<notin> set l1\n  a \\<in> set l2\n\ngoal (1 subgoal):\n 1. firstPos a (l1 @ l2) = length l1 + firstPos a l2", "by (induct l1) auto"], ["", "lemma firstPosDomainForElements: \n  shows \"(0 \\<le> firstPos a l \\<and> firstPos a l < length l) = (a \\<in> set l)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> firstPos a l \\<and> firstPos a l < length l) = (a \\<in> set l)", "by (induct l) auto"], ["", "lemma firstPosEqual: \n  assumes \"a \\<in> set l\" and \"b \\<in> set l\" \n  shows \"(firstPos a l = firstPos b l) = (a = b)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "assume \"?lhs\""], ["proof (state)\nthis:\n  firstPos a l = firstPos b l\n\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "hence \"?rhs\""], ["proof (prove)\nusing this:\n  firstPos a l = firstPos b l\n\ngoal (1 subgoal):\n 1. a = b", "using assms"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos b l\n  a \\<in> set l\n  b \\<in> set l\n\ngoal (1 subgoal):\n 1. a = b", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "case (Cons m l')"], ["proof (state)\nthis:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "{"], ["proof (state)\nthis:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "assume \"a = m\""], ["proof (state)\nthis:\n  a = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \"b = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. b = m", "from \\<open>a = m\\<close>"], ["proof (chain)\npicking this:\n  a = m", "have \"firstPos a (m # l') = 0\""], ["proof (prove)\nusing this:\n  a = m\n\ngoal (1 subgoal):\n 1. firstPos a (m # l') = 0", "by simp"], ["proof (state)\nthis:\n  firstPos a (m # l') = 0\n\ngoal (1 subgoal):\n 1. b = m", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n  firstPos a (m # l') = 0", "have \"firstPos b (m # l') = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n  firstPos a (m # l') = 0\n\ngoal (1 subgoal):\n 1. firstPos b (m # l') = 0", "by simp"], ["proof (state)\nthis:\n  firstPos b (m # l') = 0\n\ngoal (1 subgoal):\n 1. b = m", "with \\<open>b \\<in> set (m # l')\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> set (m # l')\n  firstPos b (m # l') = 0", "have \"firstPos b (m # l') = 0\""], ["proof (prove)\nusing this:\n  b \\<in> set (m # l')\n  firstPos b (m # l') = 0\n\ngoal (1 subgoal):\n 1. firstPos b (m # l') = 0", "by simp"], ["proof (state)\nthis:\n  firstPos b (m # l') = 0\n\ngoal (1 subgoal):\n 1. b = m", "thus ?thesis"], ["proof (prove)\nusing this:\n  firstPos b (m # l') = 0\n\ngoal (1 subgoal):\n 1. b = m", "using firstPosEqualZero[of \"b\" \"m\" \"l'\"]"], ["proof (prove)\nusing this:\n  firstPos b (m # l') = 0\n  (firstPos b (m # l') = 0) = (b = m)\n\ngoal (1 subgoal):\n 1. b = m", "by simp"], ["proof (state)\nthis:\n  b = m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  b = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "with \\<open>a = m\\<close>"], ["proof (chain)\npicking this:\n  a = m\n  b = m", "have ?case"], ["proof (prove)\nusing this:\n  a = m\n  b = m\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "}"], ["proof (state)\nthis:\n  a = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "note * = this"], ["proof (state)\nthis:\n  a = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  a = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "{"], ["proof (state)\nthis:\n  a = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "assume \"b = m\""], ["proof (state)\nthis:\n  b = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \"a = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a = m", "from \\<open>b = m\\<close>"], ["proof (chain)\npicking this:\n  b = m", "have \"firstPos b (m # l') = 0\""], ["proof (prove)\nusing this:\n  b = m\n\ngoal (1 subgoal):\n 1. firstPos b (m # l') = 0", "by simp"], ["proof (state)\nthis:\n  firstPos b (m # l') = 0\n\ngoal (1 subgoal):\n 1. a = m", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n  firstPos b (m # l') = 0", "have \"firstPos a (m # l') = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n  firstPos b (m # l') = 0\n\ngoal (1 subgoal):\n 1. firstPos a (m # l') = 0", "by simp"], ["proof (state)\nthis:\n  firstPos a (m # l') = 0\n\ngoal (1 subgoal):\n 1. a = m", "with \\<open>a \\<in> set (m # l')\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> set (m # l')\n  firstPos a (m # l') = 0", "have \"firstPos a (m # l') = 0\""], ["proof (prove)\nusing this:\n  a \\<in> set (m # l')\n  firstPos a (m # l') = 0\n\ngoal (1 subgoal):\n 1. firstPos a (m # l') = 0", "by simp"], ["proof (state)\nthis:\n  firstPos a (m # l') = 0\n\ngoal (1 subgoal):\n 1. a = m", "thus ?thesis"], ["proof (prove)\nusing this:\n  firstPos a (m # l') = 0\n\ngoal (1 subgoal):\n 1. a = m", "using firstPosEqualZero[of \"a\" \"m\" \"l'\"]"], ["proof (prove)\nusing this:\n  firstPos a (m # l') = 0\n  (firstPos a (m # l') = 0) = (a = m)\n\ngoal (1 subgoal):\n 1. a = m", "by simp"], ["proof (state)\nthis:\n  a = m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "with \\<open>b = m\\<close>"], ["proof (chain)\npicking this:\n  b = m\n  a = m", "have ?case"], ["proof (prove)\nusing this:\n  b = m\n  a = m\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "}"], ["proof (state)\nthis:\n  b = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "note ** = this"], ["proof (state)\nthis:\n  b = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  b = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "{"], ["proof (state)\nthis:\n  b = m \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "assume Q: \"a \\<noteq> m\" \"b \\<noteq> m\""], ["proof (state)\nthis:\n  a \\<noteq> m\n  b \\<noteq> m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "from Q \\<open>a \\<in> set (m # l')\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> m\n  b \\<noteq> m\n  a \\<in> set (m # l')", "have \"a \\<in> set l'\""], ["proof (prove)\nusing this:\n  a \\<noteq> m\n  b \\<noteq> m\n  a \\<in> set (m # l')\n\ngoal (1 subgoal):\n 1. a \\<in> set l'", "by simp"], ["proof (state)\nthis:\n  a \\<in> set l'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "from Q \\<open>b \\<in> set (m # l')\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> m\n  b \\<noteq> m\n  b \\<in> set (m # l')", "have \"b \\<in> set l'\""], ["proof (prove)\nusing this:\n  a \\<noteq> m\n  b \\<noteq> m\n  b \\<in> set (m # l')\n\ngoal (1 subgoal):\n 1. b \\<in> set l'", "by simp"], ["proof (state)\nthis:\n  b \\<in> set l'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "from \\<open>a \\<in> set l'\\<close> \\<open>b \\<in> set l'\\<close> Cons"], ["proof (chain)\npicking this:\n  a \\<in> set l'\n  b \\<in> set l'\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')", "have \"firstPos a l' = firstPos b l'\""], ["proof (prove)\nusing this:\n  a \\<in> set l'\n  b \\<in> set l'\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n\ngoal (1 subgoal):\n 1. firstPos a l' = firstPos b l'", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  firstPos a l' = firstPos b l'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n  firstPos a l' = firstPos b l'", "have ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>firstPos a l' = firstPos b l'; a \\<in> set l';\n   b \\<in> set l'\\<rbrakk>\n  \\<Longrightarrow> a = b\n  firstPos a (m # l') = firstPos b (m # l')\n  a \\<in> set (m # l')\n  b \\<in> set (m # l')\n  firstPos a l' = firstPos b l'\n\ngoal (1 subgoal):\n 1. a = b", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "note *** = this"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "{"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \"a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m", "by auto"], ["proof (state)\nthis:\n  a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "}"], ["proof (state)\nthis:\n  a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<And>aa l.\n       \\<lbrakk>\\<lbrakk>firstPos a l = firstPos b l; a \\<in> set l;\n                 b \\<in> set l\\<rbrakk>\n                \\<Longrightarrow> a = b;\n        firstPos a (aa # l) = firstPos b (aa # l); a \\<in> set (aa # l);\n        b \\<in> set (aa # l)\\<rbrakk>\n       \\<Longrightarrow> a = b", "ultimately"], ["proof (chain)\npicking this:\n  a = m \\<Longrightarrow> a = b\n  b = m \\<Longrightarrow> a = b\n  \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b\n  a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m", "show ?thesis"], ["proof (prove)\nusing this:\n  a = m \\<Longrightarrow> a = b\n  b = m \\<Longrightarrow> a = b\n  \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b\n  a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m\n\ngoal (1 subgoal):\n 1. a = b", "proof (cases \"a = m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a = m\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> a = b", "case True"], ["proof (state)\nthis:\n  a = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a = m\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> a = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = m\n\ngoal (1 subgoal):\n 1. a = b", "by (rule *)"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> a = b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> a = b", "case False"], ["proof (state)\nthis:\n  a \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = m \\<Longrightarrow> a = b; b = m \\<Longrightarrow> a = b;\n     \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b;\n     a = m \\<or> b = m \\<or> a \\<noteq> m \\<and> b \\<noteq> m;\n     a \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> a = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> m\n\ngoal (1 subgoal):\n 1. a = b", "proof (cases \"b = m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> m; b = m\\<rbrakk> \\<Longrightarrow> a = b\n 2. \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b", "case True"], ["proof (state)\nthis:\n  b = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> m; b = m\\<rbrakk> \\<Longrightarrow> a = b\n 2. \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  b = m\n\ngoal (1 subgoal):\n 1. a = b", "by (rule **)"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b", "case False"], ["proof (state)\nthis:\n  b \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> m; b \\<noteq> m\\<rbrakk> \\<Longrightarrow> a = b", "with \\<open>a \\<noteq> m\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> m\n  b \\<noteq> m", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> m\n  b \\<noteq> m\n\ngoal (1 subgoal):\n 1. a = b", "by (rule ***)"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>firstPos a [] = firstPos b []; a \\<in> set [];\n     b \\<in> set []\\<rbrakk>\n    \\<Longrightarrow> a = b", "qed simp"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "}"], ["proof (state)\nthis:\n  firstPos a l = firstPos b l \\<Longrightarrow> a = b\n\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "thus ?thesis"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos b l \\<Longrightarrow> a = b\n\ngoal (1 subgoal):\n 1. (firstPos a l = firstPos b l) = (a = b)", "by auto"], ["proof (state)\nthis:\n  (firstPos a l = firstPos b l) = (a = b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma firstPosLast:\n  assumes \"l \\<noteq> []\" \"uniq l\"\n  shows \"(firstPos x l = length l - 1) = (x = last l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (firstPos x l = length l - 1) = (x = last l)", "using assms"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n  uniq l\n\ngoal (1 subgoal):\n 1. (firstPos x l = length l - 1) = (x = last l)", "by (induct l) auto"], ["", "(*********************************************************)\n(*                   precedes                            *)\n(*********************************************************)"], ["", "subsection\\<open>@{term precedes} - ordering relation induced by @{term firstPos}\\<close>"], ["", "definition precedes :: \"'a => 'a => 'a list => bool\"\nwhere\n\"precedes a b l == (a \\<in> set l \\<and> b \\<in> set l \\<and>  firstPos a l <= firstPos b l)\""], ["", "lemma noElementsPrecedesFirstElement: \n  assumes \"a \\<noteq> b\"\n  shows \"\\<not> precedes a b (b # list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "assume \"precedes a b (b # list)\""], ["proof (state)\nthis:\n  precedes a b (b # list)\n\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "hence \"a \\<in> set (b # list)\" \"firstPos a (b # list) <= 0\""], ["proof (prove)\nusing this:\n  precedes a b (b # list)\n\ngoal (1 subgoal):\n 1. a \\<in> set (b # list) &&& firstPos a (b # list) \\<le> 0", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set (b # list) \\<and>\n  b \\<in> set (b # list) \\<and>\n  firstPos a (b # list) \\<le> firstPos b (b # list)\n\ngoal (1 subgoal):\n 1. a \\<in> set (b # list) &&& firstPos a (b # list) \\<le> 0", "by (auto split: if_split_asm)"], ["proof (state)\nthis:\n  a \\<in> set (b # list)\n  firstPos a (b # list) \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "hence  \"firstPos a (b # list) = 0\""], ["proof (prove)\nusing this:\n  a \\<in> set (b # list)\n  firstPos a (b # list) \\<le> 0\n\ngoal (1 subgoal):\n 1. firstPos a (b # list) = 0", "by auto"], ["proof (state)\nthis:\n  firstPos a (b # list) = 0\n\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "with \\<open>a \\<noteq> b\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> b\n  firstPos a (b # list) = 0", "have False"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  firstPos a (b # list) = 0\n\ngoal (1 subgoal):\n 1. False", "using firstPosEqualZero[of \"a\" \"b\" \"list\"]"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  firstPos a (b # list) = 0\n  (firstPos a (b # list) = 0) = (a = b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "}"], ["proof (state)\nthis:\n  precedes a b (b # list) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "thus ?thesis"], ["proof (prove)\nusing this:\n  precedes a b (b # list) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> precedes a b (b # list)", "by auto"], ["proof (state)\nthis:\n  \\<not> precedes a b (b # list)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lastPrecedesNoElement:\nassumes \"uniq l\"\nshows \"\\<not>(\\<exists> a. a \\<noteq> last l \\<and> precedes (last l) a l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (\\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l)\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l)", "obtain \"a\"\n      where \"precedes (last l) a l\" \"a \\<noteq> last l\""], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>precedes (last l) a l; a \\<noteq> last l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  precedes (last l) a l\n  a \\<noteq> last l\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "hence \"a \\<in> set l\" \"last l \\<in> set l\" \"firstPos (last l) l \\<le> firstPos a l\""], ["proof (prove)\nusing this:\n  precedes (last l) a l\n  a \\<noteq> last l\n\ngoal (1 subgoal):\n 1. a \\<in> set l &&&\n    last l \\<in> set l &&& firstPos (last l) l \\<le> firstPos a l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  last l \\<in> set l \\<and>\n  a \\<in> set l \\<and> firstPos (last l) l \\<le> firstPos a l\n  a \\<noteq> last l\n\ngoal (1 subgoal):\n 1. a \\<in> set l &&&\n    last l \\<in> set l &&& firstPos (last l) l \\<le> firstPos a l", "by auto"], ["proof (state)\nthis:\n  a \\<in> set l\n  last l \\<in> set l\n  firstPos (last l) l \\<le> firstPos a l\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "hence \"length l - 1 \\<le> firstPos a l\""], ["proof (prove)\nusing this:\n  a \\<in> set l\n  last l \\<in> set l\n  firstPos (last l) l \\<le> firstPos a l\n\ngoal (1 subgoal):\n 1. length l - 1 \\<le> firstPos a l", "using firstPosLast[of \"l\" \"last l\"]"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  last l \\<in> set l\n  firstPos (last l) l \\<le> firstPos a l\n  \\<lbrakk>l \\<noteq> []; uniq l\\<rbrakk>\n  \\<Longrightarrow> (firstPos (last l) l = length l - 1) = (last l = last l)\n\ngoal (1 subgoal):\n 1. length l - 1 \\<le> firstPos a l", "using \\<open>uniq l\\<close>"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  last l \\<in> set l\n  firstPos (last l) l \\<le> firstPos a l\n  \\<lbrakk>l \\<noteq> []; uniq l\\<rbrakk>\n  \\<Longrightarrow> (firstPos (last l) l = length l - 1) = (last l = last l)\n  uniq l\n\ngoal (1 subgoal):\n 1. length l - 1 \\<le> firstPos a l", "by force"], ["proof (state)\nthis:\n  length l - 1 \\<le> firstPos a l\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "hence \"firstPos a l = length l - 1\""], ["proof (prove)\nusing this:\n  length l - 1 \\<le> firstPos a l\n\ngoal (1 subgoal):\n 1. firstPos a l = length l - 1", "using firstPosDomainForElements[of \"a\" \"l\"]"], ["proof (prove)\nusing this:\n  length l - 1 \\<le> firstPos a l\n  (0 \\<le> firstPos a l \\<and> firstPos a l < length l) = (a \\<in> set l)\n\ngoal (1 subgoal):\n 1. firstPos a l = length l - 1", "using \\<open>a \\<in> set l\\<close>"], ["proof (prove)\nusing this:\n  length l - 1 \\<le> firstPos a l\n  (0 \\<le> firstPos a l \\<and> firstPos a l < length l) = (a \\<in> set l)\n  a \\<in> set l\n\ngoal (1 subgoal):\n 1. firstPos a l = length l - 1", "by auto"], ["proof (state)\nthis:\n  firstPos a l = length l - 1\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "hence \"a = last l\""], ["proof (prove)\nusing this:\n  firstPos a l = length l - 1\n\ngoal (1 subgoal):\n 1. a = last l", "using firstPosLast[of \"l\" \"last l\"]"], ["proof (prove)\nusing this:\n  firstPos a l = length l - 1\n  \\<lbrakk>l \\<noteq> []; uniq l\\<rbrakk>\n  \\<Longrightarrow> (firstPos (last l) l = length l - 1) = (last l = last l)\n\ngoal (1 subgoal):\n 1. a = last l", "using \\<open>a \\<in> set l\\<close> \\<open>last l \\<in> set l\\<close>"], ["proof (prove)\nusing this:\n  firstPos a l = length l - 1\n  \\<lbrakk>l \\<noteq> []; uniq l\\<rbrakk>\n  \\<Longrightarrow> (firstPos (last l) l = length l - 1) = (last l = last l)\n  a \\<in> set l\n  last l \\<in> set l\n\ngoal (1 subgoal):\n 1. a = last l", "using \\<open>uniq l\\<close>"], ["proof (prove)\nusing this:\n  firstPos a l = length l - 1\n  \\<lbrakk>l \\<noteq> []; uniq l\\<rbrakk>\n  \\<Longrightarrow> (firstPos (last l) l = length l - 1) = (last l = last l)\n  a \\<in> set l\n  last l \\<in> set l\n  uniq l\n\ngoal (1 subgoal):\n 1. a = last l", "using firstPosEqual[of \"a\" \"l\" \"last l\"]"], ["proof (prove)\nusing this:\n  firstPos a l = length l - 1\n  \\<lbrakk>l \\<noteq> []; uniq l\\<rbrakk>\n  \\<Longrightarrow> (firstPos (last l) l = length l - 1) = (last l = last l)\n  a \\<in> set l\n  last l \\<in> set l\n  uniq l\n  \\<lbrakk>a \\<in> set l; last l \\<in> set l\\<rbrakk>\n  \\<Longrightarrow> (firstPos a l = firstPos (last l) l) = (a = last l)\n\ngoal (1 subgoal):\n 1. a = last l", "by force"], ["proof (state)\nthis:\n  a = last l\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "with \\<open>a \\<noteq> last l\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> last l\n  a = last l", "have False"], ["proof (prove)\nusing this:\n  a \\<noteq> last l\n  a = last l\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "}"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>a.\n             a \\<noteq> last l \\<and>\n             precedes (last l) a l) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>a.\n             a \\<noteq> last l \\<and>\n             precedes (last l) a l) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l", "by auto"], ["proof (state)\nthis:\n  \\<nexists>a. a \\<noteq> last l \\<and> precedes (last l) a l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precedesAppend: \n  assumes \"precedes a b l\" \n  shows \"precedes a b (l @ l')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a b (l @ l')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precedes a b (l @ l')", "from \\<open>precedes a b l\\<close>"], ["proof (chain)\npicking this:\n  precedes a b l", "have \"a \\<in> set l\" \"b \\<in> set l\" \"firstPos a l \\<le> firstPos b l\""], ["proof (prove)\nusing this:\n  precedes a b l\n\ngoal (1 subgoal):\n 1. a \\<in> set l &&& b \\<in> set l &&& firstPos a l \\<le> firstPos b l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l \\<and> b \\<in> set l \\<and> firstPos a l \\<le> firstPos b l\n\ngoal (1 subgoal):\n 1. a \\<in> set l &&& b \\<in> set l &&& firstPos a l \\<le> firstPos b l", "by (auto split: if_split_asm)"], ["proof (state)\nthis:\n  a \\<in> set l\n  b \\<in> set l\n  firstPos a l \\<le> firstPos b l\n\ngoal (1 subgoal):\n 1. precedes a b (l @ l')", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n  firstPos a l \\<le> firstPos b l\n\ngoal (1 subgoal):\n 1. precedes a b (l @ l')", "using firstPosAppend[of \"a\" \"l\" \"l'\"]"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n  firstPos a l \\<le> firstPos b l\n  a \\<in> set l \\<Longrightarrow> firstPos a l = firstPos a (l @ l')\n\ngoal (1 subgoal):\n 1. precedes a b (l @ l')", "using firstPosAppend[of \"b\" \"l\" \"l'\"]"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n  firstPos a l \\<le> firstPos b l\n  a \\<in> set l \\<Longrightarrow> firstPos a l = firstPos a (l @ l')\n  b \\<in> set l \\<Longrightarrow> firstPos b l = firstPos b (l @ l')\n\ngoal (1 subgoal):\n 1. precedes a b (l @ l')", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n  firstPos a l \\<le> firstPos b l\n  a \\<in> set l \\<Longrightarrow> firstPos a l = firstPos a (l @ l')\n  b \\<in> set l \\<Longrightarrow> firstPos b l = firstPos b (l @ l')\n\ngoal (1 subgoal):\n 1. a \\<in> set (l @ l') \\<and>\n    b \\<in> set (l @ l') \\<and>\n    firstPos a (l @ l') \\<le> firstPos b (l @ l')", "by simp"], ["proof (state)\nthis:\n  precedes a b (l @ l')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precedesMemberHeadMemberTail: \n  assumes \"a \\<in> set l1\" and \"b \\<notin> set l1\" and \"b \\<in> set l2\"\n  shows \"precedes a b (l1 @ l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "from \\<open>a \\<in> set l1\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> set l1", "have \"firstPos a l1 < length l1\""], ["proof (prove)\nusing this:\n  a \\<in> set l1\n\ngoal (1 subgoal):\n 1. firstPos a l1 < length l1", "using firstPosLeLength [of \"a\" \"l1\"]"], ["proof (prove)\nusing this:\n  a \\<in> set l1\n  a \\<in> set l1 \\<Longrightarrow> firstPos a l1 < length l1\n\ngoal (1 subgoal):\n 1. firstPos a l1 < length l1", "by simp"], ["proof (state)\nthis:\n  firstPos a l1 < length l1\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "moreover"], ["proof (state)\nthis:\n  firstPos a l1 < length l1\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "from \\<open>a \\<in> set l1\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> set l1", "have \"firstPos a (l1 @ l2) = firstPos a l1\""], ["proof (prove)\nusing this:\n  a \\<in> set l1\n\ngoal (1 subgoal):\n 1. firstPos a (l1 @ l2) = firstPos a l1", "using firstPosAppend[of \"a\" \"l1\" \"l2\"]"], ["proof (prove)\nusing this:\n  a \\<in> set l1\n  a \\<in> set l1 \\<Longrightarrow> firstPos a l1 = firstPos a (l1 @ l2)\n\ngoal (1 subgoal):\n 1. firstPos a (l1 @ l2) = firstPos a l1", "by simp"], ["proof (state)\nthis:\n  firstPos a (l1 @ l2) = firstPos a l1\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "moreover"], ["proof (state)\nthis:\n  firstPos a (l1 @ l2) = firstPos a l1\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "from \\<open>b \\<notin> set l1\\<close> \\<open>b \\<in> set l2\\<close>"], ["proof (chain)\npicking this:\n  b \\<notin> set l1\n  b \\<in> set l2", "have \"firstPos b (l1 @ l2) = length l1 + firstPos b l2\""], ["proof (prove)\nusing this:\n  b \\<notin> set l1\n  b \\<in> set l2\n\ngoal (1 subgoal):\n 1. firstPos b (l1 @ l2) = length l1 + firstPos b l2", "by (rule firstPosAppendNonMemberFirstMemberSecond)"], ["proof (state)\nthis:\n  firstPos b (l1 @ l2) = length l1 + firstPos b l2\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "moreover"], ["proof (state)\nthis:\n  firstPos b (l1 @ l2) = length l1 + firstPos b l2\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "have \"firstPos b l2 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> firstPos b l2", "by auto"], ["proof (state)\nthis:\n  0 \\<le> firstPos b l2\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "ultimately"], ["proof (chain)\npicking this:\n  firstPos a l1 < length l1\n  firstPos a (l1 @ l2) = firstPos a l1\n  firstPos b (l1 @ l2) = length l1 + firstPos b l2\n  0 \\<le> firstPos b l2", "show ?thesis"], ["proof (prove)\nusing this:\n  firstPos a l1 < length l1\n  firstPos a (l1 @ l2) = firstPos a l1\n  firstPos b (l1 @ l2) = length l1 + firstPos b l2\n  0 \\<le> firstPos b l2\n\ngoal (1 subgoal):\n 1. precedes a b (l1 @ l2)", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  firstPos a l1 < length l1\n  firstPos a (l1 @ l2) = firstPos a l1\n  firstPos b (l1 @ l2) = length l1 + firstPos b l2\n  0 \\<le> firstPos b l2\n\ngoal (1 subgoal):\n 1. a \\<in> set (l1 @ l2) \\<and>\n    b \\<in> set (l1 @ l2) \\<and>\n    firstPos a (l1 @ l2) \\<le> firstPos b (l1 @ l2)", "using \\<open>a \\<in> set l1\\<close> \\<open>b \\<in> set l2\\<close>"], ["proof (prove)\nusing this:\n  firstPos a l1 < length l1\n  firstPos a (l1 @ l2) = firstPos a l1\n  firstPos b (l1 @ l2) = length l1 + firstPos b l2\n  0 \\<le> firstPos b l2\n  a \\<in> set l1\n  b \\<in> set l2\n\ngoal (1 subgoal):\n 1. a \\<in> set (l1 @ l2) \\<and>\n    b \\<in> set (l1 @ l2) \\<and>\n    firstPos a (l1 @ l2) \\<le> firstPos b (l1 @ l2)", "by simp"], ["proof (state)\nthis:\n  precedes a b (l1 @ l2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precedesReflexivity: \n  assumes \"a \\<in> set l\"\n  shows \"precedes a a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a a l", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set l\n\ngoal (1 subgoal):\n 1. precedes a a l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l\n\ngoal (1 subgoal):\n 1. a \\<in> set l \\<and>\n    a \\<in> set l \\<and> firstPos a l \\<le> firstPos a l", "by simp"], ["", "lemma precedesTransitivity: \n  assumes \n  \"precedes a b l\" and \"precedes b c l\" \n  shows \n  \"precedes a c l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a c l", "using assms"], ["proof (prove)\nusing this:\n  precedes a b l\n  precedes b c l\n\ngoal (1 subgoal):\n 1. precedes a c l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l \\<and> b \\<in> set l \\<and> firstPos a l \\<le> firstPos b l\n  b \\<in> set l \\<and> c \\<in> set l \\<and> firstPos b l \\<le> firstPos c l\n\ngoal (1 subgoal):\n 1. a \\<in> set l \\<and>\n    c \\<in> set l \\<and> firstPos a l \\<le> firstPos c l", "by auto"], ["", "lemma precedesAntisymmetry: \n  assumes\n  \"a \\<in> set l\" and \"b \\<in> set l\" and\n  \"precedes a b l\" and \"precedes b a l\"\n  shows\n  \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a = b", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> set l\n  b \\<in> set l\n  precedes a b l\n  precedes b a l", "have \"firstPos a l = firstPos b l\""], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n  precedes a b l\n  precedes b a l\n\ngoal (1 subgoal):\n 1. firstPos a l = firstPos b l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n  a \\<in> set l \\<and> b \\<in> set l \\<and> firstPos a l \\<le> firstPos b l\n  b \\<in> set l \\<and> a \\<in> set l \\<and> firstPos b l \\<le> firstPos a l\n\ngoal (1 subgoal):\n 1. firstPos a l = firstPos b l", "by auto"], ["proof (state)\nthis:\n  firstPos a l = firstPos b l\n\ngoal (1 subgoal):\n 1. a = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos b l\n\ngoal (1 subgoal):\n 1. a = b", "using firstPosEqual[of \"a\" \"l\" \"b\"]"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos b l\n  \\<lbrakk>a \\<in> set l; b \\<in> set l\\<rbrakk>\n  \\<Longrightarrow> (firstPos a l = firstPos b l) = (a = b)\n\ngoal (1 subgoal):\n 1. a = b", "using assms"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos b l\n  \\<lbrakk>a \\<in> set l; b \\<in> set l\\<rbrakk>\n  \\<Longrightarrow> (firstPos a l = firstPos b l) = (a = b)\n  a \\<in> set l\n  b \\<in> set l\n  precedes a b l\n  precedes b a l\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precedesTotalOrder: \n  assumes \"a \\<in> set l\" and \"b \\<in> set l\"\n  shows \"a=b \\<or> precedes a b l \\<or> precedes b a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<or> precedes a b l \\<or> precedes b a l", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n\ngoal (1 subgoal):\n 1. a = b \\<or> precedes a b l \\<or> precedes b a l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l\n  b \\<in> set l\n\ngoal (1 subgoal):\n 1. a = b \\<or>\n    a \\<in> set l \\<and>\n    b \\<in> set l \\<and> firstPos a l \\<le> firstPos b l \\<or>\n    b \\<in> set l \\<and>\n    a \\<in> set l \\<and> firstPos b l \\<le> firstPos a l", "by auto"], ["", "lemma precedesMap:\n  assumes \"precedes a b list\" and \"\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\"\n  shows \"precedes (f a) (f b) (map f list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f list)", "using assms"], ["proof (prove)\nusing this:\n  precedes a b list\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f list)", "proof (induct list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "case (Cons l list')"], ["proof (state)\nthis:\n  \\<lbrakk>precedes a b list';\n   \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f list')\n  precedes a b (l # list')\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>precedes a b list';\n   \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f list')\n  precedes a b (l # list')\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "assume \"a = l\""], ["proof (state)\nthis:\n  a = l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "from \\<open>a = l\\<close>"], ["proof (chain)\npicking this:\n  a = l", "have \"firstPos (f a) (map f (l # list')) = 0\""], ["proof (prove)\nusing this:\n  a = l\n\ngoal (1 subgoal):\n 1. firstPos (f a) (map f (l # list')) = 0", "using firstPosEqualZero[of \"f a\" \"f l\" \"map f list'\"]"], ["proof (prove)\nusing this:\n  a = l\n  (firstPos (f a) (f l # map f list') = 0) = (f a = f l)\n\ngoal (1 subgoal):\n 1. firstPos (f a) (map f (l # list')) = 0", "by simp"], ["proof (state)\nthis:\n  firstPos (f a) (map f (l # list')) = 0\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "moreover"], ["proof (state)\nthis:\n  firstPos (f a) (map f (l # list')) = 0\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "from \\<open>precedes a b (l # list')\\<close>"], ["proof (chain)\npicking this:\n  precedes a b (l # list')", "have \"b \\<in> set (l # list')\""], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n\ngoal (1 subgoal):\n 1. b \\<in> set (l # list')", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set (l # list') \\<and>\n  b \\<in> set (l # list') \\<and>\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n\ngoal (1 subgoal):\n 1. b \\<in> set (l # list')", "by simp"], ["proof (state)\nthis:\n  b \\<in> set (l # list')\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "hence \"f b \\<in> set (map f (l # list'))\""], ["proof (prove)\nusing this:\n  b \\<in> set (l # list')\n\ngoal (1 subgoal):\n 1. f b \\<in> set (map f (l # list'))", "by auto"], ["proof (state)\nthis:\n  f b \\<in> set (map f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "moreover"], ["proof (state)\nthis:\n  f b \\<in> set (map f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "hence \"firstPos (f b) (map f (l # list')) \\<ge>  0\""], ["proof (prove)\nusing this:\n  f b \\<in> set (map f (l # list'))\n\ngoal (1 subgoal):\n 1. 0 \\<le> firstPos (f b) (map f (l # list'))", "by auto"], ["proof (state)\nthis:\n  0 \\<le> firstPos (f b) (map f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "ultimately"], ["proof (chain)\npicking this:\n  firstPos (f a) (map f (l # list')) = 0\n  f b \\<in> set (map f (l # list'))\n  0 \\<le> firstPos (f b) (map f (l # list'))", "show ?thesis"], ["proof (prove)\nusing this:\n  firstPos (f a) (map f (l # list')) = 0\n  f b \\<in> set (map f (l # list'))\n  0 \\<le> firstPos (f b) (map f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "using \\<open>a = l\\<close> \\<open>f b \\<in> set (map f (l # list'))\\<close>"], ["proof (prove)\nusing this:\n  firstPos (f a) (map f (l # list')) = 0\n  f b \\<in> set (map f (l # list'))\n  0 \\<le> firstPos (f b) (map f (l # list'))\n  a = l\n  f b \\<in> set (map f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  firstPos (f a) (map f (l # list')) = 0\n  f b \\<in> set (map f (l # list'))\n  0 \\<le> firstPos (f b) (map f (l # list'))\n  a = l\n  f b \\<in> set (map f (l # list'))\n\ngoal (1 subgoal):\n 1. f a \\<in> set (map f (l # list')) \\<and>\n    f b \\<in> set (map f (l # list')) \\<and>\n    firstPos (f a) (map f (l # list'))\n    \\<le> firstPos (f b) (map f (l # list'))", "by simp"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f (l # list'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "}"], ["proof (state)\nthis:\n  a = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "moreover"], ["proof (state)\nthis:\n  a = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "{"], ["proof (state)\nthis:\n  a = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "assume \"b = l\""], ["proof (state)\nthis:\n  b = l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "with \\<open>precedes a b (l # list')\\<close>"], ["proof (chain)\npicking this:\n  precedes a b (l # list')\n  b = l", "have \"a = l\""], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n  b = l\n\ngoal (1 subgoal):\n 1. a = l", "using noElementsPrecedesFirstElement[of \"a\" \"l\" \"list'\"]"], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n  b = l\n  a \\<noteq> l \\<Longrightarrow> \\<not> precedes a l (l # list')\n\ngoal (1 subgoal):\n 1. a = l", "by auto"], ["proof (state)\nthis:\n  a = l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "from \\<open>a = l\\<close> \\<open>b = l\\<close>"], ["proof (chain)\npicking this:\n  a = l\n  b = l", "have ?case"], ["proof (prove)\nusing this:\n  a = l\n  b = l\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a = l\n  b = l\n\ngoal (1 subgoal):\n 1. f a \\<in> set (map f (l # list')) \\<and>\n    f b \\<in> set (map f (l # list')) \\<and>\n    firstPos (f a) (map f (l # list'))\n    \\<le> firstPos (f b) (map f (l # list'))", "by simp"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "}"], ["proof (state)\nthis:\n  b = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "moreover"], ["proof (state)\nthis:\n  b = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "{"], ["proof (state)\nthis:\n  b = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "assume \"a \\<noteq> l\" \"b \\<noteq> l\""], ["proof (state)\nthis:\n  a \\<noteq> l\n  b \\<noteq> l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "with \\<open>\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n  a \\<noteq> l\n  b \\<noteq> l", "have \"f a \\<noteq> f l\" \"f b \\<noteq> f l\""], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n  a \\<noteq> l\n  b \\<noteq> l\n\ngoal (1 subgoal):\n 1. f a \\<noteq> f l &&& f b \\<noteq> f l", "by auto"], ["proof (state)\nthis:\n  f a \\<noteq> f l\n  f b \\<noteq> f l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "from \\<open>precedes a b (l # list')\\<close>"], ["proof (chain)\npicking this:\n  precedes a b (l # list')", "have \"b \\<in> set(l # list')\" \"a \\<in> set(l # list')\" \"firstPos a (l # list') \\<le> firstPos b (l # list')\""], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n\ngoal (1 subgoal):\n 1. b \\<in> set (l # list') &&&\n    a \\<in> set (l # list') &&&\n    firstPos a (l # list') \\<le> firstPos b (l # list')", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set (l # list') \\<and>\n  b \\<in> set (l # list') \\<and>\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n\ngoal (1 subgoal):\n 1. b \\<in> set (l # list') &&&\n    a \\<in> set (l # list') &&&\n    firstPos a (l # list') \\<le> firstPos b (l # list')", "by auto"], ["proof (state)\nthis:\n  b \\<in> set (l # list')\n  a \\<in> set (l # list')\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "with \\<open>a \\<noteq> l\\<close> \\<open>b \\<noteq> l\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> l\n  b \\<noteq> l\n  b \\<in> set (l # list')\n  a \\<in> set (l # list')\n  firstPos a (l # list') \\<le> firstPos b (l # list')", "have \"a \\<in> set list'\" \"b \\<in> set list'\" \"firstPos a list' \\<le> firstPos b list'\""], ["proof (prove)\nusing this:\n  a \\<noteq> l\n  b \\<noteq> l\n  b \\<in> set (l # list')\n  a \\<in> set (l # list')\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n\ngoal (1 subgoal):\n 1. a \\<in> set list' &&&\n    b \\<in> set list' &&& firstPos a list' \\<le> firstPos b list'", "by auto"], ["proof (state)\nthis:\n  a \\<in> set list'\n  b \\<in> set list'\n  firstPos a list' \\<le> firstPos b list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "hence \"precedes a b list'\""], ["proof (prove)\nusing this:\n  a \\<in> set list'\n  b \\<in> set list'\n  firstPos a list' \\<le> firstPos b list'\n\ngoal (1 subgoal):\n 1. precedes a b list'", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set list'\n  b \\<in> set list'\n  firstPos a list' \\<le> firstPos b list'\n\ngoal (1 subgoal):\n 1. a \\<in> set list' \\<and>\n    b \\<in> set list' \\<and> firstPos a list' \\<le> firstPos b list'", "by simp"], ["proof (state)\nthis:\n  precedes a b list'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>precedes a b list';\n   \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f list')\n  precedes a b (l # list')\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n  precedes a b list'", "have \"precedes (f a) (f b) (map f list')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>precedes a b list';\n   \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f list')\n  precedes a b (l # list')\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n  precedes a b list'\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f list')", "by simp"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f list')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "with \\<open>f a \\<noteq> f l\\<close> \\<open>f b \\<noteq> f l\\<close>"], ["proof (chain)\npicking this:\n  f a \\<noteq> f l\n  f b \\<noteq> f l\n  precedes (f a) (f b) (map f list')", "have ?case"], ["proof (prove)\nusing this:\n  f a \\<noteq> f l\n  f b \\<noteq> f l\n  precedes (f a) (f b) (map f list')\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  f a \\<noteq> f l\n  f b \\<noteq> f l\n  f a \\<in> set (map f list') \\<and>\n  f b \\<in> set (map f list') \\<and>\n  firstPos (f a) (map f list') \\<le> firstPos (f b) (map f list')\n\ngoal (1 subgoal):\n 1. f a \\<in> set (map f (l # list')) \\<and>\n    f b \\<in> set (map f (l # list')) \\<and>\n    firstPos (f a) (map f (l # list'))\n    \\<le> firstPos (f b) (map f (l # list'))", "by auto"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> l; b \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list;\n                 \\<forall>x y.\n                    x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n                \\<Longrightarrow> precedes (f a) (f b) (map f list);\n        precedes a b (aa # list);\n        \\<forall>x y.\n           x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n       \\<Longrightarrow> precedes (f a) (f b) (map f (aa # list))", "ultimately"], ["proof (chain)\npicking this:\n  a = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n  b = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n  \\<lbrakk>a \\<noteq> l; b \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))", "show ?case"], ["proof (prove)\nusing this:\n  a = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n  b = l \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n  \\<lbrakk>a \\<noteq> l; b \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> precedes (f a) (f b) (map f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f (l # list'))", "by auto"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f (l # list'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])", "case Nil"], ["proof (state)\nthis:\n  precedes a b []\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>precedes a b [];\n     \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> precedes (f a) (f b) (map f [])", "thus ?case"], ["proof (prove)\nusing this:\n  precedes a b []\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (1 subgoal):\n 1. precedes (f a) (f b) (map f [])", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set [] \\<and>\n  b \\<in> set [] \\<and> firstPos a [] \\<le> firstPos b []\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (1 subgoal):\n 1. f a \\<in> set (map f []) \\<and>\n    f b \\<in> set (map f []) \\<and>\n    firstPos (f a) (map f []) \\<le> firstPos (f b) (map f [])", "by simp"], ["proof (state)\nthis:\n  precedes (f a) (f b) (map f [])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma precedesFilter: \n  assumes \"precedes a b list\" and \"f a\" and \"f b\"\n  shows \"precedes a b (filter f list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a b (filter f list)", "using assms"], ["proof (prove)\nusing this:\n  precedes a b list\n  f a\n  f b\n\ngoal (1 subgoal):\n 1. precedes a b (filter f list)", "proof(induct list)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b []; f a; f b\\<rbrakk>\n    \\<Longrightarrow> precedes a b (filter f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list; f a; f b\\<rbrakk>\n                \\<Longrightarrow> precedes a b (filter f list);\n        precedes a b (aa # list); f a; f b\\<rbrakk>\n       \\<Longrightarrow> precedes a b (filter f (aa # list))", "case (Cons l list')"], ["proof (state)\nthis:\n  \\<lbrakk>precedes a b list'; f a; f b\\<rbrakk>\n  \\<Longrightarrow> precedes a b (filter f list')\n  precedes a b (l # list')\n  f a\n  f b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>precedes a b []; f a; f b\\<rbrakk>\n    \\<Longrightarrow> precedes a b (filter f [])\n 2. \\<And>aa list.\n       \\<lbrakk>\\<lbrakk>precedes a b list; f a; f b\\<rbrakk>\n                \\<Longrightarrow> precedes a b (filter f list);\n        precedes a b (aa # list); f a; f b\\<rbrakk>\n       \\<Longrightarrow> precedes a b (filter f (aa # list))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "from \\<open>precedes a b (l # list')\\<close>"], ["proof (chain)\npicking this:\n  precedes a b (l # list')", "have \"a \\<in> set(l # list')\" \"b \\<in> set(l # list')\" \"firstPos a (l # list') \\<le> firstPos b (l # list')\""], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n\ngoal (1 subgoal):\n 1. a \\<in> set (l # list') &&&\n    b \\<in> set (l # list') &&&\n    firstPos a (l # list') \\<le> firstPos b (l # list')", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set (l # list') \\<and>\n  b \\<in> set (l # list') \\<and>\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n\ngoal (1 subgoal):\n 1. a \\<in> set (l # list') &&&\n    b \\<in> set (l # list') &&&\n    firstPos a (l # list') \\<le> firstPos b (l # list')", "by auto"], ["proof (state)\nthis:\n  a \\<in> set (l # list')\n  b \\<in> set (l # list')\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "from \\<open>f a\\<close> \\<open>a \\<in> set(l # list')\\<close>"], ["proof (chain)\npicking this:\n  f a\n  a \\<in> set (l # list')", "have \"a \\<in> set(filter f (l # list'))\""], ["proof (prove)\nusing this:\n  f a\n  a \\<in> set (l # list')\n\ngoal (1 subgoal):\n 1. a \\<in> set (filter f (l # list'))", "by auto"], ["proof (state)\nthis:\n  a \\<in> set (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "moreover"], ["proof (state)\nthis:\n  a \\<in> set (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "from \\<open>f b\\<close> \\<open>b \\<in> set(l # list')\\<close>"], ["proof (chain)\npicking this:\n  f b\n  b \\<in> set (l # list')", "have \"b \\<in> set(filter f (l # list'))\""], ["proof (prove)\nusing this:\n  f b\n  b \\<in> set (l # list')\n\ngoal (1 subgoal):\n 1. b \\<in> set (filter f (l # list'))", "by auto"], ["proof (state)\nthis:\n  b \\<in> set (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "moreover"], ["proof (state)\nthis:\n  b \\<in> set (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "have \"firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "assume \"a = l\""], ["proof (state)\nthis:\n  a = l\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "with \\<open>f a\\<close>"], ["proof (chain)\npicking this:\n  f a\n  a = l", "have \"firstPos a (filter f (l # list')) = 0\""], ["proof (prove)\nusing this:\n  f a\n  a = l\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list')) = 0", "by auto"], ["proof (state)\nthis:\n  firstPos a (filter f (l # list')) = 0\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "with \\<open>b \\<in> set (filter f (l # list'))\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> set (filter f (l # list'))\n  firstPos a (filter f (l # list')) = 0", "have ?thesis"], ["proof (prove)\nusing this:\n  b \\<in> set (filter f (l # list'))\n  firstPos a (filter f (l # list')) = 0\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "by auto"], ["proof (state)\nthis:\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "}"], ["proof (state)\nthis:\n  a = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "moreover"], ["proof (state)\nthis:\n  a = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "{"], ["proof (state)\nthis:\n  a = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "assume \"b = l\""], ["proof (state)\nthis:\n  b = l\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "with \\<open>precedes a b (l # list')\\<close>"], ["proof (chain)\npicking this:\n  precedes a b (l # list')\n  b = l", "have \"a = b\""], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n  b = l\n\ngoal (1 subgoal):\n 1. a = b", "using noElementsPrecedesFirstElement[of \"a\" \"b\" \"list'\"]"], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n  b = l\n  a \\<noteq> b \\<Longrightarrow> \\<not> precedes a b (b # list')\n\ngoal (1 subgoal):\n 1. a = b", "by auto"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "hence ?thesis"], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "by (simp add: precedesReflexivity)"], ["proof (state)\nthis:\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "}"], ["proof (state)\nthis:\n  b = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "moreover"], ["proof (state)\nthis:\n  b = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "{"], ["proof (state)\nthis:\n  b = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "assume \"a \\<noteq> l\" \"b \\<noteq> l\""], ["proof (state)\nthis:\n  a \\<noteq> l\n  b \\<noteq> l\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "with \\<open>precedes a b (l # list')\\<close>"], ["proof (chain)\npicking this:\n  precedes a b (l # list')\n  a \\<noteq> l\n  b \\<noteq> l", "have \"firstPos a list' \\<le> firstPos b list'\""], ["proof (prove)\nusing this:\n  precedes a b (l # list')\n  a \\<noteq> l\n  b \\<noteq> l\n\ngoal (1 subgoal):\n 1. firstPos a list' \\<le> firstPos b list'", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set (l # list') \\<and>\n  b \\<in> set (l # list') \\<and>\n  firstPos a (l # list') \\<le> firstPos b (l # list')\n  a \\<noteq> l\n  b \\<noteq> l\n\ngoal (1 subgoal):\n 1. firstPos a list' \\<le> firstPos b list'", "by auto"], ["proof (state)\nthis:\n  firstPos a list' \\<le> firstPos b list'\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "moreover"], ["proof (state)\nthis:\n  firstPos a list' \\<le> firstPos b list'\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "from \\<open>a \\<noteq> l\\<close> \\<open>a \\<in> set (l # list')\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> l\n  a \\<in> set (l # list')", "have \"a \\<in> set list'\""], ["proof (prove)\nusing this:\n  a \\<noteq> l\n  a \\<in> set (l # list')\n\ngoal (1 subgoal):\n 1. a \\<in> set list'", "by simp"], ["proof (state)\nthis:\n  a \\<in> set list'\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "moreover"], ["proof (state)\nthis:\n  a \\<in> set list'\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "from \\<open>b \\<noteq> l\\<close> \\<open>b \\<in> set (l # list')\\<close>"], ["proof (chain)\npicking this:\n  b \\<noteq> l\n  b \\<in> set (l # list')", "have \"b \\<in> set list'\""], ["proof (prove)\nusing this:\n  b \\<noteq> l\n  b \\<in> set (l # list')\n\ngoal (1 subgoal):\n 1. b \\<in> set list'", "by simp"], ["proof (state)\nthis:\n  b \\<in> set list'\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "ultimately"], ["proof (chain)\npicking this:\n  firstPos a list' \\<le> firstPos b list'\n  a \\<in> set list'\n  b \\<in> set list'", "have \"precedes a b list'\""], ["proof (prove)\nusing this:\n  firstPos a list' \\<le> firstPos b list'\n  a \\<in> set list'\n  b \\<in> set list'\n\ngoal (1 subgoal):\n 1. precedes a b list'", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  firstPos a list' \\<le> firstPos b list'\n  a \\<in> set list'\n  b \\<in> set list'\n\ngoal (1 subgoal):\n 1. a \\<in> set list' \\<and>\n    b \\<in> set list' \\<and> firstPos a list' \\<le> firstPos b list'", "by simp"], ["proof (state)\nthis:\n  precedes a b list'\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "with \\<open>f a\\<close> \\<open>f b\\<close> Cons(1)"], ["proof (chain)\npicking this:\n  f a\n  f b\n  \\<lbrakk>precedes a b list'; f a; f b\\<rbrakk>\n  \\<Longrightarrow> precedes a b (filter f list')\n  precedes a b list'", "have \"precedes a b (filter f list')\""], ["proof (prove)\nusing this:\n  f a\n  f b\n  \\<lbrakk>precedes a b list'; f a; f b\\<rbrakk>\n  \\<Longrightarrow> precedes a b (filter f list')\n  precedes a b list'\n\ngoal (1 subgoal):\n 1. precedes a b (filter f list')", "by simp"], ["proof (state)\nthis:\n  precedes a b (filter f list')\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "with \\<open>a \\<noteq> l\\<close> \\<open>b \\<noteq> l\\<close>"], ["proof (chain)\npicking this:\n  a \\<noteq> l\n  b \\<noteq> l\n  precedes a b (filter f list')", "have ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> l\n  b \\<noteq> l\n  precedes a b (filter f list')\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<noteq> l\n  b \\<noteq> l\n  a \\<in> set (filter f list') \\<and>\n  b \\<in> set (filter f list') \\<and>\n  firstPos a (filter f list') \\<le> firstPos b (filter f list')\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "by auto"], ["proof (state)\nthis:\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> l; b \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> firstPos a (filter f (l # list'))\n                    \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "ultimately"], ["proof (chain)\npicking this:\n  a = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n  b = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n  \\<lbrakk>a \\<noteq> l; b \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> firstPos a (filter f (l # list'))\n                    \\<le> firstPos b (filter f (l # list'))", "show ?thesis"], ["proof (prove)\nusing this:\n  a = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n  b = l \\<Longrightarrow>\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n  \\<lbrakk>a \\<noteq> l; b \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> firstPos a (filter f (l # list'))\n                    \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "by blast"], ["proof (state)\nthis:\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> set (filter f (l # list'))\n  b \\<in> set (filter f (l # list'))\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> set (filter f (l # list'))\n  b \\<in> set (filter f (l # list'))\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. precedes a b (filter f (l # list'))", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set (filter f (l # list'))\n  b \\<in> set (filter f (l # list'))\n  firstPos a (filter f (l # list')) \\<le> firstPos b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. a \\<in> set (filter f (l # list')) \\<and>\n    b \\<in> set (filter f (l # list')) \\<and>\n    firstPos a (filter f (l # list'))\n    \\<le> firstPos b (filter f (l # list'))", "by simp"], ["proof (state)\nthis:\n  precedes a b (filter f (l # list'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  precedes a b (filter f (l # list'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>precedes a b []; f a; f b\\<rbrakk>\n    \\<Longrightarrow> precedes a b (filter f [])", "qed simp"], ["", "definition\n\"precedesOrder list == {(a, b). precedes a b list \\<and> a \\<noteq> b}\""], ["", "lemma transPrecedesOrder: \n  \"trans (precedesOrder list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "assume \"precedes x y list\" \"x \\<noteq> y\" \"precedes y z list\" \"y \\<noteq> z\""], ["proof (state)\nthis:\n  precedes x y list\n  x \\<noteq> y\n  precedes y z list\n  y \\<noteq> z\n\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "hence \"precedes x z list\" \"x \\<noteq> z\""], ["proof (prove)\nusing this:\n  precedes x y list\n  x \\<noteq> y\n  precedes y z list\n  y \\<noteq> z\n\ngoal (1 subgoal):\n 1. precedes x z list &&& x \\<noteq> z", "using precedesTransitivity[of \"x\" \"y\" \"list\" \"z\"]"], ["proof (prove)\nusing this:\n  precedes x y list\n  x \\<noteq> y\n  precedes y z list\n  y \\<noteq> z\n  \\<lbrakk>precedes x y list; precedes y z list\\<rbrakk>\n  \\<Longrightarrow> precedes x z list\n\ngoal (1 subgoal):\n 1. precedes x z list &&& x \\<noteq> z", "using firstPosEqual[of \"y\" \"list\" \"z\"]"], ["proof (prove)\nusing this:\n  precedes x y list\n  x \\<noteq> y\n  precedes y z list\n  y \\<noteq> z\n  \\<lbrakk>precedes x y list; precedes y z list\\<rbrakk>\n  \\<Longrightarrow> precedes x z list\n  \\<lbrakk>y \\<in> set list; z \\<in> set list\\<rbrakk>\n  \\<Longrightarrow> (firstPos y list = firstPos z list) = (y = z)\n\ngoal (1 subgoal):\n 1. precedes x z list &&& x \\<noteq> z", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  x \\<in> set list \\<and>\n  y \\<in> set list \\<and> firstPos x list \\<le> firstPos y list\n  x \\<noteq> y\n  y \\<in> set list \\<and>\n  z \\<in> set list \\<and> firstPos y list \\<le> firstPos z list\n  y \\<noteq> z\n  \\<lbrakk>x \\<in> set list \\<and>\n           y \\<in> set list \\<and> firstPos x list \\<le> firstPos y list;\n   y \\<in> set list \\<and>\n   z \\<in> set list \\<and> firstPos y list \\<le> firstPos z list\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set list \\<and>\n                    z \\<in> set list \\<and>\n                    firstPos x list \\<le> firstPos z list\n  \\<lbrakk>y \\<in> set list; z \\<in> set list\\<rbrakk>\n  \\<Longrightarrow> (firstPos y list = firstPos z list) = (y = z)\n\ngoal (1 subgoal):\n 1. x \\<in> set list \\<and>\n    z \\<in> set list \\<and> firstPos x list \\<le> firstPos z list &&&\n    x \\<noteq> z", "by auto"], ["proof (state)\nthis:\n  precedes x z list\n  x \\<noteq> z\n\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> precedes ?x2 ?z2 list\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<noteq> ?z2\n\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> precedes ?x2 ?z2 list\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<noteq> ?z2\n\ngoal (1 subgoal):\n 1. trans (precedesOrder list)", "unfolding trans_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> precedes ?x2 ?z2 list\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<noteq> ?z2\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> precedesOrder list \\<longrightarrow>\n       (y, z) \\<in> precedesOrder list \\<longrightarrow>\n       (x, z) \\<in> precedesOrder list", "unfolding precedesOrder_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> precedes ?x2 ?z2 list\n  \\<lbrakk>precedes ?x2 ?y2 list; ?x2 \\<noteq> ?y2; precedes ?y2 ?z2 list;\n   ?y2 \\<noteq> ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<noteq> ?z2\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y)\n       \\<in> {(a, b).\n              precedes a b list \\<and> a \\<noteq> b} \\<longrightarrow>\n       (y, z)\n       \\<in> {(a, b).\n              precedes a b list \\<and> a \\<noteq> b} \\<longrightarrow>\n       (x, z) \\<in> {(a, b). precedes a b list \\<and> a \\<noteq> b}", "by blast"], ["proof (state)\nthis:\n  trans (precedesOrder list)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellFoundedPrecedesOrder:\n  shows \"wf (precedesOrder list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (precedesOrder list)", "unfolding wf_eq_minimal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Q x.\n       x \\<in> Q \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (y, z) \\<in> precedesOrder list \\<longrightarrow>\n              y \\<notin> Q)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>Q x.\n       x \\<in> Q \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (y, z) \\<in> precedesOrder list \\<longrightarrow>\n              y \\<notin> Q)", "show \"\\<forall>Q a. a:Q \\<longrightarrow> (\\<exists> aMin \\<in> Q. \\<forall> a'. (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "fix a :: \"'a\" and Q::\"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "assume \"a \\<in> Q\""], ["proof (state)\nthis:\n  a \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "let ?listQ = \"filter (\\<lambda> x. x \\<in> Q) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "have \"\\<exists> aMin \\<in> Q. \\<forall> a'. (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "proof (cases \"?listQ = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Q) list = [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q\n 2. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "case True"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Q) list = []\n\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Q) list = [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q\n 2. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "let ?aMin = a"], ["proof (state)\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Q) list = [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q\n 2. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "have \"\\<forall> a'. (a', ?aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "fix a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "assume \"(a', ?aMin) \\<in> precedesOrder list\""], ["proof (state)\nthis:\n  (a', a) \\<in> precedesOrder list\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "hence \"a \\<in> set list\""], ["proof (prove)\nusing this:\n  (a', a) \\<in> precedesOrder list\n\ngoal (1 subgoal):\n 1. a \\<in> set list", "unfolding precedesOrder_def"], ["proof (prove)\nusing this:\n  (a', a) \\<in> {(a, b). precedes a b list \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. a \\<in> set list", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  (a', a)\n  \\<in> {(a, b).\n         (a \\<in> set list \\<and>\n          b \\<in> set list \\<and>\n          firstPos a list \\<le> firstPos b list) \\<and>\n         a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. a \\<in> set list", "by simp"], ["proof (state)\nthis:\n  a \\<in> set list\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "with \\<open>a \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> Q\n  a \\<in> set list", "have \"a \\<in> set ?listQ\""], ["proof (prove)\nusing this:\n  a \\<in> Q\n  a \\<in> set list\n\ngoal (1 subgoal):\n 1. a \\<in> set (filter (\\<lambda>x. x \\<in> Q) list)", "by (induct list) auto"], ["proof (state)\nthis:\n  a \\<in> set (filter (\\<lambda>x. x \\<in> Q) list)\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "with \\<open>?listQ = []\\<close>"], ["proof (chain)\npicking this:\n  filter (\\<lambda>x. x \\<in> Q) list = []\n  a \\<in> set (filter (\\<lambda>x. x \\<in> Q) list)", "have \"False\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> Q) list = []\n  a \\<in> set (filter (\\<lambda>x. x \\<in> Q) list)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "hence \"a' \\<notin> Q\""], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "}"], ["proof (state)\nthis:\n  (?a'2, a) \\<in> precedesOrder list \\<Longrightarrow> ?a'2 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  (?a'2, a) \\<in> precedesOrder list \\<Longrightarrow> ?a'2 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  \\<forall>a'.\n     (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>a'.\n     (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Q) list = [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q\n 2. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "with \\<open>a \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> Q\n  \\<forall>a'.\n     (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q", "obtain aMin where \"aMin \\<in> Q\" \"\\<forall> a'. (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\""], ["proof (prove)\nusing this:\n  a \\<in> Q\n  \\<forall>a'.\n     (a', a) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. (\\<And>aMin.\n        \\<lbrakk>aMin \\<in> Q;\n         \\<forall>a'.\n            (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n            a' \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  aMin \\<in> Q\n  \\<forall>a'.\n     (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal (2 subgoals):\n 1. filter (\\<lambda>x. x \\<in> Q) list = [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q\n 2. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  aMin \\<in> Q\n  \\<forall>a'.\n     (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "by auto"], ["proof (state)\nthis:\n  \\<exists>aMin\\<in>Q.\n     \\<forall>a'.\n        (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "case False"], ["proof (state)\nthis:\n  filter (\\<lambda>x. x \\<in> Q) list \\<noteq> []\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "let ?aMin = \"hd ?listQ\""], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "from False"], ["proof (chain)\npicking this:\n  filter (\\<lambda>x. x \\<in> Q) list \\<noteq> []", "have \"?aMin \\<in> Q\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> Q) list \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q", "by (induct list) auto"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "have \"\\<forall> a'. (a', ?aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "fix a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "assume \"(a', ?aMin) \\<in> precedesOrder list\""], ["proof (state)\nthis:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list)) \\<in> precedesOrder list\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "hence \"a' \\<in> set list\" \"precedes a' ?aMin list\" \"a' \\<noteq> ?aMin\""], ["proof (prove)\nusing this:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list)) \\<in> precedesOrder list\n\ngoal (1 subgoal):\n 1. a' \\<in> set list &&&\n    precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list &&&\n    a' \\<noteq> hd (filter (\\<lambda>x. x \\<in> Q) list)", "unfolding precedesOrder_def"], ["proof (prove)\nusing this:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n  \\<in> {(a, b). precedes a b list \\<and> a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. a' \\<in> set list &&&\n    precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list &&&\n    a' \\<noteq> hd (filter (\\<lambda>x. x \\<in> Q) list)", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n  \\<in> {(a, b).\n         (a \\<in> set list \\<and>\n          b \\<in> set list \\<and>\n          firstPos a list \\<le> firstPos b list) \\<and>\n         a \\<noteq> b}\n\ngoal (1 subgoal):\n 1. a' \\<in> set list &&&\n    a' \\<in> set list \\<and>\n    hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> set list \\<and>\n    firstPos a' list\n    \\<le> firstPos (hd (filter (\\<lambda>x. x \\<in> Q) list)) list &&&\n    a' \\<noteq> hd (filter (\\<lambda>x. x \\<in> Q) list)", "by auto"], ["proof (state)\nthis:\n  a' \\<in> set list\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list\n  a' \\<noteq> hd (filter (\\<lambda>x. x \\<in> Q) list)\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "have \"a' \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "assume \"a' \\<in> Q\""], ["proof (state)\nthis:\n  a' \\<in> Q\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "with \\<open>?aMin \\<in> Q\\<close> \\<open>precedes a' ?aMin list\\<close>"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list\n  a' \\<in> Q", "have \"precedes a' ?aMin ?listQ\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list\n  a' \\<in> Q\n\ngoal (1 subgoal):\n 1. precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n     (filter (\\<lambda>x. x \\<in> Q) list)", "using precedesFilter[of \"a'\" \"?aMin\" \"list\" \"\\<lambda> x. x \\<in> Q\"]"], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list\n  a' \\<in> Q\n  \\<lbrakk>precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list)) list;\n   a' \\<in> Q; hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\\<rbrakk>\n  \\<Longrightarrow> precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n                     (filter (\\<lambda>x. x \\<in> Q) list)\n\ngoal (1 subgoal):\n 1. precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n     (filter (\\<lambda>x. x \\<in> Q) list)", "by blast"], ["proof (state)\nthis:\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n   (filter (\\<lambda>x. x \\<in> Q) list)\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "from \\<open>a' \\<noteq> ?aMin\\<close>"], ["proof (chain)\npicking this:\n  a' \\<noteq> hd (filter (\\<lambda>x. x \\<in> Q) list)", "have \"\\<not> precedes a' (hd ?listQ) (hd ?listQ # tl ?listQ)\""], ["proof (prove)\nusing this:\n  a' \\<noteq> hd (filter (\\<lambda>x. x \\<in> Q) list)\n\ngoal (1 subgoal):\n 1. \\<not> precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n            (hd (filter (\\<lambda>x. x \\<in> Q) list) #\n             tl (filter (\\<lambda>x. x \\<in> Q) list))", "by (rule noElementsPrecedesFirstElement)"], ["proof (state)\nthis:\n  \\<not> precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n          (hd (filter (\\<lambda>x. x \\<in> Q) list) #\n           tl (filter (\\<lambda>x. x \\<in> Q) list))\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "with False \\<open>precedes a' ?aMin ?listQ\\<close>"], ["proof (chain)\npicking this:\n  filter (\\<lambda>x. x \\<in> Q) list \\<noteq> []\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n   (filter (\\<lambda>x. x \\<in> Q) list)\n  \\<not> precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n          (hd (filter (\\<lambda>x. x \\<in> Q) list) #\n           tl (filter (\\<lambda>x. x \\<in> Q) list))", "have \"False\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x. x \\<in> Q) list \\<noteq> []\n  precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n   (filter (\\<lambda>x. x \\<in> Q) list)\n  \\<not> precedes a' (hd (filter (\\<lambda>x. x \\<in> Q) list))\n          (hd (filter (\\<lambda>x. x \\<in> Q) list) #\n           tl (filter (\\<lambda>x. x \\<in> Q) list))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "}"], ["proof (state)\nthis:\n  a' \\<in> Q \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  a' \\<in> Q \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. a' \\<notin> Q", "by auto"], ["proof (state)\nthis:\n  a' \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "}"], ["proof (state)\nthis:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n  \\<in> precedesOrder list \\<Longrightarrow>\n  a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n       \\<in> precedesOrder list \\<longrightarrow>\n       a' \\<notin> Q", "thus \"(a', ?aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\""], ["proof (prove)\nusing this:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n  \\<in> precedesOrder list \\<Longrightarrow>\n  a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n    \\<in> precedesOrder list \\<longrightarrow>\n    a' \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n  \\<in> precedesOrder list \\<longrightarrow>\n  a' \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>a'.\n     (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n     \\<in> precedesOrder list \\<longrightarrow>\n     a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x. x \\<in> Q) list \\<noteq> [] \\<Longrightarrow>\n    \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", "with \\<open>?aMin \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\n  \\<forall>a'.\n     (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n     \\<in> precedesOrder list \\<longrightarrow>\n     a' \\<notin> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>x. x \\<in> Q) list) \\<in> Q\n  \\<forall>a'.\n     (a', hd (filter (\\<lambda>x. x \\<in> Q) list))\n     \\<in> precedesOrder list \\<longrightarrow>\n     a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<exists>aMin\\<in>Q.\n       \\<forall>a'.\n          (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n          a' \\<notin> Q", ".."], ["proof (state)\nthis:\n  \\<exists>aMin\\<in>Q.\n     \\<forall>a'.\n        (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>aMin\\<in>Q.\n     \\<forall>a'.\n        (a', aMin) \\<in> precedesOrder list \\<longrightarrow> a' \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> ?Q2 \\<Longrightarrow>\n  \\<exists>aMin\\<in>?Q2.\n     \\<forall>a'.\n        (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n        a' \\<notin> ?Q2\n\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?a2 \\<in> ?Q2 \\<Longrightarrow>\n  \\<exists>aMin\\<in>?Q2.\n     \\<forall>a'.\n        (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n        a' \\<notin> ?Q2\n\ngoal (1 subgoal):\n 1. \\<forall>Q a.\n       a \\<in> Q \\<longrightarrow>\n       (\\<exists>aMin\\<in>Q.\n           \\<forall>a'.\n              (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n              a' \\<notin> Q)", "by simp"], ["proof (state)\nthis:\n  \\<forall>Q a.\n     a \\<in> Q \\<longrightarrow>\n     (\\<exists>aMin\\<in>Q.\n         \\<forall>a'.\n            (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n            a' \\<notin> Q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>Q a.\n     a \\<in> Q \\<longrightarrow>\n     (\\<exists>aMin\\<in>Q.\n         \\<forall>a'.\n            (a', aMin) \\<in> precedesOrder list \\<longrightarrow>\n            a' \\<notin> Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*********************************************************)\n(*                   prefix                              *)\n(*********************************************************)"], ["", "subsection\\<open>@{term isPrefix} - prefixes of list.\\<close>"], ["", "text\\<open>Check if a list is a prefix of another list. Obsolete: similiar\nnotion is defined in {\\em List\\_prefixes.thy}.\\<close>"], ["", "definition\n  isPrefix :: \"'a list => 'a list => bool\"\n  where \"isPrefix p t = (\\<exists> s. p @ s = t)\""], ["", "lemma prefixIsSubset:\n  assumes \"isPrefix p l\"\n  shows \"set p \\<subseteq> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set p \\<subseteq> set l", "using assms"], ["proof (prove)\nusing this:\n  isPrefix p l\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> set l", "unfolding isPrefix_def"], ["proof (prove)\nusing this:\n  \\<exists>s. p @ s = l\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> set l", "by auto"], ["", "lemma uniqListImpliesUniqPrefix:\nassumes \"isPrefix p l\" and \"uniq l\"\nshows \"uniq p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniq p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. uniq p", "from \\<open>isPrefix p l\\<close>"], ["proof (chain)\npicking this:\n  isPrefix p l", "obtain s\n    where \"p @ s = l\""], ["proof (prove)\nusing this:\n  isPrefix p l\n\ngoal (1 subgoal):\n 1. (\\<And>s. p @ s = l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding isPrefix_def"], ["proof (prove)\nusing this:\n  \\<exists>s. p @ s = l\n\ngoal (1 subgoal):\n 1. (\\<And>s. p @ s = l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p @ s = l\n\ngoal (1 subgoal):\n 1. uniq p", "with \\<open>uniq l\\<close>"], ["proof (chain)\npicking this:\n  uniq l\n  p @ s = l", "show ?thesis"], ["proof (prove)\nusing this:\n  uniq l\n  p @ s = l\n\ngoal (1 subgoal):\n 1. uniq p", "using uniqAppend[of \"p\" \"s\"]"], ["proof (prove)\nusing this:\n  uniq l\n  p @ s = l\n  uniq (p @ s) \\<Longrightarrow> uniq p\n  uniq (p @ s) \\<Longrightarrow> uniq s\n\ngoal (1 subgoal):\n 1. uniq p", "by simp"], ["proof (state)\nthis:\n  uniq p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma firstPosPrefixElement: \n  assumes \"isPrefix p l\" and \"a \\<in> set p\"\n  shows \"firstPos a p = firstPos a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. firstPos a p = firstPos a l", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. firstPos a p = firstPos a l", "from \\<open>isPrefix p l\\<close>"], ["proof (chain)\npicking this:\n  isPrefix p l", "obtain s\n    where \"p @ s = l\""], ["proof (prove)\nusing this:\n  isPrefix p l\n\ngoal (1 subgoal):\n 1. (\\<And>s. p @ s = l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding isPrefix_def"], ["proof (prove)\nusing this:\n  \\<exists>s. p @ s = l\n\ngoal (1 subgoal):\n 1. (\\<And>s. p @ s = l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p @ s = l\n\ngoal (1 subgoal):\n 1. firstPos a p = firstPos a l", "with \\<open>a \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> set p\n  p @ s = l", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> set p\n  p @ s = l\n\ngoal (1 subgoal):\n 1. firstPos a p = firstPos a l", "using firstPosAppend[of \"a\" \"p\" \"s\"]"], ["proof (prove)\nusing this:\n  a \\<in> set p\n  p @ s = l\n  a \\<in> set p \\<Longrightarrow> firstPos a p = firstPos a (p @ s)\n\ngoal (1 subgoal):\n 1. firstPos a p = firstPos a l", "by simp"], ["proof (state)\nthis:\n  firstPos a p = firstPos a l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma laterInPrefixRetainsPrecedes: \n  assumes \n  \"isPrefix p l\" and \"precedes a b l\" and \"b \\<in> set p\"\n  shows \n  \"precedes a b p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a b p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. precedes a b p", "from \\<open>isPrefix p l\\<close>"], ["proof (chain)\npicking this:\n  isPrefix p l", "obtain s\n    where \"p @ s = l\""], ["proof (prove)\nusing this:\n  isPrefix p l\n\ngoal (1 subgoal):\n 1. (\\<And>s. p @ s = l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding isPrefix_def"], ["proof (prove)\nusing this:\n  \\<exists>s. p @ s = l\n\ngoal (1 subgoal):\n 1. (\\<And>s. p @ s = l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p @ s = l\n\ngoal (1 subgoal):\n 1. precedes a b p", "from \\<open>precedes a b l\\<close>"], ["proof (chain)\npicking this:\n  precedes a b l", "have \"a \\<in> set l\" \"b \\<in> set l\" \"firstPos a l \\<le> firstPos b l\""], ["proof (prove)\nusing this:\n  precedes a b l\n\ngoal (1 subgoal):\n 1. a \\<in> set l &&& b \\<in> set l &&& firstPos a l \\<le> firstPos b l", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  a \\<in> set l \\<and> b \\<in> set l \\<and> firstPos a l \\<le> firstPos b l\n\ngoal (1 subgoal):\n 1. a \\<in> set l &&& b \\<in> set l &&& firstPos a l \\<le> firstPos b l", "by (auto split: if_split_asm)"], ["proof (state)\nthis:\n  a \\<in> set l\n  b \\<in> set l\n  firstPos a l \\<le> firstPos b l\n\ngoal (1 subgoal):\n 1. precedes a b p", "from \\<open>p @ s = l\\<close> \\<open>b \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  p @ s = l\n  b \\<in> set p", "have \"firstPos b l = firstPos b p\""], ["proof (prove)\nusing this:\n  p @ s = l\n  b \\<in> set p\n\ngoal (1 subgoal):\n 1. firstPos b l = firstPos b p", "using firstPosAppend [of \"b\" \"p\" \"s\"]"], ["proof (prove)\nusing this:\n  p @ s = l\n  b \\<in> set p\n  b \\<in> set p \\<Longrightarrow> firstPos b p = firstPos b (p @ s)\n\ngoal (1 subgoal):\n 1. firstPos b l = firstPos b p", "by simp"], ["proof (state)\nthis:\n  firstPos b l = firstPos b p\n\ngoal (1 subgoal):\n 1. precedes a b p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. precedes a b p", "proof (cases \"a \\<in> set p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> set p \\<Longrightarrow> precedes a b p\n 2. a \\<notin> set p \\<Longrightarrow> precedes a b p", "case True"], ["proof (state)\nthis:\n  a \\<in> set p\n\ngoal (2 subgoals):\n 1. a \\<in> set p \\<Longrightarrow> precedes a b p\n 2. a \\<notin> set p \\<Longrightarrow> precedes a b p", "from \\<open>p @ s = l\\<close> \\<open>a \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  p @ s = l\n  a \\<in> set p", "have \"firstPos a l = firstPos a p\""], ["proof (prove)\nusing this:\n  p @ s = l\n  a \\<in> set p\n\ngoal (1 subgoal):\n 1. firstPos a l = firstPos a p", "using firstPosAppend [of \"a\" \"p\" \"s\"]"], ["proof (prove)\nusing this:\n  p @ s = l\n  a \\<in> set p\n  a \\<in> set p \\<Longrightarrow> firstPos a p = firstPos a (p @ s)\n\ngoal (1 subgoal):\n 1. firstPos a l = firstPos a p", "by simp"], ["proof (state)\nthis:\n  firstPos a l = firstPos a p\n\ngoal (2 subgoals):\n 1. a \\<in> set p \\<Longrightarrow> precedes a b p\n 2. a \\<notin> set p \\<Longrightarrow> precedes a b p", "from \\<open>firstPos a l = firstPos a p\\<close> \\<open>firstPos b l = firstPos b p\\<close> \\<open>firstPos a l \\<le> firstPos b l\\<close>\n    \\<open>a \\<in> set p\\<close> \\<open>b \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  firstPos a l = firstPos a p\n  firstPos b l = firstPos b p\n  firstPos a l \\<le> firstPos b l\n  a \\<in> set p\n  b \\<in> set p", "show ?thesis"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos a p\n  firstPos b l = firstPos b p\n  firstPos a l \\<le> firstPos b l\n  a \\<in> set p\n  b \\<in> set p\n\ngoal (1 subgoal):\n 1. precedes a b p", "unfolding precedes_def"], ["proof (prove)\nusing this:\n  firstPos a l = firstPos a p\n  firstPos b l = firstPos b p\n  firstPos a l \\<le> firstPos b l\n  a \\<in> set p\n  b \\<in> set p\n\ngoal (1 subgoal):\n 1. a \\<in> set p \\<and>\n    b \\<in> set p \\<and> firstPos a p \\<le> firstPos b p", "by simp"], ["proof (state)\nthis:\n  precedes a b p\n\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "case False"], ["proof (state)\nthis:\n  a \\<notin> set p\n\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "from \\<open>a \\<notin> set p\\<close> \\<open>a \\<in> set l\\<close> \\<open>p @ s = l\\<close>"], ["proof (chain)\npicking this:\n  a \\<notin> set p\n  a \\<in> set l\n  p @ s = l", "have \"a \\<in> set s\""], ["proof (prove)\nusing this:\n  a \\<notin> set p\n  a \\<in> set l\n  p @ s = l\n\ngoal (1 subgoal):\n 1. a \\<in> set s", "by auto"], ["proof (state)\nthis:\n  a \\<in> set s\n\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "with \\<open>a \\<notin> set p\\<close> \\<open>p @ s = l\\<close>"], ["proof (chain)\npicking this:\n  a \\<notin> set p\n  p @ s = l\n  a \\<in> set s", "have \"firstPos a l = length p + firstPos a s\""], ["proof (prove)\nusing this:\n  a \\<notin> set p\n  p @ s = l\n  a \\<in> set s\n\ngoal (1 subgoal):\n 1. firstPos a l = length p + firstPos a s", "using firstPosAppendNonMemberFirstMemberSecond[of \"a\" \"p\" \"s\"]"], ["proof (prove)\nusing this:\n  a \\<notin> set p\n  p @ s = l\n  a \\<in> set s\n  \\<lbrakk>a \\<notin> set p; a \\<in> set s\\<rbrakk>\n  \\<Longrightarrow> firstPos a (p @ s) = length p + firstPos a s\n\ngoal (1 subgoal):\n 1. firstPos a l = length p + firstPos a s", "by simp"], ["proof (state)\nthis:\n  firstPos a l = length p + firstPos a s\n\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "moreover"], ["proof (state)\nthis:\n  firstPos a l = length p + firstPos a s\n\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "from \\<open>b \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> set p", "have \"firstPos b p < length p\""], ["proof (prove)\nusing this:\n  b \\<in> set p\n\ngoal (1 subgoal):\n 1. firstPos b p < length p", "by (rule firstPosLeLength)"], ["proof (state)\nthis:\n  firstPos b p < length p\n\ngoal (1 subgoal):\n 1. a \\<notin> set p \\<Longrightarrow> precedes a b p", "ultimately"], ["proof (chain)\npicking this:\n  firstPos a l = length p + firstPos a s\n  firstPos b p < length p", "show ?thesis"], ["proof (prove)\nusing this:\n  firstPos a l = length p + firstPos a s\n  firstPos b p < length p\n\ngoal (1 subgoal):\n 1. precedes a b p", "using \\<open>firstPos b l = firstPos b p\\<close> \\<open>firstPos a l \\<le> firstPos b l\\<close>"], ["proof (prove)\nusing this:\n  firstPos a l = length p + firstPos a s\n  firstPos b p < length p\n  firstPos b l = firstPos b p\n  firstPos a l \\<le> firstPos b l\n\ngoal (1 subgoal):\n 1. precedes a b p", "by simp"], ["proof (state)\nthis:\n  precedes a b p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  precedes a b p\n\ngoal:\nNo subgoals!", "qed"], ["", "(*********************************************************)\n(*                       List diff                       *)\n(*********************************************************)"], ["", "subsection\\<open>@{term \"list_diff\"} - the set difference operation on two lists.\\<close>"], ["", "primrec list_diff :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list\"\nwhere\n\"list_diff x [] = x\" |\n\"list_diff x (y#ys) = list_diff (removeAll y x) ys\""], ["", "lemma [simp]: \n  shows \"list_diff [] y = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_diff [] y = []", "by (induct y) auto"], ["", "lemma [simp]: \n  shows \"list_diff (x # xs) y = (if x \\<in> set y then list_diff xs y else x # list_diff xs y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_diff (x # xs) y =\n    (if x \\<in> set y then list_diff xs y else x # list_diff xs y)", "proof (induct y arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       list_diff (x # xs) [] =\n       (if x \\<in> set [] then list_diff xs [] else x # list_diff xs [])\n 2. \\<And>a y xs.\n       (\\<And>xs.\n           list_diff (x # xs) y =\n           (if x \\<in> set y then list_diff xs y\n            else x # list_diff xs y)) \\<Longrightarrow>\n       list_diff (x # xs) (a # y) =\n       (if x \\<in> set (a # y) then list_diff xs (a # y)\n        else x # list_diff xs (a # y))", "case (Cons y ys)"], ["proof (state)\nthis:\n  list_diff (x # ?xs) ys =\n  (if x \\<in> set ys then list_diff ?xs ys else x # list_diff ?xs ys)\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       list_diff (x # xs) [] =\n       (if x \\<in> set [] then list_diff xs [] else x # list_diff xs [])\n 2. \\<And>a y xs.\n       (\\<And>xs.\n           list_diff (x # xs) y =\n           (if x \\<in> set y then list_diff xs y\n            else x # list_diff xs y)) \\<Longrightarrow>\n       list_diff (x # xs) (a # y) =\n       (if x \\<in> set (a # y) then list_diff xs (a # y)\n        else x # list_diff xs (a # y))", "thus ?case"], ["proof (prove)\nusing this:\n  list_diff (x # ?xs) ys =\n  (if x \\<in> set ys then list_diff ?xs ys else x # list_diff ?xs ys)\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))\n 2. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))\n 2. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "by simp"], ["proof (state)\nthis:\n  list_diff (x # xs) (y # ys) =\n  (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n   else x # list_diff xs (y # ys))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs.\n                list_diff (x # xs) ys =\n                (if x \\<in> set ys then list_diff xs ys\n                 else x # list_diff xs ys);\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "proof (cases \"x \\<in> set ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; x \\<in> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))\n 2. \\<lbrakk>x \\<noteq> y; x \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "case True"], ["proof (state)\nthis:\n  x \\<in> set ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> y; x \\<in> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))\n 2. \\<lbrakk>x \\<noteq> y; x \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set ys\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "using Cons"], ["proof (prove)\nusing this:\n  x \\<in> set ys\n  list_diff (x # ?xs) ys =\n  (if x \\<in> set ys then list_diff ?xs ys else x # list_diff ?xs ys)\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "by simp"], ["proof (state)\nthis:\n  list_diff (x # xs) (y # ys) =\n  (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n   else x # list_diff xs (y # ys))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "case False"], ["proof (state)\nthis:\n  x \\<notin> set ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<notin> set ys\\<rbrakk>\n    \\<Longrightarrow> list_diff (x # xs) (y # ys) =\n                      (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n                       else x # list_diff xs (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> set ys\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "using Cons"], ["proof (prove)\nusing this:\n  x \\<notin> set ys\n  list_diff (x # ?xs) ys =\n  (if x \\<in> set ys then list_diff ?xs ys else x # list_diff ?xs ys)\n\ngoal (1 subgoal):\n 1. list_diff (x # xs) (y # ys) =\n    (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n     else x # list_diff xs (y # ys))", "by simp"], ["proof (state)\nthis:\n  list_diff (x # xs) (y # ys) =\n  (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n   else x # list_diff xs (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_diff (x # xs) (y # ys) =\n  (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n   else x # list_diff xs (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_diff (x # xs) (y # ys) =\n  (if x \\<in> set (y # ys) then list_diff xs (y # ys)\n   else x # list_diff xs (y # ys))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       list_diff (x # xs) [] =\n       (if x \\<in> set [] then list_diff xs [] else x # list_diff xs [])", "qed simp"], ["", "lemma listDiffIff:\n  shows \"(x \\<in> set a \\<and> x \\<notin> set b) = (x \\<in> set (list_diff a b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> set a \\<and> x \\<notin> set b) = (x \\<in> set (list_diff a b))", "by (induct a) auto"], ["", "lemma listDiffDoubleRemoveAll: \n  assumes \"x \\<in> set a\"\n  shows \"list_diff b a = list_diff b (x # a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_diff b a = list_diff b (x # a)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set a\n\ngoal (1 subgoal):\n 1. list_diff b a = list_diff b (x # a)", "by (induct b) auto"], ["", "lemma removeAllListDiff[simp]:\n  shows \"removeAll x (list_diff a b) = list_diff (removeAll x a) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. removeAll x (list_diff a b) = list_diff (removeAll x a) b", "by (induct a) auto"], ["", "lemma listDiffRemoveAllNonMember:\n  assumes \"x \\<notin> set a\"\n  shows \"list_diff a b = list_diff a (removeAll x b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_diff a b = list_diff a (removeAll x b)", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> set a\n\ngoal (1 subgoal):\n 1. list_diff a b = list_diff a (removeAll x b)", "proof (induct b arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       x \\<notin> set a \\<Longrightarrow>\n       list_diff a [] = list_diff a (removeAll x [])\n 2. \\<And>a b aa.\n       \\<lbrakk>\\<And>a.\n                   x \\<notin> set a \\<Longrightarrow>\n                   list_diff a b = list_diff a (removeAll x b);\n        x \\<notin> set aa\\<rbrakk>\n       \\<Longrightarrow> list_diff aa (a # b) =\n                         list_diff aa (removeAll x (a # b))", "case (Cons y b')"], ["proof (state)\nthis:\n  x \\<notin> set ?a \\<Longrightarrow>\n  list_diff ?a b' = list_diff ?a (removeAll x b')\n  x \\<notin> set a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       x \\<notin> set a \\<Longrightarrow>\n       list_diff a [] = list_diff a (removeAll x [])\n 2. \\<And>a b aa.\n       \\<lbrakk>\\<And>a.\n                   x \\<notin> set a \\<Longrightarrow>\n                   list_diff a b = list_diff a (removeAll x b);\n        x \\<notin> set aa\\<rbrakk>\n       \\<Longrightarrow> list_diff aa (a # b) =\n                         list_diff aa (removeAll x (a # b))", "from \\<open>x \\<notin> set a\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> set a", "have \"x \\<notin> set (removeAll y a)\""], ["proof (prove)\nusing this:\n  x \\<notin> set a\n\ngoal (1 subgoal):\n 1. x \\<notin> set (removeAll y a)", "by auto"], ["proof (state)\nthis:\n  x \\<notin> set (removeAll y a)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       x \\<notin> set a \\<Longrightarrow>\n       list_diff a [] = list_diff a (removeAll x [])\n 2. \\<And>a b aa.\n       \\<lbrakk>\\<And>a.\n                   x \\<notin> set a \\<Longrightarrow>\n                   list_diff a b = list_diff a (removeAll x b);\n        x \\<notin> set aa\\<rbrakk>\n       \\<Longrightarrow> list_diff aa (a # b) =\n                         list_diff aa (removeAll x (a # b))", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<notin> set (removeAll y a)\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set (removeAll y a); x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))\n 2. \\<lbrakk>x \\<notin> set (removeAll y a); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set (removeAll y a); x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))\n 2. \\<lbrakk>x \\<notin> set (removeAll y a); x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "using Cons(2)"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x \\<notin> set a\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "using Cons(1)[of \"removeAll y a\"]"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x \\<notin> set a\n  x \\<notin> set (removeAll y a) \\<Longrightarrow>\n  list_diff (removeAll y a) b' = list_diff (removeAll y a) (removeAll x b')\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "using \\<open>x \\<notin> set (removeAll y a)\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x \\<notin> set a\n  x \\<notin> set (removeAll y a) \\<Longrightarrow>\n  list_diff (removeAll y a) b' = list_diff (removeAll y a) (removeAll x b')\n  x \\<notin> set (removeAll y a)\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "by auto"], ["proof (state)\nthis:\n  list_diff a (y # b') = list_diff a (removeAll x (y # b'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set (removeAll y a); x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set (removeAll y a); x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set (removeAll y a); x = y\\<rbrakk>\n    \\<Longrightarrow> list_diff a (y # b') =\n                      list_diff a (removeAll x (y # b'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "using Cons(1)[of \"removeAll y a\"]"], ["proof (prove)\nusing this:\n  x = y\n  x \\<notin> set (removeAll y a) \\<Longrightarrow>\n  list_diff (removeAll y a) b' = list_diff (removeAll y a) (removeAll x b')\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "using \\<open>x \\<notin> set a\\<close>"], ["proof (prove)\nusing this:\n  x = y\n  x \\<notin> set (removeAll y a) \\<Longrightarrow>\n  list_diff (removeAll y a) b' = list_diff (removeAll y a) (removeAll x b')\n  x \\<notin> set a\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "using \\<open>x \\<notin> set (removeAll y a)\\<close>"], ["proof (prove)\nusing this:\n  x = y\n  x \\<notin> set (removeAll y a) \\<Longrightarrow>\n  list_diff (removeAll y a) b' = list_diff (removeAll y a) (removeAll x b')\n  x \\<notin> set a\n  x \\<notin> set (removeAll y a)\n\ngoal (1 subgoal):\n 1. list_diff a (y # b') = list_diff a (removeAll x (y # b'))", "by auto"], ["proof (state)\nthis:\n  list_diff a (y # b') = list_diff a (removeAll x (y # b'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_diff a (y # b') = list_diff a (removeAll x (y # b'))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       x \\<notin> set a \\<Longrightarrow>\n       list_diff a [] = list_diff a (removeAll x [])", "qed simp"], ["", "lemma listDiffMap: \n  assumes \"\\<forall> x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\"\n  shows \"map f (list_diff a b) = list_diff (map f a) (map f b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (list_diff a b) = list_diff (map f a) (map f b)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x y. x \\<noteq> y \\<longrightarrow> f x \\<noteq> f y\n\ngoal (1 subgoal):\n 1. map f (list_diff a b) = list_diff (map f a) (map f b)", "by (induct b arbitrary: a) (auto simp add: removeAll_map)"], ["", "(*********************************************************)\n(*                       Remdups                         *)\n(*********************************************************)"], ["", "subsection\\<open>@{term remdups} - removing duplicates\\<close>"], ["", "lemma remdupsRemoveAllCommute[simp]:\n  shows \"remdups (removeAll a list) = removeAll a (remdups list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (removeAll a list) = removeAll a (remdups list)", "by (induct list) auto"], ["", "lemma remdupsAppend: \n  shows \"remdups (a @ b) = remdups (list_diff a b) @ remdups b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (a @ b) = remdups (list_diff a b) @ remdups b", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. remdups ([] @ b) = remdups (list_diff [] b) @ remdups b\n 2. \\<And>a1 a2.\n       remdups (a2 @ b) =\n       remdups (list_diff a2 b) @ remdups b \\<Longrightarrow>\n       remdups ((a1 # a2) @ b) = remdups (list_diff (a1 # a2) b) @ remdups b", "case (Cons x a')"], ["proof (state)\nthis:\n  remdups (a' @ b) = remdups (list_diff a' b) @ remdups b\n\ngoal (2 subgoals):\n 1. remdups ([] @ b) = remdups (list_diff [] b) @ remdups b\n 2. \\<And>a1 a2.\n       remdups (a2 @ b) =\n       remdups (list_diff a2 b) @ remdups b \\<Longrightarrow>\n       remdups ((a1 # a2) @ b) = remdups (list_diff (a1 # a2) b) @ remdups b", "thus ?case"], ["proof (prove)\nusing this:\n  remdups (a' @ b) = remdups (list_diff a' b) @ remdups b\n\ngoal (1 subgoal):\n 1. remdups ((x # a') @ b) = remdups (list_diff (x # a') b) @ remdups b", "using listDiffIff[of \"x\" \"a'\" \"b\"]"], ["proof (prove)\nusing this:\n  remdups (a' @ b) = remdups (list_diff a' b) @ remdups b\n  (x \\<in> set a' \\<and> x \\<notin> set b) = (x \\<in> set (list_diff a' b))\n\ngoal (1 subgoal):\n 1. remdups ((x # a') @ b) = remdups (list_diff (x # a') b) @ remdups b", "by auto"], ["proof (state)\nthis:\n  remdups ((x # a') @ b) = remdups (list_diff (x # a') b) @ remdups b\n\ngoal (1 subgoal):\n 1. remdups ([] @ b) = remdups (list_diff [] b) @ remdups b", "qed simp"], ["", "lemma remdupsAppendSet: \n  shows \"set (remdups (a @ b)) = set (remdups a @ remdups (list_diff b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups (a @ b)) = set (remdups a @ remdups (list_diff b a))", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. set (remdups ([] @ b)) = set (remdups [] @ remdups (list_diff b []))\n 2. \\<And>a1 a2.\n       set (remdups (a2 @ b)) =\n       set (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       set (remdups ((a1 # a2) @ b)) =\n       set (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. set (remdups ([] @ b)) = set (remdups [] @ remdups (list_diff b []))\n 2. \\<And>a1 a2.\n       set (remdups (a2 @ b)) =\n       set (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       set (remdups ((a1 # a2) @ b)) =\n       set (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups ([] @ b)) = set (remdups [] @ remdups (list_diff b []))", "by auto"], ["proof (state)\nthis:\n  set (remdups ([] @ b)) = set (remdups [] @ remdups (list_diff b []))\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       set (remdups (a2 @ b)) =\n       set (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       set (remdups ((a1 # a2) @ b)) =\n       set (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       set (remdups (a2 @ b)) =\n       set (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       set (remdups ((a1 # a2) @ b)) =\n       set (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "case (Cons x a')"], ["proof (state)\nthis:\n  set (remdups (a' @ b)) = set (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       set (remdups (a2 @ b)) =\n       set (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       set (remdups ((a1 # a2) @ b)) =\n       set (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "thus ?case"], ["proof (prove)\nusing this:\n  set (remdups (a' @ b)) = set (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof (cases \"x \\<in> set a'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<in> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))\n 2. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "case True"], ["proof (state)\nthis:\n  x \\<in> set a'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<in> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))\n 2. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set a'\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "using Cons"], ["proof (prove)\nusing this:\n  x \\<in> set a'\n  set (remdups (a' @ b)) = set (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "using listDiffDoubleRemoveAll[of \"x\" \"a'\" \"b\"]"], ["proof (prove)\nusing this:\n  x \\<in> set a'\n  set (remdups (a' @ b)) = set (remdups a' @ remdups (list_diff b a'))\n  x \\<in> set a' \\<Longrightarrow> list_diff b a' = list_diff b (x # a')\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "case False"], ["proof (state)\nthis:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (remdups (a' @ b)) =\n             set (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof (cases \"x \\<in> set b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<in> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))\n 2. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "case True"], ["proof (state)\nthis:\n  x \\<in> set b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<in> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))\n 2. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"set (remdups (x # a') @ remdups (list_diff b (x # a'))) = \n          set (x # remdups a' @ remdups (list_diff b (x # a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    set (x # remdups a' @ remdups (list_diff b (x # a')))", "using \\<open>x \\<notin> set a'\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    set (x # remdups a' @ remdups (list_diff b (x # a')))", "by auto"], ["proof (state)\nthis:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff b (x # a'))) =\n    set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))", "by auto"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (x # remdups a' @ remdups (removeAll x (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    set (x # remdups a' @ remdups (removeAll x (list_diff b a')))", "by simp"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  set (x # remdups a' @ remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  set (x # remdups a' @ remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups a' @ x # remdups (removeAll x (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (removeAll x (list_diff b a'))) =\n    set (remdups a' @ x # remdups (removeAll x (list_diff b a')))", "by simp"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (removeAll x (list_diff b a'))) =\n  set (remdups a' @ x # remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (removeAll x (list_diff b a'))) =\n  set (remdups a' @ x # remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups a' @ x # removeAll x (remdups (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups a' @ x # remdups (removeAll x (list_diff b a'))) =\n    set (remdups a' @ x # removeAll x (remdups (list_diff b a')))", "by (simp only: remdupsRemoveAllCommute)"], ["proof (state)\nthis:\n  set (remdups a' @ x # remdups (removeAll x (list_diff b a'))) =\n  set (remdups a' @ x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups a' @ x # remdups (removeAll x (list_diff b a'))) =\n  set (remdups a' @ x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups a') \\<union> set (x # removeAll x (remdups (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups a' @ x # removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union>\n    set (x # removeAll x (remdups (list_diff b a')))", "by simp"], ["proof (state)\nthis:\n  set (remdups a' @ x # removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> set (x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups a' @ x # removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> set (x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups a') \\<union> {x} \\<union> set (removeAll x (remdups (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups a') \\<union>\n    set (x # removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union> {x} \\<union>\n    set (removeAll x (remdups (list_diff b a')))", "by auto"], ["proof (state)\nthis:\n  set (remdups a') \\<union>\n  set (x # removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> {x} \\<union>\n  set (removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups a') \\<union>\n  set (x # removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> {x} \\<union>\n  set (removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups a') \\<union> set (remdups (list_diff b a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> {x} \\<union>\n    set (removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union> set (remdups (list_diff b a'))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> {x} \\<union>\n    set (removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union> set (remdups (list_diff b a'))", "from \\<open>x \\<notin> set a'\\<close> \\<open>x \\<in> set b\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> set a'\n  x \\<in> set b", "have \"x \\<in> set (list_diff b a')\""], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n  x \\<in> set b\n\ngoal (1 subgoal):\n 1. x \\<in> set (list_diff b a')", "using listDiffIff[of \"x\" \"b\" \"a'\"]"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n  x \\<in> set b\n  (x \\<in> set b \\<and> x \\<notin> set a') = (x \\<in> set (list_diff b a'))\n\ngoal (1 subgoal):\n 1. x \\<in> set (list_diff b a')", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (list_diff b a')\n\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> {x} \\<union>\n    set (removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union> set (remdups (list_diff b a'))", "hence \"x \\<in> set (remdups (list_diff b a'))\""], ["proof (prove)\nusing this:\n  x \\<in> set (list_diff b a')\n\ngoal (1 subgoal):\n 1. x \\<in> set (remdups (list_diff b a'))", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> {x} \\<union>\n    set (removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union> set (remdups (list_diff b a'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> {x} \\<union>\n    set (removeAll x (remdups (list_diff b a'))) =\n    set (remdups a') \\<union> set (remdups (list_diff b a'))", "by auto"], ["proof (state)\nthis:\n  set (remdups a') \\<union> {x} \\<union>\n  set (removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> set (remdups (list_diff b a'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (remdups a') \\<union> {x} \\<union>\n  set (removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> set (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups a') \\<union> {x} \\<union>\n  set (removeAll x (remdups (list_diff b a'))) =\n  set (remdups a') \\<union> set (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups (a' @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> set (remdups (list_diff b a')) =\n    set (remdups (a' @ b))", "using Cons(1)"], ["proof (prove)\nusing this:\n  set (remdups (a' @ b)) = set (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (remdups a') \\<union> set (remdups (list_diff b a')) =\n    set (remdups (a' @ b))", "by simp"], ["proof (state)\nthis:\n  set (remdups a') \\<union> set (remdups (list_diff b a')) =\n  set (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups a') \\<union> set (remdups (list_diff b a')) =\n  set (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups ((x # a') @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups (a' @ b)) = set (remdups ((x # a') @ b))", "using \\<open>x \\<in> set b\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> set b\n\ngoal (1 subgoal):\n 1. set (remdups (a' @ b)) = set (remdups ((x # a') @ b))", "by simp"], ["proof (state)\nthis:\n  set (remdups (a' @ b)) = set (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "finally"], ["proof (chain)\npicking this:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (remdups ((x # a') @ b))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "case False"], ["proof (state)\nthis:\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> set (remdups ((x # a') @ b)) =\n                      set (remdups (x # a') @\n                           remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"set (remdups (x # a') @ remdups (list_diff b (x # a'))) = \n          set (x # (remdups a') @ remdups (list_diff b (x # a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    set (x # remdups a' @ remdups (list_diff b (x # a')))", "using \\<open>x \\<notin> set a'\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    set (x # remdups a' @ remdups (list_diff b (x # a')))", "by auto"], ["proof (state)\nthis:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff b (x # a'))) =\n    set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))", "by auto"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (x # remdups a' @ remdups (list_diff b a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    set (x # remdups a' @ remdups (list_diff b a'))", "using \\<open>x \\<notin> set b\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    set (x # remdups a' @ remdups (list_diff b a'))", "by auto"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  set (x # remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  set (x # remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = {x} \\<union> set (remdups (a' @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff b a')) =\n    {x} \\<union> set (remdups (a' @ b))", "using Cons(1)"], ["proof (prove)\nusing this:\n  set (remdups (a' @ b)) = set (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. set (x # remdups a' @ remdups (list_diff b a')) =\n    {x} \\<union> set (remdups (a' @ b))", "by simp"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff b a')) =\n  {x} \\<union> set (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  set (x # remdups a' @ remdups (list_diff b a')) =\n  {x} \\<union> set (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = set (remdups ((x # a') @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<union> set (remdups (a' @ b)) = set (remdups ((x # a') @ b))", "by auto"], ["proof (state)\nthis:\n  {x} \\<union> set (remdups (a' @ b)) = set (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "finally"], ["proof (chain)\npicking this:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (remdups ((x # a') @ b))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  set (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. set (remdups ((x # a') @ b)) =\n    set (remdups (x # a') @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (remdups ((x # a') @ b)) =\n  set (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remdupsAppendMultiSet: \n  shows \"mset (remdups (a @ b)) = mset (remdups a @ remdups (list_diff b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups (a @ b)) = mset (remdups a @ remdups (list_diff b a))", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. mset (remdups ([] @ b)) = mset (remdups [] @ remdups (list_diff b []))\n 2. \\<And>a1 a2.\n       mset (remdups (a2 @ b)) =\n       mset (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       mset (remdups ((a1 # a2) @ b)) =\n       mset (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. mset (remdups ([] @ b)) = mset (remdups [] @ remdups (list_diff b []))\n 2. \\<And>a1 a2.\n       mset (remdups (a2 @ b)) =\n       mset (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       mset (remdups ((a1 # a2) @ b)) =\n       mset (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups ([] @ b)) = mset (remdups [] @ remdups (list_diff b []))", "by auto"], ["proof (state)\nthis:\n  mset (remdups ([] @ b)) = mset (remdups [] @ remdups (list_diff b []))\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       mset (remdups (a2 @ b)) =\n       mset (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       mset (remdups ((a1 # a2) @ b)) =\n       mset (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       mset (remdups (a2 @ b)) =\n       mset (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       mset (remdups ((a1 # a2) @ b)) =\n       mset (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "case (Cons x a')"], ["proof (state)\nthis:\n  mset (remdups (a' @ b)) = mset (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       mset (remdups (a2 @ b)) =\n       mset (remdups a2 @ remdups (list_diff b a2)) \\<Longrightarrow>\n       mset (remdups ((a1 # a2) @ b)) =\n       mset (remdups (a1 # a2) @ remdups (list_diff b (a1 # a2)))", "thus ?case"], ["proof (prove)\nusing this:\n  mset (remdups (a' @ b)) = mset (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof (cases \"x \\<in> set a'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<in> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))\n 2. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "case True"], ["proof (state)\nthis:\n  x \\<in> set a'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<in> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))\n 2. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set a'\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "using Cons"], ["proof (prove)\nusing this:\n  x \\<in> set a'\n  mset (remdups (a' @ b)) = mset (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "using listDiffDoubleRemoveAll[of \"x\" \"a'\" \"b\"]"], ["proof (prove)\nusing this:\n  x \\<in> set a'\n  mset (remdups (a' @ b)) = mset (remdups a' @ remdups (list_diff b a'))\n  x \\<in> set a' \\<Longrightarrow> list_diff b a' = list_diff b (x # a')\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "case False"], ["proof (state)\nthis:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mset (remdups (a' @ b)) =\n             mset (remdups a' @ remdups (list_diff b a'));\n     x \\<notin> set a'\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof (cases \"x \\<in> set b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<in> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))\n 2. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "case True"], ["proof (state)\nthis:\n  x \\<in> set b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<in> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))\n 2. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"mset (remdups (x # a') @ remdups (list_diff b (x # a'))) = \n          mset (x # remdups a' @ remdups (list_diff b (x # a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "have \"remdups (x # a') = x # remdups a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (x # a') = x # remdups a'", "using \\<open>x \\<notin> set a'\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. remdups (x # a') = x # remdups a'", "by auto"], ["proof (state)\nthis:\n  remdups (x # a') = x # remdups a'\n\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  remdups (x # a') = x # remdups a'\n\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))", "by auto"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (x # remdups a' @ remdups (removeAll x (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    mset (x # remdups a' @ remdups (removeAll x (list_diff b a')))", "by simp"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  mset (x # remdups a' @ remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  mset (x # remdups a' @ remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups a' @ x # remdups (removeAll x (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (removeAll x (list_diff b a'))) =\n    mset (remdups a' @ x # remdups (removeAll x (list_diff b a')))", "by (simp add: union_assoc)"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (removeAll x (list_diff b a'))) =\n  mset (remdups a' @ x # remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (removeAll x (list_diff b a'))) =\n  mset (remdups a' @ x # remdups (removeAll x (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups a' @ x # removeAll x (remdups (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups a' @ x # remdups (removeAll x (list_diff b a'))) =\n    mset (remdups a' @ x # removeAll x (remdups (list_diff b a')))", "by (simp only: remdupsRemoveAllCommute)"], ["proof (state)\nthis:\n  mset (remdups a' @ x # remdups (removeAll x (list_diff b a'))) =\n  mset (remdups a' @ x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups a' @ x # remdups (removeAll x (list_diff b a'))) =\n  mset (remdups a' @ x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups a' @ x # removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups a' @ x # removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups a' @ x # removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups a') + {#x#} + mset (removeAll x (remdups (list_diff b a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + {#x#} + mset (removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups a') + mset (x # removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + {#x#} + mset (removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups a') + mset (remdups (list_diff b a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (remdups (list_diff b a'))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (remdups (list_diff b a'))", "from \\<open>x \\<notin> set a'\\<close> \\<open>x \\<in> set b\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> set a'\n  x \\<in> set b", "have \"x \\<in> set (list_diff b a')\""], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n  x \\<in> set b\n\ngoal (1 subgoal):\n 1. x \\<in> set (list_diff b a')", "using listDiffIff[of \"x\" \"b\" \"a'\"]"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n  x \\<in> set b\n  (x \\<in> set b \\<and> x \\<notin> set a') = (x \\<in> set (list_diff b a'))\n\ngoal (1 subgoal):\n 1. x \\<in> set (list_diff b a')", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (list_diff b a')\n\ngoal (1 subgoal):\n 1. mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (remdups (list_diff b a'))", "hence \"x \\<in> set (remdups (list_diff b a'))\""], ["proof (prove)\nusing this:\n  x \\<in> set (list_diff b a')\n\ngoal (1 subgoal):\n 1. x \\<in> set (remdups (list_diff b a'))", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (remdups (list_diff b a'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (remdups (list_diff b a'))", "using removeAll_multiset[of \"remdups (list_diff b a')\" \"x\"]"], ["proof (prove)\nusing this:\n  x \\<in> set (remdups (list_diff b a'))\n  \\<lbrakk>distinct (remdups (list_diff b a'));\n   x \\<in> set (remdups (list_diff b a'))\\<rbrakk>\n  \\<Longrightarrow> mset (remdups (list_diff b a')) =\n                    {#x#} + mset (removeAll x (remdups (list_diff b a')))\n\ngoal (1 subgoal):\n 1. mset (remdups a') + {#x#} +\n    mset (removeAll x (remdups (list_diff b a'))) =\n    mset (remdups a') + mset (remdups (list_diff b a'))", "by (simp add: union_assoc)"], ["proof (state)\nthis:\n  mset (remdups a') + {#x#} +\n  mset (removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + mset (remdups (list_diff b a'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups a') + {#x#} +\n  mset (removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + mset (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups a') + {#x#} +\n  mset (removeAll x (remdups (list_diff b a'))) =\n  mset (remdups a') + mset (remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups (a' @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups a') + mset (remdups (list_diff b a')) =\n    mset (remdups (a' @ b))", "using Cons(1)"], ["proof (prove)\nusing this:\n  mset (remdups (a' @ b)) = mset (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (remdups a') + mset (remdups (list_diff b a')) =\n    mset (remdups (a' @ b))", "by simp"], ["proof (state)\nthis:\n  mset (remdups a') + mset (remdups (list_diff b a')) =\n  mset (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups a') + mset (remdups (list_diff b a')) =\n  mset (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups ((x # a') @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups (a' @ b)) = mset (remdups ((x # a') @ b))", "using \\<open>x \\<in> set b\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> set b\n\ngoal (1 subgoal):\n 1. mset (remdups (a' @ b)) = mset (remdups ((x # a') @ b))", "by simp"], ["proof (state)\nthis:\n  mset (remdups (a' @ b)) = mset (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "finally"], ["proof (chain)\npicking this:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (remdups ((x # a') @ b))", "show ?thesis"], ["proof (prove)\nusing this:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "case False"], ["proof (state)\nthis:\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set a'; x \\<notin> set b\\<rbrakk>\n    \\<Longrightarrow> mset (remdups ((x # a') @ b)) =\n                      mset\n                       (remdups (x # a') @ remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"mset (remdups (x # a') @ remdups (list_diff b (x # a'))) = \n          mset (x # remdups a' @ remdups (list_diff b (x # a')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "have \"remdups (x # a') = x # remdups a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (x # a') = x # remdups a'", "using \\<open>x \\<notin> set a'\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n\ngoal (1 subgoal):\n 1. remdups (x # a') = x # remdups a'", "by auto"], ["proof (state)\nthis:\n  remdups (x # a') = x # remdups a'\n\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  remdups (x # a') = x # remdups a'\n\ngoal (1 subgoal):\n 1. mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff b (x # a')))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff b (x # a'))) =\n    mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))", "by auto"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff b (x # a'))) =\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (x # remdups a' @ remdups (list_diff b a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    mset (x # remdups a' @ remdups (list_diff b a'))", "using \\<open>x \\<notin> set b\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    mset (x # remdups a' @ remdups (list_diff b a'))", "using removeAll_id[of \"x\" \"b\"]"], ["proof (prove)\nusing this:\n  x \\<notin> set b\n  x \\<notin> set b \\<Longrightarrow> removeAll x b = b\n\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n    mset (x # remdups a' @ remdups (list_diff b a'))", "by simp"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  mset (x # remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff (removeAll x b) a')) =\n  mset (x # remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = {#x#} + mset (remdups (a' @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff b a')) =\n    {#x#} + mset (remdups (a' @ b))", "using Cons(1)"], ["proof (prove)\nusing this:\n  mset (remdups (a' @ b)) = mset (remdups a' @ remdups (list_diff b a'))\n\ngoal (1 subgoal):\n 1. mset (x # remdups a' @ remdups (list_diff b a')) =\n    {#x#} + mset (remdups (a' @ b))", "by (simp add: union_commute)"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff b a')) =\n  {#x#} + mset (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "also"], ["proof (state)\nthis:\n  mset (x # remdups a' @ remdups (list_diff b a')) =\n  {#x#} + mset (remdups (a' @ b))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "have \"\\<dots> = mset (remdups ((x # a') @ b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x#} + mset (remdups (a' @ b)) = mset (remdups ((x # a') @ b))", "using \\<open>x \\<notin> set a'\\<close> \\<open>x \\<notin> set b\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set a'\n  x \\<notin> set b\n\ngoal (1 subgoal):\n 1. {#x#} + mset (remdups (a' @ b)) = mset (remdups ((x # a') @ b))", "by (auto simp add: union_commute)"], ["proof (state)\nthis:\n  {#x#} + mset (remdups (a' @ b)) = mset (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. x \\<notin> set b \\<Longrightarrow>\n    mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "finally"], ["proof (chain)\npicking this:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (remdups ((x # a') @ b))", "show ?thesis"], ["proof (prove)\nusing this:\n  mset (remdups (x # a') @ remdups (list_diff b (x # a'))) =\n  mset (remdups ((x # a') @ b))\n\ngoal (1 subgoal):\n 1. mset (remdups ((x # a') @ b)) =\n    mset (remdups (x # a') @ remdups (list_diff b (x # a')))", "by simp"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (remdups ((x # a') @ b)) =\n  mset (remdups (x # a') @ remdups (list_diff b (x # a')))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remdupsListDiff:\n\"remdups (list_diff a b) = list_diff (remdups a) (remdups b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (list_diff a b) = list_diff (remdups a) (remdups b)", "proof(induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. remdups (list_diff [] b) = list_diff (remdups []) (remdups b)\n 2. \\<And>a1 a2.\n       remdups (list_diff a2 b) =\n       list_diff (remdups a2) (remdups b) \\<Longrightarrow>\n       remdups (list_diff (a1 # a2) b) =\n       list_diff (remdups (a1 # a2)) (remdups b)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. remdups (list_diff [] b) = list_diff (remdups []) (remdups b)\n 2. \\<And>a1 a2.\n       remdups (list_diff a2 b) =\n       list_diff (remdups a2) (remdups b) \\<Longrightarrow>\n       remdups (list_diff (a1 # a2) b) =\n       list_diff (remdups (a1 # a2)) (remdups b)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (list_diff [] b) = list_diff (remdups []) (remdups b)", "by simp"], ["proof (state)\nthis:\n  remdups (list_diff [] b) = list_diff (remdups []) (remdups b)\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       remdups (list_diff a2 b) =\n       list_diff (remdups a2) (remdups b) \\<Longrightarrow>\n       remdups (list_diff (a1 # a2) b) =\n       list_diff (remdups (a1 # a2)) (remdups b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       remdups (list_diff a2 b) =\n       list_diff (remdups a2) (remdups b) \\<Longrightarrow>\n       remdups (list_diff (a1 # a2) b) =\n       list_diff (remdups (a1 # a2)) (remdups b)", "case (Cons x a')"], ["proof (state)\nthis:\n  remdups (list_diff a' b) = list_diff (remdups a') (remdups b)\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       remdups (list_diff a2 b) =\n       list_diff (remdups a2) (remdups b) \\<Longrightarrow>\n       remdups (list_diff (a1 # a2) b) =\n       list_diff (remdups (a1 # a2)) (remdups b)", "thus ?case"], ["proof (prove)\nusing this:\n  remdups (list_diff a' b) = list_diff (remdups a') (remdups b)\n\ngoal (1 subgoal):\n 1. remdups (list_diff (x # a') b) =\n    list_diff (remdups (x # a')) (remdups b)", "using listDiffIff[of \"x\" \"a'\" \"b\"]"], ["proof (prove)\nusing this:\n  remdups (list_diff a' b) = list_diff (remdups a') (remdups b)\n  (x \\<in> set a' \\<and> x \\<notin> set b) = (x \\<in> set (list_diff a' b))\n\ngoal (1 subgoal):\n 1. remdups (list_diff (x # a') b) =\n    list_diff (remdups (x # a')) (remdups b)", "by auto"], ["proof (state)\nthis:\n  remdups (list_diff (x # a') b) = list_diff (remdups (x # a')) (remdups b)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*********************************************************)\n(*                       Multiset                        *)\n(*********************************************************)\n\n(* Repetition of lemmas from Multiset.thy -\n   neccessary for r which I do not know how to represent as order instance. *)"], ["", "definition\n\"multiset_le a b r == a = b \\<or> (a, b) \\<in> mult r\""], ["", "lemma multisetEmptyLeI:\n  \"multiset_le {#} a r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le {#} a r", "unfolding multiset_le_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} = a \\<or> ({#}, a) \\<in> mult r", "using one_step_implies_mult[of \"a\" \"{#}\" r \"{#}\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<noteq> {#};\n   \\<forall>k\\<in>#{#}. \\<exists>j\\<in>#a. (k, j) \\<in> r\\<rbrakk>\n  \\<Longrightarrow> ({#} + {#}, {#} + a) \\<in> mult r\n\ngoal (1 subgoal):\n 1. {#} = a \\<or> ({#}, a) \\<in> mult r", "by auto"], ["", "lemma multisetUnionLessMono2:\nshows\n  \"trans r \\<Longrightarrow> (b1, b2) \\<in> mult r \\<Longrightarrow> (a + b1, a + b2) \\<in> mult r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans r; (b1, b2) \\<in> mult r\\<rbrakk>\n    \\<Longrightarrow> (a + b1, a + b2) \\<in> mult r", "unfolding mult_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans r; (b1, b2) \\<in> (mult1 r)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (a + b1, a + b2) \\<in> (mult1 r)\\<^sup>+", "apply (erule trancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>trans r; (b1, y) \\<in> mult1 r\\<rbrakk>\n       \\<Longrightarrow> (a + b1, a + y) \\<in> (mult1 r)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>trans r; (b1, y) \\<in> (mult1 r)\\<^sup>+;\n        (y, z) \\<in> mult1 r;\n        (a + b1, a + y) \\<in> (mult1 r)\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (a + b1, a + z) \\<in> (mult1 r)\\<^sup>+", "apply (blast intro: mult1_union transI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>trans r; (b1, y) \\<in> (mult1 r)\\<^sup>+;\n        (y, z) \\<in> mult1 r;\n        (a + b1, a + y) \\<in> (mult1 r)\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (a + b1, a + z) \\<in> (mult1 r)\\<^sup>+", "apply (blast intro: mult1_union transI trancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma multisetUnionLessMono1:\nshows\n  \"trans r \\<Longrightarrow> (a1, a2) \\<in> mult r \\<Longrightarrow> (a1 + b, a2 + b) \\<in> mult r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans r; (a1, a2) \\<in> mult r\\<rbrakk>\n    \\<Longrightarrow> (a1 + b, a2 + b) \\<in> mult r", "by (metis multisetUnionLessMono2 union_commute)"], ["", "lemma multisetUnionLeMono2:\nassumes\n  \"trans r\"\n  \"multiset_le b1 b2 r\"\nshows\n  \"multiset_le (a + b1) (a + b2) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le (a + b1) (a + b2) r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le b1 b2 r\n\ngoal (1 subgoal):\n 1. multiset_le (a + b1) (a + b2) r", "unfolding multiset_le_def"], ["proof (prove)\nusing this:\n  trans r\n  b1 = b2 \\<or> (b1, b2) \\<in> mult r\n\ngoal (1 subgoal):\n 1. a + b1 = a + b2 \\<or> (a + b1, a + b2) \\<in> mult r", "using multisetUnionLessMono2[of \"r\" \"b1\" \"b2\" \"a\"]"], ["proof (prove)\nusing this:\n  trans r\n  b1 = b2 \\<or> (b1, b2) \\<in> mult r\n  \\<lbrakk>trans r; (b1, b2) \\<in> mult r\\<rbrakk>\n  \\<Longrightarrow> (a + b1, a + b2) \\<in> mult r\n\ngoal (1 subgoal):\n 1. a + b1 = a + b2 \\<or> (a + b1, a + b2) \\<in> mult r", "by auto"], ["", "lemma multisetUnionLeMono1:\nassumes\n  \"trans r\"\n  \"multiset_le a1 a2 r\"\nshows\n  \"multiset_le (a1 + b) (a2 + b) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le (a1 + b) (a2 + b) r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le a1 a2 r\n\ngoal (1 subgoal):\n 1. multiset_le (a1 + b) (a2 + b) r", "unfolding multiset_le_def"], ["proof (prove)\nusing this:\n  trans r\n  a1 = a2 \\<or> (a1, a2) \\<in> mult r\n\ngoal (1 subgoal):\n 1. a1 + b = a2 + b \\<or> (a1 + b, a2 + b) \\<in> mult r", "using multisetUnionLessMono1[of \"r\" \"a1\" \"a2\" \"b\"]"], ["proof (prove)\nusing this:\n  trans r\n  a1 = a2 \\<or> (a1, a2) \\<in> mult r\n  \\<lbrakk>trans r; (a1, a2) \\<in> mult r\\<rbrakk>\n  \\<Longrightarrow> (a1 + b, a2 + b) \\<in> mult r\n\ngoal (1 subgoal):\n 1. a1 + b = a2 + b \\<or> (a1 + b, a2 + b) \\<in> mult r", "by auto"], ["", "lemma multisetLeTrans:\nassumes\n  \"trans r\"\n  \"multiset_le x y r\"\n  \"multiset_le y z r\"\nshows\n  \"multiset_le x z r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le x z r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le x y r\n  multiset_le y z r\n\ngoal (1 subgoal):\n 1. multiset_le x z r", "unfolding multiset_le_def"], ["proof (prove)\nusing this:\n  trans r\n  x = y \\<or> (x, y) \\<in> mult r\n  y = z \\<or> (y, z) \\<in> mult r\n\ngoal (1 subgoal):\n 1. x = z \\<or> (x, z) \\<in> mult r", "unfolding mult_def"], ["proof (prove)\nusing this:\n  trans r\n  x = y \\<or> (x, y) \\<in> (mult1 r)\\<^sup>+\n  y = z \\<or> (y, z) \\<in> (mult1 r)\\<^sup>+\n\ngoal (1 subgoal):\n 1. x = z \\<or> (x, z) \\<in> (mult1 r)\\<^sup>+", "by (blast intro: trancl_trans)"], ["", "lemma multisetUnionLeMono:\nassumes\n  \"trans r\"\n  \"multiset_le a1 a2 r\"\n  \"multiset_le b1 b2 r\"\nshows\n  \"multiset_le (a1 + b1) (a2 + b2) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le (a1 + b1) (a2 + b2) r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le a1 a2 r\n  multiset_le b1 b2 r\n\ngoal (1 subgoal):\n 1. multiset_le (a1 + b1) (a2 + b2) r", "using multisetUnionLeMono1[of \"r\" \"a1\" \"a2\" \"b1\"]"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le a1 a2 r\n  multiset_le b1 b2 r\n  \\<lbrakk>trans r; multiset_le a1 a2 r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (a1 + b1) (a2 + b1) r\n\ngoal (1 subgoal):\n 1. multiset_le (a1 + b1) (a2 + b2) r", "using multisetUnionLeMono2[of \"r\" \"b1\" \"b2\" \"a2\"]"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le a1 a2 r\n  multiset_le b1 b2 r\n  \\<lbrakk>trans r; multiset_le a1 a2 r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (a1 + b1) (a2 + b1) r\n  \\<lbrakk>trans r; multiset_le b1 b2 r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (a2 + b1) (a2 + b2) r\n\ngoal (1 subgoal):\n 1. multiset_le (a1 + b1) (a2 + b2) r", "using multisetLeTrans[of \"r\" \"a1 + b1\" \"a2 + b1\" \"a2 + b2\"]"], ["proof (prove)\nusing this:\n  trans r\n  multiset_le a1 a2 r\n  multiset_le b1 b2 r\n  \\<lbrakk>trans r; multiset_le a1 a2 r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (a1 + b1) (a2 + b1) r\n  \\<lbrakk>trans r; multiset_le b1 b2 r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (a2 + b1) (a2 + b2) r\n  \\<lbrakk>trans r; multiset_le (a1 + b1) (a2 + b1) r;\n   multiset_le (a2 + b1) (a2 + b2) r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (a1 + b1) (a2 + b2) r\n\ngoal (1 subgoal):\n 1. multiset_le (a1 + b1) (a2 + b2) r", "by simp"], ["", "lemma multisetLeListDiff:\nassumes\n  \"trans r\"\nshows \n  \"multiset_le (mset (list_diff a b)) (mset a) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff a b)) (mset a) r", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. multiset_le (mset (list_diff [] b)) (mset []) r\n 2. \\<And>a1 a2.\n       multiset_le (mset (list_diff a2 b)) (mset a2) r \\<Longrightarrow>\n       multiset_le (mset (list_diff (a1 # a2) b)) (mset (a1 # a2)) r", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. multiset_le (mset (list_diff [] b)) (mset []) r\n 2. \\<And>a1 a2.\n       multiset_le (mset (list_diff a2 b)) (mset a2) r \\<Longrightarrow>\n       multiset_le (mset (list_diff (a1 # a2) b)) (mset (a1 # a2)) r", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff [] b)) (mset []) r", "unfolding multiset_le_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (list_diff [] b) = mset [] \\<or>\n    (mset (list_diff [] b), mset []) \\<in> mult r", "by simp"], ["proof (state)\nthis:\n  multiset_le (mset (list_diff [] b)) (mset []) r\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       multiset_le (mset (list_diff a2 b)) (mset a2) r \\<Longrightarrow>\n       multiset_le (mset (list_diff (a1 # a2) b)) (mset (a1 # a2)) r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       multiset_le (mset (list_diff a2 b)) (mset a2) r \\<Longrightarrow>\n       multiset_le (mset (list_diff (a1 # a2) b)) (mset (a1 # a2)) r", "case (Cons x a')"], ["proof (state)\nthis:\n  multiset_le (mset (list_diff a' b)) (mset a') r\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       multiset_le (mset (list_diff a2 b)) (mset a2) r \\<Longrightarrow>\n       multiset_le (mset (list_diff (a1 # a2) b)) (mset (a1 # a2)) r", "thus ?case"], ["proof (prove)\nusing this:\n  multiset_le (mset (list_diff a' b)) (mset a') r\n\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff (x # a') b)) (mset (x # a')) r", "using assms"], ["proof (prove)\nusing this:\n  multiset_le (mset (list_diff a' b)) (mset a') r\n  trans r\n\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff (x # a') b)) (mset (x # a')) r", "using multisetEmptyLeI[of \"{#x#}\" \"r\"]"], ["proof (prove)\nusing this:\n  multiset_le (mset (list_diff a' b)) (mset a') r\n  trans r\n  multiset_le {#} {#x#} r\n\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff (x # a') b)) (mset (x # a')) r", "using multisetUnionLeMono[of \"r\" \"mset (list_diff a' b)\" \"mset a'\" \"{#}\" \"{#x#}\"]"], ["proof (prove)\nusing this:\n  multiset_le (mset (list_diff a' b)) (mset a') r\n  trans r\n  multiset_le {#} {#x#} r\n  \\<lbrakk>trans r; multiset_le (mset (list_diff a' b)) (mset a') r;\n   multiset_le {#} {#x#} r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (mset (list_diff a' b) + {#})\n                     (mset a' + {#x#}) r\n\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff (x # a') b)) (mset (x # a')) r", "using multisetUnionLeMono1[of \"r\" \"mset (list_diff a' b)\" \"mset a'\" \"{#x#}\"]"], ["proof (prove)\nusing this:\n  multiset_le (mset (list_diff a' b)) (mset a') r\n  trans r\n  multiset_le {#} {#x#} r\n  \\<lbrakk>trans r; multiset_le (mset (list_diff a' b)) (mset a') r;\n   multiset_le {#} {#x#} r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (mset (list_diff a' b) + {#})\n                     (mset a' + {#x#}) r\n  \\<lbrakk>trans r; multiset_le (mset (list_diff a' b)) (mset a') r\\<rbrakk>\n  \\<Longrightarrow> multiset_le (mset (list_diff a' b) + {#x#})\n                     (mset a' + {#x#}) r\n\ngoal (1 subgoal):\n 1. multiset_le (mset (list_diff (x # a') b)) (mset (x # a')) r", "by auto"], ["proof (state)\nthis:\n  multiset_le (mset (list_diff (x # a') b)) (mset (x # a')) r\n\ngoal:\nNo subgoals!", "qed"], ["", "(*********************************************************)\n(*                       Levi                            *)\n(*********************************************************)"], ["", "subsection\\<open>Levi's lemma\\<close>"], ["", "text\\<open>Obsolete: these two lemmas are already proved as @{term\nappend_eq_append_conv2} and @{term append_eq_Cons_conv}.\\<close>"], ["", "lemma FullLevi: \n  shows \"(x @ y = z @ w) = \n                (x = z \\<and> y = w \\<or> \n                (\\<exists> t. z @ t = x \\<and> t @ y = w) \\<or> \n                (\\<exists> t. x @ t = z \\<and> t @ w = y))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x @ y = z @ w) =\n    (x = z \\<and> y = w \\<or>\n     (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n     (\\<exists>t. x @ t = z \\<and> t @ w = y))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x @ y = z @ w \\<Longrightarrow>\n    x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y)\n 2. x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y) \\<Longrightarrow>\n    x @ y = z @ w", "assume \"?rhs\""], ["proof (state)\nthis:\n  x = z \\<and> y = w \\<or>\n  (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x @ t = z \\<and> t @ w = y)\n\ngoal (2 subgoals):\n 1. x @ y = z @ w \\<Longrightarrow>\n    x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y)\n 2. x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y) \\<Longrightarrow>\n    x @ y = z @ w", "thus \"?lhs\""], ["proof (prove)\nusing this:\n  x = z \\<and> y = w \\<or>\n  (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x @ t = z \\<and> t @ w = y)\n\ngoal (1 subgoal):\n 1. x @ y = z @ w", "by auto"], ["proof (state)\nthis:\n  x @ y = z @ w\n\ngoal (1 subgoal):\n 1. x @ y = z @ w \\<Longrightarrow>\n    x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x @ y = z @ w \\<Longrightarrow>\n    x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y)", "assume \"?lhs\""], ["proof (state)\nthis:\n  x @ y = z @ w\n\ngoal (1 subgoal):\n 1. x @ y = z @ w \\<Longrightarrow>\n    x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y)", "thus \"?rhs\""], ["proof (prove)\nusing this:\n  x @ y = z @ w\n\ngoal (1 subgoal):\n 1. x = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x @ t = z \\<and> t @ w = y)", "proof (induct x arbitrary: z)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>z.\n       [] @ y = z @ w \\<Longrightarrow>\n       [] = z \\<and> y = w \\<or>\n       (\\<exists>t. z @ t = [] \\<and> t @ y = w) \\<or>\n       (\\<exists>t. [] @ t = z \\<and> t @ w = y)\n 2. \\<And>a x z.\n       \\<lbrakk>\\<And>z.\n                   x @ y = z @ w \\<Longrightarrow>\n                   x = z \\<and> y = w \\<or>\n                   (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n                   (\\<exists>t. x @ t = z \\<and> t @ w = y);\n        (a # x) @ y = z @ w\\<rbrakk>\n       \\<Longrightarrow> a # x = z \\<and> y = w \\<or>\n                         (\\<exists>t. z @ t = a # x \\<and> t @ y = w) \\<or>\n                         (\\<exists>t. (a # x) @ t = z \\<and> t @ w = y)", "case (Cons a x')"], ["proof (state)\nthis:\n  x' @ y = ?z @ w \\<Longrightarrow>\n  x' = ?z \\<and> y = w \\<or>\n  (\\<exists>t. ?z @ t = x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x' @ t = ?z \\<and> t @ w = y)\n  (a # x') @ y = z @ w\n\ngoal (2 subgoals):\n 1. \\<And>z.\n       [] @ y = z @ w \\<Longrightarrow>\n       [] = z \\<and> y = w \\<or>\n       (\\<exists>t. z @ t = [] \\<and> t @ y = w) \\<or>\n       (\\<exists>t. [] @ t = z \\<and> t @ w = y)\n 2. \\<And>a x z.\n       \\<lbrakk>\\<And>z.\n                   x @ y = z @ w \\<Longrightarrow>\n                   x = z \\<and> y = w \\<or>\n                   (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n                   (\\<exists>t. x @ t = z \\<and> t @ w = y);\n        (a # x) @ y = z @ w\\<rbrakk>\n       \\<Longrightarrow> a # x = z \\<and> y = w \\<or>\n                         (\\<exists>t. z @ t = a # x \\<and> t @ y = w) \\<or>\n                         (\\<exists>t. (a # x) @ t = z \\<and> t @ w = y)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "proof (cases \"z = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)\n 2. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "case True"], ["proof (state)\nthis:\n  z = []\n\ngoal (2 subgoals):\n 1. z = [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)\n 2. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "with \\<open>(a # x') @ y = z @ w\\<close>"], ["proof (chain)\npicking this:\n  (a # x') @ y = z @ w\n  z = []", "obtain t where \"z @ t = a # x'\" \"t @ y = w\""], ["proof (prove)\nusing this:\n  (a # x') @ y = z @ w\n  z = []\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>z @ t = a # x'; t @ y = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z @ t = a # x'\n  t @ y = w\n\ngoal (2 subgoals):\n 1. z = [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)\n 2. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  z @ t = a # x'\n  t @ y = w\n\ngoal (1 subgoal):\n 1. a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "by auto"], ["proof (state)\nthis:\n  a # x' = z \\<and> y = w \\<or>\n  (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)\n\ngoal (1 subgoal):\n 1. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "case False"], ["proof (state)\nthis:\n  z \\<noteq> []\n\ngoal (1 subgoal):\n 1. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "then"], ["proof (chain)\npicking this:\n  z \\<noteq> []", "obtain b and z' where \"z = b # z'\""], ["proof (prove)\nusing this:\n  z \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>b z'. z = b # z' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  z = b # z'\n\ngoal (1 subgoal):\n 1. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "with \\<open>(a # x') @ y = z @ w\\<close>"], ["proof (chain)\npicking this:\n  (a # x') @ y = z @ w\n  z = b # z'", "have \"x' @ y = z' @ w\" \"a = b\""], ["proof (prove)\nusing this:\n  (a # x') @ y = z @ w\n  z = b # z'\n\ngoal (1 subgoal):\n 1. x' @ y = z' @ w &&& a = b", "by auto"], ["proof (state)\nthis:\n  x' @ y = z' @ w\n  a = b\n\ngoal (1 subgoal):\n 1. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "with Cons(1)[of \"z'\"]"], ["proof (chain)\npicking this:\n  x' @ y = z' @ w \\<Longrightarrow>\n  x' = z' \\<and> y = w \\<or>\n  (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x' @ t = z' \\<and> t @ w = y)\n  x' @ y = z' @ w\n  a = b", "have \"x' = z' \\<and> y = w \\<or> (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or> (\\<exists>t. x' @ t = z' \\<and> t @ w = y)\""], ["proof (prove)\nusing this:\n  x' @ y = z' @ w \\<Longrightarrow>\n  x' = z' \\<and> y = w \\<or>\n  (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x' @ t = z' \\<and> t @ w = y)\n  x' @ y = z' @ w\n  a = b\n\ngoal (1 subgoal):\n 1. x' = z' \\<and> y = w \\<or>\n    (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. x' @ t = z' \\<and> t @ w = y)", "by simp"], ["proof (state)\nthis:\n  x' = z' \\<and> y = w \\<or>\n  (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x' @ t = z' \\<and> t @ w = y)\n\ngoal (1 subgoal):\n 1. z \\<noteq> [] \\<Longrightarrow>\n    a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "with \\<open>a = b\\<close> \\<open>z = b # z'\\<close>"], ["proof (chain)\npicking this:\n  a = b\n  z = b # z'\n  x' = z' \\<and> y = w \\<or>\n  (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x' @ t = z' \\<and> t @ w = y)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = b\n  z = b # z'\n  x' = z' \\<and> y = w \\<or>\n  (\\<exists>t. z' @ t = x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x' @ t = z' \\<and> t @ w = y)\n\ngoal (1 subgoal):\n 1. a # x' = z \\<and> y = w \\<or>\n    (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n    (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)", "by auto"], ["proof (state)\nthis:\n  a # x' = z \\<and> y = w \\<or>\n  (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a # x' = z \\<and> y = w \\<or>\n  (\\<exists>t. z @ t = a # x' \\<and> t @ y = w) \\<or>\n  (\\<exists>t. (a # x') @ t = z \\<and> t @ w = y)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       [] @ y = z @ w \\<Longrightarrow>\n       [] = z \\<and> y = w \\<or>\n       (\\<exists>t. z @ t = [] \\<and> t @ y = w) \\<or>\n       (\\<exists>t. [] @ t = z \\<and> t @ w = y)", "qed simp"], ["proof (state)\nthis:\n  x = z \\<and> y = w \\<or>\n  (\\<exists>t. z @ t = x \\<and> t @ y = w) \\<or>\n  (\\<exists>t. x @ t = z \\<and> t @ w = y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SimpleLevi:\n  shows \"(p @ s = a # list) = \n             ( p = [] \\<and> s = a # list \\<or> \n              (\\<exists> t. p = a # t \\<and> t @ s = list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p @ s = a # list) =\n    (p = [] \\<and> s = a # list \\<or>\n     (\\<exists>t. p = a # t \\<and> t @ s = list))", "by (induct p) auto"], ["", "subsection\\<open>Single element lists\\<close>"], ["", "lemma lengthOneCharacterisation:\n  shows \"(length l = 1) = (l = [hd l])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length l = 1) = (l = [hd l])", "by (induct l) auto"], ["", "lemma lengthOneImpliesOnlyElement:\n  assumes \"length l = 1\" and \"a : set l\"\n  shows \"\\<forall> a'. a' : set l \\<longrightarrow> a' = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a", "proof (cases l)"], ["proof (state)\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow>\n    \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a\n 2. \\<And>aa list.\n       l = aa # list \\<Longrightarrow>\n       \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a", "case (Cons literal' clause')"], ["proof (state)\nthis:\n  l = literal' # clause'\n\ngoal (2 subgoals):\n 1. l = [] \\<Longrightarrow>\n    \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a\n 2. \\<And>aa list.\n       l = aa # list \\<Longrightarrow>\n       \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a", "with assms"], ["proof (chain)\npicking this:\n  length l = 1\n  a \\<in> set l\n  l = literal' # clause'", "show ?thesis"], ["proof (prove)\nusing this:\n  length l = 1\n  a \\<in> set l\n  l = literal' # clause'\n\ngoal (1 subgoal):\n 1. \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a", "by auto"], ["proof (state)\nthis:\n  \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a\n\ngoal (1 subgoal):\n 1. l = [] \\<Longrightarrow>\n    \\<forall>a'. a' \\<in> set l \\<longrightarrow> a' = a", "qed simp"], ["", "end"]]}