{"file_name": "/home/qj213/afp-2021-10-22/thys/SATSolverVerification/FunctionalImplementation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SATSolverVerification", "problem_names": ["theorem correctness:\nshows \n\"(solve F0 = TRUE \\<and> satisfiable F0) \\<or> (solve F0 = FALSE \\<and> \\<not> satisfiable F0)\""], "translations": [["", "theorem correctness:\nshows \n\"(solve F0 = TRUE \\<and> satisfiable F0) \\<or> (solve F0 = FALSE \\<and> \\<not> satisfiable F0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "let ?istate = \"initialize F0 initialState\""], ["proof (state)\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "let ?F0' = \"filter (\\<lambda> c. \\<not> clauseTautology c) F0\""], ["proof (state)\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "have\n  \"InvariantConsistent (getM ?istate)\"\n  \"InvariantUniq (getM ?istate)\"\n  \"InvariantWatchesEl (getF ?istate) (getWatch1 ?istate) (getWatch2 ?istate)\" and \n  \"InvariantWatchesDiffer (getF ?istate) (getWatch1 ?istate) (getWatch2 ?istate)\" and \n  \"InvariantWatchCharacterization (getF ?istate) (getWatch1 ?istate) (getWatch2 ?istate) (getM ?istate)\" and \n  \"InvariantWatchListsContainOnlyClausesFromF (getWatchList ?istate) (getF ?istate)\" and\n  \"InvariantWatchListsUniq (getWatchList ?istate)\" and\n  \"InvariantWatchListsCharacterization (getWatchList ?istate) (getWatch1 ?istate) (getWatch2 ?istate)\" and\n  \"InvariantUniqQ (getQ ?istate)\" and\n  \"InvariantQCharacterization (getConflictFlag ?istate) (getQ ?istate) (getF ?istate) (getM ?istate)\" and\n  \"InvariantConflictFlagCharacterization (getConflictFlag ?istate) (getF ?istate) (getM ?istate)\" and\n  \"InvariantNoDecisionsWhenConflict (getF ?istate) (getM ?istate) (currentLevel (getM ?istate))\" and\n  \"InvariantNoDecisionsWhenUnit (getF ?istate) (getM ?istate) (currentLevel (getM ?istate))\" and\n  \"InvariantGetReasonIsReason (getReason ?istate) (getF ?istate) (getM ?istate) (set (getQ ?istate))\" and\n  \"InvariantConflictClauseCharacterization (getConflictFlag ?istate) (getConflictClause ?istate) (getF ?istate) (getM ?istate)\"\n  \"InvariantVarsM (getM ?istate) F0 (vars F0)\"\n  \"InvariantVarsQ (getQ ?istate) F0 (vars F0)\"\n  \"InvariantVarsF (getF ?istate) F0 (vars F0)\"\n  \"getSATFlag ?istate = UNDEF \\<longrightarrow> InvariantEquivalentZL (getF ?istate) (getM ?istate) ?F0'\" and\n  \"getSATFlag ?istate = FALSE \\<longrightarrow> \\<not> satisfiable ?F0'\"\n  \"getSATFlag ?istate = TRUE  \\<longrightarrow> satisfiable F0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((InvariantConsistent (getM (initialize F0 initialState)) &&&\n       InvariantUniq (getM (initialize F0 initialState)) &&&\n       InvariantWatchesEl (getF (initialize F0 initialState))\n        (getWatch1 (initialize F0 initialState))\n        (getWatch2 (initialize F0 initialState))) &&&\n      InvariantWatchesDiffer (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState)) &&&\n      InvariantWatchCharacterization (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState))\n       (getM (initialize F0 initialState))) &&&\n     (InvariantWatchListsContainOnlyClausesFromF\n       (getWatchList (initialize F0 initialState))\n       (getF (initialize F0 initialState)) &&&\n      InvariantWatchListsUniq\n       (getWatchList (initialize F0 initialState))) &&&\n     InvariantWatchListsCharacterization\n      (getWatchList (initialize F0 initialState))\n      (getWatch1 (initialize F0 initialState))\n      (getWatch2 (initialize F0 initialState)) &&&\n     InvariantUniqQ (getQ (initialize F0 initialState))) &&&\n    (InvariantQCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getQ (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantConflictFlagCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState)))) &&&\n    (InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState))) &&&\n     InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (set (getQ (initialize F0 initialState)))) &&&\n    ((InvariantConflictClauseCharacterization\n       (getConflictFlag (initialize F0 initialState))\n       (getConflictClause (initialize F0 initialState))\n       (getF (initialize F0 initialState))\n       (getM (initialize F0 initialState)) &&&\n      InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)) &&&\n     InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0) &&&\n     InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0) &&&\n     getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n     InvariantEquivalentZL (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (filter (\\<lambda>c. \\<not> clauseTautology c) F0)) &&&\n    getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n    \\<not> satisfiable\n            (filter (\\<lambda>c. \\<not> clauseTautology c) F0) &&&\n    getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n    satisfiable F0", "using InvariantsAfterInitialization[of \"F0\"]"], ["proof (prove)\nusing this:\n  let state' = initialize F0 initialState\n  in InvariantConsistent (getM state') \\<and>\n     InvariantUniq (getM state') \\<and>\n     InvariantWatchListsContainOnlyClausesFromF (getWatchList state')\n      (getF state') \\<and>\n     InvariantWatchListsUniq (getWatchList state') \\<and>\n     InvariantWatchListsCharacterization (getWatchList state')\n      (getWatch1 state') (getWatch2 state') \\<and>\n     InvariantWatchesEl (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchesDiffer (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchCharacterization (getF state') (getWatch1 state')\n      (getWatch2 state') (getM state') \\<and>\n     InvariantConflictFlagCharacterization (getConflictFlag state')\n      (getF state') (getM state') \\<and>\n     InvariantConflictClauseCharacterization (getConflictFlag state')\n      (getConflictClause state') (getF state') (getM state') \\<and>\n     InvariantQCharacterization (getConflictFlag state') (getQ state')\n      (getF state') (getM state') \\<and>\n     InvariantNoDecisionsWhenConflict (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantNoDecisionsWhenUnit (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantGetReasonIsReason (getReason state') (getF state')\n      (getM state') (set (getQ state')) \\<and>\n     InvariantUniqQ (getQ state') \\<and>\n     InvariantVarsM (getM state') F0 {} \\<and>\n     InvariantVarsQ (getQ state') F0 {} \\<and>\n     InvariantVarsF (getF state') F0 {} \\<and>\n     (getConflictFlag state' \\<or> getQ state' = []) \\<and>\n     currentLevel (getM state') = 0\n\ngoal (1 subgoal):\n 1. (((InvariantConsistent (getM (initialize F0 initialState)) &&&\n       InvariantUniq (getM (initialize F0 initialState)) &&&\n       InvariantWatchesEl (getF (initialize F0 initialState))\n        (getWatch1 (initialize F0 initialState))\n        (getWatch2 (initialize F0 initialState))) &&&\n      InvariantWatchesDiffer (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState)) &&&\n      InvariantWatchCharacterization (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState))\n       (getM (initialize F0 initialState))) &&&\n     (InvariantWatchListsContainOnlyClausesFromF\n       (getWatchList (initialize F0 initialState))\n       (getF (initialize F0 initialState)) &&&\n      InvariantWatchListsUniq\n       (getWatchList (initialize F0 initialState))) &&&\n     InvariantWatchListsCharacterization\n      (getWatchList (initialize F0 initialState))\n      (getWatch1 (initialize F0 initialState))\n      (getWatch2 (initialize F0 initialState)) &&&\n     InvariantUniqQ (getQ (initialize F0 initialState))) &&&\n    (InvariantQCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getQ (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantConflictFlagCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState)))) &&&\n    (InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState))) &&&\n     InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (set (getQ (initialize F0 initialState)))) &&&\n    ((InvariantConflictClauseCharacterization\n       (getConflictFlag (initialize F0 initialState))\n       (getConflictClause (initialize F0 initialState))\n       (getF (initialize F0 initialState))\n       (getM (initialize F0 initialState)) &&&\n      InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)) &&&\n     InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0) &&&\n     InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0) &&&\n     getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n     InvariantEquivalentZL (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (filter (\\<lambda>c. \\<not> clauseTautology c) F0)) &&&\n    getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n    \\<not> satisfiable\n            (filter (\\<lambda>c. \\<not> clauseTautology c) F0) &&&\n    getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n    satisfiable F0", "using InvariantEquivalentZLAfterInitialization[of \"F0\"]"], ["proof (prove)\nusing this:\n  let state' = initialize F0 initialState\n  in InvariantConsistent (getM state') \\<and>\n     InvariantUniq (getM state') \\<and>\n     InvariantWatchListsContainOnlyClausesFromF (getWatchList state')\n      (getF state') \\<and>\n     InvariantWatchListsUniq (getWatchList state') \\<and>\n     InvariantWatchListsCharacterization (getWatchList state')\n      (getWatch1 state') (getWatch2 state') \\<and>\n     InvariantWatchesEl (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchesDiffer (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchCharacterization (getF state') (getWatch1 state')\n      (getWatch2 state') (getM state') \\<and>\n     InvariantConflictFlagCharacterization (getConflictFlag state')\n      (getF state') (getM state') \\<and>\n     InvariantConflictClauseCharacterization (getConflictFlag state')\n      (getConflictClause state') (getF state') (getM state') \\<and>\n     InvariantQCharacterization (getConflictFlag state') (getQ state')\n      (getF state') (getM state') \\<and>\n     InvariantNoDecisionsWhenConflict (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantNoDecisionsWhenUnit (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantGetReasonIsReason (getReason state') (getF state')\n      (getM state') (set (getQ state')) \\<and>\n     InvariantUniqQ (getQ state') \\<and>\n     InvariantVarsM (getM state') F0 {} \\<and>\n     InvariantVarsQ (getQ state') F0 {} \\<and>\n     InvariantVarsF (getF state') F0 {} \\<and>\n     (getConflictFlag state' \\<or> getQ state' = []) \\<and>\n     currentLevel (getM state') = 0\n  let state' = initialize F0 initialState;\n      F0' = filter (\\<lambda>c. \\<not> clauseTautology c) F0\n  in getSATFlag state' = UNDEF \\<and>\n     InvariantEquivalentZL (getF state') (getM state') F0' \\<or>\n     getSATFlag state' = FALSE \\<and> \\<not> satisfiable F0'\n\ngoal (1 subgoal):\n 1. (((InvariantConsistent (getM (initialize F0 initialState)) &&&\n       InvariantUniq (getM (initialize F0 initialState)) &&&\n       InvariantWatchesEl (getF (initialize F0 initialState))\n        (getWatch1 (initialize F0 initialState))\n        (getWatch2 (initialize F0 initialState))) &&&\n      InvariantWatchesDiffer (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState)) &&&\n      InvariantWatchCharacterization (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState))\n       (getM (initialize F0 initialState))) &&&\n     (InvariantWatchListsContainOnlyClausesFromF\n       (getWatchList (initialize F0 initialState))\n       (getF (initialize F0 initialState)) &&&\n      InvariantWatchListsUniq\n       (getWatchList (initialize F0 initialState))) &&&\n     InvariantWatchListsCharacterization\n      (getWatchList (initialize F0 initialState))\n      (getWatch1 (initialize F0 initialState))\n      (getWatch2 (initialize F0 initialState)) &&&\n     InvariantUniqQ (getQ (initialize F0 initialState))) &&&\n    (InvariantQCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getQ (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantConflictFlagCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState)))) &&&\n    (InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState))) &&&\n     InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (set (getQ (initialize F0 initialState)))) &&&\n    ((InvariantConflictClauseCharacterization\n       (getConflictFlag (initialize F0 initialState))\n       (getConflictClause (initialize F0 initialState))\n       (getF (initialize F0 initialState))\n       (getM (initialize F0 initialState)) &&&\n      InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)) &&&\n     InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0) &&&\n     InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0) &&&\n     getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n     InvariantEquivalentZL (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (filter (\\<lambda>c. \\<not> clauseTautology c) F0)) &&&\n    getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n    \\<not> satisfiable\n            (filter (\\<lambda>c. \\<not> clauseTautology c) F0) &&&\n    getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n    satisfiable F0", "unfolding InvariantVarsM_def"], ["proof (prove)\nusing this:\n  let state' = initialize F0 initialState\n  in InvariantConsistent (getM state') \\<and>\n     InvariantUniq (getM state') \\<and>\n     InvariantWatchListsContainOnlyClausesFromF (getWatchList state')\n      (getF state') \\<and>\n     InvariantWatchListsUniq (getWatchList state') \\<and>\n     InvariantWatchListsCharacterization (getWatchList state')\n      (getWatch1 state') (getWatch2 state') \\<and>\n     InvariantWatchesEl (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchesDiffer (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchCharacterization (getF state') (getWatch1 state')\n      (getWatch2 state') (getM state') \\<and>\n     InvariantConflictFlagCharacterization (getConflictFlag state')\n      (getF state') (getM state') \\<and>\n     InvariantConflictClauseCharacterization (getConflictFlag state')\n      (getConflictClause state') (getF state') (getM state') \\<and>\n     InvariantQCharacterization (getConflictFlag state') (getQ state')\n      (getF state') (getM state') \\<and>\n     InvariantNoDecisionsWhenConflict (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantNoDecisionsWhenUnit (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantGetReasonIsReason (getReason state') (getF state')\n      (getM state') (set (getQ state')) \\<and>\n     InvariantUniqQ (getQ state') \\<and>\n     vars (elements (getM state')) \\<subseteq> vars F0 \\<union> {} \\<and>\n     InvariantVarsQ (getQ state') F0 {} \\<and>\n     InvariantVarsF (getF state') F0 {} \\<and>\n     (getConflictFlag state' \\<or> getQ state' = []) \\<and>\n     currentLevel (getM state') = 0\n  let state' = initialize F0 initialState;\n      F0' = filter (\\<lambda>c. \\<not> clauseTautology c) F0\n  in getSATFlag state' = UNDEF \\<and>\n     InvariantEquivalentZL (getF state') (getM state') F0' \\<or>\n     getSATFlag state' = FALSE \\<and> \\<not> satisfiable F0'\n\ngoal (1 subgoal):\n 1. (((InvariantConsistent (getM (initialize F0 initialState)) &&&\n       InvariantUniq (getM (initialize F0 initialState)) &&&\n       InvariantWatchesEl (getF (initialize F0 initialState))\n        (getWatch1 (initialize F0 initialState))\n        (getWatch2 (initialize F0 initialState))) &&&\n      InvariantWatchesDiffer (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState)) &&&\n      InvariantWatchCharacterization (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState))\n       (getM (initialize F0 initialState))) &&&\n     (InvariantWatchListsContainOnlyClausesFromF\n       (getWatchList (initialize F0 initialState))\n       (getF (initialize F0 initialState)) &&&\n      InvariantWatchListsUniq\n       (getWatchList (initialize F0 initialState))) &&&\n     InvariantWatchListsCharacterization\n      (getWatchList (initialize F0 initialState))\n      (getWatch1 (initialize F0 initialState))\n      (getWatch2 (initialize F0 initialState)) &&&\n     InvariantUniqQ (getQ (initialize F0 initialState))) &&&\n    (InvariantQCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getQ (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantConflictFlagCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState)))) &&&\n    (InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState))) &&&\n     InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (set (getQ (initialize F0 initialState)))) &&&\n    ((InvariantConflictClauseCharacterization\n       (getConflictFlag (initialize F0 initialState))\n       (getConflictClause (initialize F0 initialState))\n       (getF (initialize F0 initialState))\n       (getM (initialize F0 initialState)) &&&\n      vars (elements (getM (initialize F0 initialState)))\n      \\<subseteq> vars F0 \\<union> vars F0) &&&\n     InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0) &&&\n     InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0) &&&\n     getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n     InvariantEquivalentZL (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (filter (\\<lambda>c. \\<not> clauseTautology c) F0)) &&&\n    getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n    \\<not> satisfiable\n            (filter (\\<lambda>c. \\<not> clauseTautology c) F0) &&&\n    getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n    satisfiable F0", "unfolding InvariantVarsF_def"], ["proof (prove)\nusing this:\n  let state' = initialize F0 initialState\n  in InvariantConsistent (getM state') \\<and>\n     InvariantUniq (getM state') \\<and>\n     InvariantWatchListsContainOnlyClausesFromF (getWatchList state')\n      (getF state') \\<and>\n     InvariantWatchListsUniq (getWatchList state') \\<and>\n     InvariantWatchListsCharacterization (getWatchList state')\n      (getWatch1 state') (getWatch2 state') \\<and>\n     InvariantWatchesEl (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchesDiffer (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchCharacterization (getF state') (getWatch1 state')\n      (getWatch2 state') (getM state') \\<and>\n     InvariantConflictFlagCharacterization (getConflictFlag state')\n      (getF state') (getM state') \\<and>\n     InvariantConflictClauseCharacterization (getConflictFlag state')\n      (getConflictClause state') (getF state') (getM state') \\<and>\n     InvariantQCharacterization (getConflictFlag state') (getQ state')\n      (getF state') (getM state') \\<and>\n     InvariantNoDecisionsWhenConflict (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantNoDecisionsWhenUnit (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantGetReasonIsReason (getReason state') (getF state')\n      (getM state') (set (getQ state')) \\<and>\n     InvariantUniqQ (getQ state') \\<and>\n     vars (elements (getM state')) \\<subseteq> vars F0 \\<union> {} \\<and>\n     InvariantVarsQ (getQ state') F0 {} \\<and>\n     vars (getF state') \\<subseteq> vars F0 \\<union> {} \\<and>\n     (getConflictFlag state' \\<or> getQ state' = []) \\<and>\n     currentLevel (getM state') = 0\n  let state' = initialize F0 initialState;\n      F0' = filter (\\<lambda>c. \\<not> clauseTautology c) F0\n  in getSATFlag state' = UNDEF \\<and>\n     InvariantEquivalentZL (getF state') (getM state') F0' \\<or>\n     getSATFlag state' = FALSE \\<and> \\<not> satisfiable F0'\n\ngoal (1 subgoal):\n 1. (((InvariantConsistent (getM (initialize F0 initialState)) &&&\n       InvariantUniq (getM (initialize F0 initialState)) &&&\n       InvariantWatchesEl (getF (initialize F0 initialState))\n        (getWatch1 (initialize F0 initialState))\n        (getWatch2 (initialize F0 initialState))) &&&\n      InvariantWatchesDiffer (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState)) &&&\n      InvariantWatchCharacterization (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState))\n       (getM (initialize F0 initialState))) &&&\n     (InvariantWatchListsContainOnlyClausesFromF\n       (getWatchList (initialize F0 initialState))\n       (getF (initialize F0 initialState)) &&&\n      InvariantWatchListsUniq\n       (getWatchList (initialize F0 initialState))) &&&\n     InvariantWatchListsCharacterization\n      (getWatchList (initialize F0 initialState))\n      (getWatch1 (initialize F0 initialState))\n      (getWatch2 (initialize F0 initialState)) &&&\n     InvariantUniqQ (getQ (initialize F0 initialState))) &&&\n    (InvariantQCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getQ (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantConflictFlagCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState)))) &&&\n    (InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState))) &&&\n     InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (set (getQ (initialize F0 initialState)))) &&&\n    ((InvariantConflictClauseCharacterization\n       (getConflictFlag (initialize F0 initialState))\n       (getConflictClause (initialize F0 initialState))\n       (getF (initialize F0 initialState))\n       (getM (initialize F0 initialState)) &&&\n      vars (elements (getM (initialize F0 initialState)))\n      \\<subseteq> vars F0 \\<union> vars F0) &&&\n     InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0) &&&\n     vars (getF (initialize F0 initialState))\n     \\<subseteq> vars F0 \\<union> vars F0 &&&\n     getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n     InvariantEquivalentZL (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (filter (\\<lambda>c. \\<not> clauseTautology c) F0)) &&&\n    getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n    \\<not> satisfiable\n            (filter (\\<lambda>c. \\<not> clauseTautology c) F0) &&&\n    getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n    satisfiable F0", "unfolding InvariantVarsQ_def"], ["proof (prove)\nusing this:\n  let state' = initialize F0 initialState\n  in InvariantConsistent (getM state') \\<and>\n     InvariantUniq (getM state') \\<and>\n     InvariantWatchListsContainOnlyClausesFromF (getWatchList state')\n      (getF state') \\<and>\n     InvariantWatchListsUniq (getWatchList state') \\<and>\n     InvariantWatchListsCharacterization (getWatchList state')\n      (getWatch1 state') (getWatch2 state') \\<and>\n     InvariantWatchesEl (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchesDiffer (getF state') (getWatch1 state')\n      (getWatch2 state') \\<and>\n     InvariantWatchCharacterization (getF state') (getWatch1 state')\n      (getWatch2 state') (getM state') \\<and>\n     InvariantConflictFlagCharacterization (getConflictFlag state')\n      (getF state') (getM state') \\<and>\n     InvariantConflictClauseCharacterization (getConflictFlag state')\n      (getConflictClause state') (getF state') (getM state') \\<and>\n     InvariantQCharacterization (getConflictFlag state') (getQ state')\n      (getF state') (getM state') \\<and>\n     InvariantNoDecisionsWhenConflict (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantNoDecisionsWhenUnit (getF state') (getM state')\n      (currentLevel (getM state')) \\<and>\n     InvariantGetReasonIsReason (getReason state') (getF state')\n      (getM state') (set (getQ state')) \\<and>\n     InvariantUniqQ (getQ state') \\<and>\n     vars (elements (getM state')) \\<subseteq> vars F0 \\<union> {} \\<and>\n     vars (getQ state') \\<subseteq> vars F0 \\<union> {} \\<and>\n     vars (getF state') \\<subseteq> vars F0 \\<union> {} \\<and>\n     (getConflictFlag state' \\<or> getQ state' = []) \\<and>\n     currentLevel (getM state') = 0\n  let state' = initialize F0 initialState;\n      F0' = filter (\\<lambda>c. \\<not> clauseTautology c) F0\n  in getSATFlag state' = UNDEF \\<and>\n     InvariantEquivalentZL (getF state') (getM state') F0' \\<or>\n     getSATFlag state' = FALSE \\<and> \\<not> satisfiable F0'\n\ngoal (1 subgoal):\n 1. (((InvariantConsistent (getM (initialize F0 initialState)) &&&\n       InvariantUniq (getM (initialize F0 initialState)) &&&\n       InvariantWatchesEl (getF (initialize F0 initialState))\n        (getWatch1 (initialize F0 initialState))\n        (getWatch2 (initialize F0 initialState))) &&&\n      InvariantWatchesDiffer (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState)) &&&\n      InvariantWatchCharacterization (getF (initialize F0 initialState))\n       (getWatch1 (initialize F0 initialState))\n       (getWatch2 (initialize F0 initialState))\n       (getM (initialize F0 initialState))) &&&\n     (InvariantWatchListsContainOnlyClausesFromF\n       (getWatchList (initialize F0 initialState))\n       (getF (initialize F0 initialState)) &&&\n      InvariantWatchListsUniq\n       (getWatchList (initialize F0 initialState))) &&&\n     InvariantWatchListsCharacterization\n      (getWatchList (initialize F0 initialState))\n      (getWatch1 (initialize F0 initialState))\n      (getWatch2 (initialize F0 initialState)) &&&\n     InvariantUniqQ (getQ (initialize F0 initialState))) &&&\n    (InvariantQCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getQ (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantConflictFlagCharacterization\n      (getConflictFlag (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState)) &&&\n     InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState)))) &&&\n    (InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (currentLevel (getM (initialize F0 initialState))) &&&\n     InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n      (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (set (getQ (initialize F0 initialState)))) &&&\n    ((InvariantConflictClauseCharacterization\n       (getConflictFlag (initialize F0 initialState))\n       (getConflictClause (initialize F0 initialState))\n       (getF (initialize F0 initialState))\n       (getM (initialize F0 initialState)) &&&\n      vars (elements (getM (initialize F0 initialState)))\n      \\<subseteq> vars F0 \\<union> vars F0) &&&\n     vars (getQ (initialize F0 initialState))\n     \\<subseteq> vars F0 \\<union> vars F0 &&&\n     vars (getF (initialize F0 initialState))\n     \\<subseteq> vars F0 \\<union> vars F0 &&&\n     getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n     InvariantEquivalentZL (getF (initialize F0 initialState))\n      (getM (initialize F0 initialState))\n      (filter (\\<lambda>c. \\<not> clauseTautology c) F0)) &&&\n    getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n    \\<not> satisfiable\n            (filter (\\<lambda>c. \\<not> clauseTautology c) F0) &&&\n    getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n    satisfiable F0", "by (auto simp add: Let_def)"], ["proof (state)\nthis:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "moreover"], ["proof (state)\nthis:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "hence \"solve_loop_dom ?istate (vars F0)\""], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n\ngoal (1 subgoal):\n 1. solve_loop_dom (initialize F0 initialState) (vars F0)", "using SolveLoopTermination[of \"?istate\" \"?F0'\" \"vars F0\" \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  \\<lbrakk>InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> solve_loop_dom (initialize F0 initialState) (vars F0)\n\ngoal (1 subgoal):\n 1. solve_loop_dom (initialize F0 initialState) (vars F0)", "using finiteVarsFormula[of \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  \\<lbrakk>InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n\ngoal (1 subgoal):\n 1. solve_loop_dom (initialize F0 initialState) (vars F0)", "using varsSubsetFormula[of \"?F0'\" \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  \\<lbrakk>InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n  \\<forall>c.\n     c el filter (\\<lambda>c. \\<not> clauseTautology c) F0 \\<longrightarrow>\n     c el F0 \\<Longrightarrow>\n  vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  \\<subseteq> vars F0\n\ngoal (1 subgoal):\n 1. solve_loop_dom (initialize F0 initialState) (vars F0)", "by auto"], ["proof (state)\nthis:\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "ultimately"], ["proof (chain)\npicking this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)", "show ?thesis"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "using finiteVarsFormula[of \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "using SATFlagAfterSolveLoop[of \"?istate\" \"vars F0\" \"?F0'\" \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n  \\<lbrakk>solve_loop_dom (initialize F0 initialState) (vars F0);\n   InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n   \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n   satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> let state' =\n                          solve_loop (initialize F0 initialState) (vars F0)\n                    in getSATFlag state' = FALSE \\<and>\n                       \\<not> satisfiable\n                               (filter\n                                 (\\<lambda>c. \\<not> clauseTautology c)\n                                 F0) \\<or>\n                       getSATFlag state' = TRUE \\<and>\n                       satisfiable\n                        (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "using satisfiableFilterTautologies[of \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n  \\<lbrakk>solve_loop_dom (initialize F0 initialState) (vars F0);\n   InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n   \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n   satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> let state' =\n                          solve_loop (initialize F0 initialState) (vars F0)\n                    in getSATFlag state' = FALSE \\<and>\n                       \\<not> satisfiable\n                               (filter\n                                 (\\<lambda>c. \\<not> clauseTautology c)\n                                 F0) \\<or>\n                       getSATFlag state' = TRUE \\<and>\n                       satisfiable\n                        (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  satisfiable F0 =\n  satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n\ngoal (1 subgoal):\n 1. solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n    solve F0 = FALSE \\<and> \\<not> satisfiable F0", "unfolding solve_def"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n  \\<lbrakk>solve_loop_dom (initialize F0 initialState) (vars F0);\n   InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n   \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n   satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> let state' =\n                          solve_loop (initialize F0 initialState) (vars F0)\n                    in getSATFlag state' = FALSE \\<and>\n                       \\<not> satisfiable\n                               (filter\n                                 (\\<lambda>c. \\<not> clauseTautology c)\n                                 F0) \\<or>\n                       getSATFlag state' = TRUE \\<and>\n                       satisfiable\n                        (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  satisfiable F0 =\n  satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n\ngoal (1 subgoal):\n 1. getSATFlag (solve_loop (initialize F0 initialState) (vars F0)) =\n    TRUE \\<and>\n    satisfiable F0 \\<or>\n    getSATFlag (solve_loop (initialize F0 initialState) (vars F0)) =\n    FALSE \\<and>\n    \\<not> satisfiable F0", "using varsSubsetFormula[of \"?F0'\" \"F0\"]"], ["proof (prove)\nusing this:\n  InvariantConsistent (getM (initialize F0 initialState))\n  InvariantUniq (getM (initialize F0 initialState))\n  InvariantWatchesEl (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchesDiffer (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantWatchCharacterization (getF (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantWatchListsContainOnlyClausesFromF\n   (getWatchList (initialize F0 initialState))\n   (getF (initialize F0 initialState))\n  InvariantWatchListsUniq (getWatchList (initialize F0 initialState))\n  InvariantWatchListsCharacterization\n   (getWatchList (initialize F0 initialState))\n   (getWatch1 (initialize F0 initialState))\n   (getWatch2 (initialize F0 initialState))\n  InvariantUniqQ (getQ (initialize F0 initialState))\n  InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n   (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n  InvariantConflictFlagCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (currentLevel (getM (initialize F0 initialState)))\n  InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n   (set (getQ (initialize F0 initialState)))\n  InvariantConflictClauseCharacterization\n   (getConflictFlag (initialize F0 initialState))\n   (getConflictClause (initialize F0 initialState))\n   (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n  InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\n  InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0)\n  getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n  InvariantEquivalentZL (getF (initialize F0 initialState))\n   (getM (initialize F0 initialState))\n   (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n  \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n  satisfiable F0\n  solve_loop_dom (initialize F0 initialState) (vars F0)\n  finite (vars F0)\n  \\<lbrakk>solve_loop_dom (initialize F0 initialState) (vars F0);\n   InvariantConsistent (getM (initialize F0 initialState));\n   InvariantUniq (getM (initialize F0 initialState));\n   InvariantWatchesEl (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchesDiffer (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantWatchCharacterization (getF (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantWatchListsContainOnlyClausesFromF\n    (getWatchList (initialize F0 initialState))\n    (getF (initialize F0 initialState));\n   InvariantWatchListsUniq (getWatchList (initialize F0 initialState));\n   InvariantWatchListsCharacterization\n    (getWatchList (initialize F0 initialState))\n    (getWatch1 (initialize F0 initialState))\n    (getWatch2 (initialize F0 initialState));\n   InvariantUniqQ (getQ (initialize F0 initialState));\n   InvariantQCharacterization (getConflictFlag (initialize F0 initialState))\n    (getQ (initialize F0 initialState)) (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState));\n   InvariantConflictFlagCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   InvariantNoDecisionsWhenConflict (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantNoDecisionsWhenUnit (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (currentLevel (getM (initialize F0 initialState)));\n   InvariantGetReasonIsReason (getReason (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState))\n    (set (getQ (initialize F0 initialState)));\n   getSATFlag (initialize F0 initialState) = UNDEF \\<longrightarrow>\n   InvariantEquivalentZL (getF (initialize F0 initialState))\n    (getM (initialize F0 initialState))\n    (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   InvariantConflictClauseCharacterization\n    (getConflictFlag (initialize F0 initialState))\n    (getConflictClause (initialize F0 initialState))\n    (getF (initialize F0 initialState)) (getM (initialize F0 initialState));\n   getSATFlag (initialize F0 initialState) = FALSE \\<longrightarrow>\n   \\<not> satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   getSATFlag (initialize F0 initialState) = TRUE \\<longrightarrow>\n   satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0);\n   finite (vars F0);\n   vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n   \\<subseteq> vars F0;\n   vars F0 \\<subseteq> vars F0;\n   InvariantVarsM (getM (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsF (getF (initialize F0 initialState)) F0 (vars F0);\n   InvariantVarsQ (getQ (initialize F0 initialState)) F0 (vars F0)\\<rbrakk>\n  \\<Longrightarrow> let state' =\n                          solve_loop (initialize F0 initialState) (vars F0)\n                    in getSATFlag state' = FALSE \\<and>\n                       \\<not> satisfiable\n                               (filter\n                                 (\\<lambda>c. \\<not> clauseTautology c)\n                                 F0) \\<or>\n                       getSATFlag state' = TRUE \\<and>\n                       satisfiable\n                        (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  satisfiable F0 =\n  satisfiable (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  \\<forall>c.\n     c el filter (\\<lambda>c. \\<not> clauseTautology c) F0 \\<longrightarrow>\n     c el F0 \\<Longrightarrow>\n  vars (filter (\\<lambda>c. \\<not> clauseTautology c) F0)\n  \\<subseteq> vars F0\n\ngoal (1 subgoal):\n 1. getSATFlag (solve_loop (initialize F0 initialState) (vars F0)) =\n    TRUE \\<and>\n    satisfiable F0 \\<or>\n    getSATFlag (solve_loop (initialize F0 initialState) (vars F0)) =\n    FALSE \\<and>\n    \\<not> satisfiable F0", "by (auto simp add: Let_def)"], ["proof (state)\nthis:\n  solve F0 = TRUE \\<and> satisfiable F0 \\<or>\n  solve F0 = FALSE \\<and> \\<not> satisfiable F0\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}