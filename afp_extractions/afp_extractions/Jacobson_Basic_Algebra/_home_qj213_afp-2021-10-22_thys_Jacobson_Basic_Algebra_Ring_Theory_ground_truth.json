{"file_name": "/home/qj213/afp-2021-10-22/thys/Jacobson_Basic_Algebra/Ring_Theory.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jacobson_Basic_Algebra", "problem_names": ["lemma right_zero [simp]:\n  assumes [simp]: \"a \\<in> R\" shows \"a \\<cdot> \\<zero> = \\<zero>\"", "lemma left_zero [simp]:\n  assumes [simp]: \"a \\<in> R\" shows \"\\<zero> \\<cdot> a = \\<zero>\"", "lemma left_minus:\n  assumes [simp]: \"a \\<in> R\" \"b \\<in> R\" shows \"(- a) \\<cdot> b = - a \\<cdot> b\"", "lemma right_minus:\n  assumes [simp]: \"a \\<in> R\" \"b \\<in> R\" shows \"a \\<cdot> (- b) = - a \\<cdot> b\"", "lemma Ring_CongruenceI: \"\\<lbrakk> a - b \\<in> I; a \\<in> R; b \\<in> R \\<rbrakk> \\<Longrightarrow> (a, b) \\<in> Ring_Congruence\"", "lemma Ring_CongruenceD: \"(a, b) \\<in> Ring_Congruence \\<Longrightarrow> a - b \\<in> I\"", "theorem multiplicative_congruence_implies_ideal:\n  assumes \"monoid_congruence R (\\<cdot>) \\<one> Ring_Congruence\"\n  shows \"ideal I R (+) (\\<cdot>) \\<zero> \\<one>\"", "theorem multiplicative_congruence [intro]:\n  assumes a: \"(a, a') \\<in> Ring_Congruence\" and b: \"(b, b') \\<in> Ring_Congruence\"\n  shows \"(a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence\"", "lemmas Left_Coset = additive.Left_CosetE", "lemmas quotient_addition = additive.factor_composition", "theorem quotient_multiplication [simp]:\n  \"\\<lbrakk> a \\<in> R; b \\<in> R \\<rbrakk> \\<Longrightarrow> (a +| I) [\\<cdot>] (b +| I) = a \\<cdot> b +| I\"", "lemmas quotient_zero = additive.factor_unit", "lemmas quotient_negative = additive.factor_inverse", "theorem ring_monomorphism_iff_kernel_unit:\n  \"ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>') \\<zero>' \\<one>' \\<longleftrightarrow> additive.Ker = {\\<zero>}\" (is \"?monom \\<longleftrightarrow> ?ker\")", "lemma inverse_ring_isomorphism:\n  \"ring_isomorphism (restrict (inv_into R \\<eta>) R') R' (+') (\\<cdot>') \\<zero>' \\<one>' R (+) (\\<cdot>) \\<zero> \\<one>\"", "lemma isomorphic_as_rings_symmetric:\n  \"(R, addition, multiplication, zero, unit) \\<cong>\\<^sub>R (R', addition', multiplication', zero', unit') \\<Longrightarrow>\n   (R', addition', multiplication', zero', unit') \\<cong>\\<^sub>R (R, addition, multiplication, zero, unit)\"", "theorem image_is_isomorphic_to_quotient_ring:\n  \"\\<exists>K add mult zero one. ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and> (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R (R // K, add, mult, zero, one)\""], "translations": [["", "lemma right_zero [simp]:\n  assumes [simp]: \"a \\<in> R\" shows \"a \\<cdot> \\<zero> = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "have \"a \\<cdot> \\<zero> = a \\<cdot> (\\<zero> + \\<zero>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = a \\<cdot> (\\<zero> + \\<zero>)", "by simp"], ["proof (state)\nthis:\n  a \\<cdot> \\<zero> = a \\<cdot> (\\<zero> + \\<zero>)\n\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "also"], ["proof (state)\nthis:\n  a \\<cdot> \\<zero> = a \\<cdot> (\\<zero> + \\<zero>)\n\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "have \"\\<dots> = a \\<cdot> \\<zero> + a \\<cdot> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> (\\<zero> + \\<zero>) = a \\<cdot> \\<zero> + a \\<cdot> \\<zero>", "by (simp add: distributive del: additive.left_unit additive.right_unit)"], ["proof (state)\nthis:\n  a \\<cdot> (\\<zero> + \\<zero>) = a \\<cdot> \\<zero> + a \\<cdot> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "finally"], ["proof (chain)\npicking this:\n  a \\<cdot> \\<zero> = a \\<cdot> \\<zero> + a \\<cdot> \\<zero>", "have \"a \\<cdot> \\<zero> - a \\<cdot> \\<zero> = a \\<cdot> \\<zero> + a \\<cdot> \\<zero> - a \\<cdot> \\<zero>\""], ["proof (prove)\nusing this:\n  a \\<cdot> \\<zero> = a \\<cdot> \\<zero> + a \\<cdot> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> - a \\<cdot> \\<zero> =\n    a \\<cdot> \\<zero> + a \\<cdot> \\<zero> - a \\<cdot> \\<zero>", "by simp"], ["proof (state)\nthis:\n  a \\<cdot> \\<zero> - a \\<cdot> \\<zero> =\n  a \\<cdot> \\<zero> + a \\<cdot> \\<zero> - a \\<cdot> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "then"], ["proof (chain)\npicking this:\n  a \\<cdot> \\<zero> - a \\<cdot> \\<zero> =\n  a \\<cdot> \\<zero> + a \\<cdot> \\<zero> - a \\<cdot> \\<zero>", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<cdot> \\<zero> - a \\<cdot> \\<zero> =\n  a \\<cdot> \\<zero> + a \\<cdot> \\<zero> - a \\<cdot> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = \\<zero>", "by (simp add: additive.associative del: additive.invertible_left_cancel)"], ["proof (state)\nthis:\n  a \\<cdot> \\<zero> = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>p 88, l 29\\<close>"], ["", "lemma left_zero [simp]:\n  assumes [simp]: \"a \\<in> R\" shows \"\\<zero> \\<cdot> a = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "have \"\\<zero> \\<cdot> a = (\\<zero> + \\<zero>) \\<cdot> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = (\\<zero> + \\<zero>) \\<cdot> a", "by simp"], ["proof (state)\nthis:\n  \\<zero> \\<cdot> a = (\\<zero> + \\<zero>) \\<cdot> a\n\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "also"], ["proof (state)\nthis:\n  \\<zero> \\<cdot> a = (\\<zero> + \\<zero>) \\<cdot> a\n\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "have \"\\<dots> = \\<zero> \\<cdot> a + \\<zero> \\<cdot> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<zero> + \\<zero>) \\<cdot> a = \\<zero> \\<cdot> a + \\<zero> \\<cdot> a", "by (simp add: distributive del: additive.left_unit additive.right_unit)"], ["proof (state)\nthis:\n  (\\<zero> + \\<zero>) \\<cdot> a = \\<zero> \\<cdot> a + \\<zero> \\<cdot> a\n\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "finally"], ["proof (chain)\npicking this:\n  \\<zero> \\<cdot> a = \\<zero> \\<cdot> a + \\<zero> \\<cdot> a", "have \"\\<zero> \\<cdot> a - \\<zero> \\<cdot> a = \\<zero> \\<cdot> a + \\<zero> \\<cdot> a - \\<zero> \\<cdot> a\""], ["proof (prove)\nusing this:\n  \\<zero> \\<cdot> a = \\<zero> \\<cdot> a + \\<zero> \\<cdot> a\n\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a - \\<zero> \\<cdot> a =\n    \\<zero> \\<cdot> a + \\<zero> \\<cdot> a - \\<zero> \\<cdot> a", "by simp"], ["proof (state)\nthis:\n  \\<zero> \\<cdot> a - \\<zero> \\<cdot> a =\n  \\<zero> \\<cdot> a + \\<zero> \\<cdot> a - \\<zero> \\<cdot> a\n\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "then"], ["proof (chain)\npicking this:\n  \\<zero> \\<cdot> a - \\<zero> \\<cdot> a =\n  \\<zero> \\<cdot> a + \\<zero> \\<cdot> a - \\<zero> \\<cdot> a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<zero> \\<cdot> a - \\<zero> \\<cdot> a =\n  \\<zero> \\<cdot> a + \\<zero> \\<cdot> a - \\<zero> \\<cdot> a\n\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> a = \\<zero>", "by (simp add: additive.associative del: additive.invertible_left_cancel)"], ["proof (state)\nthis:\n  \\<zero> \\<cdot> a = \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>p 88, ll 29--30; p 89, ll 1--2\\<close>"], ["", "lemma left_minus:\n  assumes [simp]: \"a \\<in> R\" \"b \\<in> R\" shows \"(- a) \\<cdot> b = - a \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "have \"\\<zero> = \\<zero> \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zero> = \\<zero> \\<cdot> b", "by simp"], ["proof (state)\nthis:\n  \\<zero> = \\<zero> \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "also"], ["proof (state)\nthis:\n  \\<zero> = \\<zero> \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "have \"\\<dots> = (a - a) \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zero> \\<cdot> b = (a - a) \\<cdot> b", "by simp"], ["proof (state)\nthis:\n  \\<zero> \\<cdot> b = (a - a) \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "also"], ["proof (state)\nthis:\n  \\<zero> \\<cdot> b = (a - a) \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "have \"\\<dots> = a \\<cdot> b + (- a) \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - a) \\<cdot> b = a \\<cdot> b + (- a) \\<cdot> b", "by (simp add: distributive del: additive.invertible_right_inverse)"], ["proof (state)\nthis:\n  (a - a) \\<cdot> b = a \\<cdot> b + (- a) \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "finally"], ["proof (chain)\npicking this:\n  \\<zero> = a \\<cdot> b + (- a) \\<cdot> b", "have \"- a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + (- a) \\<cdot> b\""], ["proof (prove)\nusing this:\n  \\<zero> = a \\<cdot> b + (- a) \\<cdot> b\n\ngoal (1 subgoal):\n 1. - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + (- a) \\<cdot> b", "by (simp add: additive.associative del: additive.invertible_left_inverse)"], ["proof (state)\nthis:\n  - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + (- a) \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "then"], ["proof (chain)\npicking this:\n  - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + (- a) \\<cdot> b", "show ?thesis"], ["proof (prove)\nusing this:\n  - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + (- a) \\<cdot> b\n\ngoal (1 subgoal):\n 1. (- a) \\<cdot> b = - a \\<cdot> b", "by simp"], ["proof (state)\nthis:\n  (- a) \\<cdot> b = - a \\<cdot> b\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>p 89, l 3\\<close>"], ["", "lemma right_minus:\n  assumes [simp]: \"a \\<in> R\" \"b \\<in> R\" shows \"a \\<cdot> (- b) = - a \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "have \"\\<zero> = a \\<cdot> \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zero> = a \\<cdot> \\<zero>", "by simp"], ["proof (state)\nthis:\n  \\<zero> = a \\<cdot> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "also"], ["proof (state)\nthis:\n  \\<zero> = a \\<cdot> \\<zero>\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "have \"\\<dots> = a \\<cdot> (b - b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> \\<zero> = a \\<cdot> (b - b)", "by simp"], ["proof (state)\nthis:\n  a \\<cdot> \\<zero> = a \\<cdot> (b - b)\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "also"], ["proof (state)\nthis:\n  a \\<cdot> \\<zero> = a \\<cdot> (b - b)\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "have \"\\<dots> = a \\<cdot> b + a \\<cdot> (- b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> (b - b) = a \\<cdot> b + a \\<cdot> (- b)", "by (simp add: distributive del: additive.invertible_right_inverse)"], ["proof (state)\nthis:\n  a \\<cdot> (b - b) = a \\<cdot> b + a \\<cdot> (- b)\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "finally"], ["proof (chain)\npicking this:\n  \\<zero> = a \\<cdot> b + a \\<cdot> (- b)", "have \"- a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + a \\<cdot> (- b)\""], ["proof (prove)\nusing this:\n  \\<zero> = a \\<cdot> b + a \\<cdot> (- b)\n\ngoal (1 subgoal):\n 1. - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + a \\<cdot> (- b)", "by (simp add: additive.associative del: additive.invertible_left_inverse)"], ["proof (state)\nthis:\n  - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + a \\<cdot> (- b)\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "then"], ["proof (chain)\npicking this:\n  - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + a \\<cdot> (- b)", "show ?thesis"], ["proof (prove)\nusing this:\n  - a \\<cdot> b + \\<zero> = - a \\<cdot> b + a \\<cdot> b + a \\<cdot> (- b)\n\ngoal (1 subgoal):\n 1. a \\<cdot> (- b) = - a \\<cdot> b", "by simp"], ["proof (state)\nthis:\n  a \\<cdot> (- b) = - a \\<cdot> b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ring *)"], ["", "subsection \\<open>Ideals, Quotient Rings\\<close>"], ["", "text \\<open>p 101, ll 2--5\\<close>"], ["", "locale ring_congruence = ring +\n  additive: group_congruence R \"(+)\" \\<zero> E +\n  multiplicative: monoid_congruence R \"(\\<cdot>)\" \\<one> E\n  for E\nbegin"], ["", "text \\<open>p 101, ll 2--5\\<close>"], ["", "notation additive.quotient_composition (infixl \"[+]\" 65)"], ["", "notation additive.quotient.inverse (\"[-] _\" [66] 65)"], ["", "notation multiplicative.quotient_composition (infixl \"[\\<cdot>]\" 70)"], ["", "text \\<open>p 101, ll 5--11\\<close>"], ["", "sublocale quotient: ring \"R / E\" \"([+])\" \"([\\<cdot>])\" \"additive.Class \\<zero>\" \"additive.Class \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring additive.Partition ([+]) ([\\<cdot>]) (additive.Class \\<zero>)\n     (additive.Class \\<one>)", "by unfold_locales\n    (auto simp: additive.Class_commutes_with_composition additive.associative additive.commutative\n     multiplicative.Class_commutes_with_composition distributive elim!: additive.quotient_ClassE)"], ["", "end"], ["", "(* ring_congruence *)"], ["", "text \\<open>p 101, ll 12--13\\<close>"], ["", "locale subgroup_of_additive_group_of_ring =\n  additive: subgroup I R \"(+)\" \\<zero> + ring R \"(+)\" \"(\\<cdot>)\" \\<zero> \\<one>\n  for I and R and addition (infixl \"+\" 65) and multiplication (infixl \"\\<cdot>\" 70) and zero (\"\\<zero>\") and unit (\"\\<one>\")\nbegin"], ["", "text \\<open>p 101, ll 13--14\\<close>"], ["", "definition \"Ring_Congruence = {(a, b). a \\<in> R \\<and> b \\<in> R \\<and> a - b \\<in> I}\""], ["", "text \\<open>p 101, ll 13--14\\<close>"], ["", "lemma Ring_CongruenceI: \"\\<lbrakk> a - b \\<in> I; a \\<in> R; b \\<in> R \\<rbrakk> \\<Longrightarrow> (a, b) \\<in> Ring_Congruence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a - b \\<in> I; a \\<in> R; b \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (a, b) \\<in> Ring_Congruence", "using Ring_Congruence_def"], ["proof (prove)\nusing this:\n  Ring_Congruence =\n  {(a, b). a \\<in> R \\<and> b \\<in> R \\<and> a - b \\<in> I}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a - b \\<in> I; a \\<in> R; b \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (a, b) \\<in> Ring_Congruence", "by blast"], ["", "text \\<open>p 101, ll 13--14\\<close>"], ["", "lemma Ring_CongruenceD: \"(a, b) \\<in> Ring_Congruence \\<Longrightarrow> a - b \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> Ring_Congruence \\<Longrightarrow> a - b \\<in> I", "using Ring_Congruence_def"], ["proof (prove)\nusing this:\n  Ring_Congruence =\n  {(a, b). a \\<in> R \\<and> b \\<in> R \\<and> a - b \\<in> I}\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> Ring_Congruence \\<Longrightarrow> a - b \\<in> I", "by blast"], ["", "text \\<open>\n  Jacobson's definition of ring congruence deviates from that of group congruence; this complicates\n  the proof.\n\\<close>"], ["", "text \\<open>p 101, ll 12--14\\<close>"], ["", "sublocale additive: subgroup_of_abelian_group I R \"(+)\" \\<zero>  (* implies normal_subgroup *)\n  rewrites additive_congruence: \"additive.Congruence = Ring_Congruence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup_of_abelian_group I R (+) \\<zero> &&&\n    normal_subgroup.Congruence I R (+) \\<zero> = Ring_Congruence", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. subgroup_of_abelian_group I R (+) \\<zero>\n 2. normal_subgroup.Congruence I R (+) \\<zero> = Ring_Congruence", "show \"subgroup_of_abelian_group I R (+) \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup_of_abelian_group I R (+) \\<zero>", "using additive.commutative additive.invertible_right_inverse2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> R; ?y \\<in> R\\<rbrakk>\n  \\<Longrightarrow> ?x + ?y = ?y + ?x\n  \\<lbrakk>additive.invertible ?u; ?u \\<in> R; ?v \\<in> R\\<rbrakk>\n  \\<Longrightarrow> ?u + (- ?u + ?v) = ?v\n\ngoal (1 subgoal):\n 1. subgroup_of_abelian_group I R (+) \\<zero>", "by unfold_locales auto"], ["proof (state)\nthis:\n  subgroup_of_abelian_group I R (+) \\<zero>\n\ngoal (1 subgoal):\n 1. normal_subgroup.Congruence I R (+) \\<zero> = Ring_Congruence", "then"], ["proof (chain)\npicking this:\n  subgroup_of_abelian_group I R (+) \\<zero>", "interpret additive: subgroup_of_abelian_group I R \"(+)\" \\<zero>"], ["proof (prove)\nusing this:\n  subgroup_of_abelian_group I R (+) \\<zero>\n\ngoal (1 subgoal):\n 1. subgroup_of_abelian_group I R (+) \\<zero>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "assume [simp]: \"a \\<in> R\" \"b \\<in> R\""], ["proof (state)\nthis:\n  a \\<in> R\n  b \\<in> R\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "have \"a - b \\<in> I \\<longleftrightarrow> - (a - b) \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - b \\<in> I) = (- (a - b) \\<in> I)", "by auto"], ["proof (state)\nthis:\n  (a - b \\<in> I) = (- (a - b) \\<in> I)\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "also"], ["proof (state)\nthis:\n  (a - b \\<in> I) = (- (a - b) \\<in> I)\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "have \"\\<dots> \\<longleftrightarrow> - a + b \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (a - b) \\<in> I) = (- a + b \\<in> I)", "by (simp add: additive.commutative additive.inverse_composition_commute)"], ["proof (state)\nthis:\n  (- (a - b) \\<in> I) = (- a + b \\<in> I)\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "finally"], ["proof (chain)\npicking this:\n  (a - b \\<in> I) = (- a + b \\<in> I)", "have \"a - b \\<in> I \\<longleftrightarrow> - a + b \\<in> I\""], ["proof (prove)\nusing this:\n  (a - b \\<in> I) = (- a + b \\<in> I)\n\ngoal (1 subgoal):\n 1. (a - b \\<in> I) = (- a + b \\<in> I)", "."], ["proof (state)\nthis:\n  (a - b \\<in> I) = (- a + b \\<in> I)\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 \\<in> R; ?b2 \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?a2 - ?b2 \\<in> I) = (- ?a2 + ?b2 \\<in> I)\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a2 \\<in> R; ?b2 \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?a2 - ?b2 \\<in> I) = (- ?a2 + ?b2 \\<in> I)", "show \"additive.Congruence = Ring_Congruence\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a2 \\<in> R; ?b2 \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?a2 - ?b2 \\<in> I) = (- ?a2 + ?b2 \\<in> I)\n\ngoal (1 subgoal):\n 1. additive.Congruence = Ring_Congruence", "unfolding additive.Congruence_def Ring_Congruence_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a2 \\<in> R; ?b2 \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?a2 - ?b2 \\<in> I) = (- ?a2 + ?b2 \\<in> I)\n\ngoal (1 subgoal):\n 1. {(a, b). a \\<in> R \\<and> b \\<in> R \\<and> - a + b \\<in> I} =\n    {(a, b). a \\<in> R \\<and> b \\<in> R \\<and> a - b \\<in> I}", "by auto"], ["proof (state)\nthis:\n  additive.Congruence = Ring_Congruence\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>p 101, l 14\\<close>"], ["", "notation additive.Left_Coset (infixl \"+|\" 65)"], ["", "end"], ["", "(* subgroup_of_additive_group_of_ring *)"], ["", "text \\<open>Def 2.2\\<close>"], ["", "text \\<open>p 101, ll 21--22\\<close>"], ["", "locale ideal = subgroup_of_additive_group_of_ring +\n  assumes ideal: \"\\<lbrakk> a \\<in> R; b \\<in> I \\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<in> I\" \"\\<lbrakk> a \\<in> R; b \\<in> I \\<rbrakk> \\<Longrightarrow> b \\<cdot> a \\<in> I\""], ["", "context subgroup_of_additive_group_of_ring begin"], ["", "text \\<open>p 101, ll 14--17\\<close>"], ["", "theorem multiplicative_congruence_implies_ideal:\n  assumes \"monoid_congruence R (\\<cdot>) \\<one> Ring_Congruence\"\n  shows \"ideal I R (+) (\\<cdot>) \\<zero> \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal I R (+) (\\<cdot>) \\<zero> \\<one>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal I R (+) (\\<cdot>) \\<zero> \\<one>", "interpret multiplicative: monoid_congruence R \"(\\<cdot>)\" \\<one> Ring_Congruence"], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_congruence R (\\<cdot>) \\<one> Ring_Congruence", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. ideal I R (+) (\\<cdot>) \\<zero> \\<one>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal I R (+) (\\<cdot>) \\<zero> \\<one>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> I\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> I\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "assume [simp]: \"a \\<in> R\" \"b \\<in> I\""], ["proof (state)\nthis:\n  a \\<in> R\n  b \\<in> I\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> I\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "have congs: \"(a, a) \\<in> Ring_Congruence\" \"(b, \\<zero>) \\<in> Ring_Congruence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, a) \\<in> Ring_Congruence &&& (b, \\<zero>) \\<in> Ring_Congruence", "by (auto simp: additive.ClassD additive.Class_unit_normal_subgroup)"], ["proof (state)\nthis:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> I\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "from congs"], ["proof (chain)\npicking this:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence", "have \"(a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence\""], ["proof (prove)\nusing this:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence", "using multiplicative.cong"], ["proof (prove)\nusing this:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence\n  \\<lbrakk>(?a, ?a') \\<in> Ring_Congruence;\n   (?b, ?b') \\<in> Ring_Congruence\\<rbrakk>\n  \\<Longrightarrow> (?a \\<cdot> ?b, ?a' \\<cdot> ?b') \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence", "by fastforce"], ["proof (state)\nthis:\n  (a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> b \\<in> I\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "then"], ["proof (chain)\npicking this:\n  (a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence", "show \"a \\<cdot> b \\<in> I\""], ["proof (prove)\nusing this:\n  (a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. a \\<cdot> b \\<in> I", "using additive.Class_unit_normal_subgroup"], ["proof (prove)\nusing this:\n  (a \\<cdot> b, \\<zero>) \\<in> Ring_Congruence\n  additive.Class \\<zero> = I\n\ngoal (1 subgoal):\n 1. a \\<cdot> b \\<in> I", "by blast"], ["proof (state)\nthis:\n  a \\<cdot> b \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "from congs"], ["proof (chain)\npicking this:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence", "have \"(b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence\""], ["proof (prove)\nusing this:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. (b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence", "using multiplicative.cong"], ["proof (prove)\nusing this:\n  (a, a) \\<in> Ring_Congruence\n  (b, \\<zero>) \\<in> Ring_Congruence\n  \\<lbrakk>(?a, ?a') \\<in> Ring_Congruence;\n   (?b, ?b') \\<in> Ring_Congruence\\<rbrakk>\n  \\<Longrightarrow> (?a \\<cdot> ?b, ?a' \\<cdot> ?b') \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. (b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence", "by fastforce"], ["proof (state)\nthis:\n  (b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> R; b \\<in> I\\<rbrakk>\n       \\<Longrightarrow> b \\<cdot> a \\<in> I", "then"], ["proof (chain)\npicking this:\n  (b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence", "show \"b \\<cdot> a \\<in> I\""], ["proof (prove)\nusing this:\n  (b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. b \\<cdot> a \\<in> I", "using additive.Class_unit_normal_subgroup"], ["proof (prove)\nusing this:\n  (b \\<cdot> a, \\<zero>) \\<in> Ring_Congruence\n  additive.Class \\<zero> = I\n\ngoal (1 subgoal):\n 1. b \\<cdot> a \\<in> I", "by blast"], ["proof (state)\nthis:\n  b \\<cdot> a \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal I R (+) (\\<cdot>) \\<zero> \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* subgroup_of_additive_group_of_ring *)"], ["", "context ideal begin"], ["", "text \\<open>p 101, ll 17--20\\<close>"], ["", "theorem multiplicative_congruence [intro]:\n  assumes a: \"(a, a') \\<in> Ring_Congruence\" and b: \"(b, b') \\<in> Ring_Congruence\"\n  shows \"(a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "note Ring_CongruenceI [intro] Ring_CongruenceD [dest]"], ["proof (state)\nthis:\n  \\<lbrakk>?a - ?b \\<in> I; ?a \\<in> R; ?b \\<in> R\\<rbrakk>\n  \\<Longrightarrow> (?a, ?b) \\<in> Ring_Congruence\n  (?a, ?b) \\<in> Ring_Congruence \\<Longrightarrow> ?a - ?b \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "from a b"], ["proof (chain)\npicking this:\n  (a, a') \\<in> Ring_Congruence\n  (b, b') \\<in> Ring_Congruence", "have [simp]: \"a \\<in> R\" \"a' \\<in> R\" \"b \\<in> R\" \"b' \\<in> R\""], ["proof (prove)\nusing this:\n  (a, a') \\<in> Ring_Congruence\n  (b, b') \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. (a \\<in> R &&& a' \\<in> R) &&& b \\<in> R &&& b' \\<in> R", "by auto"], ["proof (state)\nthis:\n  a \\<in> R\n  a' \\<in> R\n  b \\<in> R\n  b' \\<in> R\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "from a"], ["proof (chain)\npicking this:\n  (a, a') \\<in> Ring_Congruence", "have [simp]: \"a - a' \\<in> I\""], ["proof (prove)\nusing this:\n  (a, a') \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. a - a' \\<in> I", ".."], ["proof (state)\nthis:\n  a - a' \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "have \"a \\<cdot> b - a' \\<cdot> b = (a - a') \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> b - a' \\<cdot> b = (a - a') \\<cdot> b", "by (simp add: distributive left_minus)"], ["proof (state)\nthis:\n  a \\<cdot> b - a' \\<cdot> b = (a - a') \\<cdot> b\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "also"], ["proof (state)\nthis:\n  a \\<cdot> b - a' \\<cdot> b = (a - a') \\<cdot> b\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "have \"\\<dots> \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - a') \\<cdot> b \\<in> I", "by (simp add: ideal)"], ["proof (state)\nthis:\n  (a - a') \\<cdot> b \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "finally"], ["proof (chain)\npicking this:\n  a \\<cdot> b - a' \\<cdot> b \\<in> I", "have ab: \"a \\<cdot> b - a' \\<cdot> b \\<in> I\""], ["proof (prove)\nusing this:\n  a \\<cdot> b - a' \\<cdot> b \\<in> I\n\ngoal (1 subgoal):\n 1. a \\<cdot> b - a' \\<cdot> b \\<in> I", ".  \\<comment> \\<open>ll 18--19\\<close>"], ["proof (state)\nthis:\n  a \\<cdot> b - a' \\<cdot> b \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "from b"], ["proof (chain)\npicking this:\n  (b, b') \\<in> Ring_Congruence", "have [simp]: \"b - b' \\<in> I\""], ["proof (prove)\nusing this:\n  (b, b') \\<in> Ring_Congruence\n\ngoal (1 subgoal):\n 1. b - b' \\<in> I", ".."], ["proof (state)\nthis:\n  b - b' \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "have \"a' \\<cdot> b - a' \\<cdot> b' = a' \\<cdot> (b - b')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<cdot> b - a' \\<cdot> b' = a' \\<cdot> (b - b')", "by (simp add: distributive right_minus)"], ["proof (state)\nthis:\n  a' \\<cdot> b - a' \\<cdot> b' = a' \\<cdot> (b - b')\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "also"], ["proof (state)\nthis:\n  a' \\<cdot> b - a' \\<cdot> b' = a' \\<cdot> (b - b')\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "have \"\\<dots> \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<cdot> (b - b') \\<in> I", "by (simp add: ideal)"], ["proof (state)\nthis:\n  a' \\<cdot> (b - b') \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "finally"], ["proof (chain)\npicking this:\n  a' \\<cdot> b - a' \\<cdot> b' \\<in> I", "have a'b': \"a' \\<cdot> b - a' \\<cdot> b' \\<in> I\""], ["proof (prove)\nusing this:\n  a' \\<cdot> b - a' \\<cdot> b' \\<in> I\n\ngoal (1 subgoal):\n 1. a' \\<cdot> b - a' \\<cdot> b' \\<in> I", ".  \\<comment> \\<open>l 19\\<close>"], ["proof (state)\nthis:\n  a' \\<cdot> b - a' \\<cdot> b' \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "have \"a \\<cdot> b - a' \\<cdot> b' = (a \\<cdot> b - a' \\<cdot> b) + (a' \\<cdot> b - a' \\<cdot> b')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> b - a' \\<cdot> b' =\n    a \\<cdot> b - a' \\<cdot> b + (a' \\<cdot> b - a' \\<cdot> b')", "by (simp add: additive.associative) (simp add: additive.associative [symmetric])"], ["proof (state)\nthis:\n  a \\<cdot> b - a' \\<cdot> b' =\n  a \\<cdot> b - a' \\<cdot> b + (a' \\<cdot> b - a' \\<cdot> b')\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "also"], ["proof (state)\nthis:\n  a \\<cdot> b - a' \\<cdot> b' =\n  a \\<cdot> b - a' \\<cdot> b + (a' \\<cdot> b - a' \\<cdot> b')\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "have \"\\<dots> \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> b - a' \\<cdot> b + (a' \\<cdot> b - a' \\<cdot> b') \\<in> I", "using ab a'b'"], ["proof (prove)\nusing this:\n  a \\<cdot> b - a' \\<cdot> b \\<in> I\n  a' \\<cdot> b - a' \\<cdot> b' \\<in> I\n\ngoal (1 subgoal):\n 1. a \\<cdot> b - a' \\<cdot> b + (a' \\<cdot> b - a' \\<cdot> b') \\<in> I", "by simp"], ["proof (state)\nthis:\n  a \\<cdot> b - a' \\<cdot> b + (a' \\<cdot> b - a' \\<cdot> b') \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "finally"], ["proof (chain)\npicking this:\n  a \\<cdot> b - a' \\<cdot> b' \\<in> I", "show \"(a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence\""], ["proof (prove)\nusing this:\n  a \\<cdot> b - a' \\<cdot> b' \\<in> I\n\ngoal (1 subgoal):\n 1. (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence", "by auto  \\<comment> \\<open>ll 19--20\\<close>"], ["proof (state)\nthis:\n  (a \\<cdot> b, a' \\<cdot> b') \\<in> Ring_Congruence\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>p 101, ll 23--24\\<close>"], ["", "sublocale ring_congruence where E = Ring_Congruence"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_congruence R (+) (\\<cdot>) \\<zero> \\<one> Ring_Congruence", "by unfold_locales rule"], ["", "end"], ["", "(* ideal *)"], ["", "context ring begin"], ["", "text \\<open>Pulled out of @{locale ideal} to achieve standard notation.\\<close>"], ["", "text \\<open>p 101, ll 24--26\\<close>"], ["", "abbreviation Quotient_Ring (infixl \"'/'/\" 75)\n  where \"S // I \\<equiv> S / (subgroup_of_additive_group_of_ring.Ring_Congruence I R (+) \\<zero>)\""], ["", "end"], ["", "(* ring *)"], ["", "text \\<open>p 101, ll 24--26\\<close>"], ["", "locale quotient_ring = ideal begin"], ["", "text \\<open>p 101, ll 24--26\\<close>"], ["", "sublocale quotient: ring \"R // I\" \"([+])\" \"([\\<cdot>])\" \"additive.Class \\<zero>\" \"additive.Class \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring additive.Partition ([+]) ([\\<cdot>]) (additive.Class \\<zero>)\n     (additive.Class \\<one>)", ".."], ["", "text \\<open>p 101, l 26\\<close>"], ["", "lemmas Left_Coset = additive.Left_CosetE"], ["", "text \\<open>Equation 17 (1)\\<close>"], ["", "text \\<open>p 101, l 28\\<close>"], ["", "lemmas quotient_addition = additive.factor_composition"], ["", "text \\<open>Equation 17 (2)\\<close>"], ["", "text \\<open>p 101, l 29\\<close>"], ["", "theorem quotient_multiplication [simp]:\n  \"\\<lbrakk> a \\<in> R; b \\<in> R \\<rbrakk> \\<Longrightarrow> (a +| I) [\\<cdot>] (b +| I) = a \\<cdot> b +| I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> R; b \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (a +| I) [\\<cdot>] (b +| I) = a \\<cdot> b +| I", "using multiplicative.Class_commutes_with_composition additive.Class_is_Left_Coset"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> R; ?b \\<in> R\\<rbrakk>\n  \\<Longrightarrow> additive.Class ?a [\\<cdot>] additive.Class ?b =\n                    additive.Class (?a \\<cdot> ?b)\n  ?g \\<in> R \\<Longrightarrow> additive.Class ?g = ?g +| I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> R; b \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (a +| I) [\\<cdot>] (b +| I) = a \\<cdot> b +| I", "by auto"], ["", "text \\<open>p 101, l 30\\<close>"], ["", "lemmas quotient_zero = additive.factor_unit"], ["", "lemmas quotient_negative = additive.factor_inverse"], ["", "end"], ["", "(* quotient_ring *)"], ["", "subsection \\<open>Homomorphisms of Rings.  Basic Theorems\\<close>"], ["", "text \\<open>Def 2.3\\<close>"], ["", "text \\<open>p 106, ll 7--9\\<close>"], ["", "locale ring_homomorphism =\n  map \\<eta> R R' + source: ring R \"(+)\" \"(\\<cdot>)\" \\<zero> \\<one> + target: ring R' \"(+')\" \"(\\<cdot>')\" \"\\<zero>'\" \"\\<one>'\" +\n  additive: group_homomorphism \\<eta> R \"(+)\" \\<zero> R' \"(+')\" \"\\<zero>'\" +\n  multiplicative: monoid_homomorphism \\<eta> R \"(\\<cdot>)\" \\<one> R' \"(\\<cdot>')\" \"\\<one>'\"\n  for \\<eta>\n    and R and addition (infixl \"+\" 65) and multiplication (infixl \"\\<cdot>\" 70) and zero (\"\\<zero>\") and unit (\"\\<one>\")\n    and R' and addition' (infixl \"+''\" 65) and multiplication' (infixl \"\\<cdot>''\" 70) and zero' (\"\\<zero>''\") and unit' (\"\\<one>''\")"], ["", "text \\<open>p 106, l 17\\<close>"], ["", "locale ring_epimorphism = ring_homomorphism + surjective_map \\<eta> R R'"], ["", "text \\<open>p 106, ll 14--18\\<close>"], ["", "sublocale quotient_ring \\<subseteq> natural: ring_epimorphism\n  where \\<eta> = additive.Class and R' = \"R // I\" and addition' = \"([+])\" and multiplication' =  \"([\\<cdot>])\"\n    and zero' = \"additive.Class \\<zero>\" and unit' = \"additive.Class \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_epimorphism additive.Class R (+) (\\<cdot>) \\<zero> \\<one>\n     additive.Partition ([+]) ([\\<cdot>]) (additive.Class \\<zero>)\n     (additive.Class \\<one>)", ".."], ["", "context ring_homomorphism begin"], ["", "text \\<open>\n  Jacobson reasons via @{term \"a - b \\<in> additive.Ker\"} being a congruence; we prefer the direct proof,\n  since it is very simple.\n\\<close>"], ["", "text \\<open>p 106, ll 19--21\\<close>"], ["", "sublocale kernel: ideal where I = additive.Ker"], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal additive.Ker R (+) (\\<cdot>) \\<zero> \\<one>", "by unfold_locales (auto simp: additive.Ker_image multiplicative.commutes_with_composition)"], ["", "end"], ["", "(* ring_homomorphism *)"], ["", "text \\<open>p 106, l 22\\<close>"], ["", "locale ring_monomorphism = ring_homomorphism + injective_map \\<eta> R R'"], ["", "context ring_homomorphism begin"], ["", "text \\<open>p 106, ll 21--23\\<close>"], ["", "theorem ring_monomorphism_iff_kernel_unit:\n  \"ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>') \\<zero>' \\<one>' \\<longleftrightarrow> additive.Ker = {\\<zero>}\" (is \"?monom \\<longleftrightarrow> ?ker\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>' =\n    (additive.Ker = {\\<zero>})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>' \\<Longrightarrow>\n    additive.Ker = {\\<zero>}\n 2. additive.Ker = {\\<zero>} \\<Longrightarrow>\n    ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "assume ?monom"], ["proof (state)\nthis:\n  ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>')\n   \\<zero>' \\<one>'\n\ngoal (2 subgoals):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>' \\<Longrightarrow>\n    additive.Ker = {\\<zero>}\n 2. additive.Ker = {\\<zero>} \\<Longrightarrow>\n    ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "then"], ["proof (chain)\npicking this:\n  ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>')\n   \\<zero>' \\<one>'", "interpret ring_monomorphism"], ["proof (prove)\nusing this:\n  ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>')\n   \\<zero>' \\<one>'\n\ngoal (1 subgoal):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "."], ["proof (state)\ngoal (2 subgoals):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>' \\<Longrightarrow>\n    additive.Ker = {\\<zero>}\n 2. additive.Ker = {\\<zero>} \\<Longrightarrow>\n    ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "show ?ker"], ["proof (prove)\ngoal (1 subgoal):\n 1. additive.Ker = {\\<zero>}", "by (simp add: additive.injective_iff_kernel_unit [symmetric])"], ["proof (state)\nthis:\n  additive.Ker = {\\<zero>}\n\ngoal (1 subgoal):\n 1. additive.Ker = {\\<zero>} \\<Longrightarrow>\n    ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. additive.Ker = {\\<zero>} \\<Longrightarrow>\n    ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "assume ?ker"], ["proof (state)\nthis:\n  additive.Ker = {\\<zero>}\n\ngoal (1 subgoal):\n 1. additive.Ker = {\\<zero>} \\<Longrightarrow>\n    ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "then"], ["proof (chain)\npicking this:\n  additive.Ker = {\\<zero>}", "show ?monom"], ["proof (prove)\nusing this:\n  additive.Ker = {\\<zero>}\n\ngoal (1 subgoal):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", "by unfold_locales (simp add: additive.injective_iff_kernel_unit)"], ["proof (state)\nthis:\n  ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>')\n   \\<zero>' \\<one>'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ring_homomorphism *)"], ["", "text \\<open>p 106, ll 23--25\\<close>"], ["", "sublocale ring_homomorphism \\<subseteq> image: subring \"\\<eta> ` R\" R' \"(+')\" \"(\\<cdot>')\" \"\\<zero>'\" \"\\<one>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subring (\\<eta> ` R) R' (+') (\\<cdot>') \\<zero>' \\<one>'", ".."], ["", "text \\<open>p 106, ll 26--27\\<close>"], ["", "locale ideal_in_kernel =\n  ring_homomorphism + contained: ideal I R \"(+)\" \"(\\<cdot>)\" \\<zero> \\<one> for I +\n  assumes subset: \"I \\<subseteq> additive.Ker\"\nbegin"], ["", "text \\<open>p 106, ll 26--27\\<close>"], ["", "notation contained.additive.quotient_composition (infixl \"[+]\" 65)"], ["", "notation contained.multiplicative.quotient_composition (infixl \"[\\<cdot>]\" 70)"], ["", "text \\<open>Provides @{text additive.induced}, which Jacobson calls $\\bar{\\eta}$.\\<close>"], ["", "text \\<open>p 106, l 30\\<close>"], ["", "sublocale additive: normal_subgroup_in_kernel \\<eta> R \"(+)\" \\<zero> R' \"(+')\" \"\\<zero>'\" I\n  rewrites \"normal_subgroup.Congruence I R addition zero = contained.Ring_Congruence\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal_subgroup_in_kernel \\<eta> R (+) \\<zero> R' (+') \\<zero>' I &&&\n    normal_subgroup.Congruence I R (+) \\<zero> = contained.Ring_Congruence", "by unfold_locales (rule subset contained.additive_congruence)+"], ["", "text \\<open>Only the multiplicative part needs some work.\\<close>"], ["", "text \\<open>p 106, ll 27--30\\<close>"], ["", "sublocale induced: ring_homomorphism additive.induced \"R // I\" \"([+])\" \"([\\<cdot>])\" \"contained.additive.Class \\<zero>\" \"contained.additive.Class \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism additive.induced contained.additive.Partition ([+])\n     ([\\<cdot>]) (contained.additive.Class \\<zero>)\n     (contained.additive.Class \\<one>) R' (+') (\\<cdot>') \\<zero>' \\<one>'", "using contained.multiplicative.Class_commutes_with_composition"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> R; ?b \\<in> R\\<rbrakk>\n  \\<Longrightarrow> contained.additive.Class ?a [\\<cdot>]\n                    contained.additive.Class ?b =\n                    contained.additive.Class (?a \\<cdot> ?b)\n\ngoal (1 subgoal):\n 1. ring_homomorphism additive.induced contained.additive.Partition ([+])\n     ([\\<cdot>]) (contained.additive.Class \\<zero>)\n     (contained.additive.Class \\<one>) R' (+') (\\<cdot>') \\<zero>' \\<one>'", "by unfold_locales\n    (auto elim!: contained.additive.Left_CosetE simp: contained.additive.Class_is_Left_Coset multiplicative.commutes_with_composition multiplicative.commutes_with_unit)"], ["", "text \\<open>p 106, l 30; p 107, ll 1--3\\<close>"], ["", "text \\<open>\n  @{term additive.induced} denotes Jacobson's $\\bar{\\eta}$.  We have the commutativity of the diagram, where\n  @{term additive.induced} is unique: @{thm [display] additive.factorization} @{thm [display] additive.uniqueness}\n\\<close>"], ["", "end"], ["", "(* ideal_in_kernel *)"], ["", "text \\<open>Fundamental Theorem of Homomorphisms of Rings\\<close>"], ["", "text \\<open>p 107, l 6\\<close>"], ["", "locale ring_homomorphism_fundamental = ring_homomorphism begin"], ["", "text \\<open>p 107, l 6\\<close>"], ["", "notation kernel.additive.quotient_composition (infixl \"[+]\" 65)"], ["", "notation kernel.multiplicative.quotient_composition (infixl \"[\\<cdot>]\" 70)"], ["", "text \\<open>p 107, l 6\\<close>"], ["", "sublocale ideal_in_kernel where I = additive.Ker"], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal_in_kernel \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+') (\\<cdot>')\n     \\<zero>' \\<one>' additive.Ker", "by unfold_locales rule"], ["", "text \\<open>p 107, ll 8--9\\<close>"], ["", "sublocale natural: ring_epimorphism\n  where \\<eta> = kernel.additive.Class and R' = \"R // additive.Ker\"\n    and addition' = \"kernel.additive.quotient_composition\"\n    and multiplication' = \"kernel.multiplicative.quotient_composition\"\n    and zero' = \"kernel.additive.Class \\<zero>\" and unit' = \"kernel.additive.Class \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_epimorphism kernel.additive.Class R (+) (\\<cdot>) \\<zero> \\<one>\n     kernel.additive.Partition ([+]) ([\\<cdot>])\n     (kernel.additive.Class \\<zero>) (kernel.additive.Class \\<one>)", ".."], ["", "text \\<open>p 107, l 9\\<close>"], ["", "sublocale induced: ring_monomorphism\n  where \\<eta> = additive.induced and R = \"R // additive.Ker\"\n    and addition = \"kernel.additive.quotient_composition\"\n    and multiplication = \"kernel.multiplicative.quotient_composition\"\n    and zero = \"kernel.additive.Class \\<zero>\" and unit = \"kernel.additive.Class \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_monomorphism additive.induced kernel.additive.Partition ([+])\n     ([\\<cdot>]) (kernel.additive.Class \\<zero>)\n     (kernel.additive.Class \\<one>) R' (+') (\\<cdot>') \\<zero>' \\<one>'", "by unfold_locales (simp add: additive.induced_inj_on)"], ["", "end"], ["", "(* ring_homomorphism_fundamental *)"], ["", "text \\<open>p 107, l 11\\<close>"], ["", "locale ring_isomorphism = ring_homomorphism + bijective_map \\<eta> R R' begin"], ["", "text \\<open>p 107, l 11\\<close>"], ["", "sublocale ring_monomorphism"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_monomorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", ".."], ["", "sublocale ring_epimorphism"], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_epimorphism \\<eta> R (+) (\\<cdot>) \\<zero> \\<one> R' (+')\n     (\\<cdot>') \\<zero>' \\<one>'", ".."], ["", "text \\<open>p 107, l 11\\<close>"], ["", "lemma inverse_ring_isomorphism:\n  \"ring_isomorphism (restrict (inv_into R \\<eta>) R') R' (+') (\\<cdot>') \\<zero>' \\<one>' R (+) (\\<cdot>) \\<zero> \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_isomorphism (restrict (inv_into R \\<eta>) R') R' (+') (\\<cdot>')\n     \\<zero>' \\<one>' R (+) (\\<cdot>) \\<zero> \\<one>", "using additive.commutes_with_composition [symmetric] additive.commutes_with_unit\n    multiplicative.commutes_with_composition [symmetric] multiplicative.commutes_with_unit surjective"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> R; ?y \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<eta> ?x +' \\<eta> ?y = \\<eta> (?x + ?y)\n  \\<eta> \\<zero> = \\<zero>'\n  \\<lbrakk>?x \\<in> R; ?y \\<in> R\\<rbrakk>\n  \\<Longrightarrow> \\<eta> ?x \\<cdot>' \\<eta> ?y = \\<eta> (?x \\<cdot> ?y)\n  \\<eta> \\<one> = \\<one>'\n  \\<eta> ` R = R'\n\ngoal (1 subgoal):\n 1. ring_isomorphism (restrict (inv_into R \\<eta>) R') R' (+') (\\<cdot>')\n     \\<zero>' \\<one>' R (+) (\\<cdot>) \\<zero> \\<one>", "by unfold_locales auto"], ["", "end"], ["", "(* ring_isomorphsim *)"], ["", "text \\<open>p 107, l 11\\<close>"], ["", "definition isomorphic_as_rings (infixl \"\\<cong>\\<^sub>R\" 50)\n  where \"\\<R> \\<cong>\\<^sub>R \\<R>' \\<longleftrightarrow> (let (R, addition, multiplication, zero, unit) = \\<R>; (R', addition', multiplication', zero', unit') = \\<R>' in\n  (\\<exists>\\<eta>. ring_isomorphism \\<eta> R addition multiplication zero unit R' addition' multiplication' zero' unit'))\""], ["", "text \\<open>p 107, l 11\\<close>"], ["", "lemma isomorphic_as_rings_symmetric:\n  \"(R, addition, multiplication, zero, unit) \\<cong>\\<^sub>R (R', addition', multiplication', zero', unit') \\<Longrightarrow>\n   (R', addition', multiplication', zero', unit') \\<cong>\\<^sub>R (R, addition, multiplication, zero, unit)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R, addition, multiplication, zero, unit) \\<cong>\\<^sub>R\n    (R', addition', multiplication', zero', unit') \\<Longrightarrow>\n    (R', addition', multiplication', zero', unit') \\<cong>\\<^sub>R\n    (R, addition, multiplication, zero, unit)", "by (simp add: isomorphic_as_rings_def) (meson ring_isomorphism.inverse_ring_isomorphism)"], ["", "context ring_homomorphism begin"], ["", "text \\<open>Corollary\\<close>"], ["", "text \\<open>p 107, ll 11--12\\<close>"], ["", "theorem image_is_isomorphic_to_quotient_ring:\n  \"\\<exists>K add mult zero one. ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and> (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R (R // K, add, mult, zero, one)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "interpret image: ring_homomorphism_fundamental where R' = \"\\<eta> ` R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_homomorphism_fundamental \\<eta> R (+) (\\<cdot>) \\<zero> \\<one>\n     (\\<eta> ` R) (+') (\\<cdot>') \\<zero>' \\<one>'", "by unfold_locales (auto simp: target.additive.commutative additive.commutes_with_composition\n      multiplicative.commutes_with_composition target.distributive multiplicative.commutes_with_unit)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "have \"ring_isomorphism image.additive.induced (R // additive.Ker) ([+]) ([\\<cdot>]) (kernel.additive.Class \\<zero>) (kernel.additive.Class \\<one>) (\\<eta> ` R) (+') (\\<cdot>') \\<zero>' \\<one>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring_isomorphism image.additive.induced kernel.additive.Partition ([+])\n     ([\\<cdot>]) (kernel.additive.Class \\<zero>)\n     (kernel.additive.Class \\<one>) (\\<eta> ` R) (+') (\\<cdot>') \\<zero>'\n     \\<one>'", "by unfold_locales (simp add: image.additive.induced_image bij_betw_def)"], ["proof (state)\nthis:\n  ring_isomorphism image.additive.induced kernel.additive.Partition ([+])\n   ([\\<cdot>]) (kernel.additive.Class \\<zero>)\n   (kernel.additive.Class \\<one>) (\\<eta> ` R) (+') (\\<cdot>') \\<zero>'\n   \\<one>'\n\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "then"], ["proof (chain)\npicking this:\n  ring_isomorphism image.additive.induced kernel.additive.Partition ([+])\n   ([\\<cdot>]) (kernel.additive.Class \\<zero>)\n   (kernel.additive.Class \\<one>) (\\<eta> ` R) (+') (\\<cdot>') \\<zero>'\n   \\<one>'", "have \"(\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R (R // additive.Ker, ([+]), ([\\<cdot>]), kernel.additive.Class \\<zero>, kernel.additive.Class \\<one>)\""], ["proof (prove)\nusing this:\n  ring_isomorphism image.additive.induced kernel.additive.Partition ([+])\n   ([\\<cdot>]) (kernel.additive.Class \\<zero>)\n   (kernel.additive.Class \\<one>) (\\<eta> ` R) (+') (\\<cdot>') \\<zero>'\n   \\<one>'\n\ngoal (1 subgoal):\n 1. (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n    (kernel.additive.Partition, ([+]), ([\\<cdot>]),\n     kernel.additive.Class \\<zero>, kernel.additive.Class \\<one>)", "by (simp add: isomorphic_as_rings_def) (meson ring_isomorphism.inverse_ring_isomorphism)"], ["proof (state)\nthis:\n  (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n  (kernel.additive.Partition, ([+]), ([\\<cdot>]),\n   kernel.additive.Class \\<zero>, kernel.additive.Class \\<one>)\n\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "moreover"], ["proof (state)\nthis:\n  (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n  (kernel.additive.Partition, ([+]), ([\\<cdot>]),\n   kernel.additive.Class \\<zero>, kernel.additive.Class \\<one>)\n\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "have \"ideal additive.Ker R (+) (\\<cdot>) \\<zero> \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal image.additive.Ker R (+) (\\<cdot>) \\<zero> \\<one>", ".."], ["proof (state)\nthis:\n  ideal image.additive.Ker R (+) (\\<cdot>) \\<zero> \\<one>\n\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n  (kernel.additive.Partition, ([+]), ([\\<cdot>]),\n   kernel.additive.Class \\<zero>, kernel.additive.Class \\<one>)\n  ideal image.additive.Ker R (+) (\\<cdot>) \\<zero> \\<one>", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n  (kernel.additive.Partition, ([+]), ([\\<cdot>]),\n   kernel.additive.Class \\<zero>, kernel.additive.Class \\<one>)\n  ideal image.additive.Ker R (+) (\\<cdot>) \\<zero> \\<one>\n\ngoal (1 subgoal):\n 1. \\<exists>K add mult zero one.\n       ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n       (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n       (R // K, add, mult, zero, one)", "by blast"], ["proof (state)\nthis:\n  \\<exists>K add mult zero one.\n     ideal K R (+) (\\<cdot>) \\<zero> \\<one> \\<and>\n     (\\<eta> ` R, (+'), (\\<cdot>'), \\<zero>', \\<one>') \\<cong>\\<^sub>R\n     (R // K, add, mult, zero, one)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ring_homomorphism *)"], ["", "end"]]}