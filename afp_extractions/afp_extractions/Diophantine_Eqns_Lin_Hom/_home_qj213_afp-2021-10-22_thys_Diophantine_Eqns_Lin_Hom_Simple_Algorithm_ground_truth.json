{"file_name": "/home/qj213/afp-2021-10-22/thys/Diophantine_Eqns_Lin_Hom/Simple_Algorithm.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Diophantine_Eqns_Lin_Hom", "problem_names": ["lemma concat_map_nth0: \"xs \\<noteq> [] \\<Longrightarrow> f (xs ! 0) \\<noteq> [] \\<Longrightarrow> concat (map f xs) ! 0 = f (xs ! 0) ! 0\"", "lemma rlex2_irrefl:\n  \"\\<not> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x\"", "lemma rlex2_not_sym: \"x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y \\<Longrightarrow> \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x\"", "lemma less_imp_rlex2: \"\\<not> (case x of (x, y) \\<Rightarrow> \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v) y \\<Longrightarrow> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y\"", "lemma set_gen: \"set (gen B n) = {xs. length xs = n \\<and> (\\<forall>i<n. xs ! i \\<le> B)}\" (is \"_ = ?A n\")", "lemma sorted_wrt_gen:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (gen B n)\"", "lemma sorted_wrt_gen2: \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (gen2 A B m n)\"", "lemma gen_ne [simp]: \"gen B n \\<noteq> []\"", "lemma gen2_ne: \"gen2 A B m n \\<noteq> []\"", "lemma sorted_wrt_generate: \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (generate A B m n)\"", "lemma sorted_wrt_check_generate: \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (check_generate a b)\"", "lemma in_tl_gen2: \"x \\<in> set (tl (gen2 A B m n)) \\<Longrightarrow> x \\<in> set (gen2 A B m n)\"", "lemma gen_nth0 [simp]: \"gen B n ! 0 = zeroes n\"", "lemma gen2_nth0 [simp]:\n  \"gen2 A B m n ! 0 = (zeroes m, zeroes n)\"", "lemma set_gen2:\n  \"set (gen2 A B m n) = {(x, y). length x = m \\<and> length y = n \\<and> (\\<forall>i<m. x ! i \\<le> A) \\<and> (\\<forall>j<n. y ! j \\<le> B)}\"", "lemma gen2_unique:\n  assumes \"i < j\"\n    and \"j < length (gen2 A B m n)\"\n  shows \"gen2 A B m n ! i \\<noteq> gen2 A B m n ! j\"", "lemma zeroes_ni_tl_gen2:\n  \"(zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))\"", "lemma set_generate:\n  \"set (generate A B m n) = {(x, y). (x, y) \\<noteq> (zeroes m, zeroes n) \\<and> (x, y) \\<in> set (gen2 A B m n)}\"", "lemma set_check_generate:\n  \"set (check_generate a b) = {(x, y).\n    (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n    length x = length a \\<and> length y = length b \\<and> a \\<bullet> x = b \\<bullet> y \\<and>\n    (\\<forall>i<length a. x ! i \\<le> Max (set b)) \\<and> (\\<forall>j<length b. y ! j \\<le> Max (set a))}\"", "lemma set_minimize_check_generate:\n  \"set (minimize (check_generate a b)) =\n    {(x, y)\\<in>set (check_generate a b). \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v <\\<^sub>v x @ y)}\"", "lemma set_solutions_iff:\n  \"set (solutions a b) =\n    {(x, y) \\<in> set (check_generate a b). \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v <\\<^sub>v x @ y)}\"", "lemma (in hlde) solutions_complete:\n  \"Minimal_Solutions \\<subseteq> set (solutions a b)\"", "lemma (in hlde) solutions_sound:\n  \"set (solutions a b) \\<subseteq> Minimal_Solutions\"", "lemma (in hlde) set_solutions [simp]: \"set (solutions a b) = Minimal_Solutions\""], "translations": [["", "lemma concat_map_nth0: \"xs \\<noteq> [] \\<Longrightarrow> f (xs ! 0) \\<noteq> [] \\<Longrightarrow> concat (map f xs) ! 0 = f (xs ! 0) ! 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; f (xs ! 0) \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> concat (map f xs) ! 0 = f (xs ! 0) ! 0", "by (induct xs) (auto simp: nth_append)"], ["", "subsection \\<open>Reverse-Lexicographic Enumeration of Potential Minimal Solutions\\<close>"], ["", "fun rlex2 :: \"(nat list \\<times> nat list) \\<Rightarrow> (nat list \\<times> nat list) \\<Rightarrow> bool\"  (infix \"<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\" 50)\n  where\n    \"(xs, ys) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (us, vs) \\<longleftrightarrow> xs @ ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x us @ vs\""], ["", "lemma rlex2_irrefl:\n  \"\\<not> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x", "by (cases x) (auto simp: rlex_irrefl)"], ["", "lemma rlex2_not_sym: \"x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y \\<Longrightarrow> \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y \\<Longrightarrow>\n    \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x", "using rlex_not_sym"], ["proof (prove)\nusing this:\n  ?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys \\<Longrightarrow>\n  \\<not> ?ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?xs\n\ngoal (1 subgoal):\n 1. x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y \\<Longrightarrow>\n    \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x", "by (cases x; cases y; simp)"], ["", "lemma less_imp_rlex2: \"\\<not> (case x of (x, y) \\<Rightarrow> \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v) y \\<Longrightarrow> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case x of\n            (x, y) \\<Rightarrow>\n              \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n            y \\<Longrightarrow>\n    x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y", "using less_imp_rlex"], ["proof (prove)\nusing this:\n  ?xs <\\<^sub>v ?ys \\<Longrightarrow>\n  ?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys\n\ngoal (1 subgoal):\n 1. \\<not> (case x of\n            (x, y) \\<Rightarrow>\n              \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n            y \\<Longrightarrow>\n    x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 y", "by (cases x; cases y; auto)"], ["", "text \\<open>Generate all lists (of natural numbers) of length \\<open>n\\<close> with elements bounded by \\<open>B\\<close>.\\<close>"], ["", "fun gen :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat list list\"\n  where\n    \"gen B 0 = [[]]\"\n  | \"gen B (Suc n) = [x#xs . xs \\<leftarrow> gen B n, x \\<leftarrow> [0 ..< B + 1]]\""], ["", "definition \"generate A B m n = tl [(x, y) . y \\<leftarrow> gen B n, x \\<leftarrow> gen A m]\""], ["", "definition \"check a b = filter (\\<lambda>(x, y). a \\<bullet> x = b \\<bullet> y)\""], ["", "definition \"minimize = minimize_wrt (\\<lambda>(x, y) (u, v). \\<not> x @ y <\\<^sub>v u @ v)\""], ["", "definition \"solutions a b =\n  (let A = Max (set b); B = Max (set a); m = length a; n = length b\n  in minimize (check a b (generate A B m n)))\""], ["", "lemma set_gen: \"set (gen B n) = {xs. length xs = n \\<and> (\\<forall>i<n. xs ! i \\<le> B)}\" (is \"_ = ?A n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (gen B n) =\n    {xs. length xs = n \\<and> (\\<forall>i<n. xs ! i \\<le> B)}", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "case [simp]: (Suc n)"], ["proof (state)\nthis:\n  set (gen B n) = {xs. length xs = n \\<and> (\\<forall>i<n. xs ! i \\<le> B)}\n\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "{"], ["proof (state)\nthis:\n  set (gen B n) = {xs. length xs = n \\<and> (\\<forall>i<n. xs ! i \\<le> B)}\n\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "fix xs"], ["proof (state)\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "assume \"xs \\<in> ?A (Suc n)\""], ["proof (state)\nthis:\n  xs \\<in> {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}\n\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "then"], ["proof (chain)\npicking this:\n  xs \\<in> {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "have \"xs \\<in> set (gen B (Suc n))\""], ["proof (prove)\nusing this:\n  xs \\<in> {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}\n\ngoal (1 subgoal):\n 1. xs \\<in> set (gen B (Suc n))", "by (cases xs) (force simp: All_less_Suc2)+"], ["proof (state)\nthis:\n  xs \\<in> set (gen B (Suc n))\n\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "}"], ["proof (state)\nthis:\n  ?xs2\n  \\<in> {xs.\n         length xs = Suc n \\<and>\n         (\\<forall>i<Suc n. xs ! i \\<le> B)} \\<Longrightarrow>\n  ?xs2 \\<in> set (gen B (Suc n))\n\ngoal (2 subgoals):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}\n 2. \\<And>n.\n       set (gen B n) =\n       {xs.\n        length xs = n \\<and>\n        (\\<forall>i<n. xs ! i \\<le> B)} \\<Longrightarrow>\n       set (gen B (Suc n)) =\n       {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "then"], ["proof (chain)\npicking this:\n  ?xs2\n  \\<in> {xs.\n         length xs = Suc n \\<and>\n         (\\<forall>i<Suc n. xs ! i \\<le> B)} \\<Longrightarrow>\n  ?xs2 \\<in> set (gen B (Suc n))", "show ?case"], ["proof (prove)\nusing this:\n  ?xs2\n  \\<in> {xs.\n         length xs = Suc n \\<and>\n         (\\<forall>i<Suc n. xs ! i \\<le> B)} \\<Longrightarrow>\n  ?xs2 \\<in> set (gen B (Suc n))\n\ngoal (1 subgoal):\n 1. set (gen B (Suc n)) =\n    {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}", "by (auto simp: less_Suc_eq_0_disj)"], ["proof (state)\nthis:\n  set (gen B (Suc n)) =\n  {xs. length xs = Suc n \\<and> (\\<forall>i<Suc n. xs ! i \\<le> B)}\n\ngoal (1 subgoal):\n 1. set (gen B 0) =\n    {xs. length xs = 0 \\<and> (\\<forall>i<0. xs ! i \\<le> B)}", "qed simp"], ["", "abbreviation \"gen2 A B m n \\<equiv> [(x, y) . y \\<leftarrow> gen B n, x \\<leftarrow> gen A m]\""], ["", "lemma sorted_wrt_gen:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (gen B n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (gen B n)", "by (induction n)\n   (auto simp: rlex_Cons sorted_wrt_append sorted_wrt_map rlex_irrefl\n    intro!: sorted_wrt_concat_map [where h = id, simplified])"], ["", "lemma sorted_wrt_gen2: \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (gen2 A B m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (gen2 A B m n)", "by (intro sorted_wrt_concat_map_map [where Q = \"(<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x)\"] sorted_wrt_gen)\n    (auto simp: set_gen rlex_def intro:  lex_append_leftI lex_append_rightI)"], ["", "lemma gen_ne [simp]: \"gen B n \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen B n \\<noteq> []", "by (induct n) auto"], ["", "lemma gen2_ne: \"gen2 A B m n \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen2 A B m n \\<noteq> []", "by auto"], ["", "lemma sorted_wrt_generate: \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (generate A B m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2)\n     (generate A B m n)", "by (auto simp: generate_def intro: sorted_wrt_tl sorted_wrt_gen2)"], ["", "abbreviation \"check_generate a b \\<equiv> check a b (generate (Max (set b)) (Max (set a)) (length a) (length b))\""], ["", "lemma sorted_wrt_check_generate: \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (check_generate a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2)\n     (check_generate a b)", "by (auto simp: check_def intro: sorted_wrt_filter sorted_wrt_generate)"], ["", "lemma in_tl_gen2: \"x \\<in> set (tl (gen2 A B m n)) \\<Longrightarrow> x \\<in> set (gen2 A B m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (tl (gen2 A B m n)) \\<Longrightarrow>\n    x \\<in> set (gen2 A B m n)", "by (rule list.set_sel) simp"], ["", "lemma gen_nth0 [simp]: \"gen B n ! 0 = zeroes n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen B n ! 0 = zeroes n", "by (induct n) (auto simp: nth_append concat_map_nth0)"], ["", "lemma gen2_nth0 [simp]:\n  \"gen2 A B m n ! 0 = (zeroes m, zeroes n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen2 A B m n ! 0 = (zeroes m, zeroes n)", "by (auto simp: concat_map_nth0)"], ["", "lemma set_gen2:\n  \"set (gen2 A B m n) = {(x, y). length x = m \\<and> length y = n \\<and> (\\<forall>i<m. x ! i \\<le> A) \\<and> (\\<forall>j<n. y ! j \\<le> B)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (gen2 A B m n) =\n    {(x, y).\n     length x = m \\<and>\n     length y = n \\<and>\n     (\\<forall>i<m. x ! i \\<le> A) \\<and> (\\<forall>j<n. y ! j \\<le> B)}", "by (auto simp: set_gen)"], ["", "lemma gen2_unique:\n  assumes \"i < j\"\n    and \"j < length (gen2 A B m n)\"\n  shows \"gen2 A B m n ! i \\<noteq> gen2 A B m n ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen2 A B m n ! i \\<noteq> gen2 A B m n ! j", "using sorted_wrt_nth_less [OF sorted_wrt_gen2 assms]"], ["proof (prove)\nusing this:\n  gen2 A B m n ! i <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n  gen2 A B m n ! j\n\ngoal (1 subgoal):\n 1. gen2 A B m n ! i \\<noteq> gen2 A B m n ! j", "by (auto simp: rlex2_irrefl)"], ["", "lemma zeroes_ni_tl_gen2:\n  \"(zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))", "have \"gen2 A B m n ! 0 = (zeroes m, zeroes n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen2 A B m n ! 0 = (zeroes m, zeroes n)", "by (auto simp: generate_def)"], ["proof (state)\nthis:\n  gen2 A B m n ! 0 = (zeroes m, zeroes n)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))", "with gen2_unique[of 0 _ A m B n]"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < ?j; ?j < length (gen2 A B m n)\\<rbrakk>\n  \\<Longrightarrow> gen2 A B m n ! 0 \\<noteq> gen2 A B m n ! ?j\n  gen2 A B m n ! 0 = (zeroes m, zeroes n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < ?j; ?j < length (gen2 A B m n)\\<rbrakk>\n  \\<Longrightarrow> gen2 A B m n ! 0 \\<noteq> gen2 A B m n ! ?j\n  gen2 A B m n ! 0 = (zeroes m, zeroes n)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))", "by (metis (no_types, lifting) Suc_eq_plus1 in_set_conv_nth length_tl less_diff_conv nth_tl zero_less_Suc)"], ["proof (state)\nthis:\n  (zeroes m, zeroes n) \\<notin> set (tl (gen2 A B m n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_generate:\n  \"set (generate A B m n) = {(x, y). (x, y) \\<noteq> (zeroes m, zeroes n) \\<and> (x, y) \\<in> set (gen2 A B m n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (generate A B m n) =\n    {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (generate A B m n)\n    \\<subseteq> {(x, y).\n                 (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n                 (x, y) \\<in> set (gen2 A B m n)}\n 2. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "show \"set (generate A B m n)\n    \\<subseteq> {(x, y).(x, y) \\<noteq> (zeroes m, zeroes n) \\<and> (x, y) \\<in> set (gen2 A B m n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (generate A B m n)\n    \\<subseteq> {(x, y).\n                 (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n                 (x, y) \\<in> set (gen2 A B m n)}", "using in_tl_gen2 and mem_Collect_eq and zeroes_ni_tl_gen2"], ["proof (prove)\nusing this:\n  ?x \\<in> set (tl (gen2 ?A ?B ?m ?n)) \\<Longrightarrow>\n  ?x \\<in> set (gen2 ?A ?B ?m ?n)\n  (?a \\<in> Collect ?P) = ?P ?a\n  (zeroes ?m, zeroes ?n) \\<notin> set (tl (gen2 ?A ?B ?m ?n))\n\ngoal (1 subgoal):\n 1. set (generate A B m n)\n    \\<subseteq> {(x, y).\n                 (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n                 (x, y) \\<in> set (gen2 A B m n)}", "by (auto simp: generate_def)"], ["proof (state)\nthis:\n  set (generate A B m n)\n  \\<subseteq> {(x, y).\n               (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n               (x, y) \\<in> set (gen2 A B m n)}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "have \"(zeroes m, zeroes n) = hd (gen2 A B m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) = hd (gen2 A B m n)", "by (simp add: hd_conv_nth)"], ["proof (state)\nthis:\n  (zeroes m, zeroes n) = hd (gen2 A B m n)\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "moreover"], ["proof (state)\nthis:\n  (zeroes m, zeroes n) = hd (gen2 A B m n)\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "have \"set (gen2 A B m n) = set (generate A B m n) \\<union> {(zeroes m, zeroes n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (gen2 A B m n) =\n    set (generate A B m n) \\<union> {(zeroes m, zeroes n)}", "by (metis Un_empty_right generate_def Un_insert_right gen2_ne calculation list.exhaust_sel list.simps(15))"], ["proof (state)\nthis:\n  set (gen2 A B m n) =\n  set (generate A B m n) \\<union> {(zeroes m, zeroes n)}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "ultimately"], ["proof (chain)\npicking this:\n  (zeroes m, zeroes n) = hd (gen2 A B m n)\n  set (gen2 A B m n) =\n  set (generate A B m n) \\<union> {(zeroes m, zeroes n)}", "show \" {(x, y). (x, y) \\<noteq> (zeroes m, zeroes n) \\<and> (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)\""], ["proof (prove)\nusing this:\n  (zeroes m, zeroes n) = hd (gen2 A B m n)\n  set (gen2 A B m n) =\n  set (generate A B m n) \\<union> {(zeroes m, zeroes n)}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n     (x, y) \\<in> set (gen2 A B m n)}\n    \\<subseteq> set (generate A B m n)", "by blast"], ["proof (state)\nthis:\n  {(x, y).\n   (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n   (x, y) \\<in> set (gen2 A B m n)}\n  \\<subseteq> set (generate A B m n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_check_generate:\n  \"set (check_generate a b) = {(x, y).\n    (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n    length x = length a \\<and> length y = length b \\<and> a \\<bullet> x = b \\<bullet> y \\<and>\n    (\\<forall>i<length a. x ! i \\<le> Max (set b)) \\<and> (\\<forall>j<length b. y ! j \\<le> Max (set a))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (check_generate a b) =\n    {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     length x = length a \\<and>\n     length y = length b \\<and>\n     a \\<bullet> x = b \\<bullet> y \\<and>\n     (\\<forall>i<length a. x ! i \\<le> Max (set b)) \\<and>\n     (\\<forall>j<length b. y ! j \\<le> Max (set a))}", "unfolding check_def and set_filter and set_generate and set_gen2"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> {(x, y).\n              (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n              (x, y)\n              \\<in> {(x, y).\n                     length x = length a \\<and>\n                     length y = length b \\<and>\n                     (\\<forall>i<length a. x ! i \\<le> Max (set b)) \\<and>\n                     (\\<forall>j<length b. y ! j \\<le> Max (set a))}}.\n     case x of (x, y) \\<Rightarrow> a \\<bullet> x = b \\<bullet> y} =\n    {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     length x = length a \\<and>\n     length y = length b \\<and>\n     a \\<bullet> x = b \\<bullet> y \\<and>\n     (\\<forall>i<length a. x ! i \\<le> Max (set b)) \\<and>\n     (\\<forall>j<length b. y ! j \\<le> Max (set a))}", "by auto"], ["", "lemma set_minimize_check_generate:\n  \"set (minimize (check_generate a b)) =\n    {(x, y)\\<in>set (check_generate a b). \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v <\\<^sub>v x @ y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (minimize (check_generate a b)) =\n    {(x, y).\n     (x, y) \\<in> set (check_generate a b) \\<and>\n     \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v\n                <\\<^sub>v x @ y)}", "unfolding minimize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (minimize_wrt (\\<lambda>(x, y) (u, v). \\<not> x @ y <\\<^sub>v u @ v)\n          (check_generate a b)) =\n    {(x, y).\n     (x, y) \\<in> set (check_generate a b) \\<and>\n     \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v\n                <\\<^sub>v x @ y)}", "by (subst set_minimize_wrt [OF _ sorted_wrt_check_generate]) (auto dest: rlex_not_sym less_imp_rlex)"], ["", "lemma set_solutions_iff:\n  \"set (solutions a b) =\n    {(x, y) \\<in> set (check_generate a b). \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v <\\<^sub>v x @ y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (solutions a b) =\n    {(x, y).\n     (x, y) \\<in> set (check_generate a b) \\<and>\n     \\<not> (\\<exists>(u, v)\\<in>set (check_generate a b). u @ v\n                <\\<^sub>v x @ y)}", "by (auto simp: solutions_def set_minimize_check_generate)"], ["", "subsubsection \\<open>Completeness: every minimal solution is generated by \\<open>solutions\\<close>\\<close>"], ["", "lemma (in hlde) solutions_complete:\n  \"Minimal_Solutions \\<subseteq> set (solutions a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.Minimal_Solutions \\<subseteq> set (solutions a b)", "proof (rule subrelI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "let ?A = \"Max (set b)\" and ?B = \"Max (set a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "assume min: \"(x, y) \\<in> Minimal_Solutions\""], ["proof (state)\nthis:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> local.Minimal_Solutions", "have \"(x, y) \\<in> set (check a b (generate ?A ?B m n))\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))", "by (auto simp: Minimal_Solutions_alt_def set_check_generate less_eq_def in_Solutions_iff)"], ["proof (state)\nthis:\n  (x, y) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "moreover"], ["proof (state)\nthis:\n  (x, y) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "have \"\\<forall>(u, v) \\<in> set (check a b (generate ?A ?B m n)). \\<not> u @ v <\\<^sub>v x @ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(u, v)\n             \\<in>set (check a b\n                        (generate (Max (set b)) (Max (set a)) m n)).\n       \\<not> u @ v <\\<^sub>v x @ y", "using min and no0"], ["proof (prove)\nusing this:\n  (x, y) \\<in> local.Minimal_Solutions\n  0 \\<notin> set a\n  0 \\<notin> set b\n\ngoal (1 subgoal):\n 1. \\<forall>(u, v)\n             \\<in>set (check a b\n                        (generate (Max (set b)) (Max (set a)) m n)).\n       \\<not> u @ v <\\<^sub>v x @ y", "by (auto simp: check_def set_generate neq_0_iff' set_gen nonzero_iff dest!: Minimal_Solutions_min)"], ["proof (state)\nthis:\n  \\<forall>(u, v)\n           \\<in>set (check a b (generate (Max (set b)) (Max (set a)) m n)).\n     \\<not> u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solutions a b)", "ultimately"], ["proof (chain)\npicking this:\n  (x, y) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))\n  \\<forall>(u, v)\n           \\<in>set (check a b (generate (Max (set b)) (Max (set a)) m n)).\n     \\<not> u @ v <\\<^sub>v x @ y", "show \"(x, y) \\<in> set (solutions a b)\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))\n  \\<forall>(u, v)\n           \\<in>set (check a b (generate (Max (set b)) (Max (set a)) m n)).\n     \\<not> u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (solutions a b)", "by (auto simp: set_solutions_iff)"], ["proof (state)\nthis:\n  (x, y) \\<in> set (solutions a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Correctness: \\<open>solutions\\<close> generates only minimal solutions.\\<close>"], ["", "lemma (in hlde) solutions_sound:\n  \"set (solutions a b) \\<subseteq> Minimal_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (solutions a b) \\<subseteq> local.Minimal_Solutions", "proof (rule subrelI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solutions a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solutions a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "assume sol: \"(x, y) \\<in> set (solutions a b)\""], ["proof (state)\nthis:\n  (x, y) \\<in> set (solutions a b)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solutions a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "show \"(x, y) \\<in> Minimal_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Minimal_Solutions", "proof (rule Minimal_SolutionsI')"], ["proof (state)\ngoal (3 subgoals):\n 1. (x, y) \\<in> local.Solutions\n 2. nonzero x\n 3. \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n               <\\<^sub>v x @ y)", "show *: \"(x, y) \\<in> Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Solutions", "using sol"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Solutions", "by (auto simp: set_solutions_iff in_Solutions_iff check_def set_generate set_gen)"], ["proof (state)\nthis:\n  (x, y) \\<in> local.Solutions\n\ngoal (2 subgoals):\n 1. nonzero x\n 2. \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n               <\\<^sub>v x @ y)", "show \"nonzero x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonzero x", "using sol and nonzero_iff and replicate_eqI and nonzero_Solutions_iff [OF *]"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (solutions a b)\n  nonzero ?xs = (\\<exists>x\\<in>set ?xs. x \\<noteq> (0::?'a))\n  \\<lbrakk>length ?xs = ?n;\n   \\<And>y. y \\<in> set ?xs \\<Longrightarrow> y = ?x\\<rbrakk>\n  \\<Longrightarrow> ?xs = replicate ?n ?x\n  nonzero x = nonzero y\n\ngoal (1 subgoal):\n 1. nonzero x", "by (fastforce simp: solutions_def minimize_def check_def set_generate set_gen dest!: minimize_wrtD)"], ["proof (state)\nthis:\n  nonzero x\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n               <\\<^sub>v x @ y)", "show \"\\<not> (\\<exists>(u, v)\\<in>Minimal_Solutions. u @ v <\\<^sub>v x @ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n               <\\<^sub>v x @ y)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "have min_cg: \"(x, y) \\<in> set (minimize (check_generate a b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> set (minimize\n                (check a b (generate (Max (set b)) (Max (set a)) m n)))", "using sol"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y)\n    \\<in> set (minimize\n                (check a b (generate (Max (set b)) (Max (set a)) m n)))", "by (auto simp: solutions_def)"], ["proof (state)\nthis:\n  (x, y)\n  \\<in> set (minimize\n              (check a b (generate (Max (set b)) (Max (set a)) m n)))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "note * = in_minimize_wrt_False [OF _ sorted_wrt_check_generate min_cg [unfolded minimize_def]]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case ?y of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   ?y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   ?y \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n));\n   ?y \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "assume \"\\<exists>(u, v)\\<in>Minimal_Solutions. u @ v <\\<^sub>v x @ y\""], ["proof (state)\nthis:\n  \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v <\\<^sub>v x @ y", "obtain u and v where \"(u, v) \\<in> Minimal_Solutions\" and less: \"u @ v <\\<^sub>v x @ y\""], ["proof (prove)\nusing this:\n  \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>(u, v) \\<in> local.Minimal_Solutions;\n         u @ v <\\<^sub>v x @ y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y", "have \"(u, v) \\<in> set (solutions a b)\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> set (solutions a b)", "by (auto intro: solutions_complete [THEN subsetD])"], ["proof (state)\nthis:\n  (u, v) \\<in> set (solutions a b)\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> set (solutions a b)", "have \"(u, v) \\<in> set (check_generate a b)\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> set (solutions a b)\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))", "by (auto simp: solutions_def minimize_def dest: minimize_wrtD)"], ["proof (state)\nthis:\n  (u, v) \\<in> set (check a b (generate (Max (set b)) (Max (set a)) m n))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "from * [OF _ _ _ this] and less"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case (u, v) of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   (u, v) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   (u, v) \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n  u @ v <\\<^sub>v x @ y", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case (u, v) of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   (u, v) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   (u, v) \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n  u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. False", "using less_imp_rlex and rlex_not_sym"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case (u, v) of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   (u, v) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   (u, v) \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n  u @ v <\\<^sub>v x @ y\n  ?xs <\\<^sub>v ?ys \\<Longrightarrow>\n  ?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys\n  ?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys \\<Longrightarrow>\n  \\<not> ?ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?xs\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n             <\\<^sub>v x @ y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in hlde) set_solutions [simp]: \"set (solutions a b) = Minimal_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (solutions a b) = local.Minimal_Solutions", "using solutions_sound and solutions_complete"], ["proof (prove)\nusing this:\n  set (solutions a b) \\<subseteq> local.Minimal_Solutions\n  local.Minimal_Solutions \\<subseteq> set (solutions a b)\n\ngoal (1 subgoal):\n 1. set (solutions a b) = local.Minimal_Solutions", "by blast"], ["", "end"]]}