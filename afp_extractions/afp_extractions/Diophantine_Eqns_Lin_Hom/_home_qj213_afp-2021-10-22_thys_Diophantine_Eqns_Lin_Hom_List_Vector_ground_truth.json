{"file_name": "/home/qj213/afp-2021-10-22/thys/Diophantine_Eqns_Lin_Hom/List_Vector.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Diophantine_Eqns_Lin_Hom", "problem_names": ["lemma lex_lengthD: \"(x, y) \\<in> lex P \\<Longrightarrow> length x = length y\"", "lemma lex_take_index:\n  assumes \"(xs, ys) \\<in> lex r\"\n  obtains i where \"length ys = length xs\"\n    and \"i < length xs\" and \"take i xs = take i ys\"\n    and \"(xs ! i, ys ! i) \\<in> r\"", "lemma mods_with_nats:\n  assumes \"(v::nat) > w\"\n    and \"(v * b) mod a = (w * b) mod a\"\n  shows \"((v - w) * b) mod a = 0\"", "lemma rep_upd_unit:\n  assumes \"x = (zeroes n)[i := a]\"\n  shows \"\\<forall>j < length x. (j \\<noteq> i \\<longrightarrow> x ! j = 0) \\<and> (j = i \\<longrightarrow> x ! j = a)\"", "lemma nonzero_append [simp]:\n  \"nonzero (xs @ ys) \\<longleftrightarrow> nonzero xs \\<or> nonzero ys\"", "lemma dotprod_code [code]:\n  \"xs \\<bullet> ys = sum_list (map (\\<lambda>(x, y). x * y) (zip xs ys))\"", "lemma dotprod_commute:\n  assumes \"length xs = length ys\"\n  shows \"xs \\<bullet> ys = ys \\<bullet> xs\"", "lemma dotprod_Nil [simp]: \"[] \\<bullet> [] = 0\"", "lemma dotprod_Cons [simp]:\n  \"(x # xs) \\<bullet> (y # ys) = x * y + xs \\<bullet> ys\"", "lemma dotprod_1_right [simp]:\n  \"xs \\<bullet> replicate (length xs) 1 = sum_list xs\"", "lemma dotprod_0_right [simp]:\n  \"xs \\<bullet> zeroes (length xs) = 0\"", "lemma dotprod_unit [simp]:\n  assumes \"length a = n\"\n    and \"k < n\"\n  shows \"a \\<bullet> (zeroes n)[k := zk] = a ! k * zk\"", "lemma dotprod_gt0:\n  assumes \"length x = length y\" and \"\\<exists>i<length y. x ! i > 0 \\<and> y ! i > 0\"\n  shows \"x \\<bullet> y > 0\"", "lemma dotprod_gt0D:\n  assumes \"length x = length y\"\n    and \"x \\<bullet> y > 0\"\n  shows \"\\<exists>i<length y. x ! i > 0 \\<and> y ! i > 0\"", "lemma dotprod_gt0_iff [iff]:\n  assumes \"length x = length y\"\n  shows \"x \\<bullet> y > 0 \\<longleftrightarrow> (\\<exists>i<length y. x ! i > 0 \\<and> y ! i > 0)\"", "lemma dotprod_append:\n  assumes \"length a = length b\"\n  shows\"(a @ x) \\<bullet> (b @ y) = a \\<bullet> b + x \\<bullet> y\"", "lemma dotprod_le_take:\n  assumes \"length a = length b\"\n    and \"k \\<le> length a\"\n  shows\"take k a \\<bullet> take k b \\<le> a \\<bullet> b\"", "lemma dotprod_le_drop:\n  assumes \"length a = length b\"\n    and \"k \\<le> length a\"\n  shows \"drop k a \\<bullet> drop k b \\<le> a \\<bullet> b\"", "lemma dotprod_is_0 [simp]:\n  assumes \"length x = length y\"\n  shows \"x \\<bullet> y = 0 \\<longleftrightarrow> (\\<forall>i<length y. x ! i = 0 \\<or> y ! i = 0)\"", "lemma dotprod_eq_0_iff:\n  assumes \"length x = length a\"\n    and \"0 \\<notin> set a\"\n  shows \"x \\<bullet> a = 0 \\<longleftrightarrow> (\\<forall>e \\<in> set x. e = 0)\"", "lemma dotprod_eq_nonzero_iff:\n  assumes \"a \\<bullet> x = b \\<bullet> y\" and \"length x = length a\" and \"length y = length b\"\n    and \"0 \\<notin> set a\" and \"0 \\<notin> set b\"\n  shows \"nonzero x \\<longleftrightarrow> nonzero y\"", "lemma eq_0_iff:\n  \"xs = zeroes n \\<longleftrightarrow> length xs = n \\<and> (\\<forall>x\\<in>set xs. x = 0)\"", "lemma not_nonzero_iff: \"\\<not> nonzero x \\<longleftrightarrow> x = zeroes (length x)\"", "lemma neq_0_iff':\n  \"xs \\<noteq> zeroes n \\<longleftrightarrow> length xs \\<noteq> n \\<or> (\\<exists>x\\<in>set xs. x > 0)\"", "lemma dotprod_pointwise_le:\n  assumes \"length as = length xs\"\n    and \"i < length as\"\n  shows \"as ! i * xs ! i \\<le> as \\<bullet> xs\"", "lemma replicate_dotprod:\n  assumes \"length y = n\"\n  shows \"replicate n x \\<bullet> y = x * sum_list y\"", "lemma less_eqI [intro?]: \"length xs = length ys \\<Longrightarrow> \\<forall>i<length xs. xs ! i \\<le> ys ! i \\<Longrightarrow> xs \\<le>\\<^sub>v ys\"", "lemma le0 [simp, intro]: \"zeroes (length xs) \\<le>\\<^sub>v xs\"", "lemma le_list_update [simp]:\n  assumes \"xs \\<le>\\<^sub>v ys\" and \"i < length ys\" and \"z \\<le> ys ! i\"\n  shows \"xs[i := z] \\<le>\\<^sub>v ys\"", "lemma le_Cons: \"x # xs \\<le>\\<^sub>v y # ys \\<longleftrightarrow> x \\<le> y \\<and> xs \\<le>\\<^sub>v ys\"", "lemma zero_less:\n  assumes \"nonzero x\"\n  shows \"zeroes (length x) <\\<^sub>v x\"", "lemma le_append:\n  assumes \"length xs = length vs\"\n  shows \"xs @ ys \\<le>\\<^sub>v vs @ ws \\<longleftrightarrow> xs \\<le>\\<^sub>v vs \\<and> ys \\<le>\\<^sub>v ws\"", "lemma less_Cons:\n  \"(x # xs) <\\<^sub>v (y # ys) \\<longleftrightarrow> length xs = length ys \\<and> (x \\<le> y \\<and> xs <\\<^sub>v ys \\<or> x < y \\<and> xs \\<le>\\<^sub>v ys)\"", "lemma le_length [dest]:\n  assumes \"xs \\<le>\\<^sub>v ys\"\n  shows \"length xs = length ys\"", "lemma less_length [dest]:\n  assumes \"x <\\<^sub>v y\"\n  shows \"length x = length y\"", "lemma less_append:\n  assumes \"xs <\\<^sub>v vs \" and \"ys \\<le>\\<^sub>v ws\"\n  shows \"xs @ ys <\\<^sub>v vs @ ws\"", "lemma less_appendD:\n  assumes \"xs @ ys <\\<^sub>v vs @ ws\"\n    and \"length xs = length vs\"\n  shows \"xs <\\<^sub>v vs \\<or> ys <\\<^sub>v ws\"", "lemma less_append_cases:\n  assumes \"xs @ ys <\\<^sub>v vs @ ws\" and \"length xs = length vs\"\n  obtains \"xs <\\<^sub>v vs\" and \"ys \\<le>\\<^sub>v ws\" | \"xs \\<le>\\<^sub>v vs\" and \"ys <\\<^sub>v ws\"", "lemma less_append_swap:\n  assumes \"x @ y <\\<^sub>v u @ v\"\n    and \"length x = length u\"\n  shows \"y @ x <\\<^sub>v v @ u\"", "lemma le_sum_list_less:\n  assumes \"xs \\<le>\\<^sub>v ys\"\n    and \"sum_list xs < sum_list ys\"\n  shows \"xs <\\<^sub>v ys\"", "lemma dotprod_le_right:\n  assumes \"v \\<le>\\<^sub>v w\"\n    and \"length b = length w\"\n  shows \"b \\<bullet> v \\<le> b \\<bullet> w\"", "lemma dotprod_pointwise_le_right:\n  assumes \"length z = length u\"\n    and \"length u = length v\"\n    and \"\\<forall>i<length v. u ! i \\<le> v ! i\"\n  shows \"z \\<bullet> u \\<le> z \\<bullet> v\"", "lemma dotprod_le_left:\n  assumes \"v \\<le>\\<^sub>v w\"\n    and \"length b = length w\"\n  shows \"v \\<bullet> b \\<le> w \\<bullet> b \"", "lemma dotprod_le:\n  assumes \"x \\<le>\\<^sub>v u\" and \"y \\<le>\\<^sub>v v\"\n    and \"length y = length x\" and \"length v = length u\"\n  shows \"x \\<bullet> y \\<le> u \\<bullet> v\"", "lemma dotprod_less_left:\n  assumes \"length b = length w\"\n    and \"0 \\<notin> set b\"\n    and \"v <\\<^sub>v w\"\n  shows \"v \\<bullet> b < w \\<bullet> b\"", "lemma le_append_swap:\n  assumes \"length y = length v\"\n    and \"x @ y \\<le>\\<^sub>v w @ v\"\n  shows \"y @ x \\<le>\\<^sub>v v @ w\"", "lemma le_append_swap_iff:\n  assumes \"length y = length v\"\n  shows \"y @ x \\<le>\\<^sub>v v @ w  \\<longleftrightarrow> x @ y \\<le>\\<^sub>v w @ v\"", "lemma unit_less:\n  assumes \"i < n\"\n    and \"x <\\<^sub>v (zeroes n)[i := b]\"\n  shows \"x ! i < b \\<and> (\\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0)\"", "lemma le_sum_list_mono:\n  assumes \"xs \\<le>\\<^sub>v ys\"\n  shows \"sum_list xs \\<le> sum_list ys\"", "lemma sum_list_less_diff_Ex:\n  assumes \"u \\<le>\\<^sub>v y\"\n    and \"sum_list u < sum_list y\"\n  shows \"\\<exists>i<length y. u ! i < y ! i\"", "lemma less_vec_sum_list_less:\n  assumes \"v <\\<^sub>v w\"\n  shows \"sum_list v < sum_list w\"", "lemma maxne0_le_Max:\n  \"maxne0 x a \\<le> Max (set a)\"", "lemma maxne0_Nil [simp]:\n  \"maxne0 [] as = 0\"\n  \"maxne0 xs [] = 0\"", "lemma maxne0_Cons [simp]:\n  \"maxne0 (x # xs) (a # as) =\n    (if length xs = length as then\n      (if x = 0 then maxne0 xs as else max a (maxne0 xs as))\n    else 0)\"", "lemma maxne0_times_sum_list_gt_dotprod:\n  assumes \"length b = length ys\"\n  shows \"maxne0 ys b * sum_list ys \\<ge> b \\<bullet> ys\"", "lemma max_times_sum_list_gt_dotprod:\n  assumes \"length b = length ys\"\n  shows \"Max (set b) * sum_list ys \\<ge> b \\<bullet> ys\"", "lemma maxne0_mono:\n  assumes \"y \\<le>\\<^sub>v x\"\n  shows \"maxne0 y a \\<le> maxne0 x a\"", "lemma all_leq_Max:\n  assumes \"x \\<le>\\<^sub>v y\"\n    and \"x \\<noteq> []\"\n  shows \"\\<forall>xi \\<in> set x. xi \\<le> Max (set y)\"", "lemma le_not_less_replicate:\n  \"\\<forall>x\\<in>set xs. x \\<le> b \\<Longrightarrow> \\<not> xs <\\<^sub>v replicate (length xs) b \\<Longrightarrow> xs = replicate (length xs) b\"", "lemma le_replicateI: \"\\<forall>x\\<in>set xs. x \\<le> b \\<Longrightarrow> xs \\<le>\\<^sub>v replicate (length xs) b\"", "lemma le_take:\n  assumes \"x \\<le>\\<^sub>v y\" and \"i \\<le> length x\" shows \"take i x \\<le>\\<^sub>v take i y\"", "lemma wf_less:\n  \"wf {(x, y). x <\\<^sub>v y}\"", "lemma vdiff_Nil [simp]: \"[] -\\<^sub>v [] = []\"", "lemma upt_Cons_conv:\n  assumes \"j < n\"\n  shows \"[j..<n] = j # [j+1..<n]\"", "lemma map_upt_Suc: \"map f [Suc m ..< Suc n] = map (f \\<circ> Suc) [m ..< n]\"", "lemma vdiff_Cons [simp]:\n  \"(x # xs) -\\<^sub>v (y # ys) = (x - y) # (xs -\\<^sub>v ys)\"", "lemma vdiff_alt_def:\n  assumes \"length w = length v\"\n  shows \"w -\\<^sub>v v = map (\\<lambda>(x, y). x - y) (zip w v)\"", "lemma vdiff_dotprod_distr:\n  assumes \"length b = length w\"\n    and \"v \\<le>\\<^sub>v w\"\n  shows \"(w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b\"", "lemma sum_list_vdiff_distr [simp]:\n  assumes \"v \\<le>\\<^sub>v u\"\n  shows \"sum_list (u -\\<^sub>v v) = sum_list u - sum_list v\"", "lemma vdiff_le:\n  assumes \"v \\<le>\\<^sub>v w\"\n    and \"length v = length x\"\n  shows \"v -\\<^sub>v x \\<le>\\<^sub>v w\"", "lemma mods_with_vec:\n  assumes \"v <\\<^sub>v w\"\n    and \"0 \\<notin> set b\"\n    and \"length b = length w\"\n    and \"(v \\<bullet> b) mod a = (w \\<bullet> b) mod a\"\n  shows \"((w -\\<^sub>v v) \\<bullet> b) mod a = 0\"", "lemma mods_with_vec_2:\n  assumes \"v <\\<^sub>v w\"\n    and \"0 \\<notin> set b\"\n    and \"length b = length w\"\n    and \"(b \\<bullet> v) mod a = (b \\<bullet> w) mod a\"\n  shows \"(b \\<bullet> (w -\\<^sub>v v)) mod a = 0\"", "lemma rev_le [simp]:\n  \"rev xs \\<le>\\<^sub>v rev ys \\<longleftrightarrow> xs \\<le>\\<^sub>v ys\"", "lemma rev_less [simp]:\n  \"rev xs <\\<^sub>v rev ys \\<longleftrightarrow> xs <\\<^sub>v ys\"", "lemma less_imp_lex:\n  assumes \"xs <\\<^sub>v ys\" shows \"xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\"", "lemma less_imp_rlex:\n  assumes \"xs <\\<^sub>v ys\" shows \"xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys\"", "lemma lex_not_sym:\n  assumes \"xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\"\n  shows \"\\<not> ys <\\<^sub>l\\<^sub>e\\<^sub>x xs\"", "lemma rlex_not_sym:\n  assumes \"xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys\"\n  shows \"\\<not> ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\"", "lemma lex_trans:\n  assumes \"x <\\<^sub>l\\<^sub>e\\<^sub>x y\" and \"y <\\<^sub>l\\<^sub>e\\<^sub>x z\"\n  shows \"x <\\<^sub>l\\<^sub>e\\<^sub>x z\"", "lemma rlex_trans:\n  assumes \"x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y\" and \"y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z\"\n  shows \"x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z\"", "lemma lex_append_rightD:\n  assumes \"xs @ us <\\<^sub>l\\<^sub>e\\<^sub>x ys @ vs\" and \"length xs = length ys\"\n    and \"\\<not> xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\"\n  shows \"ys = xs \\<and> us <\\<^sub>l\\<^sub>e\\<^sub>x vs\"", "lemma rlex_Cons:\n  \"x # xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y # ys \\<longleftrightarrow> xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys \\<or> ys = xs \\<and> x < y\" (is \"?A = ?B\")", "lemma rlex_irrefl:\n  \"\\<not> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x x\"", "lemma not_le_code [code_unfold]: \"\\<not> xs \\<le>\\<^sub>v ys \\<longleftrightarrow> exists2 True (>) xs ys\""], "translations": [["", "lemma lex_lengthD: \"(x, y) \\<in> lex P \\<Longrightarrow> length x = length y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> lex P \\<Longrightarrow> length x = length y", "by (auto simp: lexord_lex)"], ["", "(*TODO: move*)"], ["", "lemma lex_take_index:\n  assumes \"(xs, ys) \\<in> lex r\"\n  obtains i where \"length ys = length xs\"\n    and \"i < length xs\" and \"take i xs = take i ys\"\n    and \"(xs ! i, ys ! i) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>length ys = length xs; i < length xs;\n         take i xs = take i ys; (xs ! i, ys ! i) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>length ys = length xs; i < length xs;\n         take i xs = take i ys; (xs ! i, ys ! i) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain n us x xs' y ys' where \"(xs, ys) \\<in> lexn r n\" and \"length xs = n\" and \"length ys = n\"\n    and \"xs = us @ x # xs'\" and \"ys = us @ y # ys'\" and \"(x, y) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n us x xs' y ys'.\n        \\<lbrakk>(xs, ys) \\<in> lexn r n; length xs = n; length ys = n;\n         xs = us @ x # xs'; ys = us @ y # ys'; (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> lex r\n\ngoal (1 subgoal):\n 1. (\\<And>n us x xs' y ys'.\n        \\<lbrakk>(xs, ys) \\<in> lexn r n; length xs = n; length ys = n;\n         xs = us @ x # xs'; ys = us @ y # ys'; (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: lex_def lexn_conv)"], ["proof (state)\nthis:\n  (xs, ys) \\<in> lexn r n\n  length xs = n\n  length ys = n\n  xs = us @ x # xs'\n  ys = us @ y # ys'\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>length ys = length xs; i < length xs;\n         take i xs = take i ys; (xs ! i, ys ! i) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  (xs, ys) \\<in> lexn r n\n  length xs = n\n  length ys = n\n  xs = us @ x # xs'\n  ys = us @ y # ys'\n  (x, y) \\<in> r", "show ?thesis"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> lexn r n\n  length xs = n\n  length ys = n\n  xs = us @ x # xs'\n  ys = us @ y # ys'\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. thesis", "by (intro that [of \"length us\"]) auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "(*TODO: move*)"], ["", "lemma mods_with_nats:\n  assumes \"(v::nat) > w\"\n    and \"(v * b) mod a = (w * b) mod a\"\n  shows \"((v - w) * b) mod a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v - w) * b mod a = 0", "by (metis add_diff_cancel_left' assms left_diff_distrib'\n      less_imp_le mod_mult_self1_is_0 mult_le_mono1 nat_mod_eq_lemma)\n\n\\<comment> \\<open>The 0-vector of length \\<open>n\\<close>.\\<close>"], ["", "abbreviation zeroes :: \"nat \\<Rightarrow> nat list\"\n  where\n    \"zeroes n \\<equiv> replicate n 0\""], ["", "lemma rep_upd_unit:\n  assumes \"x = (zeroes n)[i := a]\"\n  shows \"\\<forall>j < length x. (j \\<noteq> i \\<longrightarrow> x ! j = 0) \\<and> (j = i \\<longrightarrow> x ! j = a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length x.\n       (j \\<noteq> i \\<longrightarrow> x ! j = 0) \\<and>\n       (j = i \\<longrightarrow> x ! j = a)", "using assms"], ["proof (prove)\nusing this:\n  x = (zeroes n)[i := a]\n\ngoal (1 subgoal):\n 1. \\<forall>j<length x.\n       (j \\<noteq> i \\<longrightarrow> x ! j = 0) \\<and>\n       (j = i \\<longrightarrow> x ! j = a)", "by simp"], ["", "definition nonzero_iff: \"nonzero xs \\<longleftrightarrow> (\\<exists>x\\<in>set xs. x \\<noteq> 0)\""], ["", "lemma nonzero_append [simp]:\n  \"nonzero (xs @ ys) \\<longleftrightarrow> nonzero xs \\<or> nonzero ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonzero (xs @ ys) = (nonzero xs \\<or> nonzero ys)", "by (auto simp: nonzero_iff)"], ["", "subsection \\<open>The Inner Product\\<close>"], ["", "definition dotprod :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> nat\" (infixl \"\\<bullet>\" 70)\n  where\n    \"xs \\<bullet> ys = (\\<Sum>i<min (length xs) (length ys). xs ! i * ys ! i)\""], ["", "lemma dotprod_code [code]:\n  \"xs \\<bullet> ys = sum_list (map (\\<lambda>(x, y). x * y) (zip xs ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<bullet> ys = sum_list (map2 (*) xs ys)", "by (auto simp: dotprod_def sum_list_sum_nth lessThan_atLeast0)"], ["", "lemma dotprod_commute:\n  assumes \"length xs = length ys\"\n  shows \"xs \\<bullet> ys = ys \\<bullet> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<bullet> ys = ys \\<bullet> xs", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. xs \\<bullet> ys = ys \\<bullet> xs", "by (auto simp: dotprod_def mult.commute)"], ["", "lemma dotprod_Nil [simp]: \"[] \\<bullet> [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<bullet> [] = 0", "by (simp add: dotprod_def)"], ["", "lemma dotprod_Cons [simp]:\n  \"(x # xs) \\<bullet> (y # ys) = x * y + xs \\<bullet> ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs) \\<bullet> (y # ys) = x * y + xs \\<bullet> ys", "unfolding dotprod_def and length_Cons and min_Suc_Suc and sum.lessThan_Suc_shift"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs) ! 0 * (y # ys) ! 0 +\n    (\\<Sum>i<min (length xs) (length ys).\n        (x # xs) ! Suc i * (y # ys) ! Suc i) =\n    x * y + (\\<Sum>i<min (length xs) (length ys). xs ! i * ys ! i)", "by auto"], ["", "lemma dotprod_1_right [simp]:\n  \"xs \\<bullet> replicate (length xs) 1 = sum_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<bullet> replicate (length xs) 1 = sum_list xs", "by (induct xs) (simp_all)"], ["", "lemma dotprod_0_right [simp]:\n  \"xs \\<bullet> zeroes (length xs) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<bullet> zeroes (length xs) = 0", "by (induct xs) (simp_all)"], ["", "lemma dotprod_unit [simp]:\n  assumes \"length a = n\"\n    and \"k < n\"\n  shows \"a \\<bullet> (zeroes n)[k := zk] = a ! k * zk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> (zeroes n)[k := zk] = a ! k * zk", "using assms"], ["proof (prove)\nusing this:\n  length a = n\n  k < n\n\ngoal (1 subgoal):\n 1. a \\<bullet> (zeroes n)[k := zk] = a ! k * zk", "by (induct a arbitrary: k n) (auto split: nat.splits)"], ["", "lemma dotprod_gt0:\n  assumes \"length x = length y\" and \"\\<exists>i<length y. x ! i > 0 \\<and> y ! i > 0\"\n  shows \"x \\<bullet> y > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<bullet> y", "using assms"], ["proof (prove)\nusing this:\n  length x = length y\n  \\<exists>i<length y. 0 < x ! i \\<and> 0 < y ! i\n\ngoal (1 subgoal):\n 1. 0 < x \\<bullet> y", "by (induct x y rule: list_induct2) (fastforce simp: nth_Cons split: nat.splits)+"], ["", "lemma dotprod_gt0D:\n  assumes \"length x = length y\"\n    and \"x \\<bullet> y > 0\"\n  shows \"\\<exists>i<length y. x ! i > 0 \\<and> y ! i > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i<length y. 0 < x ! i \\<and> 0 < y ! i", "using assms"], ["proof (prove)\nusing this:\n  length x = length y\n  0 < x \\<bullet> y\n\ngoal (1 subgoal):\n 1. \\<exists>i<length y. 0 < x ! i \\<and> 0 < y ! i", "by (induct x y rule: list_induct2) (auto simp: Ex_less_Suc2)"], ["", "lemma dotprod_gt0_iff [iff]:\n  assumes \"length x = length y\"\n  shows \"x \\<bullet> y > 0 \\<longleftrightarrow> (\\<exists>i<length y. x ! i > 0 \\<and> y ! i > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < x \\<bullet> y) = (\\<exists>i<length y. 0 < x ! i \\<and> 0 < y ! i)", "using assms and dotprod_gt0D and dotprod_gt0"], ["proof (prove)\nusing this:\n  length x = length y\n  \\<lbrakk>length ?x = length ?y; 0 < ?x \\<bullet> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i<length ?y. 0 < ?x ! i \\<and> 0 < ?y ! i\n  \\<lbrakk>length ?x = length ?y;\n   \\<exists>i<length ?y. 0 < ?x ! i \\<and> 0 < ?y ! i\\<rbrakk>\n  \\<Longrightarrow> 0 < ?x \\<bullet> ?y\n\ngoal (1 subgoal):\n 1. (0 < x \\<bullet> y) = (\\<exists>i<length y. 0 < x ! i \\<and> 0 < y ! i)", "by blast"], ["", "lemma dotprod_append:\n  assumes \"length a = length b\"\n  shows\"(a @ x) \\<bullet> (b @ y) = a \\<bullet> b + x \\<bullet> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a @ x) \\<bullet> (b @ y) = a \\<bullet> b + x \\<bullet> y", "using assms"], ["proof (prove)\nusing this:\n  length a = length b\n\ngoal (1 subgoal):\n 1. (a @ x) \\<bullet> (b @ y) = a \\<bullet> b + x \\<bullet> y", "by (induct a b rule: list_induct2) auto"], ["", "lemma dotprod_le_take:\n  assumes \"length a = length b\"\n    and \"k \\<le> length a\"\n  shows\"take k a \\<bullet> take k b \\<le> a \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take k a \\<bullet> take k b \\<le> a \\<bullet> b", "using assms and append_take_drop_id [of k a] and append_take_drop_id [of k b]"], ["proof (prove)\nusing this:\n  length a = length b\n  k \\<le> length a\n  take k a @ drop k a = a\n  take k b @ drop k b = b\n\ngoal (1 subgoal):\n 1. take k a \\<bullet> take k b \\<le> a \\<bullet> b", "by (metis add_right_cancel leI length_append length_drop not_add_less1 dotprod_append)"], ["", "lemma dotprod_le_drop:\n  assumes \"length a = length b\"\n    and \"k \\<le> length a\"\n  shows \"drop k a \\<bullet> drop k b \\<le> a \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop k a \\<bullet> drop k b \\<le> a \\<bullet> b", "using assms and append_take_drop_id [of k a] and append_take_drop_id [of k b]"], ["proof (prove)\nusing this:\n  length a = length b\n  k \\<le> length a\n  take k a @ drop k a = a\n  take k b @ drop k b = b\n\ngoal (1 subgoal):\n 1. drop k a \\<bullet> drop k b \\<le> a \\<bullet> b", "by (metis dotprod_append length_take order_refl trans_le_add2)"], ["", "lemma dotprod_is_0 [simp]:\n  assumes \"length x = length y\"\n  shows \"x \\<bullet> y = 0 \\<longleftrightarrow> (\\<forall>i<length y. x ! i = 0 \\<or> y ! i = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<bullet> y = 0) = (\\<forall>i<length y. x ! i = 0 \\<or> y ! i = 0)", "using assms"], ["proof (prove)\nusing this:\n  length x = length y\n\ngoal (1 subgoal):\n 1. (x \\<bullet> y = 0) = (\\<forall>i<length y. x ! i = 0 \\<or> y ! i = 0)", "by (metis dotprod_gt0_iff neq0_conv)"], ["", "lemma dotprod_eq_0_iff:\n  assumes \"length x = length a\"\n    and \"0 \\<notin> set a\"\n  shows \"x \\<bullet> a = 0 \\<longleftrightarrow> (\\<forall>e \\<in> set x. e = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<bullet> a = 0) = (\\<forall>e\\<in>set x. e = 0)", "using assms"], ["proof (prove)\nusing this:\n  length x = length a\n  0 \\<notin> set a\n\ngoal (1 subgoal):\n 1. (x \\<bullet> a = 0) = (\\<forall>e\\<in>set x. e = 0)", "by (fastforce simp: in_set_conv_nth)"], ["", "lemma dotprod_eq_nonzero_iff:\n  assumes \"a \\<bullet> x = b \\<bullet> y\" and \"length x = length a\" and \"length y = length b\"\n    and \"0 \\<notin> set a\" and \"0 \\<notin> set b\"\n  shows \"nonzero x \\<longleftrightarrow> nonzero y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonzero x = nonzero y", "using assms"], ["proof (prove)\nusing this:\n  a \\<bullet> x = b \\<bullet> y\n  length x = length a\n  length y = length b\n  0 \\<notin> set a\n  0 \\<notin> set b\n\ngoal (1 subgoal):\n 1. nonzero x = nonzero y", "by (auto simp: nonzero_iff) (metis dotprod_commute dotprod_eq_0_iff neq0_conv)+"], ["", "lemma eq_0_iff:\n  \"xs = zeroes n \\<longleftrightarrow> length xs = n \\<and> (\\<forall>x\\<in>set xs. x = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = zeroes n) = (length xs = n \\<and> (\\<forall>x\\<in>set xs. x = 0))", "using in_set_replicate [of _ n 0] and replicate_eqI [of xs n 0]"], ["proof (prove)\nusing this:\n  (?x \\<in> set (replicate n (0::?'a1))) =\n  (?x = (0::?'a1) \\<and> n \\<noteq> 0)\n  \\<lbrakk>length xs = n;\n   \\<And>y. y \\<in> set xs \\<Longrightarrow> y = 0\\<rbrakk>\n  \\<Longrightarrow> xs = zeroes n\n\ngoal (1 subgoal):\n 1. (xs = zeroes n) = (length xs = n \\<and> (\\<forall>x\\<in>set xs. x = 0))", "by auto"], ["", "lemma not_nonzero_iff: \"\\<not> nonzero x \\<longleftrightarrow> x = zeroes (length x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> nonzero x) = (x = zeroes (length x))", "by (auto simp: nonzero_iff replicate_length_same eq_0_iff)"], ["", "lemma neq_0_iff':\n  \"xs \\<noteq> zeroes n \\<longleftrightarrow> length xs \\<noteq> n \\<or> (\\<exists>x\\<in>set xs. x > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<noteq> zeroes n) =\n    (length xs \\<noteq> n \\<or> (\\<exists>x\\<in>set xs. 0 < x))", "by (auto simp: eq_0_iff)"], ["", "lemma dotprod_pointwise_le:\n  assumes \"length as = length xs\"\n    and \"i < length as\"\n  shows \"as ! i * xs ! i \\<le> as \\<bullet> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as ! i * xs ! i \\<le> as \\<bullet> xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. as ! i * xs ! i \\<le> as \\<bullet> xs", "have \"as \\<bullet> xs = (\\<Sum>i<min (length as) (length xs). as ! i * xs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<bullet> xs = (\\<Sum>i<min (length as) (length xs). as ! i * xs ! i)", "by (simp add: dotprod_def)"], ["proof (state)\nthis:\n  as \\<bullet> xs = (\\<Sum>i<min (length as) (length xs). as ! i * xs ! i)\n\ngoal (1 subgoal):\n 1. as ! i * xs ! i \\<le> as \\<bullet> xs", "then"], ["proof (chain)\npicking this:\n  as \\<bullet> xs = (\\<Sum>i<min (length as) (length xs). as ! i * xs ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  as \\<bullet> xs = (\\<Sum>i<min (length as) (length xs). as ! i * xs ! i)\n\ngoal (1 subgoal):\n 1. as ! i * xs ! i \\<le> as \\<bullet> xs", "using assms"], ["proof (prove)\nusing this:\n  as \\<bullet> xs = (\\<Sum>i<min (length as) (length xs). as ! i * xs ! i)\n  length as = length xs\n  i < length as\n\ngoal (1 subgoal):\n 1. as ! i * xs ! i \\<le> as \\<bullet> xs", "by (auto intro: member_le_sum)"], ["proof (state)\nthis:\n  as ! i * xs ! i \\<le> as \\<bullet> xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replicate_dotprod:\n  assumes \"length y = n\"\n  shows \"replicate n x \\<bullet> y = x * sum_list y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate n x \\<bullet> y = x * sum_list y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. replicate n x \\<bullet> y = x * sum_list y", "have \"x * (\\<Sum>i<length y.  y ! i) = (\\<Sum>i<length y. x * y ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * sum ((!) y) {..<length y} = (\\<Sum>i<length y. x * y ! i)", "using sum_distrib_left"], ["proof (prove)\nusing this:\n  ?r * sum ?f ?A = (\\<Sum>n\\<in>?A. ?r * ?f n)\n\ngoal (1 subgoal):\n 1. x * sum ((!) y) {..<length y} = (\\<Sum>i<length y. x * y ! i)", "by blast"], ["proof (state)\nthis:\n  x * sum ((!) y) {..<length y} = (\\<Sum>i<length y. x * y ! i)\n\ngoal (1 subgoal):\n 1. replicate n x \\<bullet> y = x * sum_list y", "then"], ["proof (chain)\npicking this:\n  x * sum ((!) y) {..<length y} = (\\<Sum>i<length y. x * y ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  x * sum ((!) y) {..<length y} = (\\<Sum>i<length y. x * y ! i)\n\ngoal (1 subgoal):\n 1. replicate n x \\<bullet> y = x * sum_list y", "using assms"], ["proof (prove)\nusing this:\n  x * sum ((!) y) {..<length y} = (\\<Sum>i<length y. x * y ! i)\n  length y = n\n\ngoal (1 subgoal):\n 1. replicate n x \\<bullet> y = x * sum_list y", "by (auto simp: dotprod_def sum_list_sum_nth atLeast0LessThan)"], ["proof (state)\nthis:\n  replicate n x \\<bullet> y = x * sum_list y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The Pointwise Order on Vectors\\<close>"], ["", "definition  less_eq :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\" (\"_/ \\<le>\\<^sub>v _\" [51, 51] 50)\n  where\n    \"xs \\<le>\\<^sub>v ys \\<longleftrightarrow> length xs = length ys \\<and> (\\<forall>i<length xs. xs ! i \\<le> ys ! i)\""], ["", "definition less :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\" (\"_/ <\\<^sub>v _\" [51, 51] 50)\n  where\n    \"xs <\\<^sub>v ys \\<longleftrightarrow> xs \\<le>\\<^sub>v ys \\<and> \\<not> ys \\<le>\\<^sub>v xs\""], ["", "interpretation order_vec: order less_eq less"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order List_Vector.less_eq List_Vector.less", "by (standard, auto simp add: less_def less_eq_def dual_order.antisym nth_equalityI) (force)"], ["", "lemma less_eqI [intro?]: \"length xs = length ys \\<Longrightarrow> \\<forall>i<length xs. xs ! i \\<le> ys ! i \\<Longrightarrow> xs \\<le>\\<^sub>v ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys;\n     \\<forall>i<length xs. xs ! i \\<le> ys ! i\\<rbrakk>\n    \\<Longrightarrow> xs \\<le>\\<^sub>v ys", "by (auto simp: less_eq_def)"], ["", "lemma le0 [simp, intro]: \"zeroes (length xs) \\<le>\\<^sub>v xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zeroes (length xs) \\<le>\\<^sub>v xs", "by (simp add: less_eq_def)"], ["", "lemma le_list_update [simp]:\n  assumes \"xs \\<le>\\<^sub>v ys\" and \"i < length ys\" and \"z \\<le> ys ! i\"\n  shows \"xs[i := z] \\<le>\\<^sub>v ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs[i := z] \\<le>\\<^sub>v ys", "using assms"], ["proof (prove)\nusing this:\n  xs \\<le>\\<^sub>v ys\n  i < length ys\n  z \\<le> ys ! i\n\ngoal (1 subgoal):\n 1. xs[i := z] \\<le>\\<^sub>v ys", "by (auto simp: less_eq_def nth_list_update)"], ["", "lemma le_Cons: \"x # xs \\<le>\\<^sub>v y # ys \\<longleftrightarrow> x \\<le> y \\<and> xs \\<le>\\<^sub>v ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<le>\\<^sub>v y # ys) = (x \\<le> y \\<and> xs \\<le>\\<^sub>v ys)", "by (auto simp add: less_eq_def nth_Cons split: nat.splits)"], ["", "lemma zero_less:\n  assumes \"nonzero x\"\n  shows \"zeroes (length x) <\\<^sub>v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zeroes (length x) <\\<^sub>v x", "using assms and eq_0_iff order_vec.dual_order.strict_iff_order"], ["proof (prove)\nusing this:\n  nonzero x\n  (?xs = zeroes ?n) =\n  (length ?xs = ?n \\<and> (\\<forall>x\\<in>set ?xs. x = 0))\n  (?b <\\<^sub>v ?a) = (?b \\<le>\\<^sub>v ?a \\<and> ?a \\<noteq> ?b)\n\ngoal (1 subgoal):\n 1. zeroes (length x) <\\<^sub>v x", "by (auto simp: nonzero_iff)"], ["", "lemma le_append:\n  assumes \"length xs = length vs\"\n  shows \"xs @ ys \\<le>\\<^sub>v vs @ ws \\<longleftrightarrow> xs \\<le>\\<^sub>v vs \\<and> ys \\<le>\\<^sub>v ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ys \\<le>\\<^sub>v vs @ ws) =\n    (xs \\<le>\\<^sub>v vs \\<and> ys \\<le>\\<^sub>v ws)", "using assms"], ["proof (prove)\nusing this:\n  length xs = length vs\n\ngoal (1 subgoal):\n 1. (xs @ ys \\<le>\\<^sub>v vs @ ws) =\n    (xs \\<le>\\<^sub>v vs \\<and> ys \\<le>\\<^sub>v ws)", "by (auto simp: less_eq_def nth_append)\n    (metis add.commute add_diff_cancel_left' nat_add_left_cancel_less not_add_less2)"], ["", "lemma less_Cons:\n  \"(x # xs) <\\<^sub>v (y # ys) \\<longleftrightarrow> length xs = length ys \\<and> (x \\<le> y \\<and> xs <\\<^sub>v ys \\<or> x < y \\<and> xs \\<le>\\<^sub>v ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs <\\<^sub>v y # ys) =\n    (length xs = length ys \\<and>\n     (x \\<le> y \\<and> xs <\\<^sub>v ys \\<or>\n      x < y \\<and> xs \\<le>\\<^sub>v ys))", "by (simp add: less_def less_eq_def All_less_Suc2) (auto dest: leD)"], ["", "lemma le_length [dest]:\n  assumes \"xs \\<le>\\<^sub>v ys\"\n  shows \"length xs = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys", "using assms"], ["proof (prove)\nusing this:\n  xs \\<le>\\<^sub>v ys\n\ngoal (1 subgoal):\n 1. length xs = length ys", "by (simp add: less_eq_def)"], ["", "lemma less_length [dest]:\n  assumes \"x <\\<^sub>v y\"\n  shows \"length x = length y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x = length y", "using assms"], ["proof (prove)\nusing this:\n  x <\\<^sub>v y\n\ngoal (1 subgoal):\n 1. length x = length y", "by (auto simp: less_def)"], ["", "lemma less_append:\n  assumes \"xs <\\<^sub>v vs \" and \"ys \\<le>\\<^sub>v ws\"\n  shows \"xs @ ys <\\<^sub>v vs @ ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ ys <\\<^sub>v vs @ ws", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs @ ys <\\<^sub>v vs @ ws", "have \"length xs  = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length vs", "using assms"], ["proof (prove)\nusing this:\n  xs <\\<^sub>v vs\n  ys \\<le>\\<^sub>v ws\n\ngoal (1 subgoal):\n 1. length xs = length vs", "by blast"], ["proof (state)\nthis:\n  length xs = length vs\n\ngoal (1 subgoal):\n 1. xs @ ys <\\<^sub>v vs @ ws", "then"], ["proof (chain)\npicking this:\n  length xs = length vs", "show ?thesis"], ["proof (prove)\nusing this:\n  length xs = length vs\n\ngoal (1 subgoal):\n 1. xs @ ys <\\<^sub>v vs @ ws", "using assms"], ["proof (prove)\nusing this:\n  length xs = length vs\n  xs <\\<^sub>v vs\n  ys \\<le>\\<^sub>v ws\n\ngoal (1 subgoal):\n 1. xs @ ys <\\<^sub>v vs @ ws", "by (induct xs vs rule: list_induct2) (auto simp: less_Cons le_append le_length)"], ["proof (state)\nthis:\n  xs @ ys <\\<^sub>v vs @ ws\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma less_appendD:\n  assumes \"xs @ ys <\\<^sub>v vs @ ws\"\n    and \"length xs = length vs\"\n  shows \"xs <\\<^sub>v vs \\<or> ys <\\<^sub>v ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs <\\<^sub>v vs \\<or> ys <\\<^sub>v ws", "by (auto) (metis (no_types, lifting) assms le_append order_vec.order.strict_iff_order)"], ["", "lemma less_append_cases:\n  assumes \"xs @ ys <\\<^sub>v vs @ ws\" and \"length xs = length vs\"\n  obtains \"xs <\\<^sub>v vs\" and \"ys \\<le>\\<^sub>v ws\" | \"xs \\<le>\\<^sub>v vs\" and \"ys <\\<^sub>v ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>xs <\\<^sub>v vs; ys \\<le>\\<^sub>v ws\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>xs \\<le>\\<^sub>v vs; ys <\\<^sub>v ws\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms and that"], ["proof (prove)\nusing this:\n  xs @ ys <\\<^sub>v vs @ ws\n  length xs = length vs\n  \\<lbrakk>xs <\\<^sub>v vs; ys \\<le>\\<^sub>v ws\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>xs \\<le>\\<^sub>v vs; ys <\\<^sub>v ws\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>xs <\\<^sub>v vs; ys \\<le>\\<^sub>v ws\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>xs \\<le>\\<^sub>v vs; ys <\\<^sub>v ws\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis le_append less_appendD order_vec.order.strict_implies_order)"], ["", "lemma less_append_swap:\n  assumes \"x @ y <\\<^sub>v u @ v\"\n    and \"length x = length u\"\n  shows \"y @ x <\\<^sub>v v @ u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y @ x <\\<^sub>v v @ u", "using assms(2, 1)"], ["proof (prove)\nusing this:\n  length x = length u\n  x @ y <\\<^sub>v u @ v\n\ngoal (1 subgoal):\n 1. y @ x <\\<^sub>v v @ u", "by (induct x u rule: list_induct2)\n    (auto simp: order_vec.order.strict_iff_order le_Cons le_append le_length)"], ["", "lemma le_sum_list_less:\n  assumes \"xs \\<le>\\<^sub>v ys\"\n    and \"sum_list xs < sum_list ys\"\n  shows \"xs <\\<^sub>v ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs <\\<^sub>v ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs <\\<^sub>v ys", "have \"length xs = length ys\" and \"\\<forall>i<length ys. xs ! i \\<le> ys ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys &&& \\<forall>i<length ys. xs ! i \\<le> ys ! i", "using assms"], ["proof (prove)\nusing this:\n  xs \\<le>\\<^sub>v ys\n  sum_list xs < sum_list ys\n\ngoal (1 subgoal):\n 1. length xs = length ys &&& \\<forall>i<length ys. xs ! i \\<le> ys ! i", "by (auto simp: less_eq_def)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<forall>i<length ys. xs ! i \\<le> ys ! i\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>v ys", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  \\<forall>i<length ys. xs ! i \\<le> ys ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<forall>i<length ys. xs ! i \\<le> ys ! i\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>v ys", "using \\<open>sum_list xs < sum_list ys\\<close>"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<forall>i<length ys. xs ! i \\<le> ys ! i\n  sum_list xs < sum_list ys\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>v ys", "by (induct xs ys rule: list_induct2)\n      (auto simp: less_Cons All_less_Suc2 less_eq_def)"], ["proof (state)\nthis:\n  xs <\\<^sub>v ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dotprod_le_right:\n  assumes \"v \\<le>\\<^sub>v w\"\n    and \"length b = length w\"\n  shows \"b \\<bullet> v \\<le> b \\<bullet> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> v \\<le> b \\<bullet> w", "using assms"], ["proof (prove)\nusing this:\n  v \\<le>\\<^sub>v w\n  length b = length w\n\ngoal (1 subgoal):\n 1. b \\<bullet> v \\<le> b \\<bullet> w", "by (auto simp: dotprod_def less_eq_def intro: sum_mono)"], ["", "lemma dotprod_pointwise_le_right:\n  assumes \"length z = length u\"\n    and \"length u = length v\"\n    and \"\\<forall>i<length v. u ! i \\<le> v ! i\"\n  shows \"z \\<bullet> u \\<le> z \\<bullet> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<bullet> u \\<le> z \\<bullet> v", "using assms"], ["proof (prove)\nusing this:\n  length z = length u\n  length u = length v\n  \\<forall>i<length v. u ! i \\<le> v ! i\n\ngoal (1 subgoal):\n 1. z \\<bullet> u \\<le> z \\<bullet> v", "by (intro dotprod_le_right) (auto intro: less_eqI)"], ["", "lemma dotprod_le_left:\n  assumes \"v \\<le>\\<^sub>v w\"\n    and \"length b = length w\"\n  shows \"v \\<bullet> b \\<le> w \\<bullet> b \""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> b \\<le> w \\<bullet> b", "using assms"], ["proof (prove)\nusing this:\n  v \\<le>\\<^sub>v w\n  length b = length w\n\ngoal (1 subgoal):\n 1. v \\<bullet> b \\<le> w \\<bullet> b", "by (simp add: dotprod_le_right dotprod_commute le_length)"], ["", "lemma dotprod_le:\n  assumes \"x \\<le>\\<^sub>v u\" and \"y \\<le>\\<^sub>v v\"\n    and \"length y = length x\" and \"length v = length u\"\n  shows \"x \\<bullet> y \\<le> u \\<bullet> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bullet> y \\<le> u \\<bullet> v", "using assms"], ["proof (prove)\nusing this:\n  x \\<le>\\<^sub>v u\n  y \\<le>\\<^sub>v v\n  length y = length x\n  length v = length u\n\ngoal (1 subgoal):\n 1. x \\<bullet> y \\<le> u \\<bullet> v", "by (metis dotprod_le_left dotprod_le_right le_length le_trans)"], ["", "lemma dotprod_less_left:\n  assumes \"length b = length w\"\n    and \"0 \\<notin> set b\"\n    and \"v <\\<^sub>v w\"\n  shows \"v \\<bullet> b < w \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "have \"length v = length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v = length w", "using assms"], ["proof (prove)\nusing this:\n  length b = length w\n  0 \\<notin> set b\n  v <\\<^sub>v w\n\ngoal (1 subgoal):\n 1. length v = length w", "using less_eq_def order_vec.order.strict_implies_order"], ["proof (prove)\nusing this:\n  length b = length w\n  0 \\<notin> set b\n  v <\\<^sub>v w\n  (?xs \\<le>\\<^sub>v ?ys) =\n  (length ?xs = length ?ys \\<and>\n   (\\<forall>i<length ?xs. ?xs ! i \\<le> ?ys ! i))\n  ?a <\\<^sub>v ?b \\<Longrightarrow> ?a \\<le>\\<^sub>v ?b\n\ngoal (1 subgoal):\n 1. length v = length w", "by blast"], ["proof (state)\nthis:\n  length v = length w\n\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "then"], ["proof (chain)\npicking this:\n  length v = length w", "show ?thesis"], ["proof (prove)\nusing this:\n  length v = length w\n\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "using assms"], ["proof (prove)\nusing this:\n  length v = length w\n  length b = length w\n  0 \\<notin> set b\n  v <\\<^sub>v w\n\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "proof (induct v w arbitrary: b rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>length b = length []; 0 \\<notin> set b;\n        [] <\\<^sub>v []\\<rbrakk>\n       \\<Longrightarrow> [] \\<bullet> b < [] \\<bullet> b\n 2. \\<And>x xs y ys b.\n       \\<lbrakk>length xs = length ys;\n        \\<And>b.\n           \\<lbrakk>length b = length ys; 0 \\<notin> set b;\n            xs <\\<^sub>v ys\\<rbrakk>\n           \\<Longrightarrow> xs \\<bullet> b < ys \\<bullet> b;\n        length b = length (y # ys); 0 \\<notin> set b;\n        x # xs <\\<^sub>v y # ys\\<rbrakk>\n       \\<Longrightarrow> (x # xs) \\<bullet> b < (y # ys) \\<bullet> b", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>length ?b = length ys; 0 \\<notin> set ?b;\n   xs <\\<^sub>v ys\\<rbrakk>\n  \\<Longrightarrow> xs \\<bullet> ?b < ys \\<bullet> ?b\n  length b = length (y # ys)\n  0 \\<notin> set b\n  x # xs <\\<^sub>v y # ys\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>length b = length []; 0 \\<notin> set b;\n        [] <\\<^sub>v []\\<rbrakk>\n       \\<Longrightarrow> [] \\<bullet> b < [] \\<bullet> b\n 2. \\<And>x xs y ys b.\n       \\<lbrakk>length xs = length ys;\n        \\<And>b.\n           \\<lbrakk>length b = length ys; 0 \\<notin> set b;\n            xs <\\<^sub>v ys\\<rbrakk>\n           \\<Longrightarrow> xs \\<bullet> b < ys \\<bullet> b;\n        length b = length (y # ys); 0 \\<notin> set b;\n        x # xs <\\<^sub>v y # ys\\<rbrakk>\n       \\<Longrightarrow> (x # xs) \\<bullet> b < (y # ys) \\<bullet> b", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  \\<lbrakk>length ?b = length ys; 0 \\<notin> set ?b;\n   xs <\\<^sub>v ys\\<rbrakk>\n  \\<Longrightarrow> xs \\<bullet> ?b < ys \\<bullet> ?b\n  length b = length (y # ys)\n  0 \\<notin> set b\n  x # xs <\\<^sub>v y # ys", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>length ?b = length ys; 0 \\<notin> set ?b;\n   xs <\\<^sub>v ys\\<rbrakk>\n  \\<Longrightarrow> xs \\<bullet> ?b < ys \\<bullet> ?b\n  length b = length (y # ys)\n  0 \\<notin> set b\n  x # xs <\\<^sub>v y # ys\n\ngoal (1 subgoal):\n 1. (x # xs) \\<bullet> b < (y # ys) \\<bullet> b", "by (cases b) (auto simp: less_Cons add_mono_thms_linordered_field dotprod_le_left)"], ["proof (state)\nthis:\n  (x # xs) \\<bullet> b < (y # ys) \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>length b = length []; 0 \\<notin> set b;\n        [] <\\<^sub>v []\\<rbrakk>\n       \\<Longrightarrow> [] \\<bullet> b < [] \\<bullet> b", "qed simp"], ["proof (state)\nthis:\n  v \\<bullet> b < w \\<bullet> b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_append_swap:\n  assumes \"length y = length v\"\n    and \"x @ y \\<le>\\<^sub>v w @ v\"\n  shows \"y @ x \\<le>\\<^sub>v v @ w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y @ x \\<le>\\<^sub>v v @ w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y @ x \\<le>\\<^sub>v v @ w", "have \"length w = length x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length w = length x", "using assms"], ["proof (prove)\nusing this:\n  length y = length v\n  x @ y \\<le>\\<^sub>v w @ v\n\ngoal (1 subgoal):\n 1. length w = length x", "by auto"], ["proof (state)\nthis:\n  length w = length x\n\ngoal (1 subgoal):\n 1. y @ x \\<le>\\<^sub>v v @ w", "with assms"], ["proof (chain)\npicking this:\n  length y = length v\n  x @ y \\<le>\\<^sub>v w @ v\n  length w = length x", "show ?thesis"], ["proof (prove)\nusing this:\n  length y = length v\n  x @ y \\<le>\\<^sub>v w @ v\n  length w = length x\n\ngoal (1 subgoal):\n 1. y @ x \\<le>\\<^sub>v v @ w", "by (induct y v arbitrary: x w rule: list_induct2) (auto simp: le_Cons le_append)"], ["proof (state)\nthis:\n  y @ x \\<le>\\<^sub>v v @ w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_append_swap_iff:\n  assumes \"length y = length v\"\n  shows \"y @ x \\<le>\\<^sub>v v @ w  \\<longleftrightarrow> x @ y \\<le>\\<^sub>v w @ v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y @ x \\<le>\\<^sub>v v @ w) = (x @ y \\<le>\\<^sub>v w @ v)", "using assms and le_append_swap"], ["proof (prove)\nusing this:\n  length y = length v\n  \\<lbrakk>length ?y = length ?v; ?x @ ?y \\<le>\\<^sub>v ?w @ ?v\\<rbrakk>\n  \\<Longrightarrow> ?y @ ?x \\<le>\\<^sub>v ?v @ ?w\n\ngoal (1 subgoal):\n 1. (y @ x \\<le>\\<^sub>v v @ w) = (x @ y \\<le>\\<^sub>v w @ v)", "by (auto) (metis (no_types, lifting) add_left_imp_eq le_length length_append)"], ["", "lemma unit_less:\n  assumes \"i < n\"\n    and \"x <\\<^sub>v (zeroes n)[i := b]\"\n  shows \"x ! i < b \\<and> (\\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ! i < b \\<and>\n    (\\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x ! i < b\n 2. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0", "show \"x ! i < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ! i < b", "using assms less_def"], ["proof (prove)\nusing this:\n  i < n\n  x <\\<^sub>v (zeroes n)[i := b]\n  (?xs <\\<^sub>v ?ys) =\n  (?xs \\<le>\\<^sub>v ?ys \\<and> \\<not> ?ys \\<le>\\<^sub>v ?xs)\n\ngoal (1 subgoal):\n 1. x ! i < b", "by fastforce"], ["proof (state)\nthis:\n  x ! i < b\n\ngoal (1 subgoal):\n 1. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0", "have \"x \\<le>\\<^sub>v (zeroes n)[i := b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le>\\<^sub>v (zeroes n)[i := b]", "by (simp add: assms order_vec.less_imp_le)"], ["proof (state)\nthis:\n  x \\<le>\\<^sub>v (zeroes n)[i := b]\n\ngoal (1 subgoal):\n 1. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0", "then"], ["proof (chain)\npicking this:\n  x \\<le>\\<^sub>v (zeroes n)[i := b]", "show \"\\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0\""], ["proof (prove)\nusing this:\n  x \\<le>\\<^sub>v (zeroes n)[i := b]\n\ngoal (1 subgoal):\n 1. \\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0", "by (auto simp: less_eq_def)"], ["proof (state)\nthis:\n  \\<forall>j<n. j \\<noteq> i \\<longrightarrow> x ! j = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_sum_list_mono:\n  assumes \"xs \\<le>\\<^sub>v ys\"\n  shows \"sum_list xs \\<le> sum_list ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list xs \\<le> sum_list ys", "using assms and sum_list_mono [of \"[0..<length ys]\" \"(!) xs\" \"(!) ys\"]"], ["proof (prove)\nusing this:\n  xs \\<le>\\<^sub>v ys\n  (\\<And>x.\n      x \\<in> set [0..<length ys] \\<Longrightarrow>\n      xs ! x \\<le> ys ! x) \\<Longrightarrow>\n  sum_list (map ((!) xs) [0..<length ys])\n  \\<le> sum_list (map ((!) ys) [0..<length ys])\n\ngoal (1 subgoal):\n 1. sum_list xs \\<le> sum_list ys", "by (auto simp: less_eq_def) (metis map_nth)"], ["", "lemma sum_list_less_diff_Ex:\n  assumes \"u \\<le>\\<^sub>v y\"\n    and \"sum_list u < sum_list y\"\n  shows \"\\<exists>i<length y. u ! i < y ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i<length y. u ! i < y ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i<length y. u ! i < y ! i", "have \"length u = length y\" and \"\\<forall>i<length y. u ! i \\<le> y ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length u = length y &&& \\<forall>i<length y. u ! i \\<le> y ! i", "using \\<open>u \\<le>\\<^sub>v y\\<close>"], ["proof (prove)\nusing this:\n  u \\<le>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. length u = length y &&& \\<forall>i<length y. u ! i \\<le> y ! i", "by (auto simp: less_eq_def)"], ["proof (state)\nthis:\n  length u = length y\n  \\<forall>i<length y. u ! i \\<le> y ! i\n\ngoal (1 subgoal):\n 1. \\<exists>i<length y. u ! i < y ! i", "then"], ["proof (chain)\npicking this:\n  length u = length y\n  \\<forall>i<length y. u ! i \\<le> y ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  length u = length y\n  \\<forall>i<length y. u ! i \\<le> y ! i\n\ngoal (1 subgoal):\n 1. \\<exists>i<length y. u ! i < y ! i", "using \\<open>sum_list u < sum_list y\\<close>"], ["proof (prove)\nusing this:\n  length u = length y\n  \\<forall>i<length y. u ! i \\<le> y ! i\n  sum_list u < sum_list y\n\ngoal (1 subgoal):\n 1. \\<exists>i<length y. u ! i < y ! i", "by (induct u y rule: list_induct2) (force simp: Ex_less_Suc2 All_less_Suc2)+"], ["proof (state)\nthis:\n  \\<exists>i<length y. u ! i < y ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma less_vec_sum_list_less:\n  assumes \"v <\\<^sub>v w\"\n  shows \"sum_list v < sum_list w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list v < sum_list w", "using assms"], ["proof (prove)\nusing this:\n  v <\\<^sub>v w\n\ngoal (1 subgoal):\n 1. sum_list v < sum_list w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v <\\<^sub>v w \\<Longrightarrow> sum_list v < sum_list w", "have \"length v = length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v = length w", "using assms less_eq_def less_imp_le"], ["proof (prove)\nusing this:\n  v <\\<^sub>v w\n  (?xs \\<le>\\<^sub>v ?ys) =\n  (length ?xs = length ?ys \\<and>\n   (\\<forall>i<length ?xs. ?xs ! i \\<le> ?ys ! i))\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n\ngoal (1 subgoal):\n 1. length v = length w", "by blast"], ["proof (state)\nthis:\n  length v = length w\n\ngoal (1 subgoal):\n 1. v <\\<^sub>v w \\<Longrightarrow> sum_list v < sum_list w", "then"], ["proof (chain)\npicking this:\n  length v = length w", "show ?thesis"], ["proof (prove)\nusing this:\n  length v = length w\n\ngoal (1 subgoal):\n 1. sum_list v < sum_list w", "using assms"], ["proof (prove)\nusing this:\n  length v = length w\n  v <\\<^sub>v w\n\ngoal (1 subgoal):\n 1. sum_list v < sum_list w", "proof (induct v w rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] <\\<^sub>v [] \\<Longrightarrow> sum_list [] < sum_list []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        xs <\\<^sub>v ys \\<Longrightarrow> sum_list xs < sum_list ys;\n        x # xs <\\<^sub>v y # ys\\<rbrakk>\n       \\<Longrightarrow> sum_list (x # xs) < sum_list (y # ys)", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  xs <\\<^sub>v ys \\<Longrightarrow> sum_list xs < sum_list ys\n  x # xs <\\<^sub>v y # ys\n\ngoal (2 subgoals):\n 1. [] <\\<^sub>v [] \\<Longrightarrow> sum_list [] < sum_list []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        xs <\\<^sub>v ys \\<Longrightarrow> sum_list xs < sum_list ys;\n        x # xs <\\<^sub>v y # ys\\<rbrakk>\n       \\<Longrightarrow> sum_list (x # xs) < sum_list (y # ys)", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  xs <\\<^sub>v ys \\<Longrightarrow> sum_list xs < sum_list ys\n  x # xs <\\<^sub>v y # ys", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  xs <\\<^sub>v ys \\<Longrightarrow> sum_list xs < sum_list ys\n  x # xs <\\<^sub>v y # ys\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) < sum_list (y # ys)", "using length_replicate less_Cons order_vec.order.strict_iff_order"], ["proof (prove)\nusing this:\n  length xs = length ys\n  xs <\\<^sub>v ys \\<Longrightarrow> sum_list xs < sum_list ys\n  x # xs <\\<^sub>v y # ys\n  length (replicate ?n ?x) = ?n\n  (?x # ?xs <\\<^sub>v ?y # ?ys) =\n  (length ?xs = length ?ys \\<and>\n   (?x \\<le> ?y \\<and> ?xs <\\<^sub>v ?ys \\<or>\n    ?x < ?y \\<and> ?xs \\<le>\\<^sub>v ?ys))\n  (?a <\\<^sub>v ?b) = (?a \\<le>\\<^sub>v ?b \\<and> ?a \\<noteq> ?b)\n\ngoal (1 subgoal):\n 1. sum_list (x # xs) < sum_list (y # ys)", "by force"], ["proof (state)\nthis:\n  sum_list (x # xs) < sum_list (y # ys)\n\ngoal (1 subgoal):\n 1. [] <\\<^sub>v [] \\<Longrightarrow> sum_list [] < sum_list []", "qed simp"], ["proof (state)\nthis:\n  sum_list v < sum_list w\n\ngoal:\nNo subgoals!", "qed"], ["", "definition maxne0 :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> nat\"\n  where\n    \"maxne0 x a =\n      (if length x = length a \\<and> (\\<exists>i<length a. x ! i \\<noteq> 0)\n      then Max {a ! i | i. i < length a \\<and> x ! i \\<noteq> 0}\n      else 0)\""], ["", "lemma maxne0_le_Max:\n  \"maxne0 x a \\<le> Max (set a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0 x a \\<le> Max (set a)", "by (auto simp: maxne0_def nonzero_iff in_set_conv_nth) simp"], ["", "lemma maxne0_Nil [simp]:\n  \"maxne0 [] as = 0\"\n  \"maxne0 xs [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0 [] as = 0 &&& maxne0 xs [] = 0", "by (auto simp: maxne0_def)"], ["", "lemma maxne0_Cons [simp]:\n  \"maxne0 (x # xs) (a # as) =\n    (if length xs = length as then\n      (if x = 0 then maxne0 xs as else max a (maxne0 xs as))\n    else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0 (x # xs) (a # as) =\n    (if length xs = length as\n     then if x = 0 then maxne0 xs as else max a (maxne0 xs as) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. maxne0 (x # xs) (a # as) =\n    (if length xs = length as\n     then if x = 0 then maxne0 xs as else max a (maxne0 xs as) else 0)", "let ?a = \"a # as\" and ?x = \"x # xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. maxne0 (x # xs) (a # as) =\n    (if length xs = length as\n     then if x = 0 then maxne0 xs as else max a (maxne0 xs as) else 0)", "have eq: \"{?a ! i | i. i < length ?a \\<and> ?x ! i \\<noteq> 0} =\n    (if x > 0 then {a} else {}) \\<union> {as ! i | i. i < length as \\<and> xs ! i \\<noteq> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a # as) ! i |i. i < length (a # as) \\<and> (x # xs) ! i \\<noteq> 0} =\n    (if 0 < x then {a} else {}) \\<union>\n    {as ! i |i. i < length as \\<and> xs ! i \\<noteq> 0}", "by (auto simp: nth_Cons split: nat.splits) (metis Suc_pred)+"], ["proof (state)\nthis:\n  {(a # as) ! i |i. i < length (a # as) \\<and> (x # xs) ! i \\<noteq> 0} =\n  (if 0 < x then {a} else {}) \\<union>\n  {as ! i |i. i < length as \\<and> xs ! i \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. maxne0 (x # xs) (a # as) =\n    (if length xs = length as\n     then if x = 0 then maxne0 xs as else max a (maxne0 xs as) else 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0 (x # xs) (a # as) =\n    (if length xs = length as\n     then if x = 0 then maxne0 xs as else max a (maxne0 xs as) else 0)", "unfolding maxne0_def and eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if length (x # xs) = length (a # as) \\<and>\n        (\\<exists>i<length (a # as). (x # xs) ! i \\<noteq> 0)\n     then Max ((if 0 < x then {a} else {}) \\<union>\n               {as ! i |i. i < length as \\<and> xs ! i \\<noteq> 0})\n     else 0) =\n    (if length xs = length as\n     then if x = 0\n          then if length xs = length as \\<and>\n                  (\\<exists>i<length as. xs ! i \\<noteq> 0)\n               then Max {as ! i |i. i < length as \\<and> xs ! i \\<noteq> 0}\n               else 0\n          else max a\n                (if length xs = length as \\<and>\n                    (\\<exists>i<length as. xs ! i \\<noteq> 0)\n                 then Max {as ! i |i.\n                           i < length as \\<and> xs ! i \\<noteq> 0}\n                 else 0)\n     else 0)", "by (auto simp: less_Suc_eq_0_disj nth_Cons' intro: Max_insert2)"], ["proof (state)\nthis:\n  maxne0 (x # xs) (a # as) =\n  (if length xs = length as\n   then if x = 0 then maxne0 xs as else max a (maxne0 xs as) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma maxne0_times_sum_list_gt_dotprod:\n  assumes \"length b = length ys\"\n  shows \"maxne0 ys b * sum_list ys \\<ge> b \\<bullet> ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> maxne0 ys b * sum_list ys", "using assms"], ["proof (prove)\nusing this:\n  length b = length ys\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> maxne0 ys b * sum_list ys", "apply (induct b ys rule: list_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. [] \\<bullet> [] \\<le> maxne0 [] [] * sum_list []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        xs \\<bullet> ys \\<le> maxne0 ys xs * sum_list ys\\<rbrakk>\n       \\<Longrightarrow> (x # xs) \\<bullet> (y # ys)\n                         \\<le> maxne0 (y # ys) (x # xs) * sum_list (y # ys)", "apply (auto  simp: max_def ring_distribs add_mono_thms_linordered_semiring(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        xs \\<bullet> ys \\<le> maxne0 ys xs * sum_list ys;\n        \\<not> x \\<le> maxne0 ys xs; 0 < y\\<rbrakk>\n       \\<Longrightarrow> xs \\<bullet> ys \\<le> x * sum_list ys", "by (meson leI le_trans mult_less_cancel2 nat_less_le)"], ["", "lemma max_times_sum_list_gt_dotprod:\n  assumes \"length b = length ys\"\n  shows \"Max (set b) * sum_list ys \\<ge> b \\<bullet> ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "have \"\\<forall> e \\<in> set b . Max (set b) \\<ge> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>set b. e \\<le> Max (set b)", "by simp"], ["proof (state)\nthis:\n  \\<forall>e\\<in>set b. e \\<le> Max (set b)\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "then"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>set b. e \\<le> Max (set b)", "have \"replicate (length ys) (Max (set b)) \\<bullet> ys \\<ge> b \\<bullet> ys\" (is \"?rep \\<ge> _\")"], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>set b. e \\<le> Max (set b)\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> replicate (length ys) (Max (set b)) \\<bullet> ys", "by (metis assms dotprod_pointwise_le_right dotprod_commute\n        length_replicate nth_mem nth_replicate)"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> replicate (length ys) (Max (set b)) \\<bullet> ys\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "moreover"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> replicate (length ys) (Max (set b)) \\<bullet> ys\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "have \"Max (set b) * sum_list ys = ?rep\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (set b) * sum_list ys =\n    replicate (length ys) (Max (set b)) \\<bullet> ys", "using replicate_dotprod [of ys _ \"Max (set b)\"]"], ["proof (prove)\nusing this:\n  length ys = ?n \\<Longrightarrow>\n  replicate ?n (Max (set b)) \\<bullet> ys = Max (set b) * sum_list ys\n\ngoal (1 subgoal):\n 1. Max (set b) * sum_list ys =\n    replicate (length ys) (Max (set b)) \\<bullet> ys", "by auto"], ["proof (state)\nthis:\n  Max (set b) * sum_list ys =\n  replicate (length ys) (Max (set b)) \\<bullet> ys\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "ultimately"], ["proof (chain)\npicking this:\n  b \\<bullet> ys \\<le> replicate (length ys) (Max (set b)) \\<bullet> ys\n  Max (set b) * sum_list ys =\n  replicate (length ys) (Max (set b)) \\<bullet> ys", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<bullet> ys \\<le> replicate (length ys) (Max (set b)) \\<bullet> ys\n  Max (set b) * sum_list ys =\n  replicate (length ys) (Max (set b)) \\<bullet> ys\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> Max (set b) * sum_list ys", "by (simp add: assms)"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> Max (set b) * sum_list ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma maxne0_mono:\n  assumes \"y \\<le>\\<^sub>v x\"\n  shows \"maxne0 y a \\<le> maxne0 x a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0 y a \\<le> maxne0 x a", "proof (cases \"length y = length a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length y = length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a\n 2. length y \\<noteq> length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a", "case True"], ["proof (state)\nthis:\n  length y = length a\n\ngoal (2 subgoals):\n 1. length y = length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a\n 2. length y \\<noteq> length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a", "have \"length y = length x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length y = length x", "using assms"], ["proof (prove)\nusing this:\n  y \\<le>\\<^sub>v x\n\ngoal (1 subgoal):\n 1. length y = length x", "by (auto)"], ["proof (state)\nthis:\n  length y = length x\n\ngoal (2 subgoals):\n 1. length y = length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a\n 2. length y \\<noteq> length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a", "then"], ["proof (chain)\npicking this:\n  length y = length x", "show ?thesis"], ["proof (prove)\nusing this:\n  length y = length x\n\ngoal (1 subgoal):\n 1. maxne0 y a \\<le> maxne0 x a", "using assms and True"], ["proof (prove)\nusing this:\n  length y = length x\n  y \\<le>\\<^sub>v x\n  length y = length a\n\ngoal (1 subgoal):\n 1. maxne0 y a \\<le> maxne0 x a", "proof (induct y x arbitrary: a rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>[] \\<le>\\<^sub>v []; length [] = length a\\<rbrakk>\n       \\<Longrightarrow> maxne0 [] a \\<le> maxne0 [] a\n 2. \\<And>x xs y ys a.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a.\n           \\<lbrakk>xs \\<le>\\<^sub>v ys; length xs = length a\\<rbrakk>\n           \\<Longrightarrow> maxne0 xs a \\<le> maxne0 ys a;\n        x # xs \\<le>\\<^sub>v y # ys; length (x # xs) = length a\\<rbrakk>\n       \\<Longrightarrow> maxne0 (x # xs) a \\<le> maxne0 (y # ys) a", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>xs \\<le>\\<^sub>v ys; length xs = length ?a\\<rbrakk>\n  \\<Longrightarrow> maxne0 xs ?a \\<le> maxne0 ys ?a\n  x # xs \\<le>\\<^sub>v y # ys\n  length (x # xs) = length a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>[] \\<le>\\<^sub>v []; length [] = length a\\<rbrakk>\n       \\<Longrightarrow> maxne0 [] a \\<le> maxne0 [] a\n 2. \\<And>x xs y ys a.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a.\n           \\<lbrakk>xs \\<le>\\<^sub>v ys; length xs = length a\\<rbrakk>\n           \\<Longrightarrow> maxne0 xs a \\<le> maxne0 ys a;\n        x # xs \\<le>\\<^sub>v y # ys; length (x # xs) = length a\\<rbrakk>\n       \\<Longrightarrow> maxne0 (x # xs) a \\<le> maxne0 (y # ys) a", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  \\<lbrakk>xs \\<le>\\<^sub>v ys; length xs = length ?a\\<rbrakk>\n  \\<Longrightarrow> maxne0 xs ?a \\<le> maxne0 ys ?a\n  x # xs \\<le>\\<^sub>v y # ys\n  length (x # xs) = length a", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>xs \\<le>\\<^sub>v ys; length xs = length ?a\\<rbrakk>\n  \\<Longrightarrow> maxne0 xs ?a \\<le> maxne0 ys ?a\n  x # xs \\<le>\\<^sub>v y # ys\n  length (x # xs) = length a\n\ngoal (1 subgoal):\n 1. maxne0 (x # xs) a \\<le> maxne0 (y # ys) a", "by (cases a) (force simp: less_eq_def All_less_Suc2 le_max_iff_disj)+"], ["proof (state)\nthis:\n  maxne0 (x # xs) a \\<le> maxne0 (y # ys) a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>[] \\<le>\\<^sub>v []; length [] = length a\\<rbrakk>\n       \\<Longrightarrow> maxne0 [] a \\<le> maxne0 [] a", "qed simp"], ["proof (state)\nthis:\n  maxne0 y a \\<le> maxne0 x a\n\ngoal (1 subgoal):\n 1. length y \\<noteq> length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length y \\<noteq> length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a", "case False"], ["proof (state)\nthis:\n  length y \\<noteq> length a\n\ngoal (1 subgoal):\n 1. length y \\<noteq> length a \\<Longrightarrow> maxne0 y a \\<le> maxne0 x a", "then"], ["proof (chain)\npicking this:\n  length y \\<noteq> length a", "show ?thesis"], ["proof (prove)\nusing this:\n  length y \\<noteq> length a\n\ngoal (1 subgoal):\n 1. maxne0 y a \\<le> maxne0 x a", "using assms"], ["proof (prove)\nusing this:\n  length y \\<noteq> length a\n  y \\<le>\\<^sub>v x\n\ngoal (1 subgoal):\n 1. maxne0 y a \\<le> maxne0 x a", "by (auto simp: maxne0_def)"], ["proof (state)\nthis:\n  maxne0 y a \\<le> maxne0 x a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma all_leq_Max:\n  assumes \"x \\<le>\\<^sub>v y\"\n    and \"x \\<noteq> []\"\n  shows \"\\<forall>xi \\<in> set x. xi \\<le> Max (set y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xi\\<in>set x. xi \\<le> Max (set y)", "by (metis (no_types, lifting) List.finite_set Max_ge_iff\n      assms in_set_conv_nth length_0_conv less_eq_def set_empty)"], ["", "lemma le_not_less_replicate:\n  \"\\<forall>x\\<in>set xs. x \\<le> b \\<Longrightarrow> \\<not> xs <\\<^sub>v replicate (length xs) b \\<Longrightarrow> xs = replicate (length xs) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set xs. x \\<le> b;\n     \\<not> xs <\\<^sub>v replicate (length xs) b\\<rbrakk>\n    \\<Longrightarrow> xs = replicate (length xs) b", "by (induct xs) (auto simp: less_Cons)"], ["", "lemma le_replicateI: \"\\<forall>x\\<in>set xs. x \\<le> b \\<Longrightarrow> xs \\<le>\\<^sub>v replicate (length xs) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. x \\<le> b \\<Longrightarrow>\n    xs \\<le>\\<^sub>v replicate (length xs) b", "by (induct xs) (auto simp: le_Cons)"], ["", "lemma le_take:\n  assumes \"x \\<le>\\<^sub>v y\" and \"i \\<le> length x\" shows \"take i x \\<le>\\<^sub>v take i y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take i x \\<le>\\<^sub>v take i y", "using assms"], ["proof (prove)\nusing this:\n  x \\<le>\\<^sub>v y\n  i \\<le> length x\n\ngoal (1 subgoal):\n 1. take i x \\<le>\\<^sub>v take i y", "by (auto simp: less_eq_def)"], ["", "lemma wf_less:\n  \"wf {(x, y). x <\\<^sub>v y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). x <\\<^sub>v y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf {(x, y). x <\\<^sub>v y}", "have \"wf (measure sum_list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure sum_list)", ".."], ["proof (state)\nthis:\n  wf (measure sum_list)\n\ngoal (1 subgoal):\n 1. wf {(x, y). x <\\<^sub>v y}", "moreover"], ["proof (state)\nthis:\n  wf (measure sum_list)\n\ngoal (1 subgoal):\n 1. wf {(x, y). x <\\<^sub>v y}", "have \"{(x, y). x <\\<^sub>v y} \\<subseteq> measure sum_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). x <\\<^sub>v y} \\<subseteq> measure sum_list", "by (auto simp: less_vec_sum_list_less)"], ["proof (state)\nthis:\n  {(x, y). x <\\<^sub>v y} \\<subseteq> measure sum_list\n\ngoal (1 subgoal):\n 1. wf {(x, y). x <\\<^sub>v y}", "ultimately"], ["proof (chain)\npicking this:\n  wf (measure sum_list)\n  {(x, y). x <\\<^sub>v y} \\<subseteq> measure sum_list", "show \"wf {(x, y). x <\\<^sub>v y}\""], ["proof (prove)\nusing this:\n  wf (measure sum_list)\n  {(x, y). x <\\<^sub>v y} \\<subseteq> measure sum_list\n\ngoal (1 subgoal):\n 1. wf {(x, y). x <\\<^sub>v y}", "by (rule wf_subset)"], ["proof (state)\nthis:\n  wf {(x, y). x <\\<^sub>v y}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Pointwise Subtraction\\<close>"], ["", "definition vdiff :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> nat list\" (infixl \"-\\<^sub>v\" 65)\n  where\n    \"w -\\<^sub>v v = map (\\<lambda>i. w ! i - v ! i) [0 ..< length w]\""], ["", "lemma vdiff_Nil [simp]: \"[] -\\<^sub>v [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] -\\<^sub>v [] = []", "by (simp add: vdiff_def)"], ["", "lemma upt_Cons_conv:\n  assumes \"j < n\"\n  shows \"[j..<n] = j # [j+1..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [j..<n] = j # [j + 1..<n]", "by (simp add: assms upt_eq_Cons_conv)"], ["", "lemma map_upt_Suc: \"map f [Suc m ..< Suc n] = map (f \\<circ> Suc) [m ..< n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f [Suc m..<Suc n] = map (f \\<circ> Suc) [m..<n]", "by (fold list.map_comp [of f \"Suc\" \"[m ..< n]\"]) (simp add: map_Suc_upt)"], ["", "lemma vdiff_Cons [simp]:\n  \"(x # xs) -\\<^sub>v (y # ys) = (x - y) # (xs -\\<^sub>v ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x # xs -\\<^sub>v (y # ys) = (x - y) # xs -\\<^sub>v ys", "by (simp add: vdiff_def upt_Cons_conv [OF zero_less_Suc] map_upt_Suc del: upt_Suc)"], ["", "lemma vdiff_alt_def:\n  assumes \"length w = length v\"\n  shows \"w -\\<^sub>v v = map (\\<lambda>(x, y). x - y) (zip w v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w -\\<^sub>v v = map2 (-) w v", "using assms"], ["proof (prove)\nusing this:\n  length w = length v\n\ngoal (1 subgoal):\n 1. w -\\<^sub>v v = map2 (-) w v", "by (induct rule: list_induct2) simp_all"], ["", "lemma vdiff_dotprod_distr:\n  assumes \"length b = length w\"\n    and \"v \\<le>\\<^sub>v w\"\n  shows \"(w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b", "have \"length v = length w\" and \"\\<forall>i<length w. v ! i \\<le> w ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v = length w &&& \\<forall>i<length w. v ! i \\<le> w ! i", "using assms less_eq_def"], ["proof (prove)\nusing this:\n  length b = length w\n  v \\<le>\\<^sub>v w\n  (?xs \\<le>\\<^sub>v ?ys) =\n  (length ?xs = length ?ys \\<and>\n   (\\<forall>i<length ?xs. ?xs ! i \\<le> ?ys ! i))\n\ngoal (1 subgoal):\n 1. length v = length w &&& \\<forall>i<length w. v ! i \\<le> w ! i", "by auto"], ["proof (state)\nthis:\n  length v = length w\n  \\<forall>i<length w. v ! i \\<le> w ! i\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b", "then"], ["proof (chain)\npicking this:\n  length v = length w\n  \\<forall>i<length w. v ! i \\<le> w ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  length v = length w\n  \\<forall>i<length w. v ! i \\<le> w ! i\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b", "using \\<open>length b = length w\\<close>"], ["proof (prove)\nusing this:\n  length v = length w\n  \\<forall>i<length w. v ! i \\<le> w ! i\n  length b = length w\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b", "proof (induct v w arbitrary: b rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>i<length []. [] ! i \\<le> [] ! i;\n        length b = length []\\<rbrakk>\n       \\<Longrightarrow> ([] -\\<^sub>v []) \\<bullet> b =\n                         [] \\<bullet> b - [] \\<bullet> b\n 2. \\<And>x xs y ys b.\n       \\<lbrakk>length xs = length ys;\n        \\<And>b.\n           \\<lbrakk>\\<forall>i<length ys. xs ! i \\<le> ys ! i;\n            length b = length ys\\<rbrakk>\n           \\<Longrightarrow> (ys -\\<^sub>v xs) \\<bullet> b =\n                             ys \\<bullet> b - xs \\<bullet> b;\n        \\<forall>i<length (y # ys). (x # xs) ! i \\<le> (y # ys) ! i;\n        length b = length (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (y # ys -\\<^sub>v (x # xs)) \\<bullet> b =\n                         (y # ys) \\<bullet> b - (x # xs) \\<bullet> b", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>\\<forall>i<length ys. xs ! i \\<le> ys ! i;\n   length ?b = length ys\\<rbrakk>\n  \\<Longrightarrow> (ys -\\<^sub>v xs) \\<bullet> ?b =\n                    ys \\<bullet> ?b - xs \\<bullet> ?b\n  \\<forall>i<length (y # ys). (x # xs) ! i \\<le> (y # ys) ! i\n  length b = length (y # ys)\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>i<length []. [] ! i \\<le> [] ! i;\n        length b = length []\\<rbrakk>\n       \\<Longrightarrow> ([] -\\<^sub>v []) \\<bullet> b =\n                         [] \\<bullet> b - [] \\<bullet> b\n 2. \\<And>x xs y ys b.\n       \\<lbrakk>length xs = length ys;\n        \\<And>b.\n           \\<lbrakk>\\<forall>i<length ys. xs ! i \\<le> ys ! i;\n            length b = length ys\\<rbrakk>\n           \\<Longrightarrow> (ys -\\<^sub>v xs) \\<bullet> b =\n                             ys \\<bullet> b - xs \\<bullet> b;\n        \\<forall>i<length (y # ys). (x # xs) ! i \\<le> (y # ys) ! i;\n        length b = length (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (y # ys -\\<^sub>v (x # xs)) \\<bullet> b =\n                         (y # ys) \\<bullet> b - (x # xs) \\<bullet> b", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  \\<lbrakk>\\<forall>i<length ys. xs ! i \\<le> ys ! i;\n   length ?b = length ys\\<rbrakk>\n  \\<Longrightarrow> (ys -\\<^sub>v xs) \\<bullet> ?b =\n                    ys \\<bullet> ?b - xs \\<bullet> ?b\n  \\<forall>i<length (y # ys). (x # xs) ! i \\<le> (y # ys) ! i\n  length b = length (y # ys)", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>\\<forall>i<length ys. xs ! i \\<le> ys ! i;\n   length ?b = length ys\\<rbrakk>\n  \\<Longrightarrow> (ys -\\<^sub>v xs) \\<bullet> ?b =\n                    ys \\<bullet> ?b - xs \\<bullet> ?b\n  \\<forall>i<length (y # ys). (x # xs) ! i \\<le> (y # ys) ! i\n  length b = length (y # ys)\n\ngoal (1 subgoal):\n 1. (y # ys -\\<^sub>v (x # xs)) \\<bullet> b =\n    (y # ys) \\<bullet> b - (x # xs) \\<bullet> b", "by (cases b) (auto simp: All_less_Suc2 diff_mult_distrib\n          dotprod_commute dotprod_pointwise_le_right)"], ["proof (state)\nthis:\n  (y # ys -\\<^sub>v (x # xs)) \\<bullet> b =\n  (y # ys) \\<bullet> b - (x # xs) \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>i<length []. [] ! i \\<le> [] ! i;\n        length b = length []\\<rbrakk>\n       \\<Longrightarrow> ([] -\\<^sub>v []) \\<bullet> b =\n                         [] \\<bullet> b - [] \\<bullet> b", "qed simp"], ["proof (state)\nthis:\n  (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_vdiff_distr [simp]:\n  assumes \"v \\<le>\\<^sub>v u\"\n  shows \"sum_list (u -\\<^sub>v v) = sum_list u - sum_list v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (u -\\<^sub>v v) = sum_list u - sum_list v", "by (metis (no_types, lifting) assms diff_zero dotprod_1_right\n      length_map length_replicate length_upt\n      less_eq_def vdiff_def vdiff_dotprod_distr)"], ["", "lemma vdiff_le:\n  assumes \"v \\<le>\\<^sub>v w\"\n    and \"length v = length x\"\n  shows \"v -\\<^sub>v x \\<le>\\<^sub>v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v -\\<^sub>v x \\<le>\\<^sub>v w", "using assms"], ["proof (prove)\nusing this:\n  v \\<le>\\<^sub>v w\n  length v = length x\n\ngoal (1 subgoal):\n 1. v -\\<^sub>v x \\<le>\\<^sub>v w", "by (auto simp add: less_eq_def vdiff_def)"], ["", "lemma mods_with_vec:\n  assumes \"v <\\<^sub>v w\"\n    and \"0 \\<notin> set b\"\n    and \"length b = length w\"\n    and \"(v \\<bullet> b) mod a = (w \\<bullet> b) mod a\"\n  shows \"((w -\\<^sub>v v) \\<bullet> b) mod a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "have *: \"v \\<bullet> b < w \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "using dotprod_less_left and assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?b = length ?w; 0 \\<notin> set ?b;\n   ?v <\\<^sub>v ?w\\<rbrakk>\n  \\<Longrightarrow> ?v \\<bullet> ?b < ?w \\<bullet> ?b\n  v <\\<^sub>v w\n  0 \\<notin> set b\n  length b = length w\n  v \\<bullet> b mod a = w \\<bullet> b mod a\n\ngoal (1 subgoal):\n 1. v \\<bullet> b < w \\<bullet> b", "by blast"], ["proof (state)\nthis:\n  v \\<bullet> b < w \\<bullet> b\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "have \"v \\<le>\\<^sub>v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<le>\\<^sub>v w", "using assms"], ["proof (prove)\nusing this:\n  v <\\<^sub>v w\n  0 \\<notin> set b\n  length b = length w\n  v \\<bullet> b mod a = w \\<bullet> b mod a\n\ngoal (1 subgoal):\n 1. v \\<le>\\<^sub>v w", "by auto"], ["proof (state)\nthis:\n  v \\<le>\\<^sub>v w\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "from vdiff_dotprod_distr [OF assms(3) this]"], ["proof (chain)\npicking this:\n  (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b", "have \"((w -\\<^sub>v v) \\<bullet> b) mod a = (w \\<bullet> b - v \\<bullet> b) mod a \""], ["proof (prove)\nusing this:\n  (w -\\<^sub>v v) \\<bullet> b = w \\<bullet> b - v \\<bullet> b\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a =\n    (w \\<bullet> b - v \\<bullet> b) mod a", "by simp"], ["proof (state)\nthis:\n  (w -\\<^sub>v v) \\<bullet> b mod a = (w \\<bullet> b - v \\<bullet> b) mod a\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "also"], ["proof (state)\nthis:\n  (w -\\<^sub>v v) \\<bullet> b mod a = (w \\<bullet> b - v \\<bullet> b) mod a\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "have \"... = 0 mod a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<bullet> b - v \\<bullet> b) mod a = 0 mod a", "using mods_with_nats [of \"v \\<bullet> b\" \"w \\<bullet> b\" \"1\" a, OF *] assms"], ["proof (prove)\nusing this:\n  w \\<bullet> b * 1 mod a = v \\<bullet> b * 1 mod a \\<Longrightarrow>\n  (w \\<bullet> b - v \\<bullet> b) * 1 mod a = 0\n  v <\\<^sub>v w\n  0 \\<notin> set b\n  length b = length w\n  v \\<bullet> b mod a = w \\<bullet> b mod a\n\ngoal (1 subgoal):\n 1. (w \\<bullet> b - v \\<bullet> b) mod a = 0 mod a", "by auto"], ["proof (state)\nthis:\n  (w \\<bullet> b - v \\<bullet> b) mod a = 0 mod a\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "finally"], ["proof (chain)\npicking this:\n  (w -\\<^sub>v v) \\<bullet> b mod a = 0 mod a", "show ?thesis"], ["proof (prove)\nusing this:\n  (w -\\<^sub>v v) \\<bullet> b mod a = 0 mod a\n\ngoal (1 subgoal):\n 1. (w -\\<^sub>v v) \\<bullet> b mod a = 0", "by simp"], ["proof (state)\nthis:\n  (w -\\<^sub>v v) \\<bullet> b mod a = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mods_with_vec_2:\n  assumes \"v <\\<^sub>v w\"\n    and \"0 \\<notin> set b\"\n    and \"length b = length w\"\n    and \"(b \\<bullet> v) mod a = (b \\<bullet> w) mod a\"\n  shows \"(b \\<bullet> (w -\\<^sub>v v)) mod a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> (w -\\<^sub>v v) mod a = 0", "by (metis (no_types, lifting) assms diff_zero dotprod_commute\n      length_map length_upt less_eq_def order_vec.less_imp_le\n      mods_with_vec vdiff_def)"], ["", "subsection \\<open>The Lexicographic Order on Vectors\\<close>"], ["", "abbreviation lex_less_than (\"_/ <\\<^sub>l\\<^sub>e\\<^sub>x _\" [51, 51] 50)\n  where\n    \"xs <\\<^sub>l\\<^sub>e\\<^sub>x ys \\<equiv> (xs, ys) \\<in> lex less_than\""], ["", "definition rlex (infix \"<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\" 50)\n  where\n    \"xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys \\<longleftrightarrow> rev xs <\\<^sub>l\\<^sub>e\\<^sub>x rev ys\""], ["", "lemma rev_le [simp]:\n  \"rev xs \\<le>\\<^sub>v rev ys \\<longleftrightarrow> xs \\<le>\\<^sub>v ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "assume i: \"i < length ys\" and [simp]: \"length xs = length ys\"\n      and \"\\<forall>i < length ys. rev xs ! i \\<le> rev ys ! i\""], ["proof (state)\nthis:\n  i < length ys\n  length xs = length ys\n  \\<forall>i<length ys. rev xs ! i \\<le> rev ys ! i\n\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "then"], ["proof (chain)\npicking this:\n  i < length ys\n  length xs = length ys\n  \\<forall>i<length ys. rev xs ! i \\<le> rev ys ! i", "have \"rev xs ! (length ys - i - 1) \\<le> rev ys ! (length ys - i - 1)\""], ["proof (prove)\nusing this:\n  i < length ys\n  length xs = length ys\n  \\<forall>i<length ys. rev xs ! i \\<le> rev ys ! i\n\ngoal (1 subgoal):\n 1. rev xs ! (length ys - i - 1) \\<le> rev ys ! (length ys - i - 1)", "by auto"], ["proof (state)\nthis:\n  rev xs ! (length ys - i - 1) \\<le> rev ys ! (length ys - i - 1)\n\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "then"], ["proof (chain)\npicking this:\n  rev xs ! (length ys - i - 1) \\<le> rev ys ! (length ys - i - 1)", "have \"xs ! i \\<le> ys ! i\""], ["proof (prove)\nusing this:\n  rev xs ! (length ys - i - 1) \\<le> rev ys ! (length ys - i - 1)\n\ngoal (1 subgoal):\n 1. xs ! i \\<le> ys ! i", "using i"], ["proof (prove)\nusing this:\n  rev xs ! (length ys - i - 1) \\<le> rev ys ! (length ys - i - 1)\n  i < length ys\n\ngoal (1 subgoal):\n 1. xs ! i \\<le> ys ! i", "by (auto simp: rev_nth)"], ["proof (state)\nthis:\n  xs ! i \\<le> ys ! i\n\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < length ys; length xs = length ys;\n   \\<forall>i<length ys. rev xs ! i \\<le> rev ys ! i\\<rbrakk>\n  \\<Longrightarrow> xs ! ?i2 \\<le> ys ! ?i2\n\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i2 < length ys; length xs = length ys;\n   \\<forall>i<length ys. rev xs ! i \\<le> rev ys ! i\\<rbrakk>\n  \\<Longrightarrow> xs ! ?i2 \\<le> ys ! ?i2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i2 < length ys; length xs = length ys;\n   \\<forall>i<length ys. rev xs ! i \\<le> rev ys ! i\\<rbrakk>\n  \\<Longrightarrow> xs ! ?i2 \\<le> ys ! ?i2\n\ngoal (1 subgoal):\n 1. (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)", "by (auto simp: less_eq_def rev_nth)"], ["proof (state)\nthis:\n  (rev xs \\<le>\\<^sub>v rev ys) = (xs \\<le>\\<^sub>v ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rev_less [simp]:\n  \"rev xs <\\<^sub>v rev ys \\<longleftrightarrow> xs <\\<^sub>v ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev xs <\\<^sub>v rev ys) = (xs <\\<^sub>v ys)", "by (simp add: less_def)"], ["", "lemma less_imp_lex:\n  assumes \"xs <\\<^sub>v ys\" shows \"xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs <\\<^sub>l\\<^sub>e\\<^sub>x ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. xs <\\<^sub>l\\<^sub>e\\<^sub>x ys", "have \"length ys = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs", "using assms"], ["proof (prove)\nusing this:\n  xs <\\<^sub>v ys\n\ngoal (1 subgoal):\n 1. length ys = length xs", "by auto"], ["proof (state)\nthis:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>l\\<^sub>e\\<^sub>x ys", "then"], ["proof (chain)\npicking this:\n  length ys = length xs", "show ?thesis"], ["proof (prove)\nusing this:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>l\\<^sub>e\\<^sub>x ys", "using assms"], ["proof (prove)\nusing this:\n  length ys = length xs\n  xs <\\<^sub>v ys\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>l\\<^sub>e\\<^sub>x ys", "by (induct rule: list_induct2) (auto simp: less_Cons)"], ["proof (state)\nthis:\n  xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma less_imp_rlex:\n  assumes \"xs <\\<^sub>v ys\" shows \"xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys", "using assms and less_imp_lex [of \"rev xs\" \"rev ys\"]"], ["proof (prove)\nusing this:\n  xs <\\<^sub>v ys\n  rev xs <\\<^sub>v rev ys \\<Longrightarrow>\n  rev xs <\\<^sub>l\\<^sub>e\\<^sub>x rev ys\n\ngoal (1 subgoal):\n 1. xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys", "by (simp add: rlex_def)"], ["", "lemma lex_not_sym:\n  assumes \"xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\"\n  shows \"\\<not> ys <\\<^sub>l\\<^sub>e\\<^sub>x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys, xs) \\<notin> lex less_than", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ys <\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "assume \"ys <\\<^sub>l\\<^sub>e\\<^sub>x xs\""], ["proof (state)\nthis:\n  ys <\\<^sub>l\\<^sub>e\\<^sub>x xs\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ys <\\<^sub>l\\<^sub>e\\<^sub>x xs", "obtain i where \"i < length xs\" and \"take i xs = take i ys\"\n    and \"ys ! i < xs ! i\""], ["proof (prove)\nusing this:\n  ys <\\<^sub>l\\<^sub>e\\<^sub>x xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length xs; take i xs = take i ys;\n         ys ! i < xs ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim lex_take_index) auto"], ["proof (state)\nthis:\n  i < length xs\n  take i xs = take i ys\n  ys ! i < xs ! i\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  i < length xs\n  take i xs = take i ys\n  ys ! i < xs ! i\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "obtain j where \"j < length xs\" and \"length ys = length xs\" and \"take j xs = take j ys\"\n    and \"xs ! j < ys ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length xs; length ys = length xs;\n         take j xs = take j ys; xs ! j < ys ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length xs; length ys = length xs;\n         take j xs = take j ys; xs ! j < ys ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim lex_take_index) auto"], ["proof (state)\nthis:\n  j < length xs\n  length ys = length xs\n  take j xs = take j ys\n  xs ! j < ys ! j\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  i < length xs\n  take i xs = take i ys\n  ys ! i < xs ! i\n  j < length xs\n  length ys = length xs\n  take j xs = take j ys\n  xs ! j < ys ! j", "show False"], ["proof (prove)\nusing this:\n  i < length xs\n  take i xs = take i ys\n  ys ! i < xs ! i\n  j < length xs\n  length ys = length xs\n  take j xs = take j ys\n  xs ! j < ys ! j\n\ngoal (1 subgoal):\n 1. False", "by (metis le_antisym nat_less_le nat_neq_iff nth_take)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rlex_not_sym:\n  assumes \"xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys\"\n  shows \"\\<not> ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "assume ass: \"ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\""], ["proof (state)\nthis:\n  ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs", "obtain i where \"i < length xs\" and \"take i xs = take i ys\"\n    and \"ys ! i > xs ! i\""], ["proof (prove)\nusing this:\n  ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length xs; take i xs = take i ys;\n         xs ! i < ys ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms lex_not_sym rlex_def"], ["proof (prove)\nusing this:\n  ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\n  xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys\n  ?xs <\\<^sub>l\\<^sub>e\\<^sub>x ?ys \\<Longrightarrow>\n  (?ys, ?xs) \\<notin> lex less_than\n  (?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys) =\n  (rev ?xs <\\<^sub>l\\<^sub>e\\<^sub>x rev ?ys)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length xs; take i xs = take i ys;\n         xs ! i < ys ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < length xs\n  take i xs = take i ys\n  xs ! i < ys ! i\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  i < length xs\n  take i xs = take i ys\n  xs ! i < ys ! i\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "obtain j where \"j < length xs\" and \"length ys = length xs\" and \"take j xs = take j ys\"\n    and \"xs ! j > ys ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length xs; length ys = length xs;\n         take j xs = take j ys; ys ! j < xs ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms rlex_def ass lex_not_sym"], ["proof (prove)\nusing this:\n  xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys\n  (?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys) =\n  (rev ?xs <\\<^sub>l\\<^sub>e\\<^sub>x rev ?ys)\n  ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs\n  ?xs <\\<^sub>l\\<^sub>e\\<^sub>x ?ys \\<Longrightarrow>\n  (?ys, ?xs) \\<notin> lex less_than\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length xs; length ys = length xs;\n         take j xs = take j ys; ys ! j < xs ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j < length xs\n  length ys = length xs\n  take j xs = take j ys\n  ys ! j < xs ! j\n\ngoal (1 subgoal):\n 1. ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x xs \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  i < length xs\n  take i xs = take i ys\n  xs ! i < ys ! i\n  j < length xs\n  length ys = length xs\n  take j xs = take j ys\n  ys ! j < xs ! j", "show False"], ["proof (prove)\nusing this:\n  i < length xs\n  take i xs = take i ys\n  xs ! i < ys ! i\n  j < length xs\n  length ys = length xs\n  take j xs = take j ys\n  ys ! j < xs ! j\n\ngoal (1 subgoal):\n 1. False", "by (metis leD nat_less_le nat_neq_iff nth_take)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_trans:\n  assumes \"x <\\<^sub>l\\<^sub>e\\<^sub>x y\" and \"y <\\<^sub>l\\<^sub>e\\<^sub>x z\"\n  shows \"x <\\<^sub>l\\<^sub>e\\<^sub>x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x <\\<^sub>l\\<^sub>e\\<^sub>x z", "using assms"], ["proof (prove)\nusing this:\n  x <\\<^sub>l\\<^sub>e\\<^sub>x y\n  y <\\<^sub>l\\<^sub>e\\<^sub>x z\n\ngoal (1 subgoal):\n 1. x <\\<^sub>l\\<^sub>e\\<^sub>x z", "by (auto simp: antisym_def intro: transD [OF lex_transI])"], ["", "lemma rlex_trans:\n  assumes \"x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y\" and \"y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z\"\n  shows \"x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z", "using assms lex_trans rlex_def"], ["proof (prove)\nusing this:\n  x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y\n  y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z\n  \\<lbrakk>?x <\\<^sub>l\\<^sub>e\\<^sub>x ?y;\n   ?y <\\<^sub>l\\<^sub>e\\<^sub>x ?z\\<rbrakk>\n  \\<Longrightarrow> ?x <\\<^sub>l\\<^sub>e\\<^sub>x ?z\n  (?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys) =\n  (rev ?xs <\\<^sub>l\\<^sub>e\\<^sub>x rev ?ys)\n\ngoal (1 subgoal):\n 1. x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x z", "by blast"], ["", "lemma lex_append_rightD:\n  assumes \"xs @ us <\\<^sub>l\\<^sub>e\\<^sub>x ys @ vs\" and \"length xs = length ys\"\n    and \"\\<not> xs <\\<^sub>l\\<^sub>e\\<^sub>x ys\"\n  shows \"ys = xs \\<and> us <\\<^sub>l\\<^sub>e\\<^sub>x vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys = xs \\<and> us <\\<^sub>l\\<^sub>e\\<^sub>x vs", "using assms(2,1,3)"], ["proof (prove)\nusing this:\n  length xs = length ys\n  xs @ us <\\<^sub>l\\<^sub>e\\<^sub>x ys @ vs\n  (xs, ys) \\<notin> lex less_than\n\ngoal (1 subgoal):\n 1. ys = xs \\<and> us <\\<^sub>l\\<^sub>e\\<^sub>x vs", "by (induct xs ys rule: list_induct2) auto"], ["", "lemma rlex_Cons:\n  \"x # xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y # ys \\<longleftrightarrow> xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys \\<or> ys = xs \\<and> x < y\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y # ys) =\n    (xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ys \\<or> ys = xs \\<and> x < y)", "by (cases \"length ys = length xs\")\n    (auto simp: rlex_def intro: lex_append_rightI lex_append_leftI dest: lex_append_rightD lex_lengthD)"], ["", "lemma rlex_irrefl:\n  \"\\<not> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x x", "by (induct x) (auto simp: rlex_def dest: lex_append_rightD)"], ["", "subsection \\<open>Code Equations\\<close>"], ["", "fun exists2\n  where\n    \"exists2 d P [] [] \\<longleftrightarrow> False\"\n  | \"exists2 d P (x#xs) (y#ys) \\<longleftrightarrow> P x y \\<or> exists2 d P xs ys\"\n  | \"exists2 d P _ _ \\<longleftrightarrow> d\""], ["", "lemma not_le_code [code_unfold]: \"\\<not> xs \\<le>\\<^sub>v ys \\<longleftrightarrow> exists2 True (>) xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> xs \\<le>\\<^sub>v ys) = exists2 True (\\<lambda>x y. y < x) xs ys", "by (induct \"True\" \"(>) :: nat \\<Rightarrow> nat \\<Rightarrow> bool\" xs ys rule: exists2.induct) (auto simp: le_Cons)"], ["", "end"]]}