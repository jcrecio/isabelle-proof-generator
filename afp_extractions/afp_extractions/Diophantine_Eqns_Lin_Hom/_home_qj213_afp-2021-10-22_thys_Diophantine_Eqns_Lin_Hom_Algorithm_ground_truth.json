{"file_name": "/home/qj213/afp-2021-10-22/thys/Diophantine_Eqns_Lin_Hom/Algorithm.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Diophantine_Eqns_Lin_Hom", "problem_names": ["lemma all_Suc_le_conv: \"(\\<forall>i\\<le>Suc n. P i) \\<longleftrightarrow> P 0 \\<and> (\\<forall>i\\<le>n. P (Suc i))\"", "lemma concat_map_filter_filter:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> \\<not> Q x \\<Longrightarrow> filter P (f x) = []\"\n  shows \"concat (map (filter P \\<circ> f) (filter Q xs)) = concat (map (filter P \\<circ> f) xs)\"", "lemma filter_pairs_conj:\n  \"filter (\\<lambda>(x, y). P x y \\<and> Q y) xs = filter (\\<lambda>(x, y). P x y) (filter (Q \\<circ> snd) xs)\"", "lemma concat_map_filter:\n  \"concat (map f (filter P xs)) = concat (map (\\<lambda>x. if P x then f x else []) xs)\"", "lemma alls_ne [simp]:\n  \"alls B as \\<noteq> []\"", "lemma set_alls: \"set (alls B a) =\n  {(x, s). length x = length a \\<and> (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\"\n    (is \"?L a = ?R a\")", "lemma alls_nth0 [simp]: \"alls A as ! 0 = (zeroes (length as), 0)\"", "lemma alls_Cons_tl_conv: \"alls A as = (zeroes (length as), 0) # tl (alls A as)\"", "lemma sorted_wrt_alls:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))\"", "lemma alls2_ne [simp]:\n  \"alls2 A B a b \\<noteq> []\"", "lemma set_alls2:\n  \"set (alls2 A B a b) = {((x, s), (y, t)). length x = length a \\<and> length y = length b \\<and>\n    (\\<forall>i<length a. x ! i \\<le> A) \\<and> (\\<forall>j<length b. y ! j \\<le> B) \\<and> s = a \\<bullet> x \\<and> t = b \\<bullet> y}\"", "lemma alls2_nth0 [simp]: \"alls2 A B as bs ! 0 = ((zeroes (length as), 0), (zeroes (length bs), 0))\"", "lemma alls2_Cons_tl_conv: \"alls2 A B as bs =\n  ((zeroes (length as), 0), (zeroes (length bs), 0)) # tl (alls2 A B as bs)\"", "lemma sorted_wrt_gen2:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (gen2 A B a b)\"", "lemma sorted_wrt_generate':\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (generate' A B a b)\"", "lemma gen2_nth0 [simp]:\n  \"gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))\"", "lemma gen2_ne [simp, intro]: \"gen2 m n b c \\<noteq> []\"", "lemma in_generate': \"x \\<in> set (generate' m n c b) \\<Longrightarrow> x \\<in> set (gen2 m n c b)\"", "lemma cond_cons_simp [simp]:\n  \"cond_cons P ([], s) = True\"\n  \"cond_cons P (x # xs, s) = P (x # xs) s\"", "lemma suffs_Nil [simp]: \"suffs P [] ([], s) \\<longleftrightarrow> s = 0\"", "lemma suffs_Cons:\n  \"suffs P (a # as) (x # xs, s) \\<longleftrightarrow>\n    s = a * x + as \\<bullet> xs \\<and> cond_cons P (x # xs, s) \\<and> suffs P as (xs, as \\<bullet> xs)\"", "lemma maxne0_impl:\n  assumes \"length x = length a\"\n  shows \"maxne0_impl x a = maxne0 x a\"", "lemma maxne0_impl_le:\n  \"maxne0_impl x a \\<le> Max (set (a::nat list))\"", "lemma sorted_wrt_check_generate':\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (check' a b (generate' A B a b))\"", "lemma big_e:\n  \"set (big_e a b xs j) = hlde_ops.Ej a b j xs\"", "lemma big_d:\n  \"set (big_d a b ys i) = hlde_ops.Di a b i ys\"", "lemma big_d':\n  \"length ys \\<le> length b \\<Longrightarrow> set (big_d' a b ys i) = hlde_ops.Di' a b i ys\"", "lemma max_y_impl:\n  \"max_y_impl a b x j = hlde_ops.max_y a b x j\"", "lemma max_x_impl:\n  \"max_x_impl a b y i = hlde_ops.max_x a b y i\"", "lemma max_x_impl':\n  assumes \"length y \\<le> length b\"\n  shows \"max_x_impl' a b y i = hlde_ops.max_x' a b y i\"", "lemma (in hlde) cond_a [simp]: \"cond_a b x y = cond_A x y\"", "lemma (in hlde) cond_b [simp]: \"cond_b a b x = cond_B x\"", "lemma (in hlde) boundr_impl [simp]: \"boundr_impl a b x y = boundr x y\"", "lemma (in hlde) cond_d [simp]: \"cond_d a b x y = cond_D x y\"", "lemma (in hlde) subdprodr_impl [simp]: \"subdprodr_impl a b y = subdprodr y\"", "lemma (in hlde) subdprodl_impl [simp]: \"subdprodl_impl a b x y = subdprodl x y\"", "lemma (in hlde) cond_bound_impl [simp]: \"boundl_impl a b x y = boundl x y\"", "lemma (in hlde) check [simp]:\n  \"check' a b =\n    filter (\\<lambda>(x, y). static_bounds a b x y \\<and> a \\<bullet> x = b \\<bullet> y \\<and> boundr x y \\<and>\n    subdprodl x y \\<and>\n    subdprodr y)\"", "lemma (in hlde) le_imp_conds:\n  assumes le: \"u \\<le>\\<^sub>v x\" \"v \\<le>\\<^sub>v y\"\n    and len: \"length x = m\" \"length y = n\"\n  shows \"cond_B x \\<Longrightarrow> cond_B u\"\n    and \"boundr x y \\<Longrightarrow> boundr u v\"\n    and \"a \\<bullet> u = b \\<bullet> v \\<Longrightarrow> cond_D x y \\<Longrightarrow> cond_D u v\"\n    and \"a \\<bullet> u = b \\<bullet> v \\<Longrightarrow> subdprodl x y \\<Longrightarrow> subdprodl u v\"\n    and \"subdprodr y \\<Longrightarrow> subdprodr v\"", "lemma (in hlde) special_solutions [simp]:\n  shows \"set (special_solutions a b) = Special_Solutions\"", "lemma set_gen2:\n  \"set (gen2 A B a b) = {(x, y). x \\<le>\\<^sub>v replicate (length a) A \\<and> y \\<le>\\<^sub>v replicate (length b) B}\"\n  (is \"?L = ?R\")", "lemma set_gen2':\n  \"(\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b) =\n    {(x, y). x \\<le>\\<^sub>v replicate (length a) A \\<and> y \\<le>\\<^sub>v replicate (length b) B}\"", "lemma (in hlde) in_non_special_solutions:\n  assumes \"(x, y) \\<in> set (non_special_solutions a b)\"\n  shows \"(x, y) \\<in> Solutions\"", "lemma generate_unique:\n  assumes \"i < j\"\n    and \"j < length (generate A B a b)\"\n  shows \"generate A B a b ! i \\<noteq> generate A B a b ! j\"", "lemma gen2_unique:\n  assumes \"i < j\"\n    and \"j < length (gen2 A B a b)\"\n  shows \"gen2 A B a b ! i \\<noteq> gen2 A B a b ! j\"", "lemma zeroes_ni_generate':\n  \"(zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)\"", "lemma set_generate':\n  \"set (generate' A B a b) =\n    {(x, y). (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and> (x, y) \\<in> set (gen2 A B a b)}\"", "lemma set_generate'':\n  \"set (generate' A B a b) =\n  {(x, y). (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and> x \\<le>\\<^sub>v replicate (length a) A \\<and> y \\<le>\\<^sub>v replicate (length b) B}\"", "lemma (in hlde) zeroes_ni_non_special_solutions:\n  shows \"(zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)\"", "lemma (in hlde) solve_subset_Minimal_Solutions:\n  shows \"set (solve a b) \\<subseteq> Minimal_Solutions\"", "lemma (in hlde) Minimal_Solutions_subset_solve:\n  shows \"Minimal_Solutions \\<subseteq> set (solve a b)\"", "lemma (in hlde) solve [simp]:\n  shows \"set (solve a b) = Minimal_Solutions\"", "lemma in_incs:\n  assumes \"(ys, t) \\<in> set (incs a x (xs, s))\"\n  shows \"length ys = length xs + 1 \\<and> t = s + hd ys * a \\<and> tl ys = xs \\<and> C ys t\"", "lemma incs_Nil [simp]: \"x > B \\<Longrightarrow> incs a x (xs, s) = []\"", "lemma incs_filter:\n  assumes \"x \\<le> B\"\n  shows \"incs a x = (\\<lambda>(xs, s). filter (cond_cons C) (map (\\<lambda>x. (x # xs, s + a * x)) [x ..< B + 1]))\"", "lemma gen_check_len:\n  assumes \"(ys, s) \\<in> set (gen_check as)\"\n  shows \"length ys = length as\"", "lemma in_gen_check:\n  assumes \"(xs, s) \\<in> set (gen_check as)\"\n  shows \"length xs = length as \\<and> s = as \\<bullet> xs\"", "lemma gen_check_filter:\n  \"gen_check as = filter (suffs C as) (alls B as)\"", "lemma in_gen_check_cond:\n  assumes \"(xs, s) \\<in> set (gen_check as)\"\n  shows \"\\<forall>j\\<le>length xs. drop j xs \\<noteq> [] \\<longrightarrow> C (drop j xs) (s - take j as \\<bullet> take j xs)\"", "lemma sorted_gen_check:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))\"", "lemma generate_check_filter_conv:\n  \"generate_check a b = [(xs, ys).\n    ys \\<leftarrow> filter (suffs C\\<^sub>2 b) (alls B\\<^sub>2 b),\n    xs \\<leftarrow> filter (suffs (C\\<^sub>1 b (fst ys)) a) (alls (B\\<^sub>1 b) a)]\"", "lemma generate_check_filter:\n  \"generate_check a b = [(xs, ys) \\<leftarrow> alls2 (B\\<^sub>1 b) B\\<^sub>2 a b. suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys]\"", "lemma tl_generate_check_filter:\n  assumes \"suffs (C\\<^sub>1 b (zeroes (length b))) a (zeroes (length a), 0)\"\n    and \"suffs C\\<^sub>2 b (zeroes (length b), 0)\"\n  shows \"tl (generate_check a b) = [(xs, ys) \\<leftarrow> tl (alls2 (B\\<^sub>1 b) B\\<^sub>2 a b). suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys]\"", "lemma max_x_impl'_conv:\n  \"i < length a \\<Longrightarrow> length y = length b \\<Longrightarrow> max_x_impl' a b y i = max_x_impl a b y i\"", "lemma le_imp_big_d'_subset:\n  assumes \"v \\<le>\\<^sub>v y\"\n  shows \"set (big_d' a b v i) \\<subseteq> set (big_d' a b y i)\"", "lemma finite_big_d':\n  \"finite (set (big_d' a b y i))\"", "lemma Min_big_d'_le:\n  assumes \"i < length a\"\n    and \"big_d' a b y i \\<noteq> []\"\n    and \"length y \\<le> length b\"\n  shows \"Min (set (big_d' a b y i)) \\<le> Max (set b)\" (is \"?m \\<le> _\")", "lemma le_imp_max_x_impl'_ge:\n  assumes \"v \\<le>\\<^sub>v y\"\n    and \"i < length a\"\n  shows \"max_x_impl' a b v i \\<ge> max_x_impl' a b y i\"", "lemma cond1_cond2_zeroes:\n  shows \"suffs (cond1 b (zeroes (length b))) a (zeroes (length a), 0)\"\n    and \"suffs (cond2 a b) b (zeroes (length b), 0)\"", "lemma suffs_cond1I:\n  assumes \"\\<forall>y\\<in>set aa. y \\<le> maxne0_impl aaa b\"\n    and \"length aa = length a\"\n    and \"a \\<bullet> aa = b \\<bullet> aaa\"\n  shows \"suffs (cond1 b aaa) a (aa, b \\<bullet> aaa)\"", "lemma suffs_cond2_conv:\n  assumes \"length ys = length b\"\n  shows \"suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<longleftrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys\"\n    (is \"?L \\<longleftrightarrow> ?R\")", "lemma suffs_cond2I:\n  assumes \"\\<forall>y\\<in>set aaa. y \\<le> Max (set a)\"\n    and \"length aaa = length b\"\n    and \"subdprodr_impl a b aaa\"\n  shows \"suffs (cond2 a b) b (aaa, b \\<bullet> aaa)\"", "lemma check_cond_conv:\n  assumes \"(x, y) \\<in> set (alls2 (Max (set b)) (Max (set a)) a b)\"\n  shows \"check_cond a b (fst x, fst y) \\<longleftrightarrow>\n    static_bounds a b (fst x) (fst y) \\<and> a \\<bullet> fst x = b \\<bullet> fst y \\<and> boundr_impl a b (fst x) (fst y) \\<and>\n    suffs (cond1 b (fst y)) a x \\<and>\n    suffs (cond2 a b) b y\"", "lemma tune:\n  \"check' a b (generate' (Max (set b)) (Max (set a)) a b) = fast_filter a b\"", "lemma in_incs:\n  assumes \"(ys, t) \\<in> set (incs a x (xs, s))\"\n  shows \"length ys = length xs + 1 \\<and> t = s + hd ys * a \\<and> tl ys = xs \\<and> cond ys t\"", "lemma incs_Nil [simp]: \"x > B \\<Longrightarrow> incs a x (xs, s) = []\"", "lemma c1_gen_check_conv:\n  assumes \"(ys, s) \\<in> set (c2_gen_check a b b)\"\n  shows \"c1_gen_check b ys a = bounded_gen_check.gen_check (cond1 b ys) a\"", "lemma solve_efficient [code]:\n  \"solve a b = special_solutions a b @ minimize (fast_filter a b)\"", "lemma c12_generate_check_code [code_unfold]:\n  \"c12_generate_check a b a b = generate_check a b\""], "translations": [["", "lemma all_Suc_le_conv: \"(\\<forall>i\\<le>Suc n. P i) \\<longleftrightarrow> P 0 \\<and> (\\<forall>i\\<le>n. P (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<le>Suc n. P i) = (P 0 \\<and> (\\<forall>i\\<le>n. P (Suc i)))", "by (metis less_Suc_eq_0_disj nat_less_le order_refl)"], ["", "(*TODO: move*)"], ["", "lemma concat_map_filter_filter:\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> \\<not> Q x \\<Longrightarrow> filter P (f x) = []\"\n  shows \"concat (map (filter P \\<circ> f) (filter Q xs)) = concat (map (filter P \\<circ> f) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (map (filter P \\<circ> f) (filter Q xs)) =\n    concat (map (filter P \\<circ> f) xs)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set xs; \\<not> Q ?x\\<rbrakk>\n  \\<Longrightarrow> filter P (f ?x) = []\n\ngoal (1 subgoal):\n 1. concat (map (filter P \\<circ> f) (filter Q xs)) =\n    concat (map (filter P \\<circ> f) xs)", "by (induct xs) simp_all"], ["", "(*TODO: move*)"], ["", "lemma filter_pairs_conj:\n  \"filter (\\<lambda>(x, y). P x y \\<and> Q y) xs = filter (\\<lambda>(x, y). P x y) (filter (Q \\<circ> snd) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>(x, y). P x y \\<and> Q y) xs =\n    filter (\\<lambda>(x, y). P x y) (filter (Q \\<circ> snd) xs)", "by (induct xs) auto"], ["", "(*TODO: move*)"], ["", "lemma concat_map_filter:\n  \"concat (map f (filter P xs)) = concat (map (\\<lambda>x. if P x then f x else []) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (map f (filter P xs)) =\n    concat (map (\\<lambda>x. if P x then f x else []) xs)", "by (induct xs) simp_all"], ["", "fun alls\n  where\n    \"alls B [] = [([], 0)]\"\n  | \"alls B (a # as) = [(x # xs, s + a * x). (xs, s) \\<leftarrow> alls B as, x \\<leftarrow> [0 ..< B + 1]]\""], ["", "lemma alls_ne [simp]:\n  \"alls B as \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alls B as \\<noteq> []", "by (induct as)\n    (auto, metis (no_types, lifting) append_is_Nil_conv case_prod_conv list.set_intros(1)\n     neq_Nil_conv old.prod.exhaust)"], ["", "lemma set_alls: \"set (alls B a) =\n  {(x, s). length x = length a \\<and> (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\"\n    (is \"?L a = ?R a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (alls B a) =\n    {(x, s).\n     length x = length a \\<and>\n     (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (alls B a)\n    \\<subseteq> {(x, s).\n                 length x = length a \\<and>\n                 (\\<forall>i<length a. x ! i \\<le> B) \\<and>\n                 s = a \\<bullet> x}\n 2. {(x, s).\n     length x = length a \\<and>\n     (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\n    \\<subseteq> set (alls B a)", "show \"?L a \\<subseteq> ?R a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (alls B a)\n    \\<subseteq> {b. case b of\n                    (x, s) \\<Rightarrow>\n                      length x = length a \\<and>\n                      (\\<forall>i<length a. x ! i \\<le> B) \\<and>\n                      s = a \\<bullet> x}", "by (induct a) (auto simp: nth_Cons split: nat.splits)"], ["proof (state)\nthis:\n  set (alls B a)\n  \\<subseteq> {b. case b of\n                  (x, s) \\<Rightarrow>\n                    length x = length a \\<and>\n                    (\\<forall>i<length a. x ! i \\<le> B) \\<and>\n                    s = a \\<bullet> x}\n\ngoal (1 subgoal):\n 1. {(x, s).\n     length x = length a \\<and>\n     (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\n    \\<subseteq> set (alls B a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {(x, s).\n     length x = length a \\<and>\n     (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\n    \\<subseteq> set (alls B a)", "show \"?R a \\<subseteq> ?L a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {b. case b of\n        (x, s) \\<Rightarrow>\n          length x = length a \\<and>\n          (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\n    \\<subseteq> set (alls B a)", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. {a. case a of\n        (x, s) \\<Rightarrow>\n          length x = length [] \\<and>\n          (\\<forall>i<length []. x ! i \\<le> B) \\<and> s = [] \\<bullet> x}\n    \\<subseteq> set (alls B [])\n 2. \\<And>a1 a2.\n       {a. case a of\n           (x, s) \\<Rightarrow>\n             length x = length a2 \\<and>\n             (\\<forall>i<length a2. x ! i \\<le> B) \\<and>\n             s = a2 \\<bullet> x}\n       \\<subseteq> set (alls B a2) \\<Longrightarrow>\n       {a. case a of\n           (x, s) \\<Rightarrow>\n             length x = length (a1 # a2) \\<and>\n             (\\<forall>i<length (a1 # a2). x ! i \\<le> B) \\<and>\n             s = (a1 # a2) \\<bullet> x}\n       \\<subseteq> set (alls B (a1 # a2))", "case (Cons a as)"], ["proof (state)\nthis:\n  {a. case a of\n      (x, s) \\<Rightarrow>\n        length x = length as \\<and>\n        (\\<forall>i<length as. x ! i \\<le> B) \\<and> s = as \\<bullet> x}\n  \\<subseteq> set (alls B as)\n\ngoal (2 subgoals):\n 1. {a. case a of\n        (x, s) \\<Rightarrow>\n          length x = length [] \\<and>\n          (\\<forall>i<length []. x ! i \\<le> B) \\<and> s = [] \\<bullet> x}\n    \\<subseteq> set (alls B [])\n 2. \\<And>a1 a2.\n       {a. case a of\n           (x, s) \\<Rightarrow>\n             length x = length a2 \\<and>\n             (\\<forall>i<length a2. x ! i \\<le> B) \\<and>\n             s = a2 \\<bullet> x}\n       \\<subseteq> set (alls B a2) \\<Longrightarrow>\n       {a. case a of\n           (x, s) \\<Rightarrow>\n             length x = length (a1 # a2) \\<and>\n             (\\<forall>i<length (a1 # a2). x ! i \\<le> B) \\<and>\n             s = (a1 # a2) \\<bullet> x}\n       \\<subseteq> set (alls B (a1 # a2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. case a of\n        (x, s) \\<Rightarrow>\n          length x = length (a # as) \\<and>\n          (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n          s = (a # as) \\<bullet> x}\n    \\<subseteq> set (alls B (a # as))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a. case a of\n                   (x, s) \\<Rightarrow>\n                     length x = length (a # as) \\<and>\n                     (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n                     s = (a # as) \\<bullet> x} \\<Longrightarrow>\n       x \\<in> set (alls B (a # as))", "fix xs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a. case a of\n                   (x, s) \\<Rightarrow>\n                     length x = length (a # as) \\<and>\n                     (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n                     s = (a # as) \\<bullet> x} \\<Longrightarrow>\n       x \\<in> set (alls B (a # as))", "assume \"xs' \\<in> ?R (a # as)\""], ["proof (state)\nthis:\n  xs'\n  \\<in> {a. case a of\n            (x, s) \\<Rightarrow>\n              length x = length (a # as) \\<and>\n              (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n              s = (a # as) \\<bullet> x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a. case a of\n                   (x, s) \\<Rightarrow>\n                     length x = length (a # as) \\<and>\n                     (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n                     s = (a # as) \\<bullet> x} \\<Longrightarrow>\n       x \\<in> set (alls B (a # as))", "then"], ["proof (chain)\npicking this:\n  xs'\n  \\<in> {a. case a of\n            (x, s) \\<Rightarrow>\n              length x = length (a # as) \\<and>\n              (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n              s = (a # as) \\<bullet> x}", "obtain x and xs where [simp]: \"xs' = (x # xs, (a # as) \\<bullet> (x # xs))\"\n        and \"length as = length xs\"\n        and B: \"x \\<le> B\" \"\\<forall>i<length as. xs ! i \\<le> B\""], ["proof (prove)\nusing this:\n  xs'\n  \\<in> {a. case a of\n            (x, s) \\<Rightarrow>\n              length x = length (a # as) \\<and>\n              (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n              s = (a # as) \\<bullet> x}\n\ngoal (1 subgoal):\n 1. (\\<And>x xs.\n        \\<lbrakk>xs' = (x # xs, (a # as) \\<bullet> (x # xs));\n         length as = length xs; x \\<le> B;\n         \\<forall>i<length as. xs ! i \\<le> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases xs', case_tac a) (auto simp: All_less_Suc2)"], ["proof (state)\nthis:\n  xs' = (x # xs, (a # as) \\<bullet> (x # xs))\n  length as = length xs\n  x \\<le> B\n  \\<forall>i<length as. xs ! i \\<le> B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a. case a of\n                   (x, s) \\<Rightarrow>\n                     length x = length (a # as) \\<and>\n                     (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n                     s = (a # as) \\<bullet> x} \\<Longrightarrow>\n       x \\<in> set (alls B (a # as))", "then"], ["proof (chain)\npicking this:\n  xs' = (x # xs, (a # as) \\<bullet> (x # xs))\n  length as = length xs\n  x \\<le> B\n  \\<forall>i<length as. xs ! i \\<le> B", "have \"(xs, as \\<bullet> xs) \\<in> ?L as\""], ["proof (prove)\nusing this:\n  xs' = (x # xs, (a # as) \\<bullet> (x # xs))\n  length as = length xs\n  x \\<le> B\n  \\<forall>i<length as. xs ! i \\<le> B\n\ngoal (1 subgoal):\n 1. (xs, as \\<bullet> xs) \\<in> set (alls B as)", "using Cons"], ["proof (prove)\nusing this:\n  xs' = (x # xs, (a # as) \\<bullet> (x # xs))\n  length as = length xs\n  x \\<le> B\n  \\<forall>i<length as. xs ! i \\<le> B\n  {a. case a of\n      (x, s) \\<Rightarrow>\n        length x = length as \\<and>\n        (\\<forall>i<length as. x ! i \\<le> B) \\<and> s = as \\<bullet> x}\n  \\<subseteq> set (alls B as)\n\ngoal (1 subgoal):\n 1. (xs, as \\<bullet> xs) \\<in> set (alls B as)", "by auto"], ["proof (state)\nthis:\n  (xs, as \\<bullet> xs) \\<in> set (alls B as)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a. case a of\n                   (x, s) \\<Rightarrow>\n                     length x = length (a # as) \\<and>\n                     (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n                     s = (a # as) \\<bullet> x} \\<Longrightarrow>\n       x \\<in> set (alls B (a # as))", "then"], ["proof (chain)\npicking this:\n  (xs, as \\<bullet> xs) \\<in> set (alls B as)", "show \"xs' \\<in> ?L (a # as)\""], ["proof (prove)\nusing this:\n  (xs, as \\<bullet> xs) \\<in> set (alls B as)\n\ngoal (1 subgoal):\n 1. xs' \\<in> set (alls B (a # as))", "using B"], ["proof (prove)\nusing this:\n  (xs, as \\<bullet> xs) \\<in> set (alls B as)\n  x \\<le> B\n  \\<forall>i<length as. xs ! i \\<le> B\n\ngoal (1 subgoal):\n 1. xs' \\<in> set (alls B (a # as))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(xs, as \\<bullet> xs) \\<in> set (alls B as); x \\<le> B;\n     \\<forall>i<length as. xs ! i \\<le> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa\\<in>set (alls B as).\n                         \\<exists>uu_ uua_.\n                            (uua_, uu_) = xa \\<and>\n                            (x = B \\<and>\n                             xs = uua_ \\<and>\n                             a * x + as \\<bullet> xs = uu_ + a * B \\<or>\n                             (x # xs, a * x + as \\<bullet> xs)\n                             \\<in> (\\<lambda>x. (x # uua_, uu_ + a * x)) `\n                                   {0..<B})", "apply (rule bexI [of _ \"(xs, as \\<bullet> xs)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(xs, as \\<bullet> xs) \\<in> set (alls B as); x \\<le> B;\n     \\<forall>i<length as. xs ! i \\<le> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>uu_ uua_.\n                         (uua_, uu_) = (xs, as \\<bullet> xs) \\<and>\n                         (x = B \\<and>\n                          xs = uua_ \\<and>\n                          a * x + as \\<bullet> xs = uu_ + a * B \\<or>\n                          (x # xs, a * x + as \\<bullet> xs)\n                          \\<in> (\\<lambda>x. (x # uua_, uu_ + a * x)) `\n                                {0..<B})\n 2. \\<lbrakk>(xs, as \\<bullet> xs) \\<in> set (alls B as); x \\<le> B;\n     \\<forall>i<length as. xs ! i \\<le> B\\<rbrakk>\n    \\<Longrightarrow> (xs, as \\<bullet> xs) \\<in> set (alls B as)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  xs' \\<in> set (alls B (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {a. case a of\n      (x, s) \\<Rightarrow>\n        length x = length (a # as) \\<and>\n        (\\<forall>i<length (a # as). x ! i \\<le> B) \\<and>\n        s = (a # as) \\<bullet> x}\n  \\<subseteq> set (alls B (a # as))\n\ngoal (1 subgoal):\n 1. {a. case a of\n        (x, s) \\<Rightarrow>\n          length x = length [] \\<and>\n          (\\<forall>i<length []. x ! i \\<le> B) \\<and> s = [] \\<bullet> x}\n    \\<subseteq> set (alls B [])", "qed auto"], ["proof (state)\nthis:\n  {b. case b of\n      (x, s) \\<Rightarrow>\n        length x = length a \\<and>\n        (\\<forall>i<length a. x ! i \\<le> B) \\<and> s = a \\<bullet> x}\n  \\<subseteq> set (alls B a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alls_nth0 [simp]: \"alls A as ! 0 = (zeroes (length as), 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alls A as ! 0 = (zeroes (length as), 0)", "by (induct as) (auto simp: nth_append concat_map_nth0)"], ["", "lemma alls_Cons_tl_conv: \"alls A as = (zeroes (length as), 0) # tl (alls A as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alls A as = (zeroes (length as), 0) # tl (alls A as)", "by (rule nth_equalityI) (auto simp: nth_Cons nth_tl split: nat.splits)"], ["", "lemma sorted_wrt_alls:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))", "by (induct xs) (auto simp: map_concat rlex_Cons sorted_wrt_append\n      intro!: sorted_wrt_concat_map sorted_wrt_map_mono [of \"(<)\"])"], ["", "definition \"alls2 A B a b = [(xs, ys). ys \\<leftarrow> alls B b, xs \\<leftarrow> alls A a]\""], ["", "lemma alls2_ne [simp]:\n  \"alls2 A B a b \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alls2 A B a b \\<noteq> []", "by (auto simp: alls2_def) (metis alls_ne list.set_intros(1) neq_Nil_conv surj_pair)"], ["", "lemma set_alls2:\n  \"set (alls2 A B a b) = {((x, s), (y, t)). length x = length a \\<and> length y = length b \\<and>\n    (\\<forall>i<length a. x ! i \\<le> A) \\<and> (\\<forall>j<length b. y ! j \\<le> B) \\<and> s = a \\<bullet> x \\<and> t = b \\<bullet> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (alls2 A B a b) =\n    {((x, s), y, t).\n     length x = length a \\<and>\n     length y = length b \\<and>\n     (\\<forall>i<length a. x ! i \\<le> A) \\<and>\n     (\\<forall>j<length b. y ! j \\<le> B) \\<and>\n     s = a \\<bullet> x \\<and> t = b \\<bullet> y}", "by (auto simp: alls2_def set_alls)"], ["", "lemma alls2_nth0 [simp]: \"alls2 A B as bs ! 0 = ((zeroes (length as), 0), (zeroes (length bs), 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alls2 A B as bs ! 0 = ((zeroes (length as), 0), zeroes (length bs), 0)", "by (auto simp: alls2_def concat_map_nth0)"], ["", "lemma alls2_Cons_tl_conv: \"alls2 A B as bs =\n  ((zeroes (length as), 0), (zeroes (length bs), 0)) # tl (alls2 A B as bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alls2 A B as bs =\n    ((zeroes (length as), 0), zeroes (length bs), 0) # tl (alls2 A B as bs)", "apply (rule nth_equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (alls2 A B as bs) =\n    length\n     (((zeroes (length as), 0), zeroes (length bs), 0) #\n      tl (alls2 A B as bs))\n 2. \\<And>i.\n       i < length (alls2 A B as bs) \\<Longrightarrow>\n       alls2 A B as bs ! i =\n       (((zeroes (length as), 0), zeroes (length bs), 0) #\n        tl (alls2 A B as bs)) !\n       i", "apply (auto simp: alls2_def nth_Cons nth_tl length_concat concat_map_nth0 split: nat.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (map (length \\<circ>\n           (\\<lambda>ys. map (\\<lambda>xs. (xs, ys)) (alls A as)))\n       (alls B bs)) =\n    Suc (sum_list\n          (map (length \\<circ>\n                (\\<lambda>ys. map (\\<lambda>xs. (xs, ys)) (alls A as)))\n            (alls B bs)) -\n         Suc 0)", "apply (cases \"alls B bs\"; simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "abbreviation gen2\n  where\n    \"gen2 A B a b \\<equiv> map (\\<lambda>(x, y). (fst x, fst y)) (alls2 A B a b)\""], ["", "lemma sorted_wrt_gen2:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (gen2 A B a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2)\n     (Algorithm.gen2 A B a b)", "apply (rule sorted_wrt_map_mono [of \"\\<lambda>(x, y) (u, v). (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (fst u, fst v)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. sorted_wrt\n     (\\<lambda>(x, y) (u, v).\n         (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n         (fst u, fst v))\n     (alls2 A B a b)\n 2. \\<And>x y.\n       (case x of\n        (x, y) \\<Rightarrow>\n          \\<lambda>(u, v).\n             (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n             (fst u, fst v))\n        y \\<Longrightarrow>\n       (case x of\n        (x, y) \\<Rightarrow>\n          (fst x, fst y)) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n       (case y of (x, y) \\<Rightarrow> (fst x, fst y))", "apply (auto simp: alls2_def map_concat)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt\n     (\\<lambda>(x, y) (u, v).\n         fst x @ fst y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst u @ fst v)\n     (concat\n       (map (\\<lambda>ys. map (\\<lambda>xs. (xs, ys)) (alls A a))\n         (alls B b)))", "apply (fold rlex2.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt\n     (\\<lambda>(x, y) (u, v).\n         (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n         (fst u, fst v))\n     (concat\n       (map (\\<lambda>ys. map (\\<lambda>xs. (xs, ys)) (alls A a))\n         (alls B b)))", "apply (rule sorted_wrt_concat_map_map)"], ["proof (prove)\ngoal (4 subgoals):\n 1. sorted_wrt ?Q6 (alls A a)\n 2. sorted_wrt ?Q6 (alls B b)\n 3. \\<And>a xs ys.\n       ?Q6 xs ys \\<Longrightarrow>\n       (case (xs, a) of\n        (x, y) \\<Rightarrow>\n          \\<lambda>(u, v).\n             (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n             (fst u, fst v))\n        (ys, a)\n 4. \\<And>xs ys u v.\n       \\<lbrakk>xs \\<in> set (alls A a); ys \\<in> set (alls A a);\n        ?Q6 u v\\<rbrakk>\n       \\<Longrightarrow> (case (xs, u) of\n                          (x, y) \\<Rightarrow>\n                            \\<lambda>(u, v).\n                               (fst x,\n                                fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n                               (fst u, fst v))\n                          (ys, v)", "apply (rule sorted_wrt_map_distr, rule sorted_wrt_alls)"], ["proof (prove)\ngoal (3 subgoals):\n 1. sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n     (alls B b)\n 2. \\<And>a xs ys.\n       fst xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst ys \\<Longrightarrow>\n       (case (xs, a) of\n        (x, y) \\<Rightarrow>\n          \\<lambda>(u, v).\n             (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n             (fst u, fst v))\n        (ys, a)\n 3. \\<And>xs ys u v.\n       \\<lbrakk>xs \\<in> set (alls A a); ys \\<in> set (alls A a);\n        fst u <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst v\\<rbrakk>\n       \\<Longrightarrow> (case (xs, u) of\n                          (x, y) \\<Rightarrow>\n                            \\<lambda>(u, v).\n                               (fst x,\n                                fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n                               (fst u, fst v))\n                          (ys, v)", "apply (rule sorted_wrt_map_distr, rule sorted_wrt_alls)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs ys.\n       fst xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst ys \\<Longrightarrow>\n       (case (xs, a) of\n        (x, y) \\<Rightarrow>\n          \\<lambda>(u, v).\n             (fst x, fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n             (fst u, fst v))\n        (ys, a)\n 2. \\<And>xs ys u v.\n       \\<lbrakk>xs \\<in> set (alls A a); ys \\<in> set (alls A a);\n        fst u <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst v\\<rbrakk>\n       \\<Longrightarrow> (case (xs, u) of\n                          (x, y) \\<Rightarrow>\n                            \\<lambda>(u, v).\n                               (fst x,\n                                fst y) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n                               (fst u, fst v))\n                          (ys, v)", "apply (auto simp: rlex_def set_alls intro: lex_append_leftI lex_append_rightI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition generate'\n  where\n    \"generate' A B a b = tl (map (\\<lambda>(x, y). (fst x, fst y)) (alls2 A B a b))\""], ["", "lemma sorted_wrt_generate':\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (generate' A B a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2)\n     (generate' A B a b)", "by (auto simp: generate'_def sorted_wrt_gen2 sorted_wrt_tl)"], ["", "lemma gen2_nth0 [simp]:\n  \"gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm.gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))", "by auto"], ["", "lemma gen2_ne [simp, intro]: \"gen2 m n b c \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm.gen2 m n b c \\<noteq> []", "by auto"], ["", "lemma in_generate': \"x \\<in> set (generate' m n c b) \\<Longrightarrow> x \\<in> set (gen2 m n c b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (generate' m n c b) \\<Longrightarrow>\n    x \\<in> set (Algorithm.gen2 m n c b)", "unfolding generate'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (tl (Algorithm.gen2 m n c b)) \\<Longrightarrow>\n    x \\<in> set (Algorithm.gen2 m n c b)", "by (rule list.set_sel) simp"], ["", "definition \"cond_cons P = (\\<lambda>(ys, s). case ys of [] \\<Rightarrow> True | ys \\<Rightarrow> P ys s)\""], ["", "lemma cond_cons_simp [simp]:\n  \"cond_cons P ([], s) = True\"\n  \"cond_cons P (x # xs, s) = P (x # xs) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_cons P ([], s) = True &&& cond_cons P (x # xs, s) = P (x # xs) s", "by (auto simp: cond_cons_def)"], ["", "fun suffs\n  where\n    \"suffs P as (xs, s) \\<longleftrightarrow>\n      length xs = length as \\<and>\n      s = as \\<bullet> xs \\<and>\n      (\\<forall>i\\<le>length xs. cond_cons P (drop i xs, drop i as \\<bullet> drop i xs))\""], ["", "declare suffs.simps [simp del]"], ["", "lemma suffs_Nil [simp]: \"suffs P [] ([], s) \\<longleftrightarrow> s = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffs P [] ([], s) = (s = 0)", "by (auto simp: suffs.simps)"], ["", "lemma suffs_Cons:\n  \"suffs P (a # as) (x # xs, s) \\<longleftrightarrow>\n    s = a * x + as \\<bullet> xs \\<and> cond_cons P (x # xs, s) \\<and> suffs P as (xs, as \\<bullet> xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffs P (a # as) (x # xs, s) =\n    (s = a * x + as \\<bullet> xs \\<and>\n     cond_cons P (x # xs, s) \\<and> suffs P as (xs, as \\<bullet> xs))", "apply (auto simp: suffs.simps cond_cons_def split: list.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>length xs = length as;\n     \\<forall>i x21 x22.\n        drop i (x # xs) = x21 # x22 \\<longrightarrow>\n        i \\<le> Suc (length as) \\<longrightarrow>\n        P (x21 # x22) (drop i (a # as) \\<bullet> (x21 # x22));\n     s = a * x + as \\<bullet> xs\\<rbrakk>\n    \\<Longrightarrow> P (x # xs) (a * x + as \\<bullet> xs)\n 2. \\<And>i x21 x22.\n       \\<lbrakk>length xs = length as;\n        \\<forall>i x21 x22.\n           drop i (x # xs) = x21 # x22 \\<longrightarrow>\n           i \\<le> Suc (length as) \\<longrightarrow>\n           P (x21 # x22) (drop i (a # as) \\<bullet> (x21 # x22));\n        s = a * x + as \\<bullet> xs; drop i xs = x21 # x22;\n        i \\<le> length as\\<rbrakk>\n       \\<Longrightarrow> P (x21 # x22) (drop i as \\<bullet> (x21 # x22))\n 3. \\<And>i x21 x22.\n       \\<lbrakk>s = a * x + as \\<bullet> xs;\n        P (x # xs) (a * x + as \\<bullet> xs); length xs = length as;\n        \\<forall>i x21 x22.\n           drop i xs = x21 # x22 \\<longrightarrow>\n           i \\<le> length as \\<longrightarrow>\n           P (x21 # x22) (drop i as \\<bullet> (x21 # x22));\n        drop i (x # xs) = x21 # x22; i \\<le> Suc (length as)\\<rbrakk>\n       \\<Longrightarrow> P (x21 # x22)\n                          (drop i (a # as) \\<bullet> (x21 # x22))", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>length xs = length as;\n        \\<forall>i x21 x22.\n           drop i (x # xs) = x21 # x22 \\<longrightarrow>\n           i \\<le> Suc (length as) \\<longrightarrow>\n           P (x21 # x22) (drop i (a # as) \\<bullet> (x21 # x22));\n        s = a * x + as \\<bullet> xs; drop i xs = x21 # x22;\n        i \\<le> length as\\<rbrakk>\n       \\<Longrightarrow> P (x21 # x22) (drop i as \\<bullet> (x21 # x22))\n 2. \\<And>i x21 x22.\n       \\<lbrakk>s = a * x + as \\<bullet> xs;\n        P (x # xs) (a * x + as \\<bullet> xs); length xs = length as;\n        \\<forall>i x21 x22.\n           drop i xs = x21 # x22 \\<longrightarrow>\n           i \\<le> length as \\<longrightarrow>\n           P (x21 # x22) (drop i as \\<bullet> (x21 # x22));\n        drop i (x # xs) = x21 # x22; i \\<le> Suc (length as)\\<rbrakk>\n       \\<Longrightarrow> P (x21 # x22)\n                          (drop i (a # as) \\<bullet> (x21 # x22))", "apply (metis Suc_le_mono drop_Suc_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>s = a * x + as \\<bullet> xs;\n        P (x # xs) (a * x + as \\<bullet> xs); length xs = length as;\n        \\<forall>i x21 x22.\n           drop i xs = x21 # x22 \\<longrightarrow>\n           i \\<le> length as \\<longrightarrow>\n           P (x21 # x22) (drop i as \\<bullet> (x21 # x22));\n        drop i (x # xs) = x21 # x22; i \\<le> Suc (length as)\\<rbrakk>\n       \\<Longrightarrow> P (x21 # x22)\n                          (drop i (a # as) \\<bullet> (x21 # x22))", "by (metis One_nat_def Suc_le_mono Suc_pred dotprod_Cons drop_Cons' le_0_eq not_le_imp_less)"], ["", "subsection \\<open>The Algorithm\\<close>"], ["", "fun maxne0_impl\n  where\n    \"maxne0_impl [] a = 0\"\n  | \"maxne0_impl x [] = 0\"\n  | \"maxne0_impl (x#xs) (a#as) = (if x > 0 then max a (maxne0_impl xs as) else maxne0_impl xs as)\""], ["", "lemma maxne0_impl:\n  assumes \"length x = length a\"\n  shows \"maxne0_impl x a = maxne0 x a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0_impl x a = maxne0 x a", "using assms"], ["proof (prove)\nusing this:\n  length x = length a\n\ngoal (1 subgoal):\n 1. maxne0_impl x a = maxne0 x a", "by (induct x a rule: list_induct2) (auto)"], ["", "lemma maxne0_impl_le:\n  \"maxne0_impl x a \\<le> Max (set (a::nat list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxne0_impl x a \\<le> Max (set a)", "apply (induct x a rule: maxne0_impl.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a. maxne0_impl [] a \\<le> Max (set a)\n 2. \\<And>v va. maxne0_impl (v # va) [] \\<le> Max (set [])\n 3. \\<And>x xs a as.\n       \\<lbrakk>(0::'a) < x \\<Longrightarrow>\n                maxne0_impl xs as \\<le> Max (set as);\n        \\<not> (0::'a) < x \\<Longrightarrow>\n        maxne0_impl xs as \\<le> Max (set as)\\<rbrakk>\n       \\<Longrightarrow> maxne0_impl (x # xs) (a # as)\n                         \\<le> Max (set (a # as))", "apply (auto simp add: max.coboundedI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs a as.\n       \\<lbrakk>(0::'a) < x \\<Longrightarrow>\n                maxne0_impl xs as \\<le> Max (set as);\n        \\<not> (0::'a) < x \\<Longrightarrow>\n        maxne0_impl xs as \\<le> Max (set as)\\<rbrakk>\n       \\<Longrightarrow> maxne0_impl xs as \\<le> Max (insert a (set as))", "by (metis List.finite_set Max_insert Nat.le0 le_max_iff_disj maxne0_impl.elims maxne0_impl.simps(2) set_empty)"], ["", "context\n  fixes a b :: \"nat list\"\nbegin"], ["", "definition special_solutions :: \"(nat list \\<times> nat list) list\"\n  where\n    \"special_solutions = [sij a b i j . i \\<leftarrow> [0 ..< length a], j \\<leftarrow> [0 ..< length b]]\""], ["", "definition big_e :: \"nat list \\<Rightarrow> nat \\<Rightarrow> nat list\"\n  where\n    \"big_e x j = map (\\<lambda>i. eij a b i j - 1) (filter (\\<lambda>i. x ! i \\<ge> dij a b i j) [0 ..< length x])\""], ["", "definition big_d :: \"nat list \\<Rightarrow> nat \\<Rightarrow> nat list\"\n  where\n    \"big_d y i = map (\\<lambda>j. dij a b i j - 1) (filter (\\<lambda>j. y ! j \\<ge> eij a b i j) [0 ..< length y])\""], ["", "definition big_d' :: \"nat list \\<Rightarrow> nat \\<Rightarrow> nat list\"\n  where\n    \"big_d' y i =\n      (let l = length y; n = length b in\n      if l > n then [] else\n      (let k = n - l in\n      map (\\<lambda>j. dij a b i (j + k) - 1) (filter (\\<lambda>j. y ! j \\<ge> eij a b i (j + k)) [0 ..< length y])))\""], ["", "definition max_y_impl :: \"nat list \\<Rightarrow> nat \\<Rightarrow> nat\"\n  where\n    \"max_y_impl x j =\n      (if j < length b \\<and> big_e x j \\<noteq> [] then Min (set (big_e x j))\n      else Max (set a))\""], ["", "definition max_x_impl :: \"nat list \\<Rightarrow> nat \\<Rightarrow> nat\"\n  where\n    \"max_x_impl y i =\n      (if i < length a \\<and> big_d y i \\<noteq> [] then Min (set (big_d y i))\n      else Max (set b))\""], ["", "definition max_x_impl' :: \"nat list \\<Rightarrow> nat \\<Rightarrow> nat\"\n  where\n    \"max_x_impl' y i =\n      (if i < length a \\<and> big_d' y i \\<noteq> [] then Min (set (big_d' y i))\n      else Max (set b))\""], ["", "definition cond_a :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\"\n  where\n    \"cond_a xs ys \\<longleftrightarrow> (\\<forall>x\\<in>set xs. x \\<le> maxne0 ys b)\""], ["", "definition cond_b :: \"nat list \\<Rightarrow> bool\"\n  where\n    \"cond_b xs \\<longleftrightarrow> (\\<forall>k\\<le>length a.\n      take k a \\<bullet> take k xs \\<le> b \\<bullet> (map (max_y_impl (take k xs)) [0 ..< length b]))\""], ["", "definition boundr_impl :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\"\n  where\n    \"boundr_impl x y \\<longleftrightarrow> (\\<forall>j<length b. y ! j \\<le> max_y_impl x j)\""], ["", "definition cond_d :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\"\n  where\n    \"cond_d xs ys \\<longleftrightarrow> (\\<forall>l\\<le>length b. take l b \\<bullet> take l ys \\<le> a \\<bullet> xs)\""], ["", "definition subdprodr_impl :: \"nat list \\<Rightarrow> bool\"\n  where\n    \"subdprodr_impl ys \\<longleftrightarrow> (\\<forall>l\\<le>length b.\n      take l b \\<bullet> take l ys \\<le> a \\<bullet> map (max_x_impl (take l ys)) [0 ..< length a])\""], ["", "definition subdprodl_impl :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\"\n  where\n    \"subdprodl_impl x y \\<longleftrightarrow> (\\<forall>k\\<le>length a. take k a \\<bullet> take k x \\<le> b \\<bullet> y)\""], ["", "definition \"boundl_impl x y \\<longleftrightarrow> (\\<forall>i<length a. x ! i \\<le> max_x_impl y i)\""], ["", "definition static_bounds\n  where\n    \"static_bounds x y \\<longleftrightarrow>\n      (let mx = maxne0_impl y b; my = maxne0_impl x a in\n      (\\<forall>x\\<in>set x. x \\<le> mx) \\<and> (\\<forall>y\\<in>set y. y \\<le> my))\""], ["", "definition \"check_cond =\n  (\\<lambda>(x, y). static_bounds x y \\<and> a \\<bullet> x = b \\<bullet> y \\<and> boundr_impl x y \\<and> subdprodl_impl x y \\<and> subdprodr_impl y)\""], ["", "definition \"check' = filter check_cond\""], ["", "definition \"non_special_solutions =\n  (let A = Max (set b); B = Max (set a)\n  in minimize (check' (generate' A B a b)))\""], ["", "definition \"solve = special_solutions @ non_special_solutions\""], ["", "end"], ["", "lemma sorted_wrt_check_generate':\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2) (check' a b (generate' A B a b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2)\n     (check' a b (generate' A B a b))", "by (auto simp: check'_def intro!: sorted_wrt_filter sorted_wrt_generate' sorted_wrt_tl)"], ["", "lemma big_e:\n  \"set (big_e a b xs j) = hlde_ops.Ej a b j xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (big_e a b xs j) = hlde_ops.Ej a b j xs", "by (auto simp: hlde_ops.Ej_def big_e_def)"], ["", "lemma big_d:\n  \"set (big_d a b ys i) = hlde_ops.Di a b i ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (big_d a b ys i) = hlde_ops.Di a b i ys", "by (auto simp: hlde_ops.Di_def big_d_def)"], ["", "lemma big_d':\n  \"length ys \\<le> length b \\<Longrightarrow> set (big_d' a b ys i) = hlde_ops.Di' a b i ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys \\<le> length b \\<Longrightarrow>\n    set (big_d' a b ys i) = hlde_ops.Di' a b i ys", "by (auto simp: hlde_ops.Di'_def big_d'_def Let_def)"], ["", "lemma max_y_impl:\n  \"max_y_impl a b x j = hlde_ops.max_y a b x j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_y_impl a b x j = hlde_ops.max_y a b x j", "by (simp add: max_y_impl_def big_e hlde_ops.max_y_def set_empty [symmetric])"], ["", "lemma max_x_impl:\n  \"max_x_impl a b y i = hlde_ops.max_x a b y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_x_impl a b y i = hlde_ops.max_x a b y i", "by (simp add: max_x_impl_def big_d hlde_ops.max_x_def set_empty [symmetric])"], ["", "lemma max_x_impl':\n  assumes \"length y \\<le> length b\"\n  shows \"max_x_impl' a b y i = hlde_ops.max_x' a b y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_x_impl' a b y i = hlde_ops.max_x' a b y i", "by (simp add: max_x_impl'_def big_d' [OF assms] hlde_ops.max_x'_def set_empty [symmetric])"], ["", "lemma (in hlde) cond_a [simp]: \"cond_a b x y = cond_A x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_a b x y = cond_A x y", "by (simp add: cond_a_def cond_A_def)"], ["", "lemma (in hlde) cond_b [simp]: \"cond_b a b x = cond_B x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_b a b x = cond_B x", "using max_y_impl"], ["proof (prove)\nusing this:\n  max_y_impl ?a ?b ?x ?j = hlde_ops.max_y ?a ?b ?x ?j\n\ngoal (1 subgoal):\n 1. cond_b a b x = cond_B x", "by (auto simp: cond_b_def cond_B_def) presburger+"], ["", "lemma (in hlde) boundr_impl [simp]: \"boundr_impl a b x y = boundr x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundr_impl a b x y = boundr x y", "by (simp add: boundr_impl_def boundr_def max_y_impl)"], ["", "lemma (in hlde) cond_d [simp]: \"cond_d a b x y = cond_D x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_d a b x y = cond_D x y", "by (simp add: cond_d_def cond_D_def)"], ["", "lemma (in hlde) subdprodr_impl [simp]: \"subdprodr_impl a b y = subdprodr y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdprodr_impl a b y = subdprodr y", "using max_x_impl"], ["proof (prove)\nusing this:\n  max_x_impl ?a ?b ?y ?i = hlde_ops.max_x ?a ?b ?y ?i\n\ngoal (1 subgoal):\n 1. subdprodr_impl a b y = subdprodr y", "by (auto simp: subdprodr_impl_def subdprodr_def) presburger+"], ["", "lemma (in hlde) subdprodl_impl [simp]: \"subdprodl_impl a b x y = subdprodl x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdprodl_impl a b x y = subdprodl x y", "by (simp add: subdprodl_impl_def subdprodl_def)"], ["", "lemma (in hlde) cond_bound_impl [simp]: \"boundl_impl a b x y = boundl x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundl_impl a b x y = boundl x y", "by (simp add: boundl_impl_def boundl_def max_x_impl)"], ["", "lemma (in hlde) check [simp]:\n  \"check' a b =\n    filter (\\<lambda>(x, y). static_bounds a b x y \\<and> a \\<bullet> x = b \\<bullet> y \\<and> boundr x y \\<and>\n    subdprodl x y \\<and>\n    subdprodr y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check' a b =\n    filter\n     (\\<lambda>(x, y).\n         static_bounds a b x y \\<and>\n         a \\<bullet> x = b \\<bullet> y \\<and>\n         boundr x y \\<and> subdprodl x y \\<and> subdprodr y)", "by (simp add: check'_def check_cond_def)"], ["", "text \\<open>\n  conditions B, C, and D from Huet as well as \"subdprodr\" and \"subdprodl\" are\n  preserved by smaller solutions\n\\<close>"], ["", "lemma (in hlde) le_imp_conds:\n  assumes le: \"u \\<le>\\<^sub>v x\" \"v \\<le>\\<^sub>v y\"\n    and len: \"length x = m\" \"length y = n\"\n  shows \"cond_B x \\<Longrightarrow> cond_B u\"\n    and \"boundr x y \\<Longrightarrow> boundr u v\"\n    and \"a \\<bullet> u = b \\<bullet> v \\<Longrightarrow> cond_D x y \\<Longrightarrow> cond_D u v\"\n    and \"a \\<bullet> u = b \\<bullet> v \\<Longrightarrow> subdprodl x y \\<Longrightarrow> subdprodl u v\"\n    and \"subdprodr y \\<Longrightarrow> subdprodr v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((cond_B x \\<Longrightarrow> cond_B u) &&&\n     (boundr x y \\<Longrightarrow> boundr u v)) &&&\n    (\\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n     \\<Longrightarrow> cond_D u v) &&&\n    (\\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n     \\<Longrightarrow> subdprodl u v) &&&\n    (subdprodr y \\<Longrightarrow> subdprodr v)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. cond_B x \\<Longrightarrow> cond_B u\n 2. boundr x y \\<Longrightarrow> boundr u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 4. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 5. subdprodr y \\<Longrightarrow> subdprodr v", "assume B: \"cond_B x\""], ["proof (state)\nthis:\n  cond_B x\n\ngoal (5 subgoals):\n 1. cond_B x \\<Longrightarrow> cond_B u\n 2. boundr x y \\<Longrightarrow> boundr u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 4. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 5. subdprodr y \\<Longrightarrow> subdprodr v", "have \"length u = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length u = m", "using len and le"], ["proof (prove)\nusing this:\n  length x = m\n  length y = n\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. length u = m", "by (auto)"], ["proof (state)\nthis:\n  length u = m\n\ngoal (5 subgoals):\n 1. cond_B x \\<Longrightarrow> cond_B u\n 2. boundr x y \\<Longrightarrow> boundr u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 4. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 5. subdprodr y \\<Longrightarrow> subdprodr v", "show \"cond_B u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_B u", "proof (unfold cond_B_def, intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "assume k: \"k \\<le> m\""], ["proof (state)\nthis:\n  k \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "moreover"], ["proof (state)\nthis:\n  k \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "have *: \"take k u \\<le>\\<^sub>v take k x\" if \"k \\<le> m\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. take k u \\<le>\\<^sub>v take k x", "using le and that"], ["proof (prove)\nusing this:\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  k \\<le> m\n\ngoal (1 subgoal):\n 1. take k u \\<le>\\<^sub>v take k x", "by (intro le_take) (auto simp: len)"], ["proof (state)\nthis:\n  ?k \\<le> m \\<Longrightarrow> take ?k u \\<le>\\<^sub>v take ?k x\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "ultimately"], ["proof (chain)\npicking this:\n  k \\<le> m\n  ?k \\<le> m \\<Longrightarrow> take ?k u \\<le>\\<^sub>v take ?k x", "have \"take k a \\<bullet> take k u \\<le> take k a \\<bullet> take k x\""], ["proof (prove)\nusing this:\n  k \\<le> m\n  ?k \\<le> m \\<Longrightarrow> take ?k u \\<le>\\<^sub>v take ?k x\n\ngoal (1 subgoal):\n 1. take k a \\<bullet> take k u \\<le> take k a \\<bullet> take k x", "by (intro dotprod_le_right) (auto simp: len)"], ["proof (state)\nthis:\n  take k a \\<bullet> take k u \\<le> take k a \\<bullet> take k x\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "also"], ["proof (state)\nthis:\n  take k a \\<bullet> take k u \\<le> take k a \\<bullet> take k x\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "have \"\\<dots> \\<le> b \\<bullet> map (max_y (take k x)) [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take k a \\<bullet> take k x\n    \\<le> b \\<bullet> map (max_y (take k x)) [0..<n]", "using k and B"], ["proof (prove)\nusing this:\n  k \\<le> m\n  cond_B x\n\ngoal (1 subgoal):\n 1. take k a \\<bullet> take k x\n    \\<le> b \\<bullet> map (max_y (take k x)) [0..<n]", "by (auto simp: cond_B_def)"], ["proof (state)\nthis:\n  take k a \\<bullet> take k x\n  \\<le> b \\<bullet> map (max_y (take k x)) [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "also"], ["proof (state)\nthis:\n  take k a \\<bullet> take k x\n  \\<le> b \\<bullet> map (max_y (take k x)) [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "have \"\\<dots> \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> map (max_y (take k x)) [0..<n]\n    \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "using le_imp_max_y_ge [OF * [OF k]]"], ["proof (prove)\nusing this:\n  length (take k x) \\<le> m \\<Longrightarrow>\n  max_y (take k x) ?j \\<le> max_y (take k u) ?j\n\ngoal (1 subgoal):\n 1. b \\<bullet> map (max_y (take k x)) [0..<n]\n    \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "using k"], ["proof (prove)\nusing this:\n  length (take k x) \\<le> m \\<Longrightarrow>\n  max_y (take k x) ?j \\<le> max_y (take k u) ?j\n  k \\<le> m\n\ngoal (1 subgoal):\n 1. b \\<bullet> map (max_y (take k x)) [0..<n]\n    \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "by (auto simp: len intro!: dotprod_le_right less_eqI)"], ["proof (state)\nthis:\n  b \\<bullet> map (max_y (take k x)) [0..<n]\n  \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<le> m \\<Longrightarrow>\n       take k a \\<bullet> take k u\n       \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "finally"], ["proof (chain)\npicking this:\n  take k a \\<bullet> take k u\n  \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "show \"take k a \\<bullet> take k u \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]\""], ["proof (prove)\nusing this:\n  take k a \\<bullet> take k u\n  \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]\n\ngoal (1 subgoal):\n 1. take k a \\<bullet> take k u\n    \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]", "."], ["proof (state)\nthis:\n  take k a \\<bullet> take k u\n  \\<le> b \\<bullet> map (max_y (take k u)) [0..<n]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cond_B u\n\ngoal (4 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 4. subdprodr y \\<Longrightarrow> subdprodr v", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 4. subdprodr y \\<Longrightarrow> subdprodr v", "assume subdprodr: \"subdprodr y\""], ["proof (state)\nthis:\n  subdprodr y\n\ngoal (4 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 4. subdprodr y \\<Longrightarrow> subdprodr v", "have \"length v = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length v = n", "using len and le"], ["proof (prove)\nusing this:\n  length x = m\n  length y = n\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. length v = n", "by (auto)"], ["proof (state)\nthis:\n  length v = n\n\ngoal (4 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v\n 4. subdprodr y \\<Longrightarrow> subdprodr v", "show \"subdprodr v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdprodr v", "proof (unfold subdprodr_def, intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "assume l: \"l \\<le> n\""], ["proof (state)\nthis:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "moreover"], ["proof (state)\nthis:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "have *: \"take l v \\<le>\\<^sub>v take l y\" if \"l \\<le> n\" for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. take l v \\<le>\\<^sub>v take l y", "using le and that"], ["proof (prove)\nusing this:\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. take l v \\<le>\\<^sub>v take l y", "by (intro le_take) (auto simp: len)"], ["proof (state)\nthis:\n  ?l \\<le> n \\<Longrightarrow> take ?l v \\<le>\\<^sub>v take ?l y\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "ultimately"], ["proof (chain)\npicking this:\n  l \\<le> n\n  ?l \\<le> n \\<Longrightarrow> take ?l v \\<le>\\<^sub>v take ?l y", "have \"take l b \\<bullet> take l v \\<le> take l b \\<bullet> take l y\""], ["proof (prove)\nusing this:\n  l \\<le> n\n  ?l \\<le> n \\<Longrightarrow> take ?l v \\<le>\\<^sub>v take ?l y\n\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l v \\<le> take l b \\<bullet> take l y", "by (intro dotprod_le_right) (auto simp: len)"], ["proof (state)\nthis:\n  take l b \\<bullet> take l v \\<le> take l b \\<bullet> take l y\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "also"], ["proof (state)\nthis:\n  take l b \\<bullet> take l v \\<le> take l b \\<bullet> take l y\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "have \"\\<dots> \\<le> a \\<bullet> map (max_x (take l y)) [0..<m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l y\n    \\<le> a \\<bullet> map (max_x (take l y)) [0..<m]", "using l and subdprodr"], ["proof (prove)\nusing this:\n  l \\<le> n\n  subdprodr y\n\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l y\n    \\<le> a \\<bullet> map (max_x (take l y)) [0..<m]", "by (auto simp: subdprodr_def)"], ["proof (state)\nthis:\n  take l b \\<bullet> take l y\n  \\<le> a \\<bullet> map (max_x (take l y)) [0..<m]\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "also"], ["proof (state)\nthis:\n  take l b \\<bullet> take l y\n  \\<le> a \\<bullet> map (max_x (take l y)) [0..<m]\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "have \"\\<dots> \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x (take l y)) [0..<m]\n    \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "using le_imp_max_x_ge [OF * [OF l]]"], ["proof (prove)\nusing this:\n  length (take l y) \\<le> n \\<Longrightarrow>\n  max_x (take l y) ?i \\<le> max_x (take l v) ?i\n\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x (take l y)) [0..<m]\n    \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "using l"], ["proof (prove)\nusing this:\n  length (take l y) \\<le> n \\<Longrightarrow>\n  max_x (take l y) ?i \\<le> max_x (take l v) ?i\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x (take l y)) [0..<m]\n    \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "by (auto simp: len intro!: dotprod_le_right less_eqI)"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x (take l y)) [0..<m]\n  \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<le> n \\<Longrightarrow>\n       take l b \\<bullet> take l v\n       \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "finally"], ["proof (chain)\npicking this:\n  take l b \\<bullet> take l v\n  \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "show \"take l b \\<bullet> take l v \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]\""], ["proof (prove)\nusing this:\n  take l b \\<bullet> take l v\n  \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]\n\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l v\n    \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]", "."], ["proof (state)\nthis:\n  take l b \\<bullet> take l v\n  \\<le> a \\<bullet> map (max_x (take l v)) [0..<m]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subdprodr v\n\ngoal (3 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "assume C: \"boundr x y\""], ["proof (state)\nthis:\n  boundr x y\n\ngoal (3 subgoals):\n 1. boundr x y \\<Longrightarrow> boundr u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 3. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "show \"boundr u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundr u v", "using le_imp_max_y_ge [OF \\<open>u \\<le>\\<^sub>v x\\<close>] and C and le"], ["proof (prove)\nusing this:\n  length x \\<le> m \\<Longrightarrow> max_y x ?j \\<le> max_y u ?j\n  boundr x y\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. boundr u v", "by (auto simp: boundr_def len less_eq_def) (meson order_trans)"], ["proof (state)\nthis:\n  boundr u v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "assume \"a \\<bullet> u = b \\<bullet> v\" and \"cond_D x y\""], ["proof (state)\nthis:\n  a \\<bullet> u = b \\<bullet> v\n  cond_D x y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; cond_D x y\\<rbrakk>\n    \\<Longrightarrow> cond_D u v\n 2. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "then"], ["proof (chain)\npicking this:\n  a \\<bullet> u = b \\<bullet> v\n  cond_D x y", "show \"cond_D u v\""], ["proof (prove)\nusing this:\n  a \\<bullet> u = b \\<bullet> v\n  cond_D x y\n\ngoal (1 subgoal):\n 1. cond_D u v", "using le"], ["proof (prove)\nusing this:\n  a \\<bullet> u = b \\<bullet> v\n  cond_D x y\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. cond_D u v", "by (auto simp: cond_D_def len le_length intro: dotprod_le_take)"], ["proof (state)\nthis:\n  cond_D u v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "assume \"a \\<bullet> u = b \\<bullet> v\" and \"subdprodl x y\""], ["proof (state)\nthis:\n  a \\<bullet> u = b \\<bullet> v\n  subdprodl x y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<bullet> u = b \\<bullet> v; subdprodl x y\\<rbrakk>\n    \\<Longrightarrow> subdprodl u v", "then"], ["proof (chain)\npicking this:\n  a \\<bullet> u = b \\<bullet> v\n  subdprodl x y", "show \"subdprodl u v\""], ["proof (prove)\nusing this:\n  a \\<bullet> u = b \\<bullet> v\n  subdprodl x y\n\ngoal (1 subgoal):\n 1. subdprodl u v", "using le"], ["proof (prove)\nusing this:\n  a \\<bullet> u = b \\<bullet> v\n  subdprodl x y\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. subdprodl u v", "by (metis subdprodl_def dotprod_le_take le_length len(1))"], ["proof (state)\nthis:\n  subdprodl u v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in hlde) special_solutions [simp]:\n  shows \"set (special_solutions a b) = Special_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (special_solutions a b) = Special_Solutions", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (special_solutions a b) = Special_Solutions", "have \"set (special_solutions a b) \\<subseteq> Special_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (special_solutions a b) \\<subseteq> Special_Solutions", "by (auto simp: Special_Solutions_def special_solutions_def) (blast)"], ["proof (state)\nthis:\n  set (special_solutions a b) \\<subseteq> Special_Solutions\n\ngoal (1 subgoal):\n 1. set (special_solutions a b) = Special_Solutions", "moreover"], ["proof (state)\nthis:\n  set (special_solutions a b) \\<subseteq> Special_Solutions\n\ngoal (1 subgoal):\n 1. set (special_solutions a b) = Special_Solutions", "have \"Special_Solutions \\<subseteq> set (special_solutions a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Special_Solutions \\<subseteq> set (special_solutions a b)", "by (auto simp: Special_Solutions_def special_solutions_def)"], ["proof (state)\nthis:\n  Special_Solutions \\<subseteq> set (special_solutions a b)\n\ngoal (1 subgoal):\n 1. set (special_solutions a b) = Special_Solutions", "ultimately"], ["proof (chain)\npicking this:\n  set (special_solutions a b) \\<subseteq> Special_Solutions\n  Special_Solutions \\<subseteq> set (special_solutions a b)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (special_solutions a b) \\<subseteq> Special_Solutions\n  Special_Solutions \\<subseteq> set (special_solutions a b)\n\ngoal (1 subgoal):\n 1. set (special_solutions a b) = Special_Solutions", ".."], ["proof (state)\nthis:\n  set (special_solutions a b) = Special_Solutions\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_gen2:\n  \"set (gen2 A B a b) = {(x, y). x \\<le>\\<^sub>v replicate (length a) A \\<and> y \\<le>\\<^sub>v replicate (length b) B}\"\n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Algorithm.gen2 A B a b) =\n    {(x, y).\n     x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n     \\<le>\\<^sub>v replicate (length b) B}", "proof (intro equalityI subrelI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}\n 2. \\<And>x y.\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B} \\<Longrightarrow>\n       (x, y) \\<in> set (Algorithm.gen2 A B a b)", "fix xs ys"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}\n 2. \\<And>x y.\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B} \\<Longrightarrow>\n       (x, y) \\<in> set (Algorithm.gen2 A B a b)", "assume \"(xs, ys) \\<in> ?R\""], ["proof (state)\nthis:\n  (xs, ys)\n  \\<in> {(x, y).\n         x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n         \\<le>\\<^sub>v replicate (length b) B}\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}\n 2. \\<And>x y.\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B} \\<Longrightarrow>\n       (x, y) \\<in> set (Algorithm.gen2 A B a b)", "then"], ["proof (chain)\npicking this:\n  (xs, ys)\n  \\<in> {(x, y).\n         x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n         \\<le>\\<^sub>v replicate (length b) B}", "have \"\\<forall>x\\<in>set xs. x \\<le> A\" and \"\\<forall>y\\<in>set ys. y \\<le> B\"\n    and \"length xs = length a\" and \"length ys = length b\""], ["proof (prove)\nusing this:\n  (xs, ys)\n  \\<in> {(x, y).\n         x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n         \\<le>\\<^sub>v replicate (length b) B}\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set xs. x \\<le> A &&&\n     \\<forall>y\\<in>set ys. y \\<le> B) &&&\n    length xs = length a &&& length ys = length b", "by (auto simp: less_eq_def in_set_conv_nth)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set xs. x \\<le> A\n  \\<forall>y\\<in>set ys. y \\<le> B\n  length xs = length a\n  length ys = length b\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}\n 2. \\<And>x y.\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B} \\<Longrightarrow>\n       (x, y) \\<in> set (Algorithm.gen2 A B a b)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set xs. x \\<le> A\n  \\<forall>y\\<in>set ys. y \\<le> B\n  length xs = length a\n  length ys = length b", "have \"((xs, a \\<bullet> xs), (ys, b \\<bullet> ys)) \\<in> set (alls2 A B a b)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. x \\<le> A\n  \\<forall>y\\<in>set ys. y \\<le> B\n  length xs = length a\n  length ys = length b\n\ngoal (1 subgoal):\n 1. ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) \\<in> set (alls2 A B a b)", "by (auto simp: set_alls2)"], ["proof (state)\nthis:\n  ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) \\<in> set (alls2 A B a b)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}\n 2. \\<And>x y.\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B} \\<Longrightarrow>\n       (x, y) \\<in> set (Algorithm.gen2 A B a b)", "then"], ["proof (chain)\npicking this:\n  ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) \\<in> set (alls2 A B a b)", "have \"(\\<lambda>(x, y). (fst x, fst y)) ((xs, a \\<bullet> xs), (ys, b \\<bullet> ys)) \\<in> (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b)\""], ["proof (prove)\nusing this:\n  ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) \\<in> set (alls2 A B a b)\n\ngoal (1 subgoal):\n 1. (case ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) of\n     (x, y) \\<Rightarrow> (fst x, fst y))\n    \\<in> (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b)", "by (intro imageI)"], ["proof (state)\nthis:\n  (case ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) of\n   (x, y) \\<Rightarrow> (fst x, fst y))\n  \\<in> (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}\n 2. \\<And>x y.\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B} \\<Longrightarrow>\n       (x, y) \\<in> set (Algorithm.gen2 A B a b)", "then"], ["proof (chain)\npicking this:\n  (case ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) of\n   (x, y) \\<Rightarrow> (fst x, fst y))\n  \\<in> (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b)", "show \"(xs, ys) \\<in> ?L\""], ["proof (prove)\nusing this:\n  (case ((xs, a \\<bullet> xs), ys, b \\<bullet> ys) of\n   (x, y) \\<Rightarrow> (fst x, fst y))\n  \\<in> (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b)\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> set (Algorithm.gen2 A B a b)", "by simp"], ["proof (state)\nthis:\n  (xs, ys) \\<in> set (Algorithm.gen2 A B a b)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (Algorithm.gen2 A B a b) \\<Longrightarrow>\n       (x, y)\n       \\<in> {(x, y).\n              x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n              \\<le>\\<^sub>v replicate (length b) B}", "qed (auto simp: less_eq_def set_alls2)"], ["", "lemma set_gen2':\n  \"(\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b) =\n    {(x, y). x \\<le>\\<^sub>v replicate (length a) A \\<and> y \\<le>\\<^sub>v replicate (length b) B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b) =\n    {(x, y).\n     x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n     \\<le>\\<^sub>v replicate (length b) B}", "using set_gen2"], ["proof (prove)\nusing this:\n  set (Algorithm.gen2 ?A ?B ?a ?b) =\n  {(x, y).\n   x \\<le>\\<^sub>v replicate (length ?a) ?A \\<and> y\n   \\<le>\\<^sub>v replicate (length ?b) ?B}\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). (fst x, fst y)) ` set (alls2 A B a b) =\n    {(x, y).\n     x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n     \\<le>\\<^sub>v replicate (length b) B}", "by simp"], ["", "lemma (in hlde) in_non_special_solutions:\n  assumes \"(x, y) \\<in> set (non_special_solutions a b)\"\n  shows \"(x, y) \\<in> Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Solutions", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (non_special_solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Solutions", "by (auto dest!: minimize_wrtD in_generate'\n    simp: non_special_solutions_def in_Solutions_iff minimize_def set_alls2)"], ["", "lemma generate_unique:\n  assumes \"i < j\"\n    and \"j < length (generate A B a b)\"\n  shows \"generate A B a b ! i \\<noteq> generate A B a b ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate A B a b ! i \\<noteq> generate A B a b ! j", "using sorted_wrt_nth_less [OF sorted_wrt_generate assms]"], ["proof (prove)\nusing this:\n  generate A B a b ! i <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n  generate A B a b ! j\n\ngoal (1 subgoal):\n 1. generate A B a b ! i \\<noteq> generate A B a b ! j", "by (auto simp: rlex2_irrefl)"], ["", "lemma gen2_unique:\n  assumes \"i < j\"\n    and \"j < length (gen2 A B a b)\"\n  shows \"gen2 A B a b ! i \\<noteq> gen2 A B a b ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm.gen2 A B a b ! i \\<noteq> Algorithm.gen2 A B a b ! j", "using sorted_wrt_nth_less [OF sorted_wrt_gen2 assms]"], ["proof (prove)\nusing this:\n  Algorithm.gen2 A B a b ! i <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n  Algorithm.gen2 A B a b ! j\n\ngoal (1 subgoal):\n 1. Algorithm.gen2 A B a b ! i \\<noteq> Algorithm.gen2 A B a b ! j", "by (auto simp: rlex2_irrefl)"], ["", "lemma zeroes_ni_generate':\n  \"(zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)", "have \"gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Algorithm.gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))", "by (auto)"], ["proof (state)\nthis:\n  Algorithm.gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))\n\ngoal (1 subgoal):\n 1. (zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)", "with gen2_unique [of 0 _ A B a b]"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 < ?j; ?j < length (Algorithm.gen2 A B a b)\\<rbrakk>\n  \\<Longrightarrow> Algorithm.gen2 A B a b ! 0 \\<noteq>\n                    Algorithm.gen2 A B a b ! ?j\n  Algorithm.gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < ?j; ?j < length (Algorithm.gen2 A B a b)\\<rbrakk>\n  \\<Longrightarrow> Algorithm.gen2 A B a b ! 0 \\<noteq>\n                    Algorithm.gen2 A B a b ! ?j\n  Algorithm.gen2 A B a b ! 0 = (zeroes (length a), zeroes (length b))\n\ngoal (1 subgoal):\n 1. (zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)", "by (auto simp: in_set_conv_nth nth_tl generate'_def)\n      (metis One_nat_def Suc_eq_plus1 less_diff_conv zero_less_Suc)"], ["proof (state)\nthis:\n  (zeroes (length a), zeroes (length b)) \\<notin> set (generate' A B a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_generate':\n  \"set (generate' A B a b) =\n    {(x, y). (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and> (x, y) \\<in> set (gen2 A B a b)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (generate' A B a b) =\n    {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (generate' A B a b)\n    \\<subseteq> {(x, y).\n                 (x, y) \\<noteq>\n                 (zeroes (length a), zeroes (length b)) \\<and>\n                 (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n 2. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "show \"set (generate' A B a b)\n        \\<subseteq> {(x, y).(x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and> (x, y) \\<in> set (gen2 A B a b)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (generate' A B a b)\n    \\<subseteq> {(x, y).\n                 (x, y) \\<noteq>\n                 (zeroes (length a), zeroes (length b)) \\<and>\n                 (x, y) \\<in> set (Algorithm.gen2 A B a b)}", "using in_generate' and mem_Collect_eq and zeroes_ni_generate'"], ["proof (prove)\nusing this:\n  ?x \\<in> set (generate' ?m ?n ?c ?b) \\<Longrightarrow>\n  ?x \\<in> set (Algorithm.gen2 ?m ?n ?c ?b)\n  (?a \\<in> Collect ?P) = ?P ?a\n  (zeroes (length ?a), zeroes (length ?b))\n  \\<notin> set (generate' ?A ?B ?a ?b)\n\ngoal (1 subgoal):\n 1. set (generate' A B a b)\n    \\<subseteq> {(x, y).\n                 (x, y) \\<noteq>\n                 (zeroes (length a), zeroes (length b)) \\<and>\n                 (x, y) \\<in> set (Algorithm.gen2 A B a b)}", "by (auto)"], ["proof (state)\nthis:\n  set (generate' A B a b)\n  \\<subseteq> {(x, y).\n               (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n               (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "have \"(zeroes (length a), zeroes (length b)) = hd (gen2 A B a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zeroes (length a), zeroes (length b)) = hd (Algorithm.gen2 A B a b)", "by (simp add: hd_conv_nth)"], ["proof (state)\nthis:\n  (zeroes (length a), zeroes (length b)) = hd (Algorithm.gen2 A B a b)\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "moreover"], ["proof (state)\nthis:\n  (zeroes (length a), zeroes (length b)) = hd (Algorithm.gen2 A B a b)\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "have \"set (gen2 A B a b) = set (tl (gen2 A B a b)) \\<union> {(zeroes (length a), zeroes (length b))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Algorithm.gen2 A B a b) =\n    set (tl (Algorithm.gen2 A B a b)) \\<union>\n    {(zeroes (length a), zeroes (length b))}", "by (metis Un_empty_right Un_insert_right gen2_ne calculation list.exhaust_sel list.simps(15))"], ["proof (state)\nthis:\n  set (Algorithm.gen2 A B a b) =\n  set (tl (Algorithm.gen2 A B a b)) \\<union>\n  {(zeroes (length a), zeroes (length b))}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "ultimately"], ["proof (chain)\npicking this:\n  (zeroes (length a), zeroes (length b)) = hd (Algorithm.gen2 A B a b)\n  set (Algorithm.gen2 A B a b) =\n  set (tl (Algorithm.gen2 A B a b)) \\<union>\n  {(zeroes (length a), zeroes (length b))}", "show \" {(x, y). (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and> (x, y) \\<in> set (gen2 A B a b)}\n        \\<subseteq> set (generate' A B a b)\""], ["proof (prove)\nusing this:\n  (zeroes (length a), zeroes (length b)) = hd (Algorithm.gen2 A B a b)\n  set (Algorithm.gen2 A B a b) =\n  set (tl (Algorithm.gen2 A B a b)) \\<union>\n  {(zeroes (length a), zeroes (length b))}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (generate' A B a b)", "unfolding generate'_def"], ["proof (prove)\nusing this:\n  (zeroes (length a), zeroes (length b)) = hd (Algorithm.gen2 A B a b)\n  set (Algorithm.gen2 A B a b) =\n  set (tl (Algorithm.gen2 A B a b)) \\<union>\n  {(zeroes (length a), zeroes (length b))}\n\ngoal (1 subgoal):\n 1. {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n    \\<subseteq> set (tl (Algorithm.gen2 A B a b))", "by blast"], ["proof (state)\nthis:\n  {(x, y).\n   (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n   (x, y) \\<in> set (Algorithm.gen2 A B a b)}\n  \\<subseteq> set (generate' A B a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_generate'':\n  \"set (generate' A B a b) =\n  {(x, y). (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and> x \\<le>\\<^sub>v replicate (length a) A \\<and> y \\<le>\\<^sub>v replicate (length b) B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (generate' A B a b) =\n    {(x, y).\n     (x, y) \\<noteq> (zeroes (length a), zeroes (length b)) \\<and>\n     x \\<le>\\<^sub>v replicate (length a) A \\<and> y\n     \\<le>\\<^sub>v replicate (length b) B}", "by (simp add: set_generate' set_gen2')"], ["", "lemma (in hlde) zeroes_ni_non_special_solutions:\n  shows \"(zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "define All_lex where\n    All_lex: \"All_lex = gen2 (Max (set b)) (Max (set a)) a b\""], ["proof (state)\nthis:\n  All_lex = Algorithm.gen2 (Max (set b)) (Max (set a)) a b\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "define z where z: \"z = (zeroes m, zeroes n)\""], ["proof (state)\nthis:\n  z = (zeroes m, zeroes n)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "have \"set (non_special_solutions a b) \\<subseteq> set (tl (All_lex))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (non_special_solutions a b) \\<subseteq> set (tl All_lex)", "by (auto simp: All_lex generate'_def non_special_solutions_def minimize_def dest: minimize_wrtD)"], ["proof (state)\nthis:\n  set (non_special_solutions a b) \\<subseteq> set (tl All_lex)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "moreover"], ["proof (state)\nthis:\n  set (non_special_solutions a b) \\<subseteq> set (tl All_lex)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "have \"z \\<notin> set (tl (All_lex))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<notin> set (tl All_lex)", "using zeroes_ni_generate' All_lex z"], ["proof (prove)\nusing this:\n  (zeroes (length ?a), zeroes (length ?b))\n  \\<notin> set (generate' ?A ?B ?a ?b)\n  All_lex = Algorithm.gen2 (Max (set b)) (Max (set a)) a b\n  z = (zeroes m, zeroes n)\n\ngoal (1 subgoal):\n 1. z \\<notin> set (tl All_lex)", "by (auto simp: generate'_def)"], ["proof (state)\nthis:\n  z \\<notin> set (tl All_lex)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "ultimately"], ["proof (chain)\npicking this:\n  set (non_special_solutions a b) \\<subseteq> set (tl All_lex)\n  z \\<notin> set (tl All_lex)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (non_special_solutions a b) \\<subseteq> set (tl All_lex)\n  z \\<notin> set (tl All_lex)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "using z"], ["proof (prove)\nusing this:\n  set (non_special_solutions a b) \\<subseteq> set (tl All_lex)\n  z \\<notin> set (tl All_lex)\n  z = (zeroes m, zeroes n)\n\ngoal (1 subgoal):\n 1. (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)", "by blast"], ["proof (state)\nthis:\n  (zeroes m, zeroes n) \\<notin> set (non_special_solutions a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Correctness: \\<open>solve\\<close> generates only minimal solutions.\\<close>"], ["", "lemma (in hlde) solve_subset_Minimal_Solutions:\n  shows \"set (solve a b) \\<subseteq> Minimal_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (solve a b) \\<subseteq> local.Minimal_Solutions", "proof (rule subrelI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solve a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "let ?a = \"Max (set a)\" and ?b = \"Max (set b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solve a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solve a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "assume ass: \"(x, y) \\<in> set (solve a b)\""], ["proof (state)\nthis:\n  (x, y) \\<in> set (solve a b)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solve a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> set (solve a b)", "consider \"(x, y) \\<in> set (special_solutions a b)\" | \"(x, y) \\<in> set (non_special_solutions a b)\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (solve a b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n             thesis;\n     (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding solve_def and set_append"], ["proof (prove)\nusing this:\n  (x, y)\n  \\<in> set (special_solutions a b) \\<union> set (non_special_solutions a b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n             thesis;\n     (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>(x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n           ?thesis;\n   (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> set (solve a b) \\<Longrightarrow>\n       (x, y) \\<in> local.Minimal_Solutions", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n           ?thesis;\n   (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"(x, y) \\<in> Minimal_Solutions\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n           ?thesis;\n   (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Minimal_Solutions", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions\n 2. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "case 1"], ["proof (state)\nthis:\n  (x, y) \\<in> set (special_solutions a b)\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions\n 2. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> set (special_solutions a b)", "have \"(x, y) \\<in> Special_Solutions\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (special_solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> Special_Solutions", "unfolding special_solutions"], ["proof (prove)\nusing this:\n  (x, y) \\<in> Special_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> Special_Solutions", "."], ["proof (state)\nthis:\n  (x, y) \\<in> Special_Solutions\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> set (special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions\n 2. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> Special_Solutions", "show ?thesis"], ["proof (prove)\nusing this:\n  (x, y) \\<in> Special_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Minimal_Solutions", "by (simp add: Special_Solutions_in_Minimal_Solutions)"], ["proof (state)\nthis:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "let ?xs = \"[(x, y) \\<leftarrow> generate' ?b ?a a b.\n      static_bounds a b x y \\<and> a \\<bullet> x = b \\<bullet> y \\<and> boundr x y \\<^cancel>\\<open>\\<and> cond_B x \\<and> cond_D x y\\<close> \\<and>\n      subdprodl x y \\<and>\n      subdprodr y]\""], ["proof (state)\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "case 2"], ["proof (state)\nthis:\n  (x, y) \\<in> set (non_special_solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> set (non_special_solutions a b)", "have conds: \"\\<forall>e\\<in>set x. e \\<le> Max (set b)\" \"boundr x y\" (*\"cond_B x\" \"cond_D x y\"*)\n      \"subdprodl x y\" \"subdprodr y\"\n      and xs: \"(x, y) \\<in> set (minimize ?xs)\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (non_special_solutions a b)\n\ngoal (1 subgoal):\n 1. ((\\<forall>e\\<in>set x. e \\<le> Max (set b) &&& boundr x y) &&&\n     subdprodl x y &&& subdprodr y) &&&\n    (x, y)\n    \\<in> set (minimize\n                (filter\n                  (\\<lambda>(x, y).\n                      static_bounds a b x y \\<and>\n                      a \\<bullet> x = b \\<bullet> y \\<and>\n                      boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                  (generate' (Max (set b)) (Max (set a)) a b)))", "by (auto simp: non_special_solutions_def minimize_def set_alls2\n        dest!: minimize_wrtD in_generate')\n        (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  \\<forall>e\\<in>set x. e \\<le> Max (set b)\n  boundr x y\n  subdprodl x y\n  subdprodr y\n  (x, y)\n  \\<in> set (minimize\n              (filter\n                (\\<lambda>(x, y).\n                    static_bounds a b x y \\<and>\n                    a \\<bullet> x = b \\<bullet> y \\<and>\n                    boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                (generate' (Max (set b)) (Max (set a)) a b)))\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "have sol: \"(x, y) \\<in> Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Solutions", "using ass"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (solve a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Solutions", "by (auto simp: solve_def Special_Solutions_in_Solutions in_non_special_solutions)"], ["proof (state)\nthis:\n  (x, y) \\<in> local.Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> local.Solutions", "have len: \"length x = m\" \"length y = n\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> local.Solutions\n\ngoal (1 subgoal):\n 1. length x = m &&& length y = n", "by (auto simp: Solutions_def)"], ["proof (state)\nthis:\n  length x = m\n  length y = n\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "have \"nonzero x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonzero x", "using sol Solutions_snd_not_0 [of y x]"], ["proof (prove)\nusing this:\n  (x, y) \\<in> local.Solutions\n  \\<lbrakk>(y, x) \\<in> local.Solutions; nonzero y\\<rbrakk>\n  \\<Longrightarrow> nonzero x\n\ngoal (1 subgoal):\n 1. nonzero x", "by (metis \"2\" eq_0_iff len nonzero_Solutions_iff nonzero_iff zeroes_ni_non_special_solutions)"], ["proof (state)\nthis:\n  nonzero x\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "moreover"], ["proof (state)\nthis:\n  nonzero x\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "have \"\\<not> (\\<exists>(u, v) \\<in> Minimal_Solutions. u @ v <\\<^sub>v x @ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n               <\\<^sub>v x @ y)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "let ?P = \"\\<lambda>(x, y) (u, v). \\<not> x @ y <\\<^sub>v u @ v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "let ?Q = \"(\\<lambda>(x, y). static_bounds a b x y \\<and> a \\<bullet> x = b \\<bullet> y \\<and> boundr x y \\<^cancel>\\<open>\\<and> cond_B x \\<and> cond_D x y\\<close> \\<and>\n        subdprodl x y \\<and>\n        subdprodr y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "note sorted = sorted_wrt_generate' [THEN sorted_wrt_filter, of ?Q ?b ?a a b]"], ["proof (state)\nthis:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2)\n   (filter\n     (\\<lambda>(x, y).\n         static_bounds a b x y \\<and>\n         a \\<bullet> x = b \\<bullet> y \\<and>\n         boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n     (generate' (Max (set b)) (Max (set a)) a b))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "note * = in_minimize_wrt_False [OF _ sorted, of \"(x, y)\" ?P, OF _ xs [unfolded minimize_def]]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case ?y of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   ?y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   ?y \\<in> set (filter\n                  (\\<lambda>(x, y).\n                      static_bounds a b x y \\<and>\n                      a \\<bullet> x = b \\<bullet> y \\<and>\n                      boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                  (generate' (Max (set b)) (Max (set a)) a b));\n   ?y \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "assume \"\\<exists>(u, v)\\<in>Minimal_Solutions. u @ v <\\<^sub>v x @ y\""], ["proof (state)\nthis:\n  \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v <\\<^sub>v x @ y", "obtain u and v where\n        uv: \"(u, v) \\<in> Minimal_Solutions\" and less: \"u @ v <\\<^sub>v x @ y\""], ["proof (prove)\nusing this:\n  \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>(u, v) \\<in> local.Minimal_Solutions;\n         u @ v <\\<^sub>v x @ y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "from uv and less"], ["proof (chain)\npicking this:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y", "have le: \"u \\<le>\\<^sub>v x\" \"v \\<le>\\<^sub>v y\" and sol': \"a \\<bullet> u = b \\<bullet> v\"\n        and nonzero: \"nonzero u\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (u \\<le>\\<^sub>v x &&& v \\<le>\\<^sub>v y) &&&\n    a \\<bullet> u = b \\<bullet> v &&& nonzero u", "using sol"], ["proof (prove)\nusing this:\n  (u, v) \\<in> local.Minimal_Solutions\n  u @ v <\\<^sub>v x @ y\n  (x, y) \\<in> local.Solutions\n\ngoal (1 subgoal):\n 1. (u \\<le>\\<^sub>v x &&& v \\<le>\\<^sub>v y) &&&\n    a \\<bullet> u = b \\<bullet> v &&& nonzero u", "by (auto simp: Minimal_Solutions_def Solutions_def elim!: less_append_cases)"], ["proof (state)\nthis:\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  a \\<bullet> u = b \\<bullet> v\n  nonzero u\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "(*with le_imp_conds [OF le conds(2-)]*)"], ["proof (state)\nthis:\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  a \\<bullet> u = b \\<bullet> v\n  nonzero u\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "with le_imp_conds(2,4,5) [OF le] and conds(2-)"], ["proof (chain)\npicking this:\n  \\<lbrakk>length x = m; length y = n; boundr x y\\<rbrakk>\n  \\<Longrightarrow> boundr u v\n  \\<lbrakk>length x = m; length y = n; a \\<bullet> u = b \\<bullet> v;\n   subdprodl x y\\<rbrakk>\n  \\<Longrightarrow> subdprodl u v\n  \\<lbrakk>length x = m; length y = n; subdprodr y\\<rbrakk>\n  \\<Longrightarrow> subdprodr v\n  boundr x y\n  subdprodl x y\n  subdprodr y\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  a \\<bullet> u = b \\<bullet> v\n  nonzero u", "have conds': \"\\<forall>e\\<in>set u. e \\<le> Max (set b)\" \"boundr u v\" (*\"cond_B u\" \"cond_D u v\"*)\n        \"subdprodl u v\" \"subdprodr v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length x = m; length y = n; boundr x y\\<rbrakk>\n  \\<Longrightarrow> boundr u v\n  \\<lbrakk>length x = m; length y = n; a \\<bullet> u = b \\<bullet> v;\n   subdprodl x y\\<rbrakk>\n  \\<Longrightarrow> subdprodl u v\n  \\<lbrakk>length x = m; length y = n; subdprodr y\\<rbrakk>\n  \\<Longrightarrow> subdprodr v\n  boundr x y\n  subdprodl x y\n  subdprodr y\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  a \\<bullet> u = b \\<bullet> v\n  nonzero u\n\ngoal (1 subgoal):\n 1. (\\<forall>e\\<in>set u. e \\<le> Max (set b) &&& boundr u v) &&&\n    subdprodl u v &&& subdprodr v", "using conds(1,3,4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>length x = m; length y = n; boundr x y\\<rbrakk>\n  \\<Longrightarrow> boundr u v\n  \\<lbrakk>length x = m; length y = n; a \\<bullet> u = b \\<bullet> v;\n   subdprodl x y\\<rbrakk>\n  \\<Longrightarrow> subdprodl u v\n  \\<lbrakk>length x = m; length y = n; subdprodr y\\<rbrakk>\n  \\<Longrightarrow> subdprodr v\n  boundr x y\n  subdprodl x y\n  subdprodr y\n  u \\<le>\\<^sub>v x\n  v \\<le>\\<^sub>v y\n  a \\<bullet> u = b \\<bullet> v\n  nonzero u\n  \\<forall>e\\<in>set x. e \\<le> Max (set b)\n  subdprodl x y\n  subdprodr y\n\ngoal (1 subgoal):\n 1. (\\<forall>e\\<in>set u. e \\<le> Max (set b) &&& boundr u v) &&&\n    subdprodl u v &&& subdprodr v", "by (auto simp: len less_eq_def) (metis in_set_conv_nth le_trans len(1))"], ["proof (state)\nthis:\n  \\<forall>e\\<in>set u. e \\<le> Max (set b)\n  boundr u v\n  subdprodl u v\n  subdprodr v\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<forall>e\\<in>set u. e \\<le> Max (set b)\n  boundr u v\n  subdprodl u v\n  subdprodr v\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "have \"static_bounds a b u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. static_bounds a b u v", "using max_coeff_bound [OF uv] and Minimal_Solutions_length [OF uv]"], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>set u. x \\<le> maxne0 v b) \\<and>\n  (\\<forall>y\\<in>set v. y \\<le> maxne0 u a)\n  length u = m \\<and> length v = n\n\ngoal (1 subgoal):\n 1. static_bounds a b u v", "by (auto simp: static_bounds_def maxne0_impl)"], ["proof (state)\nthis:\n  static_bounds a b u v\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  static_bounds a b u v\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "have \"x \\<le>\\<^sub>v replicate m ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le>\\<^sub>v replicate m (Max (set b))", "using xs set_generate' [of \"Max (set b)\" \"Max (set a)\" a b]\n          cond_A_def conds(1) le_replicateI len"], ["proof (prove)\nusing this:\n  (x, y)\n  \\<in> set (minimize\n              (filter\n                (\\<lambda>(x, y).\n                    static_bounds a b x y \\<and>\n                    a \\<bullet> x = b \\<bullet> y \\<and>\n                    boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                (generate' (Max (set b)) (Max (set a)) a b)))\n  set (generate' (Max (set b)) (Max (set a)) a b) =\n  {(x, y).\n   (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n   (x, y) \\<in> set (Algorithm.gen2 (Max (set b)) (Max (set a)) a b)}\n  cond_A ?xs ?ys = (\\<forall>x\\<in>set ?xs. x \\<le> maxne0 ?ys b)\n  \\<forall>e\\<in>set x. e \\<le> Max (set b)\n  \\<forall>x\\<in>set ?xs. x \\<le> ?b \\<Longrightarrow>\n  ?xs \\<le>\\<^sub>v replicate (length ?xs) ?b\n  length x = m\n  length y = n\n\ngoal (1 subgoal):\n 1. x \\<le>\\<^sub>v replicate m (Max (set b))", "by metis"], ["proof (state)\nthis:\n  x \\<le>\\<^sub>v replicate m (Max (set b))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  x \\<le>\\<^sub>v replicate m (Max (set b))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "have \"y \\<le>\\<^sub>v replicate n ?a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le>\\<^sub>v replicate n (Max (set a))", "using xs"], ["proof (prove)\nusing this:\n  (x, y)\n  \\<in> set (minimize\n              (filter\n                (\\<lambda>(x, y).\n                    static_bounds a b x y \\<and>\n                    a \\<bullet> x = b \\<bullet> y \\<and>\n                    boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                (generate' (Max (set b)) (Max (set a)) a b)))\n\ngoal (1 subgoal):\n 1. y \\<le>\\<^sub>v replicate n (Max (set a))", "by (auto simp: less_eqI minimize_def set_generate' set_alls2 dest!: minimize_wrtD)"], ["proof (state)\nthis:\n  y \\<le>\\<^sub>v replicate n (Max (set a))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>set u. e \\<le> Max (set b)\n  boundr u v\n  subdprodl u v\n  subdprodr v\n  static_bounds a b u v\n  x \\<le>\\<^sub>v replicate m (Max (set b))\n  y \\<le>\\<^sub>v replicate n (Max (set a))", "have \"(u, v) \\<in> set ?xs\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>set u. e \\<le> Max (set b)\n  boundr u v\n  subdprodl u v\n  subdprodr v\n  static_bounds a b u v\n  x \\<le>\\<^sub>v replicate m (Max (set b))\n  y \\<le>\\<^sub>v replicate n (Max (set a))\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> set (filter\n                (\\<lambda>(x, y).\n                    static_bounds a b x y \\<and>\n                    a \\<bullet> x = b \\<bullet> y \\<and>\n                    boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                (generate' (Max (set b)) (Max (set a)) a b))", "using sol' and set_generate'' [of ?b ?a a b] and uv [THEN Minimal_Solutions_imp_Solutions] and nonzero"], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>set u. e \\<le> Max (set b)\n  boundr u v\n  subdprodl u v\n  subdprodr v\n  static_bounds a b u v\n  x \\<le>\\<^sub>v replicate m (Max (set b))\n  y \\<le>\\<^sub>v replicate n (Max (set a))\n  a \\<bullet> u = b \\<bullet> v\n  set (generate' (Max (set b)) (Max (set a)) a b) =\n  {(x, y).\n   (x, y) \\<noteq> (zeroes m, zeroes n) \\<and>\n   x \\<le>\\<^sub>v replicate m (Max (set b)) \\<and> y\n   \\<le>\\<^sub>v replicate n (Max (set a))}\n  (u, v) \\<in> local.Solutions\n  nonzero u\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> set (filter\n                (\\<lambda>(x, y).\n                    static_bounds a b x y \\<and>\n                    a \\<bullet> x = b \\<bullet> y \\<and>\n                    boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n                (generate' (Max (set b)) (Max (set a)) a b))", "by (simp add: set_gen2) (metis in_set_replicate le order_vec.dual_order.trans nonzero_iff)"], ["proof (state)\nthis:\n  (u, v)\n  \\<in> set (filter\n              (\\<lambda>(x, y).\n                  static_bounds a b x y \\<and>\n                  a \\<bullet> x = b \\<bullet> y \\<and>\n                  boundr x y \\<and> subdprodl x y \\<and> subdprodr y)\n              (generate' (Max (set b)) (Max (set a)) a b))\n\ngoal (1 subgoal):\n 1. \\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n       <\\<^sub>v x @ y \\<Longrightarrow>\n    False", "from * [OF _ _ _ this] and less"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case (u, v) of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   (u, v) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   (u, v) \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n  u @ v <\\<^sub>v x @ y", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case (u, v) of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   (u, v) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   (u, v) \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n  u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. False", "using less_imp_rlex and rlex_not_sym"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2\n              y \\<Longrightarrow>\n              \\<not> y <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 x;\n   \\<not> (case (u, v) of\n           (x, y) \\<Rightarrow>\n             \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n           (x, y);\n   (u, v) <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x\\<^sub>2 (x, y);\n   (u, v) \\<noteq> (x, y)\\<rbrakk>\n  \\<Longrightarrow> False\n  u @ v <\\<^sub>v x @ y\n  ?xs <\\<^sub>v ?ys \\<Longrightarrow>\n  ?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys\n  ?xs <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?ys \\<Longrightarrow>\n  \\<not> ?ys <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x ?xs\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n             <\\<^sub>v x @ y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b) \\<Longrightarrow>\n    (x, y) \\<in> local.Minimal_Solutions", "ultimately"], ["proof (chain)\npicking this:\n  nonzero x\n  \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n             <\\<^sub>v x @ y)", "show ?thesis"], ["proof (prove)\nusing this:\n  nonzero x\n  \\<not> (\\<exists>(u, v)\\<in>local.Minimal_Solutions. u @ v\n             <\\<^sub>v x @ y)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> local.Minimal_Solutions", "by (simp add: Minimal_SolutionsI' sol)"], ["proof (state)\nthis:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Completeness: every minimal solution is generated by \\<open>solve\\<close>\\<close>"], ["", "lemma (in hlde) Minimal_Solutions_subset_solve:\n  shows \"Minimal_Solutions \\<subseteq> set (solve a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.Minimal_Solutions \\<subseteq> set (solve a b)", "proof (rule subrelI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solve a b)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solve a b)", "assume min: \"(x, y) \\<in> Minimal_Solutions\""], ["proof (state)\nthis:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solve a b)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> local.Minimal_Solutions", "have sol: \"a \\<bullet> x = b \\<bullet> y\" \"length x = m\" \"length y = n\"\n    and [dest]: \"x = zeroes m \\<Longrightarrow> y = zeroes n \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> local.Minimal_Solutions\n\ngoal (1 subgoal):\n 1. (a \\<bullet> x = b \\<bullet> y &&& length x = m &&& length y = n) &&&\n    (\\<lbrakk>x = zeroes m; y = zeroes n\\<rbrakk> \\<Longrightarrow> False)", "by (auto simp: Minimal_Solutions_def Solutions_def nonzero_iff)"], ["proof (state)\nthis:\n  a \\<bullet> x = b \\<bullet> y\n  length x = m\n  length y = n\n  \\<lbrakk>x = zeroes m; y = zeroes n\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solve a b)", "consider (special) \"(x, y) \\<in> Special_Solutions\"\n    | (not_special) \"(x, y) \\<notin> Special_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> Special_Solutions \\<Longrightarrow> thesis;\n     (x, y) \\<notin> Special_Solutions \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>(x, y) \\<in> Special_Solutions \\<Longrightarrow> ?thesis;\n   (x, y) \\<notin> Special_Solutions \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> local.Minimal_Solutions \\<Longrightarrow>\n       (x, y) \\<in> set (solve a b)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(x, y) \\<in> Special_Solutions \\<Longrightarrow> ?thesis;\n   (x, y) \\<notin> Special_Solutions \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show \"(x, y) \\<in> set (solve a b)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(x, y) \\<in> Special_Solutions \\<Longrightarrow> ?thesis;\n   (x, y) \\<notin> Special_Solutions \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (solve a b)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. (x, y) \\<in> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)\n 2. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "case special"], ["proof (state)\nthis:\n  (x, y) \\<in> Special_Solutions\n\ngoal (2 subgoals):\n 1. (x, y) \\<in> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)\n 2. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> Special_Solutions", "show ?thesis"], ["proof (prove)\nusing this:\n  (x, y) \\<in> Special_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (solve a b)", "by (simp add: no0 solve_def)"], ["proof (state)\nthis:\n  (x, y) \\<in> set (solve a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "define all where \"all = generate' (Max (set b)) (Max (set a)) a b\""], ["proof (state)\nthis:\n  all = generate' (Max (set b)) (Max (set a)) a b\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "have *: \"\\<forall>(u, v) \\<in> set (check' a b all). \\<not> u @ v <\\<^sub>v x @ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(u, v)\\<in>set (check' a b all). \\<not> u @ v <\\<^sub>v x @ y", "using min and no0"], ["proof (prove)\nusing this:\n  (x, y) \\<in> local.Minimal_Solutions\n  0 \\<notin> set a\n  0 \\<notin> set b\n\ngoal (1 subgoal):\n 1. \\<forall>(u, v)\\<in>set (check' a b all). \\<not> u @ v <\\<^sub>v x @ y", "by (auto simp: all_def set_generate'' neq_0_iff' nonzero_iff dest!: Minimal_Solutions_min)"], ["proof (state)\nthis:\n  \\<forall>(u, v)\\<in>set (check' a b all). \\<not> u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "case not_special"], ["proof (state)\nthis:\n  (x, y) \\<notin> Special_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "from conds [OF min] and not_special"], ["proof (chain)\npicking this:\n  cond_A x y\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> cond_B x\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> boundr x y\n  cond_D x y\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> subdprodr y\n  subdprodl x y\n  (x, y) \\<notin> Special_Solutions", "have \"(x, y) \\<in> set (check' a b all)\""], ["proof (prove)\nusing this:\n  cond_A x y\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> cond_B x\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> boundr x y\n  cond_D x y\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> subdprodr y\n  subdprodl x y\n  (x, y) \\<notin> Special_Solutions\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (check' a b all)", "using max_coeff_bound [OF min] and maxne0_le_Max\n        and Minimal_Solutions_length [OF min]"], ["proof (prove)\nusing this:\n  cond_A x y\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> cond_B x\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> boundr x y\n  cond_D x y\n  (x, y) \\<notin> Special_Solutions \\<Longrightarrow> subdprodr y\n  subdprodl x y\n  (x, y) \\<notin> Special_Solutions\n  (\\<forall>x\\<in>set x. x \\<le> maxne0 y b) \\<and>\n  (\\<forall>y\\<in>set y. y \\<le> maxne0 x a)\n  maxne0 ?x ?a \\<le> Max (set ?a)\n  length x = m \\<and> length y = n\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (check' a b all)", "apply (auto simp: sol all_def set_generate'' cond_A_def less_eq_def static_bounds_def maxne0_impl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>cond_B x; boundr x y; cond_D x y; subdprodr y;\n        subdprodl x y; (x, y) \\<notin> Special_Solutions;\n        \\<And>x a. maxne0 x a \\<le> Max (set a);\n        \\<forall>x\\<in>set x. x \\<le> maxne0 y b;\n        \\<forall>y\\<in>set y. y \\<le> maxne0 x a; i < m\\<rbrakk>\n       \\<Longrightarrow> x ! i \\<le> Max (set b)\n 2. \\<And>i.\n       \\<lbrakk>cond_B x; boundr x y; cond_D x y; subdprodr y;\n        subdprodl x y; (x, y) \\<notin> Special_Solutions;\n        \\<And>x a. maxne0 x a \\<le> Max (set a);\n        \\<forall>x\\<in>set x. x \\<le> maxne0 y b;\n        \\<forall>y\\<in>set y. y \\<le> maxne0 x a; i < n\\<rbrakk>\n       \\<Longrightarrow> y ! i \\<le> Max (set a)", "apply (metis le_trans nth_mem sol(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>cond_B x; boundr x y; cond_D x y; subdprodr y;\n        subdprodl x y; (x, y) \\<notin> Special_Solutions;\n        \\<And>x a. maxne0 x a \\<le> Max (set a);\n        \\<forall>x\\<in>set x. x \\<le> maxne0 y b;\n        \\<forall>y\\<in>set y. y \\<le> maxne0 x a; i < n\\<rbrakk>\n       \\<Longrightarrow> y ! i \\<le> Max (set a)", "by (metis le_trans nth_mem sol(3))"], ["proof (state)\nthis:\n  (x, y) \\<in> set (check' a b all)\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "from in_minimize_wrtI [OF this, of \"\\<lambda>(x, y) (u, v). \\<not> x @ y <\\<^sub>v u @ v\"] *"], ["proof (chain)\npicking this:\n  \\<forall>ya\\<in>set (check' a b all).\n     (case ya of\n      (x, y) \\<Rightarrow> \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n      (x, y) \\<Longrightarrow>\n  (x, y)\n  \\<in> set (minimize_wrt\n              (\\<lambda>(x, y) (u, v). \\<not> x @ y <\\<^sub>v u @ v)\n              (check' a b all))\n  \\<forall>(u, v)\\<in>set (check' a b all). \\<not> u @ v <\\<^sub>v x @ y", "have \"(x, y) \\<in> set (non_special_solutions a b)\""], ["proof (prove)\nusing this:\n  \\<forall>ya\\<in>set (check' a b all).\n     (case ya of\n      (x, y) \\<Rightarrow> \\<lambda>(u, v). \\<not> x @ y <\\<^sub>v u @ v)\n      (x, y) \\<Longrightarrow>\n  (x, y)\n  \\<in> set (minimize_wrt\n              (\\<lambda>(x, y) (u, v). \\<not> x @ y <\\<^sub>v u @ v)\n              (check' a b all))\n  \\<forall>(u, v)\\<in>set (check' a b all). \\<not> u @ v <\\<^sub>v x @ y\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (non_special_solutions a b)", "by (auto simp: non_special_solutions_def minimize_def all_def)"], ["proof (state)\nthis:\n  (x, y) \\<in> set (non_special_solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> Special_Solutions \\<Longrightarrow>\n    (x, y) \\<in> set (solve a b)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> set (non_special_solutions a b)", "show ?thesis"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (non_special_solutions a b)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (solve a b)", "by (simp add: solve_def)"], ["proof (state)\nthis:\n  (x, y) \\<in> set (solve a b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x, y) \\<in> set (solve a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The main correctness and completeness result of our algorithm.\\<close>"], ["", "lemma (in hlde) solve [simp]:\n  shows \"set (solve a b) = Minimal_Solutions\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (solve a b) = local.Minimal_Solutions", "using Minimal_Solutions_subset_solve and solve_subset_Minimal_Solutions"], ["proof (prove)\nusing this:\n  local.Minimal_Solutions \\<subseteq> set (solve a b)\n  set (solve a b) \\<subseteq> local.Minimal_Solutions\n\ngoal (1 subgoal):\n 1. set (solve a b) = local.Minimal_Solutions", "by blast"], ["", "section \\<open>Making the Algorithm More Efficient\\<close>"], ["", "locale bounded_gen_check =\n  fixes C :: \"nat list \\<Rightarrow> nat \\<Rightarrow> bool\"\n    and B :: nat\n  assumes bound: \"\\<And>x xs s. x > B \\<Longrightarrow> C (x # xs) s = False\"\n    and cond_antimono: \"\\<And>x x' xs s s'. C (x # xs) s \\<Longrightarrow> x' \\<le> x \\<Longrightarrow> s' \\<le> s \\<Longrightarrow> C (x' # xs) s'\"\nbegin"], ["", "function incs :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat list \\<times> nat) \\<Rightarrow> (nat list \\<times> nat) list\"\n  where\n    \"incs a x (xs, s) =\n      (let t = s + a * x in\n      if C (x # xs) t then (x # xs, t) # incs a (Suc x) (xs, s) else [])\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>a xa xs s.\n           x = (a, xa, xs, s) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>a x xs s aa xa xsa sa.\n       (a, x, xs, s) = (aa, xa, xsa, sa) \\<Longrightarrow>\n       (let t = s + a * x\n        in if C (x # xs) t then (x # xs, t) # incs_sumC (a, Suc x, xs, s)\n           else []) =\n       (let t = sa + aa * xa\n        in if C (xa # xsa) t\n           then (xa # xsa, t) # incs_sumC (aa, Suc xa, xsa, sa) else [])", "by (auto)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All incs_dom", "by (relation \"measure (\\<lambda>(a, x, xs, s). B + 1 - x)\", rule wf_measure, case_tac \"x > B\")\n    (use bound in auto)"], ["", "declare incs.simps [simp del]"], ["", "lemma in_incs:\n  assumes \"(ys, t) \\<in> set (incs a x (xs, s))\"\n  shows \"length ys = length xs + 1 \\<and> t = s + hd ys * a \\<and> tl ys = xs \\<and> C ys t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs + 1 \\<and>\n    t = s + hd ys * a \\<and> tl ys = xs \\<and> C ys t", "using assms"], ["proof (prove)\nusing this:\n  (ys, t) \\<in> set (incs a x (xs, s))\n\ngoal (1 subgoal):\n 1. length ys = length xs + 1 \\<and>\n    t = s + hd ys * a \\<and> tl ys = xs \\<and> C ys t", "by (induct a x \"(xs, s)\" arbitrary: ys t rule: incs.induct)\n    (subst (asm) (2) incs.simps, auto simp: Let_def)"], ["", "lemma incs_Nil [simp]: \"x > B \\<Longrightarrow> incs a x (xs, s) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B < x \\<Longrightarrow> incs a x (xs, s) = []", "by (induct a x \"(xs, s)\" rule: incs.induct) (simp add: incs.simps bound)"], ["", "lemma incs_filter:\n  assumes \"x \\<le> B\"\n  shows \"incs a x = (\\<lambda>(xs, s). filter (cond_cons C) (map (\\<lambda>x. (x # xs, s + a * x)) [x ..< B + 1]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incs a x =\n    (\\<lambda>(xs, s).\n        filter (cond_cons C)\n         (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       incs a x xa =\n       (case xa of\n        (xs, s) \\<Rightarrow>\n          filter (cond_cons C)\n           (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))", "fix xss"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       incs a x xa =\n       (case xa of\n        (xs, s) \\<Rightarrow>\n          filter (cond_cons C)\n           (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))", "show \"incs a x xss = (\\<lambda>(xs, s). filter (cond_cons C) (map (\\<lambda>x. (x # xs, s + a * x)) [x ..< B + 1])) xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incs a x xss =\n    (case xss of\n     (xs, s) \\<Rightarrow>\n       filter (cond_cons C)\n        (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))", "using assms"], ["proof (prove)\nusing this:\n  x \\<le> B\n\ngoal (1 subgoal):\n 1. incs a x xss =\n    (case xss of\n     (xs, s) \\<Rightarrow>\n       filter (cond_cons C)\n        (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))", "proof (induct a x xss rule: incs.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x xs s.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa = s + a * x; C (x # xs) xa;\n                    Suc x \\<le> B\\<rbrakk>\n                   \\<Longrightarrow> incs a (Suc x) (xs, s) =\n                                     (case (xs, s) of\n(xs, s) \\<Rightarrow>\n  filter (cond_cons C)\n   (map (\\<lambda>x. (x # xs, s + a * x)) [Suc x..<B + 1]));\n        x \\<le> B\\<rbrakk>\n       \\<Longrightarrow> incs a x (xs, s) =\n                         (case (xs, s) of\n                          (xs, s) \\<Rightarrow>\n                            filter (cond_cons C)\n                             (map (\\<lambda>x. (x # xs, s + a * x))\n                               [x..<B + 1]))", "case (1 a x xs s)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa = s + a * x; C (x # xs) ?xa; Suc x \\<le> B\\<rbrakk>\n  \\<Longrightarrow> incs a (Suc x) (xs, s) =\n                    (case (xs, s) of\n                     (xs, s) \\<Rightarrow>\n                       filter (cond_cons C)\n                        (map (\\<lambda>x. (x # xs, s + a * x))\n                          [Suc x..<B + 1]))\n  x \\<le> B\n\ngoal (1 subgoal):\n 1. \\<And>a x xs s.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa = s + a * x; C (x # xs) xa;\n                    Suc x \\<le> B\\<rbrakk>\n                   \\<Longrightarrow> incs a (Suc x) (xs, s) =\n                                     (case (xs, s) of\n(xs, s) \\<Rightarrow>\n  filter (cond_cons C)\n   (map (\\<lambda>x. (x # xs, s + a * x)) [Suc x..<B + 1]));\n        x \\<le> B\\<rbrakk>\n       \\<Longrightarrow> incs a x (xs, s) =\n                         (case (xs, s) of\n                          (xs, s) \\<Rightarrow>\n                            filter (cond_cons C)\n                             (map (\\<lambda>x. (x # xs, s + a * x))\n                               [x..<B + 1]))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xa = s + a * x; C (x # xs) ?xa; Suc x \\<le> B\\<rbrakk>\n  \\<Longrightarrow> incs a (Suc x) (xs, s) =\n                    (case (xs, s) of\n                     (xs, s) \\<Rightarrow>\n                       filter (cond_cons C)\n                        (map (\\<lambda>x. (x # xs, s + a * x))\n                          [Suc x..<B + 1]))\n  x \\<le> B", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa = s + a * x; C (x # xs) ?xa; Suc x \\<le> B\\<rbrakk>\n  \\<Longrightarrow> incs a (Suc x) (xs, s) =\n                    (case (xs, s) of\n                     (xs, s) \\<Rightarrow>\n                       filter (cond_cons C)\n                        (map (\\<lambda>x. (x # xs, s + a * x))\n                          [Suc x..<B + 1]))\n  x \\<le> B\n\ngoal (1 subgoal):\n 1. incs a x (xs, s) =\n    (case (xs, s) of\n     (xs, s) \\<Rightarrow>\n       filter (cond_cons C)\n        (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))", "by (unfold incs.simps [of a x], cases \"x = B\")\n        (auto simp: filter_empty_conv Let_def cond_cons_def upt_conv_Cons intro: cond_antimono)"], ["proof (state)\nthis:\n  incs a x (xs, s) =\n  (case (xs, s) of\n   (xs, s) \\<Rightarrow>\n     filter (cond_cons C)\n      (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  incs a x xss =\n  (case xss of\n   (xs, s) \\<Rightarrow>\n     filter (cond_cons C)\n      (map (\\<lambda>x. (x # xs, s + a * x)) [x..<B + 1]))\n\ngoal:\nNo subgoals!", "qed"], ["", "fun gen_check :: \"nat list \\<Rightarrow> (nat list \\<times> nat) list\"\n  where\n    \"gen_check [] = [([], 0)]\"\n  | \"gen_check (a # as) = concat (map (incs a 0) (gen_check as))\""], ["", "lemma gen_check_len:\n  assumes \"(ys, s) \\<in> set (gen_check as)\"\n  shows \"length ys = length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length as", "using assms"], ["proof (prove)\nusing this:\n  (ys, s) \\<in> set (gen_check as)\n\ngoal (1 subgoal):\n 1. length ys = length as", "proof (induct as arbitrary: ys s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "case (Cons a as)"], ["proof (state)\nthis:\n  (?ys, ?s) \\<in> set (gen_check as) \\<Longrightarrow>\n  length ?ys = length as\n  (ys, s) \\<in> set (gen_check (a # as))\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "have \"\\<exists>(la,t) \\<in> set (gen_check as). (ys, s) \\<in> set (incs a 0 (la,t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>(la, t)\\<in>set (gen_check as).\n       (ys, s) \\<in> set (incs a 0 (la, t))", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  (ys, s) \\<in> set (gen_check (a # as))\n\ngoal (1 subgoal):\n 1. \\<exists>(la, t)\\<in>set (gen_check as).\n       (ys, s) \\<in> set (incs a 0 (la, t))", "by auto"], ["proof (state)\nthis:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "moreover"], ["proof (state)\nthis:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "obtain  la t where \"(la,t) \\<in> set (gen_check as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>la t.\n        (la, t) \\<in> set (gen_check as) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using calculation"], ["proof (prove)\nusing this:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n\ngoal (1 subgoal):\n 1. (\\<And>la t.\n        (la, t) \\<in> set (gen_check as) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (la, t) \\<in> set (gen_check as)\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "moreover"], ["proof (state)\nthis:\n  (la, t) \\<in> set (gen_check as)\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "have \"length ys = length la + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length la + 1", "using calculation"], ["proof (prove)\nusing this:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n  (la, t) \\<in> set (gen_check as)\n\ngoal (1 subgoal):\n 1. length ys = length la + 1", "by (metis (no_types, lifting) Cons.hyps case_prodE in_incs)"], ["proof (state)\nthis:\n  length ys = length la + 1\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "moreover"], ["proof (state)\nthis:\n  length ys = length la + 1\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "have \"length la = length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length la = length as", "using calculation"], ["proof (prove)\nusing this:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n  (la, t) \\<in> set (gen_check as)\n  length ys = length la + 1\n\ngoal (1 subgoal):\n 1. length la = length as", "using Cons.hyps Cons.prems"], ["proof (prove)\nusing this:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n  (la, t) \\<in> set (gen_check as)\n  length ys = length la + 1\n  (?ys, ?s) \\<in> set (gen_check as) \\<Longrightarrow>\n  length ?ys = length as\n  (ys, s) \\<in> set (gen_check (a # as))\n\ngoal (1 subgoal):\n 1. length la = length as", "by fastforce"], ["proof (state)\nthis:\n  length la = length as\n\ngoal (2 subgoals):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []\n 2. \\<And>a as ys s.\n       \\<lbrakk>\\<And>ys s.\n                   (ys, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length ys = length as;\n        (ys, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length ys = length (a # as)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n  (la, t) \\<in> set (gen_check as)\n  length ys = length la + 1\n  length la = length as", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>(la, t)\\<in>set (gen_check as).\n     (ys, s) \\<in> set (incs a 0 (la, t))\n  (la, t) \\<in> set (gen_check as)\n  length ys = length la + 1\n  length la = length as\n\ngoal (1 subgoal):\n 1. length ys = length (a # as)", "by simp"], ["proof (state)\nthis:\n  length ys = length (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>ys s.\n       (ys, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length ys = length []", "qed (auto)"], ["", "lemma in_gen_check:\n  assumes \"(xs, s) \\<in> set (gen_check as)\"\n  shows \"length xs = length as \\<and> s = as \\<bullet> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length as \\<and> s = as \\<bullet> xs", "using assms"], ["proof (prove)\nusing this:\n  (xs, s) \\<in> set (gen_check as)\n\ngoal (1 subgoal):\n 1. length xs = length as \\<and> s = as \\<bullet> xs", "apply (induct as arbitrary: xs s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs s.\n       (xs, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       length xs = length [] \\<and> s = [] \\<bullet> xs\n 2. \\<And>a as xs s.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length xs = length as \\<and> s = as \\<bullet> xs;\n        (xs, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> length xs = length (a # as) \\<and>\n                         s = (a # as) \\<bullet> xs", "apply (auto simp: in_incs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as xs s aa b.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length xs = length as \\<and> s = as \\<bullet> xs;\n        (aa, b) \\<in> set (gen_check as);\n        (xs, s) \\<in> set (incs a 0 (aa, b))\\<rbrakk>\n       \\<Longrightarrow> s = (a # as) \\<bullet> xs", "apply (case_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a as xs s aa b.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length xs = length as \\<and> s = as \\<bullet> xs;\n        (aa, b) \\<in> set (gen_check as);\n        (xs, s) \\<in> set (incs a 0 (aa, b)); xs = []\\<rbrakk>\n       \\<Longrightarrow> s = (a # as) \\<bullet> xs\n 2. \\<And>a as xs s aa b ab list.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   length xs = length as \\<and> s = as \\<bullet> xs;\n        (aa, b) \\<in> set (gen_check as);\n        (xs, s) \\<in> set (incs a 0 (aa, b)); xs = ab # list\\<rbrakk>\n       \\<Longrightarrow> s = (a # as) \\<bullet> xs", "apply (auto dest: in_incs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gen_check_filter:\n  \"gen_check as = filter (suffs C as) (alls B as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_check as = filter (suffs C as) (alls B as)", "proof (induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "case (Cons a as)"], ["proof (state)\nthis:\n  gen_check as = filter (suffs C as) (alls B as)\n\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "have \"filter (suffs C (a # as)) (alls B (a # as)) =\n    filter (\\<lambda>(xs, s). cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs)) (alls B (a # as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (suffs C (a # as)) (alls B (a # as)) =\n    filter\n     (\\<lambda>(xs, s).\n         cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs))\n     (alls B (a # as))", "by (intro filter_cong [OF refl])\n      (auto simp: set_alls suffs.simps all_Suc_le_conv ac_simps split: list.splits)"], ["proof (state)\nthis:\n  filter (suffs C (a # as)) (alls B (a # as)) =\n  filter\n   (\\<lambda>(xs, s).\n       cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs))\n   (alls B (a # as))\n\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "also"], ["proof (state)\nthis:\n  filter (suffs C (a # as)) (alls B (a # as)) =\n  filter\n   (\\<lambda>(xs, s).\n       cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs))\n   (alls B (a # as))\n\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "have \"\\<dots> =\n    concat (map (\\<lambda>(xs, s). filter (cond_cons C) (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n      (filter (suffs C as) (alls B as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>(xs, s).\n         cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs))\n     (alls B (a # as)) =\n    concat\n     (map (\\<lambda>(xs, s).\n              filter (cond_cons C)\n               (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (filter (suffs C as) (alls B as)))", "unfolding alls.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>(xs, s).\n         cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs))\n     (concat\n       (map (\\<lambda>(xs, s).\n                map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1])\n         (alls B as))) =\n    concat\n     (map (\\<lambda>(xs, s).\n              filter (cond_cons C)\n               (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (filter (suffs C as) (alls B as)))", "unfolding filter_concat"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (filter\n            (\\<lambda>(xs, s).\n                cond_cons C (xs, s) \\<and>\n                suffs C as (tl xs, as \\<bullet> tl xs)))\n       (map (\\<lambda>(xs, s).\n                map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1])\n         (alls B as))) =\n    concat\n     (map (\\<lambda>(xs, s).\n              filter (cond_cons C)\n               (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (filter (suffs C as) (alls B as)))", "unfolding map_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (filter\n            (\\<lambda>(xs, s).\n                cond_cons C (xs, s) \\<and>\n                suffs C as (tl xs, as \\<bullet> tl xs)) \\<circ>\n           (\\<lambda>(xs, s).\n               map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (alls B as)) =\n    concat\n     (map (\\<lambda>(xs, s).\n              filter (cond_cons C)\n               (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (filter (suffs C as) (alls B as)))", "by (subst concat_map_filter_filter [symmetric, where Q = \"suffs C as\"])\n      (auto simp: set_alls intro!: arg_cong [of _ _ concat] filter_cong)"], ["proof (state)\nthis:\n  filter\n   (\\<lambda>(xs, s).\n       cond_cons C (xs, s) \\<and> suffs C as (tl xs, as \\<bullet> tl xs))\n   (alls B (a # as)) =\n  concat\n   (map (\\<lambda>(xs, s).\n            filter (cond_cons C)\n             (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n     (filter (suffs C as) (alls B as)))\n\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "finally"], ["proof (chain)\npicking this:\n  filter (suffs C (a # as)) (alls B (a # as)) =\n  concat\n   (map (\\<lambda>(xs, s).\n            filter (cond_cons C)\n             (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n     (filter (suffs C as) (alls B as)))", "have *: \"filter (suffs C (a # as)) (alls B (a # as)) =\n    concat (map (\\<lambda>(xs, s).\n      filter (cond_cons C) (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1])) (filter (suffs C as) (alls B as)))\""], ["proof (prove)\nusing this:\n  filter (suffs C (a # as)) (alls B (a # as)) =\n  concat\n   (map (\\<lambda>(xs, s).\n            filter (cond_cons C)\n             (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n     (filter (suffs C as) (alls B as)))\n\ngoal (1 subgoal):\n 1. filter (suffs C (a # as)) (alls B (a # as)) =\n    concat\n     (map (\\<lambda>(xs, s).\n              filter (cond_cons C)\n               (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (filter (suffs C as) (alls B as)))", "."], ["proof (state)\nthis:\n  filter (suffs C (a # as)) (alls B (a # as)) =\n  concat\n   (map (\\<lambda>(xs, s).\n            filter (cond_cons C)\n             (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n     (filter (suffs C as) (alls B as)))\n\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "have \"gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_check (a # as) =\n    concat\n     (map (\\<lambda>(xs, s).\n              filter (cond_cons C)\n               (map (\\<lambda>x. (x # xs, s + a * x)) [0..<B + 1]))\n       (filter (suffs C as) (alls B as)))", "by (simp add: incs_filter [OF zero_le] Cons)"], ["proof (state)\nthis:\n  gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))\n\ngoal (2 subgoals):\n 1. gen_check [] = filter (suffs C []) (alls B [])\n 2. \\<And>a as.\n       gen_check as = filter (suffs C as) (alls B as) \\<Longrightarrow>\n       gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "then"], ["proof (chain)\npicking this:\n  gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "show ?case"], ["proof (prove)\nusing this:\n  gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))\n\ngoal (1 subgoal):\n 1. gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))", "by simp"], ["proof (state)\nthis:\n  gen_check (a # as) = filter (suffs C (a # as)) (alls B (a # as))\n\ngoal (1 subgoal):\n 1. gen_check [] = filter (suffs C []) (alls B [])", "qed simp"], ["", "lemma in_gen_check_cond:\n  assumes \"(xs, s) \\<in> set (gen_check as)\"\n  shows \"\\<forall>j\\<le>length xs. drop j xs \\<noteq> [] \\<longrightarrow> C (drop j xs) (s - take j as \\<bullet> take j xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>length xs.\n       drop j xs \\<noteq> [] \\<longrightarrow>\n       C (drop j xs) (s - take j as \\<bullet> take j xs)", "using assms"], ["proof (prove)\nusing this:\n  (xs, s) \\<in> set (gen_check as)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>length xs.\n       drop j xs \\<noteq> [] \\<longrightarrow>\n       C (drop j xs) (s - take j as \\<bullet> take j xs)", "apply (induct as arbitrary: xs s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs s.\n       (xs, s) \\<in> set (gen_check []) \\<Longrightarrow>\n       \\<forall>j\\<le>length xs.\n          drop j xs \\<noteq> [] \\<longrightarrow>\n          C (drop j xs) (s - take j [] \\<bullet> take j xs)\n 2. \\<And>a as xs s.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      drop j xs \\<noteq> [] \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (xs, s) \\<in> set (gen_check (a # as))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j\\<le>length xs.\n                            drop j xs \\<noteq> [] \\<longrightarrow>\n                            C (drop j xs)\n                             (s - take j (a # as) \\<bullet> take j xs)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as xs s aa b j.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      length xs \\<noteq> j \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (aa, b) \\<in> set (gen_check as);\n        (xs, s) \\<in> set (incs a 0 (aa, b)); j \\<le> length xs;\n        length xs \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> C (drop j xs)\n                          (s - take j (a # as) \\<bullet> take j xs)", "apply (case_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a as xs s aa b j.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      length xs \\<noteq> j \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (aa, b) \\<in> set (gen_check as);\n        (xs, s) \\<in> set (incs a 0 (aa, b)); j \\<le> length xs;\n        length xs \\<noteq> j; xs = []\\<rbrakk>\n       \\<Longrightarrow> C (drop j xs)\n                          (s - take j (a # as) \\<bullet> take j xs)\n 2. \\<And>a as xs s aa b j ab list.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      length xs \\<noteq> j \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (aa, b) \\<in> set (gen_check as);\n        (xs, s) \\<in> set (incs a 0 (aa, b)); j \\<le> length xs;\n        length xs \\<noteq> j; xs = ab # list\\<rbrakk>\n       \\<Longrightarrow> C (drop j xs)\n                          (s - take j (a # as) \\<bullet> take j xs)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as s aa b j ab list.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      length xs \\<noteq> j \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (aa, b) \\<in> set (gen_check as);\n        (ab # list, s) \\<in> set (incs a 0 (aa, b));\n        j \\<le> Suc (length list); Suc (length list) \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> C (drop j (ab # list))\n                          (s - take j (a # as) \\<bullet> take j (ab # list))", "apply (case_tac j)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a as s aa b j ab list.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      length xs \\<noteq> j \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (aa, b) \\<in> set (gen_check as);\n        (ab # list, s) \\<in> set (incs a 0 (aa, b));\n        j \\<le> Suc (length list); Suc (length list) \\<noteq> j;\n        j = 0\\<rbrakk>\n       \\<Longrightarrow> C (drop j (ab # list))\n                          (s - take j (a # as) \\<bullet> take j (ab # list))\n 2. \\<And>a as s aa b j ab list nat.\n       \\<lbrakk>\\<And>xs s.\n                   (xs, s) \\<in> set (gen_check as) \\<Longrightarrow>\n                   \\<forall>j\\<le>length xs.\n                      length xs \\<noteq> j \\<longrightarrow>\n                      C (drop j xs) (s - take j as \\<bullet> take j xs);\n        (aa, b) \\<in> set (gen_check as);\n        (ab # list, s) \\<in> set (incs a 0 (aa, b));\n        j \\<le> Suc (length list); Suc (length list) \\<noteq> j;\n        j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> C (drop j (ab # list))\n                          (s - take j (a # as) \\<bullet> take j (ab # list))", "apply (auto dest: in_incs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sorted_gen_check:\n  \"sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "have sort_map: \"sorted_wrt (\\<lambda>x y. x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x y) (map fst (alls B xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))", "using sorted_wrt_alls"], ["proof (prove)\nusing this:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls ?B ?xs))\n\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))", "by auto"], ["proof (state)\nthis:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))\n\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "then"], ["proof (chain)\npicking this:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))", "have \"sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y) (alls B xs)\""], ["proof (prove)\nusing this:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n     (alls B xs)", "using sorted_wrt_map_distr [of \"(<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x)\" fst \"alls B xs\"]"], ["proof (prove)\nusing this:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls B xs))\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x)\n   (map fst (alls B xs)) \\<Longrightarrow>\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (alls B xs)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n     (alls B xs)", "by (auto)"], ["proof (state)\nthis:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (alls B xs)\n\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "then"], ["proof (chain)\npicking this:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (alls B xs)", "have \"sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y) (filter (suffs C xs) (alls B xs))\""], ["proof (prove)\nusing this:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (alls B xs)\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n     (filter (suffs C xs) (alls B xs))", "using sorted_wrt_alls sorted_wrt_filter sorted_wrt_map"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (alls B xs)\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (alls ?B ?xs))\n  sorted_wrt ?P ?xs \\<Longrightarrow> sorted_wrt ?P (filter ?Q ?xs)\n  sorted_wrt ?R (map ?f ?xs) =\n  sorted_wrt (\\<lambda>x y. ?R (?f x) (?f y)) ?xs\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n     (filter (suffs C xs) (alls B xs))", "by blast"], ["proof (state)\nthis:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (filter (suffs C xs) (alls B xs))\n\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "then"], ["proof (chain)\npicking this:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (filter (suffs C xs) (alls B xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (filter (suffs C xs) (alls B xs))\n\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "using gen_check_filter"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<lambda>x y. fst x <\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x fst y)\n   (filter (suffs C xs) (alls B xs))\n  gen_check ?as = filter (suffs C ?as) (alls B ?as)\n\ngoal (1 subgoal):\n 1. sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))", "by (simp add: case_prod_unfold sorted_wrt_map_mono)"], ["proof (state)\nthis:\n  sorted_wrt (<\\<^sub>r\\<^sub>l\\<^sub>e\\<^sub>x) (map fst (gen_check xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale bounded_generate_check =\n  c2: bounded_gen_check C\\<^sub>2 B\\<^sub>2 for C\\<^sub>2 B\\<^sub>2 +\n  fixes C\\<^sub>1 and B\\<^sub>1\n  assumes cond1: \"\\<And>b ys. ys \\<in> fst ` set (c2.gen_check b) \\<Longrightarrow> bounded_gen_check (C\\<^sub>1 b ys) (B\\<^sub>1 b)\"\nbegin"], ["", "definition \"generate_check a b =\n  [(xs, ys). ys \\<leftarrow> c2.gen_check b, xs \\<leftarrow> bounded_gen_check.gen_check (C\\<^sub>1 b (fst ys)) a]\""], ["", "lemma generate_check_filter_conv:\n  \"generate_check a b = [(xs, ys).\n    ys \\<leftarrow> filter (suffs C\\<^sub>2 b) (alls B\\<^sub>2 b),\n    xs \\<leftarrow> filter (suffs (C\\<^sub>1 b (fst ys)) a) (alls (B\\<^sub>1 b) a)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate_check a b =\n    concat\n     (map (\\<lambda>ys.\n              map (\\<lambda>xs. (xs, ys))\n               (filter (suffs (C\\<^sub>1 b (fst ys)) a)\n                 (alls (B\\<^sub>1 b) a)))\n       (filter (suffs C\\<^sub>2 b) (alls B\\<^sub>2 b)))", "using bounded_gen_check.gen_check_filter [OF cond1]"], ["proof (prove)\nusing this:\n  ?ys1 \\<in> fst ` set (c2.gen_check ?b1) \\<Longrightarrow>\n  bounded_gen_check.gen_check (C\\<^sub>1 ?b1 ?ys1) ?as =\n  filter (suffs (C\\<^sub>1 ?b1 ?ys1) ?as) (alls (B\\<^sub>1 ?b1) ?as)\n\ngoal (1 subgoal):\n 1. generate_check a b =\n    concat\n     (map (\\<lambda>ys.\n              map (\\<lambda>xs. (xs, ys))\n               (filter (suffs (C\\<^sub>1 b (fst ys)) a)\n                 (alls (B\\<^sub>1 b) a)))\n       (filter (suffs C\\<^sub>2 b) (alls B\\<^sub>2 b)))", "by (force simp: generate_check_def c2.gen_check_filter intro!: arg_cong [of _ _ concat] map_cong)"], ["", "lemma generate_check_filter:\n  \"generate_check a b = [(xs, ys) \\<leftarrow> alls2 (B\\<^sub>1 b) B\\<^sub>2 a b. suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate_check a b =\n    filter\n     (\\<lambda>(xs, ys).\n         suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys)\n     (alls2 (B\\<^sub>1 b) B\\<^sub>2 a b)", "by (auto intro: arg_cong [of _ _ concat]\n    simp: generate_check_filter_conv alls2_def filter_concat concat_map_filter filter_map o_def)"], ["", "lemma tl_generate_check_filter:\n  assumes \"suffs (C\\<^sub>1 b (zeroes (length b))) a (zeroes (length a), 0)\"\n    and \"suffs C\\<^sub>2 b (zeroes (length b), 0)\"\n  shows \"tl (generate_check a b) = [(xs, ys) \\<leftarrow> tl (alls2 (B\\<^sub>1 b) B\\<^sub>2 a b). suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (generate_check a b) =\n    filter\n     (\\<lambda>(xs, ys).\n         suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys)\n     (tl (alls2 (B\\<^sub>1 b) B\\<^sub>2 a b))", "using assms"], ["proof (prove)\nusing this:\n  suffs (C\\<^sub>1 b (zeroes (length b))) a (zeroes (length a), 0)\n  suffs C\\<^sub>2 b (zeroes (length b), 0)\n\ngoal (1 subgoal):\n 1. tl (generate_check a b) =\n    filter\n     (\\<lambda>(xs, ys).\n         suffs (C\\<^sub>1 b (fst ys)) a xs \\<and> suffs C\\<^sub>2 b ys)\n     (tl (alls2 (B\\<^sub>1 b) B\\<^sub>2 a b))", "by (unfold generate_check_filter, subst (1 2) alls2_Cons_tl_conv) auto"], ["", "end"], ["", "context\n  fixes a b :: \"nat list\"\nbegin"], ["", "fun cond1\n  where\n    \"cond1 ys [] s \\<longleftrightarrow> True\"\n  | \"cond1 ys (x # xs) s \\<longleftrightarrow> s \\<le> b \\<bullet> ys \\<and> x \\<le> maxne0_impl ys b\""], ["", "lemma max_x_impl'_conv:\n  \"i < length a \\<Longrightarrow> length y = length b \\<Longrightarrow> max_x_impl' a b y i = max_x_impl a b y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length a; length y = length b\\<rbrakk>\n    \\<Longrightarrow> max_x_impl' a b y i = max_x_impl a b y i", "by (auto simp: max_x_impl'_def max_x_impl_def Let_def big_d'_def big_d_def)"], ["", "fun cond2\n  where\n    \"cond2 [] s \\<longleftrightarrow> True\"\n  | \"cond2 (y # ys) s \\<longleftrightarrow> y \\<le> Max (set a) \\<and> s \\<le> a \\<bullet> map (max_x_impl' a b (y # ys)) [0 ..< length a]\""], ["", "lemma le_imp_big_d'_subset:\n  assumes \"v \\<le>\\<^sub>v y\"\n  shows \"set (big_d' a b v i) \\<subseteq> set (big_d' a b y i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (big_d' a b v i) \\<subseteq> set (big_d' a b y i)", "using assms and le_trans"], ["proof (prove)\nusing this:\n  v \\<le>\\<^sub>v y\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n\ngoal (1 subgoal):\n 1. set (big_d' a b v i) \\<subseteq> set (big_d' a b y i)", "by (auto simp: Let_def big_d'_def less_eq_def hlde_ops.dij_def hlde_ops.eij_def)"], ["", "lemma finite_big_d':\n  \"finite (set (big_d' a b y i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (big_d' a b y i))", "by (rule finite_subset [of _ \"(\\<lambda>j. dij a b i (j + length b - length y) - 1) ` {0 ..< length y}\"])\n    (auto simp: Let_def big_d'_def)"], ["", "lemma Min_big_d'_le:\n  assumes \"i < length a\"\n    and \"big_d' a b y i \\<noteq> []\"\n    and \"length y \\<le> length b\"\n  shows \"Min (set (big_d' a b y i)) \\<le> Max (set b)\" (is \"?m \\<le> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "have \"?m \\<in> set (big_d' a b y i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<in> set (big_d' a b y i)", "using assms and finite_big_d' and Min_in"], ["proof (prove)\nusing this:\n  i < length a\n  big_d' a b y i \\<noteq> []\n  length y \\<le> length b\n  finite (set (big_d' a b ?y ?i))\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<in> set (big_d' a b y i)", "by auto"], ["proof (state)\nthis:\n  Min (set (big_d' a b y i)) \\<in> set (big_d' a b y i)\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "then"], ["proof (chain)\npicking this:\n  Min (set (big_d' a b y i)) \\<in> set (big_d' a b y i)", "obtain j where\n    j: \"?m = dij a b i (j + length b - length y) - 1\" \"j < length y\" \"y ! j \\<ge> eij a b i (j + length b - length y)\""], ["proof (prove)\nusing this:\n  Min (set (big_d' a b y i)) \\<in> set (big_d' a b y i)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>Min (set (big_d' a b y i)) =\n                 dij a b i (j + length b - length y) - 1;\n         j < length y;\n         eij a b i (j + length b - length y) \\<le> y ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: big_d'_def Let_def split: if_splits)"], ["proof (state)\nthis:\n  Min (set (big_d' a b y i)) = dij a b i (j + length b - length y) - 1\n  j < length y\n  eij a b i (j + length b - length y) \\<le> y ! j\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "then"], ["proof (chain)\npicking this:\n  Min (set (big_d' a b y i)) = dij a b i (j + length b - length y) - 1\n  j < length y\n  eij a b i (j + length b - length y) \\<le> y ! j", "have \"j + length b - length y < length b\""], ["proof (prove)\nusing this:\n  Min (set (big_d' a b y i)) = dij a b i (j + length b - length y) - 1\n  j < length y\n  eij a b i (j + length b - length y) \\<le> y ! j\n\ngoal (1 subgoal):\n 1. j + length b - length y < length b", "using assms"], ["proof (prove)\nusing this:\n  Min (set (big_d' a b y i)) = dij a b i (j + length b - length y) - 1\n  j < length y\n  eij a b i (j + length b - length y) \\<le> y ! j\n  i < length a\n  big_d' a b y i \\<noteq> []\n  length y \\<le> length b\n\ngoal (1 subgoal):\n 1. j + length b - length y < length b", "by auto"], ["proof (state)\nthis:\n  j + length b - length y < length b\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "moreover"], ["proof (state)\nthis:\n  j + length b - length y < length b\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "have \"lcm (a ! i) (b ! (j + length b - length y)) div a ! i \\<le> b ! (j + length b - length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcm (a ! i) (b ! (j + length b - length y)) div a ! i\n    \\<le> b ! (j + length b - length y)", "by (rule lcm_div_le')"], ["proof (state)\nthis:\n  lcm (a ! i) (b ! (j + length b - length y)) div a ! i\n  \\<le> b ! (j + length b - length y)\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "ultimately"], ["proof (chain)\npicking this:\n  j + length b - length y < length b\n  lcm (a ! i) (b ! (j + length b - length y)) div a ! i\n  \\<le> b ! (j + length b - length y)", "show ?thesis"], ["proof (prove)\nusing this:\n  j + length b - length y < length b\n  lcm (a ! i) (b ! (j + length b - length y)) div a ! i\n  \\<le> b ! (j + length b - length y)\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "using j and assms"], ["proof (prove)\nusing this:\n  j + length b - length y < length b\n  lcm (a ! i) (b ! (j + length b - length y)) div a ! i\n  \\<le> b ! (j + length b - length y)\n  Min (set (big_d' a b y i)) = dij a b i (j + length b - length y) - 1\n  j < length y\n  eij a b i (j + length b - length y) \\<le> y ! j\n  i < length a\n  big_d' a b y i \\<noteq> []\n  length y \\<le> length b\n\ngoal (1 subgoal):\n 1. Min (set (big_d' a b y i)) \\<le> Max (set b)", "by (auto simp: hlde_ops.dij_def)\n      (meson List.finite_set Max_ge diff_le_self le_trans less_le_trans nth_mem)"], ["proof (state)\nthis:\n  Min (set (big_d' a b y i)) \\<le> Max (set b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_imp_max_x_impl'_ge:\n  assumes \"v \\<le>\\<^sub>v y\"\n    and \"i < length a\"\n  shows \"max_x_impl' a b v i \\<ge> max_x_impl' a b y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_x_impl' a b y i \\<le> max_x_impl' a b v i", "using assms and le_imp_big_d'_subset [OF assms(1), of i]\n    and Min_in [OF finite_big_d', of y i]\n    and finite_big_d' and Min_le"], ["proof (prove)\nusing this:\n  v \\<le>\\<^sub>v y\n  i < length a\n  set (big_d' a b v i) \\<subseteq> set (big_d' a b y i)\n  set (big_d' a b y i) \\<noteq> {} \\<Longrightarrow>\n  Min (set (big_d' a b y i)) \\<in> set (big_d' a b y i)\n  finite (set (big_d' a b ?y ?i))\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk> \\<Longrightarrow> Min ?A \\<le> ?x\n\ngoal (1 subgoal):\n 1. max_x_impl' a b y i \\<le> max_x_impl' a b v i", "by (auto simp: max_x_impl'_def Let_def intro!: Min_big_d'_le [of i y])\n    (fastforce simp: big_d'_def intro: leI)"], ["", "end"], ["", "global_interpretation c12: bounded_generate_check \"(cond2 a b)\" \"Max (set a)\" \"cond1\" \"\\<lambda>b. Max (set b)\"\n  defines c2_gen_check = c12.c2.gen_check and c2_incs = c12.c2.incs\n    and c12_generate_check = c12.generate_check"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "fix x xs s"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "assume \"Max (set a) < x\""], ["proof (state)\nthis:\n  Max (set a) < x\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "then"], ["proof (chain)\npicking this:\n  Max (set a) < x", "have \"cond2 a b (x # xs) s = False\""], ["proof (prove)\nusing this:\n  Max (set a) < x\n\ngoal (1 subgoal):\n 1. cond2 a b (x # xs) s = False", "by (auto)"], ["proof (state)\nthis:\n  cond2 a b (x # xs) s = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "}"], ["proof (state)\nthis:\n  Max (set a) < ?x2 \\<Longrightarrow> cond2 a b (?x2 # ?xs2) ?s2 = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "note 1 = this"], ["proof (state)\nthis:\n  Max (set a) < ?x2 \\<Longrightarrow> cond2 a b (?x2 # ?xs2) ?s2 = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "{"], ["proof (state)\nthis:\n  Max (set a) < ?x2 \\<Longrightarrow> cond2 a b (?x2 # ?xs2) ?s2 = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "fix x x' xs s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "assume \"cond2 a b (x # xs) s\" and \"x' \\<le> x\" and \"s' \\<le> s\""], ["proof (state)\nthis:\n  cond2 a b (x # xs) s\n  x' \\<le> x\n  s' \\<le> s\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "moreover"], ["proof (state)\nthis:\n  cond2 a b (x # xs) s\n  x' \\<le> x\n  s' \\<le> s\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "have \"map (max_x_impl' a b (x # xs)) [0..<length a] \\<le>\\<^sub>v map (max_x_impl' a b (x' # xs)) [0..<length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (max_x_impl' a b (x # xs)) [0..<length a]\n    \\<le>\\<^sub>v map (max_x_impl' a b (x' # xs)) [0..<length a]", "using le_imp_max_x_impl'_ge [of \"x' # xs\" \"x # xs\"] and \\<open>x' \\<le> x\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>x' # xs \\<le>\\<^sub>v x # xs; ?i < length ?a\\<rbrakk>\n  \\<Longrightarrow> max_x_impl' ?a ?b (x # xs) ?i\n                    \\<le> max_x_impl' ?a ?b (x' # xs) ?i\n  x' \\<le> x\n\ngoal (1 subgoal):\n 1. map (max_x_impl' a b (x # xs)) [0..<length a]\n    \\<le>\\<^sub>v map (max_x_impl' a b (x' # xs)) [0..<length a]", "by (auto simp: le_Cons less_eq_def All_less_Suc2)"], ["proof (state)\nthis:\n  map (max_x_impl' a b (x # xs)) [0..<length a]\n  \\<le>\\<^sub>v map (max_x_impl' a b (x' # xs)) [0..<length a]\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "ultimately"], ["proof (chain)\npicking this:\n  cond2 a b (x # xs) s\n  x' \\<le> x\n  s' \\<le> s\n  map (max_x_impl' a b (x # xs)) [0..<length a]\n  \\<le>\\<^sub>v map (max_x_impl' a b (x' # xs)) [0..<length a]", "have \"cond2 a b (x' # xs) s'\""], ["proof (prove)\nusing this:\n  cond2 a b (x # xs) s\n  x' \\<le> x\n  s' \\<le> s\n  map (max_x_impl' a b (x # xs)) [0..<length a]\n  \\<le>\\<^sub>v map (max_x_impl' a b (x' # xs)) [0..<length a]\n\ngoal (1 subgoal):\n 1. cond2 a b (x' # xs) s'", "by (auto simp: le_Cons) (metis dotprod_le_right le_trans length_map map_nth)"], ["proof (state)\nthis:\n  cond2 a b (x' # xs) s'\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cond2 a b (?x2 # ?xs2) ?s2; ?x'2 \\<le> ?x2;\n   ?s'2 \\<le> ?s2\\<rbrakk>\n  \\<Longrightarrow> cond2 a b (?x'2 # ?xs2) ?s'2\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "note 2 = this"], ["proof (state)\nthis:\n  \\<lbrakk>cond2 a b (?x2 # ?xs2) ?s2; ?x'2 \\<le> ?x2;\n   ?s'2 \\<le> ?s2\\<rbrakk>\n  \\<Longrightarrow> cond2 a b (?x'2 # ?xs2) ?s'2\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "interpret c2: bounded_gen_check \"cond2 a b\" \"Max (set a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_gen_check (cond2 a b) (Max (set a))", "by (standard) fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "fix b ys x xs s"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "assume \"ys \\<in> fst ` set (c2.gen_check b)\" and \"Max (set b) < x\""], ["proof (state)\nthis:\n  ys \\<in> fst ` set (c2.gen_check b)\n  Max (set b) < x\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "then"], ["proof (chain)\npicking this:\n  ys \\<in> fst ` set (c2.gen_check b)\n  Max (set b) < x", "have \"cond1 b ys (x # xs) s = False\""], ["proof (prove)\nusing this:\n  ys \\<in> fst ` set (c2.gen_check b)\n  Max (set b) < x\n\ngoal (1 subgoal):\n 1. cond1 b ys (x # xs) s = False", "by (auto dest!: c2.in_gen_check) (metis leD less_le_trans maxne0_impl maxne0_le_Max)"], ["proof (state)\nthis:\n  cond1 b ys (x # xs) s = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   Max (set ?ba2) < ?x2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2 = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "note 3 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   Max (set ?ba2) < ?x2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2 = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   Max (set ?ba2) < ?x2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2 = False\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "fix b ys x x' xs s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "assume \"ys \\<in> fst ` set (c2.gen_check b)\" and \"cond1 b ys (x # xs) s\"\n      and \"x' \\<le> x\" and \"s' \\<le> s\""], ["proof (state)\nthis:\n  ys \\<in> fst ` set (c2.gen_check b)\n  cond1 b ys (x # xs) s\n  x' \\<le> x\n  s' \\<le> s\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "then"], ["proof (chain)\npicking this:\n  ys \\<in> fst ` set (c2.gen_check b)\n  cond1 b ys (x # xs) s\n  x' \\<le> x\n  s' \\<le> s", "have \"cond1 b ys (x' # xs) s'\""], ["proof (prove)\nusing this:\n  ys \\<in> fst ` set (c2.gen_check b)\n  cond1 b ys (x # xs) s\n  x' \\<le> x\n  s' \\<le> s\n\ngoal (1 subgoal):\n 1. cond1 b ys (x' # xs) s'", "by auto"], ["proof (state)\nthis:\n  cond1 b ys (x' # xs) s'\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2; ?x'2 \\<le> ?x2; ?s'2 \\<le> ?s2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x'2 # ?xs2) ?s'2\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "note 4 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2; ?x'2 \\<le> ?x2; ?s'2 \\<le> ?s2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x'2 # ?xs2) ?s'2\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "show \"bounded_generate_check (cond2 a b) (Max (set a)) cond1 (\\<lambda>b. Max (set b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "using 1 and 2 and 3 and 4"], ["proof (prove)\nusing this:\n  Max (set a) < ?x2 \\<Longrightarrow> cond2 a b (?x2 # ?xs2) ?s2 = False\n  \\<lbrakk>cond2 a b (?x2 # ?xs2) ?s2; ?x'2 \\<le> ?x2;\n   ?s'2 \\<le> ?s2\\<rbrakk>\n  \\<Longrightarrow> cond2 a b (?x'2 # ?xs2) ?s'2\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   Max (set ?ba2) < ?x2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2 = False\n  \\<lbrakk>?ys2 \\<in> fst ` set (c2.gen_check ?ba2);\n   cond1 ?ba2 ?ys2 (?x2 # ?xs2) ?s2; ?x'2 \\<le> ?x2; ?s'2 \\<le> ?s2\\<rbrakk>\n  \\<Longrightarrow> cond1 ?ba2 ?ys2 (?x'2 # ?xs2) ?s'2\n\ngoal (1 subgoal):\n 1. bounded_generate_check (cond2 a b) (Max (set a)) cond1\n     (\\<lambda>b. Max (set b))", "by (unfold_locales) metis+"], ["proof (state)\nthis:\n  bounded_generate_check (cond2 a b) (Max (set a)) cond1\n   (\\<lambda>b. Max (set b))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"post_cond a b = (\\<lambda>(x, y). static_bounds a b x y \\<and> a \\<bullet> x = b \\<bullet> y \\<and> boundr_impl a b x y)\""], ["", "definition \"fast_filter a b =\n  filter (post_cond a b) (map (\\<lambda>(x, y). (fst x, fst y)) (tl (c12_generate_check a b a b)))\""], ["", "lemma cond1_cond2_zeroes:\n  shows \"suffs (cond1 b (zeroes (length b))) a (zeroes (length a), 0)\"\n    and \"suffs (cond2 a b) b (zeroes (length b), 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffs (cond1 b (zeroes (length b))) a (zeroes (length a), 0) &&&\n    suffs (cond2 a b) b (zeroes (length b), 0)", "apply (auto simp: suffs.simps cond_cons_def split: list.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length a - i) = x21 # x22; i \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> drop i a \\<bullet> (x21 # x22) = 0\n 2. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length a - i) = x21 # x22; i \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> maxne0_impl (zeroes (length b)) b\n 3. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> Max (set a)\n 4. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> drop i b \\<bullet> (x21 # x22)\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b (x21 # x22))\n                                [0..<length a]", "apply (metis dotprod_0_right length_drop)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length a - i) = x21 # x22; i \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> maxne0_impl (zeroes (length b)) b\n 2. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> Max (set a)\n 3. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> drop i b \\<bullet> (x21 # x22)\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b (x21 # x22))\n                                [0..<length a]", "apply (metis Cons_replicate_eq Nat.le0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> Max (set a)\n 2. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> drop i b \\<bullet> (x21 # x22)\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b (x21 # x22))\n                                [0..<length a]", "apply (metis Cons_replicate_eq Nat.le0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>zeroes (length b - i) = x21 # x22; i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> drop i b \\<bullet> (x21 # x22)\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b (x21 # x22))\n                                [0..<length a]", "by (metis Nat.le0 dotprod_0_right length_drop)"], ["", "lemma suffs_cond1I:\n  assumes \"\\<forall>y\\<in>set aa. y \\<le> maxne0_impl aaa b\"\n    and \"length aa = length a\"\n    and \"a \\<bullet> aa = b \\<bullet> aaa\"\n  shows \"suffs (cond1 b aaa) a (aa, b \\<bullet> aaa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffs (cond1 b aaa) a (aa, b \\<bullet> aaa)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set aa. y \\<le> maxne0_impl aaa b\n  length aa = length a\n  a \\<bullet> aa = b \\<bullet> aaa\n\ngoal (1 subgoal):\n 1. suffs (cond1 b aaa) a (aa, b \\<bullet> aaa)", "apply (auto simp: suffs.simps cond_cons_def split: list.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>\\<forall>y\\<in>set aa. y \\<le> maxne0_impl aaa b;\n        length aa = length a; a \\<bullet> aa = b \\<bullet> aaa;\n        drop i aa = x21 # x22; i \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> drop i a \\<bullet> (x21 # x22)\n                         \\<le> b \\<bullet> aaa\n 2. \\<And>i x21 x22.\n       \\<lbrakk>\\<forall>y\\<in>set aa. y \\<le> maxne0_impl aaa b;\n        length aa = length a; a \\<bullet> aa = b \\<bullet> aaa;\n        drop i aa = x21 # x22; i \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> maxne0_impl aaa b", "apply (metis dotprod_le_drop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>\\<forall>y\\<in>set aa. y \\<le> maxne0_impl aaa b;\n        length aa = length a; a \\<bullet> aa = b \\<bullet> aaa;\n        drop i aa = x21 # x22; i \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> maxne0_impl aaa b", "by (metis in_set_dropD list.set_intros(1))"], ["", "lemma suffs_cond2_conv:\n  assumes \"length ys = length b\"\n  shows \"suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<longleftrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys\"\n    (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) =\n    ((\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n     subdprodr_impl a b ys)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "assume *: ?L"], ["proof (state)\nthis:\n  suffs (cond2 a b) b (ys, b \\<bullet> ys)\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "then"], ["proof (chain)\npicking this:\n  suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<forall>y\\<in>set ys. y \\<le> Max (set a)\""], ["proof (prove)\nusing this:\n  suffs (cond2 a b) b (ys, b \\<bullet> ys)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set ys. y \\<le> Max (set a)", "apply (auto simp: suffs.simps cond_cons_def in_set_conv_nth split: list.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>length ys = length b;\n        \\<forall>i\\<le>length b.\n           \\<forall>x21 x22.\n              drop i ys = x21 # x22 \\<longrightarrow>\n              x21 \\<le> Max (set a) \\<and>\n              drop i b \\<bullet> (x21 # x22)\n              \\<le> a \\<bullet>\n                    map (max_x_impl' a b (x21 # x22)) [0..<length a];\n        i < length b\\<rbrakk>\n       \\<Longrightarrow> ys ! i \\<le> Max (set a)", "apply (auto simp: hd_drop_conv_nth [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>length ys = length b;\n        \\<forall>i\\<le>length b.\n           \\<forall>x21 x22.\n              drop i ys = x21 # x22 \\<longrightarrow>\n              x21 \\<le> Max (set a) \\<and>\n              drop i b \\<bullet> (x21 # x22)\n              \\<le> a \\<bullet>\n                    map (max_x_impl' a b (x21 # x22)) [0..<length a];\n        i < length b\\<rbrakk>\n       \\<Longrightarrow> hd (drop i ys) \\<le> Max (set a)", "apply (case_tac \"drop i ys\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>length ys = length b;\n        \\<forall>i\\<le>length b.\n           \\<forall>x21 x22.\n              drop i ys = x21 # x22 \\<longrightarrow>\n              x21 \\<le> Max (set a) \\<and>\n              drop i b \\<bullet> (x21 # x22)\n              \\<le> a \\<bullet>\n                    map (max_x_impl' a b (x21 # x22)) [0..<length a];\n        i < length b; drop i ys = []\\<rbrakk>\n       \\<Longrightarrow> hd (drop i ys) \\<le> Max (set a)\n 2. \\<And>i aa list.\n       \\<lbrakk>length ys = length b;\n        \\<forall>i\\<le>length b.\n           \\<forall>x21 x22.\n              drop i ys = x21 # x22 \\<longrightarrow>\n              x21 \\<le> Max (set a) \\<and>\n              drop i b \\<bullet> (x21 # x22)\n              \\<le> a \\<bullet>\n                    map (max_x_impl' a b (x21 # x22)) [0..<length a];\n        i < length b; drop i ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> hd (drop i ys) \\<le> Max (set a)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i aa list.\n       \\<lbrakk>length ys = length b;\n        \\<forall>i\\<le>length b.\n           \\<forall>x21 x22.\n              drop i ys = x21 # x22 \\<longrightarrow>\n              x21 \\<le> Max (set a) \\<and>\n              drop i b \\<bullet> (x21 # x22)\n              \\<le> a \\<bullet>\n                    map (max_x_impl' a b (x21 # x22)) [0..<length a];\n        i < length b; drop i ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> aa \\<le> Max (set a)", "using less_or_eq_imp_le"], ["proof (prove)\nusing this:\n  ?m < ?n \\<or> ?m = ?n \\<Longrightarrow> ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<And>i aa list.\n       \\<lbrakk>length ys = length b;\n        \\<forall>i\\<le>length b.\n           \\<forall>x21 x22.\n              drop i ys = x21 # x22 \\<longrightarrow>\n              x21 \\<le> Max (set a) \\<and>\n              drop i b \\<bullet> (x21 # x22)\n              \\<le> a \\<bullet>\n                    map (max_x_impl' a b (x21 # x22)) [0..<length a];\n        i < length b; drop i ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> aa \\<le> Max (set a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "moreover"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "{"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "fix l"], ["proof (state)\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "assume l: \"l \\<le> length b\""], ["proof (state)\nthis:\n  l \\<le> length b\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"take l b \\<bullet> take l ys \\<le> b \\<bullet> ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l ys \\<le> b \\<bullet> ys", "using l and assms"], ["proof (prove)\nusing this:\n  l \\<le> length b\n  length ys = length b\n\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l ys \\<le> b \\<bullet> ys", "by (simp add: dotprod_le_take)"], ["proof (state)\nthis:\n  take l b \\<bullet> take l ys \\<le> b \\<bullet> ys\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "also"], ["proof (state)\nthis:\n  take l b \\<bullet> take l ys \\<le> b \\<bullet> ys\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<dots> \\<le> a \\<bullet> map (max_x_impl' a b ys) [0 ..< length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl' a b ys) [0..<length a]", "using *"], ["proof (prove)\nusing this:\n  suffs (cond2 a b) b (ys, b \\<bullet> ys)\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl' a b ys) [0..<length a]", "apply (auto simp: suffs.simps cond_cons_def split: list.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys = length b;\n     \\<forall>i\\<le>length b.\n        \\<forall>x21 x22.\n           drop i ys = x21 # x22 \\<longrightarrow>\n           x21 \\<le> Max (set a) \\<and>\n           drop i b \\<bullet> (x21 # x22)\n           \\<le> a \\<bullet>\n                 map (max_x_impl' a b (x21 # x22)) [0..<length a]\\<rbrakk>\n    \\<Longrightarrow> b \\<bullet> ys\n                      \\<le> a \\<bullet>\n                            map (max_x_impl' a b ys) [0..<length a]", "apply (drule_tac x = \"0\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys = length b;\n     0 \\<le> length b \\<longrightarrow>\n     (\\<forall>x21 x22.\n         drop 0 ys = x21 # x22 \\<longrightarrow>\n         x21 \\<le> Max (set a) \\<and>\n         drop 0 b \\<bullet> (x21 # x22)\n         \\<le> a \\<bullet>\n               map (max_x_impl' a b (x21 # x22)) [0..<length a])\\<rbrakk>\n    \\<Longrightarrow> b \\<bullet> ys\n                      \\<le> a \\<bullet>\n                            map (max_x_impl' a b ys) [0..<length a]", "apply (cases ys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length b;\n     0 \\<le> length b \\<longrightarrow>\n     (\\<forall>x21 x22.\n         drop 0 ys = x21 # x22 \\<longrightarrow>\n         x21 \\<le> Max (set a) \\<and>\n         drop 0 b \\<bullet> (x21 # x22)\n         \\<le> a \\<bullet>\n               map (max_x_impl' a b (x21 # x22)) [0..<length a]);\n     ys = []\\<rbrakk>\n    \\<Longrightarrow> b \\<bullet> ys\n                      \\<le> a \\<bullet>\n                            map (max_x_impl' a b ys) [0..<length a]\n 2. \\<And>aa list.\n       \\<lbrakk>length ys = length b;\n        0 \\<le> length b \\<longrightarrow>\n        (\\<forall>x21 x22.\n            drop 0 ys = x21 # x22 \\<longrightarrow>\n            x21 \\<le> Max (set a) \\<and>\n            drop 0 b \\<bullet> (x21 # x22)\n            \\<le> a \\<bullet>\n                  map (max_x_impl' a b (x21 # x22)) [0..<length a]);\n        ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> b \\<bullet> ys\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b ys) [0..<length a]", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "also"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<dots> = a \\<bullet> map (max_x_impl a b ys) [0 ..< length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl' a b ys) [0..<length a] =\n    a \\<bullet> map (max_x_impl a b ys) [0..<length a]", "using max_x_impl'_conv [OF _ assms, of _ a]"], ["proof (prove)\nusing this:\n  ?i < length a \\<Longrightarrow>\n  max_x_impl' a b ys ?i = max_x_impl a b ys ?i\n\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl' a b ys) [0..<length a] =\n    a \\<bullet> map (max_x_impl a b ys) [0..<length a]", "by (metis (mono_tags, lifting) atLeastLessThan_iff map_eq_conv set_upt)"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x_impl' a b ys) [0..<length a] =\n  a \\<bullet> map (max_x_impl a b ys) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "also"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x_impl' a b ys) [0..<length a] =\n  a \\<bullet> map (max_x_impl a b ys) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<dots> \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0 ..< length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl a b ys) [0..<length a]\n    \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0..<length a]", "unfolding max_x_impl"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> map (hlde_ops.max_x a b ys) [0..<length a]\n    \\<le> a \\<bullet> map (hlde_ops.max_x a b (take l ys)) [0..<length a]", "using hlde_ops.max_x_le_take [OF eq_imp_le, OF assms, of a]"], ["proof (prove)\nusing this:\n  hlde_ops.max_x a b ys ?i \\<le> hlde_ops.max_x a b (take ?l ys) ?i\n\ngoal (1 subgoal):\n 1. a \\<bullet> map (hlde_ops.max_x a b ys) [0..<length a]\n    \\<le> a \\<bullet> map (hlde_ops.max_x a b (take l ys)) [0..<length a]", "by (intro dotprod_le_right) (auto simp: less_eq_def)"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x_impl a b ys) [0..<length a]\n  \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "finally"], ["proof (chain)\npicking this:\n  take l b \\<bullet> take l ys\n  \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0..<length a]", "have \"take l b \\<bullet> take l ys \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0 ..< length a]\""], ["proof (prove)\nusing this:\n  take l b \\<bullet> take l ys\n  \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. take l b \\<bullet> take l ys\n    \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0..<length a]", "."], ["proof (state)\nthis:\n  take l b \\<bullet> take l ys\n  \\<le> a \\<bullet> map (max_x_impl a b (take l ys)) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "}"], ["proof (state)\nthis:\n  ?l2 \\<le> length b \\<Longrightarrow>\n  take ?l2 b \\<bullet> take ?l2 ys\n  \\<le> a \\<bullet> map (max_x_impl a b (take ?l2 ys)) [0..<length a]\n\ngoal (2 subgoals):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys) \\<Longrightarrow>\n    (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys\n 2. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  ?l2 \\<le> length b \\<Longrightarrow>\n  take ?l2 b \\<bullet> take ?l2 ys\n  \\<le> a \\<bullet> map (max_x_impl a b (take ?l2 ys)) [0..<length a]", "show \"?R\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  ?l2 \\<le> length b \\<Longrightarrow>\n  take ?l2 b \\<bullet> take ?l2 ys\n  \\<le> a \\<bullet> map (max_x_impl a b (take ?l2 ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys", "by (auto simp: subdprodr_impl_def)"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "assume *: ?R"], ["proof (state)\nthis:\n  (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "then"], ["proof (chain)\npicking this:\n  (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys", "have \"\\<forall>y\\<in>set ys. y \\<le> Max (set a)\" and \"subdprodr_impl a b ys\""], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set ys. y \\<le> Max (set a) &&& subdprodr_impl a b ys", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  subdprodr_impl a b ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "moreover"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  subdprodr_impl a b ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "{"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  subdprodr_impl a b ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "assume i: \"i \\<le> length b\""], ["proof (state)\nthis:\n  i \\<le> length b\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"drop i b \\<bullet> drop i ys \\<le> b \\<bullet> ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop i b \\<bullet> drop i ys \\<le> b \\<bullet> ys", "using i and assms"], ["proof (prove)\nusing this:\n  i \\<le> length b\n  length ys = length b\n\ngoal (1 subgoal):\n 1. drop i b \\<bullet> drop i ys \\<le> b \\<bullet> ys", "by (simp add: dotprod_le_drop)"], ["proof (state)\nthis:\n  drop i b \\<bullet> drop i ys \\<le> b \\<bullet> ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "also"], ["proof (state)\nthis:\n  drop i b \\<bullet> drop i ys \\<le> b \\<bullet> ys\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<dots> \\<le> a \\<bullet> map (max_x_impl a b ys) [0 ..< length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl a b ys) [0..<length a]", "using * and assms"], ["proof (prove)\nusing this:\n  (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and> subdprodr_impl a b ys\n  length ys = length b\n\ngoal (1 subgoal):\n 1. b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl a b ys) [0..<length a]", "by (auto simp: subdprodr_impl_def)"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl a b ys) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "also"], ["proof (state)\nthis:\n  b \\<bullet> ys \\<le> a \\<bullet> map (max_x_impl a b ys) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<dots> = a \\<bullet> map (max_x_impl' a b ys) [0 ..< length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl a b ys) [0..<length a] =\n    a \\<bullet> map (max_x_impl' a b ys) [0..<length a]", "using max_x_impl'_conv [OF _ assms, of _ a]"], ["proof (prove)\nusing this:\n  ?i < length a \\<Longrightarrow>\n  max_x_impl' a b ys ?i = max_x_impl a b ys ?i\n\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl a b ys) [0..<length a] =\n    a \\<bullet> map (max_x_impl' a b ys) [0..<length a]", "by (metis (mono_tags, lifting) atLeastLessThan_iff map_eq_conv set_upt)"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x_impl a b ys) [0..<length a] =\n  a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "also"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x_impl a b ys) [0..<length a] =\n  a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "have \"\\<dots> \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0 ..< length a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n    \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]", "using hlde_ops.max_x'_le_drop [OF eq_imp_le, OF assms, of a]"], ["proof (prove)\nusing this:\n  hlde_ops.max_x' a b ys ?i \\<le> hlde_ops.max_x' a b (drop ?l ys) ?i\n\ngoal (1 subgoal):\n 1. a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n    \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]", "by (intro dotprod_le_right) (auto simp: less_eq_def max_x_impl' i assms)"], ["proof (state)\nthis:\n  a \\<bullet> map (max_x_impl' a b ys) [0..<length a]\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "finally"], ["proof (chain)\npicking this:\n  drop i b \\<bullet> drop i ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]", "have \"drop i b \\<bullet> drop i ys \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0 ..< length a]\""], ["proof (prove)\nusing this:\n  drop i b \\<bullet> drop i ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. drop i b \\<bullet> drop i ys\n    \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]", "."], ["proof (state)\nthis:\n  drop i b \\<bullet> drop i ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop i ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "}"], ["proof (state)\nthis:\n  ?i2 \\<le> length b \\<Longrightarrow>\n  drop ?i2 b \\<bullet> drop ?i2 ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop ?i2 ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set ys. y \\<le> Max (set a)) \\<and>\n    subdprodr_impl a b ys \\<Longrightarrow>\n    suffs (cond2 a b) b (ys, b \\<bullet> ys)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  subdprodr_impl a b ys\n  ?i2 \\<le> length b \\<Longrightarrow>\n  drop ?i2 b \\<bullet> drop ?i2 ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop ?i2 ys)) [0..<length a]", "show \"?L\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  subdprodr_impl a b ys\n  ?i2 \\<le> length b \\<Longrightarrow>\n  drop ?i2 b \\<bullet> drop ?i2 ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop ?i2 ys)) [0..<length a]\n\ngoal (1 subgoal):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set ys. y \\<le> Max (set a)\n  subdprodr_impl a b ys\n  ?i2 \\<le> length b \\<Longrightarrow>\n  drop ?i2 b \\<bullet> drop ?i2 ys\n  \\<le> a \\<bullet> map (max_x_impl' a b (drop ?i2 ys)) [0..<length a]\n  length ys = length b\n\ngoal (1 subgoal):\n 1. suffs (cond2 a b) b (ys, b \\<bullet> ys)", "apply (auto simp: suffs.simps cond_cons_def split: list.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>\\<forall>y\\<in>set ys. y \\<le> Max (set a);\n        subdprodr_impl a b ys;\n        \\<And>i.\n           i \\<le> length b \\<Longrightarrow>\n           drop i b \\<bullet> drop i ys\n           \\<le> a \\<bullet>\n                 map (max_x_impl' a b (drop i ys)) [0..<length a];\n        length ys = length b; drop i ys = x21 # x22;\n        i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> x21 \\<le> Max (set a)\n 2. \\<And>i x21 x22.\n       \\<lbrakk>\\<forall>y\\<in>set ys. y \\<le> Max (set a);\n        subdprodr_impl a b ys;\n        \\<And>i.\n           i \\<le> length b \\<Longrightarrow>\n           drop i b \\<bullet> drop i ys\n           \\<le> a \\<bullet>\n                 map (max_x_impl' a b (drop i ys)) [0..<length a];\n        length ys = length b; drop i ys = x21 # x22;\n        i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> drop i b \\<bullet> (x21 # x22)\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b (x21 # x22))\n                                [0..<length a]", "apply (metis in_set_dropD list.set_intros(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x21 x22.\n       \\<lbrakk>\\<forall>y\\<in>set ys. y \\<le> Max (set a);\n        subdprodr_impl a b ys;\n        \\<And>i.\n           i \\<le> length b \\<Longrightarrow>\n           drop i b \\<bullet> drop i ys\n           \\<le> a \\<bullet>\n                 map (max_x_impl' a b (drop i ys)) [0..<length a];\n        length ys = length b; drop i ys = x21 # x22;\n        i \\<le> length b\\<rbrakk>\n       \\<Longrightarrow> drop i b \\<bullet> (x21 # x22)\n                         \\<le> a \\<bullet>\n                               map (max_x_impl' a b (x21 # x22))\n                                [0..<length a]", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  suffs (cond2 a b) b (ys, b \\<bullet> ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma suffs_cond2I:\n  assumes \"\\<forall>y\\<in>set aaa. y \\<le> Max (set a)\"\n    and \"length aaa = length b\"\n    and \"subdprodr_impl a b aaa\"\n  shows \"suffs (cond2 a b) b (aaa, b \\<bullet> aaa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffs (cond2 a b) b (aaa, b \\<bullet> aaa)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set aaa. y \\<le> Max (set a)\n  length aaa = length b\n  subdprodr_impl a b aaa\n\ngoal (1 subgoal):\n 1. suffs (cond2 a b) b (aaa, b \\<bullet> aaa)", "by (subst suffs_cond2_conv) simp_all"], ["", "lemma check_cond_conv:\n  assumes \"(x, y) \\<in> set (alls2 (Max (set b)) (Max (set a)) a b)\"\n  shows \"check_cond a b (fst x, fst y) \\<longleftrightarrow>\n    static_bounds a b (fst x) (fst y) \\<and> a \\<bullet> fst x = b \\<bullet> fst y \\<and> boundr_impl a b (fst x) (fst y) \\<and>\n    suffs (cond1 b (fst y)) a x \\<and>\n    suffs (cond2 a b) b y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_cond a b (fst x, fst y) =\n    (static_bounds a b (fst x) (fst y) \\<and>\n     a \\<bullet> fst x = b \\<bullet> fst y \\<and>\n     boundr_impl a b (fst x) (fst y) \\<and>\n     suffs (cond1 b (fst y)) a x \\<and> suffs (cond2 a b) b y)", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<in> set (alls2 (Max (set b)) (Max (set a)) a b)\n\ngoal (1 subgoal):\n 1. check_cond a b (fst x, fst y) =\n    (static_bounds a b (fst x) (fst y) \\<and>\n     a \\<bullet> fst x = b \\<bullet> fst y \\<and>\n     boundr_impl a b (fst x) (fst y) \\<and>\n     suffs (cond1 b (fst y)) a x \\<and> suffs (cond2 a b) b y)", "apply (cases x; cases y; auto simp: static_bounds_def check_cond_def set_alls2 split: list.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa aaa.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>j<length b. aaa ! j \\<le> Max (set a);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        subdprodl_impl a b aa aaa; subdprodr_impl a b aaa\\<rbrakk>\n       \\<Longrightarrow> suffs (cond1 b aaa) a (aa, b \\<bullet> aaa)\n 2. \\<And>aa aaa.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>j<length b. aaa ! j \\<le> Max (set a);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        subdprodl_impl a b aa aaa; subdprodr_impl a b aaa\\<rbrakk>\n       \\<Longrightarrow> suffs (cond2 a b) b (aaa, b \\<bullet> aaa)\n 3. \\<And>aa aaa.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>j<length b. aaa ! j \\<le> Max (set a);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        suffs (cond1 b aaa) a (aa, b \\<bullet> aaa);\n        suffs (cond2 a b) b (aaa, b \\<bullet> aaa)\\<rbrakk>\n       \\<Longrightarrow> subdprodl_impl a b aa aaa\n 4. \\<And>aa aaa.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>j<length b. aaa ! j \\<le> Max (set a);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        suffs (cond1 b aaa) a (aa, b \\<bullet> aaa);\n        suffs (cond2 a b) b (aaa, b \\<bullet> aaa)\\<rbrakk>\n       \\<Longrightarrow> subdprodr_impl a b aaa", "apply (auto intro: suffs_cond1I suffs_cond2I simp: subdprodl_impl_def suffs_cond2_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa aaa ya.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>j<length b. aaa ! j \\<le> Max (set a);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        \\<forall>k\\<le>length a.\n           take k a \\<bullet> take k aa \\<le> b \\<bullet> aaa;\n        subdprodr_impl a b aaa; ya \\<in> set aaa\\<rbrakk>\n       \\<Longrightarrow> ya \\<le> Max (set a)\n 2. \\<And>aa aaa k.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        suffs (cond1 b aaa) a (aa, b \\<bullet> aaa);\n        \\<forall>y\\<in>set aaa. y \\<le> Max (set a); subdprodr_impl a b aaa;\n        k \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> take k a \\<bullet> take k aa \\<le> b \\<bullet> aaa", "apply (metis in_set_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa aaa k.\n       \\<lbrakk>x = (aa, b \\<bullet> aaa); y = (aaa, b \\<bullet> aaa);\n        length aa = length a; length aaa = length b;\n        \\<forall>i<length a. aa ! i \\<le> Max (set b);\n        \\<forall>x\\<in>set aa. x \\<le> maxne0_impl aaa b;\n        \\<forall>y\\<in>set aaa. y \\<le> maxne0_impl aa a;\n        a \\<bullet> aa = b \\<bullet> aaa; boundr_impl a b aa aaa;\n        suffs (cond1 b aaa) a (aa, b \\<bullet> aaa);\n        \\<forall>y\\<in>set aaa. y \\<le> Max (set a); subdprodr_impl a b aaa;\n        k \\<le> length a\\<rbrakk>\n       \\<Longrightarrow> take k a \\<bullet> take k aa \\<le> b \\<bullet> aaa", "by (metis dotprod_le_take)"], ["", "lemma tune:\n  \"check' a b (generate' (Max (set b)) (Max (set a)) a b) = fast_filter a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check' a b (generate' (Max (set b)) (Max (set a)) a b) = fast_filter a b", "using cond1_cond2_zeroes"], ["proof (prove)\nusing this:\n  suffs (cond1 ?b (zeroes (length ?b))) ?a (zeroes (length ?a), 0)\n  suffs (cond2 ?a ?b) ?b (zeroes (length ?b), 0)\n\ngoal (1 subgoal):\n 1. check' a b (generate' (Max (set b)) (Max (set a)) a b) = fast_filter a b", "by (auto simp: c12.tl_generate_check_filter check'_def generate'_def map_tl [symmetric]\n      filter_map post_cond_def fast_filter_def\n      intro!: map_cong filter_cong dest: list.set_sel(2) [THEN check_cond_conv, OF alls2_ne])"], ["", "locale bounded_incs =\n  fixes cond :: \"nat list \\<Rightarrow> nat \\<Rightarrow> bool\"\n    and B :: nat\n  assumes bound: \"\\<And>x xs s. x > B \\<Longrightarrow> cond (x # xs) s = False\"\nbegin"], ["", "function incs :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat list \\<times> nat) \\<Rightarrow> (nat list \\<times> nat) list\"\n  where\n    \"incs a x (xs, s) =\n      (let t = s + a * x in\n      if cond (x # xs) t then (x # xs, t) # incs a (Suc x) (xs, s) else [])\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>a xa xs s.\n           x = (a, xa, xs, s) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>a x xs s aa xa xsa sa.\n       (a, x, xs, s) = (aa, xa, xsa, sa) \\<Longrightarrow>\n       (let t = s + a * x\n        in if cond (x # xs) t then (x # xs, t) # incs_sumC (a, Suc x, xs, s)\n           else []) =\n       (let t = sa + aa * xa\n        in if cond (xa # xsa) t\n           then (xa # xsa, t) # incs_sumC (aa, Suc xa, xsa, sa) else [])", "by (auto)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All incs_dom", "by (relation \"measure (\\<lambda>(a, x, xs, s). B + 1 - x)\", rule wf_measure, case_tac \"x > B\")\n    (use bound in auto)"], ["", "declare incs.simps [simp del]"], ["", "lemma in_incs:\n  assumes \"(ys, t) \\<in> set (incs a x (xs, s))\"\n  shows \"length ys = length xs + 1 \\<and> t = s + hd ys * a \\<and> tl ys = xs \\<and> cond ys t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs + 1 \\<and>\n    t = s + hd ys * a \\<and> tl ys = xs \\<and> cond ys t", "using assms"], ["proof (prove)\nusing this:\n  (ys, t) \\<in> set (incs a x (xs, s))\n\ngoal (1 subgoal):\n 1. length ys = length xs + 1 \\<and>\n    t = s + hd ys * a \\<and> tl ys = xs \\<and> cond ys t", "by (induct a x \"(xs, s)\" arbitrary: ys t rule: incs.induct)\n    (subst (asm) (2) incs.simps, auto simp: Let_def)"], ["", "lemma incs_Nil [simp]: \"x > B \\<Longrightarrow> incs a x (xs, s) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B < x \\<Longrightarrow> incs a x (xs, s) = []", "by (induct a x \"(xs, s)\" rule: incs.induct) (auto simp: Let_def incs.simps bound)"], ["", "end"], ["", "global_interpretation incs1:\n  bounded_incs \"(cond1 b ys)\" \"(Max (set b))\"\n  for b ys :: \"nat list\"\n  defines c1_incs = incs1.incs"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_incs (cond1 b ys) (Max (set b))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs s.\n       Max (set b) < x \\<Longrightarrow> cond1 b ys (x # xs) s = False", "fix x xs s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs s.\n       Max (set b) < x \\<Longrightarrow> cond1 b ys (x # xs) s = False", "assume \"Max (set b) < x\""], ["proof (state)\nthis:\n  Max (set b) < x\n\ngoal (1 subgoal):\n 1. \\<And>x xs s.\n       Max (set b) < x \\<Longrightarrow> cond1 b ys (x # xs) s = False", "then"], ["proof (chain)\npicking this:\n  Max (set b) < x", "show \"cond1 b ys (x # xs) s = False\""], ["proof (prove)\nusing this:\n  Max (set b) < x\n\ngoal (1 subgoal):\n 1. cond1 b ys (x # xs) s = False", "using maxne0_impl_le [of ys b]"], ["proof (prove)\nusing this:\n  Max (set b) < x\n  maxne0_impl ys b \\<le> Max (set b)\n\ngoal (1 subgoal):\n 1. cond1 b ys (x # xs) s = False", "by auto"], ["proof (state)\nthis:\n  cond1 b ys (x # xs) s = False\n\ngoal:\nNo subgoals!", "qed"], ["", "fun c1_gen_check\n  where\n    \"c1_gen_check b ys [] = [([], 0)]\"\n  | \"c1_gen_check b ys (a # as) = concat (map (c1_incs b ys a 0) (c1_gen_check b ys as))\""], ["", "definition \"generate_check a b = [(xs, ys). ys \\<leftarrow> c2_gen_check a b b, xs \\<leftarrow> c1_gen_check b (fst ys) a]\""], ["", "lemma c1_gen_check_conv:\n  assumes \"(ys, s) \\<in> set (c2_gen_check a b b)\"\n  shows \"c1_gen_check b ys a = bounded_gen_check.gen_check (cond1 b ys) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c1_gen_check b ys a = bounded_gen_check.gen_check (cond1 b ys) a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c1_gen_check b ys a = bounded_gen_check.gen_check (cond1 b ys) a", "interpret c1: bounded_gen_check \"(cond1 b ys)\" \"Max (set b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_gen_check (cond1 b ys) (Max (set b))", "by (unfold_locales) (auto, meson leD less_le_trans maxne0_impl_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. c1_gen_check b ys a = c1.gen_check a", "have eq: \"c1_incs b ys a1 0 (a, ba) = c1.incs a1 0 (a, ba)\" if \"(a, ba) \\<in> set (c1.gen_check a2)\"\n    for a a1 a2 ba"], ["proof (prove)\ngoal (1 subgoal):\n 1. c1_incs b ys a1 0 (a, ba) = c1.incs a1 0 (a, ba)", "using that"], ["proof (prove)\nusing this:\n  (a, ba) \\<in> set (c1.gen_check a2)\n\ngoal (1 subgoal):\n 1. c1_incs b ys a1 0 (a, ba) = c1.incs a1 0 (a, ba)", "by (induct rule: c1.incs.induct)\n      (auto dest!: c1.in_gen_check simp: Let_def incs1.incs.simps c1.incs.simps)"], ["proof (state)\nthis:\n  (?a, ?ba) \\<in> set (c1.gen_check ?a2.0) \\<Longrightarrow>\n  c1_incs b ys ?a1.0 0 (?a, ?ba) = c1.incs ?a1.0 0 (?a, ?ba)\n\ngoal (1 subgoal):\n 1. c1_gen_check b ys a = c1.gen_check a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. c1_gen_check b ys a = c1.gen_check a", "by (induct a) (auto intro!: arg_cong [of _ _ concat] dest: eq)"], ["proof (state)\nthis:\n  c1_gen_check b ys a = c1.gen_check a\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Code Generation\\<close>"], ["", "lemma solve_efficient [code]:\n  \"solve a b = special_solutions a b @ minimize (fast_filter a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. solve a b = special_solutions a b @ minimize (fast_filter a b)", "by (auto simp: solve_def non_special_solutions_def tune)"], ["", "lemma c12_generate_check_code [code_unfold]:\n  \"c12_generate_check a b a b = generate_check a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c12_generate_check a b a b = generate_check a b", "by (auto simp: generate_check_def c12.generate_check_def c1_gen_check_conv intro!: arg_cong [of _ _ concat])"], ["", "end"]]}