{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan/Gauss_Jordan_PA_IArrays.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan", "problem_names": ["lemma Gauss_Jordan_in_ij_iarrays_PA_def'[code]: \n\"Gauss_Jordan_in_ij_iarrays_PA A' i j =\n(let  P = fst A'; A = snd A'; n = least_non_zero_position_of_vector_from_index (column_iarray j A) i; \n  interchange_A = interchange_rows_iarray A i n; A' = mult_row_iarray interchange_A i (1 / interchange_A !! i !! j);\n  interchange_P = interchange_rows_iarray P i n; P' = mult_row_iarray interchange_P i (1 / interchange_A !! i !! j)\n in (IArray.of_fun (\\<lambda>s. if s = i then P' !! s else row_add_iarray P' s i (- interchange_A !! s !! j) !! s) (nrows_iarray A),\n    (IArray.of_fun (\\<lambda>s. if s = i then A' !! s else row_add_iarray A' s i (- interchange_A !! s !! j) !! s) (nrows_iarray A))))\"", "lemma snd_Gauss_Jordan_in_ij_iarrays_PA:\n shows \"snd (Gauss_Jordan_in_ij_iarrays_PA (P, A) i j) = Gauss_Jordan_in_ij_iarrays A i j\"", "lemma matrix_to_iarray_snd_Gauss_Jordan_in_ij_iarrays_PA:\n assumes \"\\<not> vector_all_zero_from_index (to_nat i, vec_to_iarray (column j A))\"\n shows \"matrix_to_iarray (snd (Gauss_Jordan_in_ij_PA (P,A) i j)) = snd (Gauss_Jordan_in_ij_iarrays_PA (matrix_to_iarray P,matrix_to_iarray A) (to_nat i) (to_nat j))\"", "lemma matrix_to_iarray_fst_Gauss_Jordan_in_ij_iarrays_PA:\n assumes not_all_zero: \"\\<not> vector_all_zero_from_index (to_nat i, vec_to_iarray (column j A))\"\n shows \"matrix_to_iarray (fst (Gauss_Jordan_in_ij_PA (P,A) i j)) = fst (Gauss_Jordan_in_ij_iarrays_PA (matrix_to_iarray P,matrix_to_iarray A) (to_nat i) (to_nat j))\"", "lemma matrix_to_iarray_fst_Gauss_Jordan_column_k_PA:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P,i,A) k)) = fst (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray P, i, matrix_to_iarray A) k)\"", "lemma matrix_to_iarray_snd_Gauss_Jordan_column_k_PA:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"(fst (snd (Gauss_Jordan_column_k_PA (P,i,A) k))) = fst (snd (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray P, i, matrix_to_iarray A) k))\"", "lemma matrix_to_iarray_third_Gauss_Jordan_column_k_PA:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (P,i,A) k))) = snd (snd (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray P, i, matrix_to_iarray A) k))\"", "lemma\nassumes \"k<ncols A\"\nshows matrix_to_iarray_fst_Gauss_Jordan_upt_k_PA: \"matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\"\nand matrix_to_iarray_snd_Gauss_Jordan_upt_k_PA: \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) = (snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k))\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc k]))\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) \\<le> nrows A\"", "lemma matrix_to_iarray_fst_Gauss_Jordan_PA: \nshows \"matrix_to_iarray (fst (Gauss_Jordan_PA A)) = fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))\"", "lemma matrix_to_iarray_snd_Gauss_Jordan_PA: \nshows \"matrix_to_iarray (snd (Gauss_Jordan_PA A)) = snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))\"", "lemma Gauss_Jordan_iarrays_PA_mult:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) = fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i (matrix_to_iarray A)\"", "lemma snd_snd_Gauss_Jordan_column_k_iarrays_PA_eq: \nshows \"snd (snd (Gauss_Jordan_column_k_iarrays_PA (P,i,A) k)) = snd (Gauss_Jordan_column_k_iarrays (i,A) k)\"", "lemma fst_snd_Gauss_Jordan_column_k_iarrays_PA_eq: \nshows \"fst (snd (Gauss_Jordan_column_k_iarrays_PA (P,i,A) k)) = fst (Gauss_Jordan_column_k_iarrays (i,A) k)\"", "lemma foldl_Gauss_Jordan_column_k_iarrays_eq:\n\"snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) = foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k]\"", "lemma snd_Gauss_Jordan_upt_k_iarrays_PA:\nshows \"snd (Gauss_Jordan_upt_k_iarrays_PA A k) = (Gauss_Jordan_upt_k_iarrays A k)\"", "lemma snd_Gauss_Jordan_iarrays_PA_eq: \"snd (Gauss_Jordan_iarrays_PA A) = Gauss_Jordan_iarrays A\""], "translations": [["", "lemma Gauss_Jordan_in_ij_iarrays_PA_def'[code]: \n\"Gauss_Jordan_in_ij_iarrays_PA A' i j =\n(let  P = fst A'; A = snd A'; n = least_non_zero_position_of_vector_from_index (column_iarray j A) i; \n  interchange_A = interchange_rows_iarray A i n; A' = mult_row_iarray interchange_A i (1 / interchange_A !! i !! j);\n  interchange_P = interchange_rows_iarray P i n; P' = mult_row_iarray interchange_P i (1 / interchange_A !! i !! j)\n in (IArray.of_fun (\\<lambda>s. if s = i then P' !! s else row_add_iarray P' s i (- interchange_A !! s !! j) !! s) (nrows_iarray A),\n    (IArray.of_fun (\\<lambda>s. if s = i then A' !! s else row_add_iarray A' s i (- interchange_A !! s !! j) !! s) (nrows_iarray A))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gauss_Jordan_in_ij_iarrays_PA A' i j =\n    (let P = fst A'; A = snd A';\n         n = least_non_zero_position_of_vector_from_index\n              (column_iarray j A) i;\n         interchange_A = interchange_rows_iarray A i n;\n         A' = mult_row_iarray interchange_A i\n               ((1::'a) / interchange_A !! i !! j);\n         interchange_P = interchange_rows_iarray P i n;\n         P' = mult_row_iarray interchange_P i\n               ((1::'a) / interchange_A !! i !! j)\n     in (IArray.of_fun\n          (\\<lambda>s.\n              if s = i then P' !! s\n              else row_add_iarray P' s i (- interchange_A !! s !! j) !! s)\n          (nrows_iarray A),\n         IArray.of_fun\n          (\\<lambda>s.\n              if s = i then A' !! s\n              else row_add_iarray A' s i (- interchange_A !! s !! j) !! s)\n          (nrows_iarray A)))", "unfolding Gauss_Jordan_in_ij_iarrays_PA_def Gauss_Jordan_in_ij_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (IArray.of_fun\n      (\\<lambda>s.\n          if s = i\n          then mult_row_iarray\n                (interchange_rows_iarray (fst A') i\n                  (least_non_zero_position_of_vector_from_index\n                    (column_iarray j (snd A')) i))\n                i ((1::'a) /\n                   interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   i !!\n                   j) !!\n               s\n          else row_add_iarray\n                (mult_row_iarray\n                  (interchange_rows_iarray (fst A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i))\n                  i ((1::'a) /\n                     interchange_rows_iarray (snd A') i\n                      (least_non_zero_position_of_vector_from_index\n                        (column_iarray j (snd A')) i) !!\n                     i !!\n                     j))\n                s i\n                (- interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   s !!\n                   j) !!\n               s)\n      (nrows_iarray (snd A')),\n     IArray.of_fun\n      (\\<lambda>s.\n          if s = i\n          then mult_row_iarray\n                (interchange_rows_iarray (snd A') i\n                  (least_non_zero_position_of_vector_from_index\n                    (column_iarray j (snd A')) i))\n                i ((1::'a) /\n                   interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   i !!\n                   j) !!\n               s\n          else row_add_iarray\n                (mult_row_iarray\n                  (interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i))\n                  i ((1::'a) /\n                     interchange_rows_iarray (snd A') i\n                      (least_non_zero_position_of_vector_from_index\n                        (column_iarray j (snd A')) i) !!\n                     i !!\n                     j))\n                s i\n                (- interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   s !!\n                   j) !!\n               s)\n      (nrows_iarray (snd A'))) =\n    (IArray.of_fun\n      (\\<lambda>s.\n          if s = i\n          then mult_row_iarray\n                (interchange_rows_iarray (fst A') i\n                  (least_non_zero_position_of_vector_from_index\n                    (column_iarray j (snd A')) i))\n                i ((1::'a) /\n                   interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   i !!\n                   j) !!\n               s\n          else row_add_iarray\n                (mult_row_iarray\n                  (interchange_rows_iarray (fst A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i))\n                  i ((1::'a) /\n                     interchange_rows_iarray (snd A') i\n                      (least_non_zero_position_of_vector_from_index\n                        (column_iarray j (snd A')) i) !!\n                     i !!\n                     j))\n                s i\n                (- interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   s !!\n                   j) !!\n               s)\n      (nrows_iarray (snd A')),\n     IArray.of_fun\n      (\\<lambda>s.\n          if s = i\n          then mult_row_iarray\n                (interchange_rows_iarray (snd A') i\n                  (least_non_zero_position_of_vector_from_index\n                    (column_iarray j (snd A')) i))\n                i ((1::'a) /\n                   interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   i !!\n                   j) !!\n               s\n          else row_add_iarray\n                (mult_row_iarray\n                  (interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i))\n                  i ((1::'a) /\n                     interchange_rows_iarray (snd A') i\n                      (least_non_zero_position_of_vector_from_index\n                        (column_iarray j (snd A')) i) !!\n                     i !!\n                     j))\n                s i\n                (- interchange_rows_iarray (snd A') i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j (snd A')) i) !!\n                   s !!\n                   j) !!\n               s)\n      (nrows_iarray (snd A')))", ".."], ["", "lemma snd_Gauss_Jordan_in_ij_iarrays_PA:\n shows \"snd (Gauss_Jordan_in_ij_iarrays_PA (P, A) i j) = Gauss_Jordan_in_ij_iarrays A i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_in_ij_iarrays_PA (P, A) i j) =\n    Gauss_Jordan_in_ij_iarrays A i j", "unfolding Gauss_Jordan_in_ij_iarrays_PA_def Gauss_Jordan_in_ij_iarrays_def Let_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun\n     (\\<lambda>s.\n         if s = i\n         then mult_row_iarray\n               (interchange_rows_iarray A i\n                 (least_non_zero_position_of_vector_from_index\n                   (column_iarray j A) i))\n               i ((1::'a) /\n                  interchange_rows_iarray A i\n                   (least_non_zero_position_of_vector_from_index\n                     (column_iarray j A) i) !!\n                  i !!\n                  j) !!\n              s\n         else row_add_iarray\n               (mult_row_iarray\n                 (interchange_rows_iarray A i\n                   (least_non_zero_position_of_vector_from_index\n                     (column_iarray j A) i))\n                 i ((1::'a) /\n                    interchange_rows_iarray A i\n                     (least_non_zero_position_of_vector_from_index\n                       (column_iarray j A) i) !!\n                    i !!\n                    j))\n               s i\n               (- interchange_rows_iarray A i\n                   (least_non_zero_position_of_vector_from_index\n                     (column_iarray j A) i) !!\n                  s !!\n                  j) !!\n              s)\n     (nrows_iarray A) =\n    IArray.of_fun\n     (\\<lambda>s.\n         if s = i\n         then mult_row_iarray\n               (interchange_rows_iarray A i\n                 (least_non_zero_position_of_vector_from_index\n                   (column_iarray j A) i))\n               i ((1::'a) /\n                  interchange_rows_iarray A i\n                   (least_non_zero_position_of_vector_from_index\n                     (column_iarray j A) i) !!\n                  i !!\n                  j) !!\n              s\n         else row_add_iarray\n               (mult_row_iarray\n                 (interchange_rows_iarray A i\n                   (least_non_zero_position_of_vector_from_index\n                     (column_iarray j A) i))\n                 i ((1::'a) /\n                    interchange_rows_iarray A i\n                     (least_non_zero_position_of_vector_from_index\n                       (column_iarray j A) i) !!\n                    i !!\n                    j))\n               s i\n               (- interchange_rows_iarray A i\n                   (least_non_zero_position_of_vector_from_index\n                     (column_iarray j A) i) !!\n                  s !!\n                  j) !!\n              s)\n     (nrows_iarray A)", ".."], ["", "lemma matrix_to_iarray_snd_Gauss_Jordan_in_ij_iarrays_PA:\n assumes \"\\<not> vector_all_zero_from_index (to_nat i, vec_to_iarray (column j A))\"\n shows \"matrix_to_iarray (snd (Gauss_Jordan_in_ij_PA (P,A) i j)) = snd (Gauss_Jordan_in_ij_iarrays_PA (matrix_to_iarray P,matrix_to_iarray A) (to_nat i) (to_nat j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_in_ij_PA (P, A) i j)) =\n    snd (Gauss_Jordan_in_ij_iarrays_PA\n          (matrix_to_iarray P, matrix_to_iarray A) (mod_type_class.to_nat i)\n          (mod_type_class.to_nat j))", "by (metis assms matrix_to_iarray_Gauss_Jordan_in_ij snd_Gauss_Jordan_in_ij_PA_eq snd_Gauss_Jordan_in_ij_iarrays_PA)"], ["", "lemma matrix_to_iarray_fst_Gauss_Jordan_in_ij_iarrays_PA:\n assumes not_all_zero: \"\\<not> vector_all_zero_from_index (to_nat i, vec_to_iarray (column j A))\"\n shows \"matrix_to_iarray (fst (Gauss_Jordan_in_ij_PA (P,A) i j)) = fst (Gauss_Jordan_in_ij_iarrays_PA (matrix_to_iarray P,matrix_to_iarray A) (to_nat i) (to_nat j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_in_ij_PA (P, A) i j)) =\n    fst (Gauss_Jordan_in_ij_iarrays_PA\n          (matrix_to_iarray P, matrix_to_iarray A) (mod_type_class.to_nat i)\n          (mod_type_class.to_nat j))", "proof (unfold Gauss_Jordan_in_ij_PA_def Gauss_Jordan_in_ij_iarrays_PA_def Let_def fst_conv snd_conv, rule matrix_to_iarray_eq_of_fun, auto simp del: IArray.length_def IArray.sub_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    mult_row_iarray\n     (interchange_rows_iarray (matrix_to_iarray P) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)))\n     (mod_type_class.to_nat i)\n     ((1::'a) /\n      interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)) !!\n      mod_type_class.to_nat i !!\n      mod_type_class.to_nat j) !!\n    mod_type_class.to_nat i\n 2. \\<And>ia.\n       ia \\<noteq> i \\<Longrightarrow>\n       vec_to_iarray\n        (row_add\n          (mult_row\n            (interchange_rows P i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n            i ((1::'a) /\n               A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n               j))\n          ia i\n          (- interchange_rows A i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n             ia $\n             j) $\n         ia) =\n       row_add_iarray\n        (mult_row_iarray\n          (interchange_rows_iarray (matrix_to_iarray P)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)))\n          (mod_type_class.to_nat i)\n          ((1::'a) /\n           interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat i !!\n           mod_type_class.to_nat j))\n        (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n        (- interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat ia !!\n           mod_type_class.to_nat j) !!\n       mod_type_class.to_nat ia\n 3. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "show \"vec_to_iarray (mult_row (interchange_rows P i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n)) i (1 / A $ (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n) $ j) $ i) =\n    mult_row_iarray (interchange_rows_iarray (matrix_to_iarray P) (to_nat i)\n       (least_non_zero_position_of_vector_from_index (column_iarray (to_nat j) (matrix_to_iarray A)) (to_nat i))) (to_nat i)\n     (1 / interchange_rows_iarray (matrix_to_iarray A) (to_nat i)\n           (least_non_zero_position_of_vector_from_index (column_iarray (to_nat j) (matrix_to_iarray A)) (to_nat i)) !! to_nat i !! to_nat j) !! to_nat i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    mult_row_iarray\n     (interchange_rows_iarray (matrix_to_iarray P) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)))\n     (mod_type_class.to_nat i)\n     ((1::'a) /\n      interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)) !!\n      mod_type_class.to_nat i !!\n      mod_type_class.to_nat j) !!\n    mod_type_class.to_nat i", "unfolding vec_to_iarray_column[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    mult_row_iarray\n     (interchange_rows_iarray (matrix_to_iarray P) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (vec_to_iarray (column j A)) (mod_type_class.to_nat i)))\n     (mod_type_class.to_nat i)\n     ((1::'a) /\n      interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (vec_to_iarray (column j A)) (mod_type_class.to_nat i)) !!\n      mod_type_class.to_nat i !!\n      mod_type_class.to_nat j) !!\n    mod_type_class.to_nat i", "unfolding vec_to_iarray_least_non_zero_position_of_vector_from_index'[OF not_all_zero]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    mult_row_iarray\n     (interchange_rows_iarray (matrix_to_iarray P) (mod_type_class.to_nat i)\n       (mod_type_class.to_nat\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)))\n     (mod_type_class.to_nat i)\n     ((1::'a) /\n      interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n       (mod_type_class.to_nat\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n      mod_type_class.to_nat i !!\n      mod_type_class.to_nat j) !!\n    mod_type_class.to_nat i", "unfolding matrix_to_iarray_interchange_rows[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    mult_row_iarray\n     (matrix_to_iarray\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)))\n     (mod_type_class.to_nat i)\n     ((1::'a) /\n      matrix_to_iarray\n       (interchange_rows A i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n      mod_type_class.to_nat i !!\n      mod_type_class.to_nat j) !!\n    mod_type_class.to_nat i", "unfolding matrix_to_iarray_mult_row[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    matrix_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          matrix_to_iarray\n           (interchange_rows A i\n             (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n          mod_type_class.to_nat i !!\n          mod_type_class.to_nat j)) !!\n    mod_type_class.to_nat i", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    matrix_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          i $\n          j)) !!\n    mod_type_class.to_nat i", "unfolding interchange_rows_i"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n      i) =\n    matrix_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          j)) !!\n    mod_type_class.to_nat i", "unfolding vec_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          j)) !!\n    mod_type_class.to_nat i =\n    matrix_to_iarray\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          j)) !!\n    mod_type_class.to_nat i", ".."], ["proof (state)\nthis:\n  vec_to_iarray\n   (mult_row\n     (interchange_rows P i\n       (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n     i ((1::'a) /\n        A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j) $\n    i) =\n  mult_row_iarray\n   (interchange_rows_iarray (matrix_to_iarray P) (mod_type_class.to_nat i)\n     (least_non_zero_position_of_vector_from_index\n       (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n       (mod_type_class.to_nat i)))\n   (mod_type_class.to_nat i)\n   ((1::'a) /\n    interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n     (least_non_zero_position_of_vector_from_index\n       (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n       (mod_type_class.to_nat i)) !!\n    mod_type_class.to_nat i !!\n    mod_type_class.to_nat j) !!\n  mod_type_class.to_nat i\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       ia \\<noteq> i \\<Longrightarrow>\n       vec_to_iarray\n        (row_add\n          (mult_row\n            (interchange_rows P i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n            i ((1::'a) /\n               A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n               j))\n          ia i\n          (- interchange_rows A i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n             ia $\n             j) $\n         ia) =\n       row_add_iarray\n        (mult_row_iarray\n          (interchange_rows_iarray (matrix_to_iarray P)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)))\n          (mod_type_class.to_nat i)\n          ((1::'a) /\n           interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat i !!\n           mod_type_class.to_nat j))\n        (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n        (- interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat ia !!\n           mod_type_class.to_nat j) !!\n       mod_type_class.to_nat ia\n 2. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       ia \\<noteq> i \\<Longrightarrow>\n       vec_to_iarray\n        (row_add\n          (mult_row\n            (interchange_rows P i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n            i ((1::'a) /\n               A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n               j))\n          ia i\n          (- interchange_rows A i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n             ia $\n             j) $\n         ia) =\n       row_add_iarray\n        (mult_row_iarray\n          (interchange_rows_iarray (matrix_to_iarray P)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)))\n          (mod_type_class.to_nat i)\n          ((1::'a) /\n           interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat i !!\n           mod_type_class.to_nat j))\n        (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n        (- interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat ia !!\n           mod_type_class.to_nat j) !!\n       mod_type_class.to_nat ia\n 2. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "fix ia"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       ia \\<noteq> i \\<Longrightarrow>\n       vec_to_iarray\n        (row_add\n          (mult_row\n            (interchange_rows P i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n            i ((1::'a) /\n               A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n               j))\n          ia i\n          (- interchange_rows A i\n              (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n             ia $\n             j) $\n         ia) =\n       row_add_iarray\n        (mult_row_iarray\n          (interchange_rows_iarray (matrix_to_iarray P)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)))\n          (mod_type_class.to_nat i)\n          ((1::'a) /\n           interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat i !!\n           mod_type_class.to_nat j))\n        (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n        (- interchange_rows_iarray (matrix_to_iarray A)\n            (mod_type_class.to_nat i)\n            (least_non_zero_position_of_vector_from_index\n              (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n              (mod_type_class.to_nat i)) !!\n           mod_type_class.to_nat ia !!\n           mod_type_class.to_nat j) !!\n       mod_type_class.to_nat ia\n 2. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "show \"vec_to_iarray (row_add (mult_row (interchange_rows P i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n)) i (1 / A $ (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n) $ j)) ia i\n            (- interchange_rows A i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n) $ ia $ j) $ ia) =\n         row_add_iarray (mult_row_iarray (interchange_rows_iarray (matrix_to_iarray P) (to_nat i)\n              (least_non_zero_position_of_vector_from_index (column_iarray (to_nat j) (matrix_to_iarray A)) (to_nat i))) (to_nat i)\n            (1 / interchange_rows_iarray (matrix_to_iarray A) (to_nat i)\n                  (least_non_zero_position_of_vector_from_index (column_iarray (to_nat j) (matrix_to_iarray A)) (to_nat i)) !!\n                 to_nat i !! to_nat j)) (to_nat ia) (to_nat i)\n          (- interchange_rows_iarray (matrix_to_iarray A) (to_nat i)\n              (least_non_zero_position_of_vector_from_index (column_iarray (to_nat j) (matrix_to_iarray A)) (to_nat i)) !!\n             to_nat ia !! to_nat j) !! to_nat ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (mult_row_iarray\n       (interchange_rows_iarray (matrix_to_iarray P)\n         (mod_type_class.to_nat i)\n         (least_non_zero_position_of_vector_from_index\n           (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n           (mod_type_class.to_nat i)))\n       (mod_type_class.to_nat i)\n       ((1::'a) /\n        interchange_rows_iarray (matrix_to_iarray A)\n         (mod_type_class.to_nat i)\n         (least_non_zero_position_of_vector_from_index\n           (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n           (mod_type_class.to_nat i)) !!\n        mod_type_class.to_nat i !!\n        mod_type_class.to_nat j))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- interchange_rows_iarray (matrix_to_iarray A)\n         (mod_type_class.to_nat i)\n         (least_non_zero_position_of_vector_from_index\n           (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n           (mod_type_class.to_nat i)) !!\n        mod_type_class.to_nat ia !!\n        mod_type_class.to_nat j) !!\n    mod_type_class.to_nat ia", "unfolding vec_to_iarray_column[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (mult_row_iarray\n       (interchange_rows_iarray (matrix_to_iarray P)\n         (mod_type_class.to_nat i)\n         (least_non_zero_position_of_vector_from_index\n           (vec_to_iarray (column j A)) (mod_type_class.to_nat i)))\n       (mod_type_class.to_nat i)\n       ((1::'a) /\n        interchange_rows_iarray (matrix_to_iarray A)\n         (mod_type_class.to_nat i)\n         (least_non_zero_position_of_vector_from_index\n           (vec_to_iarray (column j A)) (mod_type_class.to_nat i)) !!\n        mod_type_class.to_nat i !!\n        mod_type_class.to_nat j))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- interchange_rows_iarray (matrix_to_iarray A)\n         (mod_type_class.to_nat i)\n         (least_non_zero_position_of_vector_from_index\n           (vec_to_iarray (column j A)) (mod_type_class.to_nat i)) !!\n        mod_type_class.to_nat ia !!\n        mod_type_class.to_nat j) !!\n    mod_type_class.to_nat ia", "unfolding vec_to_iarray_least_non_zero_position_of_vector_from_index'[OF not_all_zero]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (mult_row_iarray\n       (interchange_rows_iarray (matrix_to_iarray P)\n         (mod_type_class.to_nat i)\n         (mod_type_class.to_nat\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)))\n       (mod_type_class.to_nat i)\n       ((1::'a) /\n        interchange_rows_iarray (matrix_to_iarray A)\n         (mod_type_class.to_nat i)\n         (mod_type_class.to_nat\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n        mod_type_class.to_nat i !!\n        mod_type_class.to_nat j))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- interchange_rows_iarray (matrix_to_iarray A)\n         (mod_type_class.to_nat i)\n         (mod_type_class.to_nat\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n        mod_type_class.to_nat ia !!\n        mod_type_class.to_nat j) !!\n    mod_type_class.to_nat ia", "unfolding matrix_to_iarray_interchange_rows[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (mult_row_iarray\n       (matrix_to_iarray\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)))\n       (mod_type_class.to_nat i)\n       ((1::'a) /\n        matrix_to_iarray\n         (interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n        mod_type_class.to_nat i !!\n        mod_type_class.to_nat j))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- matrix_to_iarray\n         (interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n        mod_type_class.to_nat ia !!\n        mod_type_class.to_nat j) !!\n    mod_type_class.to_nat ia", "unfolding matrix_to_iarray_mult_row[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (matrix_to_iarray\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            matrix_to_iarray\n             (interchange_rows A i\n               (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n            mod_type_class.to_nat i !!\n            mod_type_class.to_nat j)))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- matrix_to_iarray\n         (interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n)) !!\n        mod_type_class.to_nat ia !!\n        mod_type_class.to_nat j) !!\n    mod_type_class.to_nat ia", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (matrix_to_iarray\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            interchange_rows A i\n             (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n            i $\n            j)))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- interchange_rows A i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n        ia $\n        j) !!\n    mod_type_class.to_nat ia", "unfolding interchange_rows_i"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    row_add_iarray\n     (matrix_to_iarray\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n            j)))\n     (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n     (- interchange_rows A i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n        ia $\n        j) !!\n    mod_type_class.to_nat ia", "unfolding matrix_to_iarray_row_add[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j) $\n      ia) =\n    matrix_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j)) !!\n    mod_type_class.to_nat ia", "unfolding vec_matrix"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j)) !!\n    mod_type_class.to_nat ia =\n    matrix_to_iarray\n     (row_add\n       (mult_row\n         (interchange_rows P i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n         i ((1::'a) /\n            A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n       ia i\n       (- interchange_rows A i\n           (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n          ia $\n          j)) !!\n    mod_type_class.to_nat ia", ".."], ["proof (state)\nthis:\n  vec_to_iarray\n   (row_add\n     (mult_row\n       (interchange_rows P i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n       i ((1::'a) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $ j))\n     ia i\n     (- interchange_rows A i\n         (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n        ia $\n        j) $\n    ia) =\n  row_add_iarray\n   (mult_row_iarray\n     (interchange_rows_iarray (matrix_to_iarray P) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)))\n     (mod_type_class.to_nat i)\n     ((1::'a) /\n      interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)) !!\n      mod_type_class.to_nat i !!\n      mod_type_class.to_nat j))\n   (mod_type_class.to_nat ia) (mod_type_class.to_nat i)\n   (- interchange_rows_iarray (matrix_to_iarray A) (mod_type_class.to_nat i)\n       (least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)) !!\n      mod_type_class.to_nat ia !!\n      mod_type_class.to_nat j) !!\n  mod_type_class.to_nat ia\n\ngoal (1 subgoal):\n 1. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "show \"nrows_iarray (matrix_to_iarray A) = IArray.length (matrix_to_iarray\n       (\\<chi> s. if s = i then mult_row (interchange_rows P i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n)) i (1 / interchange_rows A i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n) $ i $ j) $ s\n             else row_add (mult_row (interchange_rows P i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n)) i (1 / interchange_rows A i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n) $ i $ j)) s i\n             (- interchange_rows A i (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n) $ s $ j) $ s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows_iarray (matrix_to_iarray A) =\n    IArray.length\n     (matrix_to_iarray\n       (\\<chi>s.\n           if s = i\n           then mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j) $\n                s\n           else row_add\n                 (mult_row\n                   (interchange_rows P i\n                     (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                   i ((1::'a) /\n                      interchange_rows A i\n                       (LEAST n.\n                           A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                      i $\n                      j))\n                 s i\n                 (- interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    s $\n                    j) $\n                s))", "unfolding length_eq_card_rows nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('b) = CARD('b)", ".."], ["proof (state)\nthis:\n  nrows_iarray (matrix_to_iarray A) =\n  IArray.length\n   (matrix_to_iarray\n     (\\<chi>s.\n         if s = i\n         then mult_row\n               (interchange_rows P i\n                 (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n               i ((1::'a) /\n                  interchange_rows A i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                  i $\n                  j) $\n              s\n         else row_add\n               (mult_row\n                 (interchange_rows P i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n))\n                 i ((1::'a) /\n                    interchange_rows A i\n                     (LEAST n.\n                         A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                    i $\n                    j))\n               s i\n               (- interchange_rows A i\n                   (LEAST n. A $ n $ j \\<noteq> (0::'a) \\<and> i \\<le> n) $\n                  s $\n                  j) $\n              s))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Properties about @{term \"Gauss_Jordan_column_k_iarrays_PA\"}\\<close>"], ["", "lemma matrix_to_iarray_fst_Gauss_Jordan_column_k_PA:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P,i,A) k)) = fst (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray P, i, matrix_to_iarray A) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "proof (cases \"i<nrows A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "case True"], ["proof (state)\nthis:\n  i < nrows A\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "unfolding Gauss_Jordan_column_k_PA_def Gauss_Jordan_column_k_iarrays_PA_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if (\\<forall>m\\<ge>mod_type_class.from_nat (fst (snd (P, i, A))).\n                  snd (snd (P, i, A)) $ m $ mod_type_class.from_nat k =\n                  (0::'a)) \\<or>\n              fst (snd (P, i, A)) = nrows (snd (snd (P, i, A)))\n           then (fst (P, i, A), fst (snd (P, i, A)), snd (snd (P, i, A)))\n           else (fst (Gauss_Jordan_in_ij_PA\n                       (fst (P, i, A), snd (snd (P, i, A)))\n                       (mod_type_class.from_nat (fst (snd (P, i, A))))\n                       (mod_type_class.from_nat k)),\n                 fst (snd (P, i, A)) + 1,\n                 snd (Gauss_Jordan_in_ij_PA\n                       (fst (P, i, A), snd (snd (P, i, A)))\n                       (mod_type_class.from_nat (fst (snd (P, i, A))))\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)),\n              column_iarray k\n               (snd (snd (matrix_to_iarray P, i,\n                          matrix_to_iarray A)))) \\<or>\n            fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)) =\n            nrows_iarray\n             (snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n         then (fst (matrix_to_iarray P, i, matrix_to_iarray A),\n               fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)),\n               snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (fst (matrix_to_iarray P, i, matrix_to_iarray A),\n                      snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     (fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     k),\n               fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)) + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (fst (matrix_to_iarray P, i, matrix_to_iarray A),\n                      snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     (fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     k)))", "unfolding snd_conv fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n              i = nrows A\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding matrix_vector_all_zero_from_index"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (mod_type_class.to_nat (mod_type_class.from_nat i),\n                vec_to_iarray (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows A\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding to_nat_from_nat_id[OF True[unfolded nrows_def]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows A\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "using matrix_to_iarray_fst_Gauss_Jordan_in_ij_iarrays_PA[of \"from_nat i\" \"from_nat k\" A P]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat (mod_type_class.from_nat i),\n           vec_to_iarray\n            (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (fst (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  fst (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "using matrix_to_iarray_snd_Gauss_Jordan_in_ij_iarrays_PA[of \"from_nat i\" \"from_nat k\" A  P]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat (mod_type_class.from_nat i),\n           vec_to_iarray\n            (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (fst (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  fst (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat (mod_type_class.from_nat i),\n           vec_to_iarray\n            (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding to_nat_from_nat_id[OF True[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (i, vec_to_iarray\n               (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (fst (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  fst (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A) i\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n  \\<not> vector_all_zero_from_index\n          (i, vec_to_iarray\n               (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A) i\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding to_nat_from_nat_id[OF k[unfolded ncols_def]]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (i, vec_to_iarray\n               (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (fst (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  fst (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A) i k)\n  \\<not> vector_all_zero_from_index\n          (i, vec_to_iarray\n               (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A) i k)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding vec_to_iarray_column'[OF k]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (i, column_iarray k (matrix_to_iarray A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (fst (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  fst (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A) i k)\n  \\<not> vector_all_zero_from_index\n          (i, column_iarray k (matrix_to_iarray A)) \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_iarrays_PA\n        (matrix_to_iarray P, matrix_to_iarray A) i k)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if vector_all_zero_from_index\n               (i, column_iarray k (matrix_to_iarray A)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "by auto"], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n  fst (Gauss_Jordan_column_k_iarrays_PA\n        (matrix_to_iarray P, i, matrix_to_iarray A) k)\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "case False"], ["proof (state)\nthis:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "hence i_eq_nrows:\"i=nrows A\""], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. i = nrows A", "using i"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. i = nrows A", "by simp"], ["proof (state)\nthis:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray P, i, matrix_to_iarray A) k)", "unfolding Gauss_Jordan_column_k_PA_def Gauss_Jordan_column_k_iarrays_PA_def Let_def"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if (\\<forall>m\\<ge>mod_type_class.from_nat (fst (snd (P, i, A))).\n                  snd (snd (P, i, A)) $ m $ mod_type_class.from_nat k =\n                  (0::'a)) \\<or>\n              fst (snd (P, i, A)) = nrows (snd (snd (P, i, A)))\n           then (fst (P, i, A), fst (snd (P, i, A)), snd (snd (P, i, A)))\n           else (fst (Gauss_Jordan_in_ij_PA\n                       (fst (P, i, A), snd (snd (P, i, A)))\n                       (mod_type_class.from_nat (fst (snd (P, i, A))))\n                       (mod_type_class.from_nat k)),\n                 fst (snd (P, i, A)) + 1,\n                 snd (Gauss_Jordan_in_ij_PA\n                       (fst (P, i, A), snd (snd (P, i, A)))\n                       (mod_type_class.from_nat (fst (snd (P, i, A))))\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)),\n              column_iarray k\n               (snd (snd (matrix_to_iarray P, i,\n                          matrix_to_iarray A)))) \\<or>\n            fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)) =\n            nrows_iarray\n             (snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n         then (fst (matrix_to_iarray P, i, matrix_to_iarray A),\n               fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)),\n               snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (fst (matrix_to_iarray P, i, matrix_to_iarray A),\n                      snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     (fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     k),\n               fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)) + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (fst (matrix_to_iarray P, i, matrix_to_iarray A),\n                      snd (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     (fst (snd (matrix_to_iarray P, i, matrix_to_iarray A)))\n                     k)))", "unfolding snd_conv fst_conv"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n              i = nrows A\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\nusing this:\n  i = nrows_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n              i = nrows_iarray (matrix_to_iarray A)\n           then (P, i, A)\n           else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k)),\n                 i + 1,\n                 snd (Gauss_Jordan_in_ij_PA (P, A)\n                       (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k))))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (matrix_to_iarray P, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k),\n               i + 1,\n               snd (Gauss_Jordan_in_ij_iarrays_PA\n                     (matrix_to_iarray P, matrix_to_iarray A) i k)))", "by fastforce"], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n  fst (Gauss_Jordan_column_k_iarrays_PA\n        (matrix_to_iarray P, i, matrix_to_iarray A) k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_snd_Gauss_Jordan_column_k_PA:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"(fst (snd (Gauss_Jordan_column_k_PA (P,i,A) k))) = fst (snd (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray P, i, matrix_to_iarray A) k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray P, i, matrix_to_iarray A) k))", "using matrix_to_iarray_Gauss_Jordan_column_k_1[OF k i]"], ["proof (prove)\nusing this:\n  fst (Gauss_Jordan_column_k (i, A) k) =\n  fst (Gauss_Jordan_column_k_iarrays (i, matrix_to_iarray A) k)\n\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray P, i, matrix_to_iarray A) k))", "unfolding Gauss_Jordan_column_k_def Gauss_Jordan_column_k_iarrays_def"], ["proof (prove)\nusing this:\n  fst (let ia = fst (i, A); A = snd (i, A);\n           from_nat_i = mod_type_class.from_nat ia;\n           from_nat_k = mod_type_class.from_nat k\n       in if (\\<forall>m\\<ge>from_nat_i. A $ m $ from_nat_k = (0::'a)) \\<or>\n             ia = nrows A\n          then (ia, A)\n          else (ia + 1, Gauss_Jordan_in_ij A from_nat_i from_nat_k)) =\n  fst (let Aa = snd (i, matrix_to_iarray A); i = fst (i, matrix_to_iarray A)\n       in if vector_all_zero_from_index (i, column_iarray k Aa) \\<or>\n             i = nrows_iarray Aa\n          then (i, Aa) else (Suc i, Gauss_Jordan_in_ij_iarrays Aa i k))\n\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (P, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray P, i, matrix_to_iarray A) k))", "unfolding Gauss_Jordan_column_k_PA_def Gauss_Jordan_column_k_iarrays_PA_def snd_conv fst_conv Let_def"], ["proof (prove)\nusing this:\n  fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n              A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n          i = nrows A\n       then (i, A)\n       else (i + 1,\n             Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n              (mod_type_class.from_nat k))) =\n  fst (if vector_all_zero_from_index\n           (i, column_iarray k (matrix_to_iarray A)) \\<or>\n          i = nrows_iarray (matrix_to_iarray A)\n       then (i, matrix_to_iarray A)\n       else (Suc i, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))\n\ngoal (1 subgoal):\n 1. fst (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                     A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                 i = nrows A\n              then (P, i, A)\n              else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)),\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_PA (P, A)\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (matrix_to_iarray P, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                          (matrix_to_iarray P, matrix_to_iarray A) i k),\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_iarrays_PA\n                          (matrix_to_iarray P, matrix_to_iarray A) i k))))", "unfolding snd_Gauss_Jordan_in_ij_iarrays_PA"], ["proof (prove)\nusing this:\n  fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n              A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n          i = nrows A\n       then (i, A)\n       else (i + 1,\n             Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n              (mod_type_class.from_nat k))) =\n  fst (if vector_all_zero_from_index\n           (i, column_iarray k (matrix_to_iarray A)) \\<or>\n          i = nrows_iarray (matrix_to_iarray A)\n       then (i, matrix_to_iarray A)\n       else (Suc i, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))\n\ngoal (1 subgoal):\n 1. fst (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                     A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                 i = nrows A\n              then (P, i, A)\n              else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)),\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_PA (P, A)\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (matrix_to_iarray P, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                          (matrix_to_iarray P, matrix_to_iarray A) i k),\n                    i + 1,\n                    Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k)))", "unfolding snd_if_conv"], ["proof (prove)\nusing this:\n  fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n              A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n          i = nrows A\n       then (i, A)\n       else (i + 1,\n             Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n              (mod_type_class.from_nat k))) =\n  fst (if vector_all_zero_from_index\n           (i, column_iarray k (matrix_to_iarray A)) \\<or>\n          i = nrows_iarray (matrix_to_iarray A)\n       then (i, matrix_to_iarray A)\n       else (Suc i, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))\n\ngoal (1 subgoal):\n 1. fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows A\n         then (i, A)\n         else (i + 1,\n               snd (Gauss_Jordan_in_ij_PA (P, A) (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (i, matrix_to_iarray A)\n         else (i + 1, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))", "unfolding snd_Gauss_Jordan_in_ij_PA_eq"], ["proof (prove)\nusing this:\n  fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n              A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n          i = nrows A\n       then (i, A)\n       else (i + 1,\n             Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n              (mod_type_class.from_nat k))) =\n  fst (if vector_all_zero_from_index\n           (i, column_iarray k (matrix_to_iarray A)) \\<or>\n          i = nrows_iarray (matrix_to_iarray A)\n       then (i, matrix_to_iarray A)\n       else (Suc i, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))\n\ngoal (1 subgoal):\n 1. fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows A\n         then (i, A)\n         else (i + 1,\n               Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n                (mod_type_class.from_nat k))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (i, matrix_to_iarray A)\n         else (i + 1, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))", "by fastforce"], ["", "lemma matrix_to_iarray_third_Gauss_Jordan_column_k_PA:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (P,i,A) k))) = snd (snd (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray P, i, matrix_to_iarray A) k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (P, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray P, i, matrix_to_iarray A) k))", "using matrix_to_iarray_Gauss_Jordan_column_k_2[OF k i]"], ["proof (prove)\nusing this:\n  matrix_to_iarray (snd (Gauss_Jordan_column_k (i, A) k)) =\n  snd (Gauss_Jordan_column_k_iarrays (i, matrix_to_iarray A) k)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (P, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray P, i, matrix_to_iarray A) k))", "unfolding Gauss_Jordan_column_k_def Gauss_Jordan_column_k_iarrays_def"], ["proof (prove)\nusing this:\n  matrix_to_iarray\n   (snd (let ia = fst (i, A); A = snd (i, A);\n             from_nat_i = mod_type_class.from_nat ia;\n             from_nat_k = mod_type_class.from_nat k\n         in if (\\<forall>m\\<ge>from_nat_i.\n                   A $ m $ from_nat_k = (0::'a)) \\<or>\n               ia = nrows A\n            then (ia, A)\n            else (ia + 1, Gauss_Jordan_in_ij A from_nat_i from_nat_k))) =\n  snd (let Aa = snd (i, matrix_to_iarray A); i = fst (i, matrix_to_iarray A)\n       in if vector_all_zero_from_index (i, column_iarray k Aa) \\<or>\n             i = nrows_iarray Aa\n          then (i, Aa) else (Suc i, Gauss_Jordan_in_ij_iarrays Aa i k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (P, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray P, i, matrix_to_iarray A) k))", "unfolding Gauss_Jordan_column_k_PA_def Gauss_Jordan_column_k_iarrays_PA_def snd_conv fst_conv Let_def"], ["proof (prove)\nusing this:\n  matrix_to_iarray\n   (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows A\n         then (i, A)\n         else (i + 1,\n               Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n                (mod_type_class.from_nat k)))) =\n  snd (if vector_all_zero_from_index\n           (i, column_iarray k (matrix_to_iarray A)) \\<or>\n          i = nrows_iarray (matrix_to_iarray A)\n       then (i, matrix_to_iarray A)\n       else (Suc i, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                       A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                   i = nrows A\n                then (P, i, A)\n                else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)),\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_PA (P, A)\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (matrix_to_iarray P, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                          (matrix_to_iarray P, matrix_to_iarray A) i k),\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_iarrays_PA\n                          (matrix_to_iarray P, matrix_to_iarray A) i k))))", "unfolding snd_Gauss_Jordan_in_ij_iarrays_PA"], ["proof (prove)\nusing this:\n  matrix_to_iarray\n   (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows A\n         then (i, A)\n         else (i + 1,\n               Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n                (mod_type_class.from_nat k)))) =\n  snd (if vector_all_zero_from_index\n           (i, column_iarray k (matrix_to_iarray A)) \\<or>\n          i = nrows_iarray (matrix_to_iarray A)\n       then (i, matrix_to_iarray A)\n       else (Suc i, Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                       A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                   i = nrows A\n                then (P, i, A)\n                else (fst (Gauss_Jordan_in_ij_PA (P, A)\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)),\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_PA (P, A)\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (matrix_to_iarray P, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA\n                          (matrix_to_iarray P, matrix_to_iarray A) i k),\n                    i + 1,\n                    Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k)))", "unfolding snd_if_conv snd_Gauss_Jordan_in_ij_PA_eq"], ["proof (prove)\nusing this:\n  matrix_to_iarray\n   (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n           A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n       i = nrows A\n    then A\n    else Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k)) =\n  (if vector_all_zero_from_index\n       (i, column_iarray k (matrix_to_iarray A)) \\<or>\n      i = nrows_iarray (matrix_to_iarray A)\n   then matrix_to_iarray A\n   else Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n             A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n         i = nrows A\n      then A\n      else Gauss_Jordan_in_ij A (mod_type_class.from_nat i)\n            (mod_type_class.from_nat k)) =\n    (if vector_all_zero_from_index\n         (i, column_iarray k (matrix_to_iarray A)) \\<or>\n        i = nrows_iarray (matrix_to_iarray A)\n     then matrix_to_iarray A\n     else Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A) i k)", "by fast"], ["", "subsubsection\\<open>Properties about @{term \"Gauss_Jordan_upt_k_iarrays_PA\"}\\<close>"], ["", "lemma\nassumes \"k<ncols A\"\nshows matrix_to_iarray_fst_Gauss_Jordan_upt_k_PA: \"matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\"\nand matrix_to_iarray_snd_Gauss_Jordan_upt_k_PA: \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) = (snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k))\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc k]))\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n     fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k) &&&\n     matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n     snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc k])) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k]))\n    \\<le> nrows A", "using assms"], ["proof (prove)\nusing this:\n  k < ncols A\n\ngoal (1 subgoal):\n 1. (matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n     fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k) &&&\n     matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n     snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc k])) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k]))\n    \\<le> nrows A", "proof (induct k)"], ["proof (state)\ngoal (8 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A 0)) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n 2. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A 0)) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n 3. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc 0]))\n 4. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 8. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "assume zero_less_ncols: \"0 < ncols A\""], ["proof (state)\nthis:\n  0 < ncols A\n\ngoal (8 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A 0)) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n 2. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A 0)) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n 3. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc 0]))\n 4. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 8. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \" matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A 0)) = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A 0)) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)", "unfolding Gauss_Jordan_upt_k_PA_def Gauss_Jordan_upt_k_iarrays_PA_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n            [0..<Suc 0])) =\n    fst (foldl Gauss_Jordan_column_k_iarrays_PA\n          (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n           matrix_to_iarray A)\n          [0..<Suc 0])", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n           matrix_to_iarray A)\n          0)", "unfolding nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (mat_iarray (1::'a) CARD('c), 0, matrix_to_iarray A) 0)", "unfolding matrix_to_iarray_mat[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray (mat (1::'a)), 0, matrix_to_iarray A) 0)", "by (rule matrix_to_iarray_fst_Gauss_Jordan_column_k_PA, auto simp add: zero_less_ncols)"], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A 0)) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n\ngoal (7 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A 0)) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n 2. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc 0]))\n 3. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A 0)) = snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A 0)) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)", "unfolding Gauss_Jordan_upt_k_PA_def Gauss_Jordan_upt_k_iarrays_PA_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc 0]))) =\n    snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc 0]))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               0))", "unfolding nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) CARD('c), 0, matrix_to_iarray A) 0))", "unfolding matrix_to_iarray_mat[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (mat (1::'a)), 0, matrix_to_iarray A) 0))", "by (rule matrix_to_iarray_third_Gauss_Jordan_column_k_PA, auto simp add: zero_less_ncols)"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A 0)) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) 0)\n\ngoal (6 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc 0]))\n 2. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc 0]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc 0]))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0)) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               0))", "unfolding nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0)) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) CARD('c), 0, matrix_to_iarray A) 0))", "unfolding matrix_to_iarray_mat[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) 0)) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (mat (1::'a)), 0, matrix_to_iarray A) 0))", "by (rule matrix_to_iarray_snd_Gauss_Jordan_column_k_PA, auto simp add: zero_less_ncols)"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc 0])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc 0]))\n\ngoal (5 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc 0])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc 0]))\n    \\<le> nrows A", "by (simp add: fst_snd_Gauss_Jordan_column_k_PA_eq fst_Gauss_Jordan_column_k)"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc 0]))\n  \\<le> nrows A\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "fix k"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "assume \"(k < ncols A \\<Longrightarrow> matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k))\"\nand \"(k < ncols A \\<Longrightarrow> matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) = snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k))\"\nand \"(k < ncols A \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) =\n         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc k])))\"\nand \"(k < ncols A \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) \\<le> nrows A)\"\nand Suc_k: \"Suc k < ncols A\""], ["proof (state)\nthis:\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc k]))\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> nrows A\n  Suc k < ncols A\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "hence hyp1: \"matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\"\nand hyp2: \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) = snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\"\nand hyp3: \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) =\n         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc k]))\"\nand hyp4: \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k])) \\<le> nrows A\""], ["proof (prove)\nusing this:\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc k]))\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> nrows A\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. (matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n     fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k) &&&\n     matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n     snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc k])) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k]))\n    \\<le> nrows A", "by linarith+"], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k)\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc k]))\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> nrows A\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "have suc_rw: \"[0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]", "by simp"], ["proof (state)\nthis:\n  [0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "define A' where \"A' = foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k]\""], ["proof (state)\nthis:\n  A' = foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "define B where \"B = foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc k]\""], ["proof (state)\nthis:\n  B =\n  foldl Gauss_Jordan_column_k_iarrays_PA\n   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n    matrix_to_iarray A)\n   [0..<Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "have A'_eq: \"A' = (fst A', fst (snd A'), snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' = (fst A', fst (snd A'), snd (snd A'))", "by auto"], ["proof (state)\nthis:\n  A' = (fst A', fst (snd A'), snd (snd A'))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "have fst_A': \"matrix_to_iarray (fst A') = fst B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst A') = fst B", "unfolding A'_def B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n            [0..<Suc k])) =\n    fst (foldl Gauss_Jordan_column_k_iarrays_PA\n          (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n           matrix_to_iarray A)\n          [0..<Suc k])", "by (rule hyp1[unfolded Gauss_Jordan_upt_k_PA_def Gauss_Jordan_upt_k_iarrays_PA_def Let_def fst_conv])"], ["proof (state)\nthis:\n  matrix_to_iarray (fst A') = fst B\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "have fst_snd_A': \"fst (snd A') = fst (snd B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd A') = fst (snd B)", "unfolding A'_def B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc k]))", "by (rule hyp3[unfolded Gauss_Jordan_upt_k_PA_def Gauss_Jordan_upt_k_iarrays_PA_def ])"], ["proof (state)\nthis:\n  fst (snd A') = fst (snd B)\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "have snd_snd_A': \"matrix_to_iarray (snd (snd A')) = (snd (snd B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd A')) = snd (snd B)", "unfolding A'_def B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k]))) =\n    snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc k]))", "by (rule hyp2[unfolded Gauss_Jordan_upt_k_PA_def Gauss_Jordan_upt_k_iarrays_PA_def Let_def fst_conv snd_conv])"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (snd A')) = snd (snd B)\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         fst (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) = matrix_to_iarray (fst (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc (Suc k)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n            [0..<Suc (Suc k)]))", "unfolding Gauss_Jordan_upt_k_PA_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n            [0..<Suc (Suc k)])) =\n    matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n            [0..<Suc (Suc k)]))", ".."], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  matrix_to_iarray\n   (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n          [0..<Suc (Suc k)]))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  matrix_to_iarray\n   (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n          [0..<Suc (Suc k)]))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k]) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n            [0..<Suc (Suc k)])) =\n    matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            (Suc k)))", "unfolding suc_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (foldl Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            [Suc k])) =\n    matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            (Suc k)))", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            (Suc k))) =\n    matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            (Suc k)))", ".."], ["proof (state)\nthis:\n  matrix_to_iarray\n   (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n          [0..<Suc (Suc k)])) =\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA\n          (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n          (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n          [0..<Suc (Suc k)])) =\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA\n          (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n          (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = matrix_to_iarray (fst (Gauss_Jordan_column_k_PA (fst A',fst (snd A'), snd (snd A')) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            (Suc k))) =\n    matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n            (Suc k)))", "unfolding A'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n            (Suc k))) =\n    matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA\n            (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]),\n             fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                        [0..<Suc k])),\n             snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                        [0..<Suc k])))\n            (Suc k)))", "by simp"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA\n          (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n          (Suc k))) =\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n          (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA\n          (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k])\n          (Suc k))) =\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n          (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = fst (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray (fst A'), fst (snd A'), matrix_to_iarray (snd (snd A'))) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n            (Suc k))) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray (fst A'), fst (snd A'),\n           matrix_to_iarray (snd (snd A')))\n          (Suc k))", "proof (rule matrix_to_iarray_fst_Gauss_Jordan_column_k_PA)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))\n 2. Suc k < ncols (snd (snd A'))", "show \"fst (snd A') \\<le> nrows (snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))", "using hyp4"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> nrows A\n\ngoal (1 subgoal):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))", "unfolding nrows_def A'_def"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> CARD('c)\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k]))\n    \\<le> CARD('c)", "."], ["proof (state)\nthis:\n  fst (snd A') \\<le> nrows (snd (snd A'))\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "show  \"Suc k < ncols (snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "using Suc_k"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('b)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('b)", "."], ["proof (state)\nthis:\n  Suc k < ncols (snd (snd A'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n          (Suc k))) =\n  fst (Gauss_Jordan_column_k_iarrays_PA\n        (matrix_to_iarray (fst A'), fst (snd A'),\n         matrix_to_iarray (snd (snd A')))\n        (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (fst (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n          (Suc k))) =\n  fst (Gauss_Jordan_column_k_iarrays_PA\n        (matrix_to_iarray (fst A'), fst (snd A'),\n         matrix_to_iarray (snd (snd A')))\n        (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... =  fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B)) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_iarrays_PA\n          (matrix_to_iarray (fst A'), fst (snd A'),\n           matrix_to_iarray (snd (snd A')))\n          (Suc k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n          (Suc k))", "unfolding fst_A' fst_snd_A' snd_snd_A'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n          (Suc k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n          (Suc k))", ".."], ["proof (state)\nthis:\n  fst (Gauss_Jordan_column_k_iarrays_PA\n        (matrix_to_iarray (fst A'), fst (snd A'),\n         matrix_to_iarray (snd (snd A')))\n        (Suc k)) =\n  fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n        (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_column_k_iarrays_PA\n        (matrix_to_iarray (fst A'), fst (snd A'),\n         matrix_to_iarray (snd (snd A')))\n        (Suc k)) =\n  fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n        (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n          (Suc k)) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "unfolding Gauss_Jordan_upt_k_iarrays_PA_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n          (Suc k)) =\n    fst (foldl Gauss_Jordan_column_k_iarrays_PA\n          (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n           matrix_to_iarray A)\n          [0..<Suc (Suc k)])", "unfolding suc_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n          (Suc k)) =\n    fst (foldl Gauss_Jordan_column_k_iarrays_PA\n          (foldl Gauss_Jordan_column_k_iarrays_PA\n            (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n             matrix_to_iarray A)\n            [0..<Suc k])\n          [Suc k])", "unfolding List.foldl.simps B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_iarrays_PA\n          (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n                 (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                  matrix_to_iarray A)\n                 [0..<Suc k]),\n           fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a)\n                        (nrows_iarray (matrix_to_iarray A)),\n                       0, matrix_to_iarray A)\n                      [0..<Suc k])),\n           snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a)\n                        (nrows_iarray (matrix_to_iarray A)),\n                       0, matrix_to_iarray A)\n                      [0..<Suc k])))\n          (Suc k)) =\n    fst (Gauss_Jordan_column_k_iarrays_PA\n          (foldl Gauss_Jordan_column_k_iarrays_PA\n            (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n             matrix_to_iarray A)\n            [0..<Suc k])\n          (Suc k))", "by fastforce"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B))\n        (Suc k)) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "finally"], ["proof (chain)\npicking this:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "show ?thesis"], ["proof (prove)\nusing this:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "."], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal (3 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_iarrays_PA\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) = snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =  matrix_to_iarray (snd (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc (Suc k)])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc (Suc k)])))", "unfolding Gauss_Jordan_upt_k_PA_def Let_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc (Suc k)]))) =\n    matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc (Suc k)])))", ".."], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  matrix_to_iarray\n   (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  matrix_to_iarray\n   (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... =  matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k]) (Suc k))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc (Suc k)]))) =\n    matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 (Suc k))))", "unfolding suc_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 [Suc k]))) =\n    matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 (Suc k))))", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 (Suc k)))) =\n    matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 (Suc k))))", ".."], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)]))) =\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k))))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)]))) =\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k))))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_PA (fst A',fst (snd A'), snd (snd A')) (Suc k))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 (Suc k)))) =\n    matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (fst A', fst (snd A'), snd (snd A')) (Suc k))))", "unfolding A'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])\n                 (Suc k)))) =\n    matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                        [0..<Suc k]),\n                  fst (snd (foldl Gauss_Jordan_column_k_PA\n                             (mat (1::'a), 0, A) [0..<Suc k])),\n                  snd (snd (foldl Gauss_Jordan_column_k_PA\n                             (mat (1::'a), 0, A) [0..<Suc k])))\n                 (Suc k))))", "by simp"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k)))) =\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n               (Suc k))))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k)))) =\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n               (Suc k))))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... =  snd (snd (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray (fst A'), fst (snd A'), matrix_to_iarray (snd (snd A'))) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_PA\n                 (fst A', fst (snd A'), snd (snd A')) (Suc k)))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (fst A'), fst (snd A'),\n                matrix_to_iarray (snd (snd A')))\n               (Suc k)))", "proof (rule matrix_to_iarray_third_Gauss_Jordan_column_k_PA)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))\n 2. Suc k < ncols (snd (snd A'))", "show \"fst (snd A') \\<le> nrows (snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))", "using hyp4"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> nrows A\n\ngoal (1 subgoal):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))", "unfolding nrows_def A'_def"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> CARD('c)\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k]))\n    \\<le> CARD('c)", "."], ["proof (state)\nthis:\n  fst (snd A') \\<le> nrows (snd (snd A'))\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "show  \"Suc k < ncols (snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "using Suc_k"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('b)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('b)", "."], ["proof (state)\nthis:\n  Suc k < ncols (snd (snd A'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n               (Suc k)))) =\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n               (Suc k)))) =\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = snd (snd (Gauss_Jordan_column_k_iarrays_PA (fst B, fst (snd B), snd (snd B)) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (fst A'), fst (snd A'),\n                matrix_to_iarray (snd (snd A')))\n               (Suc k))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k)))", "unfolding fst_A' fst_snd_A' snd_snd_A'"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n    snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k)))", ".."], ["proof (state)\nthis:\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k))) =\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (fst B, fst (snd B), snd (snd B)) (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "also"], ["proof (state)\nthis:\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k))) =\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (fst B, fst (snd B), snd (snd B)) (Suc k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "have \"... = snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "unfolding Gauss_Jordan_upt_k_iarrays_PA_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n    snd (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]),\n         snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                    (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                     0, matrix_to_iarray A)\n                    [0..<Suc (Suc k)])))", "unfolding suc_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n    snd (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n               (foldl Gauss_Jordan_column_k_iarrays_PA\n                 (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                  matrix_to_iarray A)\n                 [0..<Suc k])\n               [Suc k]),\n         snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                    (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a)\n                        (nrows_iarray (matrix_to_iarray A)),\n                       0, matrix_to_iarray A)\n                      [0..<Suc k])\n                    [Suc k])))", "unfolding List.foldl.simps B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a)\n                        (nrows_iarray (matrix_to_iarray A)),\n                       0, matrix_to_iarray A)\n                      [0..<Suc k]),\n                fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (mat_iarray (1::'a)\n                             (nrows_iarray (matrix_to_iarray A)),\n                            0, matrix_to_iarray A)\n                           [0..<Suc k])),\n                snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (mat_iarray (1::'a)\n                             (nrows_iarray (matrix_to_iarray A)),\n                            0, matrix_to_iarray A)\n                           [0..<Suc k])))\n               (Suc k))) =\n    snd (fst (Gauss_Jordan_column_k_iarrays_PA\n               (foldl Gauss_Jordan_column_k_iarrays_PA\n                 (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                  matrix_to_iarray A)\n                 [0..<Suc k])\n               (Suc k)),\n         snd (snd (Gauss_Jordan_column_k_iarrays_PA\n                    (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a)\n                        (nrows_iarray (matrix_to_iarray A)),\n                       0, matrix_to_iarray A)\n                      [0..<Suc k])\n                    (Suc k))))", "by fastforce"], ["proof (state)\nthis:\n  snd (snd (Gauss_Jordan_column_k_iarrays_PA\n             (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "finally"], ["proof (chain)\npicking this:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "show ?thesis"], ["proof (prove)\nusing this:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))", "."], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (Suc k))) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (Suc k))\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                                    (mat_iarray (1::'a)\n(nrows_iarray (matrix_to_iarray A)),\n                                     0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)]))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc (Suc k)])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc (Suc k)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "have \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc (Suc k)])) = \n  fst (snd (Gauss_Jordan_column_k_PA (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc k]) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k)))", "unfolding suc_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               [Suc k])) =\n    fst (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k)))", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k)))", ".."], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)])) =\n  fst (snd (Gauss_Jordan_column_k_PA\n             (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "also"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)])) =\n  fst (snd (Gauss_Jordan_column_k_PA\n             (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "have \"... = fst (snd (Gauss_Jordan_column_k_PA (fst A',fst (snd A'), snd (snd A')) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n               (Suc k)))", "unfolding A'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA\n               (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                 [0..<Suc k])\n               (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_PA\n               (fst (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                      [0..<Suc k]),\n                fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                           [0..<Suc k])),\n                snd (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                           [0..<Suc k])))\n               (Suc k)))", "by simp"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_PA\n             (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])\n             (Suc k))) =\n  fst (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "also"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_PA\n             (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k])\n             (Suc k))) =\n  fst (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "have \"... = fst (snd (Gauss_Jordan_column_k_iarrays_PA (matrix_to_iarray (fst A'),fst (snd A'), matrix_to_iarray (snd (snd A'))) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n               (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (fst A'), fst (snd A'),\n                matrix_to_iarray (snd (snd A')))\n               (Suc k)))", "proof (rule matrix_to_iarray_snd_Gauss_Jordan_column_k_PA)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))\n 2. Suc k < ncols (snd (snd A'))", "show \"fst (snd A') \\<le> nrows (snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))", "using hyp4"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> nrows A\n\ngoal (1 subgoal):\n 1. fst (snd A') \\<le> nrows (snd (snd A'))", "unfolding nrows_def A'_def"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A) [0..<Suc k]))\n  \\<le> CARD('c)\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc k]))\n    \\<le> CARD('c)", "."], ["proof (state)\nthis:\n  fst (snd A') \\<le> nrows (snd (snd A'))\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "show \"Suc k < ncols (snd (snd A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "using Suc_k"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd A'))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('b)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('b)", "."], ["proof (state)\nthis:\n  Suc k < ncols (snd (snd A'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n             (Suc k))) =\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "also"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_PA (fst A', fst (snd A'), snd (snd A'))\n             (Suc k))) =\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "have  \"\\<dots> = fst (snd (Gauss_Jordan_column_k_iarrays_PA (fst B,fst (snd B), snd (snd B)) (Suc k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (fst A'), fst (snd A'),\n                matrix_to_iarray (snd (snd A')))\n               (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k)))", "unfolding fst_A' fst_snd_A' snd_snd_A'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k)))", ".."], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k))) =\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (fst B, fst (snd B), snd (snd B)) (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "also"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (matrix_to_iarray (fst A'), fst (snd A'),\n              matrix_to_iarray (snd (snd A')))\n             (Suc k))) =\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (fst B, fst (snd B), snd (snd B)) (Suc k)))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "have \"... = fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA (mat_iarray 1 (nrows_iarray (matrix_to_iarray A)), 0, matrix_to_iarray A) [0..<Suc (Suc k)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "unfolding B_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a)\n                        (nrows_iarray (matrix_to_iarray A)),\n                       0, matrix_to_iarray A)\n                      [0..<Suc k]),\n                fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (mat_iarray (1::'a)\n                             (nrows_iarray (matrix_to_iarray A)),\n                            0, matrix_to_iarray A)\n                           [0..<Suc k])),\n                snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (mat_iarray (1::'a)\n                             (nrows_iarray (matrix_to_iarray A)),\n                            0, matrix_to_iarray A)\n                           [0..<Suc k])))\n               (Suc k))) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "unfolding nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (mat_iarray (1::'a) CARD('c), 0, matrix_to_iarray A)\n                      [0..<Suc k]),\n                fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (mat_iarray (1::'a) CARD('c), 0,\n                            matrix_to_iarray A)\n                           [0..<Suc k])),\n                snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (mat_iarray (1::'a) CARD('c), 0,\n                            matrix_to_iarray A)\n                           [0..<Suc k])))\n               (Suc k))) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) CARD('c), 0, matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "unfolding matrix_to_iarray_mat[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA\n               (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n                      (matrix_to_iarray (mat (1::'a)), 0,\n                       matrix_to_iarray A)\n                      [0..<Suc k]),\n                fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (matrix_to_iarray (mat (1::'a)), 0,\n                            matrix_to_iarray A)\n                           [0..<Suc k])),\n                snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                           (matrix_to_iarray (mat (1::'a)), 0,\n                            matrix_to_iarray A)\n                           [0..<Suc k])))\n               (Suc k))) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (matrix_to_iarray (mat (1::'a)), 0, matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "by auto"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_iarrays_PA\n             (fst B, fst (snd B), snd (snd B)) (Suc k))) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc (Suc k)]))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "finally"], ["proof (chain)\npicking this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc (Suc k)]))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc (Suc k)]))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n                matrix_to_iarray A)\n               [0..<Suc (Suc k)]))", "."], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc (Suc k)]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)])) =\n  fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n             (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)), 0,\n              matrix_to_iarray A)\n             [0..<Suc (Suc k)]))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A k)) =\n                fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A k)) =\n        snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                   (mat_iarray (1::'a) (nrows_iarray (matrix_to_iarray A)),\n                    0, matrix_to_iarray A)\n                   [0..<Suc k]));\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_PA\n                                    (mat (1::'a), 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A", "show \"fst (snd (foldl Gauss_Jordan_column_k_PA (mat 1, 0, A) [0..<Suc (Suc k)])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n               [0..<Suc (Suc k)]))\n    \\<le> nrows A", "by (metis snd_foldl_Gauss_Jordan_column_k_eq Suc_k fst_foldl_Gauss_Jordan_column_k_less)"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_PA (mat (1::'a), 0, A)\n             [0..<Suc (Suc k)]))\n  \\<le> nrows A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Properties about @{term \"Gauss_Jordan_iarrays_PA\"}\\<close>"], ["", "lemma matrix_to_iarray_fst_Gauss_Jordan_PA: \nshows \"matrix_to_iarray (fst (Gauss_Jordan_PA A)) = fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_PA A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))", "unfolding Gauss_Jordan_PA_def Gauss_Jordan_iarrays_PA_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (ncols A - 1))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "using matrix_to_iarray_fst_Gauss_Jordan_upt_k_PA[of \"ncols A - 1\" A]"], ["proof (prove)\nusing this:\n  ncols A - 1 < ncols A \\<Longrightarrow>\n  matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (ncols A - 1))) =\n  fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (ncols A - 1))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (fst (Gauss_Jordan_upt_k_PA A (ncols A - 1))) =\n    fst (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "by (simp add: ncols_def ncols_eq_card_columns)"], ["", "lemma matrix_to_iarray_snd_Gauss_Jordan_PA: \nshows \"matrix_to_iarray (snd (Gauss_Jordan_PA A)) = snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_PA A)) =\n    snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))", "unfolding Gauss_Jordan_PA_def Gauss_Jordan_iarrays_PA_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (ncols A - 1))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "using matrix_to_iarray_snd_Gauss_Jordan_upt_k_PA[of \"ncols A - 1\" A]"], ["proof (prove)\nusing this:\n  ncols A - 1 < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (ncols A - 1))) =\n  snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A) (ncols A - 1))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_PA A (ncols A - 1))) =\n    snd (Gauss_Jordan_upt_k_iarrays_PA (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "by (simp add: ncols_def ncols_eq_card_columns)"], ["", "lemma Gauss_Jordan_iarrays_PA_mult:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) = fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i\n    matrix_to_iarray A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i\n    matrix_to_iarray A", "have \"snd (Gauss_Jordan_PA A) = fst (Gauss_Jordan_PA A) ** A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_PA A) = fst (Gauss_Jordan_PA A) ** A", "using fst_Gauss_Jordan_PA[of A]"], ["proof (prove)\nusing this:\n  fst (Gauss_Jordan_PA A) ** A = snd (Gauss_Jordan_PA A)\n\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_PA A) = fst (Gauss_Jordan_PA A) ** A", ".."], ["proof (state)\nthis:\n  snd (Gauss_Jordan_PA A) = fst (Gauss_Jordan_PA A) ** A\n\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i\n    matrix_to_iarray A", "hence \"matrix_to_iarray (snd (Gauss_Jordan_PA A)) = matrix_to_iarray (fst (Gauss_Jordan_PA A) ** A)\""], ["proof (prove)\nusing this:\n  snd (Gauss_Jordan_PA A) = fst (Gauss_Jordan_PA A) ** A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_PA A)) =\n    matrix_to_iarray (fst (Gauss_Jordan_PA A) ** A)", "by simp"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_PA A)) =\n  matrix_to_iarray (fst (Gauss_Jordan_PA A) ** A)\n\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i\n    matrix_to_iarray A", "thus ?thesis"], ["proof (prove)\nusing this:\n  matrix_to_iarray (snd (Gauss_Jordan_PA A)) =\n  matrix_to_iarray (fst (Gauss_Jordan_PA A) ** A)\n\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i\n    matrix_to_iarray A", "unfolding matrix_to_iarray_snd_Gauss_Jordan_PA matrix_to_iarray_matrix_matrix_mult matrix_to_iarray_fst_Gauss_Jordan_PA"], ["proof (prove)\nusing this:\n  snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n  fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i matrix_to_iarray A\n\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i\n    matrix_to_iarray A", "."], ["proof (state)\nthis:\n  snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) =\n  fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)) **i matrix_to_iarray A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_snd_Gauss_Jordan_column_k_iarrays_PA_eq: \nshows \"snd (snd (Gauss_Jordan_column_k_iarrays_PA (P,i,A) k)) = snd (Gauss_Jordan_column_k_iarrays (i,A) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (Gauss_Jordan_column_k_iarrays_PA (P, i, A) k)) =\n    snd (Gauss_Jordan_column_k_iarrays (i, A) k)", "unfolding Gauss_Jordan_column_k_iarrays_PA_def Gauss_Jordan_column_k_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (let Pa = fst (P, i, A); ia = fst (snd (P, i, A));\n                  A = snd (snd (P, i, A))\n              in if vector_all_zero_from_index (ia, column_iarray k A) \\<or>\n                    ia = nrows_iarray A\n                 then (Pa, ia, A)\n                 else let Gauss = Gauss_Jordan_in_ij_iarrays_PA (Pa, A) ia k\n                      in (fst Gauss, ia + 1, snd Gauss))) =\n    snd (let Aa = snd (i, A); i = fst (i, A)\n         in if vector_all_zero_from_index (i, column_iarray k Aa) \\<or>\n               i = nrows_iarray Aa\n            then (i, Aa) else (Suc i, Gauss_Jordan_in_ij_iarrays Aa i k))", "unfolding Let_def snd_conv fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (if vector_all_zero_from_index (i, column_iarray k A) \\<or>\n                 i = nrows_iarray A\n              then (P, i, A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA (P, A) i k), i + 1,\n                    snd (Gauss_Jordan_in_ij_iarrays_PA (P, A) i k)))) =\n    snd (if vector_all_zero_from_index (i, column_iarray k A) \\<or>\n            i = nrows_iarray A\n         then (i, A) else (Suc i, Gauss_Jordan_in_ij_iarrays A i k))", "unfolding snd_Gauss_Jordan_in_ij_iarrays_PA"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (if vector_all_zero_from_index (i, column_iarray k A) \\<or>\n                 i = nrows_iarray A\n              then (P, i, A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA (P, A) i k), i + 1,\n                    Gauss_Jordan_in_ij_iarrays A i k))) =\n    snd (if vector_all_zero_from_index (i, column_iarray k A) \\<or>\n            i = nrows_iarray A\n         then (i, A) else (Suc i, Gauss_Jordan_in_ij_iarrays A i k))", "by auto"], ["", "lemma fst_snd_Gauss_Jordan_column_k_iarrays_PA_eq: \nshows \"fst (snd (Gauss_Jordan_column_k_iarrays_PA (P,i,A) k)) = fst (Gauss_Jordan_column_k_iarrays (i,A) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_iarrays_PA (P, i, A) k)) =\n    fst (Gauss_Jordan_column_k_iarrays (i, A) k)", "unfolding Gauss_Jordan_column_k_iarrays_PA_def Gauss_Jordan_column_k_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (let Pa = fst (P, i, A); ia = fst (snd (P, i, A));\n                  A = snd (snd (P, i, A))\n              in if vector_all_zero_from_index (ia, column_iarray k A) \\<or>\n                    ia = nrows_iarray A\n                 then (Pa, ia, A)\n                 else let Gauss = Gauss_Jordan_in_ij_iarrays_PA (Pa, A) ia k\n                      in (fst Gauss, ia + 1, snd Gauss))) =\n    fst (let Aa = snd (i, A); i = fst (i, A)\n         in if vector_all_zero_from_index (i, column_iarray k Aa) \\<or>\n               i = nrows_iarray Aa\n            then (i, Aa) else (Suc i, Gauss_Jordan_in_ij_iarrays Aa i k))", "unfolding Let_def snd_conv fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (if vector_all_zero_from_index (i, column_iarray k A) \\<or>\n                 i = nrows_iarray A\n              then (P, i, A)\n              else (fst (Gauss_Jordan_in_ij_iarrays_PA (P, A) i k), i + 1,\n                    snd (Gauss_Jordan_in_ij_iarrays_PA (P, A) i k)))) =\n    fst (if vector_all_zero_from_index (i, column_iarray k A) \\<or>\n            i = nrows_iarray A\n         then (i, A) else (Suc i, Gauss_Jordan_in_ij_iarrays A i k))", "by auto"], ["", "lemma foldl_Gauss_Jordan_column_k_iarrays_eq:\n\"snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) = foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n    foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k]", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<0]) =\n    foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<0]\n 2. \\<And>k.\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k] \\<Longrightarrow>\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<0]) =\n    foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<0]\n 2. \\<And>k.\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k] \\<Longrightarrow>\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<0]) =\n    foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<0]", "by simp"], ["proof (state)\nthis:\n  snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<0]) =\n  foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<0]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k] \\<Longrightarrow>\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]", "case (Suc k)"], ["proof (state)\nthis:\n  snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n  foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k] \\<Longrightarrow>\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]", "have suc_rw: \"[0..<Suc k] = [0..<k] @ [k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc k] = [0..<k] @ [k]", "by simp"], ["proof (state)\nthis:\n  [0..<Suc k] = [0..<k] @ [k]\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k] \\<Longrightarrow>\n       snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n       foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n    foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]", "unfolding suc_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (foldl Gauss_Jordan_column_k_iarrays_PA\n          (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) [k]) =\n    foldl Gauss_Jordan_column_k_iarrays\n     (foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k]) [k]", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_column_k_iarrays_PA\n          (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<k]) k) =\n    Gauss_Jordan_column_k_iarrays\n     (foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<k]) k", "by (metis Suc.hyps fst_snd_Gauss_Jordan_column_k_iarrays_PA_eq snd_snd_Gauss_Jordan_column_k_iarrays_PA_eq surjective_pairing)"], ["proof (state)\nthis:\n  snd (foldl Gauss_Jordan_column_k_iarrays_PA (B, 0, A) [0..<Suc k]) =\n  foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_Gauss_Jordan_upt_k_iarrays_PA:\nshows \"snd (Gauss_Jordan_upt_k_iarrays_PA A k) = (Gauss_Jordan_upt_k_iarrays A k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_upt_k_iarrays_PA A k) = Gauss_Jordan_upt_k_iarrays A k", "unfolding Gauss_Jordan_upt_k_iarrays_PA_def Gauss_Jordan_upt_k_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray A), 0, A) [0..<Suc k]),\n         snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                    (mat_iarray (1::'a) (nrows_iarray A), 0, A)\n                    [0..<Suc k]))) =\n    snd (foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k])", "using foldl_Gauss_Jordan_column_k_iarrays_eq[of \"mat_iarray 1 (nrows_iarray A)\" A \"Suc k\"]"], ["proof (prove)\nusing this:\n  snd (foldl Gauss_Jordan_column_k_iarrays_PA\n        (mat_iarray (1::'a) (nrows_iarray A), 0, A) [0..<Suc k]) =\n  foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k]\n\ngoal (1 subgoal):\n 1. snd (fst (foldl Gauss_Jordan_column_k_iarrays_PA\n               (mat_iarray (1::'a) (nrows_iarray A), 0, A) [0..<Suc k]),\n         snd (snd (foldl Gauss_Jordan_column_k_iarrays_PA\n                    (mat_iarray (1::'a) (nrows_iarray A), 0, A)\n                    [0..<Suc k]))) =\n    snd (foldl Gauss_Jordan_column_k_iarrays (0, A) [0..<Suc k])", "by simp"], ["", "lemma snd_Gauss_Jordan_iarrays_PA_eq: \"snd (Gauss_Jordan_iarrays_PA A) = Gauss_Jordan_iarrays A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_iarrays_PA A) = Gauss_Jordan_iarrays A", "unfolding Gauss_Jordan_iarrays_def Gauss_Jordan_iarrays_PA_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_upt_k_iarrays_PA A (ncols_iarray A - 1)) =\n    Gauss_Jordan_upt_k_iarrays A (ncols_iarray A - 1)", "using snd_Gauss_Jordan_upt_k_iarrays_PA"], ["proof (prove)\nusing this:\n  snd (Gauss_Jordan_upt_k_iarrays_PA ?A ?k) =\n  Gauss_Jordan_upt_k_iarrays ?A ?k\n\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_upt_k_iarrays_PA A (ncols_iarray A - 1)) =\n    Gauss_Jordan_upt_k_iarrays A (ncols_iarray A - 1)", "by auto"], ["", "end"]]}