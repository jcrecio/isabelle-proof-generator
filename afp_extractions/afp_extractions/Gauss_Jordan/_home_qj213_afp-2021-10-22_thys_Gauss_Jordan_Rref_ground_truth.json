{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan/Rref.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan", "problem_names": ["lemma is_zero_row_upt_ncols:\n  fixes A::\"'a::{zero}^'columns::{mod_type}^'rows\"\n  shows \"is_zero_row_upt_k i (ncols A) A = (\\<forall>j::'columns. A $ i $ j = 0)\"", "lemma is_zero_row_eq_row_zero: \"is_zero_row a A = (row a A = 0)\"", "lemma not_is_zero_row_upt_suc:\n  assumes \"\\<not> is_zero_row_upt_k i (Suc k) A\"\n  and \"\\<forall>i. A $ i $ (from_nat k) = 0\"\n  shows \"\\<not> is_zero_row_upt_k i k A\"", "lemma is_zero_row_upt_k_suc:\n  assumes \"is_zero_row_upt_k i k A\"\n  and \"A $ i $ (from_nat k) = 0\"\n  shows \"is_zero_row_upt_k i (Suc k) A\"", "lemma is_zero_row_utp_0:\n  shows \"is_zero_row_upt_k m 0 A\"", "lemma is_zero_row_utp_0':\n  shows \"\\<forall>m. is_zero_row_upt_k m 0 A\"", "lemma is_zero_row_upt_k_le:\n  assumes \"is_zero_row_upt_k i (Suc k) A\"\n  shows \"is_zero_row_upt_k i k A\"", "lemma is_zero_row_imp_is_zero_row_upt:\nassumes \"is_zero_row i A\"\nshows \"is_zero_row_upt_k i k A\"", "lemma rref_upt_0: \"reduced_row_echelon_form_upt_k A 0\"", "lemma rref_upt_condition1:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \"(\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row_upt_k j k A))\"", "lemma rref_upt_condition2:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \"(\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1)\"", "lemma rref_upt_condition3:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \"(\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row_upt_k i k A) \\<and> \\<not> (is_zero_row_upt_k (i+1) k A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0)))\"", "lemma rref_upt_condition4:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \" (\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\"", "lemma rref_upt_condition1_explicit:\nassumes \"reduced_row_echelon_form_upt_k A k\"\nand \"is_zero_row_upt_k i k A\"\nand \"j>i\"\nshows \"is_zero_row_upt_k j k A\"", "lemma rref_upt_condition2_explicit:\nassumes rref_A: \"reduced_row_echelon_form_upt_k A k\"\nand \"\\<not> is_zero_row_upt_k i k A\"\nshows \"A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1\"", "lemma rref_upt_condition3_explicit:\nassumes \"reduced_row_echelon_form_upt_k A k\"\nand \"i < i + 1\"  \nand \"\\<not> is_zero_row_upt_k i k A\"\nand \"\\<not> is_zero_row_upt_k (i + 1) k A \"\nshows \"(LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i + 1) $ n \\<noteq> 0)\"", "lemma rref_upt_condition4_explicit:\nassumes \"reduced_row_echelon_form_upt_k A k\"\nand \"\\<not> is_zero_row_upt_k i k A\"\nand \"i \\<noteq> j\"\nshows \"A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0\"", "lemma reduced_row_echelon_form_upt_k_intro:\n  assumes \"(\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row_upt_k j k A))\"\n  and \"(\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1)\"\n  and \"(\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row_upt_k i k A) \\<and> \\<not> (is_zero_row_upt_k (i+1) k A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0)))\"\n  and \"(\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\"\n  shows \"reduced_row_echelon_form_upt_k A k\"", "lemma rref_suc_imp_rref:\n  fixes A::\"'a::{semiring_1}^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"reduced_row_echelon_form_upt_k A (Suc k)\"\n  and k_le_card: \"Suc k < ncols A\"\n  shows \"reduced_row_echelon_form_upt_k A k\"", "lemma reduced_row_echelon_if_all_zero:\n  assumes all_zero: \"\\<forall>n. is_zero_row_upt_k n k A\"\n  shows \"reduced_row_echelon_form_upt_k A k\"", "lemma reduced_row_echelon_form_def': \n\"reduced_row_echelon_form A = \n  (\n    (\\<forall>i. is_zero_row i A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row j A)) \\<and>\n    (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1) \\<and>\n    (\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row i A) \\<and> \\<not> (is_zero_row (i+1) A) \\<longrightarrow> ((LEAST k. A $ i $ k \\<noteq> 0) < (LEAST k. A $ (i+1) $ k \\<noteq> 0))) \\<and>\n    (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST k. A $ i $ k \\<noteq> 0) = 0))\n  )\"", "lemma rref_condition1:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \"(\\<forall>i. is_zero_row i A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row j A))\"", "lemma rref_condition2:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \" (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1)\"", "lemma rref_condition3:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \"(\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row i A) \\<and> \\<not> (is_zero_row (i+1) A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0)))\"", "lemma rref_condition4:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \" (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\"", "lemma rref_condition1_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand \"is_zero_row i A\" \nshows \"\\<forall>j>i. is_zero_row j A\"", "lemma rref_condition2_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand \"\\<not> is_zero_row i A\"\nshows \"A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1\"", "lemma rref_condition3_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand i_le: \"i < i + 1\"\nand \"\\<not> is_zero_row i A\" and \"\\<not> is_zero_row (i + 1) A\"\nshows \"(LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i + 1) $ n \\<noteq> 0)\"", "lemma rref_condition4_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand \"\\<not> is_zero_row i A\" \nand \"i \\<noteq> j\"\nshows \"A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0\"", "lemma rref_condition3_equiv1:\nfixes A::\"'a::{one, zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand i_less_j: \"i<j\"\nand j_less_nrows: \"j<nrows A\"\nand not_zero_i: \"\\<not> is_zero_row (from_nat i) A\"\nand not_zero_j: \"\\<not> is_zero_row (from_nat j) A\"\nshows \"(LEAST n. A $ (from_nat i) $ n \\<noteq> 0) < (LEAST n. A $ (from_nat j) $ n \\<noteq> 0)\"", "lemma rref_implies_rref_upt:\nfixes A::\"'a::{one,zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nshows \"reduced_row_echelon_form_upt_k A k\"", "lemma rref_first_position_zero_imp_column_0:\nfixes A::\"'a::{one,zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand A_00: \"A $ 0 $ 0 = 0\"\nshows \"column 0 A = 0\"", "lemma rref_first_element:\nfixes A::\"'a::{one,zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand column_not_0: \"column 0 A \\<noteq> 0\"\nshows \"A $ 0 $ 0 = 1\""], "translations": [["", "lemma is_zero_row_upt_ncols:\n  fixes A::\"'a::{zero}^'columns::{mod_type}^'rows\"\n  shows \"is_zero_row_upt_k i (ncols A) A = (\\<forall>j::'columns. A $ i $ j = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i (ncols A) A = (\\<forall>j. A $ i $ j = (0::'a))", "unfolding is_zero_row_def is_zero_row_upt_k_def ncols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        mod_type_class.to_nat j < CARD('columns) \\<longrightarrow>\n        A $ i $ j = (0::'a)) =\n    (\\<forall>j. A $ i $ j = (0::'a))", "by auto"], ["", "corollary is_zero_row_def':\n  fixes A::\"'a::{zero}^'columns::{mod_type}^'rows\"\n  shows \"is_zero_row i A = (\\<forall>j::'columns. A $ i $ j = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row i A = (\\<forall>j. A $ i $ j = (0::'a))", "using is_zero_row_upt_ncols"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k ?i (ncols ?A) ?A = (\\<forall>j. ?A $ ?i $ j = (0::?'a))\n\ngoal (1 subgoal):\n 1. is_zero_row i A = (\\<forall>j. A $ i $ j = (0::'a))", "unfolding is_zero_row_def ncols_def"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k ?i CARD(?'columns) ?A =\n  (\\<forall>j. ?A $ ?i $ j = (0::?'a))\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i CARD('columns) A = (\\<forall>j. A $ i $ j = (0::'a))", "."], ["", "lemma is_zero_row_eq_row_zero: \"is_zero_row a A = (row a A = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row a A = (row a A = 0)", "unfolding is_zero_row_def' row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j. A $ a $ j = (0::'b)) = (vec_lambda (($) (A $ a)) = 0)", "unfolding vec_nth_inverse"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j. A $ a $ j = (0::'b)) = (A $ a = 0)", "unfolding vec_eq_iff zero_index"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j. A $ a $ j = (0::'b)) = (\\<forall>i. A $ a $ i = (0::'b))", ".."], ["", "lemma not_is_zero_row_upt_suc:\n  assumes \"\\<not> is_zero_row_upt_k i (Suc k) A\"\n  and \"\\<forall>i. A $ i $ (from_nat k) = 0\"\n  shows \"\\<not> is_zero_row_upt_k i k A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i k A", "using assms from_nat_to_nat_id"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k i (Suc k) A\n  \\<forall>i. A $ i $ mod_type_class.from_nat k = (0::'b)\n  mod_type_class.from_nat (mod_type_class.to_nat ?x) = ?x\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i k A", "using is_zero_row_upt_k_def less_SucE"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k i (Suc k) A\n  \\<forall>i. A $ i $ mod_type_class.from_nat k = (0::'b)\n  mod_type_class.from_nat (mod_type_class.to_nat ?x) = ?x\n  is_zero_row_upt_k ?i ?k ?A =\n  (\\<forall>j.\n      mod_type_class.to_nat j < ?k \\<longrightarrow> ?A $ ?i $ j = (0::?'a))\n  \\<lbrakk>?m < Suc ?n; ?m < ?n \\<Longrightarrow> ?P;\n   ?m = ?n \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i k A", "by metis"], ["", "lemma is_zero_row_upt_k_suc:\n  assumes \"is_zero_row_upt_k i k A\"\n  and \"A $ i $ (from_nat k) = 0\"\n  shows \"is_zero_row_upt_k i (Suc k) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i (Suc k) A", "using assms"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k i k A\n  A $ i $ mod_type_class.from_nat k = (0::'b)\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i (Suc k) A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < k \\<longrightarrow> A $ i $ j = (0::'b)\n  A $ i $ mod_type_class.from_nat k = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < Suc k \\<longrightarrow> A $ i $ j = (0::'b)", "using less_SucE to_nat_from_nat"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < k \\<longrightarrow> A $ i $ j = (0::'b)\n  A $ i $ mod_type_class.from_nat k = (0::'b)\n  \\<lbrakk>?m < Suc ?n; ?m < ?n \\<Longrightarrow> ?P;\n   ?m = ?n \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  mod_type_class.to_nat ?j = ?k \\<Longrightarrow>\n  mod_type_class.from_nat ?k = ?j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < Suc k \\<longrightarrow> A $ i $ j = (0::'b)", "by metis"], ["", "lemma is_zero_row_utp_0:\n  shows \"is_zero_row_upt_k m 0 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k m 0 A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < 0 \\<longrightarrow> A $ m $ j = (0::'b)", "by fast"], ["", "lemma is_zero_row_utp_0':\n  shows \"\\<forall>m. is_zero_row_upt_k m 0 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. is_zero_row_upt_k m 0 A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m j.\n       mod_type_class.to_nat j < 0 \\<longrightarrow> A $ m $ j = (0::'b)", "by fast"], ["", "lemma is_zero_row_upt_k_le:\n  assumes \"is_zero_row_upt_k i (Suc k) A\"\n  shows \"is_zero_row_upt_k i k A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i k A", "using assms"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k i (Suc k) A\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i k A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < Suc k \\<longrightarrow> A $ i $ j = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < k \\<longrightarrow> A $ i $ j = (0::'b)", "by simp"], ["", "lemma is_zero_row_imp_is_zero_row_upt:\nassumes \"is_zero_row i A\"\nshows \"is_zero_row_upt_k i k A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i k A", "using assms"], ["proof (prove)\nusing this:\n  is_zero_row i A\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i k A", "unfolding  is_zero_row_def is_zero_row_upt_k_def ncols_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < CARD('c) \\<longrightarrow>\n     A $ i $ j = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < k \\<longrightarrow> A $ i $ j = (0::'b)", "by simp"], ["", "subsubsection\\<open>Definition of reduced row echelon form up to a column\\<close>"], ["", "text\\<open>This definition returns True if a matrix is in reduced row echelon form up to the column k (not included), otherwise False.\\<close>"], ["", "(*In the third condition, i<i+1 is assumed to avoid that row i can be the last row (in that case, i+1 would be the first row):*)"], ["", "definition reduced_row_echelon_form_upt_k :: \"'a::{zero, one}^'m::{mod_type}^'n::{finite, ord, plus, one} => nat => bool\"\n  where \"reduced_row_echelon_form_upt_k A k = \n  (\n    (\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row_upt_k j k A)) \\<and>\n    (\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1) \\<and>\n    (\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row_upt_k i k A) \\<and> \\<not> (is_zero_row_upt_k (i+1) k A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0))) \\<and> \n    (\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\n  )\""], ["", "lemma rref_upt_0: \"reduced_row_echelon_form_upt_k A 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k A 0", "unfolding reduced_row_echelon_form_upt_k_def is_zero_row_upt_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        (\\<forall>j.\n            mod_type_class.to_nat j < 0 \\<longrightarrow>\n            A $ i $ j = (0::'a)) \\<longrightarrow>\n        \\<not> (\\<exists>j>i.\n                   \\<not> (\\<forall>ja.\n                              mod_type_class.to_nat ja < 0 \\<longrightarrow>\n                              A $ j $ ja = (0::'a)))) \\<and>\n    (\\<forall>i.\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < 0 \\<longrightarrow>\n                   A $ i $ j = (0::'a)) \\<longrightarrow>\n        A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n    (\\<forall>i.\n        i < i + (1::'c) \\<and>\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < 0 \\<longrightarrow>\n                   A $ i $ j = (0::'a)) \\<and>\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < 0 \\<longrightarrow>\n                   A $ (i + (1::'c)) $ j = (0::'a)) \\<longrightarrow>\n        (LEAST n. A $ i $ n \\<noteq> (0::'a))\n        < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))) \\<and>\n    (\\<forall>i.\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < 0 \\<longrightarrow>\n                   A $ i $ j = (0::'a)) \\<longrightarrow>\n        (\\<forall>j.\n            i \\<noteq> j \\<longrightarrow>\n            A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)))", "by auto"], ["", "lemma rref_upt_condition1:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \"(\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row_upt_k j k A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "unfolding reduced_row_echelon_form_upt_k_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row_upt_k i k A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row_upt_k i k A \\<and>\n      \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n      (LEAST n. A $ i $ n \\<noteq> (0::'a))\n      < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "by simp"], ["", "lemma rref_upt_condition2:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \"(\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "unfolding reduced_row_echelon_form_upt_k_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row_upt_k i k A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row_upt_k i k A \\<and>\n      \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n      (LEAST n. A $ i $ n \\<noteq> (0::'a))\n      < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "by simp"], ["", "lemma rref_upt_condition3:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \"(\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row_upt_k i k A) \\<and> \\<not> (is_zero_row_upt_k (i+1) k A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'c) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'c) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "unfolding reduced_row_echelon_form_upt_k_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row_upt_k i k A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row_upt_k i k A \\<and>\n      \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n      (LEAST n. A $ i $ n \\<noteq> (0::'a))\n      < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'c) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "by simp"], ["", "lemma rref_upt_condition4:\n  assumes r: \"reduced_row_echelon_form_upt_k A k\"\n  shows \" (\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "unfolding reduced_row_echelon_form_upt_k_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row_upt_k i k A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row_upt_k i k A \\<and>\n      \\<not> is_zero_row_upt_k (i + (1::'c)) k A \\<longrightarrow>\n      (LEAST n. A $ i $ n \\<noteq> (0::'a))\n      < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "by simp"], ["", "text\\<open>Explicit lemmas for each condition\\<close>"], ["", "lemma rref_upt_condition1_explicit:\nassumes \"reduced_row_echelon_form_upt_k A k\"\nand \"is_zero_row_upt_k i k A\"\nand \"j>i\"\nshows \"is_zero_row_upt_k j k A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k j k A", "using assms rref_upt_condition1"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n  is_zero_row_upt_k i k A\n  i < j\n  reduced_row_echelon_form_upt_k ?A ?k \\<Longrightarrow>\n  \\<forall>i.\n     is_zero_row_upt_k i ?k ?A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j ?k ?A)\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k j k A", "by blast"], ["", "lemma rref_upt_condition2_explicit:\nassumes rref_A: \"reduced_row_echelon_form_upt_k A k\"\nand \"\\<not> is_zero_row_upt_k i k A\"\nshows \"A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "using rref_upt_condition2 assms"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k ?A ?k \\<Longrightarrow>\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i ?k ?A \\<longrightarrow>\n     ?A $ i $ (LEAST k. ?A $ i $ k \\<noteq> (0::?'a)) = (1::?'a)\n  reduced_row_echelon_form_upt_k A k\n  \\<not> is_zero_row_upt_k i k A\n\ngoal (1 subgoal):\n 1. A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "by blast"], ["", "lemma rref_upt_condition3_explicit:\nassumes \"reduced_row_echelon_form_upt_k A k\"\nand \"i < i + 1\"  \nand \"\\<not> is_zero_row_upt_k i k A\"\nand \"\\<not> is_zero_row_upt_k (i + 1) k A \"\nshows \"(LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i + 1) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "using assms rref_upt_condition3"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n  i < i + (1::'c)\n  \\<not> is_zero_row_upt_k i k A\n  \\<not> is_zero_row_upt_k (i + (1::'c)) k A\n  reduced_row_echelon_form_upt_k ?A ?k \\<Longrightarrow>\n  \\<forall>i.\n     i < i + (1::?'c) \\<and>\n     \\<not> is_zero_row_upt_k i ?k ?A \\<and>\n     \\<not> is_zero_row_upt_k (i + (1::?'c)) ?k ?A \\<longrightarrow>\n     (LEAST n. ?A $ i $ n \\<noteq> (0::?'a))\n     < (LEAST n. ?A $ (i + (1::?'c)) $ n \\<noteq> (0::?'a))\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "by blast"], ["", "lemma rref_upt_condition4_explicit:\nassumes \"reduced_row_echelon_form_upt_k A k\"\nand \"\\<not> is_zero_row_upt_k i k A\"\nand \"i \\<noteq> j\"\nshows \"A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)", "using assms rref_upt_condition4"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form_upt_k A k\n  \\<not> is_zero_row_upt_k i k A\n  i \\<noteq> j\n  reduced_row_echelon_form_upt_k ?A ?k \\<Longrightarrow>\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i ?k ?A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         ?A $ j $ (LEAST n. ?A $ i $ n \\<noteq> (0::?'a)) = (0::?'a))\n\ngoal (1 subgoal):\n 1. A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)", "by auto"], ["", "text\\<open>Intro lemma and general properties\\<close>"], ["", "lemma reduced_row_echelon_form_upt_k_intro:\n  assumes \"(\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row_upt_k j k A))\"\n  and \"(\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1)\"\n  and \"(\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row_upt_k i k A) \\<and> \\<not> (is_zero_row_upt_k (i+1) k A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0)))\"\n  and \"(\\<forall>i. \\<not> (is_zero_row_upt_k i k A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\"\n  shows \"reduced_row_echelon_form_upt_k A k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k A k", "unfolding reduced_row_echelon_form_upt_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        is_zero_row_upt_k i k A \\<longrightarrow>\n        \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)) \\<and>\n    (\\<forall>i.\n        \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n        A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'b)) = (1::'b)) \\<and>\n    (\\<forall>i.\n        i < i + (1::'a) \\<and>\n        \\<not> is_zero_row_upt_k i k A \\<and>\n        \\<not> is_zero_row_upt_k (i + (1::'a)) k A \\<longrightarrow>\n        (LEAST n. A $ i $ n \\<noteq> (0::'b))\n        < (LEAST n. A $ (i + (1::'a)) $ n \\<noteq> (0::'b))) \\<and>\n    (\\<forall>i.\n        \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n        (\\<forall>j.\n            i \\<noteq> j \\<longrightarrow>\n            A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'b)) = (0::'b)))", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     is_zero_row_upt_k i k A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'b)) = (1::'b)\n  \\<forall>i.\n     i < i + (1::'a) \\<and>\n     \\<not> is_zero_row_upt_k i k A \\<and>\n     \\<not> is_zero_row_upt_k (i + (1::'a)) k A \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'b))\n     < (LEAST n. A $ (i + (1::'a)) $ n \\<noteq> (0::'b))\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'b)) = (0::'b))\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        is_zero_row_upt_k i k A \\<longrightarrow>\n        \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)) \\<and>\n    (\\<forall>i.\n        \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n        A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'b)) = (1::'b)) \\<and>\n    (\\<forall>i.\n        i < i + (1::'a) \\<and>\n        \\<not> is_zero_row_upt_k i k A \\<and>\n        \\<not> is_zero_row_upt_k (i + (1::'a)) k A \\<longrightarrow>\n        (LEAST n. A $ i $ n \\<noteq> (0::'b))\n        < (LEAST n. A $ (i + (1::'a)) $ n \\<noteq> (0::'b))) \\<and>\n    (\\<forall>i.\n        \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n        (\\<forall>j.\n            i \\<noteq> j \\<longrightarrow>\n            A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'b)) = (0::'b)))", "by fast"], ["", "lemma rref_suc_imp_rref:\n  fixes A::\"'a::{semiring_1}^'n::{mod_type}^'m::{mod_type}\"\n  assumes r: \"reduced_row_echelon_form_upt_k A (Suc k)\"\n  and k_le_card: \"Suc k < ncols A\"\n  shows \"reduced_row_echelon_form_upt_k A k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k A k", "proof (rule reduced_row_echelon_form_upt_k_intro)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n 2. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n 3. \\<forall>i.\n       i < i + (1::'m) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'m)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n 4. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "show \"\\<forall>i. \\<not> is_zero_row_upt_k i k A \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "using rref_upt_condition2[OF r] less_SucI"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i (Suc k) A \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<not> (\\<forall>j.\n                mod_type_class.to_nat j < Suc k \\<longrightarrow>\n                A $ i $ j = (0::'a)) \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> (\\<forall>j.\n                  mod_type_class.to_nat j < k \\<longrightarrow>\n                  A $ i $ j = (0::'a)) \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n\ngoal (3 subgoals):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n 2. \\<forall>i.\n       i < i + (1::'m) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'m)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n 3. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "show \"\\<forall>i. i < i + 1 \\<and> \\<not> is_zero_row_upt_k i k A \\<and> \\<not> is_zero_row_upt_k (i + 1) k A \\<longrightarrow> (LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i + 1) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'m) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'m)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))", "using rref_upt_condition3[OF r] less_SucI"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < i + (1::'m) \\<and>\n     \\<not> is_zero_row_upt_k i (Suc k) A \\<and>\n     \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'a))\n     < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'m) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'m)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < i + (1::'m) \\<and>\n     \\<not> (\\<forall>j.\n                mod_type_class.to_nat j < Suc k \\<longrightarrow>\n                A $ i $ j = (0::'a)) \\<and>\n     \\<not> (\\<forall>j.\n                mod_type_class.to_nat j < Suc k \\<longrightarrow>\n                A $ (i + (1::'m)) $ j = (0::'a)) \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'a))\n     < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'m) \\<and>\n       \\<not> (\\<forall>j.\n                  mod_type_class.to_nat j < k \\<longrightarrow>\n                  A $ i $ j = (0::'a)) \\<and>\n       \\<not> (\\<forall>j.\n                  mod_type_class.to_nat j < k \\<longrightarrow>\n                  A $ (i + (1::'m)) $ j = (0::'a)) \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     i < i + (1::'m) \\<and>\n     \\<not> is_zero_row_upt_k i k A \\<and>\n     \\<not> is_zero_row_upt_k (i + (1::'m)) k A \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'a))\n     < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n\ngoal (2 subgoals):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n 2. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "show \"\\<forall>i. \\<not> is_zero_row_upt_k i k A \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "using rref_upt_condition4[OF r] less_SucI"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i (Suc k) A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<not> (\\<forall>j.\n                mod_type_class.to_nat j < Suc k \\<longrightarrow>\n                A $ i $ j = (0::'a)) \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> (\\<forall>j.\n                  mod_type_class.to_nat j < k \\<longrightarrow>\n                  A $ i $ j = (0::'a)) \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "show \"\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "proof (clarify, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "assume zero_i: \"is_zero_row_upt_k i k A\"\n      and i_less_j: \"i < j\"\n      and not_zero_j: \"\\<not> is_zero_row_upt_k j k A\""], ["proof (state)\nthis:\n  is_zero_row_upt_k i k A\n  i < j\n  \\<not> is_zero_row_upt_k j k A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have not_zero_j_suc: \"\\<not> is_zero_row_upt_k j (Suc k) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k j (Suc k) A", "using not_zero_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k j k A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k j (Suc k) A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>ja.\n             mod_type_class.to_nat ja < k \\<longrightarrow>\n             A $ j $ ja = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>ja.\n               mod_type_class.to_nat ja < Suc k \\<longrightarrow>\n               A $ j $ ja = (0::'a))", "by fastforce"], ["proof (state)\nthis:\n  \\<not> is_zero_row_upt_k j (Suc k) A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "hence not_zero_i_suc: \"\\<not> is_zero_row_upt_k i (Suc k) A\""], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k j (Suc k) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i (Suc k) A", "using rref_upt_condition1[OF r] i_less_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k j (Suc k) A\n  \\<forall>i.\n     is_zero_row_upt_k i (Suc k) A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j (Suc k) A)\n  i < j\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i (Suc k) A", "by fast"], ["proof (state)\nthis:\n  \\<not> is_zero_row_upt_k i (Suc k) A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have not_zero_i_plus_suc: \"\\<not> is_zero_row_upt_k (i+1) (Suc k) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "proof (cases \"j=i+1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n 2. j \\<noteq> i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "case True"], ["proof (state)\nthis:\n  j = i + (1::'m)\n\ngoal (2 subgoals):\n 1. j = i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n 2. j \\<noteq> i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "thus ?thesis"], ["proof (prove)\nusing this:\n  j = i + (1::'m)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "using not_zero_j_suc"], ["proof (prove)\nusing this:\n  j = i + (1::'m)\n  \\<not> is_zero_row_upt_k j (Suc k) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "by simp"], ["proof (state)\nthis:\n  \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n\ngoal (1 subgoal):\n 1. j \\<noteq> i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "case False"], ["proof (state)\nthis:\n  j \\<noteq> i + (1::'m)\n\ngoal (1 subgoal):\n 1. j \\<noteq> i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "have \"i+1<j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + (1::'m) < j", "by (rule Suc_less[OF i_less_j False[symmetric]])"], ["proof (state)\nthis:\n  i + (1::'m) < j\n\ngoal (1 subgoal):\n 1. j \\<noteq> i + (1::'m) \\<Longrightarrow>\n    \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "thus ?thesis"], ["proof (prove)\nusing this:\n  i + (1::'m) < j\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "using rref_upt_condition1[OF r] not_zero_j_suc"], ["proof (prove)\nusing this:\n  i + (1::'m) < j\n  \\<forall>i.\n     is_zero_row_upt_k i (Suc k) A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j (Suc k) A)\n  \\<not> is_zero_row_upt_k j (Suc k) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "by blast"], ["proof (state)\nthis:\n  \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A", "obtain n where a: \"A $ (i+1) $ n \\<noteq> 0\" and n_less_suc: \"to_nat n < Suc k\""], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>A $ (i + (1::'m)) $ n \\<noteq> (0::'a);\n         mod_type_class.to_nat n < Suc k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j.\n             mod_type_class.to_nat j < Suc k \\<longrightarrow>\n             A $ (i + (1::'m)) $ j = (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>A $ (i + (1::'m)) $ n \\<noteq> (0::'a);\n         mod_type_class.to_nat n < Suc k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A $ (i + (1::'m)) $ n \\<noteq> (0::'a)\n  mod_type_class.to_nat n < Suc k\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have \"(LEAST n. A $ (i+1) $ n \\<noteq> 0) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a)) \\<le> n", "by (rule Least_le, simp add: a)"], ["proof (state)\nthis:\n  (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a)) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a)) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have \"... \\<le> from_nat k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> mod_type_class.from_nat k", "by (metis Suc_lessD from_nat_mono' from_nat_to_nat_id k_le_card less_Suc_eq_le n_less_suc ncols_def)"], ["proof (state)\nthis:\n  n \\<le> mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  \\<le> mod_type_class.from_nat k", "have least_le: \"(LEAST n. A $ (i + 1) $ n \\<noteq> 0) \\<le> from_nat k\""], ["proof (prove)\nusing this:\n  (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  \\<le> mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n    \\<le> mod_type_class.from_nat k", "."], ["proof (state)\nthis:\n  (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  \\<le> mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have least_eq_k: \"(LEAST n. A $ i $ n \\<noteq> 0) = from_nat k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a)) = mod_type_class.from_nat k", "proof (rule Least_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ i $ mod_type_class.from_nat k \\<noteq> (0::'a)\n 2. \\<And>y.\n       A $ i $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       mod_type_class.from_nat k \\<le> y", "show \"A $ i $ from_nat k \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ i $ mod_type_class.from_nat k \\<noteq> (0::'a)", "using not_zero_i_suc zero_i"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k i (Suc k) A\n  is_zero_row_upt_k i k A\n\ngoal (1 subgoal):\n 1. A $ i $ mod_type_class.from_nat k \\<noteq> (0::'a)", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j.\n             mod_type_class.to_nat j < Suc k \\<longrightarrow>\n             A $ i $ j = (0::'a))\n  \\<forall>j.\n     mod_type_class.to_nat j < k \\<longrightarrow> A $ i $ j = (0::'a)\n\ngoal (1 subgoal):\n 1. A $ i $ mod_type_class.from_nat k \\<noteq> (0::'a)", "by (metis from_nat_to_nat_id less_SucE)"], ["proof (state)\nthis:\n  A $ i $ mod_type_class.from_nat k \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       A $ i $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       mod_type_class.from_nat k \\<le> y", "show \"\\<And>y. A $ i $ y \\<noteq> 0 \\<Longrightarrow> from_nat k \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       A $ i $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       mod_type_class.from_nat k \\<le> y", "by (metis is_zero_row_upt_k_def not_le_imp_less to_nat_le zero_i)"], ["proof (state)\nthis:\n  A $ i $ ?y \\<noteq> (0::'a) \\<Longrightarrow>\n  mod_type_class.from_nat k \\<le> ?y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ i $ n \\<noteq> (0::'a)) = mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have i_less: \"i<i+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < i + (1::'m)", "proof (rule Suc_le', rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i + (1::'m) \\<noteq> (0::'m) \\<Longrightarrow> False", "assume \"\\<not> i + 1 \\<noteq> 0\""], ["proof (state)\nthis:\n  \\<not> i + (1::'m) \\<noteq> (0::'m)\n\ngoal (1 subgoal):\n 1. \\<not> i + (1::'m) \\<noteq> (0::'m) \\<Longrightarrow> False", "hence \"i+1=0\""], ["proof (prove)\nusing this:\n  \\<not> i + (1::'m) \\<noteq> (0::'m)\n\ngoal (1 subgoal):\n 1. i + (1::'m) = (0::'m)", "by simp"], ["proof (state)\nthis:\n  i + (1::'m) = (0::'m)\n\ngoal (1 subgoal):\n 1. \\<not> i + (1::'m) \\<noteq> (0::'m) \\<Longrightarrow> False", "hence \"i=-1\""], ["proof (prove)\nusing this:\n  i + (1::'m) = (0::'m)\n\ngoal (1 subgoal):\n 1. i = - (1::'m)", "using diff_0 diff_add_cancel diff_minus_eq_add"], ["proof (prove)\nusing this:\n  i + (1::'m) = (0::'m)\n  (0::?'a) - ?a = - ?a\n  ?a - ?b + ?b = ?a\n  ?a - - ?b = ?a + ?b\n\ngoal (1 subgoal):\n 1. i = - (1::'m)", "by metis"], ["proof (state)\nthis:\n  i = - (1::'m)\n\ngoal (1 subgoal):\n 1. \\<not> i + (1::'m) \\<noteq> (0::'m) \\<Longrightarrow> False", "hence \"j <= i\""], ["proof (prove)\nusing this:\n  i = - (1::'m)\n\ngoal (1 subgoal):\n 1. j \\<le> i", "using Greatest_is_minus_1"], ["proof (prove)\nusing this:\n  i = - (1::'m)\n  \\<forall>a. a \\<le> - (1::?'a)\n\ngoal (1 subgoal):\n 1. j \\<le> i", "by blast"], ["proof (state)\nthis:\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> i + (1::'m) \\<noteq> (0::'m) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. False", "using i_less_j"], ["proof (prove)\nusing this:\n  j \\<le> i\n  i < j\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < i + (1::'m)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "have \"from_nat k < (LEAST n. A $ (i+1) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.from_nat k\n    < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))", "using rref_upt_condition3[OF r] i_less not_zero_i_suc not_zero_i_plus_suc least_eq_k"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < i + (1::'m) \\<and>\n     \\<not> is_zero_row_upt_k i (Suc k) A \\<and>\n     \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'a))\n     < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  i < i + (1::'m)\n  \\<not> is_zero_row_upt_k i (Suc k) A\n  \\<not> is_zero_row_upt_k (i + (1::'m)) (Suc k) A\n  (LEAST n. A $ i $ n \\<noteq> (0::'a)) = mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat k\n    < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))", "by fastforce"], ["proof (state)\nthis:\n  mod_type_class.from_nat k\n  < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat k\n  < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. False", "using least_le"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat k\n  < (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  (LEAST n. A $ (i + (1::'m)) $ n \\<noteq> (0::'a))\n  \\<le> mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     is_zero_row_upt_k i k A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_row_echelon_if_all_zero:\n  assumes all_zero: \"\\<forall>n. is_zero_row_upt_k n k A\"\n  shows \"reduced_row_echelon_form_upt_k A k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k A k", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n. is_zero_row_upt_k n k A\n\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k A k", "unfolding reduced_row_echelon_form_upt_k_def is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>n j.\n     mod_type_class.to_nat j < k \\<longrightarrow> A $ n $ j = (0::'b)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        (\\<forall>j.\n            mod_type_class.to_nat j < k \\<longrightarrow>\n            A $ i $ j = (0::'b)) \\<longrightarrow>\n        \\<not> (\\<exists>j>i.\n                   \\<not> (\\<forall>ja.\n                              mod_type_class.to_nat ja < k \\<longrightarrow>\n                              A $ j $ ja = (0::'b)))) \\<and>\n    (\\<forall>i.\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < k \\<longrightarrow>\n                   A $ i $ j = (0::'b)) \\<longrightarrow>\n        A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'b)) = (1::'b)) \\<and>\n    (\\<forall>i.\n        i < i + (1::'a) \\<and>\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < k \\<longrightarrow>\n                   A $ i $ j = (0::'b)) \\<and>\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < k \\<longrightarrow>\n                   A $ (i + (1::'a)) $ j = (0::'b)) \\<longrightarrow>\n        (LEAST n. A $ i $ n \\<noteq> (0::'b))\n        < (LEAST n. A $ (i + (1::'a)) $ n \\<noteq> (0::'b))) \\<and>\n    (\\<forall>i.\n        \\<not> (\\<forall>j.\n                   mod_type_class.to_nat j < k \\<longrightarrow>\n                   A $ i $ j = (0::'b)) \\<longrightarrow>\n        (\\<forall>j.\n            i \\<noteq> j \\<longrightarrow>\n            A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'b)) = (0::'b)))", "by auto"], ["", "subsubsection\\<open>The definition of reduced row echelon form\\<close>"], ["", "text\\<open>Definition of reduced row echelon form, based on \\<open>reduced_row_echelon_form_upt_k_def\\<close>\\<close>"], ["", "definition reduced_row_echelon_form :: \"'a::{zero, one}^'m::{mod_type}^'n::{finite, ord, plus, one} => bool\"\n  where \"reduced_row_echelon_form A = reduced_row_echelon_form_upt_k A (ncols A)\""], ["", "text\\<open>Equivalence between our definition of reduced row echelon form and the one presented\nin Steven Roman's book: Advanced Linear Algebra.\\<close>"], ["", "lemma reduced_row_echelon_form_def': \n\"reduced_row_echelon_form A = \n  (\n    (\\<forall>i. is_zero_row i A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row j A)) \\<and>\n    (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1) \\<and>\n    (\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row i A) \\<and> \\<not> (is_zero_row (i+1) A) \\<longrightarrow> ((LEAST k. A $ i $ k \\<noteq> 0) < (LEAST k. A $ (i+1) $ k \\<noteq> 0))) \\<and>\n    (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST k. A $ i $ k \\<noteq> 0) = 0))\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A =\n    ((\\<forall>i.\n         is_zero_row i A \\<longrightarrow>\n         \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)) \\<and>\n     (\\<forall>i.\n         \\<not> is_zero_row i A \\<longrightarrow>\n         A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n     (\\<forall>i.\n         i < i + (1::'c) \\<and>\n         \\<not> is_zero_row i A \\<and>\n         \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n         (LEAST k. A $ i $ k \\<noteq> (0::'a))\n         < (LEAST k. A $ (i + (1::'c)) $ k \\<noteq> (0::'a))) \\<and>\n     (\\<forall>i.\n         \\<not> is_zero_row i A \\<longrightarrow>\n         (\\<forall>j.\n             i \\<noteq> j \\<longrightarrow>\n             A $ j $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (0::'a))))", "unfolding reduced_row_echelon_form_def reduced_row_echelon_form_upt_k_def is_zero_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>i.\n         is_zero_row_upt_k i (ncols A) A \\<longrightarrow>\n         \\<not> (\\<exists>j>i.\n                    \\<not> is_zero_row_upt_k j (ncols A) A)) \\<and>\n     (\\<forall>i.\n         \\<not> is_zero_row_upt_k i (ncols A) A \\<longrightarrow>\n         A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n     (\\<forall>i.\n         i < i + (1::'c) \\<and>\n         \\<not> is_zero_row_upt_k i (ncols A) A \\<and>\n         \\<not> is_zero_row_upt_k (i + (1::'c)) (ncols A)\n                 A \\<longrightarrow>\n         (LEAST n. A $ i $ n \\<noteq> (0::'a))\n         < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))) \\<and>\n     (\\<forall>i.\n         \\<not> is_zero_row_upt_k i (ncols A) A \\<longrightarrow>\n         (\\<forall>j.\n             i \\<noteq> j \\<longrightarrow>\n             A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)))) =\n    ((\\<forall>i.\n         is_zero_row_upt_k i (ncols A) A \\<longrightarrow>\n         \\<not> (\\<exists>j>i.\n                    \\<not> is_zero_row_upt_k j (ncols A) A)) \\<and>\n     (\\<forall>i.\n         \\<not> is_zero_row_upt_k i (ncols A) A \\<longrightarrow>\n         A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n     (\\<forall>i.\n         i < i + (1::'c) \\<and>\n         \\<not> is_zero_row_upt_k i (ncols A) A \\<and>\n         \\<not> is_zero_row_upt_k (i + (1::'c)) (ncols A)\n                 A \\<longrightarrow>\n         (LEAST k. A $ i $ k \\<noteq> (0::'a))\n         < (LEAST k. A $ (i + (1::'c)) $ k \\<noteq> (0::'a))) \\<and>\n     (\\<forall>i.\n         \\<not> is_zero_row_upt_k i (ncols A) A \\<longrightarrow>\n         (\\<forall>j.\n             i \\<noteq> j \\<longrightarrow>\n             A $ j $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (0::'a))))", ".."], ["", "subsection\\<open>Properties of the reduced row echelon form of a matrix\\<close>"], ["", "lemma rref_condition1:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \"(\\<forall>i. is_zero_row i A \\<longrightarrow> \\<not> (\\<exists>j. j>i \\<and> \\<not> is_zero_row j A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row i A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row i A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)", "unfolding reduced_row_echelon_form_def'"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row i A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row i A \\<and>\n      \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n      (LEAST k. A $ i $ k \\<noteq> (0::'a))\n      < (LEAST k. A $ (i + (1::'c)) $ k \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row i A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)", "by simp"], ["", "lemma rref_condition2:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \" (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row i A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row i A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "unfolding reduced_row_echelon_form_def'"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row i A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row i A \\<and>\n      \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n      (LEAST k. A $ i $ k \\<noteq> (0::'a))\n      < (LEAST k. A $ (i + (1::'c)) $ k \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row i A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "by simp"], ["", "lemma rref_condition3:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \"(\\<forall>i. i<i+1 \\<and> \\<not> (is_zero_row i A) \\<and> \\<not> (is_zero_row (i+1) A) \\<longrightarrow> ((LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i+1) $ n \\<noteq> 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'c) \\<and>\n       \\<not> is_zero_row i A \\<and>\n       \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'c) \\<and>\n       \\<not> is_zero_row i A \\<and>\n       \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "unfolding reduced_row_echelon_form_def'"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row i A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row i A \\<and>\n      \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n      (LEAST k. A $ i $ k \\<noteq> (0::'a))\n      < (LEAST k. A $ (i + (1::'c)) $ k \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'c) \\<and>\n       \\<not> is_zero_row i A \\<and>\n       \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "by simp"], ["", "lemma rref_condition4:\n  assumes r: \"reduced_row_echelon_form A\"\n  shows \" (\\<forall>i. \\<not> (is_zero_row i A) \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row i A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "using r"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row i A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "unfolding reduced_row_echelon_form_def'"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      is_zero_row i A \\<longrightarrow>\n      \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)) \\<and>\n  (\\<forall>i.\n      i < i + (1::'c) \\<and>\n      \\<not> is_zero_row i A \\<and>\n      \\<not> is_zero_row (i + (1::'c)) A \\<longrightarrow>\n      (LEAST k. A $ i $ k \\<noteq> (0::'a))\n      < (LEAST k. A $ (i + (1::'c)) $ k \\<noteq> (0::'a))) \\<and>\n  (\\<forall>i.\n      \\<not> is_zero_row i A \\<longrightarrow>\n      (\\<forall>j.\n          i \\<noteq> j \\<longrightarrow>\n          A $ j $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row i A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "by simp"], ["", "text\\<open>Explicit lemmas for each condition\\<close>"], ["", "lemma rref_condition1_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand \"is_zero_row i A\" \nshows \"\\<forall>j>i. is_zero_row j A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j>i. is_zero_row j A", "using rref_condition1 assms"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form ?A \\<Longrightarrow>\n  \\<forall>i.\n     is_zero_row i ?A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row j ?A)\n  reduced_row_echelon_form A\n  is_zero_row i A\n\ngoal (1 subgoal):\n 1. \\<forall>j>i. is_zero_row j A", "by blast"], ["", "lemma rref_condition2_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand \"\\<not> is_zero_row i A\"\nshows \"A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "using rref_condition2 assms"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form ?A \\<Longrightarrow>\n  \\<forall>i.\n     \\<not> is_zero_row i ?A \\<longrightarrow>\n     ?A $ i $ (LEAST k. ?A $ i $ k \\<noteq> (0::?'a)) = (1::?'a)\n  reduced_row_echelon_form A\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "by blast"], ["", "lemma rref_condition3_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand i_le: \"i < i + 1\"\nand \"\\<not> is_zero_row i A\" and \"\\<not> is_zero_row (i + 1) A\"\nshows \"(LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i + 1) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "using rref_condition3 assms"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form ?A \\<Longrightarrow>\n  \\<forall>i.\n     i < i + (1::?'c) \\<and>\n     \\<not> is_zero_row i ?A \\<and>\n     \\<not> is_zero_row (i + (1::?'c)) ?A \\<longrightarrow>\n     (LEAST n. ?A $ i $ n \\<noteq> (0::?'a))\n     < (LEAST n. ?A $ (i + (1::?'c)) $ n \\<noteq> (0::?'a))\n  reduced_row_echelon_form A\n  i < i + (1::'c)\n  \\<not> is_zero_row i A\n  \\<not> is_zero_row (i + (1::'c)) A\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ (i + (1::'c)) $ n \\<noteq> (0::'a))", "by blast"], ["", "lemma rref_condition4_explicit:\nassumes rref_A: \"reduced_row_echelon_form A\"\nand \"\\<not> is_zero_row i A\" \nand \"i \\<noteq> j\"\nshows \"A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)", "using rref_condition4 assms"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form ?A \\<Longrightarrow>\n  \\<forall>i.\n     \\<not> is_zero_row i ?A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         ?A $ j $ (LEAST n. ?A $ i $ n \\<noteq> (0::?'a)) = (0::?'a))\n  reduced_row_echelon_form A\n  \\<not> is_zero_row i A\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a)", "by blast"], ["", "text\\<open>Other properties and equivalences\\<close>"], ["", "lemma rref_condition3_equiv1:\nfixes A::\"'a::{one, zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand i_less_j: \"i<j\"\nand j_less_nrows: \"j<nrows A\"\nand not_zero_i: \"\\<not> is_zero_row (from_nat i) A\"\nand not_zero_j: \"\\<not> is_zero_row (from_nat j) A\"\nshows \"(LEAST n. A $ (from_nat i) $ n \\<noteq> 0) < (LEAST n. A $ (from_nat j) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))", "using i_less_j not_zero_j j_less_nrows"], ["proof (prove)\nusing this:\n  i < j\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n  j < nrows A\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))", "proof (induct j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < 0; \\<not> is_zero_row (mod_type_class.from_nat 0) A;\n     0 < nrows A\\<rbrakk>\n    \\<Longrightarrow> (LEAST n.\n                          A $ mod_type_class.from_nat i $ n \\<noteq>\n                          (0::'a))\n                      < (LEAST n.\n                            A $ mod_type_class.from_nat 0 $ n \\<noteq>\n                            (0::'a))\n 2. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "case 0"], ["proof (state)\nthis:\n  i < 0\n  \\<not> is_zero_row (mod_type_class.from_nat 0) A\n  0 < nrows A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i < 0; \\<not> is_zero_row (mod_type_class.from_nat 0) A;\n     0 < nrows A\\<rbrakk>\n    \\<Longrightarrow> (LEAST n.\n                          A $ mod_type_class.from_nat i $ n \\<noteq>\n                          (0::'a))\n                      < (LEAST n.\n                            A $ mod_type_class.from_nat 0 $ n \\<noteq>\n                            (0::'a))\n 2. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat 0 $ n \\<noteq> (0::'a))", "using \"0.prems\"(1)"], ["proof (prove)\nusing this:\n  i < 0\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat 0 $ n \\<noteq> (0::'a))", "by simp"], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat 0 $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "assume hyp: \"i < j \\<Longrightarrow> \\<not> is_zero_row (from_nat j) A \\<Longrightarrow> j < nrows A \\<Longrightarrow> (LEAST n. A $ from_nat i $ n \\<noteq> 0) < (LEAST n. A $ from_nat j $ n \\<noteq> 0)\"\nand i_less_suc_j: \"i < Suc j\"\nand not_zero_suc_j: \"\\<not> is_zero_row (from_nat (Suc j)) A\"\nand Suc_j_less_nrows: \"Suc j < nrows A\""], ["proof (state)\nthis:\n  \\<lbrakk>i < j; \\<not> is_zero_row (mod_type_class.from_nat j) A;\n   j < nrows A\\<rbrakk>\n  \\<Longrightarrow> (LEAST n.\n                        A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                    < (LEAST n.\n                          A $ mod_type_class.from_nat j $ n \\<noteq>\n                          (0::'a))\n  i < Suc j\n  \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A\n  Suc j < nrows A\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "have j_less: \"(from_nat j::'rows) < from_nat (j+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)", "by (rule from_nat_mono, auto simp add: Suc_j_less_nrows[unfolded nrows_def])"], ["proof (state)\nthis:\n  mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "hence not_zero_j: \"\\<not> is_zero_row (from_nat j) A\""], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "using rref_condition1[OF rref] not_zero_suc_j"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)\n  \\<forall>i.\n     is_zero_row i A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)\n  \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "unfolding Suc_eq_plus1"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)\n  \\<forall>i.\n     is_zero_row i A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)\n  \\<not> is_zero_row (mod_type_class.from_nat (j + 1)) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "by blast"], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>i < j;\n                 \\<not> is_zero_row (mod_type_class.from_nat j) A;\n                 j < nrows A\\<rbrakk>\n                \\<Longrightarrow> (LEAST n.\nA $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n                                  < (LEAST n.\n  A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a));\n        i < Suc j; \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A;\n        Suc j < nrows A\\<rbrakk>\n       \\<Longrightarrow> (LEAST n.\n                             A $ mod_type_class.from_nat i $ n \\<noteq>\n                             (0::'a))\n                         < (LEAST n.\n                               A $ mod_type_class.from_nat (Suc j) $\n                               n \\<noteq>\n                               (0::'a))", "show \"(LEAST n. A $ from_nat i $ n \\<noteq> 0) < (LEAST n. A $ from_nat (Suc j) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "proof (cases \"i=j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))\n 2. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "case True"], ["proof (state)\nthis:\n  i = j\n\ngoal (2 subgoals):\n 1. i = j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))\n 2. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "proof (unfold True Suc_eq_plus1 from_nat_suc, rule rref_condition3_explicit)"], ["proof (state)\ngoal (4 subgoals):\n 1. reduced_row_echelon_form A\n 2. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n 3. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 4. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"reduced_row_echelon_form A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A", "using rref"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A", "."], ["proof (state)\nthis:\n  reduced_row_echelon_form A\n\ngoal (3 subgoals):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n 2. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 3. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"(from_nat j::'rows) < from_nat j + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)", "using j_less"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)", "unfolding from_nat_suc"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)", "."], ["proof (state)\nthis:\n  mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n\ngoal (2 subgoals):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 2. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"\\<not> is_zero_row (from_nat j) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "using not_zero_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"\\<not> is_zero_row (from_nat j + 1) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "using not_zero_suc_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "unfolding Suc_eq_plus1 from_nat_suc"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "have \"(LEAST n. A $ from_nat i $ n \\<noteq> 0) < (LEAST n. A $ from_nat j $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))", "proof (rule hyp)"], ["proof (state)\ngoal (3 subgoals):\n 1. i < j\n 2. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 3. j < nrows A", "show \"i < j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j", "using False i_less_suc_j"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  i < Suc j\n\ngoal (1 subgoal):\n 1. i < j", "by simp"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 2. j < nrows A", "show \"\\<not> is_zero_row (from_nat j) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "using not_zero_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. j < nrows A", "show \"j < nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < nrows A", "using Suc_j_less_nrows"], ["proof (prove)\nusing this:\n  Suc j < nrows A\n\ngoal (1 subgoal):\n 1. j < nrows A", "by simp"], ["proof (state)\nthis:\n  j < nrows A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "also"], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "have \"... < (LEAST n. A $ from_nat (j+1) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (j + 1) $ n \\<noteq> (0::'a))", "proof (unfold from_nat_suc, rule rref_condition3_explicit)"], ["proof (state)\ngoal (4 subgoals):\n 1. reduced_row_echelon_form A\n 2. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n 3. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 4. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"reduced_row_echelon_form A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A", "using rref"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A", "."], ["proof (state)\nthis:\n  reduced_row_echelon_form A\n\ngoal (3 subgoals):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n 2. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 3. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"(from_nat j::'rows) < from_nat j + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)", "using j_less"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat (j + 1)\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)", "unfolding from_nat_suc"], ["proof (prove)\nusing this:\n  mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)", "."], ["proof (state)\nthis:\n  mod_type_class.from_nat j < mod_type_class.from_nat j + (1::'rows)\n\ngoal (2 subgoals):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A\n 2. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"\\<not> is_zero_row (from_nat j) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "using not_zero_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j) A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat j) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "show \"\\<not> is_zero_row (from_nat j + 1) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "using not_zero_suc_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat (Suc j)) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "unfolding Suc_eq_plus1 from_nat_suc"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat j + (1::'rows)) A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat j $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (j + 1) $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "finally"], ["proof (chain)\npicking this:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (j + 1) $ n \\<noteq> (0::'a))", "show \"(LEAST n. A $ from_nat i $ n \\<noteq> 0) < (LEAST n. A $ from_nat (Suc j) $ n \\<noteq> 0)\""], ["proof (prove)\nusing this:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (j + 1) $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))", "unfolding Suc_eq_plus1"], ["proof (prove)\nusing this:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (j + 1) $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ mod_type_class.from_nat (j + 1) $ n \\<noteq> (0::'a))", "."], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ mod_type_class.from_nat i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ mod_type_class.from_nat (Suc j) $ n \\<noteq> (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary rref_condition3_equiv:\nfixes A::\"'a::{one, zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand i_less_j: \"i<j\"\nand i: \"\\<not> is_zero_row i A\"\nand j: \"\\<not> is_zero_row j A\"\nshows \"(LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ j $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ j $ n \\<noteq> (0::'a))", "proof (rule rref_condition3_equiv1[of A \"to_nat i\" \"to_nat j\", unfolded from_nat_to_nat_id])"], ["proof (state)\ngoal (5 subgoals):\n 1. reduced_row_echelon_form A\n 2. mod_type_class.to_nat i < mod_type_class.to_nat j\n 3. mod_type_class.to_nat j < nrows A\n 4. \\<not> is_zero_row i A\n 5. \\<not> is_zero_row j A", "show \"reduced_row_echelon_form A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A", "using rref"], ["proof (prove)\nusing this:\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. reduced_row_echelon_form A", "."], ["proof (state)\nthis:\n  reduced_row_echelon_form A\n\ngoal (4 subgoals):\n 1. mod_type_class.to_nat i < mod_type_class.to_nat j\n 2. mod_type_class.to_nat j < nrows A\n 3. \\<not> is_zero_row i A\n 4. \\<not> is_zero_row j A", "show \"to_nat i < to_nat j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i < mod_type_class.to_nat j", "by (rule to_nat_mono[OF i_less_j])"], ["proof (state)\nthis:\n  mod_type_class.to_nat i < mod_type_class.to_nat j\n\ngoal (3 subgoals):\n 1. mod_type_class.to_nat j < nrows A\n 2. \\<not> is_zero_row i A\n 3. \\<not> is_zero_row j A", "show \"to_nat j < nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.to_nat j < nrows A", "using to_nat_less_card"], ["proof (prove)\nusing this:\n  mod_type_class.to_nat ?j < CARD(?'a)\n\ngoal (1 subgoal):\n 1. mod_type_class.to_nat j < nrows A", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  mod_type_class.to_nat ?j < CARD(?'a)\n\ngoal (1 subgoal):\n 1. mod_type_class.to_nat j < CARD('rows)", "."], ["proof (state)\nthis:\n  mod_type_class.to_nat j < nrows A\n\ngoal (2 subgoals):\n 1. \\<not> is_zero_row i A\n 2. \\<not> is_zero_row j A", "show \"\\<not> is_zero_row i A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A", "using i"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row j A", "show \"\\<not> is_zero_row j A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row j A", "using j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row j A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row j A", "."], ["proof (state)\nthis:\n  \\<not> is_zero_row j A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rref_implies_rref_upt:\nfixes A::\"'a::{one,zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nshows \"reduced_row_echelon_form_upt_k A k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k A k", "proof (rule reduced_row_echelon_form_upt_k_intro)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n 2. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n 3. \\<forall>i.\n       i < i + (1::'rows) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'rows)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'rows)) $ n \\<noteq> (0::'a))\n 4. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "show \"\\<forall>i. \\<not> is_zero_row_upt_k i k A \\<longrightarrow> A $ i $ (LEAST k. A $ i $ k \\<noteq> 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "using rref_condition2[OF rref] is_zero_row_imp_is_zero_row_upt"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<not> is_zero_row i A \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n  is_zero_row ?i ?A \\<Longrightarrow> is_zero_row_upt_k ?i ?k ?A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n\ngoal (3 subgoals):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n 2. \\<forall>i.\n       i < i + (1::'rows) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'rows)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'rows)) $ n \\<noteq> (0::'a))\n 3. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "show \"\\<forall>i. i < i + 1 \\<and> \\<not> is_zero_row_upt_k i k A \\<and> \\<not> is_zero_row_upt_k (i + 1) k A \\<longrightarrow> (LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ (i + 1) $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'rows) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'rows)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'rows)) $ n \\<noteq> (0::'a))", "using rref_condition3[OF rref] is_zero_row_imp_is_zero_row_upt"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i < i + (1::'rows) \\<and>\n     \\<not> is_zero_row i A \\<and>\n     \\<not> is_zero_row (i + (1::'rows)) A \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'a))\n     < (LEAST n. A $ (i + (1::'rows)) $ n \\<noteq> (0::'a))\n  is_zero_row ?i ?A \\<Longrightarrow> is_zero_row_upt_k ?i ?k ?A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i < i + (1::'rows) \\<and>\n       \\<not> is_zero_row_upt_k i k A \\<and>\n       \\<not> is_zero_row_upt_k (i + (1::'rows)) k A \\<longrightarrow>\n       (LEAST n. A $ i $ n \\<noteq> (0::'a))\n       < (LEAST n. A $ (i + (1::'rows)) $ n \\<noteq> (0::'a))", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     i < i + (1::'rows) \\<and>\n     \\<not> is_zero_row_upt_k i k A \\<and>\n     \\<not> is_zero_row_upt_k (i + (1::'rows)) k A \\<longrightarrow>\n     (LEAST n. A $ i $ n \\<noteq> (0::'a))\n     < (LEAST n. A $ (i + (1::'rows)) $ n \\<noteq> (0::'a))\n\ngoal (2 subgoals):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n 2. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "show \"\\<forall>i. \\<not> is_zero_row_upt_k i k A \\<longrightarrow> (\\<forall>j. i \\<noteq> j \\<longrightarrow> A $ j $ (LEAST n. A $ i $ n \\<noteq> 0) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "using rref_condition4[OF rref] is_zero_row_imp_is_zero_row_upt"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<not> is_zero_row i A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))\n  is_zero_row ?i ?A \\<Longrightarrow> is_zero_row_upt_k ?i ?k ?A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n       (\\<forall>j.\n           i \\<noteq> j \\<longrightarrow>\n           A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<not> is_zero_row_upt_k i k A \\<longrightarrow>\n     (\\<forall>j.\n         i \\<noteq> j \\<longrightarrow>\n         A $ j $ (LEAST n. A $ i $ n \\<noteq> (0::'a)) = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "show \"\\<forall>i. is_zero_row_upt_k i k A \\<longrightarrow> \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       is_zero_row_upt_k i k A \\<longrightarrow>\n       \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)", "proof (auto, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "assume zero_i_k: \"is_zero_row_upt_k i k A\" and i_less_j: \"i < j\"\nand not_zero_j_k:\"\\<not> is_zero_row_upt_k j k A\""], ["proof (state)\nthis:\n  is_zero_row_upt_k i k A\n  i < j\n  \\<not> is_zero_row_upt_k j k A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "have not_zero_j: \"\\<not> is_zero_row j A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row j A", "using is_zero_row_imp_is_zero_row_upt not_zero_j_k"], ["proof (prove)\nusing this:\n  is_zero_row ?i ?A \\<Longrightarrow> is_zero_row_upt_k ?i ?k ?A\n  \\<not> is_zero_row_upt_k j k A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row j A", "by blast"], ["proof (state)\nthis:\n  \\<not> is_zero_row j A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "hence not_zero_i: \"\\<not> is_zero_row i A\""], ["proof (prove)\nusing this:\n  \\<not> is_zero_row j A\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A", "using rref_condition1[OF rref] i_less_j"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row j A\n  \\<forall>i.\n     is_zero_row i A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row j A)\n  i < j\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row i A", "by blast"], ["proof (state)\nthis:\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "have Least_less: \"(LEAST n. A $ i $ n \\<noteq> 0) < (LEAST n. A $ j $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ i $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ j $ n \\<noteq> (0::'a))", "by (rule rref_condition3_equiv[OF rref i_less_j not_zero_i not_zero_j])"], ["proof (state)\nthis:\n  (LEAST n. A $ i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ j $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (LEAST n. A $ i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ j $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "have \"(LEAST n. A $ j $ n \\<noteq> 0) < (LEAST n. A $ i $ n \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ j $ n \\<noteq> (0::'a))\n    < (LEAST n. A $ i $ n \\<noteq> (0::'a))", "proof (rule LeastI2_ex)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a. A $ i $ a \\<noteq> (0::'a)\n 2. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "show \"\\<exists>a. A $ i $ a \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. A $ i $ a \\<noteq> (0::'a)", "using not_zero_i"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row i A\n\ngoal (1 subgoal):\n 1. \\<exists>a. A $ i $ a \\<noteq> (0::'a)", "unfolding is_zero_row_def is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j.\n             mod_type_class.to_nat j < ncols A \\<longrightarrow>\n             A $ i $ j = (0::'a))\n\ngoal (1 subgoal):\n 1. \\<exists>a. A $ i $ a \\<noteq> (0::'a)", "by fast"], ["proof (state)\nthis:\n  \\<exists>a. A $ i $ a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "assume Aix_not_0: \"A $ i $ x \\<noteq> 0\""], ["proof (state)\nthis:\n  A $ i $ x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "have k_less_x: \"k \\<le> to_nat x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> mod_type_class.to_nat x", "using zero_i_k Aix_not_0"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k i k A\n  A $ i $ x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. k \\<le> mod_type_class.to_nat x", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < k \\<longrightarrow> A $ i $ j = (0::'a)\n  A $ i $ x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. k \\<le> mod_type_class.to_nat x", "by force"], ["proof (state)\nthis:\n  k \\<le> mod_type_class.to_nat x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "hence k_less_ncols: \"k < ncols A\""], ["proof (prove)\nusing this:\n  k \\<le> mod_type_class.to_nat x\n\ngoal (1 subgoal):\n 1. k < ncols A", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  k \\<le> mod_type_class.to_nat x\n\ngoal (1 subgoal):\n 1. k < CARD('cols)", "using to_nat_less_card[of x]"], ["proof (prove)\nusing this:\n  k \\<le> mod_type_class.to_nat x\n  mod_type_class.to_nat x < CARD('cols)\n\ngoal (1 subgoal):\n 1. k < CARD('cols)", "by simp"], ["proof (state)\nthis:\n  k < ncols A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "obtain s where Ajs_not_zero: \"A $ j $ s \\<noteq> 0\" and s_less_k: \"to_nat s < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>A $ j $ s \\<noteq> (0::'a);\n         mod_type_class.to_nat s < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_zero_j_k"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row_upt_k j k A\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>A $ j $ s \\<noteq> (0::'a);\n         mod_type_class.to_nat s < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>ja.\n             mod_type_class.to_nat ja < k \\<longrightarrow>\n             A $ j $ ja = (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>A $ j $ s \\<noteq> (0::'a);\n         mod_type_class.to_nat s < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A $ j $ s \\<noteq> (0::'a)\n  mod_type_class.to_nat s < k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "have \"(LEAST n. A $ j $ n \\<noteq> 0) \\<le> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ j $ n \\<noteq> (0::'a)) \\<le> s", "using Ajs_not_zero Least_le"], ["proof (prove)\nusing this:\n  A $ j $ s \\<noteq> (0::'a)\n  ?P ?k \\<Longrightarrow> (LEAST x. ?P x) \\<le> ?k\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ j $ n \\<noteq> (0::'a)) \\<le> s", "by fast"], ["proof (state)\nthis:\n  (LEAST n. A $ j $ n \\<noteq> (0::'a)) \\<le> s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "also"], ["proof (state)\nthis:\n  (LEAST n. A $ j $ n \\<noteq> (0::'a)) \\<le> s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "have \"... = from_nat (to_nat s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = mod_type_class.from_nat (mod_type_class.to_nat s)", "unfolding from_nat_to_nat_id"], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s", ".."], ["proof (state)\nthis:\n  s = mod_type_class.from_nat (mod_type_class.to_nat s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "also"], ["proof (state)\nthis:\n  s = mod_type_class.from_nat (mod_type_class.to_nat s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "have \"... < from_nat k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.from_nat (mod_type_class.to_nat s)\n    < mod_type_class.from_nat k", "by (rule from_nat_mono[OF s_less_k k_less_ncols[unfolded ncols_def]])"], ["proof (state)\nthis:\n  mod_type_class.from_nat (mod_type_class.to_nat s)\n  < mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "also"], ["proof (state)\nthis:\n  mod_type_class.from_nat (mod_type_class.to_nat s)\n  < mod_type_class.from_nat k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "have \"... \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.from_nat k \\<le> x", "using k_less_x leD not_le_imp_less to_nat_le"], ["proof (prove)\nusing this:\n  k \\<le> mod_type_class.to_nat x\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n  \\<not> ?y \\<le> ?x \\<Longrightarrow> ?x < ?y\n  ?y < mod_type_class.from_nat ?k \\<Longrightarrow>\n  mod_type_class.to_nat ?y < ?k\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat k \\<le> x", "by fast"], ["proof (state)\nthis:\n  mod_type_class.from_nat k \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       A $ i $ x \\<noteq> (0::'a) \\<Longrightarrow>\n       (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "finally"], ["proof (chain)\npicking this:\n  (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "show \"(LEAST n. A $ j $ n \\<noteq> 0) < x\""], ["proof (prove)\nusing this:\n  (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x\n\ngoal (1 subgoal):\n 1. (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x", "."], ["proof (state)\nthis:\n  (LEAST n. A $ j $ n \\<noteq> (0::'a)) < x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ j $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ i $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>is_zero_row_upt_k i k A; i < j;\n        \\<not> is_zero_row_upt_k j k A\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST n. A $ i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ j $ n \\<noteq> (0::'a))\n  (LEAST n. A $ j $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ i $ n \\<noteq> (0::'a))", "show False"], ["proof (prove)\nusing this:\n  (LEAST n. A $ i $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ j $ n \\<noteq> (0::'a))\n  (LEAST n. A $ j $ n \\<noteq> (0::'a))\n  < (LEAST n. A $ i $ n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i.\n     is_zero_row_upt_k i k A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j k A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rref_first_position_zero_imp_column_0:\nfixes A::\"'a::{one,zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand A_00: \"A $ 0 $ 0 = 0\"\nshows \"column 0 A = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. column (0::'cols) A = 0", "proof (unfold column_def, vector, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. A $ i $ (0::'cols) = (0::'a)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. A $ i $ (0::'cols) = (0::'a)", "have \"is_zero_row_upt_k 0 1 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k (0::'rows) 1 A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < 1 \\<longrightarrow>\n       A $ (0::'rows) $ j = (0::'a)", "using A_00"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < 1 \\<longrightarrow>\n       A $ (0::'rows) $ j = (0::'a)", "by (metis One_nat_def less_Suc0 to_nat_eq_0)"], ["proof (state)\nthis:\n  is_zero_row_upt_k (0::'rows) 1 A\n\ngoal (1 subgoal):\n 1. \\<And>i. A $ i $ (0::'cols) = (0::'a)", "hence \"is_zero_row_upt_k i 1 A\""], ["proof (prove)\nusing this:\n  is_zero_row_upt_k (0::'rows) 1 A\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i 1 A", "using rref_upt_condition1[OF rref_implies_rref_upt[OF rref]]"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k (0::'rows) 1 A\n  \\<forall>i.\n     is_zero_row_upt_k i ?k A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j ?k A)\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i 1 A", "using least_mod_type less_le"], ["proof (prove)\nusing this:\n  is_zero_row_upt_k (0::'rows) 1 A\n  \\<forall>i.\n     is_zero_row_upt_k i ?k A \\<longrightarrow>\n     \\<not> (\\<exists>j>i. \\<not> is_zero_row_upt_k j ?k A)\n  (0::?'a) \\<le> ?n\n  (?x < ?y) = (?x \\<le> ?y \\<and> ?x \\<noteq> ?y)\n\ngoal (1 subgoal):\n 1. is_zero_row_upt_k i 1 A", "by metis"], ["proof (state)\nthis:\n  is_zero_row_upt_k i 1 A\n\ngoal (1 subgoal):\n 1. \\<And>i. A $ i $ (0::'cols) = (0::'a)", "thus \"A $ i $ 0 = 0\""], ["proof (prove)\nusing this:\n  is_zero_row_upt_k i 1 A\n\ngoal (1 subgoal):\n 1. A $ i $ (0::'cols) = (0::'a)", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < 1 \\<longrightarrow> A $ i $ j = (0::'a)\n\ngoal (1 subgoal):\n 1. A $ i $ (0::'cols) = (0::'a)", "using to_nat_eq_0"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     mod_type_class.to_nat j < 1 \\<longrightarrow> A $ i $ j = (0::'a)\n  (mod_type_class.to_nat ?x = 0) = (?x = (0::?'a))\n\ngoal (1 subgoal):\n 1. A $ i $ (0::'cols) = (0::'a)", "by blast"], ["proof (state)\nthis:\n  A $ i $ (0::'cols) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rref_first_element:\nfixes A::\"'a::{one,zero}^'cols::{mod_type}^'rows::{mod_type}\"\nassumes rref: \"reduced_row_echelon_form A\"\nand column_not_0: \"column 0 A \\<noteq> 0\"\nshows \"A $ 0 $ 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (1::'a)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "have A_00_not_0: \"A $ 0 $ 0 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (0::'a)", "proof (rule ccontr, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "assume A_00: \"A $ 0 $ 0 = 0\""], ["proof (state)\nthis:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)", "obtain i where Ai0: \"A $ i $ 0 \\<noteq> 0\" and i: \"i>0\""], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>A $ i $ (0::'cols) \\<noteq> (0::'a);\n         (0::'rows) < i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using column_not_0"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)\n  column (0::'cols) A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>A $ i $ (0::'cols) \\<noteq> (0::'a);\n         (0::'rows) < i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding column_def"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)\n  (\\<chi>i. A $ i $ (0::'cols)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>A $ i $ (0::'cols) \\<noteq> (0::'a);\n         (0::'rows) < i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis column_def rref rref_first_position_zero_imp_column_0)"], ["proof (state)\nthis:\n  A $ i $ (0::'cols) \\<noteq> (0::'a)\n  (0::'rows) < i\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "have \"is_zero_row_upt_k 0 1 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_zero_row_upt_k (0::'rows) 1 A", "unfolding is_zero_row_upt_k_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < 1 \\<longrightarrow>\n       A $ (0::'rows) $ j = (0::'a)", "using A_00"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       mod_type_class.to_nat j < 1 \\<longrightarrow>\n       A $ (0::'rows) $ j = (0::'a)", "by (metis One_nat_def less_Suc0 to_nat_eq_0)"], ["proof (state)\nthis:\n  is_zero_row_upt_k (0::'rows) 1 A\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_zero_row_upt_k (0::'rows) 1 A\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "have \"\\<not> is_zero_row_upt_k i 1 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i 1 A", "using Ai0"], ["proof (prove)\nusing this:\n  A $ i $ (0::'cols) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> is_zero_row_upt_k i 1 A", "by (metis is_zero_row_upt_k_def to_nat_0 zero_less_one)"], ["proof (state)\nthis:\n  \\<not> is_zero_row_upt_k i 1 A\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  is_zero_row_upt_k (0::'rows) 1 A\n  \\<not> is_zero_row_upt_k i 1 A", "have \"\\<not> reduced_row_echelon_form A\""], ["proof (prove)\nusing this:\n  is_zero_row_upt_k (0::'rows) 1 A\n  \\<not> is_zero_row_upt_k i 1 A\n\ngoal (1 subgoal):\n 1. \\<not> reduced_row_echelon_form A", "by (metis A_00 column_not_0 rref_first_position_zero_imp_column_0)"], ["proof (state)\nthis:\n  \\<not> reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) = (0::'a) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. False", "using rref"], ["proof (prove)\nusing this:\n  \\<not> reduced_row_echelon_form A\n  reduced_row_echelon_form A\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A $ (0::'rows) $ (0::'cols) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "assume A_00_not_1: \"A $ 0 $ 0 \\<noteq> 1\""], ["proof (state)\nthis:\n  A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "have Least_eq_0: \"(LEAST n. A $ 0 $ n \\<noteq> 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (0::'cols)", "proof (rule Least_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (0::'a)\n 2. \\<And>y.\n       A $ (0::'rows) $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       (0::'cols) \\<le> y", "show \"A $ 0 $ 0 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (0::'a)", "by (rule A_00_not_0)"], ["proof (state)\nthis:\n  A $ (0::'rows) $ (0::'cols) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       A $ (0::'rows) $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       (0::'cols) \\<le> y", "show \"\\<And>y. A $ 0 $ y \\<noteq> 0 \\<Longrightarrow> 0 \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       A $ (0::'rows) $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       (0::'cols) \\<le> y", "using least_mod_type"], ["proof (prove)\nusing this:\n  (0::?'a) \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       A $ (0::'rows) $ y \\<noteq> (0::'a) \\<Longrightarrow>\n       (0::'cols) \\<le> y", "."], ["proof (state)\nthis:\n  A $ (0::'rows) $ ?y \\<noteq> (0::'a) \\<Longrightarrow> (0::'cols) \\<le> ?y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (0::'cols)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (0::'cols)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "have \"\\<not> is_zero_row 0 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (0::'rows) A", "unfolding is_zero_row_def is_zero_row_upt_k_def ncols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j.\n               mod_type_class.to_nat j < CARD('cols) \\<longrightarrow>\n               A $ (0::'rows) $ j = (0::'a))", "using A_00_not_0"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j.\n               mod_type_class.to_nat j < CARD('cols) \\<longrightarrow>\n               A $ (0::'rows) $ j = (0::'a))", "by auto"], ["proof (state)\nthis:\n  \\<not> is_zero_row (0::'rows) A\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (0::'cols)\n  \\<not> is_zero_row (0::'rows) A", "have \"A $ 0 $ (LEAST n. A $ 0 $ n \\<noteq> 0) = 1\""], ["proof (prove)\nusing this:\n  (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (0::'cols)\n  \\<not> is_zero_row (0::'rows) A\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) =\n    (1::'a)", "using rref_condition2[OF rref]"], ["proof (prove)\nusing this:\n  (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (0::'cols)\n  \\<not> is_zero_row (0::'rows) A\n  \\<forall>i.\n     \\<not> is_zero_row i A \\<longrightarrow>\n     A $ i $ (LEAST k. A $ i $ k \\<noteq> (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) =\n    (1::'a)", "by fast"], ["proof (state)\nthis:\n  A $ (0::'rows) $ (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (LEAST n. A $ (0::'rows) $ n \\<noteq> (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. False", "unfolding Least_eq_0"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (1::'a)\n\ngoal (1 subgoal):\n 1. False", "using A_00_not_1"], ["proof (prove)\nusing this:\n  A $ (0::'rows) $ (0::'cols) = (1::'a)\n  A $ (0::'rows) $ (0::'cols) \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}