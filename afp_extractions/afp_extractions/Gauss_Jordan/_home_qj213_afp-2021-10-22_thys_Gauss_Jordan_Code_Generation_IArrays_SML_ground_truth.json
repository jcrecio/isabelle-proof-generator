{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan/Code_Generation_IArrays_SML.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan", "problem_names": ["lemma gcd_integer_code[code]:\n\"gcd_integer l k = \\<bar>if l = (0::integer) then k else gcd_integer l (\\<bar>k\\<bar> mod \\<bar>l\\<bar>)\\<bar>\"", "lemma gcd_code[code]:\n\"gcd a b = int_of_integer (gcd_integer (of_int a) (of_int b))\""], "translations": [["", "lemma gcd_integer_code[code]:\n\"gcd_integer l k = \\<bar>if l = (0::integer) then k else gcd_integer l (\\<bar>k\\<bar> mod \\<bar>l\\<bar>)\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_integer l k =\n    \\<bar>if l = 0 then k\n          else gcd_integer l (\\<bar>k\\<bar> mod \\<bar>l\\<bar>)\\<bar>", "apply (transfer)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       gcd l k =\n       \\<bar>if l = 0 then k\n             else gcd l (\\<bar>k\\<bar> mod \\<bar>l\\<bar>)\\<bar>", "using gcd_code_int"], ["proof (prove)\nusing this:\n  gcd ?k ?l =\n  \\<bar>if ?l = 0 then ?k\n        else gcd ?l (\\<bar>?k\\<bar> mod \\<bar>?l\\<bar>)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       gcd l k =\n       \\<bar>if l = 0 then k\n             else gcd l (\\<bar>k\\<bar> mod \\<bar>l\\<bar>)\\<bar>", "by (metis gcd.commute)"], ["", "end"], ["", "code_printing\n constant \"abs :: integer => _\" \\<rightharpoonup> (SML) \"IntInf.abs\"\n | constant \"gcd_integer :: integer => _ => _\" \\<rightharpoonup> (SML) \"(PolyML.IntInf.gcd ((_),(_)))\""], ["", "(*Only for Poly/ML*)\n (* | constant \"gcd_integer :: integer => _ => _\" \\<rightharpoonup> (SML) \"(MLton.IntInf.gcd ((_),(_)))\"*) (*Only for MLton*)"], ["", "lemma gcd_code[code]:\n\"gcd a b = int_of_integer (gcd_integer (of_int a) (of_int b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd a b = int_of_integer (gcd_integer (of_int a) (of_int b))", "by (metis gcd_integer.abs_eq int_of_integer_integer_of_int integer_of_int_eq_of_int)"], ["", "code_printing\n  constant \"abs :: real => real\" \\<rightharpoonup>\n    (SML) \"Real.abs\""], ["", "declare [[code drop: \"abs :: real \\<Rightarrow> real\"]]"], ["", "text\\<open>There are several ways to serialize div and mod. The following ones are four examples of it:\\<close>"], ["", "(*The times are obtained after computing the rref of a 100x100 rational matrix.*)\n\n(* 21.484 seconds*)\n(*\ncode_printing\nconstant \"divmod_integer :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.divMod ((_),(_)))\"\n*)\n\n(*19.04 seconds*)\n(*\ncode_printing\nconstant \"(div) :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.div ((_), (_)))\"\n| constant \"(mod) :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.mod ((_), (_)))\"\n*)\n\n(*18.832 seconds*)\n(*\ncode_printing\nconstant \"(div) :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.quot ((_), (_)))\"\n| constant \"(mod) :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.rem ((_), (_)))\"\n*)\n\n(*18.792 seconds*)\n(*\ncode_printing\nconstant \"divmod_integer :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.quotRem ((_),(_)))\"\n*)\n\n(*Thus, the best option for our development is:*)"], ["", "code_printing\nconstant \"divmod_integer :: integer => _ => _\" \\<rightharpoonup> (SML) \"(IntInf.quotRem ((_),(_)))\""], ["", "export_code\n  print_rank_real\n  print_rank_rat\n  print_rank_z2\n  print_rank\n  print_result_real\n  print_result_rat\n  print_result_z2\n  print_result_Gauss\n  print_det_rat\n  print_det_real\n  print_det\n  print_inverse_real\n  print_inverse_rat\n  print_inverse\n  print_system_rat\n  print_system\n  in SML module_name \"Gauss_SML\""], ["", "(*file \"Gauss_SML.sml\"*)\n  \n(* For the Mathematica bug:*)\n\n(*\nexport_code\n  print_rank_real\n  print_rank_rat\n  print_rank_z2\n  print_rank\n  print_result_real\n  print_result_rat\n  print_result_z2\n  print_result_Gauss\n  print_det_rat \n  print_det_real\n  print_det\n  print_inverse_real\n  print_inverse_rat\n  print_inverse\n  print_system_rat\n  print_system\n\n  bigMatrix\n  in SML module_name \"Gauss_SML\" file \"Gauss_SML.sml\"\n*)"], ["", "end"]]}